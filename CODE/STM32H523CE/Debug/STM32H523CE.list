
STM32H523CE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a948  08000254  08000254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  0800ab9c  0800ab9c  0000bb9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aeec  0800aeec  0000c070  2**0
                  CONTENTS
  4 .ARM          00000008  0800aeec  0800aeec  0000beec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aef4  0800aef4  0000c070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aef4  0800aef4  0000bef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aef8  0800aef8  0000bef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800aefc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  20000070  0800af6c  0000c070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  0800af6c  0000c4a8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000c070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b608  00000000  00000000  0000c0a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dc7  00000000  00000000  000276ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001740  00000000  00000000  0002a478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001237  00000000  00000000  0002bbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cef8  00000000  00000000  0002cdef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d60e  00000000  00000000  00059ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011fa42  00000000  00000000  000772f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00196d37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d54  00000000  00000000  00196d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0019dad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000254 <__do_global_dtors_aux>:
 8000254:	b510      	push	{r4, lr}
 8000256:	4c05      	ldr	r4, [pc, #20]	@ (800026c <__do_global_dtors_aux+0x18>)
 8000258:	7823      	ldrb	r3, [r4, #0]
 800025a:	b933      	cbnz	r3, 800026a <__do_global_dtors_aux+0x16>
 800025c:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x1c>)
 800025e:	b113      	cbz	r3, 8000266 <__do_global_dtors_aux+0x12>
 8000260:	4804      	ldr	r0, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x20>)
 8000262:	f3af 8000 	nop.w
 8000266:	2301      	movs	r3, #1
 8000268:	7023      	strb	r3, [r4, #0]
 800026a:	bd10      	pop	{r4, pc}
 800026c:	20000070 	.word	0x20000070
 8000270:	00000000 	.word	0x00000000
 8000274:	0800ab84 	.word	0x0800ab84

08000278 <frame_dummy>:
 8000278:	b508      	push	{r3, lr}
 800027a:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <frame_dummy+0x10>)
 800027c:	b11b      	cbz	r3, 8000286 <frame_dummy+0xe>
 800027e:	4903      	ldr	r1, [pc, #12]	@ (800028c <frame_dummy+0x14>)
 8000280:	4803      	ldr	r0, [pc, #12]	@ (8000290 <frame_dummy+0x18>)
 8000282:	f3af 8000 	nop.w
 8000286:	bd08      	pop	{r3, pc}
 8000288:	00000000 	.word	0x00000000
 800028c:	20000074 	.word	0x20000074
 8000290:	0800ab84 	.word	0x0800ab84

08000294 <__aeabi_uldivmod>:
 8000294:	b953      	cbnz	r3, 80002ac <__aeabi_uldivmod+0x18>
 8000296:	b94a      	cbnz	r2, 80002ac <__aeabi_uldivmod+0x18>
 8000298:	2900      	cmp	r1, #0
 800029a:	bf08      	it	eq
 800029c:	2800      	cmpeq	r0, #0
 800029e:	bf1c      	itt	ne
 80002a0:	f04f 31ff 	movne.w	r1, #4294967295
 80002a4:	f04f 30ff 	movne.w	r0, #4294967295
 80002a8:	f000 b97e 	b.w	80005a8 <__aeabi_idiv0>
 80002ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b4:	f000 f806 	bl	80002c4 <__udivmoddi4>
 80002b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c0:	b004      	add	sp, #16
 80002c2:	4770      	bx	lr

080002c4 <__udivmoddi4>:
 80002c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ca:	460c      	mov	r4, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14d      	bne.n	800036c <__udivmoddi4+0xa8>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	460f      	mov	r7, r1
 80002d4:	4684      	mov	ip, r0
 80002d6:	4696      	mov	lr, r2
 80002d8:	fab2 f382 	clz	r3, r2
 80002dc:	d960      	bls.n	80003a0 <__udivmoddi4+0xdc>
 80002de:	b14b      	cbz	r3, 80002f4 <__udivmoddi4+0x30>
 80002e0:	fa02 fe03 	lsl.w	lr, r2, r3
 80002e4:	f1c3 0220 	rsb	r2, r3, #32
 80002e8:	409f      	lsls	r7, r3
 80002ea:	fa00 fc03 	lsl.w	ip, r0, r3
 80002ee:	fa20 f202 	lsr.w	r2, r0, r2
 80002f2:	4317      	orrs	r7, r2
 80002f4:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f8:	fa1f f48e 	uxth.w	r4, lr
 80002fc:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000300:	fbb7 f1f6 	udiv	r1, r7, r6
 8000304:	fb06 7711 	mls	r7, r6, r1, r7
 8000308:	fb01 f004 	mul.w	r0, r1, r4
 800030c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000310:	4290      	cmp	r0, r2
 8000312:	d908      	bls.n	8000326 <__udivmoddi4+0x62>
 8000314:	eb1e 0202 	adds.w	r2, lr, r2
 8000318:	f101 37ff 	add.w	r7, r1, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x60>
 800031e:	4290      	cmp	r0, r2
 8000320:	f200 812d 	bhi.w	800057e <__udivmoddi4+0x2ba>
 8000324:	4639      	mov	r1, r7
 8000326:	1a12      	subs	r2, r2, r0
 8000328:	fa1f fc8c 	uxth.w	ip, ip
 800032c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000330:	fb06 2210 	mls	r2, r6, r0, r2
 8000334:	fb00 f404 	mul.w	r4, r0, r4
 8000338:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800033c:	4564      	cmp	r4, ip
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x8e>
 8000340:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x8c>
 800034a:	4564      	cmp	r4, ip
 800034c:	f200 811a 	bhi.w	8000584 <__udivmoddi4+0x2c0>
 8000350:	4610      	mov	r0, r2
 8000352:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000356:	ebac 0c04 	sub.w	ip, ip, r4
 800035a:	2100      	movs	r1, #0
 800035c:	b125      	cbz	r5, 8000368 <__udivmoddi4+0xa4>
 800035e:	fa2c f303 	lsr.w	r3, ip, r3
 8000362:	2200      	movs	r2, #0
 8000364:	e9c5 3200 	strd	r3, r2, [r5]
 8000368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800036c:	428b      	cmp	r3, r1
 800036e:	d905      	bls.n	800037c <__udivmoddi4+0xb8>
 8000370:	b10d      	cbz	r5, 8000376 <__udivmoddi4+0xb2>
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	2100      	movs	r1, #0
 8000378:	4608      	mov	r0, r1
 800037a:	e7f5      	b.n	8000368 <__udivmoddi4+0xa4>
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d14d      	bne.n	8000420 <__udivmoddi4+0x15c>
 8000384:	42a3      	cmp	r3, r4
 8000386:	f0c0 80f2 	bcc.w	800056e <__udivmoddi4+0x2aa>
 800038a:	4290      	cmp	r0, r2
 800038c:	f080 80ef 	bcs.w	800056e <__udivmoddi4+0x2aa>
 8000390:	4606      	mov	r6, r0
 8000392:	4623      	mov	r3, r4
 8000394:	4608      	mov	r0, r1
 8000396:	2d00      	cmp	r5, #0
 8000398:	d0e6      	beq.n	8000368 <__udivmoddi4+0xa4>
 800039a:	e9c5 6300 	strd	r6, r3, [r5]
 800039e:	e7e3      	b.n	8000368 <__udivmoddi4+0xa4>
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	f040 80a2 	bne.w	80004ea <__udivmoddi4+0x226>
 80003a6:	1a8a      	subs	r2, r1, r2
 80003a8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003ac:	fa1f f68e 	uxth.w	r6, lr
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb2 f4f7 	udiv	r4, r2, r7
 80003b6:	fb07 2014 	mls	r0, r7, r4, r2
 80003ba:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003be:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003c2:	fb06 f004 	mul.w	r0, r6, r4
 80003c6:	4290      	cmp	r0, r2
 80003c8:	d90f      	bls.n	80003ea <__udivmoddi4+0x126>
 80003ca:	eb1e 0202 	adds.w	r2, lr, r2
 80003ce:	f104 38ff 	add.w	r8, r4, #4294967295
 80003d2:	bf2c      	ite	cs
 80003d4:	f04f 0901 	movcs.w	r9, #1
 80003d8:	f04f 0900 	movcc.w	r9, #0
 80003dc:	4290      	cmp	r0, r2
 80003de:	d903      	bls.n	80003e8 <__udivmoddi4+0x124>
 80003e0:	f1b9 0f00 	cmp.w	r9, #0
 80003e4:	f000 80c8 	beq.w	8000578 <__udivmoddi4+0x2b4>
 80003e8:	4644      	mov	r4, r8
 80003ea:	1a12      	subs	r2, r2, r0
 80003ec:	fa1f fc8c 	uxth.w	ip, ip
 80003f0:	fbb2 f0f7 	udiv	r0, r2, r7
 80003f4:	fb07 2210 	mls	r2, r7, r0, r2
 80003f8:	fb00 f606 	mul.w	r6, r0, r6
 80003fc:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000400:	4566      	cmp	r6, ip
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x152>
 8000404:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000408:	f100 32ff 	add.w	r2, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x150>
 800040e:	4566      	cmp	r6, ip
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2c6>
 8000414:	4610      	mov	r0, r2
 8000416:	ebac 0c06 	sub.w	ip, ip, r6
 800041a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800041e:	e79d      	b.n	800035c <__udivmoddi4+0x98>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa04 fe01 	lsl.w	lr, r4, r1
 800042a:	fa22 f706 	lsr.w	r7, r2, r6
 800042e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000432:	40f4      	lsrs	r4, r6
 8000434:	408a      	lsls	r2, r1
 8000436:	431f      	orrs	r7, r3
 8000438:	ea4e 030c 	orr.w	r3, lr, ip
 800043c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000440:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000444:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fbb4 f0f8 	udiv	r0, r4, r8
 8000450:	fb08 4410 	mls	r4, r8, r0, r4
 8000454:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000458:	fb00 f90c 	mul.w	r9, r0, ip
 800045c:	45a1      	cmp	r9, r4
 800045e:	d90e      	bls.n	800047e <__udivmoddi4+0x1ba>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f100 3aff 	add.w	sl, r0, #4294967295
 8000466:	bf2c      	ite	cs
 8000468:	f04f 0b01 	movcs.w	fp, #1
 800046c:	f04f 0b00 	movcc.w	fp, #0
 8000470:	45a1      	cmp	r9, r4
 8000472:	d903      	bls.n	800047c <__udivmoddi4+0x1b8>
 8000474:	f1bb 0f00 	cmp.w	fp, #0
 8000478:	f000 8093 	beq.w	80005a2 <__udivmoddi4+0x2de>
 800047c:	4650      	mov	r0, sl
 800047e:	eba4 0409 	sub.w	r4, r4, r9
 8000482:	fa1f f983 	uxth.w	r9, r3
 8000486:	fbb4 f3f8 	udiv	r3, r4, r8
 800048a:	fb08 4413 	mls	r4, r8, r3, r4
 800048e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000492:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000496:	45a4      	cmp	ip, r4
 8000498:	d906      	bls.n	80004a8 <__udivmoddi4+0x1e4>
 800049a:	193c      	adds	r4, r7, r4
 800049c:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a0:	d201      	bcs.n	80004a6 <__udivmoddi4+0x1e2>
 80004a2:	45a4      	cmp	ip, r4
 80004a4:	d87a      	bhi.n	800059c <__udivmoddi4+0x2d8>
 80004a6:	4643      	mov	r3, r8
 80004a8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004ac:	eba4 040c 	sub.w	r4, r4, ip
 80004b0:	fba0 9802 	umull	r9, r8, r0, r2
 80004b4:	4544      	cmp	r4, r8
 80004b6:	46cc      	mov	ip, r9
 80004b8:	4643      	mov	r3, r8
 80004ba:	d302      	bcc.n	80004c2 <__udivmoddi4+0x1fe>
 80004bc:	d106      	bne.n	80004cc <__udivmoddi4+0x208>
 80004be:	45ce      	cmp	lr, r9
 80004c0:	d204      	bcs.n	80004cc <__udivmoddi4+0x208>
 80004c2:	3801      	subs	r0, #1
 80004c4:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c8:	eb68 0307 	sbc.w	r3, r8, r7
 80004cc:	b15d      	cbz	r5, 80004e6 <__udivmoddi4+0x222>
 80004ce:	ebbe 020c 	subs.w	r2, lr, ip
 80004d2:	eb64 0403 	sbc.w	r4, r4, r3
 80004d6:	fa04 f606 	lsl.w	r6, r4, r6
 80004da:	fa22 f301 	lsr.w	r3, r2, r1
 80004de:	40cc      	lsrs	r4, r1
 80004e0:	431e      	orrs	r6, r3
 80004e2:	e9c5 6400 	strd	r6, r4, [r5]
 80004e6:	2100      	movs	r1, #0
 80004e8:	e73e      	b.n	8000368 <__udivmoddi4+0xa4>
 80004ea:	fa02 fe03 	lsl.w	lr, r2, r3
 80004ee:	f1c3 0120 	rsb	r1, r3, #32
 80004f2:	fa04 f203 	lsl.w	r2, r4, r3
 80004f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000500:	fa20 f101 	lsr.w	r1, r0, r1
 8000504:	fa1f f68e 	uxth.w	r6, lr
 8000508:	fbb4 f0f7 	udiv	r0, r4, r7
 800050c:	430a      	orrs	r2, r1
 800050e:	fb07 4410 	mls	r4, r7, r0, r4
 8000512:	0c11      	lsrs	r1, r2, #16
 8000514:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000518:	fb00 f406 	mul.w	r4, r0, r6
 800051c:	428c      	cmp	r4, r1
 800051e:	d90e      	bls.n	800053e <__udivmoddi4+0x27a>
 8000520:	eb1e 0101 	adds.w	r1, lr, r1
 8000524:	f100 38ff 	add.w	r8, r0, #4294967295
 8000528:	bf2c      	ite	cs
 800052a:	f04f 0901 	movcs.w	r9, #1
 800052e:	f04f 0900 	movcc.w	r9, #0
 8000532:	428c      	cmp	r4, r1
 8000534:	d902      	bls.n	800053c <__udivmoddi4+0x278>
 8000536:	f1b9 0f00 	cmp.w	r9, #0
 800053a:	d02c      	beq.n	8000596 <__udivmoddi4+0x2d2>
 800053c:	4640      	mov	r0, r8
 800053e:	1b09      	subs	r1, r1, r4
 8000540:	b292      	uxth	r2, r2
 8000542:	fbb1 f4f7 	udiv	r4, r1, r7
 8000546:	fb07 1114 	mls	r1, r7, r4, r1
 800054a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054e:	fb04 f106 	mul.w	r1, r4, r6
 8000552:	4291      	cmp	r1, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x2a2>
 8000556:	eb1e 0202 	adds.w	r2, lr, r2
 800055a:	f104 38ff 	add.w	r8, r4, #4294967295
 800055e:	d201      	bcs.n	8000564 <__udivmoddi4+0x2a0>
 8000560:	4291      	cmp	r1, r2
 8000562:	d815      	bhi.n	8000590 <__udivmoddi4+0x2cc>
 8000564:	4644      	mov	r4, r8
 8000566:	1a52      	subs	r2, r2, r1
 8000568:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800056c:	e721      	b.n	80003b2 <__udivmoddi4+0xee>
 800056e:	1a86      	subs	r6, r0, r2
 8000570:	eb64 0303 	sbc.w	r3, r4, r3
 8000574:	2001      	movs	r0, #1
 8000576:	e70e      	b.n	8000396 <__udivmoddi4+0xd2>
 8000578:	3c02      	subs	r4, #2
 800057a:	4472      	add	r2, lr
 800057c:	e735      	b.n	80003ea <__udivmoddi4+0x126>
 800057e:	3902      	subs	r1, #2
 8000580:	4472      	add	r2, lr
 8000582:	e6d0      	b.n	8000326 <__udivmoddi4+0x62>
 8000584:	44f4      	add	ip, lr
 8000586:	3802      	subs	r0, #2
 8000588:	e6e3      	b.n	8000352 <__udivmoddi4+0x8e>
 800058a:	44f4      	add	ip, lr
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x152>
 8000590:	3c02      	subs	r4, #2
 8000592:	4472      	add	r2, lr
 8000594:	e7e7      	b.n	8000566 <__udivmoddi4+0x2a2>
 8000596:	3802      	subs	r0, #2
 8000598:	4471      	add	r1, lr
 800059a:	e7d0      	b.n	800053e <__udivmoddi4+0x27a>
 800059c:	3b02      	subs	r3, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e782      	b.n	80004a8 <__udivmoddi4+0x1e4>
 80005a2:	3802      	subs	r0, #2
 80005a4:	443c      	add	r4, r7
 80005a6:	e76a      	b.n	800047e <__udivmoddi4+0x1ba>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) //function used to print() in usart
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2b0a      	cmp	r3, #10
 80005b8:	d102      	bne.n	80005c0 <__io_putchar+0x14>
    __io_putchar('\r');
 80005ba:	200d      	movs	r0, #13
 80005bc:	f7ff fff6 	bl	80005ac <__io_putchar>
  }

  HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80005c0:	1d39      	adds	r1, r7, #4
 80005c2:	f04f 33ff 	mov.w	r3, #4294967295
 80005c6:	2201      	movs	r2, #1
 80005c8:	4803      	ldr	r0, [pc, #12]	@ (80005d8 <__io_putchar+0x2c>)
 80005ca:	f008 f98b 	bl	80088e4 <HAL_UART_Transmit>

  return 1;
 80005ce:	2301      	movs	r3, #1
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	200001dc 	.word	0x200001dc

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08e      	sub	sp, #56	@ 0x38
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f001 f945 	bl	8001870 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f8db 	bl	80007a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 fb8d 	bl	8000d08 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80005ee:	f000 f949 	bl	8000884 <MX_FDCAN1_Init>
  MX_I2C1_Init();
 80005f2:	f000 f98d 	bl	8000910 <MX_I2C1_Init>
  MX_TIM1_Init();
 80005f6:	f000 f9df 	bl	80009b8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005fa:	f000 fa91 	bl	8000b20 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80005fe:	f000 fae9 	bl	8000bd4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000602:	f000 fb33 	bl	8000c6c <MX_USART2_UART_Init>
  MX_ICACHE_Init();
 8000606:	f000 f9c3 	bl	8000990 <MX_ICACHE_Init>

  // Konfiguracja wiadomości



	 TxData_DME1[0] = 0x19 ;                     // LV_SWI_IGK=1, LV_F_N_ENG=0, LV_ACK_TCS=0, LV_ERR_GC=1, SF_TQD=1
 800060a:	4b59      	ldr	r3, [pc, #356]	@ (8000770 <main+0x194>)
 800060c:	2219      	movs	r2, #25
 800060e:	701a      	strb	r2, [r3, #0]
	 TxData_DME1[1] = 0x4C;      // TQI_TQR_CAN = 75%
 8000610:	4b57      	ldr	r3, [pc, #348]	@ (8000770 <main+0x194>)
 8000612:	224c      	movs	r2, #76	@ 0x4c
 8000614:	705a      	strb	r2, [r3, #1]
	 uint16_t engineSpeed = (uint16_t)(3000 / 0.15625);
 8000616:	f44f 4396 	mov.w	r3, #19200	@ 0x4b00
 800061a:	86fb      	strh	r3, [r7, #54]	@ 0x36
	 TxData_DME1[2] = 0xD0; // N_ENG LSB
 800061c:	4b54      	ldr	r3, [pc, #336]	@ (8000770 <main+0x194>)
 800061e:	22d0      	movs	r2, #208	@ 0xd0
 8000620:	709a      	strb	r2, [r3, #2]
	 TxData_DME1[3] = (uint8_t)(engineSpeed >> 8);   // N_ENG MSB
 8000622:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000624:	0a1b      	lsrs	r3, r3, #8
 8000626:	b29b      	uxth	r3, r3
 8000628:	b2da      	uxtb	r2, r3
 800062a:	4b51      	ldr	r3, [pc, #324]	@ (8000770 <main+0x194>)
 800062c:	70da      	strb	r2, [r3, #3]
	 TxData_DME1[4] = (uint8_t)(60 / 0.390625);      // TQI_CAN = 60%
 800062e:	4b50      	ldr	r3, [pc, #320]	@ (8000770 <main+0x194>)
 8000630:	2299      	movs	r2, #153	@ 0x99
 8000632:	711a      	strb	r2, [r3, #4]
	 TxData_DME1[5] = (uint8_t)(5 / 0.390625);       // TQ_LOSS_CAN = 5%
 8000634:	4b4e      	ldr	r3, [pc, #312]	@ (8000770 <main+0x194>)
 8000636:	220c      	movs	r2, #12
 8000638:	715a      	strb	r2, [r3, #5]
	 TxData_DME1[6] = 0b11000000;                   // ERR_AMT_CAN bits
 800063a:	4b4d      	ldr	r3, [pc, #308]	@ (8000770 <main+0x194>)
 800063c:	22c0      	movs	r2, #192	@ 0xc0
 800063e:	719a      	strb	r2, [r3, #6]
	 TxData_DME1[7] = (uint8_t)(80 / 0.390625);      // TQI_MAF_CAN = 80%
 8000640:	4b4b      	ldr	r3, [pc, #300]	@ (8000770 <main+0x194>)
 8000642:	22cc      	movs	r2, #204	@ 0xcc
 8000644:	71da      	strb	r2, [r3, #7]

  TxHeader_DME1.Identifier = 0x316;  // ID ramki
 8000646:	4b4b      	ldr	r3, [pc, #300]	@ (8000774 <main+0x198>)
 8000648:	f240 3216 	movw	r2, #790	@ 0x316
 800064c:	601a      	str	r2, [r3, #0]
  TxHeader_DME1.IdType = FDCAN_STANDARD_ID;
 800064e:	4b49      	ldr	r3, [pc, #292]	@ (8000774 <main+0x198>)
 8000650:	2200      	movs	r2, #0
 8000652:	605a      	str	r2, [r3, #4]
  TxHeader_DME1.TxFrameType = FDCAN_DATA_FRAME;
 8000654:	4b47      	ldr	r3, [pc, #284]	@ (8000774 <main+0x198>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  TxHeader_DME1.DataLength = FDCAN_DLC_BYTES_8;
 800065a:	4b46      	ldr	r3, [pc, #280]	@ (8000774 <main+0x198>)
 800065c:	2208      	movs	r2, #8
 800065e:	60da      	str	r2, [r3, #12]
  TxHeader_DME1.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000660:	4b44      	ldr	r3, [pc, #272]	@ (8000774 <main+0x198>)
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]
  TxHeader_DME1.BitRateSwitch = FDCAN_BRS_OFF;
 8000666:	4b43      	ldr	r3, [pc, #268]	@ (8000774 <main+0x198>)
 8000668:	2200      	movs	r2, #0
 800066a:	615a      	str	r2, [r3, #20]
  TxHeader_DME1.FDFormat = FDCAN_CLASSIC_CAN;
 800066c:	4b41      	ldr	r3, [pc, #260]	@ (8000774 <main+0x198>)
 800066e:	2200      	movs	r2, #0
 8000670:	619a      	str	r2, [r3, #24]
  TxHeader_DME1.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000672:	4b40      	ldr	r3, [pc, #256]	@ (8000774 <main+0x198>)
 8000674:	2200      	movs	r2, #0
 8000676:	61da      	str	r2, [r3, #28]



  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterIndex = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	623b      	str	r3, [r7, #32]
  sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	@ 0x24
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000680:	2301      	movs	r3, #1
 8000682:	62bb      	str	r3, [r7, #40]	@ 0x28
  sFilterConfig.FilterID1 = 0x316;
 8000684:	f240 3316 	movw	r3, #790	@ 0x316
 8000688:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sFilterConfig.FilterID2 = 0x1FFFFFFF;
 800068a:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 800068e:	633b      	str	r3, [r7, #48]	@ 0x30

  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	4619      	mov	r1, r3
 8000696:	4838      	ldr	r0, [pc, #224]	@ (8000778 <main+0x19c>)
 8000698:	f001 fd5c 	bl	8002154 <HAL_FDCAN_ConfigFilter>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d002      	beq.n	80006a8 <main+0xcc>
      /* Filter configuration Error */
      printf("[CAN] Unable to configure!\n");
 80006a2:	4836      	ldr	r0, [pc, #216]	@ (800077c <main+0x1a0>)
 80006a4:	f009 fbf8 	bl	8009e98 <puts>
  }
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 80006a8:	4833      	ldr	r0, [pc, #204]	@ (8000778 <main+0x19c>)
 80006aa:	f001 fdad 	bl	8002208 <HAL_FDCAN_Start>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <main+0xdc>
  {
   Error_Handler();
 80006b4:	f000 fcbc 	bl	8001030 <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80006b8:	2200      	movs	r2, #0
 80006ba:	2101      	movs	r1, #1
 80006bc:	482e      	ldr	r0, [pc, #184]	@ (8000778 <main+0x19c>)
 80006be:	f001 ff47 	bl	8002550 <HAL_FDCAN_ActivateNotification>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <main+0xf0>
  {
    /* Notification Error */
    Error_Handler();
 80006c8:	f000 fcb2 	bl	8001030 <Error_Handler>
  }
  printf("starting\n");
 80006cc:	482c      	ldr	r0, [pc, #176]	@ (8000780 <main+0x1a4>)
 80006ce:	f009 fbe3 	bl	8009e98 <puts>
  HAL_GPIO_TogglePin(D1_GPIO_Port, D1_Pin);
 80006d2:	2110      	movs	r1, #16
 80006d4:	482b      	ldr	r0, [pc, #172]	@ (8000784 <main+0x1a8>)
 80006d6:	f002 fc03 	bl	8002ee0 <HAL_GPIO_TogglePin>
  //HAL_GPIO_WritePin(GPIO_PIN_3, GPIOB, GPIO_PIN_RESET);

  uint8_t frame[] = {0xD0, 0x07, 0xBF, 0x5B, 0x43, 0x83, 0x2E, 0x3F, 0xE2};
 80006da:	4a2b      	ldr	r2, [pc, #172]	@ (8000788 <main+0x1ac>)
 80006dc:	f107 0310 	add.w	r3, r7, #16
 80006e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80006e2:	c303      	stmia	r3!, {r0, r1}
 80006e4:	701a      	strb	r2, [r3, #0]
  uint8_t frame2[] = {0xD0, 0x07, 0xBF, 0x5B, 0x63, 0x83, 0x0E, 0x3F, 0xE2};
 80006e6:	4a29      	ldr	r2, [pc, #164]	@ (800078c <main+0x1b0>)
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80006ec:	c303      	stmia	r3!, {r0, r1}
 80006ee:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, frame, sizeof(frame), HAL_MAX_DELAY);
 80006f0:	f107 0110 	add.w	r1, r7, #16
 80006f4:	f04f 33ff 	mov.w	r3, #4294967295
 80006f8:	2209      	movs	r2, #9
 80006fa:	4825      	ldr	r0, [pc, #148]	@ (8000790 <main+0x1b4>)
 80006fc:	f008 f8f2 	bl	80088e4 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, frame2, sizeof(frame), HAL_MAX_DELAY);
 8000700:	1d39      	adds	r1, r7, #4
 8000702:	f04f 33ff 	mov.w	r3, #4294967295
 8000706:	2209      	movs	r2, #9
 8000708:	4821      	ldr	r0, [pc, #132]	@ (8000790 <main+0x1b4>)
 800070a:	f008 f8eb 	bl	80088e4 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 800070e:	481a      	ldr	r0, [pc, #104]	@ (8000778 <main+0x19c>)
 8000710:	f001 ff0c 	bl	800252c <HAL_FDCAN_GetTxFifoFreeLevel>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d00d      	beq.n	8000736 <main+0x15a>
	      if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_DME1, TxData_DME1) != HAL_OK) {
 800071a:	4a15      	ldr	r2, [pc, #84]	@ (8000770 <main+0x194>)
 800071c:	4915      	ldr	r1, [pc, #84]	@ (8000774 <main+0x198>)
 800071e:	4816      	ldr	r0, [pc, #88]	@ (8000778 <main+0x19c>)
 8000720:	f001 fd9a 	bl	8002258 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d00a      	beq.n	8000740 <main+0x164>
	          printf("Błąd wysyłania wiadomości\n");
 800072a:	481a      	ldr	r0, [pc, #104]	@ (8000794 <main+0x1b8>)
 800072c:	f009 fbb4 	bl	8009e98 <puts>
	          Error_Handler();
 8000730:	f000 fc7e 	bl	8001030 <Error_Handler>
 8000734:	e004      	b.n	8000740 <main+0x164>
	      }
	  } else {
		  CheckCANErrors();
 8000736:	f000 fbcf 	bl	8000ed8 <CheckCANErrors>
	      printf("Bufor nadawczy pełny, nie można dodać wiadomości\n");
 800073a:	4817      	ldr	r0, [pc, #92]	@ (8000798 <main+0x1bc>)
 800073c:	f009 fbac 	bl	8009e98 <puts>
	  }
	   CheckCANErrors();
 8000740:	f000 fbca 	bl	8000ed8 <CheckCANErrors>
	  // HAL_UART_Transmit(&huart2, frame, sizeof(frame), HAL_MAX_DELAY);
	   if (HAL_UART_Receive(&huart2, rxData, 1, HAL_MAX_DELAY) == HAL_OK) {
 8000744:	4639      	mov	r1, r7
 8000746:	f04f 33ff 	mov.w	r3, #4294967295
 800074a:	2201      	movs	r2, #1
 800074c:	4810      	ldr	r0, [pc, #64]	@ (8000790 <main+0x1b4>)
 800074e:	f008 f967 	bl	8008a20 <HAL_UART_Receive>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d106      	bne.n	8000766 <main+0x18a>
	              // Odebrano dane — wyślij je z powrotem przez USART
		   printf("Odebrano: 0x%02X (%c)\r\n", rxData[0], rxData[0]);
 8000758:	783b      	ldrb	r3, [r7, #0]
 800075a:	4619      	mov	r1, r3
 800075c:	783b      	ldrb	r3, [r7, #0]
 800075e:	461a      	mov	r2, r3
 8000760:	480e      	ldr	r0, [pc, #56]	@ (800079c <main+0x1c0>)
 8000762:	f009 fb31 	bl	8009dc8 <iprintf>
	          }
	   HAL_Delay(10);
 8000766:	200a      	movs	r0, #10
 8000768:	f001 f940 	bl	80019ec <HAL_Delay>
  {
 800076c:	e7cf      	b.n	800070e <main+0x132>
 800076e:	bf00      	nop
 8000770:	20000000 	.word	0x20000000
 8000774:	20000304 	.word	0x20000304
 8000778:	2000008c 	.word	0x2000008c
 800077c:	0800ab9c 	.word	0x0800ab9c
 8000780:	0800abb8 	.word	0x0800abb8
 8000784:	42020400 	.word	0x42020400
 8000788:	0800ac34 	.word	0x0800ac34
 800078c:	0800ac40 	.word	0x0800ac40
 8000790:	20000270 	.word	0x20000270
 8000794:	0800abc4 	.word	0x0800abc4
 8000798:	0800abe4 	.word	0x0800abe4
 800079c:	0800ac1c 	.word	0x0800ac1c

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b09c      	sub	sp, #112	@ 0x70
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 0320 	add.w	r3, r7, #32
 80007aa:	2250      	movs	r2, #80	@ 0x50
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f009 fc52 	bl	800a058 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
 80007c4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007c6:	4b2d      	ldr	r3, [pc, #180]	@ (800087c <SystemClock_Config+0xdc>)
 80007c8:	691b      	ldr	r3, [r3, #16]
 80007ca:	4a2c      	ldr	r2, [pc, #176]	@ (800087c <SystemClock_Config+0xdc>)
 80007cc:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80007d0:	6113      	str	r3, [r2, #16]
 80007d2:	4b2a      	ldr	r3, [pc, #168]	@ (800087c <SystemClock_Config+0xdc>)
 80007d4:	691b      	ldr	r3, [r3, #16]
 80007d6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007de:	bf00      	nop
 80007e0:	4b26      	ldr	r3, [pc, #152]	@ (800087c <SystemClock_Config+0xdc>)
 80007e2:	695b      	ldr	r3, [r3, #20]
 80007e4:	f003 0308 	and.w	r3, r3, #8
 80007e8:	2b08      	cmp	r3, #8
 80007ea:	d1f9      	bne.n	80007e0 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 80007ec:	2310      	movs	r3, #16
 80007ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80007f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80007f6:	2320      	movs	r3, #32
 80007f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fa:	2302      	movs	r3, #2
 80007fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 80007fe:	2302      	movs	r3, #2
 8000800:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000802:	2301      	movs	r3, #1
 8000804:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000806:	2320      	movs	r3, #32
 8000808:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800080a:	2302      	movs	r3, #2
 800080c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 16;
 800080e:	2310      	movs	r3, #16
 8000810:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000812:	2302      	movs	r3, #2
 8000814:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8000816:	2308      	movs	r3, #8
 8000818:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800081a:	2300      	movs	r3, #0
 800081c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000822:	f107 0320 	add.w	r3, r7, #32
 8000826:	4618      	mov	r0, r3
 8000828:	f002 fd18 	bl	800325c <HAL_RCC_OscConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000832:	f000 fbfd 	bl	8001030 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000836:	231f      	movs	r3, #31
 8000838:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083a:	2303      	movs	r3, #3
 800083c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800084e:	f107 0308 	add.w	r3, r7, #8
 8000852:	2103      	movs	r1, #3
 8000854:	4618      	mov	r0, r3
 8000856:	f003 f939 	bl	8003acc <HAL_RCC_ClockConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000860:	f000 fbe6 	bl	8001030 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_1);
 8000864:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <SystemClock_Config+0xe0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800086c:	4a04      	ldr	r2, [pc, #16]	@ (8000880 <SystemClock_Config+0xe0>)
 800086e:	f043 0310 	orr.w	r3, r3, #16
 8000872:	6013      	str	r3, [r2, #0]
}
 8000874:	bf00      	nop
 8000876:	3770      	adds	r7, #112	@ 0x70
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	44020800 	.word	0x44020800
 8000880:	40022000 	.word	0x40022000

08000884 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000888:	4b1f      	ldr	r3, [pc, #124]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 800088a:	4a20      	ldr	r2, [pc, #128]	@ (800090c <MX_FDCAN1_Init+0x88>)
 800088c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800088e:	4b1e      	ldr	r3, [pc, #120]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 8000890:	2200      	movs	r2, #0
 8000892:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000894:	4b1c      	ldr	r3, [pc, #112]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800089a:	4b1b      	ldr	r3, [pc, #108]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80008a0:	4b19      	ldr	r3, [pc, #100]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80008a6:	4b18      	ldr	r3, [pc, #96]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80008ac:	4b16      	ldr	r3, [pc, #88]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80008b2:	4b15      	ldr	r3, [pc, #84]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80008b8:	4b13      	ldr	r3, [pc, #76]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 11;
 80008be:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 80008c0:	220b      	movs	r2, #11
 80008c2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 80008c4:	4b10      	ldr	r3, [pc, #64]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 80008c6:	2204      	movs	r2, #4
 80008c8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80008ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80008d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80008d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 80008d8:	2201      	movs	r2, #1
 80008da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80008dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 80008de:	2201      	movs	r2, #1
 80008e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80008e2:	4b09      	ldr	r3, [pc, #36]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80008e8:	4b07      	ldr	r3, [pc, #28]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80008ee:	4b06      	ldr	r3, [pc, #24]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80008f4:	4804      	ldr	r0, [pc, #16]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 80008f6:	f001 fad3 	bl	8001ea0 <HAL_FDCAN_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000900:	f000 fb96 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	2000008c 	.word	0x2000008c
 800090c:	4000a400 	.word	0x4000a400

08000910 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000914:	4b1b      	ldr	r3, [pc, #108]	@ (8000984 <MX_I2C1_Init+0x74>)
 8000916:	4a1c      	ldr	r2, [pc, #112]	@ (8000988 <MX_I2C1_Init+0x78>)
 8000918:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 800091a:	4b1a      	ldr	r3, [pc, #104]	@ (8000984 <MX_I2C1_Init+0x74>)
 800091c:	4a1b      	ldr	r2, [pc, #108]	@ (800098c <MX_I2C1_Init+0x7c>)
 800091e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000920:	4b18      	ldr	r3, [pc, #96]	@ (8000984 <MX_I2C1_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000926:	4b17      	ldr	r3, [pc, #92]	@ (8000984 <MX_I2C1_Init+0x74>)
 8000928:	2201      	movs	r2, #1
 800092a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800092c:	4b15      	ldr	r3, [pc, #84]	@ (8000984 <MX_I2C1_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000932:	4b14      	ldr	r3, [pc, #80]	@ (8000984 <MX_I2C1_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000938:	4b12      	ldr	r3, [pc, #72]	@ (8000984 <MX_I2C1_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800093e:	4b11      	ldr	r3, [pc, #68]	@ (8000984 <MX_I2C1_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000944:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <MX_I2C1_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800094a:	480e      	ldr	r0, [pc, #56]	@ (8000984 <MX_I2C1_Init+0x74>)
 800094c:	f002 fae2 	bl	8002f14 <HAL_I2C_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000956:	f000 fb6b 	bl	8001030 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800095a:	2100      	movs	r1, #0
 800095c:	4809      	ldr	r0, [pc, #36]	@ (8000984 <MX_I2C1_Init+0x74>)
 800095e:	f002 fb74 	bl	800304a <HAL_I2CEx_ConfigAnalogFilter>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000968:	f000 fb62 	bl	8001030 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800096c:	2100      	movs	r1, #0
 800096e:	4805      	ldr	r0, [pc, #20]	@ (8000984 <MX_I2C1_Init+0x74>)
 8000970:	f002 fbb6 	bl	80030e0 <HAL_I2CEx_ConfigDigitalFilter>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800097a:	f000 fb59 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	200000f0 	.word	0x200000f0
 8000988:	40005400 	.word	0x40005400
 800098c:	10707dbc 	.word	0x10707dbc

08000990 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000994:	2000      	movs	r0, #0
 8000996:	f002 fbef 	bl	8003178 <HAL_ICACHE_ConfigAssociativityMode>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80009a0:	f000 fb46 	bl	8001030 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80009a4:	f002 fc08 	bl	80031b8 <HAL_ICACHE_Enable>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80009ae:	f000 fb3f 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b09c      	sub	sp, #112	@ 0x70
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009be:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ce:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009da:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]
 80009ea:	615a      	str	r2, [r3, #20]
 80009ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009ee:	463b      	mov	r3, r7
 80009f0:	2234      	movs	r2, #52	@ 0x34
 80009f2:	2100      	movs	r1, #0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f009 fb2f 	bl	800a058 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009fa:	4b46      	ldr	r3, [pc, #280]	@ (8000b14 <MX_TIM1_Init+0x15c>)
 80009fc:	4a46      	ldr	r2, [pc, #280]	@ (8000b18 <MX_TIM1_Init+0x160>)
 80009fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a00:	4b44      	ldr	r3, [pc, #272]	@ (8000b14 <MX_TIM1_Init+0x15c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a06:	4b43      	ldr	r3, [pc, #268]	@ (8000b14 <MX_TIM1_Init+0x15c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a0c:	4b41      	ldr	r3, [pc, #260]	@ (8000b14 <MX_TIM1_Init+0x15c>)
 8000a0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a14:	4b3f      	ldr	r3, [pc, #252]	@ (8000b14 <MX_TIM1_Init+0x15c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a1a:	4b3e      	ldr	r3, [pc, #248]	@ (8000b14 <MX_TIM1_Init+0x15c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a20:	4b3c      	ldr	r3, [pc, #240]	@ (8000b14 <MX_TIM1_Init+0x15c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a26:	483b      	ldr	r0, [pc, #236]	@ (8000b14 <MX_TIM1_Init+0x15c>)
 8000a28:	f006 fe16 	bl	8007658 <HAL_TIM_Base_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000a32:	f000 fafd 	bl	8001030 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a36:	4837      	ldr	r0, [pc, #220]	@ (8000b14 <MX_TIM1_Init+0x15c>)
 8000a38:	f006 fe65 	bl	8007706 <HAL_TIM_PWM_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000a42:	f000 faf5 	bl	8001030 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000a46:	2307      	movs	r3, #7
 8000a48:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR6;
 8000a4a:	4b34      	ldr	r3, [pc, #208]	@ (8000b1c <MX_TIM1_Init+0x164>)
 8000a4c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000a4e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a52:	4619      	mov	r1, r3
 8000a54:	482f      	ldr	r0, [pc, #188]	@ (8000b14 <MX_TIM1_Init+0x15c>)
 8000a56:	f006 ffc1 	bl	80079dc <HAL_TIM_SlaveConfigSynchro>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000a60:	f000 fae6 	bl	8001030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a64:	2300      	movs	r3, #0
 8000a66:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a70:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000a74:	4619      	mov	r1, r3
 8000a76:	4827      	ldr	r0, [pc, #156]	@ (8000b14 <MX_TIM1_Init+0x15c>)
 8000a78:	f007 fd7a 	bl	8008570 <HAL_TIMEx_MasterConfigSynchronization>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000a82:	f000 fad5 	bl	8001030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a86:	2360      	movs	r3, #96	@ 0x60
 8000a88:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a92:	2300      	movs	r3, #0
 8000a94:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000aa2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000aa6:	2204      	movs	r2, #4
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	481a      	ldr	r0, [pc, #104]	@ (8000b14 <MX_TIM1_Init+0x15c>)
 8000aac:	f006 fe82 	bl	80077b4 <HAL_TIM_PWM_ConfigChannel>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8000ab6:	f000 fabb 	bl	8001030 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000aba:	2300      	movs	r3, #0
 8000abc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ace:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ad2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ae0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000aea:	2300      	movs	r3, #0
 8000aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000aee:	2300      	movs	r3, #0
 8000af0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000af2:	463b      	mov	r3, r7
 8000af4:	4619      	mov	r1, r3
 8000af6:	4807      	ldr	r0, [pc, #28]	@ (8000b14 <MX_TIM1_Init+0x15c>)
 8000af8:	f007 fe0a 	bl	8008710 <HAL_TIMEx_ConfigBreakDeadTime>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000b02:	f000 fa95 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b06:	4803      	ldr	r0, [pc, #12]	@ (8000b14 <MX_TIM1_Init+0x15c>)
 8000b08:	f000 fbd2 	bl	80012b0 <HAL_TIM_MspPostInit>

}
 8000b0c:	bf00      	nop
 8000b0e:	3770      	adds	r7, #112	@ 0x70
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000144 	.word	0x20000144
 8000b18:	40012c00 	.word	0x40012c00
 8000b1c:	00100020 	.word	0x00100020

08000b20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	@ 0x28
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b32:	463b      	mov	r3, r7
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
 8000b40:	615a      	str	r2, [r3, #20]
 8000b42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b44:	4b22      	ldr	r3, [pc, #136]	@ (8000bd0 <MX_TIM2_Init+0xb0>)
 8000b46:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b4c:	4b20      	ldr	r3, [pc, #128]	@ (8000bd0 <MX_TIM2_Init+0xb0>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b52:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd0 <MX_TIM2_Init+0xb0>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000b58:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd0 <MX_TIM2_Init+0xb0>)
 8000b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b5e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b60:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd0 <MX_TIM2_Init+0xb0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b66:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd0 <MX_TIM2_Init+0xb0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b6c:	4818      	ldr	r0, [pc, #96]	@ (8000bd0 <MX_TIM2_Init+0xb0>)
 8000b6e:	f006 fdca 	bl	8007706 <HAL_TIM_PWM_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000b78:	f000 fa5a 	bl	8001030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4811      	ldr	r0, [pc, #68]	@ (8000bd0 <MX_TIM2_Init+0xb0>)
 8000b8c:	f007 fcf0 	bl	8008570 <HAL_TIMEx_MasterConfigSynchronization>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000b96:	f000 fa4b 	bl	8001030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b9a:	2360      	movs	r3, #96	@ 0x60
 8000b9c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000baa:	463b      	mov	r3, r7
 8000bac:	2200      	movs	r2, #0
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4807      	ldr	r0, [pc, #28]	@ (8000bd0 <MX_TIM2_Init+0xb0>)
 8000bb2:	f006 fdff 	bl	80077b4 <HAL_TIM_PWM_ConfigChannel>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000bbc:	f000 fa38 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bc0:	4803      	ldr	r0, [pc, #12]	@ (8000bd0 <MX_TIM2_Init+0xb0>)
 8000bc2:	f000 fb75 	bl	80012b0 <HAL_TIM_MspPostInit>

}
 8000bc6:	bf00      	nop
 8000bc8:	3728      	adds	r7, #40	@ 0x28
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000190 	.word	0x20000190

08000bd4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bd8:	4b22      	ldr	r3, [pc, #136]	@ (8000c64 <MX_USART1_UART_Init+0x90>)
 8000bda:	4a23      	ldr	r2, [pc, #140]	@ (8000c68 <MX_USART1_UART_Init+0x94>)
 8000bdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bde:	4b21      	ldr	r3, [pc, #132]	@ (8000c64 <MX_USART1_UART_Init+0x90>)
 8000be0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000be4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000be6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c64 <MX_USART1_UART_Init+0x90>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bec:	4b1d      	ldr	r3, [pc, #116]	@ (8000c64 <MX_USART1_UART_Init+0x90>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c64 <MX_USART1_UART_Init+0x90>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c64 <MX_USART1_UART_Init+0x90>)
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfe:	4b19      	ldr	r3, [pc, #100]	@ (8000c64 <MX_USART1_UART_Init+0x90>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c04:	4b17      	ldr	r3, [pc, #92]	@ (8000c64 <MX_USART1_UART_Init+0x90>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c0a:	4b16      	ldr	r3, [pc, #88]	@ (8000c64 <MX_USART1_UART_Init+0x90>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c10:	4b14      	ldr	r3, [pc, #80]	@ (8000c64 <MX_USART1_UART_Init+0x90>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c16:	4b13      	ldr	r3, [pc, #76]	@ (8000c64 <MX_USART1_UART_Init+0x90>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c1c:	4811      	ldr	r0, [pc, #68]	@ (8000c64 <MX_USART1_UART_Init+0x90>)
 8000c1e:	f007 fe11 	bl	8008844 <HAL_UART_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c28:	f000 fa02 	bl	8001030 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	480d      	ldr	r0, [pc, #52]	@ (8000c64 <MX_USART1_UART_Init+0x90>)
 8000c30:	f008 ff3d 	bl	8009aae <HAL_UARTEx_SetTxFifoThreshold>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c3a:	f000 f9f9 	bl	8001030 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4808      	ldr	r0, [pc, #32]	@ (8000c64 <MX_USART1_UART_Init+0x90>)
 8000c42:	f008 ff72 	bl	8009b2a <HAL_UARTEx_SetRxFifoThreshold>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c4c:	f000 f9f0 	bl	8001030 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c50:	4804      	ldr	r0, [pc, #16]	@ (8000c64 <MX_USART1_UART_Init+0x90>)
 8000c52:	f008 fef3 	bl	8009a3c <HAL_UARTEx_DisableFifoMode>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c5c:	f000 f9e8 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	200001dc 	.word	0x200001dc
 8000c68:	40013800 	.word	0x40013800

08000c6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c70:	4b23      	ldr	r3, [pc, #140]	@ (8000d00 <MX_USART2_UART_Init+0x94>)
 8000c72:	4a24      	ldr	r2, [pc, #144]	@ (8000d04 <MX_USART2_UART_Init+0x98>)
 8000c74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c76:	4b22      	ldr	r3, [pc, #136]	@ (8000d00 <MX_USART2_UART_Init+0x94>)
 8000c78:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000c7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7e:	4b20      	ldr	r3, [pc, #128]	@ (8000d00 <MX_USART2_UART_Init+0x94>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c84:	4b1e      	ldr	r3, [pc, #120]	@ (8000d00 <MX_USART2_UART_Init+0x94>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d00 <MX_USART2_UART_Init+0x94>)
 8000c8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c90:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c92:	4b1b      	ldr	r3, [pc, #108]	@ (8000d00 <MX_USART2_UART_Init+0x94>)
 8000c94:	220c      	movs	r2, #12
 8000c96:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c98:	4b19      	ldr	r3, [pc, #100]	@ (8000d00 <MX_USART2_UART_Init+0x94>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c9e:	4b18      	ldr	r3, [pc, #96]	@ (8000d00 <MX_USART2_UART_Init+0x94>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ca4:	4b16      	ldr	r3, [pc, #88]	@ (8000d00 <MX_USART2_UART_Init+0x94>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000caa:	4b15      	ldr	r3, [pc, #84]	@ (8000d00 <MX_USART2_UART_Init+0x94>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cb0:	4b13      	ldr	r3, [pc, #76]	@ (8000d00 <MX_USART2_UART_Init+0x94>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cb6:	4812      	ldr	r0, [pc, #72]	@ (8000d00 <MX_USART2_UART_Init+0x94>)
 8000cb8:	f007 fdc4 	bl	8008844 <HAL_UART_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000cc2:	f000 f9b5 	bl	8001030 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	480d      	ldr	r0, [pc, #52]	@ (8000d00 <MX_USART2_UART_Init+0x94>)
 8000cca:	f008 fef0 	bl	8009aae <HAL_UARTEx_SetTxFifoThreshold>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000cd4:	f000 f9ac 	bl	8001030 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4809      	ldr	r0, [pc, #36]	@ (8000d00 <MX_USART2_UART_Init+0x94>)
 8000cdc:	f008 ff25 	bl	8009b2a <HAL_UARTEx_SetRxFifoThreshold>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000ce6:	f000 f9a3 	bl	8001030 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000cea:	4805      	ldr	r0, [pc, #20]	@ (8000d00 <MX_USART2_UART_Init+0x94>)
 8000cec:	f008 fea6 	bl	8009a3c <HAL_UARTEx_DisableFifoMode>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000cf6:	f000 f99b 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000270 	.word	0x20000270
 8000d04:	40004400 	.word	0x40004400

08000d08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	@ 0x28
 8000d0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]
 8000d1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1e:	4b55      	ldr	r3, [pc, #340]	@ (8000e74 <MX_GPIO_Init+0x16c>)
 8000d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d24:	4a53      	ldr	r2, [pc, #332]	@ (8000e74 <MX_GPIO_Init+0x16c>)
 8000d26:	f043 0304 	orr.w	r3, r3, #4
 8000d2a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d2e:	4b51      	ldr	r3, [pc, #324]	@ (8000e74 <MX_GPIO_Init+0x16c>)
 8000d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d3c:	4b4d      	ldr	r3, [pc, #308]	@ (8000e74 <MX_GPIO_Init+0x16c>)
 8000d3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d42:	4a4c      	ldr	r2, [pc, #304]	@ (8000e74 <MX_GPIO_Init+0x16c>)
 8000d44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d48:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d4c:	4b49      	ldr	r3, [pc, #292]	@ (8000e74 <MX_GPIO_Init+0x16c>)
 8000d4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	4b46      	ldr	r3, [pc, #280]	@ (8000e74 <MX_GPIO_Init+0x16c>)
 8000d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d60:	4a44      	ldr	r2, [pc, #272]	@ (8000e74 <MX_GPIO_Init+0x16c>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d6a:	4b42      	ldr	r3, [pc, #264]	@ (8000e74 <MX_GPIO_Init+0x16c>)
 8000d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d78:	4b3e      	ldr	r3, [pc, #248]	@ (8000e74 <MX_GPIO_Init+0x16c>)
 8000d7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d7e:	4a3d      	ldr	r2, [pc, #244]	@ (8000e74 <MX_GPIO_Init+0x16c>)
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d88:	4b3a      	ldr	r3, [pc, #232]	@ (8000e74 <MX_GPIO_Init+0x16c>)
 8000d8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d9c:	4836      	ldr	r0, [pc, #216]	@ (8000e78 <MX_GPIO_Init+0x170>)
 8000d9e:	f002 f887 	bl	8002eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(K_BUS_SLP_GPIO_Port, K_BUS_SLP_Pin, GPIO_PIN_SET);
 8000da2:	2201      	movs	r2, #1
 8000da4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000da8:	4833      	ldr	r0, [pc, #204]	@ (8000e78 <MX_GPIO_Init+0x170>)
 8000daa:	f002 f881 	bl	8002eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Backlight_STM_Pin|Batt_Charge_Light_STM_Pin|Oil_Iight_STM_Pin, GPIO_PIN_SET);
 8000dae:	2201      	movs	r2, #1
 8000db0:	2170      	movs	r1, #112	@ 0x70
 8000db2:	4832      	ldr	r0, [pc, #200]	@ (8000e7c <MX_GPIO_Init+0x174>)
 8000db4:	f002 f87c 	bl	8002eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Brake_fluid_light_STM_Pin|TRCVR_MODE_Pin|D3_Pin, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	f248 4180 	movw	r1, #33920	@ 0x8480
 8000dbe:	482f      	ldr	r0, [pc, #188]	@ (8000e7c <MX_GPIO_Init+0x174>)
 8000dc0:	f002 f876 	bl	8002eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ABS_STM_Pin|Parking_Brake_STM_Pin|Brake_Wear_Sens_STM_Pin|Coolant_level_Sens_STM_Pin
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f241 413e 	movw	r1, #5182	@ 0x143e
 8000dca:	482d      	ldr	r0, [pc, #180]	@ (8000e80 <MX_GPIO_Init+0x178>)
 8000dcc:	f002 f870 	bl	8002eb0 <HAL_GPIO_WritePin>
                          |D2_Pin|D1_Pin|Fuel_HVC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Washer_Fluid_Lvl_STM_GPIO_Port, Washer_Fluid_Lvl_STM_Pin, GPIO_PIN_SET);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dd6:	482a      	ldr	r0, [pc, #168]	@ (8000e80 <MX_GPIO_Init+0x178>)
 8000dd8:	f002 f86a 	bl	8002eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 K_BUS_SLP_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|K_BUS_SLP_Pin;
 8000ddc:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000de0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de2:	2301      	movs	r3, #1
 8000de4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4619      	mov	r1, r3
 8000df4:	4820      	ldr	r0, [pc, #128]	@ (8000e78 <MX_GPIO_Init+0x170>)
 8000df6:	f001 ff09 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : Backlight_STM_Pin */
  GPIO_InitStruct.Pin = Backlight_STM_Pin;
 8000dfa:	2310      	movs	r3, #16
 8000dfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000dfe:	2311      	movs	r3, #17
 8000e00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Backlight_STM_GPIO_Port, &GPIO_InitStruct);
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4619      	mov	r1, r3
 8000e10:	481a      	ldr	r0, [pc, #104]	@ (8000e7c <MX_GPIO_Init+0x174>)
 8000e12:	f001 fefb 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : Batt_Charge_Light_STM_Pin Oil_Iight_STM_Pin Brake_fluid_light_STM_Pin TRCVR_MODE_Pin
                           D3_Pin */
  GPIO_InitStruct.Pin = Batt_Charge_Light_STM_Pin|Oil_Iight_STM_Pin|Brake_fluid_light_STM_Pin|TRCVR_MODE_Pin
 8000e16:	f248 43e0 	movw	r3, #34016	@ 0x84e0
 8000e1a:	617b      	str	r3, [r7, #20]
                          |D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e24:	2300      	movs	r3, #0
 8000e26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4813      	ldr	r0, [pc, #76]	@ (8000e7c <MX_GPIO_Init+0x174>)
 8000e30:	f001 feec 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : ABS_STM_Pin Parking_Brake_STM_Pin Brake_Wear_Sens_STM_Pin Coolant_level_Sens_STM_Pin
                           Washer_Fluid_Lvl_STM_Pin D2_Pin D1_Pin Fuel_HVC_Pin */
  GPIO_InitStruct.Pin = ABS_STM_Pin|Parking_Brake_STM_Pin|Brake_Wear_Sens_STM_Pin|Coolant_level_Sens_STM_Pin
 8000e34:	f243 433e 	movw	r3, #13374	@ 0x343e
 8000e38:	617b      	str	r3, [r7, #20]
                          |Washer_Fluid_Lvl_STM_Pin|D2_Pin|D1_Pin|Fuel_HVC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	480c      	ldr	r0, [pc, #48]	@ (8000e80 <MX_GPIO_Init+0x178>)
 8000e4e:	f001 fedd 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4619      	mov	r1, r3
 8000e66:	4806      	ldr	r0, [pc, #24]	@ (8000e80 <MX_GPIO_Init+0x178>)
 8000e68:	f001 fed0 	bl	8002c0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e6c:	bf00      	nop
 8000e6e:	3728      	adds	r7, #40	@ 0x28
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	44020c00 	.word	0x44020c00
 8000e78:	42020800 	.word	0x42020800
 8000e7c:	42020000 	.word	0x42020000
 8000e80:	42020400 	.word	0x42020400

08000e84 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
    void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
    {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
    	if (HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0) > 0) {
 8000e8e:	2140      	movs	r1, #64	@ 0x40
 8000e90:	480e      	ldr	r0, [pc, #56]	@ (8000ecc <HAL_FDCAN_RxFifo0Callback+0x48>)
 8000e92:	f001 fb2d 	bl	80024f0 <HAL_FDCAN_GetRxFifoFillLevel>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d013      	beq.n	8000ec4 <HAL_FDCAN_RxFifo0Callback+0x40>
    	    if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader2, RxData2) == HAL_OK) {
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8000e9e:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0x50>)
 8000ea0:	2140      	movs	r1, #64	@ 0x40
 8000ea2:	480a      	ldr	r0, [pc, #40]	@ (8000ecc <HAL_FDCAN_RxFifo0Callback+0x48>)
 8000ea4:	f001 fa1c 	bl	80022e0 <HAL_FDCAN_GetRxMessage>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d10a      	bne.n	8000ec4 <HAL_FDCAN_RxFifo0Callback+0x40>
    	       // printf("Odebrano ramkę: ID = 0x%03X, Dane = ", RxHeader2.Identifier);
    	        for (int i = 0; i < RxHeader2.DataLength; i++) {
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	e002      	b.n	8000eba <HAL_FDCAN_RxFifo0Callback+0x36>
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0x50>)
 8000ebc:	68da      	ldr	r2, [r3, #12]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d8f7      	bhi.n	8000eb4 <HAL_FDCAN_RxFifo0Callback+0x30>
    	            //printf("%02X ", RxData2[i]);
    	        }
    	       // printf("\n");
    	    }
    	}
    }
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	2000008c 	.word	0x2000008c
 8000ed0:	2000034c 	.word	0x2000034c
 8000ed4:	20000328 	.word	0x20000328

08000ed8 <CheckCANErrors>:

void CheckCANErrors() {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
    uint32_t error = HAL_FDCAN_GetError(&hfdcan1);
 8000ede:	4843      	ldr	r0, [pc, #268]	@ (8000fec <CheckCANErrors+0x114>)
 8000ee0:	f001 fdaa 	bl	8002a38 <HAL_FDCAN_GetError>
 8000ee4:	6078      	str	r0, [r7, #4]

    if (error == HAL_FDCAN_ERROR_NONE) {
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d103      	bne.n	8000ef4 <CheckCANErrors+0x1c>
        printf("Brak błędów CAN\n");
 8000eec:	4840      	ldr	r0, [pc, #256]	@ (8000ff0 <CheckCANErrors+0x118>)
 8000eee:	f008 ffd3 	bl	8009e98 <puts>
		   printf("  HAL_FDCAN_ERROR_LOG_OVERFLOW\n");
	   }
	   if (error & HAL_FDCAN_ERROR_RAM_WDG) {
		   printf(" HAL_FDCAN_ERROR_RAM_WDG\n");
    }
}}
 8000ef2:	e077      	b.n	8000fe4 <CheckCANErrors+0x10c>
        if (error & HAL_FDCAN_ERROR_TIMEOUT) {
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d002      	beq.n	8000f04 <CheckCANErrors+0x2c>
            printf(" HAL_FDCAN_ERROR_TIMEOUT\n");
 8000efe:	483d      	ldr	r0, [pc, #244]	@ (8000ff4 <CheckCANErrors+0x11c>)
 8000f00:	f008 ffca 	bl	8009e98 <puts>
        if (error & HAL_FDCAN_ERROR_NOT_INITIALIZED) {
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d002      	beq.n	8000f14 <CheckCANErrors+0x3c>
            printf(" HAL_FDCAN_ERROR_NOT_INITIALIZED\n");
 8000f0e:	483a      	ldr	r0, [pc, #232]	@ (8000ff8 <CheckCANErrors+0x120>)
 8000f10:	f008 ffc2 	bl	8009e98 <puts>
        if (error & HAL_FDCAN_ERROR_NOT_READY) {
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f003 0304 	and.w	r3, r3, #4
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d002      	beq.n	8000f24 <CheckCANErrors+0x4c>
            printf(" HAL_FDCAN_ERROR_NOT_READY\n");
 8000f1e:	4837      	ldr	r0, [pc, #220]	@ (8000ffc <CheckCANErrors+0x124>)
 8000f20:	f008 ffba 	bl	8009e98 <puts>
        if (error & HAL_FDCAN_ERROR_NOT_STARTED) {
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f003 0308 	and.w	r3, r3, #8
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d002      	beq.n	8000f34 <CheckCANErrors+0x5c>
            printf(" HAL_FDCAN_ERROR_NOT_STARTED\n");
 8000f2e:	4834      	ldr	r0, [pc, #208]	@ (8001000 <CheckCANErrors+0x128>)
 8000f30:	f008 ffb2 	bl	8009e98 <puts>
        if (error & HAL_FDCAN_ERROR_NOT_SUPPORTED) {
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f003 0310 	and.w	r3, r3, #16
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d002      	beq.n	8000f44 <CheckCANErrors+0x6c>
            printf(" HAL_FDCAN_ERROR_NOT_SUPPORTED\n");
 8000f3e:	4831      	ldr	r0, [pc, #196]	@ (8001004 <CheckCANErrors+0x12c>)
 8000f40:	f008 ffaa 	bl	8009e98 <puts>
        if (error & HAL_FDCAN_ERROR_PARAM) {
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f003 0320 	and.w	r3, r3, #32
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d002      	beq.n	8000f54 <CheckCANErrors+0x7c>
            printf("HAL_FDCAN_ERROR_PARAM\n");
 8000f4e:	482e      	ldr	r0, [pc, #184]	@ (8001008 <CheckCANErrors+0x130>)
 8000f50:	f008 ffa2 	bl	8009e98 <puts>
        if (error & HAL_FDCAN_ERROR_PENDING) {
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d002      	beq.n	8000f64 <CheckCANErrors+0x8c>
            printf("  HAL_FDCAN_ERROR_PENDING\n");
 8000f5e:	482b      	ldr	r0, [pc, #172]	@ (800100c <CheckCANErrors+0x134>)
 8000f60:	f008 ff9a 	bl	8009e98 <puts>
        if (error & HAL_FDCAN_ERROR_RAM_ACCESS) {
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d002      	beq.n	8000f74 <CheckCANErrors+0x9c>
            printf("  HAL_FDCAN_ERROR_RAM_ACCESS\n");
 8000f6e:	4828      	ldr	r0, [pc, #160]	@ (8001010 <CheckCANErrors+0x138>)
 8000f70:	f008 ff92 	bl	8009e98 <puts>
        if (error & HAL_FDCAN_ERROR_PROTOCOL_ARBT) {
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d002      	beq.n	8000f84 <CheckCANErrors+0xac>
            printf(" HAL_FDCAN_ERROR_PROTOCOL_ARBT\n");
 8000f7e:	4825      	ldr	r0, [pc, #148]	@ (8001014 <CheckCANErrors+0x13c>)
 8000f80:	f008 ff8a 	bl	8009e98 <puts>
        if (error & HAL_FDCAN_ERROR_PROTOCOL_DATA) {
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d002      	beq.n	8000f94 <CheckCANErrors+0xbc>
                 printf(" HAL_FDCAN_ERROR_PROTOCOL_DATA\n");
 8000f8e:	4822      	ldr	r0, [pc, #136]	@ (8001018 <CheckCANErrors+0x140>)
 8000f90:	f008 ff82 	bl	8009e98 <puts>
        if (error & HAL_FDCAN_ERROR_RESERVED_AREA) {
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d002      	beq.n	8000fa4 <CheckCANErrors+0xcc>
                        printf(" HAL_FDCAN_ERROR_RESERVED_AREA\n");
 8000f9e:	481f      	ldr	r0, [pc, #124]	@ (800101c <CheckCANErrors+0x144>)
 8000fa0:	f008 ff7a 	bl	8009e98 <puts>
	   if (error & HAL_FDCAN_ERROR_FIFO_EMPTY) {
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d002      	beq.n	8000fb4 <CheckCANErrors+0xdc>
		   printf("HAL_FDCAN_ERROR_FIFO_EMPTY\n");
 8000fae:	481c      	ldr	r0, [pc, #112]	@ (8001020 <CheckCANErrors+0x148>)
 8000fb0:	f008 ff72 	bl	8009e98 <puts>
	   if (error & HAL_FDCAN_ERROR_FIFO_FULL) {
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d002      	beq.n	8000fc4 <CheckCANErrors+0xec>
		   printf("  HAL_FDCAN_ERROR_FIFO_FULL\n");
 8000fbe:	4819      	ldr	r0, [pc, #100]	@ (8001024 <CheckCANErrors+0x14c>)
 8000fc0:	f008 ff6a 	bl	8009e98 <puts>
	   if (error & HAL_FDCAN_ERROR_LOG_OVERFLOW) {
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d002      	beq.n	8000fd4 <CheckCANErrors+0xfc>
		   printf("  HAL_FDCAN_ERROR_LOG_OVERFLOW\n");
 8000fce:	4816      	ldr	r0, [pc, #88]	@ (8001028 <CheckCANErrors+0x150>)
 8000fd0:	f008 ff62 	bl	8009e98 <puts>
	   if (error & HAL_FDCAN_ERROR_RAM_WDG) {
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d002      	beq.n	8000fe4 <CheckCANErrors+0x10c>
		   printf(" HAL_FDCAN_ERROR_RAM_WDG\n");
 8000fde:	4813      	ldr	r0, [pc, #76]	@ (800102c <CheckCANErrors+0x154>)
 8000fe0:	f008 ff5a 	bl	8009e98 <puts>
}}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	2000008c 	.word	0x2000008c
 8000ff0:	0800ac4c 	.word	0x0800ac4c
 8000ff4:	0800ac60 	.word	0x0800ac60
 8000ff8:	0800ac7c 	.word	0x0800ac7c
 8000ffc:	0800aca0 	.word	0x0800aca0
 8001000:	0800acbc 	.word	0x0800acbc
 8001004:	0800acdc 	.word	0x0800acdc
 8001008:	0800acfc 	.word	0x0800acfc
 800100c:	0800ad14 	.word	0x0800ad14
 8001010:	0800ad30 	.word	0x0800ad30
 8001014:	0800ad50 	.word	0x0800ad50
 8001018:	0800ad70 	.word	0x0800ad70
 800101c:	0800ad90 	.word	0x0800ad90
 8001020:	0800adb0 	.word	0x0800adb0
 8001024:	0800adcc 	.word	0x0800adcc
 8001028:	0800ade8 	.word	0x0800ade8
 800102c:	0800ae08 	.word	0x0800ae08

08001030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8001034:	2201      	movs	r2, #1
 8001036:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800103a:	4804      	ldr	r0, [pc, #16]	@ (800104c <Error_Handler+0x1c>)
 800103c:	f001 ff38 	bl	8002eb0 <HAL_GPIO_WritePin>
	CheckCANErrors();
 8001040:	f7ff ff4a 	bl	8000ed8 <CheckCANErrors>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001044:	b672      	cpsid	i
}
 8001046:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <Error_Handler+0x18>
 800104c:	42020000 	.word	0x42020000

08001050 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* ICACHE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ICACHE_IRQn, 0, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	2100      	movs	r1, #0
 8001058:	2068      	movs	r0, #104	@ 0x68
 800105a:	f000 fda3 	bl	8001ba4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ICACHE_IRQn);
 800105e:	2068      	movs	r0, #104	@ 0x68
 8001060:	f000 fdba 	bl	8001bd8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b0be      	sub	sp, #248	@ 0xf8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001080:	f107 0310 	add.w	r3, r7, #16
 8001084:	22d0      	movs	r2, #208	@ 0xd0
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f008 ffe5 	bl	800a058 <memset>
  if(hfdcan->Instance==FDCAN1)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a2f      	ldr	r2, [pc, #188]	@ (8001150 <HAL_FDCAN_MspInit+0xe8>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d157      	bne.n	8001148 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	f04f 0304 	mov.w	r3, #4
 80010a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL1Q;
 80010a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	4618      	mov	r0, r3
 80010b2:	f003 f84d 	bl	8004150 <HAL_RCCEx_PeriphCLKConfig>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 80010bc:	f7ff ffb8 	bl	8001030 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80010c0:	4b24      	ldr	r3, [pc, #144]	@ (8001154 <HAL_FDCAN_MspInit+0xec>)
 80010c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80010c6:	4a23      	ldr	r2, [pc, #140]	@ (8001154 <HAL_FDCAN_MspInit+0xec>)
 80010c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010cc:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 80010d0:	4b20      	ldr	r3, [pc, #128]	@ (8001154 <HAL_FDCAN_MspInit+0xec>)
 80010d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80010d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	4b1d      	ldr	r3, [pc, #116]	@ (8001154 <HAL_FDCAN_MspInit+0xec>)
 80010e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001154 <HAL_FDCAN_MspInit+0xec>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010ee:	4b19      	ldr	r3, [pc, #100]	@ (8001154 <HAL_FDCAN_MspInit+0xec>)
 80010f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010fc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001100:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001110:	2303      	movs	r3, #3
 8001112:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001116:	2309      	movs	r3, #9
 8001118:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001120:	4619      	mov	r1, r3
 8001122:	480d      	ldr	r0, [pc, #52]	@ (8001158 <HAL_FDCAN_MspInit+0xf0>)
 8001124:	f001 fd72 	bl	8002c0c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001128:	2200      	movs	r2, #0
 800112a:	2100      	movs	r1, #0
 800112c:	2027      	movs	r0, #39	@ 0x27
 800112e:	f000 fd39 	bl	8001ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001132:	2027      	movs	r0, #39	@ 0x27
 8001134:	f000 fd50 	bl	8001bd8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8001138:	2200      	movs	r2, #0
 800113a:	2100      	movs	r1, #0
 800113c:	2028      	movs	r0, #40	@ 0x28
 800113e:	f000 fd31 	bl	8001ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8001142:	2028      	movs	r0, #40	@ 0x28
 8001144:	f000 fd48 	bl	8001bd8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8001148:	bf00      	nop
 800114a:	37f8      	adds	r7, #248	@ 0xf8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	4000a400 	.word	0x4000a400
 8001154:	44020c00 	.word	0x44020c00
 8001158:	42020000 	.word	0x42020000

0800115c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b0be      	sub	sp, #248	@ 0xf8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	22d0      	movs	r2, #208	@ 0xd0
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f008 ff6b 	bl	800a058 <memset>
  if(hi2c->Instance==I2C1)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a26      	ldr	r2, [pc, #152]	@ (8001220 <HAL_I2C_MspInit+0xc4>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d145      	bne.n	8001218 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800118c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800119e:	f107 0310 	add.w	r3, r7, #16
 80011a2:	4618      	mov	r0, r3
 80011a4:	f002 ffd4 	bl	8004150 <HAL_RCCEx_PeriphCLKConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80011ae:	f7ff ff3f 	bl	8001030 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001224 <HAL_I2C_MspInit+0xc8>)
 80011b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011b8:	4a1a      	ldr	r2, [pc, #104]	@ (8001224 <HAL_I2C_MspInit+0xc8>)
 80011ba:	f043 0302 	orr.w	r3, r3, #2
 80011be:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011c2:	4b18      	ldr	r3, [pc, #96]	@ (8001224 <HAL_I2C_MspInit+0xc8>)
 80011c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011d0:	23c0      	movs	r3, #192	@ 0xc0
 80011d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d6:	2312      	movs	r3, #18
 80011d8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	2300      	movs	r3, #0
 80011e4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011e8:	2304      	movs	r3, #4
 80011ea:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ee:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80011f2:	4619      	mov	r1, r3
 80011f4:	480c      	ldr	r0, [pc, #48]	@ (8001228 <HAL_I2C_MspInit+0xcc>)
 80011f6:	f001 fd09 	bl	8002c0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001224 <HAL_I2C_MspInit+0xc8>)
 80011fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001200:	4a08      	ldr	r2, [pc, #32]	@ (8001224 <HAL_I2C_MspInit+0xc8>)
 8001202:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001206:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800120a:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <HAL_I2C_MspInit+0xc8>)
 800120c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001210:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001218:	bf00      	nop
 800121a:	37f8      	adds	r7, #248	@ 0xf8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40005400 	.word	0x40005400
 8001224:	44020c00 	.word	0x44020c00
 8001228:	42020400 	.word	0x42020400

0800122c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a0b      	ldr	r2, [pc, #44]	@ (8001268 <HAL_TIM_Base_MspInit+0x3c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d10e      	bne.n	800125c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800123e:	4b0b      	ldr	r3, [pc, #44]	@ (800126c <HAL_TIM_Base_MspInit+0x40>)
 8001240:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001244:	4a09      	ldr	r2, [pc, #36]	@ (800126c <HAL_TIM_Base_MspInit+0x40>)
 8001246:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800124a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800124e:	4b07      	ldr	r3, [pc, #28]	@ (800126c <HAL_TIM_Base_MspInit+0x40>)
 8001250:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001254:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800125c:	bf00      	nop
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	40012c00 	.word	0x40012c00
 800126c:	44020c00 	.word	0x44020c00

08001270 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001280:	d10e      	bne.n	80012a0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001282:	4b0a      	ldr	r3, [pc, #40]	@ (80012ac <HAL_TIM_PWM_MspInit+0x3c>)
 8001284:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001288:	4a08      	ldr	r2, [pc, #32]	@ (80012ac <HAL_TIM_PWM_MspInit+0x3c>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001292:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <HAL_TIM_PWM_MspInit+0x3c>)
 8001294:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	44020c00 	.word	0x44020c00

080012b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	@ 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a35      	ldr	r2, [pc, #212]	@ (80013a4 <HAL_TIM_MspPostInit+0xf4>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d13f      	bne.n	8001352 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d2:	4b35      	ldr	r3, [pc, #212]	@ (80013a8 <HAL_TIM_MspPostInit+0xf8>)
 80012d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012d8:	4a33      	ldr	r2, [pc, #204]	@ (80013a8 <HAL_TIM_MspPostInit+0xf8>)
 80012da:	f043 0302 	orr.w	r3, r3, #2
 80012de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012e2:	4b31      	ldr	r3, [pc, #196]	@ (80013a8 <HAL_TIM_MspPostInit+0xf8>)
 80012e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f0:	4b2d      	ldr	r3, [pc, #180]	@ (80013a8 <HAL_TIM_MspPostInit+0xf8>)
 80012f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012f6:	4a2c      	ldr	r2, [pc, #176]	@ (80013a8 <HAL_TIM_MspPostInit+0xf8>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001300:	4b29      	ldr	r3, [pc, #164]	@ (80013a8 <HAL_TIM_MspPostInit+0xf8>)
 8001302:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800130e:	2301      	movs	r3, #1
 8001310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800131e:	2301      	movs	r3, #1
 8001320:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	4820      	ldr	r0, [pc, #128]	@ (80013ac <HAL_TIM_MspPostInit+0xfc>)
 800132a:	f001 fc6f 	bl	8002c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800132e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	2302      	movs	r3, #2
 8001336:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001340:	2301      	movs	r3, #1
 8001342:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	4619      	mov	r1, r3
 800134a:	4819      	ldr	r0, [pc, #100]	@ (80013b0 <HAL_TIM_MspPostInit+0x100>)
 800134c:	f001 fc5e 	bl	8002c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001350:	e023      	b.n	800139a <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM2)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800135a:	d11e      	bne.n	800139a <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135c:	4b12      	ldr	r3, [pc, #72]	@ (80013a8 <HAL_TIM_MspPostInit+0xf8>)
 800135e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001362:	4a11      	ldr	r2, [pc, #68]	@ (80013a8 <HAL_TIM_MspPostInit+0xf8>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800136c:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <HAL_TIM_MspPostInit+0xf8>)
 800136e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800137a:	2301      	movs	r3, #1
 800137c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001386:	2300      	movs	r3, #0
 8001388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800138a:	2301      	movs	r3, #1
 800138c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	4806      	ldr	r0, [pc, #24]	@ (80013b0 <HAL_TIM_MspPostInit+0x100>)
 8001396:	f001 fc39 	bl	8002c0c <HAL_GPIO_Init>
}
 800139a:	bf00      	nop
 800139c:	3728      	adds	r7, #40	@ 0x28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40012c00 	.word	0x40012c00
 80013a8:	44020c00 	.word	0x44020c00
 80013ac:	42020400 	.word	0x42020400
 80013b0:	42020000 	.word	0x42020000

080013b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b0c0      	sub	sp, #256	@ 0x100
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013cc:	f107 0318 	add.w	r3, r7, #24
 80013d0:	22d0      	movs	r2, #208	@ 0xd0
 80013d2:	2100      	movs	r1, #0
 80013d4:	4618      	mov	r0, r3
 80013d6:	f008 fe3f 	bl	800a058 <memset>
  if(huart->Instance==USART1)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a50      	ldr	r2, [pc, #320]	@ (8001520 <HAL_UART_MspInit+0x16c>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d14e      	bne.n	8001482 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013e4:	f04f 0201 	mov.w	r2, #1
 80013e8:	f04f 0300 	mov.w	r3, #0
 80013ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013f0:	2300      	movs	r3, #0
 80013f2:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013f4:	f107 0318 	add.w	r3, r7, #24
 80013f8:	4618      	mov	r0, r3
 80013fa:	f002 fea9 	bl	8004150 <HAL_RCCEx_PeriphCLKConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001404:	f7ff fe14 	bl	8001030 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001408:	4b46      	ldr	r3, [pc, #280]	@ (8001524 <HAL_UART_MspInit+0x170>)
 800140a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800140e:	4a45      	ldr	r2, [pc, #276]	@ (8001524 <HAL_UART_MspInit+0x170>)
 8001410:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001414:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001418:	4b42      	ldr	r3, [pc, #264]	@ (8001524 <HAL_UART_MspInit+0x170>)
 800141a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800141e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	4b3f      	ldr	r3, [pc, #252]	@ (8001524 <HAL_UART_MspInit+0x170>)
 8001428:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800142c:	4a3d      	ldr	r2, [pc, #244]	@ (8001524 <HAL_UART_MspInit+0x170>)
 800142e:	f043 0302 	orr.w	r3, r3, #2
 8001432:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001436:	4b3b      	ldr	r3, [pc, #236]	@ (8001524 <HAL_UART_MspInit+0x170>)
 8001438:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001444:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001448:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800145e:	2304      	movs	r3, #4
 8001460:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001464:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001468:	4619      	mov	r1, r3
 800146a:	482f      	ldr	r0, [pc, #188]	@ (8001528 <HAL_UART_MspInit+0x174>)
 800146c:	f001 fbce 	bl	8002c0c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001470:	2200      	movs	r2, #0
 8001472:	2100      	movs	r1, #0
 8001474:	203a      	movs	r0, #58	@ 0x3a
 8001476:	f000 fb95 	bl	8001ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800147a:	203a      	movs	r0, #58	@ 0x3a
 800147c:	f000 fbac 	bl	8001bd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001480:	e049      	b.n	8001516 <HAL_UART_MspInit+0x162>
  else if(huart->Instance==USART2)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a29      	ldr	r2, [pc, #164]	@ (800152c <HAL_UART_MspInit+0x178>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d144      	bne.n	8001516 <HAL_UART_MspInit+0x162>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800148c:	f04f 0202 	mov.w	r2, #2
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001498:	2300      	movs	r3, #0
 800149a:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800149c:	f107 0318 	add.w	r3, r7, #24
 80014a0:	4618      	mov	r0, r3
 80014a2:	f002 fe55 	bl	8004150 <HAL_RCCEx_PeriphCLKConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <HAL_UART_MspInit+0xfc>
      Error_Handler();
 80014ac:	f7ff fdc0 	bl	8001030 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001524 <HAL_UART_MspInit+0x170>)
 80014b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80014b6:	4a1b      	ldr	r2, [pc, #108]	@ (8001524 <HAL_UART_MspInit+0x170>)
 80014b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014bc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80014c0:	4b18      	ldr	r3, [pc, #96]	@ (8001524 <HAL_UART_MspInit+0x170>)
 80014c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80014c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	4b15      	ldr	r3, [pc, #84]	@ (8001524 <HAL_UART_MspInit+0x170>)
 80014d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014d4:	4a13      	ldr	r2, [pc, #76]	@ (8001524 <HAL_UART_MspInit+0x170>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014de:	4b11      	ldr	r3, [pc, #68]	@ (8001524 <HAL_UART_MspInit+0x170>)
 80014e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014ec:	230c      	movs	r3, #12
 80014ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	2302      	movs	r3, #2
 80014f4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001504:	2307      	movs	r3, #7
 8001506:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800150e:	4619      	mov	r1, r3
 8001510:	4807      	ldr	r0, [pc, #28]	@ (8001530 <HAL_UART_MspInit+0x17c>)
 8001512:	f001 fb7b 	bl	8002c0c <HAL_GPIO_Init>
}
 8001516:	bf00      	nop
 8001518:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40013800 	.word	0x40013800
 8001524:	44020c00 	.word	0x44020c00
 8001528:	42020400 	.word	0x42020400
 800152c:	40004400 	.word	0x40004400
 8001530:	42020000 	.word	0x42020000

08001534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001538:	bf00      	nop
 800153a:	e7fd      	b.n	8001538 <NMI_Handler+0x4>

0800153c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001540:	bf00      	nop
 8001542:	e7fd      	b.n	8001540 <HardFault_Handler+0x4>

08001544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001548:	bf00      	nop
 800154a:	e7fd      	b.n	8001548 <MemManage_Handler+0x4>

0800154c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <BusFault_Handler+0x4>

08001554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <UsageFault_Handler+0x4>

0800155c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800158a:	f000 fa0f 	bl	80019ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001598:	4802      	ldr	r0, [pc, #8]	@ (80015a4 <FDCAN1_IT0_IRQHandler+0x10>)
 800159a:	f001 f8bf 	bl	800271c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	2000008c 	.word	0x2000008c

080015a8 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80015ac:	4802      	ldr	r0, [pc, #8]	@ (80015b8 <FDCAN1_IT1_IRQHandler+0x10>)
 80015ae:	f001 f8b5 	bl	800271c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	2000008c 	.word	0x2000008c

080015bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015c0:	4802      	ldr	r0, [pc, #8]	@ (80015cc <USART1_IRQHandler+0x10>)
 80015c2:	f007 fb05 	bl	8008bd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200001dc 	.word	0x200001dc

080015d0 <ICACHE_IRQHandler>:

/**
  * @brief This function handles Instruction cache global interrupt.
  */
void ICACHE_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ICACHE_IRQn 0 */

  /* USER CODE END ICACHE_IRQn 0 */
  HAL_ICACHE_IRQHandler();
 80015d4:	f001 fe00 	bl	80031d8 <HAL_ICACHE_IRQHandler>
  /* USER CODE BEGIN ICACHE_IRQn 1 */

  /* USER CODE END ICACHE_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}

080015dc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	e00a      	b.n	8001604 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015ee:	f3af 8000 	nop.w
 80015f2:	4601      	mov	r1, r0
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	60ba      	str	r2, [r7, #8]
 80015fa:	b2ca      	uxtb	r2, r1
 80015fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	3301      	adds	r3, #1
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	429a      	cmp	r2, r3
 800160a:	dbf0      	blt.n	80015ee <_read+0x12>
  }

  return len;
 800160c:	687b      	ldr	r3, [r7, #4]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b086      	sub	sp, #24
 800161a:	af00      	add	r7, sp, #0
 800161c:	60f8      	str	r0, [r7, #12]
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	e009      	b.n	800163c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	60ba      	str	r2, [r7, #8]
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe ffbb 	bl	80005ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	3301      	adds	r3, #1
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	429a      	cmp	r2, r3
 8001642:	dbf1      	blt.n	8001628 <_write+0x12>
  }
  return len;
 8001644:	687b      	ldr	r3, [r7, #4]
}
 8001646:	4618      	mov	r0, r3
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <_close>:

int _close(int file)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001656:	f04f 33ff 	mov.w	r3, #4294967295
}
 800165a:	4618      	mov	r0, r3
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
 800166e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001676:	605a      	str	r2, [r3, #4]
  return 0;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <_isatty>:

int _isatty(int file)
{
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800168e:	2301      	movs	r3, #1
}
 8001690:	4618      	mov	r0, r3
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c0:	4a14      	ldr	r2, [pc, #80]	@ (8001714 <_sbrk+0x5c>)
 80016c2:	4b15      	ldr	r3, [pc, #84]	@ (8001718 <_sbrk+0x60>)
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016cc:	4b13      	ldr	r3, [pc, #76]	@ (800171c <_sbrk+0x64>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d102      	bne.n	80016da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d4:	4b11      	ldr	r3, [pc, #68]	@ (800171c <_sbrk+0x64>)
 80016d6:	4a12      	ldr	r2, [pc, #72]	@ (8001720 <_sbrk+0x68>)
 80016d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016da:	4b10      	ldr	r3, [pc, #64]	@ (800171c <_sbrk+0x64>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d207      	bcs.n	80016f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016e8:	f008 fd04 	bl	800a0f4 <__errno>
 80016ec:	4603      	mov	r3, r0
 80016ee:	220c      	movs	r2, #12
 80016f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295
 80016f6:	e009      	b.n	800170c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f8:	4b08      	ldr	r3, [pc, #32]	@ (800171c <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016fe:	4b07      	ldr	r3, [pc, #28]	@ (800171c <_sbrk+0x64>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4413      	add	r3, r2
 8001706:	4a05      	ldr	r2, [pc, #20]	@ (800171c <_sbrk+0x64>)
 8001708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800170a:	68fb      	ldr	r3, [r7, #12]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20044000 	.word	0x20044000
 8001718:	00000400 	.word	0x00000400
 800171c:	20000354 	.word	0x20000354
 8001720:	200004a8 	.word	0x200004a8

08001724 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800172a:	4b35      	ldr	r3, [pc, #212]	@ (8001800 <SystemInit+0xdc>)
 800172c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001730:	4a33      	ldr	r2, [pc, #204]	@ (8001800 <SystemInit+0xdc>)
 8001732:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001736:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800173a:	4b32      	ldr	r3, [pc, #200]	@ (8001804 <SystemInit+0xe0>)
 800173c:	2201      	movs	r2, #1
 800173e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001740:	4b30      	ldr	r3, [pc, #192]	@ (8001804 <SystemInit+0xe0>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001746:	4b2f      	ldr	r3, [pc, #188]	@ (8001804 <SystemInit+0xe0>)
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800174c:	4b2d      	ldr	r3, [pc, #180]	@ (8001804 <SystemInit+0xe0>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	492c      	ldr	r1, [pc, #176]	@ (8001804 <SystemInit+0xe0>)
 8001752:	4b2d      	ldr	r3, [pc, #180]	@ (8001808 <SystemInit+0xe4>)
 8001754:	4013      	ands	r3, r2
 8001756:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001758:	4b2a      	ldr	r3, [pc, #168]	@ (8001804 <SystemInit+0xe0>)
 800175a:	2200      	movs	r2, #0
 800175c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800175e:	4b29      	ldr	r3, [pc, #164]	@ (8001804 <SystemInit+0xe0>)
 8001760:	2200      	movs	r2, #0
 8001762:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001764:	4b27      	ldr	r3, [pc, #156]	@ (8001804 <SystemInit+0xe0>)
 8001766:	2200      	movs	r2, #0
 8001768:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800176a:	4b26      	ldr	r3, [pc, #152]	@ (8001804 <SystemInit+0xe0>)
 800176c:	4a27      	ldr	r2, [pc, #156]	@ (800180c <SystemInit+0xe8>)
 800176e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001770:	4b24      	ldr	r3, [pc, #144]	@ (8001804 <SystemInit+0xe0>)
 8001772:	2200      	movs	r2, #0
 8001774:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001776:	4b23      	ldr	r3, [pc, #140]	@ (8001804 <SystemInit+0xe0>)
 8001778:	4a24      	ldr	r2, [pc, #144]	@ (800180c <SystemInit+0xe8>)
 800177a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800177c:	4b21      	ldr	r3, [pc, #132]	@ (8001804 <SystemInit+0xe0>)
 800177e:	2200      	movs	r2, #0
 8001780:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001782:	4b20      	ldr	r3, [pc, #128]	@ (8001804 <SystemInit+0xe0>)
 8001784:	4a21      	ldr	r2, [pc, #132]	@ (800180c <SystemInit+0xe8>)
 8001786:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001788:	4b1e      	ldr	r3, [pc, #120]	@ (8001804 <SystemInit+0xe0>)
 800178a:	2200      	movs	r2, #0
 800178c:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800178e:	4b1d      	ldr	r3, [pc, #116]	@ (8001804 <SystemInit+0xe0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a1c      	ldr	r2, [pc, #112]	@ (8001804 <SystemInit+0xe0>)
 8001794:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001798:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800179a:	4b1a      	ldr	r3, [pc, #104]	@ (8001804 <SystemInit+0xe0>)
 800179c:	2200      	movs	r2, #0
 800179e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017a0:	4b17      	ldr	r3, [pc, #92]	@ (8001800 <SystemInit+0xdc>)
 80017a2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80017a6:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80017a8:	4b19      	ldr	r3, [pc, #100]	@ (8001810 <SystemInit+0xec>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80017b0:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80017b8:	d003      	beq.n	80017c2 <SystemInit+0x9e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80017c0:	d117      	bne.n	80017f2 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80017c2:	4b13      	ldr	r3, [pc, #76]	@ (8001810 <SystemInit+0xec>)
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d005      	beq.n	80017da <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80017ce:	4b10      	ldr	r3, [pc, #64]	@ (8001810 <SystemInit+0xec>)
 80017d0:	4a10      	ldr	r2, [pc, #64]	@ (8001814 <SystemInit+0xf0>)
 80017d2:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80017d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001810 <SystemInit+0xec>)
 80017d6:	4a10      	ldr	r2, [pc, #64]	@ (8001818 <SystemInit+0xf4>)
 80017d8:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80017da:	4b0d      	ldr	r3, [pc, #52]	@ (8001810 <SystemInit+0xec>)
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	4a0c      	ldr	r2, [pc, #48]	@ (8001810 <SystemInit+0xec>)
 80017e0:	f043 0302 	orr.w	r3, r3, #2
 80017e4:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80017e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001810 <SystemInit+0xec>)
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	4a09      	ldr	r2, [pc, #36]	@ (8001810 <SystemInit+0xec>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	61d3      	str	r3, [r2, #28]
  }
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	e000ed00 	.word	0xe000ed00
 8001804:	44020c00 	.word	0x44020c00
 8001808:	eae2eae3 	.word	0xeae2eae3
 800180c:	01010280 	.word	0x01010280
 8001810:	40022000 	.word	0x40022000
 8001814:	08192a3b 	.word	0x08192a3b
 8001818:	4c5d6e7f 	.word	0x4c5d6e7f

0800181c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800181c:	480d      	ldr	r0, [pc, #52]	@ (8001854 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800181e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001820:	f7ff ff80 	bl	8001724 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001824:	480c      	ldr	r0, [pc, #48]	@ (8001858 <LoopForever+0x6>)
  ldr r1, =_edata
 8001826:	490d      	ldr	r1, [pc, #52]	@ (800185c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001828:	4a0d      	ldr	r2, [pc, #52]	@ (8001860 <LoopForever+0xe>)
  movs r3, #0
 800182a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800182c:	e002      	b.n	8001834 <LoopCopyDataInit>

0800182e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800182e:	58d4      	ldr	r4, [r2, r3]
	  str r4, [r0, r3]
 8001830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001832:	3304      	adds	r3, #4

08001834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001838:	d3f9      	bcc.n	800182e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800183a:	4a0a      	ldr	r2, [pc, #40]	@ (8001864 <LoopForever+0x12>)
  ldr r4, =_ebss
 800183c:	4c0a      	ldr	r4, [pc, #40]	@ (8001868 <LoopForever+0x16>)
  movs r3, #0
 800183e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001840:	e001      	b.n	8001846 <LoopFillZerobss>

08001842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001844:	3204      	adds	r2, #4

08001846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001848:	d3fb      	bcc.n	8001842 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800184a:	f008 fc59 	bl	800a100 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800184e:	f7fe fec5 	bl	80005dc <main>

08001852 <LoopForever>:

LoopForever:
    b LoopForever
 8001852:	e7fe      	b.n	8001852 <LoopForever>
  ldr   r0, =_estack
 8001854:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8001858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800185c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001860:	0800aefc 	.word	0x0800aefc
  ldr r2, =_sbss
 8001864:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001868:	200004a8 	.word	0x200004a8

0800186c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800186c:	e7fe      	b.n	800186c <ADC1_IRQHandler>
	...

08001870 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001874:	2003      	movs	r0, #3
 8001876:	f000 f98a 	bl	8001b8e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800187a:	f002 fadf 	bl	8003e3c <HAL_RCC_GetSysClockFreq>
 800187e:	4602      	mov	r2, r0
 8001880:	4b0c      	ldr	r3, [pc, #48]	@ (80018b4 <HAL_Init+0x44>)
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	f003 030f 	and.w	r3, r3, #15
 8001888:	490b      	ldr	r1, [pc, #44]	@ (80018b8 <HAL_Init+0x48>)
 800188a:	5ccb      	ldrb	r3, [r1, r3]
 800188c:	fa22 f303 	lsr.w	r3, r2, r3
 8001890:	4a0a      	ldr	r2, [pc, #40]	@ (80018bc <HAL_Init+0x4c>)
 8001892:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001894:	2004      	movs	r0, #4
 8001896:	f000 f9cf 	bl	8001c38 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800189a:	200f      	movs	r0, #15
 800189c:	f000 f810 	bl	80018c0 <HAL_InitTick>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e002      	b.n	80018b0 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018aa:	f7ff fbd1 	bl	8001050 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	44020c00 	.word	0x44020c00
 80018b8:	0800ae68 	.word	0x0800ae68
 80018bc:	20000008 	.word	0x20000008

080018c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80018cc:	4b33      	ldr	r3, [pc, #204]	@ (800199c <HAL_InitTick+0xdc>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e05c      	b.n	8001992 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80018d8:	4b31      	ldr	r3, [pc, #196]	@ (80019a0 <HAL_InitTick+0xe0>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	d10c      	bne.n	80018fe <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80018e4:	4b2f      	ldr	r3, [pc, #188]	@ (80019a4 <HAL_InitTick+0xe4>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b2c      	ldr	r3, [pc, #176]	@ (800199c <HAL_InitTick+0xdc>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	4619      	mov	r1, r3
 80018ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	e037      	b.n	800196e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80018fe:	f000 f9f3 	bl	8001ce8 <HAL_SYSTICK_GetCLKSourceConfig>
 8001902:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	2b02      	cmp	r3, #2
 8001908:	d023      	beq.n	8001952 <HAL_InitTick+0x92>
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	2b02      	cmp	r3, #2
 800190e:	d82d      	bhi.n	800196c <HAL_InitTick+0xac>
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_InitTick+0x5e>
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d00d      	beq.n	8001938 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 800191c:	e026      	b.n	800196c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800191e:	4b21      	ldr	r3, [pc, #132]	@ (80019a4 <HAL_InitTick+0xe4>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	4b1e      	ldr	r3, [pc, #120]	@ (800199c <HAL_InitTick+0xdc>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	4619      	mov	r1, r3
 8001928:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800192c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001930:	fbb2 f3f3 	udiv	r3, r2, r3
 8001934:	60fb      	str	r3, [r7, #12]
        break;
 8001936:	e01a      	b.n	800196e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001938:	4b18      	ldr	r3, [pc, #96]	@ (800199c <HAL_InitTick+0xdc>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001942:	fbb3 f3f2 	udiv	r3, r3, r2
 8001946:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800194a:	fbb2 f3f3 	udiv	r3, r2, r3
 800194e:	60fb      	str	r3, [r7, #12]
        break;
 8001950:	e00d      	b.n	800196e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001952:	4b12      	ldr	r3, [pc, #72]	@ (800199c <HAL_InitTick+0xdc>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	461a      	mov	r2, r3
 8001958:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800195c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001960:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001964:	fbb2 f3f3 	udiv	r3, r2, r3
 8001968:	60fb      	str	r3, [r7, #12]
        break;
 800196a:	e000      	b.n	800196e <HAL_InitTick+0xae>
        break;
 800196c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f000 f940 	bl	8001bf4 <HAL_SYSTICK_Config>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e009      	b.n	8001992 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800197e:	2200      	movs	r2, #0
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	f04f 30ff 	mov.w	r0, #4294967295
 8001986:	f000 f90d 	bl	8001ba4 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800198a:	4a07      	ldr	r2, [pc, #28]	@ (80019a8 <HAL_InitTick+0xe8>)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000010 	.word	0x20000010
 80019a0:	e000e010 	.word	0xe000e010
 80019a4:	20000008 	.word	0x20000008
 80019a8:	2000000c 	.word	0x2000000c

080019ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019b0:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <HAL_IncTick+0x20>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <HAL_IncTick+0x24>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4413      	add	r3, r2
 80019bc:	4a04      	ldr	r2, [pc, #16]	@ (80019d0 <HAL_IncTick+0x24>)
 80019be:	6013      	str	r3, [r2, #0]
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	20000010 	.word	0x20000010
 80019d0:	20000358 	.word	0x20000358

080019d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return uwTick;
 80019d8:	4b03      	ldr	r3, [pc, #12]	@ (80019e8 <HAL_GetTick+0x14>)
 80019da:	681b      	ldr	r3, [r3, #0]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	20000358 	.word	0x20000358

080019ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019f4:	f7ff ffee 	bl	80019d4 <HAL_GetTick>
 80019f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a04:	d005      	beq.n	8001a12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a06:	4b0a      	ldr	r3, [pc, #40]	@ (8001a30 <HAL_Delay+0x44>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4413      	add	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a12:	bf00      	nop
 8001a14:	f7ff ffde 	bl	80019d4 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d8f7      	bhi.n	8001a14 <HAL_Delay+0x28>
  {
  }
}
 8001a24:	bf00      	nop
 8001a26:	bf00      	nop
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000010 	.word	0x20000010

08001a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a44:	4b0c      	ldr	r3, [pc, #48]	@ (8001a78 <__NVIC_SetPriorityGrouping+0x44>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a50:	4013      	ands	r3, r2
 8001a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a66:	4a04      	ldr	r2, [pc, #16]	@ (8001a78 <__NVIC_SetPriorityGrouping+0x44>)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	60d3      	str	r3, [r2, #12]
}
 8001a6c:	bf00      	nop
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a80:	4b04      	ldr	r3, [pc, #16]	@ (8001a94 <__NVIC_GetPriorityGrouping+0x18>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	0a1b      	lsrs	r3, r3, #8
 8001a86:	f003 0307 	and.w	r3, r3, #7
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001aa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	db0b      	blt.n	8001ac2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aaa:	88fb      	ldrh	r3, [r7, #6]
 8001aac:	f003 021f 	and.w	r2, r3, #31
 8001ab0:	4907      	ldr	r1, [pc, #28]	@ (8001ad0 <__NVIC_EnableIRQ+0x38>)
 8001ab2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ab6:	095b      	lsrs	r3, r3, #5
 8001ab8:	2001      	movs	r0, #1
 8001aba:	fa00 f202 	lsl.w	r2, r0, r2
 8001abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	e000e100 	.word	0xe000e100

08001ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	6039      	str	r1, [r7, #0]
 8001ade:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ae0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	db0a      	blt.n	8001afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	490c      	ldr	r1, [pc, #48]	@ (8001b20 <__NVIC_SetPriority+0x4c>)
 8001aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001af2:	0112      	lsls	r2, r2, #4
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	440b      	add	r3, r1
 8001af8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001afc:	e00a      	b.n	8001b14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	4908      	ldr	r1, [pc, #32]	@ (8001b24 <__NVIC_SetPriority+0x50>)
 8001b04:	88fb      	ldrh	r3, [r7, #6]
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	3b04      	subs	r3, #4
 8001b0c:	0112      	lsls	r2, r2, #4
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	440b      	add	r3, r1
 8001b12:	761a      	strb	r2, [r3, #24]
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000e100 	.word	0xe000e100
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b089      	sub	sp, #36	@ 0x24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f1c3 0307 	rsb	r3, r3, #7
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	bf28      	it	cs
 8001b46:	2304      	movcs	r3, #4
 8001b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	2b06      	cmp	r3, #6
 8001b50:	d902      	bls.n	8001b58 <NVIC_EncodePriority+0x30>
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3b03      	subs	r3, #3
 8001b56:	e000      	b.n	8001b5a <NVIC_EncodePriority+0x32>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43da      	mvns	r2, r3
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b70:	f04f 31ff 	mov.w	r1, #4294967295
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7a:	43d9      	mvns	r1, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b80:	4313      	orrs	r3, r2
         );
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3724      	adds	r7, #36	@ 0x24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff ff4c 	bl	8001a34 <__NVIC_SetPriorityGrouping>
}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
 8001bb0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb2:	f7ff ff63 	bl	8001a7c <__NVIC_GetPriorityGrouping>
 8001bb6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	68b9      	ldr	r1, [r7, #8]
 8001bbc:	6978      	ldr	r0, [r7, #20]
 8001bbe:	f7ff ffb3 	bl	8001b28 <NVIC_EncodePriority>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bc8:	4611      	mov	r1, r2
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff ff82 	bl	8001ad4 <__NVIC_SetPriority>
}
 8001bd0:	bf00      	nop
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff ff56 	bl	8001a98 <__NVIC_EnableIRQ>
}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c04:	d301      	bcc.n	8001c0a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001c06:	2301      	movs	r3, #1
 8001c08:	e00d      	b.n	8001c26 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c34 <HAL_SYSTICK_Config+0x40>)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001c12:	4b08      	ldr	r3, [pc, #32]	@ (8001c34 <HAL_SYSTICK_Config+0x40>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001c18:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <HAL_SYSTICK_Config+0x40>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a05      	ldr	r2, [pc, #20]	@ (8001c34 <HAL_SYSTICK_Config+0x40>)
 8001c1e:	f043 0303 	orr.w	r3, r3, #3
 8001c22:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000e010 	.word	0xe000e010

08001c38 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	d844      	bhi.n	8001cd0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001c46:	a201      	add	r2, pc, #4	@ (adr r2, 8001c4c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c4c:	08001c6f 	.word	0x08001c6f
 8001c50:	08001c8d 	.word	0x08001c8d
 8001c54:	08001caf 	.word	0x08001caf
 8001c58:	08001cd1 	.word	0x08001cd1
 8001c5c:	08001c61 	.word	0x08001c61
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001c60:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a1e      	ldr	r2, [pc, #120]	@ (8001ce0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001c66:	f043 0304 	orr.w	r3, r3, #4
 8001c6a:	6013      	str	r3, [r2, #0]
      break;
 8001c6c:	e031      	b.n	8001cd2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001c6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a1b      	ldr	r2, [pc, #108]	@ (8001ce0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001c74:	f023 0304 	bic.w	r3, r3, #4
 8001c78:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001c7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001c80:	4a18      	ldr	r2, [pc, #96]	@ (8001ce4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001c82:	f023 030c 	bic.w	r3, r3, #12
 8001c86:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001c8a:	e022      	b.n	8001cd2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001c8c:	4b14      	ldr	r3, [pc, #80]	@ (8001ce0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a13      	ldr	r2, [pc, #76]	@ (8001ce0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001c92:	f023 0304 	bic.w	r3, r3, #4
 8001c96:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001c98:	4b12      	ldr	r3, [pc, #72]	@ (8001ce4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001c9a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001c9e:	f023 030c 	bic.w	r3, r3, #12
 8001ca2:	4a10      	ldr	r2, [pc, #64]	@ (8001ce4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ca4:	f043 0304 	orr.w	r3, r3, #4
 8001ca8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001cac:	e011      	b.n	8001cd2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001cae:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a0b      	ldr	r2, [pc, #44]	@ (8001ce0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001cb4:	f023 0304 	bic.w	r3, r3, #4
 8001cb8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001cba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001cbc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001cc0:	f023 030c 	bic.w	r3, r3, #12
 8001cc4:	4a07      	ldr	r2, [pc, #28]	@ (8001ce4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001cc6:	f043 0308 	orr.w	r3, r3, #8
 8001cca:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001cce:	e000      	b.n	8001cd2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001cd0:	bf00      	nop
  }
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000e010 	.word	0xe000e010
 8001ce4:	44020c00 	.word	0x44020c00

08001ce8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001cee:	4b17      	ldr	r3, [pc, #92]	@ (8001d4c <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0304 	and.w	r3, r3, #4
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d002      	beq.n	8001d00 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001cfa:	2304      	movs	r3, #4
 8001cfc:	607b      	str	r3, [r7, #4]
 8001cfe:	e01e      	b.n	8001d3e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001d00:	4b13      	ldr	r3, [pc, #76]	@ (8001d50 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8001d02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001d06:	f003 030c 	and.w	r3, r3, #12
 8001d0a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d00f      	beq.n	8001d32 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d80f      	bhi.n	8001d38 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	d003      	beq.n	8001d2c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001d24:	e008      	b.n	8001d38 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001d26:	2300      	movs	r3, #0
 8001d28:	607b      	str	r3, [r7, #4]
        break;
 8001d2a:	e008      	b.n	8001d3e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	607b      	str	r3, [r7, #4]
        break;
 8001d30:	e005      	b.n	8001d3e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001d32:	2302      	movs	r3, #2
 8001d34:	607b      	str	r3, [r7, #4]
        break;
 8001d36:	e002      	b.n	8001d3e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	607b      	str	r3, [r7, #4]
        break;
 8001d3c:	bf00      	nop
    }
  }
  return systick_source;
 8001d3e:	687b      	ldr	r3, [r7, #4]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000e010 	.word	0xe000e010
 8001d50:	44020c00 	.word	0x44020c00

08001d54 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8001d5c:	f7ff fe3a 	bl	80019d4 <HAL_GetTick>
 8001d60:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e06b      	b.n	8001e44 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d008      	beq.n	8001d8a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e05c      	b.n	8001e44 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	695a      	ldr	r2, [r3, #20]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f042 0204 	orr.w	r2, r2, #4
 8001d98:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2205      	movs	r2, #5
 8001d9e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001da2:	e020      	b.n	8001de6 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001da4:	f7ff fe16 	bl	80019d4 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b05      	cmp	r3, #5
 8001db0:	d919      	bls.n	8001de6 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db6:	f043 0210 	orr.w	r2, r3, #16
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e02e      	b.n	8001e44 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0d7      	beq.n	8001da4 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	695a      	ldr	r2, [r3, #20]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0202 	orr.w	r2, r2, #2
 8001e02:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2204      	movs	r2, #4
 8001e08:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8001e14:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d007      	beq.n	8001e3a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e2e:	2201      	movs	r2, #1
 8001e30:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2200      	movs	r2, #0
 8001e38:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e019      	b.n	8001e92 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d004      	beq.n	8001e74 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2220      	movs	r2, #32
 8001e6e:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e00e      	b.n	8001e92 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2204      	movs	r2, #4
 8001e78:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6812      	ldr	r2, [r2, #0]
 8001e86:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e8a:	f043 0304 	orr.w	r3, r3, #4
 8001e8e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
	...

08001ea0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e147      	b.n	8002142 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d106      	bne.n	8001ecc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff f8ce 	bl	8001068 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	699a      	ldr	r2, [r3, #24]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0210 	bic.w	r2, r2, #16
 8001eda:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001edc:	f7ff fd7a 	bl	80019d4 <HAL_GetTick>
 8001ee0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001ee2:	e012      	b.n	8001f0a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001ee4:	f7ff fd76 	bl	80019d4 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b0a      	cmp	r3, #10
 8001ef0:	d90b      	bls.n	8001f0a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ef6:	f043 0201 	orr.w	r2, r3, #1
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2203      	movs	r2, #3
 8001f02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e11b      	b.n	8002142 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d0e5      	beq.n	8001ee4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	699a      	ldr	r2, [r3, #24]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0201 	orr.w	r2, r2, #1
 8001f26:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f28:	f7ff fd54 	bl	80019d4 <HAL_GetTick>
 8001f2c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001f2e:	e012      	b.n	8001f56 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001f30:	f7ff fd50 	bl	80019d4 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b0a      	cmp	r3, #10
 8001f3c:	d90b      	bls.n	8001f56 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f42:	f043 0201 	orr.w	r2, r3, #1
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e0f5      	b.n	8002142 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0e5      	beq.n	8001f30 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	699a      	ldr	r2, [r3, #24]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0202 	orr.w	r2, r2, #2
 8001f72:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a74      	ldr	r2, [pc, #464]	@ (800214c <HAL_FDCAN_Init+0x2ac>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d103      	bne.n	8001f86 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001f7e:	4a74      	ldr	r2, [pc, #464]	@ (8002150 <HAL_FDCAN_Init+0x2b0>)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	7c1b      	ldrb	r3, [r3, #16]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d108      	bne.n	8001fa0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	699a      	ldr	r2, [r3, #24]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f9c:	619a      	str	r2, [r3, #24]
 8001f9e:	e007      	b.n	8001fb0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	699a      	ldr	r2, [r3, #24]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001fae:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	7c5b      	ldrb	r3, [r3, #17]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d108      	bne.n	8001fca <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	699a      	ldr	r2, [r3, #24]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001fc6:	619a      	str	r2, [r3, #24]
 8001fc8:	e007      	b.n	8001fda <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	699a      	ldr	r2, [r3, #24]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001fd8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	7c9b      	ldrb	r3, [r3, #18]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d108      	bne.n	8001ff4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	699a      	ldr	r2, [r3, #24]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001ff0:	619a      	str	r2, [r3, #24]
 8001ff2:	e007      	b.n	8002004 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	699a      	ldr	r2, [r3, #24]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002002:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	699a      	ldr	r2, [r3, #24]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002028:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	691a      	ldr	r2, [r3, #16]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0210 	bic.w	r2, r2, #16
 8002038:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d108      	bne.n	8002054 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	699a      	ldr	r2, [r3, #24]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f042 0204 	orr.w	r2, r2, #4
 8002050:	619a      	str	r2, [r3, #24]
 8002052:	e02c      	b.n	80020ae <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d028      	beq.n	80020ae <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d01c      	beq.n	800209e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	699a      	ldr	r2, [r3, #24]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002072:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	691a      	ldr	r2, [r3, #16]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 0210 	orr.w	r2, r2, #16
 8002082:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	2b03      	cmp	r3, #3
 800208a:	d110      	bne.n	80020ae <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	699a      	ldr	r2, [r3, #24]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0220 	orr.w	r2, r2, #32
 800209a:	619a      	str	r2, [r3, #24]
 800209c:	e007      	b.n	80020ae <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	699a      	ldr	r2, [r3, #24]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0220 	orr.w	r2, r2, #32
 80020ac:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80020be:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80020c6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80020d6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80020d8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80020e2:	d115      	bne.n	8002110 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ee:	3b01      	subs	r3, #1
 80020f0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80020f2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f8:	3b01      	subs	r3, #1
 80020fa:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80020fc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002104:	3b01      	subs	r3, #1
 8002106:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800210c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800210e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 fc92 	bl	8002a50 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	4000a400 	.word	0x4000a400
 8002150:	4000a500 	.word	0x4000a500

08002154 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8002154:	b480      	push	{r7}
 8002156:	b087      	sub	sp, #28
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002164:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002166:	7dfb      	ldrb	r3, [r7, #23]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d002      	beq.n	8002172 <HAL_FDCAN_ConfigFilter+0x1e>
 800216c:	7dfb      	ldrb	r3, [r7, #23]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d13d      	bne.n	80021ee <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d119      	bne.n	80021ae <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002186:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800218e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002194:	4313      	orrs	r3, r2
 8002196:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	e01d      	b.n	80021ea <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	075a      	lsls	r2, r3, #29
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	079a      	lsls	r2, r3, #30
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	4413      	add	r3, r2
 80021d6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	3304      	adds	r3, #4
 80021e2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	e006      	b.n	80021fc <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021f2:	f043 0202 	orr.w	r2, r3, #2
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
  }
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	371c      	adds	r7, #28
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b01      	cmp	r3, #1
 800221a:	d110      	bne.n	800223e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2202      	movs	r2, #2
 8002220:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	699a      	ldr	r2, [r3, #24]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0201 	bic.w	r2, r2, #1
 8002232:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800223a:	2300      	movs	r3, #0
 800223c:	e006      	b.n	800224c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002242:	f043 0204 	orr.w	r2, r3, #4
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
  }
}
 800224c:	4618      	mov	r0, r3
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d12c      	bne.n	80022ca <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002278:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d007      	beq.n	8002290 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002284:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e023      	b.n	80022d8 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002298:	0c1b      	lsrs	r3, r3, #16
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 fc34 	bl	8002b14 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2101      	movs	r1, #1
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	fa01 f202 	lsl.w	r2, r1, r2
 80022b8:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80022bc:	2201      	movs	r2, #1
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	409a      	lsls	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 80022c6:	2300      	movs	r3, #0
 80022c8:	e006      	b.n	80022d8 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ce:	f043 0208 	orr.w	r2, r3, #8
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
  }
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b08b      	sub	sp, #44	@ 0x2c
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
 80022ec:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80022f8:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80022fa:	7efb      	ldrb	r3, [r7, #27]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	f040 80e8 	bne.w	80024d2 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2b40      	cmp	r3, #64	@ 0x40
 8002306:	d137      	bne.n	8002378 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002310:	f003 030f 	and.w	r3, r3, #15
 8002314:	2b00      	cmp	r3, #0
 8002316:	d107      	bne.n	8002328 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800231c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0db      	b.n	80024e0 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002330:	0e1b      	lsrs	r3, r3, #24
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b01      	cmp	r3, #1
 8002338:	d10a      	bne.n	8002350 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002342:	0a5b      	lsrs	r3, r3, #9
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800234c:	2301      	movs	r3, #1
 800234e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002358:	0a1b      	lsrs	r3, r3, #8
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	69fa      	ldr	r2, [r7, #28]
 8002360:	4413      	add	r3, r2
 8002362:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8002368:	69fa      	ldr	r2, [r7, #28]
 800236a:	4613      	mov	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4413      	add	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	440b      	add	r3, r1
 8002374:	627b      	str	r3, [r7, #36]	@ 0x24
 8002376:	e036      	b.n	80023e6 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002380:	f003 030f 	and.w	r3, r3, #15
 8002384:	2b00      	cmp	r3, #0
 8002386:	d107      	bne.n	8002398 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800238c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e0a3      	b.n	80024e0 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023a0:	0e1b      	lsrs	r3, r3, #24
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d10a      	bne.n	80023c0 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023b2:	0a1b      	lsrs	r3, r3, #8
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d101      	bne.n	80023c0 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80023bc:	2301      	movs	r3, #1
 80023be:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023c8:	0a1b      	lsrs	r3, r3, #8
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	69fa      	ldr	r2, [r7, #28]
 80023d0:	4413      	add	r3, r2
 80023d2:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80023d8:	69fa      	ldr	r2, [r7, #28]
 80023da:	4613      	mov	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	4413      	add	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	440b      	add	r3, r1
 80023e4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80023e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d107      	bne.n	800240a <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80023fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	0c9b      	lsrs	r3, r3, #18
 8002400:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	e005      	b.n	8002416 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800240a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8002422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800242e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002430:	3304      	adds	r3, #4
 8002432:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8002434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	b29a      	uxth	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800243e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	0c1b      	lsrs	r3, r3, #16
 8002444:	f003 020f 	and.w	r2, r3, #15
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800244c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8002464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	0e1b      	lsrs	r3, r3, #24
 800246a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8002472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	0fda      	lsrs	r2, r3, #31
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800247c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247e:	3304      	adds	r3, #4
 8002480:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8002482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002484:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8002486:	2300      	movs	r3, #0
 8002488:	623b      	str	r3, [r7, #32]
 800248a:	e00a      	b.n	80024a2 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	441a      	add	r2, r3
 8002492:	6839      	ldr	r1, [r7, #0]
 8002494:	6a3b      	ldr	r3, [r7, #32]
 8002496:	440b      	add	r3, r1
 8002498:	7812      	ldrb	r2, [r2, #0]
 800249a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800249c:	6a3b      	ldr	r3, [r7, #32]
 800249e:	3301      	adds	r3, #1
 80024a0:	623b      	str	r3, [r7, #32]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	4a11      	ldr	r2, [pc, #68]	@ (80024ec <HAL_FDCAN_GetRxMessage+0x20c>)
 80024a8:	5cd3      	ldrb	r3, [r2, r3]
 80024aa:	461a      	mov	r2, r3
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d3ec      	bcc.n	800248c <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b40      	cmp	r3, #64	@ 0x40
 80024b6:	d105      	bne.n	80024c4 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	69fa      	ldr	r2, [r7, #28]
 80024be:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80024c2:	e004      	b.n	80024ce <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	69fa      	ldr	r2, [r7, #28]
 80024ca:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	e006      	b.n	80024e0 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024d6:	f043 0208 	orr.w	r2, r3, #8
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
  }
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	372c      	adds	r7, #44	@ 0x2c
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	0800ae80 	.word	0x0800ae80

080024f0 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(const FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	2b40      	cmp	r3, #64	@ 0x40
 80024fe:	d107      	bne.n	8002510 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002508:	f003 030f 	and.w	r3, r3, #15
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	e006      	b.n	800251e <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002518:	f003 030f 	and.w	r3, r3, #15
 800251c:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 800251e:	68fb      	ldr	r3, [r7, #12]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8002542:	68fb      	ldr	r3, [r7, #12]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002550:	b480      	push	{r7}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002562:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002564:	7dfb      	ldrb	r3, [r7, #23]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d003      	beq.n	8002572 <HAL_FDCAN_ActivateNotification+0x22>
 800256a:	7dfb      	ldrb	r3, [r7, #23]
 800256c:	2b02      	cmp	r3, #2
 800256e:	f040 80c8 	bne.w	8002702 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002578:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	2b00      	cmp	r3, #0
 8002582:	d004      	beq.n	800258e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d03b      	beq.n	8002606 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002594:	2b00      	cmp	r3, #0
 8002596:	d004      	beq.n	80025a2 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d031      	beq.n	8002606 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d004      	beq.n	80025b6 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	f003 0304 	and.w	r3, r3, #4
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d027      	beq.n	8002606 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d004      	beq.n	80025ca <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d01d      	beq.n	8002606 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d004      	beq.n	80025de <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	f003 0310 	and.w	r3, r3, #16
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d013      	beq.n	8002606 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d004      	beq.n	80025f2 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	f003 0320 	and.w	r3, r3, #32
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d009      	beq.n	8002606 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00c      	beq.n	8002616 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002602:	2b00      	cmp	r3, #0
 8002604:	d107      	bne.n	8002616 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f042 0201 	orr.w	r2, r2, #1
 8002614:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	2b00      	cmp	r3, #0
 800261e:	d004      	beq.n	800262a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d13b      	bne.n	80026a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002630:	2b00      	cmp	r3, #0
 8002632:	d004      	beq.n	800263e <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d131      	bne.n	80026a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002644:	2b00      	cmp	r3, #0
 8002646:	d004      	beq.n	8002652 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b00      	cmp	r3, #0
 8002650:	d127      	bne.n	80026a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002658:	2b00      	cmp	r3, #0
 800265a:	d004      	beq.n	8002666 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	2b00      	cmp	r3, #0
 8002664:	d11d      	bne.n	80026a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800266c:	2b00      	cmp	r3, #0
 800266e:	d004      	beq.n	800267a <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	2b00      	cmp	r3, #0
 8002678:	d113      	bne.n	80026a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002680:	2b00      	cmp	r3, #0
 8002682:	d004      	beq.n	800268e <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	f003 0320 	and.w	r3, r3, #32
 800268a:	2b00      	cmp	r3, #0
 800268c:	d109      	bne.n	80026a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00c      	beq.n	80026b2 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d007      	beq.n	80026b2 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f042 0202 	orr.w	r2, r2, #2
 80026b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d009      	beq.n	80026d0 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d009      	beq.n	80026ee <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80026fe:	2300      	movs	r3, #0
 8002700:	e006      	b.n	8002710 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002706:	f043 0202 	orr.w	r2, r3, #2
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
  }
}
 8002710:	4618      	mov	r0, r3
 8002712:	371c      	adds	r7, #28
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08c      	sub	sp, #48	@ 0x30
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800272a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800272e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002736:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002738:	4013      	ands	r3, r2
 800273a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800274e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002750:	4013      	ands	r3, r2
 8002752:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800275a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800275e:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002768:	4013      	ands	r3, r2
 800276a:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002772:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8002776:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800277e:	6a3a      	ldr	r2, [r7, #32]
 8002780:	4013      	ands	r3, r2
 8002782:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800278a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800278e:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002796:	69fa      	ldr	r2, [r7, #28]
 8002798:	4013      	ands	r3, r2
 800279a:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027a2:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027aa:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00b      	beq.n	80027ce <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d006      	beq.n	80027ce <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2240      	movs	r2, #64	@ 0x40
 80027c6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 f916 	bl	80029fa <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d019      	beq.n	800280c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d014      	beq.n	800280c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80027ea:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4013      	ands	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002802:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002804:	6939      	ldr	r1, [r7, #16]
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f8d8 	bl	80029bc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800280c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800280e:	2b00      	cmp	r3, #0
 8002810:	d007      	beq.n	8002822 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002818:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800281a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 f8a2 	bl	8002966 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002824:	2b00      	cmp	r3, #0
 8002826:	d007      	beq.n	8002838 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800282e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002830:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7fe fb26 	bl	8000e84 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283a:	2b00      	cmp	r3, #0
 800283c:	d007      	beq.n	800284e <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002844:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002846:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f897 	bl	800297c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00c      	beq.n	8002872 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800285e:	2b00      	cmp	r3, #0
 8002860:	d007      	beq.n	8002872 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800286a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 f890 	bl	8002992 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002878:	2b00      	cmp	r3, #0
 800287a:	d018      	beq.n	80028ae <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002882:	2b00      	cmp	r3, #0
 8002884:	d013      	beq.n	80028ae <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800288e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	4013      	ands	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2280      	movs	r2, #128	@ 0x80
 80028a4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80028a6:	68f9      	ldr	r1, [r7, #12]
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f87c 	bl	80029a6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00c      	beq.n	80028d2 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d007      	beq.n	80028d2 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028ca:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 f880 	bl	80029d2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00c      	beq.n	80028f6 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d007      	beq.n	80028f6 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80028ee:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 f878 	bl	80029e6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00f      	beq.n	8002920 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002912:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002918:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d007      	beq.n	8002936 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	69fa      	ldr	r2, [r7, #28]
 800292c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800292e:	69f9      	ldr	r1, [r7, #28]
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f876 	bl	8002a22 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d009      	beq.n	8002950 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6a3a      	ldr	r2, [r7, #32]
 8002942:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002948:	6a3b      	ldr	r3, [r7, #32]
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002954:	2b00      	cmp	r3, #0
 8002956:	d002      	beq.n	800295e <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 f858 	bl	8002a0e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800295e:	bf00      	nop
 8002960:	3730      	adds	r7, #48	@ 0x30
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
 800296e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_FDCAN_GetError>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval FDCAN Error Code
  */
uint32_t HAL_FDCAN_GetError(const FDCAN_HandleTypeDef *hfdcan)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Return FDCAN error code */
  return hfdcan->ErrorCode;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002a58:	4b2c      	ldr	r3, [pc, #176]	@ (8002b0c <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8002a5a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a2b      	ldr	r2, [pc, #172]	@ (8002b10 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d103      	bne.n	8002a6e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002a6c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a7c:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a84:	041a      	lsls	r2, r3, #16
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002aa2:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aaa:	061a      	lsls	r2, r3, #24
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	e005      	b.n	8002af0 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	3304      	adds	r3, #4
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d3f3      	bcc.n	8002ae4 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8002afc:	bf00      	nop
 8002afe:	bf00      	nop
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	4000ac00 	.word	0x4000ac00
 8002b10:	4000a800 	.word	0x4000a800

08002b14 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b089      	sub	sp, #36	@ 0x24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
 8002b20:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10a      	bne.n	8002b40 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002b32:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61fb      	str	r3, [r7, #28]
 8002b3e:	e00a      	b.n	8002b56 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002b48:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002b4e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002b50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002b54:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002b60:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002b66:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002b6c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	4413      	add	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	440b      	add	r3, r1
 8002b88:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	69fa      	ldr	r2, [r7, #28]
 8002b8e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	3304      	adds	r3, #4
 8002b94:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	3304      	adds	r3, #4
 8002ba0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]
 8002ba6:	e020      	b.n	8002bea <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	3303      	adds	r3, #3
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	4413      	add	r3, r2
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	3302      	adds	r3, #2
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	440b      	add	r3, r1
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002bc0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	440b      	add	r3, r1
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002bce:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	440a      	add	r2, r1
 8002bd6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002bd8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	3304      	adds	r3, #4
 8002be2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	3304      	adds	r3, #4
 8002be8:	617b      	str	r3, [r7, #20]
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	4a06      	ldr	r2, [pc, #24]	@ (8002c08 <FDCAN_CopyMessageToRAM+0xf4>)
 8002bf0:	5cd3      	ldrb	r3, [r2, r3]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d3d6      	bcc.n	8002ba8 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8002bfa:	bf00      	nop
 8002bfc:	bf00      	nop
 8002bfe:	3724      	adds	r7, #36	@ 0x24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	0800ae80 	.word	0x0800ae80

08002c0c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b087      	sub	sp, #28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002c16:	2300      	movs	r3, #0
 8002c18:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002c1a:	e136      	b.n	8002e8a <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	2101      	movs	r1, #1
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	fa01 f303 	lsl.w	r3, r1, r3
 8002c28:	4013      	ands	r3, r2
 8002c2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f000 8128 	beq.w	8002e84 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d003      	beq.n	8002c44 <HAL_GPIO_Init+0x38>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b12      	cmp	r3, #18
 8002c42:	d125      	bne.n	8002c90 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	08da      	lsrs	r2, r3, #3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3208      	adds	r2, #8
 8002c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c50:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	220f      	movs	r2, #15
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	4013      	ands	r3, r2
 8002c66:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	f003 020f 	and.w	r2, r3, #15
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	08da      	lsrs	r2, r3, #3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	3208      	adds	r2, #8
 8002c8a:	6979      	ldr	r1, [r7, #20]
 8002c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 0203 	and.w	r2, r3, #3
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d00b      	beq.n	8002ce4 <HAL_GPIO_Init+0xd8>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d007      	beq.n	8002ce4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cd8:	2b11      	cmp	r3, #17
 8002cda:	d003      	beq.n	8002ce4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b12      	cmp	r3, #18
 8002ce2:	d130      	bne.n	8002d46 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	2203      	movs	r2, #3
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	68da      	ldr	r2, [r3, #12]
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	43db      	mvns	r3, r3
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	4013      	ands	r3, r2
 8002d28:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	091b      	lsrs	r3, r3, #4
 8002d30:	f003 0201 	and.w	r2, r3, #1
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b03      	cmp	r3, #3
 8002d4c:	d017      	beq.n	8002d7e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	2203      	movs	r2, #3
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	4013      	ands	r3, r2
 8002d64:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d07c      	beq.n	8002e84 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002d8a:	4a47      	ldr	r2, [pc, #284]	@ (8002ea8 <HAL_GPIO_Init+0x29c>)
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	089b      	lsrs	r3, r3, #2
 8002d90:	3318      	adds	r3, #24
 8002d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d96:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	220f      	movs	r2, #15
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	43db      	mvns	r3, r3
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	4013      	ands	r3, r2
 8002dac:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	0a9a      	lsrs	r2, r3, #10
 8002db2:	4b3e      	ldr	r3, [pc, #248]	@ (8002eac <HAL_GPIO_Init+0x2a0>)
 8002db4:	4013      	ands	r3, r2
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	f002 0203 	and.w	r2, r2, #3
 8002dbc:	00d2      	lsls	r2, r2, #3
 8002dbe:	4093      	lsls	r3, r2
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002dc6:	4938      	ldr	r1, [pc, #224]	@ (8002ea8 <HAL_GPIO_Init+0x29c>)
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	089b      	lsrs	r3, r3, #2
 8002dcc:	3318      	adds	r3, #24
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002dd4:	4b34      	ldr	r3, [pc, #208]	@ (8002ea8 <HAL_GPIO_Init+0x29c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	4013      	ands	r3, r2
 8002de2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002df8:	4a2b      	ldr	r2, [pc, #172]	@ (8002ea8 <HAL_GPIO_Init+0x29c>)
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002dfe:	4b2a      	ldr	r3, [pc, #168]	@ (8002ea8 <HAL_GPIO_Init+0x29c>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	43db      	mvns	r3, r3
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002e22:	4a21      	ldr	r2, [pc, #132]	@ (8002ea8 <HAL_GPIO_Init+0x29c>)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002e28:	4b1f      	ldr	r3, [pc, #124]	@ (8002ea8 <HAL_GPIO_Init+0x29c>)
 8002e2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e2e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	43db      	mvns	r3, r3
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	4013      	ands	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002e4e:	4a16      	ldr	r2, [pc, #88]	@ (8002ea8 <HAL_GPIO_Init+0x29c>)
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002e56:	4b14      	ldr	r3, [pc, #80]	@ (8002ea8 <HAL_GPIO_Init+0x29c>)
 8002e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e5c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4013      	ands	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002e7c:	4a0a      	ldr	r2, [pc, #40]	@ (8002ea8 <HAL_GPIO_Init+0x29c>)
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	3301      	adds	r3, #1
 8002e88:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	fa22 f303 	lsr.w	r3, r2, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f47f aec1 	bne.w	8002c1c <HAL_GPIO_Init+0x10>
  }
}
 8002e9a:	bf00      	nop
 8002e9c:	bf00      	nop
 8002e9e:	371c      	adds	r7, #28
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	44022000 	.word	0x44022000
 8002eac:	002f7f7f 	.word	0x002f7f7f

08002eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	807b      	strh	r3, [r7, #2]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ec0:	787b      	ldrb	r3, [r7, #1]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ec6:	887a      	ldrh	r2, [r7, #2]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ecc:	e002      	b.n	8002ed4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ece:	887a      	ldrh	r2, [r7, #2]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ef2:	887a      	ldrh	r2, [r7, #2]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	041a      	lsls	r2, r3, #16
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	43d9      	mvns	r1, r3
 8002efe:	887b      	ldrh	r3, [r7, #2]
 8002f00:	400b      	ands	r3, r1
 8002f02:	431a      	orrs	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	619a      	str	r2, [r3, #24]
}
 8002f08:	bf00      	nop
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e08d      	b.n	8003042 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d106      	bne.n	8002f40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7fe f90e 	bl	800115c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2224      	movs	r2, #36	@ 0x24
 8002f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0201 	bic.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d107      	bne.n	8002f8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f8a:	609a      	str	r2, [r3, #8]
 8002f8c:	e006      	b.n	8002f9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002f9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d108      	bne.n	8002fb6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fb2:	605a      	str	r2, [r3, #4]
 8002fb4:	e007      	b.n	8002fc6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002fd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fd8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fe8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691a      	ldr	r2, [r3, #16]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	69d9      	ldr	r1, [r3, #28]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a1a      	ldr	r2, [r3, #32]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0201 	orr.w	r2, r2, #1
 8003022:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2220      	movs	r2, #32
 800302e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b20      	cmp	r3, #32
 800305e:	d138      	bne.n	80030d2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003066:	2b01      	cmp	r3, #1
 8003068:	d101      	bne.n	800306e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800306a:	2302      	movs	r3, #2
 800306c:	e032      	b.n	80030d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2224      	movs	r2, #36	@ 0x24
 800307a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0201 	bic.w	r2, r2, #1
 800308c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800309c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6819      	ldr	r1, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f042 0201 	orr.w	r2, r2, #1
 80030bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2220      	movs	r2, #32
 80030c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80030ce:	2300      	movs	r3, #0
 80030d0:	e000      	b.n	80030d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030d2:	2302      	movs	r3, #2
  }
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b20      	cmp	r3, #32
 80030f4:	d139      	bne.n	800316a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d101      	bne.n	8003104 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003100:	2302      	movs	r3, #2
 8003102:	e033      	b.n	800316c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2224      	movs	r2, #36	@ 0x24
 8003110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0201 	bic.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003132:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	021b      	lsls	r3, r3, #8
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	4313      	orrs	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f042 0201 	orr.w	r2, r2, #1
 8003154:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2220      	movs	r2, #32
 800315a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003166:	2300      	movs	r3, #0
 8003168:	e000      	b.n	800316c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800316a:	2302      	movs	r3, #2
  }
}
 800316c:	4618      	mov	r0, r3
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003180:	2300      	movs	r3, #0
 8003182:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003184:	4b0b      	ldr	r3, [pc, #44]	@ (80031b4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d002      	beq.n	8003196 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	73fb      	strb	r3, [r7, #15]
 8003194:	e007      	b.n	80031a6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003196:	4b07      	ldr	r3, [pc, #28]	@ (80031b4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f023 0204 	bic.w	r2, r3, #4
 800319e:	4905      	ldr	r1, [pc, #20]	@ (80031b4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	600b      	str	r3, [r1, #0]
  }

  return status;
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3714      	adds	r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	40030400 	.word	0x40030400

080031b8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80031bc:	4b05      	ldr	r3, [pc, #20]	@ (80031d4 <HAL_ICACHE_Enable+0x1c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a04      	ldr	r2, [pc, #16]	@ (80031d4 <HAL_ICACHE_Enable+0x1c>)
 80031c2:	f043 0301 	orr.w	r3, r3, #1
 80031c6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	40030400 	.word	0x40030400

080031d8 <HAL_ICACHE_IRQHandler>:
  * @note This function respectively disables the interrupt and clears the
  *       flag of any pending flag before calling the associated user callback.
  * @retval None
  */
void HAL_ICACHE_IRQHandler(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
  /* Get current interrupt flags and interrupt sources value */
  uint32_t itflags   = READ_REG(ICACHE->SR);
 80031de:	4b17      	ldr	r3, [pc, #92]	@ (800323c <HAL_ICACHE_IRQHandler+0x64>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	607b      	str	r3, [r7, #4]
  uint32_t itsources = READ_REG(ICACHE->IER);
 80031e4:	4b15      	ldr	r3, [pc, #84]	@ (800323c <HAL_ICACHE_IRQHandler+0x64>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	603b      	str	r3, [r7, #0]

  /* Check Instruction cache Error interrupt flag */
  if (((itflags & itsources) & ICACHE_FLAG_ERROR) != 0U)
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	4013      	ands	r3, r2
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00a      	beq.n	800320e <HAL_ICACHE_IRQHandler+0x36>
  {
    /* Disable error interrupt */
    CLEAR_BIT(ICACHE->IER, ICACHE_IER_ERRIE);
 80031f8:	4b10      	ldr	r3, [pc, #64]	@ (800323c <HAL_ICACHE_IRQHandler+0x64>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	4a0f      	ldr	r2, [pc, #60]	@ (800323c <HAL_ICACHE_IRQHandler+0x64>)
 80031fe:	f023 0304 	bic.w	r3, r3, #4
 8003202:	6093      	str	r3, [r2, #8]

    /* Clear ERR pending flag */
    WRITE_REG(ICACHE->FCR, ICACHE_FCR_CERRF);
 8003204:	4b0d      	ldr	r3, [pc, #52]	@ (800323c <HAL_ICACHE_IRQHandler+0x64>)
 8003206:	2204      	movs	r2, #4
 8003208:	60da      	str	r2, [r3, #12]

    /* Instruction cache error interrupt user callback */
    HAL_ICACHE_ErrorCallback();
 800320a:	f000 f820 	bl	800324e <HAL_ICACHE_ErrorCallback>
  }

  /* Check Instruction cache BusyEnd interrupt flag */
  if (((itflags & itsources) & ICACHE_FLAG_BUSYEND) != 0U)
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	4013      	ands	r3, r2
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00a      	beq.n	8003232 <HAL_ICACHE_IRQHandler+0x5a>
  {
    /* Disable end of cache invalidation interrupt */
    CLEAR_BIT(ICACHE->IER, ICACHE_IER_BSYENDIE);
 800321c:	4b07      	ldr	r3, [pc, #28]	@ (800323c <HAL_ICACHE_IRQHandler+0x64>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	4a06      	ldr	r2, [pc, #24]	@ (800323c <HAL_ICACHE_IRQHandler+0x64>)
 8003222:	f023 0302 	bic.w	r3, r3, #2
 8003226:	6093      	str	r3, [r2, #8]

    /* Clear BSYENDF pending flag */
    WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 8003228:	4b04      	ldr	r3, [pc, #16]	@ (800323c <HAL_ICACHE_IRQHandler+0x64>)
 800322a:	2202      	movs	r2, #2
 800322c:	60da      	str	r2, [r3, #12]

    /* Instruction cache busyend interrupt user callback */
    HAL_ICACHE_InvalidateCompleteCallback();
 800322e:	f000 f807 	bl	8003240 <HAL_ICACHE_InvalidateCompleteCallback>
  }
}
 8003232:	bf00      	nop
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40030400 	.word	0x40030400

08003240 <HAL_ICACHE_InvalidateCompleteCallback>:

/**
  * @brief  Cache invalidation complete callback.
  */
__weak void HAL_ICACHE_InvalidateCompleteCallback(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_ICACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 8003244:	bf00      	nop
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <HAL_ICACHE_ErrorCallback>:

/**
  * @brief  Error callback.
  */
__weak void HAL_ICACHE_ErrorCallback(void)
{
 800324e:	b480      	push	{r7}
 8003250:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_ICACHE_ErrorCallback() should be implemented in the user file
   */
}
 8003252:	bf00      	nop
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b088      	sub	sp, #32
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d102      	bne.n	8003270 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	f000 bc28 	b.w	8003ac0 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003270:	4b94      	ldr	r3, [pc, #592]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	f003 0318 	and.w	r3, r3, #24
 8003278:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800327a:	4b92      	ldr	r3, [pc, #584]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 800327c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0310 	and.w	r3, r3, #16
 800328c:	2b00      	cmp	r3, #0
 800328e:	d05b      	beq.n	8003348 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	2b08      	cmp	r3, #8
 8003294:	d005      	beq.n	80032a2 <HAL_RCC_OscConfig+0x46>
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	2b18      	cmp	r3, #24
 800329a:	d114      	bne.n	80032c6 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d111      	bne.n	80032c6 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d102      	bne.n	80032b0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	f000 bc08 	b.w	8003ac0 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80032b0:	4b84      	ldr	r3, [pc, #528]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	041b      	lsls	r3, r3, #16
 80032be:	4981      	ldr	r1, [pc, #516]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80032c4:	e040      	b.n	8003348 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d023      	beq.n	8003316 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80032ce:	4b7d      	ldr	r3, [pc, #500]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a7c      	ldr	r2, [pc, #496]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 80032d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032da:	f7fe fb7b 	bl	80019d4 <HAL_GetTick>
 80032de:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80032e2:	f7fe fb77 	bl	80019d4 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e3e5      	b.n	8003ac0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80032f4:	4b73      	ldr	r3, [pc, #460]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0f0      	beq.n	80032e2 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003300:	4b70      	ldr	r3, [pc, #448]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	041b      	lsls	r3, r3, #16
 800330e:	496d      	ldr	r1, [pc, #436]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 8003310:	4313      	orrs	r3, r2
 8003312:	618b      	str	r3, [r1, #24]
 8003314:	e018      	b.n	8003348 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003316:	4b6b      	ldr	r3, [pc, #428]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a6a      	ldr	r2, [pc, #424]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 800331c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003322:	f7fe fb57 	bl	80019d4 <HAL_GetTick>
 8003326:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003328:	e008      	b.n	800333c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800332a:	f7fe fb53 	bl	80019d4 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e3c1      	b.n	8003ac0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800333c:	4b61      	ldr	r3, [pc, #388]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1f0      	bne.n	800332a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 80a0 	beq.w	8003496 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	2b10      	cmp	r3, #16
 800335a:	d005      	beq.n	8003368 <HAL_RCC_OscConfig+0x10c>
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	2b18      	cmp	r3, #24
 8003360:	d109      	bne.n	8003376 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	2b03      	cmp	r3, #3
 8003366:	d106      	bne.n	8003376 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	f040 8092 	bne.w	8003496 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e3a4      	b.n	8003ac0 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800337e:	d106      	bne.n	800338e <HAL_RCC_OscConfig+0x132>
 8003380:	4b50      	ldr	r3, [pc, #320]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a4f      	ldr	r2, [pc, #316]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 8003386:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800338a:	6013      	str	r3, [r2, #0]
 800338c:	e058      	b.n	8003440 <HAL_RCC_OscConfig+0x1e4>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d112      	bne.n	80033bc <HAL_RCC_OscConfig+0x160>
 8003396:	4b4b      	ldr	r3, [pc, #300]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a4a      	ldr	r2, [pc, #296]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 800339c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	4b48      	ldr	r3, [pc, #288]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a47      	ldr	r2, [pc, #284]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 80033a8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	4b45      	ldr	r3, [pc, #276]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a44      	ldr	r2, [pc, #272]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 80033b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	e041      	b.n	8003440 <HAL_RCC_OscConfig+0x1e4>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033c4:	d112      	bne.n	80033ec <HAL_RCC_OscConfig+0x190>
 80033c6:	4b3f      	ldr	r3, [pc, #252]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a3e      	ldr	r2, [pc, #248]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 80033cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	4b3c      	ldr	r3, [pc, #240]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a3b      	ldr	r2, [pc, #236]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 80033d8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	4b39      	ldr	r3, [pc, #228]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a38      	ldr	r2, [pc, #224]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 80033e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	e029      	b.n	8003440 <HAL_RCC_OscConfig+0x1e4>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80033f4:	d112      	bne.n	800341c <HAL_RCC_OscConfig+0x1c0>
 80033f6:	4b33      	ldr	r3, [pc, #204]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a32      	ldr	r2, [pc, #200]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 80033fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	4b30      	ldr	r3, [pc, #192]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a2f      	ldr	r2, [pc, #188]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 8003408:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	4b2d      	ldr	r3, [pc, #180]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a2c      	ldr	r2, [pc, #176]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 8003414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	e011      	b.n	8003440 <HAL_RCC_OscConfig+0x1e4>
 800341c:	4b29      	ldr	r3, [pc, #164]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a28      	ldr	r2, [pc, #160]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 8003422:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003426:	6013      	str	r3, [r2, #0]
 8003428:	4b26      	ldr	r3, [pc, #152]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a25      	ldr	r2, [pc, #148]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 800342e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003432:	6013      	str	r3, [r2, #0]
 8003434:	4b23      	ldr	r3, [pc, #140]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a22      	ldr	r2, [pc, #136]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 800343a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800343e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d013      	beq.n	8003470 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003448:	f7fe fac4 	bl	80019d4 <HAL_GetTick>
 800344c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003450:	f7fe fac0 	bl	80019d4 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b64      	cmp	r3, #100	@ 0x64
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e32e      	b.n	8003ac0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003462:	4b18      	ldr	r3, [pc, #96]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0f0      	beq.n	8003450 <HAL_RCC_OscConfig+0x1f4>
 800346e:	e012      	b.n	8003496 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003470:	f7fe fab0 	bl	80019d4 <HAL_GetTick>
 8003474:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003478:	f7fe faac 	bl	80019d4 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b64      	cmp	r3, #100	@ 0x64
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e31a      	b.n	8003ac0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800348a:	4b0e      	ldr	r3, [pc, #56]	@ (80034c4 <HAL_RCC_OscConfig+0x268>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f0      	bne.n	8003478 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 809a 	beq.w	80035d8 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d005      	beq.n	80034b6 <HAL_RCC_OscConfig+0x25a>
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	2b18      	cmp	r3, #24
 80034ae:	d149      	bne.n	8003544 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d146      	bne.n	8003544 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d104      	bne.n	80034c8 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e2fe      	b.n	8003ac0 <HAL_RCC_OscConfig+0x864>
 80034c2:	bf00      	nop
 80034c4:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d11c      	bne.n	8003508 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80034ce:	4b9a      	ldr	r3, [pc, #616]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0218 	and.w	r2, r3, #24
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d014      	beq.n	8003508 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80034de:	4b96      	ldr	r3, [pc, #600]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 0218 	bic.w	r2, r3, #24
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	4993      	ldr	r1, [pc, #588]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80034f0:	f000 fdd0 	bl	8004094 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034f4:	4b91      	ldr	r3, [pc, #580]	@ (800373c <HAL_RCC_OscConfig+0x4e0>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fe f9e1 	bl	80018c0 <HAL_InitTick>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e2db      	b.n	8003ac0 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003508:	f7fe fa64 	bl	80019d4 <HAL_GetTick>
 800350c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003510:	f7fe fa60 	bl	80019d4 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e2ce      	b.n	8003ac0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003522:	4b85      	ldr	r3, [pc, #532]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0f0      	beq.n	8003510 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800352e:	4b82      	ldr	r3, [pc, #520]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	041b      	lsls	r3, r3, #16
 800353c:	497e      	ldr	r1, [pc, #504]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 800353e:	4313      	orrs	r3, r2
 8003540:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003542:	e049      	b.n	80035d8 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d02c      	beq.n	80035a6 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800354c:	4b7a      	ldr	r3, [pc, #488]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f023 0218 	bic.w	r2, r3, #24
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	4977      	ldr	r1, [pc, #476]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 800355a:	4313      	orrs	r3, r2
 800355c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800355e:	4b76      	ldr	r3, [pc, #472]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a75      	ldr	r2, [pc, #468]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 8003564:	f043 0301 	orr.w	r3, r3, #1
 8003568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356a:	f7fe fa33 	bl	80019d4 <HAL_GetTick>
 800356e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003572:	f7fe fa2f 	bl	80019d4 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e29d      	b.n	8003ac0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003584:	4b6c      	ldr	r3, [pc, #432]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0f0      	beq.n	8003572 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003590:	4b69      	ldr	r3, [pc, #420]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	041b      	lsls	r3, r3, #16
 800359e:	4966      	ldr	r1, [pc, #408]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	610b      	str	r3, [r1, #16]
 80035a4:	e018      	b.n	80035d8 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035a6:	4b64      	ldr	r3, [pc, #400]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a63      	ldr	r2, [pc, #396]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 80035ac:	f023 0301 	bic.w	r3, r3, #1
 80035b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b2:	f7fe fa0f 	bl	80019d4 <HAL_GetTick>
 80035b6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035b8:	e008      	b.n	80035cc <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80035ba:	f7fe fa0b 	bl	80019d4 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e279      	b.n	8003ac0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035cc:	4b5a      	ldr	r3, [pc, #360]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1f0      	bne.n	80035ba <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0308 	and.w	r3, r3, #8
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d03c      	beq.n	800365e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d01c      	beq.n	8003626 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ec:	4b52      	ldr	r3, [pc, #328]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 80035ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035f2:	4a51      	ldr	r2, [pc, #324]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 80035f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80035f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fc:	f7fe f9ea 	bl	80019d4 <HAL_GetTick>
 8003600:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003604:	f7fe f9e6 	bl	80019d4 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e254      	b.n	8003ac0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003616:	4b48      	ldr	r3, [pc, #288]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 8003618:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800361c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0ef      	beq.n	8003604 <HAL_RCC_OscConfig+0x3a8>
 8003624:	e01b      	b.n	800365e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003626:	4b44      	ldr	r3, [pc, #272]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 8003628:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800362c:	4a42      	ldr	r2, [pc, #264]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 800362e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003632:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003636:	f7fe f9cd 	bl	80019d4 <HAL_GetTick>
 800363a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800363c:	e008      	b.n	8003650 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800363e:	f7fe f9c9 	bl	80019d4 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e237      	b.n	8003ac0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003650:	4b39      	ldr	r3, [pc, #228]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 8003652:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003656:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1ef      	bne.n	800363e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0304 	and.w	r3, r3, #4
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 80d2 	beq.w	8003810 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800366c:	4b34      	ldr	r3, [pc, #208]	@ (8003740 <HAL_RCC_OscConfig+0x4e4>)
 800366e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b00      	cmp	r3, #0
 8003676:	d118      	bne.n	80036aa <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003678:	4b31      	ldr	r3, [pc, #196]	@ (8003740 <HAL_RCC_OscConfig+0x4e4>)
 800367a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367c:	4a30      	ldr	r2, [pc, #192]	@ (8003740 <HAL_RCC_OscConfig+0x4e4>)
 800367e:	f043 0301 	orr.w	r3, r3, #1
 8003682:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003684:	f7fe f9a6 	bl	80019d4 <HAL_GetTick>
 8003688:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800368c:	f7fe f9a2 	bl	80019d4 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e210      	b.n	8003ac0 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800369e:	4b28      	ldr	r3, [pc, #160]	@ (8003740 <HAL_RCC_OscConfig+0x4e4>)
 80036a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0f0      	beq.n	800368c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d108      	bne.n	80036c4 <HAL_RCC_OscConfig+0x468>
 80036b2:	4b21      	ldr	r3, [pc, #132]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 80036b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036b8:	4a1f      	ldr	r2, [pc, #124]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 80036ba:	f043 0301 	orr.w	r3, r3, #1
 80036be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80036c2:	e074      	b.n	80037ae <HAL_RCC_OscConfig+0x552>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d118      	bne.n	80036fe <HAL_RCC_OscConfig+0x4a2>
 80036cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 80036ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036d2:	4a19      	ldr	r2, [pc, #100]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 80036d4:	f023 0301 	bic.w	r3, r3, #1
 80036d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80036dc:	4b16      	ldr	r3, [pc, #88]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 80036de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036e2:	4a15      	ldr	r2, [pc, #84]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 80036e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80036ec:	4b12      	ldr	r3, [pc, #72]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 80036ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036f2:	4a11      	ldr	r2, [pc, #68]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 80036f4:	f023 0304 	bic.w	r3, r3, #4
 80036f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80036fc:	e057      	b.n	80037ae <HAL_RCC_OscConfig+0x552>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	2b05      	cmp	r3, #5
 8003704:	d11e      	bne.n	8003744 <HAL_RCC_OscConfig+0x4e8>
 8003706:	4b0c      	ldr	r3, [pc, #48]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 8003708:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800370c:	4a0a      	ldr	r2, [pc, #40]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 800370e:	f043 0304 	orr.w	r3, r3, #4
 8003712:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003716:	4b08      	ldr	r3, [pc, #32]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 8003718:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800371c:	4a06      	ldr	r2, [pc, #24]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 800371e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003722:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003726:	4b04      	ldr	r3, [pc, #16]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 8003728:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800372c:	4a02      	ldr	r2, [pc, #8]	@ (8003738 <HAL_RCC_OscConfig+0x4dc>)
 800372e:	f043 0301 	orr.w	r3, r3, #1
 8003732:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003736:	e03a      	b.n	80037ae <HAL_RCC_OscConfig+0x552>
 8003738:	44020c00 	.word	0x44020c00
 800373c:	2000000c 	.word	0x2000000c
 8003740:	44020800 	.word	0x44020800
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	2b85      	cmp	r3, #133	@ 0x85
 800374a:	d118      	bne.n	800377e <HAL_RCC_OscConfig+0x522>
 800374c:	4ba2      	ldr	r3, [pc, #648]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 800374e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003752:	4aa1      	ldr	r2, [pc, #644]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 8003754:	f043 0304 	orr.w	r3, r3, #4
 8003758:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800375c:	4b9e      	ldr	r3, [pc, #632]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 800375e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003762:	4a9d      	ldr	r2, [pc, #628]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 8003764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003768:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800376c:	4b9a      	ldr	r3, [pc, #616]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 800376e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003772:	4a99      	ldr	r2, [pc, #612]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 8003774:	f043 0301 	orr.w	r3, r3, #1
 8003778:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800377c:	e017      	b.n	80037ae <HAL_RCC_OscConfig+0x552>
 800377e:	4b96      	ldr	r3, [pc, #600]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 8003780:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003784:	4a94      	ldr	r2, [pc, #592]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 8003786:	f023 0301 	bic.w	r3, r3, #1
 800378a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800378e:	4b92      	ldr	r3, [pc, #584]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 8003790:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003794:	4a90      	ldr	r2, [pc, #576]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 8003796:	f023 0304 	bic.w	r3, r3, #4
 800379a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800379e:	4b8e      	ldr	r3, [pc, #568]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 80037a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037a4:	4a8c      	ldr	r2, [pc, #560]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 80037a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d016      	beq.n	80037e4 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b6:	f7fe f90d 	bl	80019d4 <HAL_GetTick>
 80037ba:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037bc:	e00a      	b.n	80037d4 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037be:	f7fe f909 	bl	80019d4 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e175      	b.n	8003ac0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037d4:	4b80      	ldr	r3, [pc, #512]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 80037d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0ed      	beq.n	80037be <HAL_RCC_OscConfig+0x562>
 80037e2:	e015      	b.n	8003810 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e4:	f7fe f8f6 	bl	80019d4 <HAL_GetTick>
 80037e8:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037ea:	e00a      	b.n	8003802 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ec:	f7fe f8f2 	bl	80019d4 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e15e      	b.n	8003ac0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003802:	4b75      	ldr	r3, [pc, #468]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 8003804:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1ed      	bne.n	80037ec <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0320 	and.w	r3, r3, #32
 8003818:	2b00      	cmp	r3, #0
 800381a:	d036      	beq.n	800388a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003820:	2b00      	cmp	r3, #0
 8003822:	d019      	beq.n	8003858 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003824:	4b6c      	ldr	r3, [pc, #432]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a6b      	ldr	r2, [pc, #428]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 800382a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800382e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003830:	f7fe f8d0 	bl	80019d4 <HAL_GetTick>
 8003834:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003838:	f7fe f8cc 	bl	80019d4 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e13a      	b.n	8003ac0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800384a:	4b63      	ldr	r3, [pc, #396]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0f0      	beq.n	8003838 <HAL_RCC_OscConfig+0x5dc>
 8003856:	e018      	b.n	800388a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003858:	4b5f      	ldr	r3, [pc, #380]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a5e      	ldr	r2, [pc, #376]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 800385e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003862:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003864:	f7fe f8b6 	bl	80019d4 <HAL_GetTick>
 8003868:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800386c:	f7fe f8b2 	bl	80019d4 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e120      	b.n	8003ac0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800387e:	4b56      	ldr	r3, [pc, #344]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1f0      	bne.n	800386c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 8115 	beq.w	8003abe <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	2b18      	cmp	r3, #24
 8003898:	f000 80af 	beq.w	80039fa <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	f040 8086 	bne.w	80039b2 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80038a6:	4b4c      	ldr	r3, [pc, #304]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a4b      	ldr	r2, [pc, #300]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 80038ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b2:	f7fe f88f 	bl	80019d4 <HAL_GetTick>
 80038b6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80038ba:	f7fe f88b 	bl	80019d4 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e0f9      	b.n	8003ac0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80038cc:	4b42      	ldr	r3, [pc, #264]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1f0      	bne.n	80038ba <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80038d8:	4b3f      	ldr	r3, [pc, #252]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 80038da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80038e0:	f023 0303 	bic.w	r3, r3, #3
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80038ec:	0212      	lsls	r2, r2, #8
 80038ee:	430a      	orrs	r2, r1
 80038f0:	4939      	ldr	r1, [pc, #228]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	628b      	str	r3, [r1, #40]	@ 0x28
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038fa:	3b01      	subs	r3, #1
 80038fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003904:	3b01      	subs	r3, #1
 8003906:	025b      	lsls	r3, r3, #9
 8003908:	b29b      	uxth	r3, r3
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003910:	3b01      	subs	r3, #1
 8003912:	041b      	lsls	r3, r3, #16
 8003914:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003918:	431a      	orrs	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391e:	3b01      	subs	r3, #1
 8003920:	061b      	lsls	r3, r3, #24
 8003922:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003926:	492c      	ldr	r1, [pc, #176]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 8003928:	4313      	orrs	r3, r2
 800392a:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800392c:	4b2a      	ldr	r3, [pc, #168]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 800392e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003930:	4a29      	ldr	r2, [pc, #164]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 8003932:	f023 0310 	bic.w	r3, r3, #16
 8003936:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800393c:	4a26      	ldr	r2, [pc, #152]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003942:	4b25      	ldr	r3, [pc, #148]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 8003944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003946:	4a24      	ldr	r2, [pc, #144]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 8003948:	f043 0310 	orr.w	r3, r3, #16
 800394c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800394e:	4b22      	ldr	r3, [pc, #136]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 8003950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003952:	f023 020c 	bic.w	r2, r3, #12
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800395a:	491f      	ldr	r1, [pc, #124]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 800395c:	4313      	orrs	r3, r2
 800395e:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003960:	4b1d      	ldr	r3, [pc, #116]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 8003962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003964:	f023 0220 	bic.w	r2, r3, #32
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800396c:	491a      	ldr	r1, [pc, #104]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 800396e:	4313      	orrs	r3, r2
 8003970:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003972:	4b19      	ldr	r3, [pc, #100]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 8003974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003976:	4a18      	ldr	r2, [pc, #96]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 8003978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800397c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800397e:	4b16      	ldr	r3, [pc, #88]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a15      	ldr	r2, [pc, #84]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 8003984:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398a:	f7fe f823 	bl	80019d4 <HAL_GetTick>
 800398e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003992:	f7fe f81f 	bl	80019d4 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e08d      	b.n	8003ac0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80039a4:	4b0c      	ldr	r3, [pc, #48]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0f0      	beq.n	8003992 <HAL_RCC_OscConfig+0x736>
 80039b0:	e085      	b.n	8003abe <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80039b2:	4b09      	ldr	r3, [pc, #36]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a08      	ldr	r2, [pc, #32]	@ (80039d8 <HAL_RCC_OscConfig+0x77c>)
 80039b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039be:	f7fe f809 	bl	80019d4 <HAL_GetTick>
 80039c2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80039c4:	e00a      	b.n	80039dc <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80039c6:	f7fe f805 	bl	80019d4 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d903      	bls.n	80039dc <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e073      	b.n	8003ac0 <HAL_RCC_OscConfig+0x864>
 80039d8:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80039dc:	4b3a      	ldr	r3, [pc, #232]	@ (8003ac8 <HAL_RCC_OscConfig+0x86c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1ee      	bne.n	80039c6 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80039e8:	4b37      	ldr	r3, [pc, #220]	@ (8003ac8 <HAL_RCC_OscConfig+0x86c>)
 80039ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ec:	4a36      	ldr	r2, [pc, #216]	@ (8003ac8 <HAL_RCC_OscConfig+0x86c>)
 80039ee:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80039f2:	f023 0303 	bic.w	r3, r3, #3
 80039f6:	6293      	str	r3, [r2, #40]	@ 0x28
 80039f8:	e061      	b.n	8003abe <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80039fa:	4b33      	ldr	r3, [pc, #204]	@ (8003ac8 <HAL_RCC_OscConfig+0x86c>)
 80039fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fe:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003a00:	4b31      	ldr	r3, [pc, #196]	@ (8003ac8 <HAL_RCC_OscConfig+0x86c>)
 8003a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a04:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d031      	beq.n	8003a72 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f003 0203 	and.w	r2, r3, #3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d12a      	bne.n	8003a72 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	0a1b      	lsrs	r3, r3, #8
 8003a20:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d122      	bne.n	8003a72 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a36:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d11a      	bne.n	8003a72 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	0a5b      	lsrs	r3, r3, #9
 8003a40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a48:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d111      	bne.n	8003a72 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	0c1b      	lsrs	r3, r3, #16
 8003a52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a5a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d108      	bne.n	8003a72 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	0e1b      	lsrs	r3, r3, #24
 8003a64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d001      	beq.n	8003a76 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e024      	b.n	8003ac0 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003a76:	4b14      	ldr	r3, [pc, #80]	@ (8003ac8 <HAL_RCC_OscConfig+0x86c>)
 8003a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a7a:	08db      	lsrs	r3, r3, #3
 8003a7c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d01a      	beq.n	8003abe <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003a88:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac8 <HAL_RCC_OscConfig+0x86c>)
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a8c:	4a0e      	ldr	r2, [pc, #56]	@ (8003ac8 <HAL_RCC_OscConfig+0x86c>)
 8003a8e:	f023 0310 	bic.w	r3, r3, #16
 8003a92:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a94:	f7fd ff9e 	bl	80019d4 <HAL_GetTick>
 8003a98:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8003a9a:	bf00      	nop
 8003a9c:	f7fd ff9a 	bl	80019d4 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d0f9      	beq.n	8003a9c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aac:	4a06      	ldr	r2, [pc, #24]	@ (8003ac8 <HAL_RCC_OscConfig+0x86c>)
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003ab2:	4b05      	ldr	r3, [pc, #20]	@ (8003ac8 <HAL_RCC_OscConfig+0x86c>)
 8003ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab6:	4a04      	ldr	r2, [pc, #16]	@ (8003ac8 <HAL_RCC_OscConfig+0x86c>)
 8003ab8:	f043 0310 	orr.w	r3, r3, #16
 8003abc:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3720      	adds	r7, #32
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	44020c00 	.word	0x44020c00

08003acc <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e19e      	b.n	8003e1e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ae0:	4b83      	ldr	r3, [pc, #524]	@ (8003cf0 <HAL_RCC_ClockConfig+0x224>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 030f 	and.w	r3, r3, #15
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d910      	bls.n	8003b10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aee:	4b80      	ldr	r3, [pc, #512]	@ (8003cf0 <HAL_RCC_ClockConfig+0x224>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f023 020f 	bic.w	r2, r3, #15
 8003af6:	497e      	ldr	r1, [pc, #504]	@ (8003cf0 <HAL_RCC_ClockConfig+0x224>)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afe:	4b7c      	ldr	r3, [pc, #496]	@ (8003cf0 <HAL_RCC_ClockConfig+0x224>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d001      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e186      	b.n	8003e1e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0310 	and.w	r3, r3, #16
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d012      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	695a      	ldr	r2, [r3, #20]
 8003b20:	4b74      	ldr	r3, [pc, #464]	@ (8003cf4 <HAL_RCC_ClockConfig+0x228>)
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	0a1b      	lsrs	r3, r3, #8
 8003b26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d909      	bls.n	8003b42 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003b2e:	4b71      	ldr	r3, [pc, #452]	@ (8003cf4 <HAL_RCC_ClockConfig+0x228>)
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	021b      	lsls	r3, r3, #8
 8003b3c:	496d      	ldr	r1, [pc, #436]	@ (8003cf4 <HAL_RCC_ClockConfig+0x228>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d012      	beq.n	8003b74 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691a      	ldr	r2, [r3, #16]
 8003b52:	4b68      	ldr	r3, [pc, #416]	@ (8003cf4 <HAL_RCC_ClockConfig+0x228>)
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	091b      	lsrs	r3, r3, #4
 8003b58:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d909      	bls.n	8003b74 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003b60:	4b64      	ldr	r3, [pc, #400]	@ (8003cf4 <HAL_RCC_ClockConfig+0x228>)
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	4961      	ldr	r1, [pc, #388]	@ (8003cf4 <HAL_RCC_ClockConfig+0x228>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d010      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68da      	ldr	r2, [r3, #12]
 8003b84:	4b5b      	ldr	r3, [pc, #364]	@ (8003cf4 <HAL_RCC_ClockConfig+0x228>)
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d908      	bls.n	8003ba2 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003b90:	4b58      	ldr	r3, [pc, #352]	@ (8003cf4 <HAL_RCC_ClockConfig+0x228>)
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	4955      	ldr	r1, [pc, #340]	@ (8003cf4 <HAL_RCC_ClockConfig+0x228>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d010      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689a      	ldr	r2, [r3, #8]
 8003bb2:	4b50      	ldr	r3, [pc, #320]	@ (8003cf4 <HAL_RCC_ClockConfig+0x228>)
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d908      	bls.n	8003bd0 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003bbe:	4b4d      	ldr	r3, [pc, #308]	@ (8003cf4 <HAL_RCC_ClockConfig+0x228>)
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	f023 020f 	bic.w	r2, r3, #15
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	494a      	ldr	r1, [pc, #296]	@ (8003cf4 <HAL_RCC_ClockConfig+0x228>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 8093 	beq.w	8003d04 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2b03      	cmp	r3, #3
 8003be4:	d107      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003be6:	4b43      	ldr	r3, [pc, #268]	@ (8003cf4 <HAL_RCC_ClockConfig+0x228>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d121      	bne.n	8003c36 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e113      	b.n	8003e1e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d107      	bne.n	8003c0e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bfe:	4b3d      	ldr	r3, [pc, #244]	@ (8003cf4 <HAL_RCC_ClockConfig+0x228>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d115      	bne.n	8003c36 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e107      	b.n	8003e1e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d107      	bne.n	8003c26 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003c16:	4b37      	ldr	r3, [pc, #220]	@ (8003cf4 <HAL_RCC_ClockConfig+0x228>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d109      	bne.n	8003c36 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e0fb      	b.n	8003e1e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c26:	4b33      	ldr	r3, [pc, #204]	@ (8003cf4 <HAL_RCC_ClockConfig+0x228>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e0f3      	b.n	8003e1e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8003c36:	4b2f      	ldr	r3, [pc, #188]	@ (8003cf4 <HAL_RCC_ClockConfig+0x228>)
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	f023 0203 	bic.w	r2, r3, #3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	492c      	ldr	r1, [pc, #176]	@ (8003cf4 <HAL_RCC_ClockConfig+0x228>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c48:	f7fd fec4 	bl	80019d4 <HAL_GetTick>
 8003c4c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2b03      	cmp	r3, #3
 8003c54:	d112      	bne.n	8003c7c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c56:	e00a      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003c58:	f7fd febc 	bl	80019d4 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e0d7      	b.n	8003e1e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c6e:	4b21      	ldr	r3, [pc, #132]	@ (8003cf4 <HAL_RCC_ClockConfig+0x228>)
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	f003 0318 	and.w	r3, r3, #24
 8003c76:	2b18      	cmp	r3, #24
 8003c78:	d1ee      	bne.n	8003c58 <HAL_RCC_ClockConfig+0x18c>
 8003c7a:	e043      	b.n	8003d04 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d112      	bne.n	8003caa <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c84:	e00a      	b.n	8003c9c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003c86:	f7fd fea5 	bl	80019d4 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e0c0      	b.n	8003e1e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c9c:	4b15      	ldr	r3, [pc, #84]	@ (8003cf4 <HAL_RCC_ClockConfig+0x228>)
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	f003 0318 	and.w	r3, r3, #24
 8003ca4:	2b10      	cmp	r3, #16
 8003ca6:	d1ee      	bne.n	8003c86 <HAL_RCC_ClockConfig+0x1ba>
 8003ca8:	e02c      	b.n	8003d04 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d122      	bne.n	8003cf8 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003cb2:	e00a      	b.n	8003cca <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb4:	f7fd fe8e 	bl	80019d4 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e0a9      	b.n	8003e1e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003cca:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf4 <HAL_RCC_ClockConfig+0x228>)
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	f003 0318 	and.w	r3, r3, #24
 8003cd2:	2b08      	cmp	r3, #8
 8003cd4:	d1ee      	bne.n	8003cb4 <HAL_RCC_ClockConfig+0x1e8>
 8003cd6:	e015      	b.n	8003d04 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003cd8:	f7fd fe7c 	bl	80019d4 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d906      	bls.n	8003cf8 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e097      	b.n	8003e1e <HAL_RCC_ClockConfig+0x352>
 8003cee:	bf00      	nop
 8003cf0:	40022000 	.word	0x40022000
 8003cf4:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cf8:	4b4b      	ldr	r3, [pc, #300]	@ (8003e28 <HAL_RCC_ClockConfig+0x35c>)
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	f003 0318 	and.w	r3, r3, #24
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1e9      	bne.n	8003cd8 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d010      	beq.n	8003d32 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	4b44      	ldr	r3, [pc, #272]	@ (8003e28 <HAL_RCC_ClockConfig+0x35c>)
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	f003 030f 	and.w	r3, r3, #15
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d208      	bcs.n	8003d32 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003d20:	4b41      	ldr	r3, [pc, #260]	@ (8003e28 <HAL_RCC_ClockConfig+0x35c>)
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	f023 020f 	bic.w	r2, r3, #15
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	493e      	ldr	r1, [pc, #248]	@ (8003e28 <HAL_RCC_ClockConfig+0x35c>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d32:	4b3e      	ldr	r3, [pc, #248]	@ (8003e2c <HAL_RCC_ClockConfig+0x360>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 030f 	and.w	r3, r3, #15
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d210      	bcs.n	8003d62 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d40:	4b3a      	ldr	r3, [pc, #232]	@ (8003e2c <HAL_RCC_ClockConfig+0x360>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f023 020f 	bic.w	r2, r3, #15
 8003d48:	4938      	ldr	r1, [pc, #224]	@ (8003e2c <HAL_RCC_ClockConfig+0x360>)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d50:	4b36      	ldr	r3, [pc, #216]	@ (8003e2c <HAL_RCC_ClockConfig+0x360>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 030f 	and.w	r3, r3, #15
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d001      	beq.n	8003d62 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e05d      	b.n	8003e1e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0304 	and.w	r3, r3, #4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d010      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68da      	ldr	r2, [r3, #12]
 8003d72:	4b2d      	ldr	r3, [pc, #180]	@ (8003e28 <HAL_RCC_ClockConfig+0x35c>)
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d208      	bcs.n	8003d90 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003d7e:	4b2a      	ldr	r3, [pc, #168]	@ (8003e28 <HAL_RCC_ClockConfig+0x35c>)
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	4927      	ldr	r1, [pc, #156]	@ (8003e28 <HAL_RCC_ClockConfig+0x35c>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0308 	and.w	r3, r3, #8
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d012      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691a      	ldr	r2, [r3, #16]
 8003da0:	4b21      	ldr	r3, [pc, #132]	@ (8003e28 <HAL_RCC_ClockConfig+0x35c>)
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	091b      	lsrs	r3, r3, #4
 8003da6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d209      	bcs.n	8003dc2 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003dae:	4b1e      	ldr	r3, [pc, #120]	@ (8003e28 <HAL_RCC_ClockConfig+0x35c>)
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	011b      	lsls	r3, r3, #4
 8003dbc:	491a      	ldr	r1, [pc, #104]	@ (8003e28 <HAL_RCC_ClockConfig+0x35c>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0310 	and.w	r3, r3, #16
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d012      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	695a      	ldr	r2, [r3, #20]
 8003dd2:	4b15      	ldr	r3, [pc, #84]	@ (8003e28 <HAL_RCC_ClockConfig+0x35c>)
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	0a1b      	lsrs	r3, r3, #8
 8003dd8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d209      	bcs.n	8003df4 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003de0:	4b11      	ldr	r3, [pc, #68]	@ (8003e28 <HAL_RCC_ClockConfig+0x35c>)
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	021b      	lsls	r3, r3, #8
 8003dee:	490e      	ldr	r1, [pc, #56]	@ (8003e28 <HAL_RCC_ClockConfig+0x35c>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003df4:	f000 f822 	bl	8003e3c <HAL_RCC_GetSysClockFreq>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8003e28 <HAL_RCC_ClockConfig+0x35c>)
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	490b      	ldr	r1, [pc, #44]	@ (8003e30 <HAL_RCC_ClockConfig+0x364>)
 8003e04:	5ccb      	ldrb	r3, [r1, r3]
 8003e06:	fa22 f303 	lsr.w	r3, r2, r3
 8003e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8003e34 <HAL_RCC_ClockConfig+0x368>)
 8003e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e38 <HAL_RCC_ClockConfig+0x36c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fd fd54 	bl	80018c0 <HAL_InitTick>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003e1c:	7afb      	ldrb	r3, [r7, #11]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	44020c00 	.word	0x44020c00
 8003e2c:	40022000 	.word	0x40022000
 8003e30:	0800ae68 	.word	0x0800ae68
 8003e34:	20000008 	.word	0x20000008
 8003e38:	2000000c 	.word	0x2000000c

08003e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b089      	sub	sp, #36	@ 0x24
 8003e40:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003e42:	4b8c      	ldr	r3, [pc, #560]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	f003 0318 	and.w	r3, r3, #24
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	d102      	bne.n	8003e54 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003e4e:	4b8a      	ldr	r3, [pc, #552]	@ (8004078 <HAL_RCC_GetSysClockFreq+0x23c>)
 8003e50:	61fb      	str	r3, [r7, #28]
 8003e52:	e107      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e54:	4b87      	ldr	r3, [pc, #540]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	f003 0318 	and.w	r3, r3, #24
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d112      	bne.n	8003e86 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003e60:	4b84      	ldr	r3, [pc, #528]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0320 	and.w	r3, r3, #32
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d009      	beq.n	8003e80 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003e6c:	4b81      	ldr	r3, [pc, #516]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	08db      	lsrs	r3, r3, #3
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	4a81      	ldr	r2, [pc, #516]	@ (800407c <HAL_RCC_GetSysClockFreq+0x240>)
 8003e78:	fa22 f303 	lsr.w	r3, r2, r3
 8003e7c:	61fb      	str	r3, [r7, #28]
 8003e7e:	e0f1      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003e80:	4b7e      	ldr	r3, [pc, #504]	@ (800407c <HAL_RCC_GetSysClockFreq+0x240>)
 8003e82:	61fb      	str	r3, [r7, #28]
 8003e84:	e0ee      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e86:	4b7b      	ldr	r3, [pc, #492]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	f003 0318 	and.w	r3, r3, #24
 8003e8e:	2b10      	cmp	r3, #16
 8003e90:	d102      	bne.n	8003e98 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e92:	4b7b      	ldr	r3, [pc, #492]	@ (8004080 <HAL_RCC_GetSysClockFreq+0x244>)
 8003e94:	61fb      	str	r3, [r7, #28]
 8003e96:	e0e5      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e98:	4b76      	ldr	r3, [pc, #472]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e9a:	69db      	ldr	r3, [r3, #28]
 8003e9c:	f003 0318 	and.w	r3, r3, #24
 8003ea0:	2b18      	cmp	r3, #24
 8003ea2:	f040 80dd 	bne.w	8004060 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003ea6:	4b73      	ldr	r3, [pc, #460]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x238>)
 8003ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eaa:	f003 0303 	and.w	r3, r3, #3
 8003eae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003eb0:	4b70      	ldr	r3, [pc, #448]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x238>)
 8003eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb4:	0a1b      	lsrs	r3, r3, #8
 8003eb6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003eba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003ebc:	4b6d      	ldr	r3, [pc, #436]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x238>)
 8003ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec0:	091b      	lsrs	r3, r3, #4
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003ec8:	4b6a      	ldr	r3, [pc, #424]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x238>)
 8003eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8003ecc:	08db      	lsrs	r3, r3, #3
 8003ece:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	fb02 f303 	mul.w	r3, r2, r3
 8003ed8:	ee07 3a90 	vmov	s15, r3
 8003edc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ee0:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 80b7 	beq.w	800405a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d003      	beq.n	8003efa <HAL_RCC_GetSysClockFreq+0xbe>
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2b03      	cmp	r3, #3
 8003ef6:	d056      	beq.n	8003fa6 <HAL_RCC_GetSysClockFreq+0x16a>
 8003ef8:	e077      	b.n	8003fea <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003efa:	4b5e      	ldr	r3, [pc, #376]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x238>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0320 	and.w	r3, r3, #32
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d02d      	beq.n	8003f62 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003f06:	4b5b      	ldr	r3, [pc, #364]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x238>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	08db      	lsrs	r3, r3, #3
 8003f0c:	f003 0303 	and.w	r3, r3, #3
 8003f10:	4a5a      	ldr	r2, [pc, #360]	@ (800407c <HAL_RCC_GetSysClockFreq+0x240>)
 8003f12:	fa22 f303 	lsr.w	r3, r2, r3
 8003f16:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	ee07 3a90 	vmov	s15, r3
 8003f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	ee07 3a90 	vmov	s15, r3
 8003f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f30:	4b50      	ldr	r3, [pc, #320]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x238>)
 8003f32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f38:	ee07 3a90 	vmov	s15, r3
 8003f3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f40:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f44:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8004084 <HAL_RCC_GetSysClockFreq+0x248>
 8003f48:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f54:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f5c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8003f60:	e065      	b.n	800402e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	ee07 3a90 	vmov	s15, r3
 8003f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f6c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004088 <HAL_RCC_GetSysClockFreq+0x24c>
 8003f70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f74:	4b3f      	ldr	r3, [pc, #252]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x238>)
 8003f76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f7c:	ee07 3a90 	vmov	s15, r3
 8003f80:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f84:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f88:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004084 <HAL_RCC_GetSysClockFreq+0x248>
 8003f8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f90:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f98:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003fa4:	e043      	b.n	800402e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	ee07 3a90 	vmov	s15, r3
 8003fac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fb0:	eddf 6a36 	vldr	s13, [pc, #216]	@ 800408c <HAL_RCC_GetSysClockFreq+0x250>
 8003fb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fb8:	4b2e      	ldr	r3, [pc, #184]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x238>)
 8003fba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fc0:	ee07 3a90 	vmov	s15, r3
 8003fc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fc8:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fcc:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8004084 <HAL_RCC_GetSysClockFreq+0x248>
 8003fd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003fd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fd8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fe4:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8003fe8:	e021      	b.n	800402e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	ee07 3a90 	vmov	s15, r3
 8003ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ff4:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004090 <HAL_RCC_GetSysClockFreq+0x254>
 8003ff8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x238>)
 8003ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004004:	ee07 3a90 	vmov	s15, r3
 8004008:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800400c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004010:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8004084 <HAL_RCC_GetSysClockFreq+0x248>
 8004014:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004018:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800401c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004020:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004028:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800402c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800402e:	4b11      	ldr	r3, [pc, #68]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x238>)
 8004030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004032:	0a5b      	lsrs	r3, r3, #9
 8004034:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004038:	3301      	adds	r3, #1
 800403a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	ee07 3a90 	vmov	s15, r3
 8004042:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004046:	edd7 6a06 	vldr	s13, [r7, #24]
 800404a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800404e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004052:	ee17 3a90 	vmov	r3, s15
 8004056:	61fb      	str	r3, [r7, #28]
 8004058:	e004      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800405a:	2300      	movs	r3, #0
 800405c:	61fb      	str	r3, [r7, #28]
 800405e:	e001      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004060:	4b06      	ldr	r3, [pc, #24]	@ (800407c <HAL_RCC_GetSysClockFreq+0x240>)
 8004062:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004064:	69fb      	ldr	r3, [r7, #28]
}
 8004066:	4618      	mov	r0, r3
 8004068:	3724      	adds	r7, #36	@ 0x24
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	44020c00 	.word	0x44020c00
 8004078:	003d0900 	.word	0x003d0900
 800407c:	03d09000 	.word	0x03d09000
 8004080:	017d7840 	.word	0x017d7840
 8004084:	46000000 	.word	0x46000000
 8004088:	4c742400 	.word	0x4c742400
 800408c:	4bbebc20 	.word	0x4bbebc20
 8004090:	4a742400 	.word	0x4a742400

08004094 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004098:	f7ff fed0 	bl	8003e3c <HAL_RCC_GetSysClockFreq>
 800409c:	4602      	mov	r2, r0
 800409e:	4b08      	ldr	r3, [pc, #32]	@ (80040c0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80040a0:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80040a2:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80040a6:	4907      	ldr	r1, [pc, #28]	@ (80040c4 <HAL_RCC_GetHCLKFreq+0x30>)
 80040a8:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80040aa:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80040ae:	fa22 f303 	lsr.w	r3, r2, r3
 80040b2:	4a05      	ldr	r2, [pc, #20]	@ (80040c8 <HAL_RCC_GetHCLKFreq+0x34>)
 80040b4:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80040b6:	4b04      	ldr	r3, [pc, #16]	@ (80040c8 <HAL_RCC_GetHCLKFreq+0x34>)
 80040b8:	681b      	ldr	r3, [r3, #0]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	44020c00 	.word	0x44020c00
 80040c4:	0800ae68 	.word	0x0800ae68
 80040c8:	20000008 	.word	0x20000008

080040cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80040d0:	f7ff ffe0 	bl	8004094 <HAL_RCC_GetHCLKFreq>
 80040d4:	4602      	mov	r2, r0
 80040d6:	4b06      	ldr	r3, [pc, #24]	@ (80040f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	091b      	lsrs	r3, r3, #4
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	4904      	ldr	r1, [pc, #16]	@ (80040f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040e2:	5ccb      	ldrb	r3, [r1, r3]
 80040e4:	f003 031f 	and.w	r3, r3, #31
 80040e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	44020c00 	.word	0x44020c00
 80040f4:	0800ae78 	.word	0x0800ae78

080040f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80040fc:	f7ff ffca 	bl	8004094 <HAL_RCC_GetHCLKFreq>
 8004100:	4602      	mov	r2, r0
 8004102:	4b06      	ldr	r3, [pc, #24]	@ (800411c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	0a1b      	lsrs	r3, r3, #8
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	4904      	ldr	r1, [pc, #16]	@ (8004120 <HAL_RCC_GetPCLK2Freq+0x28>)
 800410e:	5ccb      	ldrb	r3, [r1, r3]
 8004110:	f003 031f 	and.w	r3, r3, #31
 8004114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004118:	4618      	mov	r0, r3
 800411a:	bd80      	pop	{r7, pc}
 800411c:	44020c00 	.word	0x44020c00
 8004120:	0800ae78 	.word	0x0800ae78

08004124 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8004128:	f7ff ffb4 	bl	8004094 <HAL_RCC_GetHCLKFreq>
 800412c:	4602      	mov	r2, r0
 800412e:	4b06      	ldr	r3, [pc, #24]	@ (8004148 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	0b1b      	lsrs	r3, r3, #12
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	4904      	ldr	r1, [pc, #16]	@ (800414c <HAL_RCC_GetPCLK3Freq+0x28>)
 800413a:	5ccb      	ldrb	r3, [r1, r3]
 800413c:	f003 031f 	and.w	r3, r3, #31
 8004140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004144:	4618      	mov	r0, r3
 8004146:	bd80      	pop	{r7, pc}
 8004148:	44020c00 	.word	0x44020c00
 800414c:	0800ae78 	.word	0x0800ae78

08004150 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004154:	b0ba      	sub	sp, #232	@ 0xe8
 8004156:	af00      	add	r7, sp, #0
 8004158:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800415c:	2300      	movs	r3, #0
 800415e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004162:	2300      	movs	r3, #0
 8004164:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004168:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800416c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004170:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8004174:	2500      	movs	r5, #0
 8004176:	ea54 0305 	orrs.w	r3, r4, r5
 800417a:	d00b      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 800417c:	4bcd      	ldr	r3, [pc, #820]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800417e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004182:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8004186:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800418a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800418c:	4ac9      	ldr	r2, [pc, #804]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800418e:	430b      	orrs	r3, r1
 8004190:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004194:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419c:	f002 0801 	and.w	r8, r2, #1
 80041a0:	f04f 0900 	mov.w	r9, #0
 80041a4:	ea58 0309 	orrs.w	r3, r8, r9
 80041a8:	d042      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80041aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041b0:	2b05      	cmp	r3, #5
 80041b2:	d823      	bhi.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xac>
 80041b4:	a201      	add	r2, pc, #4	@ (adr r2, 80041bc <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80041b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ba:	bf00      	nop
 80041bc:	08004205 	.word	0x08004205
 80041c0:	080041d5 	.word	0x080041d5
 80041c4:	080041e9 	.word	0x080041e9
 80041c8:	08004205 	.word	0x08004205
 80041cc:	08004205 	.word	0x08004205
 80041d0:	08004205 	.word	0x08004205
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041d8:	3308      	adds	r3, #8
 80041da:	4618      	mov	r0, r3
 80041dc:	f003 f90c 	bl	80073f8 <RCCEx_PLL2_Config>
 80041e0:	4603      	mov	r3, r0
 80041e2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 80041e6:	e00e      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80041e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041ec:	3330      	adds	r3, #48	@ 0x30
 80041ee:	4618      	mov	r0, r3
 80041f0:	f003 f99a 	bl	8007528 <RCCEx_PLL3_Config>
 80041f4:	4603      	mov	r3, r0
 80041f6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 80041fa:	e004      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004202:	e000      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8004204:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004206:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10c      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800420e:	4ba9      	ldr	r3, [pc, #676]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004210:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004214:	f023 0107 	bic.w	r1, r3, #7
 8004218:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800421c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800421e:	4aa5      	ldr	r2, [pc, #660]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004220:	430b      	orrs	r3, r1
 8004222:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004226:	e003      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004228:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800422c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004230:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004238:	f002 0a02 	and.w	sl, r2, #2
 800423c:	f04f 0b00 	mov.w	fp, #0
 8004240:	ea5a 030b 	orrs.w	r3, sl, fp
 8004244:	f000 8088 	beq.w	8004358 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8004248:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800424c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800424e:	2b28      	cmp	r3, #40	@ 0x28
 8004250:	d868      	bhi.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004252:	a201      	add	r2, pc, #4	@ (adr r2, 8004258 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004258:	0800432d 	.word	0x0800432d
 800425c:	08004325 	.word	0x08004325
 8004260:	08004325 	.word	0x08004325
 8004264:	08004325 	.word	0x08004325
 8004268:	08004325 	.word	0x08004325
 800426c:	08004325 	.word	0x08004325
 8004270:	08004325 	.word	0x08004325
 8004274:	08004325 	.word	0x08004325
 8004278:	080042fd 	.word	0x080042fd
 800427c:	08004325 	.word	0x08004325
 8004280:	08004325 	.word	0x08004325
 8004284:	08004325 	.word	0x08004325
 8004288:	08004325 	.word	0x08004325
 800428c:	08004325 	.word	0x08004325
 8004290:	08004325 	.word	0x08004325
 8004294:	08004325 	.word	0x08004325
 8004298:	08004311 	.word	0x08004311
 800429c:	08004325 	.word	0x08004325
 80042a0:	08004325 	.word	0x08004325
 80042a4:	08004325 	.word	0x08004325
 80042a8:	08004325 	.word	0x08004325
 80042ac:	08004325 	.word	0x08004325
 80042b0:	08004325 	.word	0x08004325
 80042b4:	08004325 	.word	0x08004325
 80042b8:	0800432d 	.word	0x0800432d
 80042bc:	08004325 	.word	0x08004325
 80042c0:	08004325 	.word	0x08004325
 80042c4:	08004325 	.word	0x08004325
 80042c8:	08004325 	.word	0x08004325
 80042cc:	08004325 	.word	0x08004325
 80042d0:	08004325 	.word	0x08004325
 80042d4:	08004325 	.word	0x08004325
 80042d8:	0800432d 	.word	0x0800432d
 80042dc:	08004325 	.word	0x08004325
 80042e0:	08004325 	.word	0x08004325
 80042e4:	08004325 	.word	0x08004325
 80042e8:	08004325 	.word	0x08004325
 80042ec:	08004325 	.word	0x08004325
 80042f0:	08004325 	.word	0x08004325
 80042f4:	08004325 	.word	0x08004325
 80042f8:	0800432d 	.word	0x0800432d
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004300:	3308      	adds	r3, #8
 8004302:	4618      	mov	r0, r3
 8004304:	f003 f878 	bl	80073f8 <RCCEx_PLL2_Config>
 8004308:	4603      	mov	r3, r0
 800430a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 800430e:	e00e      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004310:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004314:	3330      	adds	r3, #48	@ 0x30
 8004316:	4618      	mov	r0, r3
 8004318:	f003 f906 	bl	8007528 <RCCEx_PLL3_Config>
 800431c:	4603      	mov	r3, r0
 800431e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8004322:	e004      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800432a:	e000      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 800432c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800432e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10c      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004336:	4b5f      	ldr	r3, [pc, #380]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004338:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800433c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004340:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004344:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004346:	4a5b      	ldr	r2, [pc, #364]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004348:	430b      	orrs	r3, r1
 800434a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800434e:	e003      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004350:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004354:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004358:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800435c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004360:	f002 0304 	and.w	r3, r2, #4
 8004364:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004368:	2300      	movs	r3, #0
 800436a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800436e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004372:	460b      	mov	r3, r1
 8004374:	4313      	orrs	r3, r2
 8004376:	d04e      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8004378:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800437c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800437e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004382:	d02c      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8004384:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004388:	d825      	bhi.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800438a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800438e:	d028      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004390:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004394:	d81f      	bhi.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004396:	2bc0      	cmp	r3, #192	@ 0xc0
 8004398:	d025      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800439a:	2bc0      	cmp	r3, #192	@ 0xc0
 800439c:	d81b      	bhi.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800439e:	2b80      	cmp	r3, #128	@ 0x80
 80043a0:	d00f      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80043a2:	2b80      	cmp	r3, #128	@ 0x80
 80043a4:	d817      	bhi.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d01f      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80043aa:	2b40      	cmp	r3, #64	@ 0x40
 80043ac:	d113      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043b2:	3308      	adds	r3, #8
 80043b4:	4618      	mov	r0, r3
 80043b6:	f003 f81f 	bl	80073f8 <RCCEx_PLL2_Config>
 80043ba:	4603      	mov	r3, r0
 80043bc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 80043c0:	e014      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80043c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043c6:	3330      	adds	r3, #48	@ 0x30
 80043c8:	4618      	mov	r0, r3
 80043ca:	f003 f8ad 	bl	8007528 <RCCEx_PLL3_Config>
 80043ce:	4603      	mov	r3, r0
 80043d0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 80043d4:	e00a      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80043dc:	e006      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80043de:	bf00      	nop
 80043e0:	e004      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80043e2:	bf00      	nop
 80043e4:	e002      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80043e6:	bf00      	nop
 80043e8:	e000      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80043ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ec:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10c      	bne.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80043f4:	4b2f      	ldr	r3, [pc, #188]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80043f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80043fa:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80043fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004402:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004404:	4a2b      	ldr	r2, [pc, #172]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004406:	430b      	orrs	r3, r1
 8004408:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800440c:	e003      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800440e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004412:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004416:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800441a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441e:	f002 0308 	and.w	r3, r2, #8
 8004422:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004426:	2300      	movs	r3, #0
 8004428:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800442c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004430:	460b      	mov	r3, r1
 8004432:	4313      	orrs	r3, r2
 8004434:	d056      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8004436:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800443a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800443c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004440:	d031      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004442:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004446:	d82a      	bhi.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004448:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800444c:	d02d      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800444e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004452:	d824      	bhi.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004454:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004458:	d029      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800445a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800445e:	d81e      	bhi.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004460:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004464:	d011      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004466:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800446a:	d818      	bhi.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800446c:	2b00      	cmp	r3, #0
 800446e:	d023      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004470:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004474:	d113      	bne.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004476:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800447a:	3308      	adds	r3, #8
 800447c:	4618      	mov	r0, r3
 800447e:	f002 ffbb 	bl	80073f8 <RCCEx_PLL2_Config>
 8004482:	4603      	mov	r3, r0
 8004484:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8004488:	e017      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800448a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800448e:	3330      	adds	r3, #48	@ 0x30
 8004490:	4618      	mov	r0, r3
 8004492:	f003 f849 	bl	8007528 <RCCEx_PLL3_Config>
 8004496:	4603      	mov	r3, r0
 8004498:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 800449c:	e00d      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80044a4:	e009      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80044a6:	bf00      	nop
 80044a8:	e007      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80044aa:	bf00      	nop
 80044ac:	e005      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80044ae:	bf00      	nop
 80044b0:	e003      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80044b2:	bf00      	nop
 80044b4:	44020c00 	.word	0x44020c00
        break;
 80044b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ba:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10c      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80044c2:	4bb9      	ldr	r3, [pc, #740]	@ (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80044c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80044c8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80044cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044d2:	4ab5      	ldr	r2, [pc, #724]	@ (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80044d4:	430b      	orrs	r3, r1
 80044d6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80044da:	e003      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044dc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80044e0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ec:	f002 0310 	and.w	r3, r2, #16
 80044f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044f4:	2300      	movs	r3, #0
 80044f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80044fa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80044fe:	460b      	mov	r3, r1
 8004500:	4313      	orrs	r3, r2
 8004502:	d053      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8004504:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004508:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800450a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800450e:	d031      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004510:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004514:	d82a      	bhi.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004516:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800451a:	d02d      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800451c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004520:	d824      	bhi.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004522:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004526:	d029      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004528:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800452c:	d81e      	bhi.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800452e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004532:	d011      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004534:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004538:	d818      	bhi.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800453a:	2b00      	cmp	r3, #0
 800453c:	d020      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800453e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004542:	d113      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004544:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004548:	3308      	adds	r3, #8
 800454a:	4618      	mov	r0, r3
 800454c:	f002 ff54 	bl	80073f8 <RCCEx_PLL2_Config>
 8004550:	4603      	mov	r3, r0
 8004552:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8004556:	e014      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004558:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800455c:	3330      	adds	r3, #48	@ 0x30
 800455e:	4618      	mov	r0, r3
 8004560:	f002 ffe2 	bl	8007528 <RCCEx_PLL3_Config>
 8004564:	4603      	mov	r3, r0
 8004566:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 800456a:	e00a      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004572:	e006      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004574:	bf00      	nop
 8004576:	e004      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004578:	bf00      	nop
 800457a:	e002      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800457c:	bf00      	nop
 800457e:	e000      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004580:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004582:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10c      	bne.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800458a:	4b87      	ldr	r3, [pc, #540]	@ (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800458c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004590:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004594:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004598:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800459a:	4a83      	ldr	r2, [pc, #524]	@ (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800459c:	430b      	orrs	r3, r1
 800459e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80045a2:	e003      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80045a8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80045ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b4:	f002 0320 	and.w	r3, r2, #32
 80045b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045bc:	2300      	movs	r3, #0
 80045be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045c2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80045c6:	460b      	mov	r3, r1
 80045c8:	4313      	orrs	r3, r2
 80045ca:	d053      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80045cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d2:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80045d6:	d031      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80045d8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80045dc:	d82a      	bhi.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80045de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045e2:	d02d      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80045e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045e8:	d824      	bhi.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80045ea:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80045ee:	d029      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80045f0:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80045f4:	d81e      	bhi.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80045f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045fa:	d011      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80045fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004600:	d818      	bhi.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004602:	2b00      	cmp	r3, #0
 8004604:	d020      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8004606:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800460a:	d113      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800460c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004610:	3308      	adds	r3, #8
 8004612:	4618      	mov	r0, r3
 8004614:	f002 fef0 	bl	80073f8 <RCCEx_PLL2_Config>
 8004618:	4603      	mov	r3, r0
 800461a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 800461e:	e014      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004620:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004624:	3330      	adds	r3, #48	@ 0x30
 8004626:	4618      	mov	r0, r3
 8004628:	f002 ff7e 	bl	8007528 <RCCEx_PLL3_Config>
 800462c:	4603      	mov	r3, r0
 800462e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8004632:	e00a      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800463a:	e006      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800463c:	bf00      	nop
 800463e:	e004      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004640:	bf00      	nop
 8004642:	e002      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004644:	bf00      	nop
 8004646:	e000      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004648:	bf00      	nop
    }

    if (ret == HAL_OK)
 800464a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10c      	bne.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8004652:	4b55      	ldr	r3, [pc, #340]	@ (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004654:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004658:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 800465c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004662:	4a51      	ldr	r2, [pc, #324]	@ (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004664:	430b      	orrs	r3, r1
 8004666:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800466a:	e003      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800466c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004670:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004674:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467c:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004680:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004684:	2300      	movs	r3, #0
 8004686:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800468a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800468e:	460b      	mov	r3, r1
 8004690:	4313      	orrs	r3, r2
 8004692:	d053      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004694:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800469a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800469e:	d031      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80046a0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80046a4:	d82a      	bhi.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80046a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046aa:	d02d      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80046ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046b0:	d824      	bhi.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80046b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80046b6:	d029      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80046b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80046bc:	d81e      	bhi.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80046be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046c2:	d011      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80046c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046c8:	d818      	bhi.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d020      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80046ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046d2:	d113      	bne.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80046d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046d8:	3308      	adds	r3, #8
 80046da:	4618      	mov	r0, r3
 80046dc:	f002 fe8c 	bl	80073f8 <RCCEx_PLL2_Config>
 80046e0:	4603      	mov	r3, r0
 80046e2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80046e6:	e014      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80046e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046ec:	3330      	adds	r3, #48	@ 0x30
 80046ee:	4618      	mov	r0, r3
 80046f0:	f002 ff1a 	bl	8007528 <RCCEx_PLL3_Config>
 80046f4:	4603      	mov	r3, r0
 80046f6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80046fa:	e00a      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004702:	e006      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004704:	bf00      	nop
 8004706:	e004      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004708:	bf00      	nop
 800470a:	e002      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800470c:	bf00      	nop
 800470e:	e000      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004710:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004712:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10c      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800471a:	4b23      	ldr	r3, [pc, #140]	@ (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800471c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004720:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004724:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800472a:	4a1f      	ldr	r2, [pc, #124]	@ (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800472c:	430b      	orrs	r3, r1
 800472e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004732:	e003      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004734:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004738:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800473c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004744:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004748:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800474c:	2300      	movs	r3, #0
 800474e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004752:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004756:	460b      	mov	r3, r1
 8004758:	4313      	orrs	r3, r2
 800475a:	d03d      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800475c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004760:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004762:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004766:	d01b      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8004768:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800476c:	d814      	bhi.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x648>
 800476e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004772:	d017      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8004774:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004778:	d80e      	bhi.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x648>
 800477a:	2b00      	cmp	r3, #0
 800477c:	d016      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x65c>
 800477e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004782:	d109      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004784:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004788:	3330      	adds	r3, #48	@ 0x30
 800478a:	4618      	mov	r0, r3
 800478c:	f002 fecc 	bl	8007528 <RCCEx_PLL3_Config>
 8004790:	4603      	mov	r3, r0
 8004792:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8004796:	e00a      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800479e:	e006      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 80047a0:	bf00      	nop
 80047a2:	e004      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 80047a4:	bf00      	nop
 80047a6:	e002      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x65e>
 80047a8:	44020c00 	.word	0x44020c00
        break;
 80047ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047ae:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10c      	bne.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80047b6:	4b99      	ldr	r3, [pc, #612]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80047b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80047bc:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80047c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047c6:	4a95      	ldr	r2, [pc, #596]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80047c8:	430b      	orrs	r3, r1
 80047ca:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80047ce:	e003      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80047d4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80047e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80047e8:	2300      	movs	r3, #0
 80047ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80047ee:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80047f2:	460b      	mov	r3, r1
 80047f4:	4313      	orrs	r3, r2
 80047f6:	d03b      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80047f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047fe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004802:	d01b      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8004804:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004808:	d814      	bhi.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 800480a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800480e:	d017      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8004810:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004814:	d80e      	bhi.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8004816:	2b00      	cmp	r3, #0
 8004818:	d014      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 800481a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800481e:	d109      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004820:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004824:	3330      	adds	r3, #48	@ 0x30
 8004826:	4618      	mov	r0, r3
 8004828:	f002 fe7e 	bl	8007528 <RCCEx_PLL3_Config>
 800482c:	4603      	mov	r3, r0
 800482e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8004832:	e008      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800483a:	e004      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 800483c:	bf00      	nop
 800483e:	e002      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004840:	bf00      	nop
 8004842:	e000      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004844:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004846:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10c      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800484e:	4b73      	ldr	r3, [pc, #460]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004850:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004854:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004858:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800485c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800485e:	4a6f      	ldr	r2, [pc, #444]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004860:	430b      	orrs	r3, r1
 8004862:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004866:	e003      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004868:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800486c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004870:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004878:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800487c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004880:	2300      	movs	r3, #0
 8004882:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004886:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800488a:	460b      	mov	r3, r1
 800488c:	4313      	orrs	r3, r2
 800488e:	d03d      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8004890:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004894:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004898:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800489c:	d01b      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x786>
 800489e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048a2:	d814      	bhi.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80048a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048a8:	d017      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x78a>
 80048aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048ae:	d80e      	bhi.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d014      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x78e>
 80048b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048b8:	d109      	bne.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80048ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048be:	3330      	adds	r3, #48	@ 0x30
 80048c0:	4618      	mov	r0, r3
 80048c2:	f002 fe31 	bl	8007528 <RCCEx_PLL3_Config>
 80048c6:	4603      	mov	r3, r0
 80048c8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 80048cc:	e008      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80048d4:	e004      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80048d6:	bf00      	nop
 80048d8:	e002      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80048da:	bf00      	nop
 80048dc:	e000      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80048de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048e0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10d      	bne.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80048e8:	4b4c      	ldr	r3, [pc, #304]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80048ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80048ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80048f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048fa:	4a48      	ldr	r2, [pc, #288]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80048fc:	430b      	orrs	r3, r1
 80048fe:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004902:	e003      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004904:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004908:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800490c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004914:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004918:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800491c:	2300      	movs	r3, #0
 800491e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004922:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004926:	460b      	mov	r3, r1
 8004928:	4313      	orrs	r3, r2
 800492a:	d035      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 800492c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004930:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004934:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004938:	d015      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x816>
 800493a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800493e:	d80e      	bhi.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8004940:	2b00      	cmp	r3, #0
 8004942:	d012      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8004944:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004948:	d109      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800494a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800494e:	3330      	adds	r3, #48	@ 0x30
 8004950:	4618      	mov	r0, r3
 8004952:	f002 fde9 	bl	8007528 <RCCEx_PLL3_Config>
 8004956:	4603      	mov	r3, r0
 8004958:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800495c:	e006      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004964:	e002      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8004966:	bf00      	nop
 8004968:	e000      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 800496a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800496c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10d      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8004974:	4b29      	ldr	r3, [pc, #164]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004976:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800497a:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800497e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004982:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004986:	4a25      	ldr	r2, [pc, #148]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004988:	430b      	orrs	r3, r1
 800498a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800498e:	e003      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004990:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004994:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8004998:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800499c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a0:	2100      	movs	r1, #0
 80049a2:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 80049a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80049ae:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80049b2:	460b      	mov	r3, r1
 80049b4:	4313      	orrs	r3, r2
 80049b6:	d037      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 80049b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049c4:	d015      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80049c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049ca:	d80e      	bhi.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x89a>
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d012      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 80049d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049d4:	d109      	bne.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80049d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049da:	3330      	adds	r3, #48	@ 0x30
 80049dc:	4618      	mov	r0, r3
 80049de:	f002 fda3 	bl	8007528 <RCCEx_PLL3_Config>
 80049e2:	4603      	mov	r3, r0
 80049e4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 80049e8:	e006      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80049f0:	e002      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 80049f2:	bf00      	nop
 80049f4:	e000      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 80049f6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80049f8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10f      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8004a00:	4b06      	ldr	r3, [pc, #24]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004a02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a06:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004a0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a12:	4a02      	ldr	r2, [pc, #8]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004a14:	430b      	orrs	r3, r1
 8004a16:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004a1a:	e005      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 8004a1c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a20:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004a24:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004a28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a30:	2100      	movs	r1, #0
 8004a32:	67b9      	str	r1, [r7, #120]	@ 0x78
 8004a34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a38:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a3a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004a3e:	460b      	mov	r3, r1
 8004a40:	4313      	orrs	r3, r2
 8004a42:	d00e      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8004a44:	4bb8      	ldr	r3, [pc, #736]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004a46:	69db      	ldr	r3, [r3, #28]
 8004a48:	4ab7      	ldr	r2, [pc, #732]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004a4a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004a4e:	61d3      	str	r3, [r2, #28]
 8004a50:	4bb5      	ldr	r3, [pc, #724]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004a52:	69d9      	ldr	r1, [r3, #28]
 8004a54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a58:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004a5c:	4ab2      	ldr	r2, [pc, #712]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004a5e:	430b      	orrs	r3, r1
 8004a60:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004a6e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a70:	2300      	movs	r3, #0
 8004a72:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a74:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004a78:	460b      	mov	r3, r1
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	d055      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8004a7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a86:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004a8a:	d031      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8004a8c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004a90:	d82a      	bhi.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004a92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a96:	d02d      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8004a98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a9c:	d824      	bhi.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004a9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004aa2:	d029      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8004aa4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004aa8:	d81e      	bhi.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004aaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aae:	d011      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004ab0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ab4:	d818      	bhi.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d020      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 8004aba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004abe:	d113      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ac0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ac4:	3308      	adds	r3, #8
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f002 fc96 	bl	80073f8 <RCCEx_PLL2_Config>
 8004acc:	4603      	mov	r3, r0
 8004ace:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004ad2:	e014      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ad4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ad8:	3330      	adds	r3, #48	@ 0x30
 8004ada:	4618      	mov	r0, r3
 8004adc:	f002 fd24 	bl	8007528 <RCCEx_PLL3_Config>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004ae6:	e00a      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004aee:	e006      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004af0:	bf00      	nop
 8004af2:	e004      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004af4:	bf00      	nop
 8004af6:	e002      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004af8:	bf00      	nop
 8004afa:	e000      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004afe:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10d      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004b06:	4b88      	ldr	r3, [pc, #544]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004b08:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004b0c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004b10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b18:	4a83      	ldr	r2, [pc, #524]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004b1a:	430b      	orrs	r3, r1
 8004b1c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004b20:	e003      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b22:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b26:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004b2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b32:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004b36:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b38:	2300      	movs	r3, #0
 8004b3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b3c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004b40:	460b      	mov	r3, r1
 8004b42:	4313      	orrs	r3, r2
 8004b44:	d055      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8004b46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b4e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004b52:	d031      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8004b54:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004b58:	d82a      	bhi.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004b5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b5e:	d02d      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8004b60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b64:	d824      	bhi.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004b66:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b6a:	d029      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004b6c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b70:	d81e      	bhi.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004b72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b76:	d011      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8004b78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b7c:	d818      	bhi.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d020      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004b82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b86:	d113      	bne.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b8c:	3308      	adds	r3, #8
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f002 fc32 	bl	80073f8 <RCCEx_PLL2_Config>
 8004b94:	4603      	mov	r3, r0
 8004b96:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004b9a:	e014      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ba0:	3330      	adds	r3, #48	@ 0x30
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f002 fcc0 	bl	8007528 <RCCEx_PLL3_Config>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004bae:	e00a      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004bb6:	e006      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004bb8:	bf00      	nop
 8004bba:	e004      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004bbc:	bf00      	nop
 8004bbe:	e002      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004bc0:	bf00      	nop
 8004bc2:	e000      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004bc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bc6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10d      	bne.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004bce:	4b56      	ldr	r3, [pc, #344]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004bd0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004bd4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004bd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004be0:	4a51      	ldr	r2, [pc, #324]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004be2:	430b      	orrs	r3, r1
 8004be4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004be8:	e003      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bea:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004bee:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004bf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004bfe:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c00:	2300      	movs	r3, #0
 8004c02:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c04:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004c08:	460b      	mov	r3, r1
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	d032      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004c0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004c16:	2b05      	cmp	r3, #5
 8004c18:	d80f      	bhi.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8004c1a:	2b03      	cmp	r3, #3
 8004c1c:	d211      	bcs.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d911      	bls.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d109      	bne.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c2a:	3308      	adds	r3, #8
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f002 fbe3 	bl	80073f8 <RCCEx_PLL2_Config>
 8004c32:	4603      	mov	r3, r0
 8004c34:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004c38:	e006      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004c40:	e002      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8004c42:	bf00      	nop
 8004c44:	e000      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8004c46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c48:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10d      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004c50:	4b35      	ldr	r3, [pc, #212]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004c52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c56:	f023 0107 	bic.w	r1, r3, #7
 8004c5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004c62:	4a31      	ldr	r2, [pc, #196]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004c64:	430b      	orrs	r3, r1
 8004c66:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004c6a:	e003      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c6c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c70:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8004c74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c86:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	d024      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8004c90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d005      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d005      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004ca6:	e002      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8004ca8:	bf00      	nop
 8004caa:	e000      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8004cac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cae:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10d      	bne.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8004cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004cb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004cbc:	f023 0108 	bic.w	r1, r3, #8
 8004cc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cc4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004cc8:	4a17      	ldr	r2, [pc, #92]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004cca:	430b      	orrs	r3, r1
 8004ccc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004cd0:	e003      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004cd6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce2:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004ce6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ce8:	2300      	movs	r3, #0
 8004cea:	657b      	str	r3, [r7, #84]	@ 0x54
 8004cec:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	f000 80b9 	beq.w	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8004d2c <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfc:	4a0b      	ldr	r2, [pc, #44]	@ (8004d2c <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8004cfe:	f043 0301 	orr.w	r3, r3, #1
 8004d02:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d04:	f7fc fe66 	bl	80019d4 <HAL_GetTick>
 8004d08:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004d0c:	e010      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d0e:	f7fc fe61 	bl	80019d4 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d908      	bls.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004d24:	e00a      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8004d26:	bf00      	nop
 8004d28:	44020c00 	.word	0x44020c00
 8004d2c:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004d30:	4bba      	ldr	r3, [pc, #744]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 8004d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0e8      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 8004d3c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f040 808e 	bne.w	8004e62 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d46:	4bb6      	ldr	r3, [pc, #728]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004d48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d50:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d023      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8004d5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d60:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8004d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d01b      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d6c:	4bac      	ldr	r3, [pc, #688]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004d6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d7a:	4ba9      	ldr	r3, [pc, #676]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004d7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d80:	4aa7      	ldr	r2, [pc, #668]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004d82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d8a:	4ba5      	ldr	r3, [pc, #660]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004d8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d90:	4aa3      	ldr	r2, [pc, #652]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004d92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d96:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d9a:	4aa1      	ldr	r2, [pc, #644]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004da0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d019      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db0:	f7fc fe10 	bl	80019d4 <HAL_GetTick>
 8004db4:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004db8:	e00d      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dba:	f7fc fe0b 	bl	80019d4 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dc4:	1ad2      	subs	r2, r2, r3
 8004dc6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d903      	bls.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8004dd4:	e006      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dd6:	4b92      	ldr	r3, [pc, #584]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004dd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d0ea      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8004de4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d135      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004dec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004df0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004df4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004df8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dfc:	d110      	bne.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 8004dfe:	4b88      	ldr	r3, [pc, #544]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004e06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e0a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004e0e:	091b      	lsrs	r3, r3, #4
 8004e10:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004e14:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004e18:	4a81      	ldr	r2, [pc, #516]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004e1a:	430b      	orrs	r3, r1
 8004e1c:	61d3      	str	r3, [r2, #28]
 8004e1e:	e005      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8004e20:	4b7f      	ldr	r3, [pc, #508]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004e22:	69db      	ldr	r3, [r3, #28]
 8004e24:	4a7e      	ldr	r2, [pc, #504]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004e26:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004e2a:	61d3      	str	r3, [r2, #28]
 8004e2c:	4b7c      	ldr	r3, [pc, #496]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004e2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e32:	4a7b      	ldr	r2, [pc, #492]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004e34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e38:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004e3c:	4b78      	ldr	r3, [pc, #480]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004e3e:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8004e42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e46:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004e4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e4e:	4a74      	ldr	r2, [pc, #464]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004e50:	430b      	orrs	r3, r1
 8004e52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004e56:	e008      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e58:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e5c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8004e60:	e003      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e62:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e66:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004e6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e72:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004e76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e78:	2300      	movs	r3, #0
 8004e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e7c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004e80:	460b      	mov	r3, r1
 8004e82:	4313      	orrs	r3, r2
 8004e84:	d035      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004e86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e8e:	2b30      	cmp	r3, #48	@ 0x30
 8004e90:	d014      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 8004e92:	2b30      	cmp	r3, #48	@ 0x30
 8004e94:	d80e      	bhi.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8004e96:	2b20      	cmp	r3, #32
 8004e98:	d012      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8004e9a:	2b20      	cmp	r3, #32
 8004e9c:	d80a      	bhi.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d010      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 8004ea2:	2b10      	cmp	r3, #16
 8004ea4:	d106      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ea6:	4b5e      	ldr	r3, [pc, #376]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eaa:	4a5d      	ldr	r2, [pc, #372]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004eac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004eb0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004eba:	e004      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8004ebc:	bf00      	nop
 8004ebe:	e002      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8004ec0:	bf00      	nop
 8004ec2:	e000      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8004ec4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ec6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10d      	bne.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004ece:	4b54      	ldr	r3, [pc, #336]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004ed0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ed4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004ed8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004edc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ee0:	4a4f      	ldr	r2, [pc, #316]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004ee2:	430b      	orrs	r3, r1
 8004ee4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004ee8:	e003      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eea:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004eee:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004ef2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efa:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004efe:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f00:	2300      	movs	r3, #0
 8004f02:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f04:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	d033      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8004f0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d002      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 8004f1a:	2b40      	cmp	r3, #64	@ 0x40
 8004f1c:	d007      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004f1e:	e010      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f20:	4b3f      	ldr	r3, [pc, #252]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f24:	4a3e      	ldr	r2, [pc, #248]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004f26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f2a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004f2c:	e00d      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f32:	3308      	adds	r3, #8
 8004f34:	4618      	mov	r0, r3
 8004f36:	f002 fa5f 	bl	80073f8 <RCCEx_PLL2_Config>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004f40:	e003      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004f48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f4a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10d      	bne.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8004f52:	4b33      	ldr	r3, [pc, #204]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004f54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f58:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8004f5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f60:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f64:	4a2e      	ldr	r2, [pc, #184]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004f66:	430b      	orrs	r3, r1
 8004f68:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004f6c:	e003      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f6e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f72:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004f76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7e:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004f82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f84:	2300      	movs	r3, #0
 8004f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f88:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	d04c      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8004f92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004f9a:	2b04      	cmp	r3, #4
 8004f9c:	d827      	bhi.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8004f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 8004fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa4:	08004fb9 	.word	0x08004fb9
 8004fa8:	08004fc7 	.word	0x08004fc7
 8004fac:	08004fdb 	.word	0x08004fdb
 8004fb0:	08004ff7 	.word	0x08004ff7
 8004fb4:	08004ff7 	.word	0x08004ff7
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fb8:	4b19      	ldr	r3, [pc, #100]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fbc:	4a18      	ldr	r2, [pc, #96]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004fbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fc2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004fc4:	e018      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004fc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fca:	3308      	adds	r3, #8
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f002 fa13 	bl	80073f8 <RCCEx_PLL2_Config>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004fd8:	e00e      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004fda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fde:	3330      	adds	r3, #48	@ 0x30
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f002 faa1 	bl	8007528 <RCCEx_PLL3_Config>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004fec:	e004      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004ff4:	e000      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 8004ff6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ff8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d111      	bne.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005000:	4b07      	ldr	r3, [pc, #28]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005006:	f023 0107 	bic.w	r1, r3, #7
 800500a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800500e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005012:	4a03      	ldr	r2, [pc, #12]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005014:	430b      	orrs	r3, r1
 8005016:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800501a:	e007      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0xedc>
 800501c:	44020800 	.word	0x44020800
 8005020:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005024:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005028:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800502c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005034:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005038:	633b      	str	r3, [r7, #48]	@ 0x30
 800503a:	2300      	movs	r3, #0
 800503c:	637b      	str	r3, [r7, #52]	@ 0x34
 800503e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005042:	460b      	mov	r3, r1
 8005044:	4313      	orrs	r3, r2
 8005046:	f000 8081 	beq.w	800514c <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800504a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800504e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005052:	2b20      	cmp	r3, #32
 8005054:	d85f      	bhi.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8005056:	a201      	add	r2, pc, #4	@ (adr r2, 800505c <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8005058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505c:	080050e1 	.word	0x080050e1
 8005060:	08005117 	.word	0x08005117
 8005064:	08005117 	.word	0x08005117
 8005068:	08005117 	.word	0x08005117
 800506c:	08005117 	.word	0x08005117
 8005070:	08005117 	.word	0x08005117
 8005074:	08005117 	.word	0x08005117
 8005078:	08005117 	.word	0x08005117
 800507c:	080050ef 	.word	0x080050ef
 8005080:	08005117 	.word	0x08005117
 8005084:	08005117 	.word	0x08005117
 8005088:	08005117 	.word	0x08005117
 800508c:	08005117 	.word	0x08005117
 8005090:	08005117 	.word	0x08005117
 8005094:	08005117 	.word	0x08005117
 8005098:	08005117 	.word	0x08005117
 800509c:	08005103 	.word	0x08005103
 80050a0:	08005117 	.word	0x08005117
 80050a4:	08005117 	.word	0x08005117
 80050a8:	08005117 	.word	0x08005117
 80050ac:	08005117 	.word	0x08005117
 80050b0:	08005117 	.word	0x08005117
 80050b4:	08005117 	.word	0x08005117
 80050b8:	08005117 	.word	0x08005117
 80050bc:	0800511f 	.word	0x0800511f
 80050c0:	08005117 	.word	0x08005117
 80050c4:	08005117 	.word	0x08005117
 80050c8:	08005117 	.word	0x08005117
 80050cc:	08005117 	.word	0x08005117
 80050d0:	08005117 	.word	0x08005117
 80050d4:	08005117 	.word	0x08005117
 80050d8:	08005117 	.word	0x08005117
 80050dc:	0800511f 	.word	0x0800511f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050e0:	4bb9      	ldr	r3, [pc, #740]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80050e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e4:	4ab8      	ldr	r2, [pc, #736]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80050e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050ea:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80050ec:	e018      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050f2:	3308      	adds	r3, #8
 80050f4:	4618      	mov	r0, r3
 80050f6:	f002 f97f 	bl	80073f8 <RCCEx_PLL2_Config>
 80050fa:	4603      	mov	r3, r0
 80050fc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005100:	e00e      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005106:	3330      	adds	r3, #48	@ 0x30
 8005108:	4618      	mov	r0, r3
 800510a:	f002 fa0d 	bl	8007528 <RCCEx_PLL3_Config>
 800510e:	4603      	mov	r3, r0
 8005110:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005114:	e004      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800511c:	e000      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 800511e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005120:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10d      	bne.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005128:	4ba7      	ldr	r3, [pc, #668]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800512a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800512e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005132:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005136:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800513a:	4aa3      	ldr	r2, [pc, #652]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800513c:	430b      	orrs	r3, r1
 800513e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005142:	e003      	b.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005144:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005148:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800514c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005154:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005158:	62bb      	str	r3, [r7, #40]	@ 0x28
 800515a:	2300      	movs	r3, #0
 800515c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800515e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005162:	460b      	mov	r3, r1
 8005164:	4313      	orrs	r3, r2
 8005166:	d04e      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8005168:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800516c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005170:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005174:	d02e      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005176:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800517a:	d827      	bhi.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800517c:	2bc0      	cmp	r3, #192	@ 0xc0
 800517e:	d02b      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 8005180:	2bc0      	cmp	r3, #192	@ 0xc0
 8005182:	d823      	bhi.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005184:	2b80      	cmp	r3, #128	@ 0x80
 8005186:	d017      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 8005188:	2b80      	cmp	r3, #128	@ 0x80
 800518a:	d81f      	bhi.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800518c:	2b00      	cmp	r3, #0
 800518e:	d002      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x1046>
 8005190:	2b40      	cmp	r3, #64	@ 0x40
 8005192:	d007      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 8005194:	e01a      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005196:	4b8c      	ldr	r3, [pc, #560]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800519a:	4a8b      	ldr	r2, [pc, #556]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800519c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051a0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80051a2:	e01a      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80051a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051a8:	3308      	adds	r3, #8
 80051aa:	4618      	mov	r0, r3
 80051ac:	f002 f924 	bl	80073f8 <RCCEx_PLL2_Config>
 80051b0:	4603      	mov	r3, r0
 80051b2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80051b6:	e010      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051bc:	3330      	adds	r3, #48	@ 0x30
 80051be:	4618      	mov	r0, r3
 80051c0:	f002 f9b2 	bl	8007528 <RCCEx_PLL3_Config>
 80051c4:	4603      	mov	r3, r0
 80051c6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80051ca:	e006      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80051d2:	e002      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 80051d4:	bf00      	nop
 80051d6:	e000      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 80051d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051da:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10d      	bne.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80051e2:	4b79      	ldr	r3, [pc, #484]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80051e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051e8:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 80051ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80051f4:	4974      	ldr	r1, [pc, #464]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80051fc:	e003      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051fe:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005202:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8005206:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800520a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005212:	623b      	str	r3, [r7, #32]
 8005214:	2300      	movs	r3, #0
 8005216:	627b      	str	r3, [r7, #36]	@ 0x24
 8005218:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800521c:	460b      	mov	r3, r1
 800521e:	4313      	orrs	r3, r2
 8005220:	d055      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8005222:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005226:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800522a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800522e:	d031      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8005230:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005234:	d82a      	bhi.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005236:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800523a:	d02d      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 800523c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005240:	d824      	bhi.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005242:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005246:	d029      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x114c>
 8005248:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800524c:	d81e      	bhi.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800524e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005252:	d011      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8005254:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005258:	d818      	bhi.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800525a:	2b00      	cmp	r3, #0
 800525c:	d020      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 800525e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005262:	d113      	bne.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005264:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005268:	3308      	adds	r3, #8
 800526a:	4618      	mov	r0, r3
 800526c:	f002 f8c4 	bl	80073f8 <RCCEx_PLL2_Config>
 8005270:	4603      	mov	r3, r0
 8005272:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005276:	e014      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005278:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800527c:	3330      	adds	r3, #48	@ 0x30
 800527e:	4618      	mov	r0, r3
 8005280:	f002 f952 	bl	8007528 <RCCEx_PLL3_Config>
 8005284:	4603      	mov	r3, r0
 8005286:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800528a:	e00a      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005292:	e006      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005294:	bf00      	nop
 8005296:	e004      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005298:	bf00      	nop
 800529a:	e002      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 800529c:	bf00      	nop
 800529e:	e000      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80052a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052a2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10d      	bne.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80052aa:	4b47      	ldr	r3, [pc, #284]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80052ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052b0:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 80052b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052b8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80052bc:	4942      	ldr	r1, [pc, #264]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80052c4:	e003      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80052ca:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80052ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d6:	2100      	movs	r1, #0
 80052d8:	61b9      	str	r1, [r7, #24]
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	61fb      	str	r3, [r7, #28]
 80052e0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80052e4:	460b      	mov	r3, r1
 80052e6:	4313      	orrs	r3, r2
 80052e8:	d03c      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 80052ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80052f2:	2b03      	cmp	r3, #3
 80052f4:	d81b      	bhi.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x11de>
 80052f6:	a201      	add	r2, pc, #4	@ (adr r2, 80052fc <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 80052f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fc:	08005337 	.word	0x08005337
 8005300:	0800530d 	.word	0x0800530d
 8005304:	0800531b 	.word	0x0800531b
 8005308:	08005337 	.word	0x08005337
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800530c:	4b2e      	ldr	r3, [pc, #184]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800530e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005310:	4a2d      	ldr	r2, [pc, #180]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005312:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005316:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005318:	e00e      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800531a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800531e:	3308      	adds	r3, #8
 8005320:	4618      	mov	r0, r3
 8005322:	f002 f869 	bl	80073f8 <RCCEx_PLL2_Config>
 8005326:	4603      	mov	r3, r0
 8005328:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 800532c:	e004      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005334:	e000      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 8005336:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005338:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10d      	bne.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005340:	4b21      	ldr	r3, [pc, #132]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005342:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005346:	f023 0203 	bic.w	r2, r3, #3
 800534a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800534e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005352:	491d      	ldr	r1, [pc, #116]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005354:	4313      	orrs	r3, r2
 8005356:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800535a:	e003      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800535c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005360:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005364:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536c:	2100      	movs	r1, #0
 800536e:	6139      	str	r1, [r7, #16]
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	617b      	str	r3, [r7, #20]
 8005376:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800537a:	460b      	mov	r3, r1
 800537c:	4313      	orrs	r3, r2
 800537e:	d03c      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005380:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005384:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005388:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800538c:	d00e      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x125c>
 800538e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005392:	d815      	bhi.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 8005394:	2b00      	cmp	r3, #0
 8005396:	d019      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x127c>
 8005398:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800539c:	d110      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800539e:	4b0a      	ldr	r3, [pc, #40]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80053a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a2:	4a09      	ldr	r2, [pc, #36]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80053a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053a8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80053aa:	e010      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80053ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053b0:	3308      	adds	r3, #8
 80053b2:	4618      	mov	r0, r3
 80053b4:	f002 f820 	bl	80073f8 <RCCEx_PLL2_Config>
 80053b8:	4603      	mov	r3, r0
 80053ba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80053be:	e006      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80053c6:	e002      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x127e>
 80053c8:	44020c00 	.word	0x44020c00
        break;
 80053cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053ce:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10d      	bne.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80053d6:	4b3d      	ldr	r3, [pc, #244]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80053d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80053dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053e8:	4938      	ldr	r1, [pc, #224]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80053f0:	e003      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80053f6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80053fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005402:	2100      	movs	r1, #0
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	f003 0310 	and.w	r3, r3, #16
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005410:	460b      	mov	r3, r1
 8005412:	4313      	orrs	r3, r2
 8005414:	d038      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8005416:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800541a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800541e:	2b30      	cmp	r3, #48	@ 0x30
 8005420:	d01b      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x130a>
 8005422:	2b30      	cmp	r3, #48	@ 0x30
 8005424:	d815      	bhi.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x1302>
 8005426:	2b10      	cmp	r3, #16
 8005428:	d002      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 800542a:	2b20      	cmp	r3, #32
 800542c:	d007      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 800542e:	e010      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005430:	4b26      	ldr	r3, [pc, #152]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005434:	4a25      	ldr	r2, [pc, #148]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005436:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800543a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800543c:	e00e      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800543e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005442:	3330      	adds	r3, #48	@ 0x30
 8005444:	4618      	mov	r0, r3
 8005446:	f002 f86f 	bl	8007528 <RCCEx_PLL3_Config>
 800544a:	4603      	mov	r3, r0
 800544c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8005450:	e004      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005458:	e000      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 800545a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800545c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10d      	bne.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005464:	4b19      	ldr	r3, [pc, #100]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005466:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800546a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800546e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005472:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005476:	4915      	ldr	r1, [pc, #84]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005478:	4313      	orrs	r3, r2
 800547a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800547e:	e003      	b.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005480:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005484:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005488:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800548c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005490:	2100      	movs	r1, #0
 8005492:	6039      	str	r1, [r7, #0]
 8005494:	f003 0308 	and.w	r3, r3, #8
 8005498:	607b      	str	r3, [r7, #4]
 800549a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800549e:	460b      	mov	r3, r1
 80054a0:	4313      	orrs	r3, r2
 80054a2:	d00c      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80054a4:	4b09      	ldr	r3, [pc, #36]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80054a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80054aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80054ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054b2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80054b6:	4905      	ldr	r1, [pc, #20]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 80054be:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	37e8      	adds	r7, #232	@ 0xe8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054cc:	44020c00 	.word	0x44020c00

080054d0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b08b      	sub	sp, #44	@ 0x2c
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80054d8:	4bae      	ldr	r3, [pc, #696]	@ (8005794 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80054da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054e0:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80054e2:	4bac      	ldr	r3, [pc, #688]	@ (8005794 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80054e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e6:	f003 0303 	and.w	r3, r3, #3
 80054ea:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80054ec:	4ba9      	ldr	r3, [pc, #676]	@ (8005794 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80054ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f0:	0a1b      	lsrs	r3, r3, #8
 80054f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054f6:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80054f8:	4ba6      	ldr	r3, [pc, #664]	@ (8005794 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80054fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054fc:	091b      	lsrs	r3, r3, #4
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005504:	4ba3      	ldr	r3, [pc, #652]	@ (8005794 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005508:	08db      	lsrs	r3, r3, #3
 800550a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	fb02 f303 	mul.w	r3, r2, r3
 8005514:	ee07 3a90 	vmov	s15, r3
 8005518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800551c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	2b00      	cmp	r3, #0
 8005524:	f000 8126 	beq.w	8005774 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	2b03      	cmp	r3, #3
 800552c:	d053      	beq.n	80055d6 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	2b03      	cmp	r3, #3
 8005532:	d86f      	bhi.n	8005614 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d003      	beq.n	8005542 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	2b02      	cmp	r3, #2
 800553e:	d02b      	beq.n	8005598 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005540:	e068      	b.n	8005614 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005542:	4b94      	ldr	r3, [pc, #592]	@ (8005794 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	08db      	lsrs	r3, r3, #3
 8005548:	f003 0303 	and.w	r3, r3, #3
 800554c:	4a92      	ldr	r2, [pc, #584]	@ (8005798 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800554e:	fa22 f303 	lsr.w	r3, r2, r3
 8005552:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	ee07 3a90 	vmov	s15, r3
 800555a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	ee07 3a90 	vmov	s15, r3
 8005564:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005568:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	ee07 3a90 	vmov	s15, r3
 8005572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005576:	ed97 6a04 	vldr	s12, [r7, #16]
 800557a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 800579c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800557e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005586:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800558a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800558e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005592:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005596:	e068      	b.n	800566a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	ee07 3a90 	vmov	s15, r3
 800559e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055a2:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80057a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80055a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055aa:	6a3b      	ldr	r3, [r7, #32]
 80055ac:	ee07 3a90 	vmov	s15, r3
 80055b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055b4:	ed97 6a04 	vldr	s12, [r7, #16]
 80055b8:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800579c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80055bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055d0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80055d4:	e049      	b.n	800566a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	ee07 3a90 	vmov	s15, r3
 80055dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055e0:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80057a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 80055e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055e8:	6a3b      	ldr	r3, [r7, #32]
 80055ea:	ee07 3a90 	vmov	s15, r3
 80055ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055f2:	ed97 6a04 	vldr	s12, [r7, #16]
 80055f6:	eddf 5a69 	vldr	s11, [pc, #420]	@ 800579c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80055fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005602:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800560a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800560e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005612:	e02a      	b.n	800566a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005614:	4b5f      	ldr	r3, [pc, #380]	@ (8005794 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	08db      	lsrs	r3, r3, #3
 800561a:	f003 0303 	and.w	r3, r3, #3
 800561e:	4a5e      	ldr	r2, [pc, #376]	@ (8005798 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8005620:	fa22 f303 	lsr.w	r3, r2, r3
 8005624:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	ee07 3a90 	vmov	s15, r3
 800562c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	ee07 3a90 	vmov	s15, r3
 8005636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800563a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	ee07 3a90 	vmov	s15, r3
 8005644:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005648:	ed97 6a04 	vldr	s12, [r7, #16]
 800564c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800579c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005650:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005654:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005658:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800565c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005664:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005668:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800566a:	4b4a      	ldr	r3, [pc, #296]	@ (8005794 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005672:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005676:	d121      	bne.n	80056bc <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005678:	4b46      	ldr	r3, [pc, #280]	@ (8005794 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800567a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800567c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d017      	beq.n	80056b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005684:	4b43      	ldr	r3, [pc, #268]	@ (8005794 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005688:	0a5b      	lsrs	r3, r3, #9
 800568a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800568e:	ee07 3a90 	vmov	s15, r3
 8005692:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8005696:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800569a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800569e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80056a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056aa:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	e006      	b.n	80056c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	601a      	str	r2, [r3, #0]
 80056ba:	e002      	b.n	80056c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80056c2:	4b34      	ldr	r3, [pc, #208]	@ (8005794 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80056ce:	d121      	bne.n	8005714 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80056d0:	4b30      	ldr	r3, [pc, #192]	@ (8005794 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80056d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d017      	beq.n	800570c <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80056dc:	4b2d      	ldr	r3, [pc, #180]	@ (8005794 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80056de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056e0:	0c1b      	lsrs	r3, r3, #16
 80056e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056e6:	ee07 3a90 	vmov	s15, r3
 80056ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80056ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80056f2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80056f6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80056fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005702:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	605a      	str	r2, [r3, #4]
 800570a:	e006      	b.n	800571a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	605a      	str	r2, [r3, #4]
 8005712:	e002      	b.n	800571a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800571a:	4b1e      	ldr	r3, [pc, #120]	@ (8005794 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005722:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005726:	d121      	bne.n	800576c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005728:	4b1a      	ldr	r3, [pc, #104]	@ (8005794 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800572a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d017      	beq.n	8005764 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005734:	4b17      	ldr	r3, [pc, #92]	@ (8005794 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005738:	0e1b      	lsrs	r3, r3, #24
 800573a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800573e:	ee07 3a90 	vmov	s15, r3
 8005742:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8005746:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800574a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800574e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800575a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005762:	e010      	b.n	8005786 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	609a      	str	r2, [r3, #8]
}
 800576a:	e00c      	b.n	8005786 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	609a      	str	r2, [r3, #8]
}
 8005772:	e008      	b.n	8005786 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	609a      	str	r2, [r3, #8]
}
 8005786:	bf00      	nop
 8005788:	372c      	adds	r7, #44	@ 0x2c
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	44020c00 	.word	0x44020c00
 8005798:	03d09000 	.word	0x03d09000
 800579c:	46000000 	.word	0x46000000
 80057a0:	4a742400 	.word	0x4a742400
 80057a4:	4bbebc20 	.word	0x4bbebc20

080057a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b08b      	sub	sp, #44	@ 0x2c
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80057b0:	4bae      	ldr	r3, [pc, #696]	@ (8005a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80057b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057b8:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80057ba:	4bac      	ldr	r3, [pc, #688]	@ (8005a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80057bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057be:	f003 0303 	and.w	r3, r3, #3
 80057c2:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80057c4:	4ba9      	ldr	r3, [pc, #676]	@ (8005a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80057c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c8:	0a1b      	lsrs	r3, r3, #8
 80057ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057ce:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80057d0:	4ba6      	ldr	r3, [pc, #664]	@ (8005a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80057d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d4:	091b      	lsrs	r3, r3, #4
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80057dc:	4ba3      	ldr	r3, [pc, #652]	@ (8005a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80057de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e0:	08db      	lsrs	r3, r3, #3
 80057e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	fb02 f303 	mul.w	r3, r2, r3
 80057ec:	ee07 3a90 	vmov	s15, r3
 80057f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057f4:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f000 8126 	beq.w	8005a4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	2b03      	cmp	r3, #3
 8005804:	d053      	beq.n	80058ae <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	2b03      	cmp	r3, #3
 800580a:	d86f      	bhi.n	80058ec <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d003      	beq.n	800581a <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	2b02      	cmp	r3, #2
 8005816:	d02b      	beq.n	8005870 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8005818:	e068      	b.n	80058ec <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800581a:	4b94      	ldr	r3, [pc, #592]	@ (8005a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	08db      	lsrs	r3, r3, #3
 8005820:	f003 0303 	and.w	r3, r3, #3
 8005824:	4a92      	ldr	r2, [pc, #584]	@ (8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8005826:	fa22 f303 	lsr.w	r3, r2, r3
 800582a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	ee07 3a90 	vmov	s15, r3
 8005832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	ee07 3a90 	vmov	s15, r3
 800583c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005840:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005844:	6a3b      	ldr	r3, [r7, #32]
 8005846:	ee07 3a90 	vmov	s15, r3
 800584a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800584e:	ed97 6a04 	vldr	s12, [r7, #16]
 8005852:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8005a74 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800585a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800585e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800586a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800586e:	e068      	b.n	8005942 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	ee07 3a90 	vmov	s15, r3
 8005876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800587a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8005a78 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800587e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005882:	6a3b      	ldr	r3, [r7, #32]
 8005884:	ee07 3a90 	vmov	s15, r3
 8005888:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800588c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005890:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005a74 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005894:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005898:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800589c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058a8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80058ac:	e049      	b.n	8005942 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	ee07 3a90 	vmov	s15, r3
 80058b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058b8:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005a7c <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 80058bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058c0:	6a3b      	ldr	r3, [r7, #32]
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ca:	ed97 6a04 	vldr	s12, [r7, #16]
 80058ce:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8005a74 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80058d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80058ea:	e02a      	b.n	8005942 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80058ec:	4b5f      	ldr	r3, [pc, #380]	@ (8005a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	08db      	lsrs	r3, r3, #3
 80058f2:	f003 0303 	and.w	r3, r3, #3
 80058f6:	4a5e      	ldr	r2, [pc, #376]	@ (8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80058f8:	fa22 f303 	lsr.w	r3, r2, r3
 80058fc:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	ee07 3a90 	vmov	s15, r3
 8005904:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	ee07 3a90 	vmov	s15, r3
 800590e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005916:	6a3b      	ldr	r3, [r7, #32]
 8005918:	ee07 3a90 	vmov	s15, r3
 800591c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005920:	ed97 6a04 	vldr	s12, [r7, #16]
 8005924:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005a74 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005928:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800592c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005930:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005934:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800593c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005940:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005942:	4b4a      	ldr	r3, [pc, #296]	@ (8005a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800594a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800594e:	d121      	bne.n	8005994 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005950:	4b46      	ldr	r3, [pc, #280]	@ (8005a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005954:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d017      	beq.n	800598c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800595c:	4b43      	ldr	r3, [pc, #268]	@ (8005a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800595e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005960:	0a5b      	lsrs	r3, r3, #9
 8005962:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005966:	ee07 3a90 	vmov	s15, r3
 800596a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800596e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005972:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005976:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800597a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800597e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005982:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	601a      	str	r2, [r3, #0]
 800598a:	e006      	b.n	800599a <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	e002      	b.n	800599a <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800599a:	4b34      	ldr	r3, [pc, #208]	@ (8005a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059a6:	d121      	bne.n	80059ec <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80059a8:	4b30      	ldr	r3, [pc, #192]	@ (8005a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80059aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d017      	beq.n	80059e4 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80059b4:	4b2d      	ldr	r3, [pc, #180]	@ (8005a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80059b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059b8:	0c1b      	lsrs	r3, r3, #16
 80059ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059be:	ee07 3a90 	vmov	s15, r3
 80059c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80059c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80059ca:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80059ce:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80059d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059da:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	605a      	str	r2, [r3, #4]
 80059e2:	e006      	b.n	80059f2 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	605a      	str	r2, [r3, #4]
 80059ea:	e002      	b.n	80059f2 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80059f2:	4b1e      	ldr	r3, [pc, #120]	@ (8005a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059fe:	d121      	bne.n	8005a44 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005a00:	4b1a      	ldr	r3, [pc, #104]	@ (8005a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d017      	beq.n	8005a3c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005a0c:	4b17      	ldr	r3, [pc, #92]	@ (8005a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a10:	0e1b      	lsrs	r3, r3, #24
 8005a12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a16:	ee07 3a90 	vmov	s15, r3
 8005a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8005a1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a22:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005a26:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005a2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a32:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005a3a:	e010      	b.n	8005a5e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	609a      	str	r2, [r3, #8]
}
 8005a42:	e00c      	b.n	8005a5e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	609a      	str	r2, [r3, #8]
}
 8005a4a:	e008      	b.n	8005a5e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	609a      	str	r2, [r3, #8]
}
 8005a5e:	bf00      	nop
 8005a60:	372c      	adds	r7, #44	@ 0x2c
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	44020c00 	.word	0x44020c00
 8005a70:	03d09000 	.word	0x03d09000
 8005a74:	46000000 	.word	0x46000000
 8005a78:	4a742400 	.word	0x4a742400
 8005a7c:	4bbebc20 	.word	0x4bbebc20

08005a80 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b08b      	sub	sp, #44	@ 0x2c
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005a88:	4bae      	ldr	r3, [pc, #696]	@ (8005d44 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a90:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005a92:	4bac      	ldr	r3, [pc, #688]	@ (8005d44 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a96:	f003 0303 	and.w	r3, r3, #3
 8005a9a:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8005a9c:	4ba9      	ldr	r3, [pc, #676]	@ (8005d44 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa0:	0a1b      	lsrs	r3, r3, #8
 8005aa2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005aa6:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005aa8:	4ba6      	ldr	r3, [pc, #664]	@ (8005d44 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aac:	091b      	lsrs	r3, r3, #4
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005ab4:	4ba3      	ldr	r3, [pc, #652]	@ (8005d44 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005ab6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ab8:	08db      	lsrs	r3, r3, #3
 8005aba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	fb02 f303 	mul.w	r3, r2, r3
 8005ac4:	ee07 3a90 	vmov	s15, r3
 8005ac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005acc:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f000 8126 	beq.w	8005d24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	d053      	beq.n	8005b86 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	2b03      	cmp	r3, #3
 8005ae2:	d86f      	bhi.n	8005bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d003      	beq.n	8005af2 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d02b      	beq.n	8005b48 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005af0:	e068      	b.n	8005bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005af2:	4b94      	ldr	r3, [pc, #592]	@ (8005d44 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	08db      	lsrs	r3, r3, #3
 8005af8:	f003 0303 	and.w	r3, r3, #3
 8005afc:	4a92      	ldr	r2, [pc, #584]	@ (8005d48 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8005afe:	fa22 f303 	lsr.w	r3, r2, r3
 8005b02:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	ee07 3a90 	vmov	s15, r3
 8005b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	ee07 3a90 	vmov	s15, r3
 8005b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b1c:	6a3b      	ldr	r3, [r7, #32]
 8005b1e:	ee07 3a90 	vmov	s15, r3
 8005b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b26:	ed97 6a04 	vldr	s12, [r7, #16]
 8005b2a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8005d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8005b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b42:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005b46:	e068      	b.n	8005c1a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	ee07 3a90 	vmov	s15, r3
 8005b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b52:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8005d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8005b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	ee07 3a90 	vmov	s15, r3
 8005b60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b64:	ed97 6a04 	vldr	s12, [r7, #16]
 8005b68:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8005b6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b80:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005b84:	e049      	b.n	8005c1a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	ee07 3a90 	vmov	s15, r3
 8005b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b90:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005d54 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8005b94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	ee07 3a90 	vmov	s15, r3
 8005b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ba2:	ed97 6a04 	vldr	s12, [r7, #16]
 8005ba6:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8005d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8005baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bbe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005bc2:	e02a      	b.n	8005c1a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005bc4:	4b5f      	ldr	r3, [pc, #380]	@ (8005d44 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	08db      	lsrs	r3, r3, #3
 8005bca:	f003 0303 	and.w	r3, r3, #3
 8005bce:	4a5e      	ldr	r2, [pc, #376]	@ (8005d48 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8005bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8005bd4:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	ee07 3a90 	vmov	s15, r3
 8005bdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	ee07 3a90 	vmov	s15, r3
 8005be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	ee07 3a90 	vmov	s15, r3
 8005bf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bf8:	ed97 6a04 	vldr	s12, [r7, #16]
 8005bfc:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8005c00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c14:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005c18:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c1a:	4b4a      	ldr	r3, [pc, #296]	@ (8005d44 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c26:	d121      	bne.n	8005c6c <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005c28:	4b46      	ldr	r3, [pc, #280]	@ (8005d44 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d017      	beq.n	8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005c34:	4b43      	ldr	r3, [pc, #268]	@ (8005d44 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c38:	0a5b      	lsrs	r3, r3, #9
 8005c3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c3e:	ee07 3a90 	vmov	s15, r3
 8005c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8005c46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c4a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005c4e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c5a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	601a      	str	r2, [r3, #0]
 8005c62:	e006      	b.n	8005c72 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	601a      	str	r2, [r3, #0]
 8005c6a:	e002      	b.n	8005c72 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c72:	4b34      	ldr	r3, [pc, #208]	@ (8005d44 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c7e:	d121      	bne.n	8005cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005c80:	4b30      	ldr	r3, [pc, #192]	@ (8005d44 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d017      	beq.n	8005cbc <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005c8c:	4b2d      	ldr	r3, [pc, #180]	@ (8005d44 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c90:	0c1b      	lsrs	r3, r3, #16
 8005c92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c96:	ee07 3a90 	vmov	s15, r3
 8005c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005c9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ca2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005ca6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005caa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cb2:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	605a      	str	r2, [r3, #4]
 8005cba:	e006      	b.n	8005cca <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	605a      	str	r2, [r3, #4]
 8005cc2:	e002      	b.n	8005cca <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005cca:	4b1e      	ldr	r3, [pc, #120]	@ (8005d44 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005cd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cd6:	d121      	bne.n	8005d1c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8005d44 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cdc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d017      	beq.n	8005d14 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005ce4:	4b17      	ldr	r3, [pc, #92]	@ (8005d44 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ce8:	0e1b      	lsrs	r3, r3, #24
 8005cea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cee:	ee07 3a90 	vmov	s15, r3
 8005cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8005cf6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005cfa:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005cfe:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005d02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d0a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8005d12:	e010      	b.n	8005d36 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	609a      	str	r2, [r3, #8]
}
 8005d1a:	e00c      	b.n	8005d36 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	609a      	str	r2, [r3, #8]
}
 8005d22:	e008      	b.n	8005d36 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	609a      	str	r2, [r3, #8]
}
 8005d36:	bf00      	nop
 8005d38:	372c      	adds	r7, #44	@ 0x2c
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	44020c00 	.word	0x44020c00
 8005d48:	03d09000 	.word	0x03d09000
 8005d4c:	46000000 	.word	0x46000000
 8005d50:	4a742400 	.word	0x4a742400
 8005d54:	4bbebc20 	.word	0x4bbebc20

08005d58 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005d58:	b590      	push	{r4, r7, lr}
 8005d5a:	b08f      	sub	sp, #60	@ 0x3c
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005d62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d66:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8005d6a:	4321      	orrs	r1, r4
 8005d6c:	d150      	bne.n	8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005d6e:	4b26      	ldr	r3, [pc, #152]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d78:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005d7a:	4b23      	ldr	r3, [pc, #140]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d80:	f003 0302 	and.w	r3, r3, #2
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d108      	bne.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d8e:	d104      	bne.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005d90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d94:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d96:	f001 bb20 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005da0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005da4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005da8:	d108      	bne.n	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8005daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005db0:	d104      	bne.n	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8005db2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005db6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005db8:	f001 bb0f 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8005dbc:	4b12      	ldr	r3, [pc, #72]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005dc8:	d119      	bne.n	8005dfe <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8005dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dcc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005dd0:	d115      	bne.n	8005dfe <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8005dda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dde:	d30a      	bcc.n	8005df6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8005de0:	4b09      	ldr	r3, [pc, #36]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	0a1b      	lsrs	r3, r3, #8
 8005de6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005dea:	4a08      	ldr	r2, [pc, #32]	@ (8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005df2:	f001 baf2 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 8005df6:	2300      	movs	r3, #0
 8005df8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005dfa:	f001 baee 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e02:	f001 baea 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005e06:	bf00      	nop
 8005e08:	44020c00 	.word	0x44020c00
 8005e0c:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8005e10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e14:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 8005e18:	ea50 0104 	orrs.w	r1, r0, r4
 8005e1c:	f000 8615 	beq.w	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 8005e20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e24:	2801      	cmp	r0, #1
 8005e26:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 8005e2a:	f081 82d3 	bcs.w	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005e2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e32:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8005e36:	ea50 0104 	orrs.w	r1, r0, r4
 8005e3a:	f000 84d8 	beq.w	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8005e3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e42:	2801      	cmp	r0, #1
 8005e44:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8005e48:	f081 82c4 	bcs.w	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005e4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e50:	f1a1 0410 	sub.w	r4, r1, #16
 8005e54:	ea50 0104 	orrs.w	r1, r0, r4
 8005e58:	f001 8288 	beq.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 8005e5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e60:	2801      	cmp	r0, #1
 8005e62:	f171 0110 	sbcs.w	r1, r1, #16
 8005e66:	f081 82b5 	bcs.w	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005e6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e6e:	f1a1 0408 	sub.w	r4, r1, #8
 8005e72:	ea50 0104 	orrs.w	r1, r0, r4
 8005e76:	f001 81fe 	beq.w	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 8005e7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e7e:	2801      	cmp	r0, #1
 8005e80:	f171 0108 	sbcs.w	r1, r1, #8
 8005e84:	f081 82a6 	bcs.w	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005e88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e8c:	1f0c      	subs	r4, r1, #4
 8005e8e:	ea50 0104 	orrs.w	r1, r0, r4
 8005e92:	f000 8753 	beq.w	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 8005e96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e9a:	2801      	cmp	r0, #1
 8005e9c:	f171 0104 	sbcs.w	r1, r1, #4
 8005ea0:	f081 8298 	bcs.w	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005ea4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ea8:	1e8c      	subs	r4, r1, #2
 8005eaa:	ea50 0104 	orrs.w	r1, r0, r4
 8005eae:	f001 8173 	beq.w	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 8005eb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005eb6:	2801      	cmp	r0, #1
 8005eb8:	f171 0102 	sbcs.w	r1, r1, #2
 8005ebc:	f081 828a 	bcs.w	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005ec0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ec4:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8005ec8:	4321      	orrs	r1, r4
 8005eca:	f001 80fe 	beq.w	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8005ece:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ed2:	4ccb      	ldr	r4, [pc, #812]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8005ed4:	42a0      	cmp	r0, r4
 8005ed6:	f171 0100 	sbcs.w	r1, r1, #0
 8005eda:	f081 827b 	bcs.w	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005ede:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ee2:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8005ee6:	4321      	orrs	r1, r4
 8005ee8:	f001 8076 	beq.w	8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 8005eec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ef0:	4cc4      	ldr	r4, [pc, #784]	@ (8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8005ef2:	42a0      	cmp	r0, r4
 8005ef4:	f171 0100 	sbcs.w	r1, r1, #0
 8005ef8:	f081 826c 	bcs.w	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005efc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f00:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8005f04:	4321      	orrs	r1, r4
 8005f06:	f000 87b5 	beq.w	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 8005f0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f0e:	4cbe      	ldr	r4, [pc, #760]	@ (8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 8005f10:	42a0      	cmp	r0, r4
 8005f12:	f171 0100 	sbcs.w	r1, r1, #0
 8005f16:	f081 825d 	bcs.w	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005f1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f1e:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8005f22:	4321      	orrs	r1, r4
 8005f24:	f000 8738 	beq.w	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8005f28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f2c:	4cb7      	ldr	r4, [pc, #732]	@ (800620c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 8005f2e:	42a0      	cmp	r0, r4
 8005f30:	f171 0100 	sbcs.w	r1, r1, #0
 8005f34:	f081 824e 	bcs.w	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005f38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f3c:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8005f40:	4321      	orrs	r1, r4
 8005f42:	f001 81cd 	beq.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 8005f46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f4a:	4cb1      	ldr	r4, [pc, #708]	@ (8006210 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 8005f4c:	42a0      	cmp	r0, r4
 8005f4e:	f171 0100 	sbcs.w	r1, r1, #0
 8005f52:	f081 823f 	bcs.w	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005f56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f5a:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8005f5e:	4321      	orrs	r1, r4
 8005f60:	f000 80d9 	beq.w	8006116 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005f64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f68:	4caa      	ldr	r4, [pc, #680]	@ (8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 8005f6a:	42a0      	cmp	r0, r4
 8005f6c:	f171 0100 	sbcs.w	r1, r1, #0
 8005f70:	f081 8230 	bcs.w	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005f74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f78:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8005f7c:	4321      	orrs	r1, r4
 8005f7e:	f000 83da 	beq.w	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8005f82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f86:	4ca4      	ldr	r4, [pc, #656]	@ (8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 8005f88:	42a0      	cmp	r0, r4
 8005f8a:	f171 0100 	sbcs.w	r1, r1, #0
 8005f8e:	f081 8221 	bcs.w	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005f92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f96:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8005f9a:	4321      	orrs	r1, r4
 8005f9c:	f000 8627 	beq.w	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 8005fa0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fa4:	4c9d      	ldr	r4, [pc, #628]	@ (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 8005fa6:	42a0      	cmp	r0, r4
 8005fa8:	f171 0100 	sbcs.w	r1, r1, #0
 8005fac:	f081 8212 	bcs.w	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005fb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fb4:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8005fb8:	4321      	orrs	r1, r4
 8005fba:	f000 857a 	beq.w	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8005fbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fc2:	4c97      	ldr	r4, [pc, #604]	@ (8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 8005fc4:	42a0      	cmp	r0, r4
 8005fc6:	f171 0100 	sbcs.w	r1, r1, #0
 8005fca:	f081 8203 	bcs.w	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005fce:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fd2:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8005fd6:	4321      	orrs	r1, r4
 8005fd8:	f000 84fb 	beq.w	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8005fdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fe0:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8005fe4:	f171 0100 	sbcs.w	r1, r1, #0
 8005fe8:	f081 81f4 	bcs.w	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005fec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ff0:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8005ff4:	4321      	orrs	r1, r4
 8005ff6:	f000 84a9 	beq.w	800694c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8005ffa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ffe:	f248 0401 	movw	r4, #32769	@ 0x8001
 8006002:	42a0      	cmp	r0, r4
 8006004:	f171 0100 	sbcs.w	r1, r1, #0
 8006008:	f081 81e4 	bcs.w	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800600c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006010:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8006014:	4321      	orrs	r1, r4
 8006016:	f000 8456 	beq.w	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 800601a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800601e:	f244 0401 	movw	r4, #16385	@ 0x4001
 8006022:	42a0      	cmp	r0, r4
 8006024:	f171 0100 	sbcs.w	r1, r1, #0
 8006028:	f081 81d4 	bcs.w	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800602c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006030:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8006034:	4321      	orrs	r1, r4
 8006036:	f000 8403 	beq.w	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800603a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800603e:	f242 0401 	movw	r4, #8193	@ 0x2001
 8006042:	42a0      	cmp	r0, r4
 8006044:	f171 0100 	sbcs.w	r1, r1, #0
 8006048:	f081 81c4 	bcs.w	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800604c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006050:	2821      	cmp	r0, #33	@ 0x21
 8006052:	f171 0100 	sbcs.w	r1, r1, #0
 8006056:	d255      	bcs.n	8006104 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8006058:	e9d7 0100 	ldrd	r0, r1, [r7]
 800605c:	4301      	orrs	r1, r0
 800605e:	f001 81b9 	beq.w	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006062:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006066:	1e42      	subs	r2, r0, #1
 8006068:	f141 33ff 	adc.w	r3, r1, #4294967295
 800606c:	2a20      	cmp	r2, #32
 800606e:	f173 0100 	sbcs.w	r1, r3, #0
 8006072:	f081 81af 	bcs.w	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006076:	2a1f      	cmp	r2, #31
 8006078:	f201 81ac 	bhi.w	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800607c:	a101      	add	r1, pc, #4	@ (adr r1, 8006084 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 800607e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006082:	bf00      	nop
 8006084:	0800615b 	.word	0x0800615b
 8006088:	08006259 	.word	0x08006259
 800608c:	080073d5 	.word	0x080073d5
 8006090:	08006319 	.word	0x08006319
 8006094:	080073d5 	.word	0x080073d5
 8006098:	080073d5 	.word	0x080073d5
 800609c:	080073d5 	.word	0x080073d5
 80060a0:	080063e9 	.word	0x080063e9
 80060a4:	080073d5 	.word	0x080073d5
 80060a8:	080073d5 	.word	0x080073d5
 80060ac:	080073d5 	.word	0x080073d5
 80060b0:	080073d5 	.word	0x080073d5
 80060b4:	080073d5 	.word	0x080073d5
 80060b8:	080073d5 	.word	0x080073d5
 80060bc:	080073d5 	.word	0x080073d5
 80060c0:	080064cd 	.word	0x080064cd
 80060c4:	080073d5 	.word	0x080073d5
 80060c8:	080073d5 	.word	0x080073d5
 80060cc:	080073d5 	.word	0x080073d5
 80060d0:	080073d5 	.word	0x080073d5
 80060d4:	080073d5 	.word	0x080073d5
 80060d8:	080073d5 	.word	0x080073d5
 80060dc:	080073d5 	.word	0x080073d5
 80060e0:	080073d5 	.word	0x080073d5
 80060e4:	080073d5 	.word	0x080073d5
 80060e8:	080073d5 	.word	0x080073d5
 80060ec:	080073d5 	.word	0x080073d5
 80060f0:	080073d5 	.word	0x080073d5
 80060f4:	080073d5 	.word	0x080073d5
 80060f8:	080073d5 	.word	0x080073d5
 80060fc:	080073d5 	.word	0x080073d5
 8006100:	080065a3 	.word	0x080065a3
 8006104:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006108:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800610c:	430b      	orrs	r3, r1
 800610e:	f000 82b3 	beq.w	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 8006112:	f001 b95f 	b.w	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8006116:	4b43      	ldr	r3, [pc, #268]	@ (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006118:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800611c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006120:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8006122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006124:	2b00      	cmp	r3, #0
 8006126:	d108      	bne.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006128:	f107 0320 	add.w	r3, r7, #32
 800612c:	4618      	mov	r0, r3
 800612e:	f7ff f9cf 	bl	80054d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006134:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006136:	f001 b950 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800613a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613c:	2b40      	cmp	r3, #64	@ 0x40
 800613e:	d108      	bne.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006140:	f107 0314 	add.w	r3, r7, #20
 8006144:	4618      	mov	r0, r3
 8006146:	f7ff fb2f 	bl	80057a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800614e:	f001 b944 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8006152:	2300      	movs	r3, #0
 8006154:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006156:	f001 b940 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800615a:	4b32      	ldr	r3, [pc, #200]	@ (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800615c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006160:	f003 0307 	and.w	r3, r3, #7
 8006164:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006168:	2b00      	cmp	r3, #0
 800616a:	d104      	bne.n	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800616c:	f7fd ffc4 	bl	80040f8 <HAL_RCC_GetPCLK2Freq>
 8006170:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006172:	f001 b932 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8006176:	4b2b      	ldr	r3, [pc, #172]	@ (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800617e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006182:	d10a      	bne.n	800619a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8006184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006186:	2b01      	cmp	r3, #1
 8006188:	d107      	bne.n	800619a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800618a:	f107 0314 	add.w	r3, r7, #20
 800618e:	4618      	mov	r0, r3
 8006190:	f7ff fb0a 	bl	80057a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	637b      	str	r3, [r7, #52]	@ 0x34
 8006198:	e05c      	b.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800619a:	4b22      	ldr	r3, [pc, #136]	@ (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061a6:	d10a      	bne.n	80061be <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80061a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d107      	bne.n	80061be <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061ae:	f107 0308 	add.w	r3, r7, #8
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7ff fc64 	bl	8005a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80061bc:	e04a      	b.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80061be:	4b19      	ldr	r3, [pc, #100]	@ (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0302 	and.w	r3, r3, #2
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d10c      	bne.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 80061ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061cc:	2b03      	cmp	r3, #3
 80061ce:	d109      	bne.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80061d0:	4b14      	ldr	r3, [pc, #80]	@ (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	08db      	lsrs	r3, r3, #3
 80061d6:	f003 0303 	and.w	r3, r3, #3
 80061da:	4a13      	ldr	r2, [pc, #76]	@ (8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 80061dc:	fa22 f303 	lsr.w	r3, r2, r3
 80061e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80061e2:	e037      	b.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80061e4:	4b0f      	ldr	r3, [pc, #60]	@ (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061f0:	d11e      	bne.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 80061f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f4:	2b04      	cmp	r3, #4
 80061f6:	d11b      	bne.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 80061f8:	4b0c      	ldr	r3, [pc, #48]	@ (800622c <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 80061fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80061fc:	e02a      	b.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 80061fe:	bf00      	nop
 8006200:	40000001 	.word	0x40000001
 8006204:	20000001 	.word	0x20000001
 8006208:	10000001 	.word	0x10000001
 800620c:	08000001 	.word	0x08000001
 8006210:	04000001 	.word	0x04000001
 8006214:	00400001 	.word	0x00400001
 8006218:	00200001 	.word	0x00200001
 800621c:	00040001 	.word	0x00040001
 8006220:	00020001 	.word	0x00020001
 8006224:	44020c00 	.word	0x44020c00
 8006228:	03d09000 	.word	0x03d09000
 800622c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006230:	4ba3      	ldr	r3, [pc, #652]	@ (80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006232:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006236:	f003 0302 	and.w	r3, r3, #2
 800623a:	2b02      	cmp	r3, #2
 800623c:	d106      	bne.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800623e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006240:	2b05      	cmp	r3, #5
 8006242:	d103      	bne.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 8006244:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006248:	637b      	str	r3, [r7, #52]	@ 0x34
 800624a:	e003      	b.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 800624c:	2300      	movs	r3, #0
 800624e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006250:	f001 b8c3 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006254:	f001 b8c1 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006258:	4b99      	ldr	r3, [pc, #612]	@ (80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800625a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800625e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006262:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006266:	2b00      	cmp	r3, #0
 8006268:	d104      	bne.n	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800626a:	f7fd ff2f 	bl	80040cc <HAL_RCC_GetPCLK1Freq>
 800626e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006270:	f001 b8b3 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8006274:	4b92      	ldr	r3, [pc, #584]	@ (80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800627c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006280:	d10a      	bne.n	8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 8006282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006284:	2b08      	cmp	r3, #8
 8006286:	d107      	bne.n	8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006288:	f107 0314 	add.w	r3, r7, #20
 800628c:	4618      	mov	r0, r3
 800628e:	f7ff fa8b 	bl	80057a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	637b      	str	r3, [r7, #52]	@ 0x34
 8006296:	e03d      	b.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8006298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629a:	2b10      	cmp	r3, #16
 800629c:	d108      	bne.n	80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800629e:	f107 0308 	add.w	r3, r7, #8
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7ff fbec 	bl	8005a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062ac:	f001 b895 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80062b0:	4b83      	ldr	r3, [pc, #524]	@ (80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0302 	and.w	r3, r3, #2
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d10c      	bne.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 80062bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062be:	2b18      	cmp	r3, #24
 80062c0:	d109      	bne.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80062c2:	4b7f      	ldr	r3, [pc, #508]	@ (80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	08db      	lsrs	r3, r3, #3
 80062c8:	f003 0303 	and.w	r3, r3, #3
 80062cc:	4a7d      	ldr	r2, [pc, #500]	@ (80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80062ce:	fa22 f303 	lsr.w	r3, r2, r3
 80062d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80062d4:	e01e      	b.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80062d6:	4b7a      	ldr	r3, [pc, #488]	@ (80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062e2:	d105      	bne.n	80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 80062e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e6:	2b20      	cmp	r3, #32
 80062e8:	d102      	bne.n	80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 80062ea:	4b77      	ldr	r3, [pc, #476]	@ (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80062ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80062ee:	e011      	b.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80062f0:	4b73      	ldr	r3, [pc, #460]	@ (80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80062f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062f6:	f003 0302 	and.w	r3, r3, #2
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d106      	bne.n	800630c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 80062fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006300:	2b28      	cmp	r3, #40	@ 0x28
 8006302:	d103      	bne.n	800630c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 8006304:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006308:	637b      	str	r3, [r7, #52]	@ 0x34
 800630a:	e003      	b.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 800630c:	2300      	movs	r3, #0
 800630e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006310:	f001 b863 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006314:	f001 b861 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006318:	4b69      	ldr	r3, [pc, #420]	@ (80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800631a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800631e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006322:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006326:	2b00      	cmp	r3, #0
 8006328:	d104      	bne.n	8006334 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800632a:	f7fd fecf 	bl	80040cc <HAL_RCC_GetPCLK1Freq>
 800632e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006330:	f001 b853 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8006334:	4b62      	ldr	r3, [pc, #392]	@ (80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800633c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006340:	d10a      	bne.n	8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8006342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006344:	2b40      	cmp	r3, #64	@ 0x40
 8006346:	d107      	bne.n	8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006348:	f107 0314 	add.w	r3, r7, #20
 800634c:	4618      	mov	r0, r3
 800634e:	f7ff fa2b 	bl	80057a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	637b      	str	r3, [r7, #52]	@ 0x34
 8006356:	e045      	b.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8006358:	4b59      	ldr	r3, [pc, #356]	@ (80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006360:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006364:	d10a      	bne.n	800637c <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8006366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006368:	2b80      	cmp	r3, #128	@ 0x80
 800636a:	d107      	bne.n	800637c <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800636c:	f107 0308 	add.w	r3, r7, #8
 8006370:	4618      	mov	r0, r3
 8006372:	f7ff fb85 	bl	8005a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	637b      	str	r3, [r7, #52]	@ 0x34
 800637a:	e033      	b.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800637c:	4b50      	ldr	r3, [pc, #320]	@ (80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0302 	and.w	r3, r3, #2
 8006384:	2b02      	cmp	r3, #2
 8006386:	d10c      	bne.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8006388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800638a:	2bc0      	cmp	r3, #192	@ 0xc0
 800638c:	d109      	bne.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800638e:	4b4c      	ldr	r3, [pc, #304]	@ (80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	08db      	lsrs	r3, r3, #3
 8006394:	f003 0303 	and.w	r3, r3, #3
 8006398:	4a4a      	ldr	r2, [pc, #296]	@ (80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 800639a:	fa22 f303 	lsr.w	r3, r2, r3
 800639e:	637b      	str	r3, [r7, #52]	@ 0x34
 80063a0:	e020      	b.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80063a2:	4b47      	ldr	r3, [pc, #284]	@ (80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063ae:	d106      	bne.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 80063b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063b6:	d102      	bne.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 80063b8:	4b43      	ldr	r3, [pc, #268]	@ (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80063ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80063bc:	e012      	b.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80063be:	4b40      	ldr	r3, [pc, #256]	@ (80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80063c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d107      	bne.n	80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80063cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ce:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80063d2:	d103      	bne.n	80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 80063d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80063da:	e003      	b.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 80063dc:	2300      	movs	r3, #0
 80063de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80063e0:	f000 bffb 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80063e4:	f000 bff9 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80063e8:	4b35      	ldr	r3, [pc, #212]	@ (80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80063ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80063ee:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80063f2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80063f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d104      	bne.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80063fa:	f7fd fe67 	bl	80040cc <HAL_RCC_GetPCLK1Freq>
 80063fe:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006400:	f000 bfeb 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8006404:	4b2e      	ldr	r3, [pc, #184]	@ (80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800640c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006410:	d10b      	bne.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 8006412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006414:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006418:	d107      	bne.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800641a:	f107 0314 	add.w	r3, r7, #20
 800641e:	4618      	mov	r0, r3
 8006420:	f7ff f9c2 	bl	80057a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	637b      	str	r3, [r7, #52]	@ 0x34
 8006428:	e047      	b.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800642a:	4b25      	ldr	r3, [pc, #148]	@ (80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006432:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006436:	d10b      	bne.n	8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800643e:	d107      	bne.n	8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006440:	f107 0308 	add.w	r3, r7, #8
 8006444:	4618      	mov	r0, r3
 8006446:	f7ff fb1b 	bl	8005a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	637b      	str	r3, [r7, #52]	@ 0x34
 800644e:	e034      	b.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006450:	4b1b      	ldr	r3, [pc, #108]	@ (80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0302 	and.w	r3, r3, #2
 8006458:	2b02      	cmp	r3, #2
 800645a:	d10d      	bne.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800645c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800645e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006462:	d109      	bne.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006464:	4b16      	ldr	r3, [pc, #88]	@ (80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	08db      	lsrs	r3, r3, #3
 800646a:	f003 0303 	and.w	r3, r3, #3
 800646e:	4a15      	ldr	r2, [pc, #84]	@ (80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8006470:	fa22 f303 	lsr.w	r3, r2, r3
 8006474:	637b      	str	r3, [r7, #52]	@ 0x34
 8006476:	e020      	b.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8006478:	4b11      	ldr	r3, [pc, #68]	@ (80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006480:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006484:	d106      	bne.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8006486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006488:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800648c:	d102      	bne.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 800648e:	4b0e      	ldr	r3, [pc, #56]	@ (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8006490:	637b      	str	r3, [r7, #52]	@ 0x34
 8006492:	e012      	b.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006494:	4b0a      	ldr	r3, [pc, #40]	@ (80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006496:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800649a:	f003 0302 	and.w	r3, r3, #2
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d107      	bne.n	80064b2 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 80064a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80064a8:	d103      	bne.n	80064b2 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 80064aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80064b0:	e003      	b.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 80064b2:	2300      	movs	r3, #0
 80064b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80064b6:	f000 bf90 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80064ba:	f000 bf8e 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80064be:	bf00      	nop
 80064c0:	44020c00 	.word	0x44020c00
 80064c4:	03d09000 	.word	0x03d09000
 80064c8:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80064cc:	4ba5      	ldr	r3, [pc, #660]	@ (8006764 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80064ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80064d2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80064d6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80064d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d104      	bne.n	80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80064de:	f7fd fdf5 	bl	80040cc <HAL_RCC_GetPCLK1Freq>
 80064e2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 80064e4:	f000 bf79 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80064e8:	4b9e      	ldr	r3, [pc, #632]	@ (8006764 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064f4:	d10b      	bne.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 80064f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064fc:	d107      	bne.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064fe:	f107 0314 	add.w	r3, r7, #20
 8006502:	4618      	mov	r0, r3
 8006504:	f7ff f950 	bl	80057a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	637b      	str	r3, [r7, #52]	@ 0x34
 800650c:	e047      	b.n	800659e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800650e:	4b95      	ldr	r3, [pc, #596]	@ (8006764 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006516:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800651a:	d10b      	bne.n	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 800651c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800651e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006522:	d107      	bne.n	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006524:	f107 0308 	add.w	r3, r7, #8
 8006528:	4618      	mov	r0, r3
 800652a:	f7ff faa9 	bl	8005a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	637b      	str	r3, [r7, #52]	@ 0x34
 8006532:	e034      	b.n	800659e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006534:	4b8b      	ldr	r3, [pc, #556]	@ (8006764 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0302 	and.w	r3, r3, #2
 800653c:	2b02      	cmp	r3, #2
 800653e:	d10d      	bne.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 8006540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006542:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006546:	d109      	bne.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006548:	4b86      	ldr	r3, [pc, #536]	@ (8006764 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	08db      	lsrs	r3, r3, #3
 800654e:	f003 0303 	and.w	r3, r3, #3
 8006552:	4a85      	ldr	r2, [pc, #532]	@ (8006768 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8006554:	fa22 f303 	lsr.w	r3, r2, r3
 8006558:	637b      	str	r3, [r7, #52]	@ 0x34
 800655a:	e020      	b.n	800659e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800655c:	4b81      	ldr	r3, [pc, #516]	@ (8006764 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006564:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006568:	d106      	bne.n	8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800656a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800656c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006570:	d102      	bne.n	8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 8006572:	4b7e      	ldr	r3, [pc, #504]	@ (800676c <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8006574:	637b      	str	r3, [r7, #52]	@ 0x34
 8006576:	e012      	b.n	800659e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006578:	4b7a      	ldr	r3, [pc, #488]	@ (8006764 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800657a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800657e:	f003 0302 	and.w	r3, r3, #2
 8006582:	2b02      	cmp	r3, #2
 8006584:	d107      	bne.n	8006596 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 8006586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006588:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800658c:	d103      	bne.n	8006596 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 800658e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006592:	637b      	str	r3, [r7, #52]	@ 0x34
 8006594:	e003      	b.n	800659e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 8006596:	2300      	movs	r3, #0
 8006598:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800659a:	f000 bf1e 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800659e:	f000 bf1c 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 80065a2:	4b70      	ldr	r3, [pc, #448]	@ (8006764 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80065a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80065a8:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 80065ac:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 80065ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d104      	bne.n	80065be <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80065b4:	f7fd fd8a 	bl	80040cc <HAL_RCC_GetPCLK1Freq>
 80065b8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 80065ba:	f000 bf0e 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 80065be:	4b69      	ldr	r3, [pc, #420]	@ (8006764 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065ca:	d10b      	bne.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 80065cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065d2:	d107      	bne.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065d4:	f107 0314 	add.w	r3, r7, #20
 80065d8:	4618      	mov	r0, r3
 80065da:	f7ff f8e5 	bl	80057a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80065e2:	e047      	b.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80065e4:	4b5f      	ldr	r3, [pc, #380]	@ (8006764 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065f0:	d10b      	bne.n	800660a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80065f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065f8:	d107      	bne.n	800660a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065fa:	f107 0308 	add.w	r3, r7, #8
 80065fe:	4618      	mov	r0, r3
 8006600:	f7ff fa3e 	bl	8005a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	637b      	str	r3, [r7, #52]	@ 0x34
 8006608:	e034      	b.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800660a:	4b56      	ldr	r3, [pc, #344]	@ (8006764 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0302 	and.w	r3, r3, #2
 8006612:	2b02      	cmp	r3, #2
 8006614:	d10d      	bne.n	8006632 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8006616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006618:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800661c:	d109      	bne.n	8006632 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800661e:	4b51      	ldr	r3, [pc, #324]	@ (8006764 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	08db      	lsrs	r3, r3, #3
 8006624:	f003 0303 	and.w	r3, r3, #3
 8006628:	4a4f      	ldr	r2, [pc, #316]	@ (8006768 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 800662a:	fa22 f303 	lsr.w	r3, r2, r3
 800662e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006630:	e020      	b.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8006632:	4b4c      	ldr	r3, [pc, #304]	@ (8006764 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800663a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800663e:	d106      	bne.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 8006640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006642:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006646:	d102      	bne.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 8006648:	4b48      	ldr	r3, [pc, #288]	@ (800676c <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 800664a:	637b      	str	r3, [r7, #52]	@ 0x34
 800664c:	e012      	b.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800664e:	4b45      	ldr	r3, [pc, #276]	@ (8006764 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006650:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006654:	f003 0302 	and.w	r3, r3, #2
 8006658:	2b02      	cmp	r3, #2
 800665a:	d107      	bne.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800665c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800665e:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006662:	d103      	bne.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8006664:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006668:	637b      	str	r3, [r7, #52]	@ 0x34
 800666a:	e003      	b.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 800666c:	2300      	movs	r3, #0
 800666e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006670:	f000 beb3 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006674:	f000 beb1 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006678:	4b3a      	ldr	r3, [pc, #232]	@ (8006764 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800667a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800667e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006682:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006686:	2b00      	cmp	r3, #0
 8006688:	d104      	bne.n	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800668a:	f7fd fd4b 	bl	8004124 <HAL_RCC_GetPCLK3Freq>
 800668e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006690:	f000 bea3 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8006694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006696:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800669a:	d108      	bne.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800669c:	f107 0314 	add.w	r3, r7, #20
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7ff f881 	bl	80057a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066aa:	f000 be96 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 80066ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80066b4:	d108      	bne.n	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066b6:	f107 0308 	add.w	r3, r7, #8
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7ff f9e0 	bl	8005a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066c4:	f000 be89 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80066c8:	4b26      	ldr	r3, [pc, #152]	@ (8006764 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0302 	and.w	r3, r3, #2
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d10d      	bne.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 80066d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80066da:	d109      	bne.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80066dc:	4b21      	ldr	r3, [pc, #132]	@ (8006764 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	08db      	lsrs	r3, r3, #3
 80066e2:	f003 0303 	and.w	r3, r3, #3
 80066e6:	4a20      	ldr	r2, [pc, #128]	@ (8006768 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 80066e8:	fa22 f303 	lsr.w	r3, r2, r3
 80066ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80066ee:	e020      	b.n	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80066f0:	4b1c      	ldr	r3, [pc, #112]	@ (8006764 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066fc:	d106      	bne.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 80066fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006700:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006704:	d102      	bne.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 8006706:	4b19      	ldr	r3, [pc, #100]	@ (800676c <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8006708:	637b      	str	r3, [r7, #52]	@ 0x34
 800670a:	e012      	b.n	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800670c:	4b15      	ldr	r3, [pc, #84]	@ (8006764 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800670e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006712:	f003 0302 	and.w	r3, r3, #2
 8006716:	2b02      	cmp	r3, #2
 8006718:	d107      	bne.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 800671a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006720:	d103      	bne.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 8006722:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006726:	637b      	str	r3, [r7, #52]	@ 0x34
 8006728:	e003      	b.n	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 800672a:	2300      	movs	r3, #0
 800672c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800672e:	f000 be54 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006732:	f000 be52 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006736:	4b0b      	ldr	r3, [pc, #44]	@ (8006764 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006738:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800673c:	f003 0307 	and.w	r3, r3, #7
 8006740:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006744:	2b00      	cmp	r3, #0
 8006746:	d104      	bne.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8006748:	f7fd fca4 	bl	8004094 <HAL_RCC_GetHCLKFreq>
 800674c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800674e:	f000 be44 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006754:	2b01      	cmp	r3, #1
 8006756:	d10b      	bne.n	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 8006758:	f7fd fb70 	bl	8003e3c <HAL_RCC_GetSysClockFreq>
 800675c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800675e:	f000 be3c 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006762:	bf00      	nop
 8006764:	44020c00 	.word	0x44020c00
 8006768:	03d09000 	.word	0x03d09000
 800676c:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8006770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006772:	2b02      	cmp	r3, #2
 8006774:	d108      	bne.n	8006788 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006776:	f107 0314 	add.w	r3, r7, #20
 800677a:	4618      	mov	r0, r3
 800677c:	f7ff f814 	bl	80057a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006784:	f000 be29 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006788:	4b9f      	ldr	r3, [pc, #636]	@ (8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006790:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006794:	d105      	bne.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8006796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006798:	2b03      	cmp	r3, #3
 800679a:	d102      	bne.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 800679c:	4b9b      	ldr	r3, [pc, #620]	@ (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 800679e:	637b      	str	r3, [r7, #52]	@ 0x34
 80067a0:	e023      	b.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80067a2:	4b99      	ldr	r3, [pc, #612]	@ (8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d10c      	bne.n	80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80067ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b0:	2b04      	cmp	r3, #4
 80067b2:	d109      	bne.n	80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80067b4:	4b94      	ldr	r3, [pc, #592]	@ (8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	08db      	lsrs	r3, r3, #3
 80067ba:	f003 0303 	and.w	r3, r3, #3
 80067be:	4a94      	ldr	r2, [pc, #592]	@ (8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80067c0:	fa22 f303 	lsr.w	r3, r2, r3
 80067c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80067c6:	e010      	b.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 80067c8:	4b8f      	ldr	r3, [pc, #572]	@ (8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067d4:	d105      	bne.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 80067d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d8:	2b05      	cmp	r3, #5
 80067da:	d102      	bne.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 80067dc:	4b8d      	ldr	r3, [pc, #564]	@ (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80067de:	637b      	str	r3, [r7, #52]	@ 0x34
 80067e0:	e003      	b.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 80067e2:	2300      	movs	r3, #0
 80067e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067e6:	f000 bdf8 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80067ea:	f000 bdf6 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80067ee:	4b86      	ldr	r3, [pc, #536]	@ (8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80067f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80067f4:	f003 0308 	and.w	r3, r3, #8
 80067f8:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80067fa:	4b83      	ldr	r3, [pc, #524]	@ (8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80067fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006800:	f003 0302 	and.w	r3, r3, #2
 8006804:	2b02      	cmp	r3, #2
 8006806:	d106      	bne.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8006808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800680a:	2b00      	cmp	r3, #0
 800680c:	d103      	bne.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 800680e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006812:	637b      	str	r3, [r7, #52]	@ 0x34
 8006814:	e012      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8006816:	4b7c      	ldr	r3, [pc, #496]	@ (8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006818:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800681c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006820:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006824:	d106      	bne.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 8006826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006828:	2b08      	cmp	r3, #8
 800682a:	d103      	bne.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 800682c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006830:	637b      	str	r3, [r7, #52]	@ 0x34
 8006832:	e003      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8006834:	2300      	movs	r3, #0
 8006836:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8006838:	f000 bdcf 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800683c:	f000 bdcd 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006840:	4b71      	ldr	r3, [pc, #452]	@ (8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006842:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006846:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800684a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800684c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684e:	2b00      	cmp	r3, #0
 8006850:	d104      	bne.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006852:	f7fd fc3b 	bl	80040cc <HAL_RCC_GetPCLK1Freq>
 8006856:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006858:	f000 bdbf 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800685c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006862:	d108      	bne.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006864:	f107 0308 	add.w	r3, r7, #8
 8006868:	4618      	mov	r0, r3
 800686a:	f7ff f909 	bl	8005a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006872:	f000 bdb2 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006876:	4b64      	ldr	r3, [pc, #400]	@ (8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	2b02      	cmp	r3, #2
 8006880:	d10d      	bne.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 8006882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006884:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006888:	d109      	bne.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800688a:	4b5f      	ldr	r3, [pc, #380]	@ (8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	08db      	lsrs	r3, r3, #3
 8006890:	f003 0303 	and.w	r3, r3, #3
 8006894:	4a5e      	ldr	r2, [pc, #376]	@ (8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8006896:	fa22 f303 	lsr.w	r3, r2, r3
 800689a:	637b      	str	r3, [r7, #52]	@ 0x34
 800689c:	e011      	b.n	80068c2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800689e:	4b5a      	ldr	r3, [pc, #360]	@ (8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068aa:	d106      	bne.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 80068ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80068b2:	d102      	bne.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 80068b4:	4b57      	ldr	r3, [pc, #348]	@ (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80068b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80068b8:	e003      	b.n	80068c2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 80068ba:	2300      	movs	r3, #0
 80068bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068be:	f000 bd8c 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80068c2:	f000 bd8a 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80068c6:	4b50      	ldr	r3, [pc, #320]	@ (8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80068c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80068cc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80068d0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80068d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d104      	bne.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80068d8:	f7fd fbf8 	bl	80040cc <HAL_RCC_GetPCLK1Freq>
 80068dc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80068de:	f000 bd7c 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 80068e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80068e8:	d108      	bne.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068ea:	f107 0308 	add.w	r3, r7, #8
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7ff f8c6 	bl	8005a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068f8:	f000 bd6f 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80068fc:	4b42      	ldr	r3, [pc, #264]	@ (8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0302 	and.w	r3, r3, #2
 8006904:	2b02      	cmp	r3, #2
 8006906:	d10d      	bne.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 8006908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800690e:	d109      	bne.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006910:	4b3d      	ldr	r3, [pc, #244]	@ (8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	08db      	lsrs	r3, r3, #3
 8006916:	f003 0303 	and.w	r3, r3, #3
 800691a:	4a3d      	ldr	r2, [pc, #244]	@ (8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 800691c:	fa22 f303 	lsr.w	r3, r2, r3
 8006920:	637b      	str	r3, [r7, #52]	@ 0x34
 8006922:	e011      	b.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8006924:	4b38      	ldr	r3, [pc, #224]	@ (8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800692c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006930:	d106      	bne.n	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 8006932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006934:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006938:	d102      	bne.n	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 800693a:	4b36      	ldr	r3, [pc, #216]	@ (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 800693c:	637b      	str	r3, [r7, #52]	@ 0x34
 800693e:	e003      	b.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 8006940:	2300      	movs	r3, #0
 8006942:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006944:	f000 bd49 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006948:	f000 bd47 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800694c:	4b2e      	ldr	r3, [pc, #184]	@ (8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800694e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006952:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006956:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8006958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695a:	2b00      	cmp	r3, #0
 800695c:	d104      	bne.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800695e:	f7fd fbe1 	bl	8004124 <HAL_RCC_GetPCLK3Freq>
 8006962:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006964:	f000 bd39 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8006968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800696a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800696e:	d108      	bne.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006970:	f107 0308 	add.w	r3, r7, #8
 8006974:	4618      	mov	r0, r3
 8006976:	f7ff f883 	bl	8005a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800697e:	f000 bd2c 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8006982:	4b21      	ldr	r3, [pc, #132]	@ (8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0302 	and.w	r3, r3, #2
 800698a:	2b02      	cmp	r3, #2
 800698c:	d10d      	bne.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 800698e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006990:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006994:	d109      	bne.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006996:	4b1c      	ldr	r3, [pc, #112]	@ (8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	08db      	lsrs	r3, r3, #3
 800699c:	f003 0303 	and.w	r3, r3, #3
 80069a0:	4a1b      	ldr	r2, [pc, #108]	@ (8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80069a2:	fa22 f303 	lsr.w	r3, r2, r3
 80069a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80069a8:	e011      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 80069aa:	4b17      	ldr	r3, [pc, #92]	@ (8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069b6:	d106      	bne.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 80069b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069be:	d102      	bne.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 80069c0:	4b14      	ldr	r3, [pc, #80]	@ (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80069c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80069c4:	e003      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 80069c6:	2300      	movs	r3, #0
 80069c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069ca:	f000 bd06 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80069ce:	f000 bd04 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80069d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80069d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80069d8:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80069dc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80069de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d104      	bne.n	80069ee <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80069e4:	f7fd fb72 	bl	80040cc <HAL_RCC_GetPCLK1Freq>
 80069e8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80069ea:	f000 bcf6 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 80069ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069f4:	d110      	bne.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069f6:	f107 0308 	add.w	r3, r7, #8
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7ff f840 	bl	8005a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a04:	f000 bce9 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006a08:	44020c00 	.word	0x44020c00
 8006a0c:	017d7840 	.word	0x017d7840
 8006a10:	03d09000 	.word	0x03d09000
 8006a14:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8006a18:	4ba4      	ldr	r3, [pc, #656]	@ (8006cac <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0302 	and.w	r3, r3, #2
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d10e      	bne.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 8006a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a2a:	d10a      	bne.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a2c:	4b9f      	ldr	r3, [pc, #636]	@ (8006cac <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	08db      	lsrs	r3, r3, #3
 8006a32:	f003 0303 	and.w	r3, r3, #3
 8006a36:	4a9e      	ldr	r2, [pc, #632]	@ (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8006a38:	fa22 f303 	lsr.w	r3, r2, r3
 8006a3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a3e:	f000 bccc 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8006a42:	2300      	movs	r3, #0
 8006a44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a46:	f000 bcc8 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8006a4a:	4b98      	ldr	r3, [pc, #608]	@ (8006cac <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006a4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a50:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006a54:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8006a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d104      	bne.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006a5c:	f7fd fb62 	bl	8004124 <HAL_RCC_GetPCLK3Freq>
 8006a60:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006a62:	f000 bcba 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 8006a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a6c:	d108      	bne.n	8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a6e:	f107 0308 	add.w	r3, r7, #8
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7ff f804 	bl	8005a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a7c:	f000 bcad 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8006a80:	4b8a      	ldr	r3, [pc, #552]	@ (8006cac <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0302 	and.w	r3, r3, #2
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d10e      	bne.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8006a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a92:	d10a      	bne.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a94:	4b85      	ldr	r3, [pc, #532]	@ (8006cac <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	08db      	lsrs	r3, r3, #3
 8006a9a:	f003 0303 	and.w	r3, r3, #3
 8006a9e:	4a84      	ldr	r2, [pc, #528]	@ (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8006aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8006aa4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006aa6:	f000 bc98 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006aae:	f000 bc94 	b.w	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006ab2:	4b7e      	ldr	r3, [pc, #504]	@ (8006cac <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006ab4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006ab8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006abc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006ac4:	d056      	beq.n	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006acc:	f200 808b 	bhi.w	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ad6:	d03e      	beq.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 8006ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ada:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ade:	f200 8082 	bhi.w	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ae8:	d027      	beq.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8006aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006af0:	d879      	bhi.n	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006af8:	d017      	beq.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 8006afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006afc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b00:	d871      	bhi.n	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d004      	beq.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8006b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b0e:	d004      	beq.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 8006b10:	e069      	b.n	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006b12:	f7fd fb07 	bl	8004124 <HAL_RCC_GetPCLK3Freq>
 8006b16:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006b18:	e068      	b.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b1a:	f107 0314 	add.w	r3, r7, #20
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f7fe fe42 	bl	80057a8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006b28:	e060      	b.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b2a:	f107 0308 	add.w	r3, r7, #8
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7fe ffa6 	bl	8005a80 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006b38:	e058      	b.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b3a:	4b5c      	ldr	r3, [pc, #368]	@ (8006cac <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006b3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b40:	f003 0302 	and.w	r3, r3, #2
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d103      	bne.n	8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 8006b48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b4c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006b4e:	e04d      	b.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8006b50:	2300      	movs	r3, #0
 8006b52:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006b54:	e04a      	b.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006b56:	4b55      	ldr	r3, [pc, #340]	@ (8006cac <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006b58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b64:	d103      	bne.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 8006b66:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006b6a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006b6c:	e03e      	b.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006b72:	e03b      	b.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b74:	4b4d      	ldr	r3, [pc, #308]	@ (8006cac <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006b76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b7a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b80:	4b4a      	ldr	r3, [pc, #296]	@ (8006cac <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d10c      	bne.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 8006b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d109      	bne.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b92:	4b46      	ldr	r3, [pc, #280]	@ (8006cac <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	08db      	lsrs	r3, r3, #3
 8006b98:	f003 0303 	and.w	r3, r3, #3
 8006b9c:	4a44      	ldr	r2, [pc, #272]	@ (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8006b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ba4:	e01e      	b.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ba6:	4b41      	ldr	r3, [pc, #260]	@ (8006cac <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bb2:	d106      	bne.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bba:	d102      	bne.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006bbc:	4b3d      	ldr	r3, [pc, #244]	@ (8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8006bbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bc0:	e010      	b.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006bc2:	4b3a      	ldr	r3, [pc, #232]	@ (8006cac <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bce:	d106      	bne.n	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 8006bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bd2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bd6:	d102      	bne.n	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006bd8:	4b37      	ldr	r3, [pc, #220]	@ (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 8006bda:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bdc:	e002      	b.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006bde:	2300      	movs	r3, #0
 8006be0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006be2:	e003      	b.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8006be4:	e002      	b.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 8006be6:	2300      	movs	r3, #0
 8006be8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006bea:	bf00      	nop
          }
        }
        break;
 8006bec:	e3f5      	b.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006bee:	4b2f      	ldr	r3, [pc, #188]	@ (8006cac <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006bf0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006bf4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006bf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006c00:	d05f      	beq.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 8006c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c04:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006c08:	f200 8094 	bhi.w	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c12:	d03f      	beq.n	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 8006c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c1a:	f200 808b 	bhi.w	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c20:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c24:	d028      	beq.n	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8006c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c28:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c2c:	f200 8082 	bhi.w	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c36:	d017      	beq.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 8006c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c3e:	d879      	bhi.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d004      	beq.n	8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8006c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c4c:	d004      	beq.n	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 8006c4e:	e071      	b.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8006c50:	f7fd fa3c 	bl	80040cc <HAL_RCC_GetPCLK1Freq>
 8006c54:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006c56:	e070      	b.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c58:	f107 0314 	add.w	r3, r7, #20
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fe fda3 	bl	80057a8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006c66:	e068      	b.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c68:	f107 0308 	add.w	r3, r7, #8
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7fe ff07 	bl	8005a80 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006c76:	e060      	b.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006c78:	4b0c      	ldr	r3, [pc, #48]	@ (8006cac <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006c7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d103      	bne.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 8006c86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c8a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006c8c:	e055      	b.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006c92:	e052      	b.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006c94:	4b05      	ldr	r3, [pc, #20]	@ (8006cac <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006c96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ca2:	d10b      	bne.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 8006ca4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006ca8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006caa:	e046      	b.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8006cac:	44020c00 	.word	0x44020c00
 8006cb0:	03d09000 	.word	0x03d09000
 8006cb4:	003d0900 	.word	0x003d0900
 8006cb8:	017d7840 	.word	0x017d7840
              frequency = 0;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006cc0:	e03b      	b.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006cc2:	4bae      	ldr	r3, [pc, #696]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006cc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006cc8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006cce:	4bab      	ldr	r3, [pc, #684]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0302 	and.w	r3, r3, #2
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d10c      	bne.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 8006cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d109      	bne.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ce0:	4ba6      	ldr	r3, [pc, #664]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	08db      	lsrs	r3, r3, #3
 8006ce6:	f003 0303 	and.w	r3, r3, #3
 8006cea:	4aa5      	ldr	r2, [pc, #660]	@ (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8006cec:	fa22 f303 	lsr.w	r3, r2, r3
 8006cf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cf2:	e01e      	b.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006cf4:	4ba1      	ldr	r3, [pc, #644]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d00:	d106      	bne.n	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 8006d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d08:	d102      	bne.n	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006d0a:	4b9e      	ldr	r3, [pc, #632]	@ (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8006d0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d0e:	e010      	b.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d10:	4b9a      	ldr	r3, [pc, #616]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d1c:	d106      	bne.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 8006d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d24:	d102      	bne.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006d26:	4b98      	ldr	r3, [pc, #608]	@ (8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8006d28:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d2a:	e002      	b.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006d30:	e003      	b.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8006d32:	e002      	b.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 8006d34:	2300      	movs	r3, #0
 8006d36:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006d38:	bf00      	nop
          }
        }
        break;
 8006d3a:	e34e      	b.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006d3c:	4b8f      	ldr	r3, [pc, #572]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006d3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d46:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8006d48:	4b8c      	ldr	r3, [pc, #560]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d54:	d105      	bne.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 8006d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d102      	bne.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 8006d5c:	4b8a      	ldr	r3, [pc, #552]	@ (8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8006d5e:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8006d60:	e33b      	b.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8006d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d68:	d107      	bne.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d6a:	f107 0320 	add.w	r3, r7, #32
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7fe fbae 	bl	80054d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d78:	e32f      	b.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8006d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d80:	d107      	bne.n	8006d92 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d82:	f107 0314 	add.w	r3, r7, #20
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7fe fd0e 	bl	80057a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d90:	e323      	b.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8006d92:	2300      	movs	r3, #0
 8006d94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d96:	e320      	b.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006d98:	4b78      	ldr	r3, [pc, #480]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d9e:	f003 0307 	and.w	r3, r3, #7
 8006da2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da6:	2b04      	cmp	r3, #4
 8006da8:	d860      	bhi.n	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 8006daa:	a201      	add	r2, pc, #4	@ (adr r2, 8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8006dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db0:	08006dc5 	.word	0x08006dc5
 8006db4:	08006dd5 	.word	0x08006dd5
 8006db8:	08006de5 	.word	0x08006de5
 8006dbc:	08006df5 	.word	0x08006df5
 8006dc0:	08006dfb 	.word	0x08006dfb
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006dc4:	f107 0320 	add.w	r3, r7, #32
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7fe fb81 	bl	80054d0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006dd2:	e04e      	b.n	8006e72 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dd4:	f107 0314 	add.w	r3, r7, #20
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7fe fce5 	bl	80057a8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006de2:	e046      	b.n	8006e72 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006de4:	f107 0308 	add.w	r3, r7, #8
 8006de8:	4618      	mov	r0, r3
 8006dea:	f7fe fe49 	bl	8005a80 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006df2:	e03e      	b.n	8006e72 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006df4:	4b65      	ldr	r3, [pc, #404]	@ (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8006df6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006df8:	e03b      	b.n	8006e72 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006dfa:	4b60      	ldr	r3, [pc, #384]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006dfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e00:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006e04:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e06:	4b5d      	ldr	r3, [pc, #372]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0302 	and.w	r3, r3, #2
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d10c      	bne.n	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 8006e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d109      	bne.n	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e18:	4b58      	ldr	r3, [pc, #352]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	08db      	lsrs	r3, r3, #3
 8006e1e:	f003 0303 	and.w	r3, r3, #3
 8006e22:	4a57      	ldr	r2, [pc, #348]	@ (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8006e24:	fa22 f303 	lsr.w	r3, r2, r3
 8006e28:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e2a:	e01e      	b.n	8006e6a <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e2c:	4b53      	ldr	r3, [pc, #332]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e38:	d106      	bne.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 8006e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e40:	d102      	bne.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006e42:	4b50      	ldr	r3, [pc, #320]	@ (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8006e44:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e46:	e010      	b.n	8006e6a <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e48:	4b4c      	ldr	r3, [pc, #304]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e54:	d106      	bne.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 8006e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e5c:	d102      	bne.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006e5e:	4b4a      	ldr	r3, [pc, #296]	@ (8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8006e60:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e62:	e002      	b.n	8006e6a <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006e64:	2300      	movs	r3, #0
 8006e66:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006e68:	e003      	b.n	8006e72 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8006e6a:	e002      	b.n	8006e72 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006e70:	bf00      	nop
          }
        }
        break;
 8006e72:	e2b2      	b.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006e74:	4b41      	ldr	r3, [pc, #260]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e82:	2b20      	cmp	r3, #32
 8006e84:	f200 80a4 	bhi.w	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 8006e88:	a201      	add	r2, pc, #4	@ (adr r2, 8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 8006e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e8e:	bf00      	nop
 8006e90:	08006f15 	.word	0x08006f15
 8006e94:	08006fd1 	.word	0x08006fd1
 8006e98:	08006fd1 	.word	0x08006fd1
 8006e9c:	08006fd1 	.word	0x08006fd1
 8006ea0:	08006fd1 	.word	0x08006fd1
 8006ea4:	08006fd1 	.word	0x08006fd1
 8006ea8:	08006fd1 	.word	0x08006fd1
 8006eac:	08006fd1 	.word	0x08006fd1
 8006eb0:	08006f25 	.word	0x08006f25
 8006eb4:	08006fd1 	.word	0x08006fd1
 8006eb8:	08006fd1 	.word	0x08006fd1
 8006ebc:	08006fd1 	.word	0x08006fd1
 8006ec0:	08006fd1 	.word	0x08006fd1
 8006ec4:	08006fd1 	.word	0x08006fd1
 8006ec8:	08006fd1 	.word	0x08006fd1
 8006ecc:	08006fd1 	.word	0x08006fd1
 8006ed0:	08006f35 	.word	0x08006f35
 8006ed4:	08006fd1 	.word	0x08006fd1
 8006ed8:	08006fd1 	.word	0x08006fd1
 8006edc:	08006fd1 	.word	0x08006fd1
 8006ee0:	08006fd1 	.word	0x08006fd1
 8006ee4:	08006fd1 	.word	0x08006fd1
 8006ee8:	08006fd1 	.word	0x08006fd1
 8006eec:	08006fd1 	.word	0x08006fd1
 8006ef0:	08006f45 	.word	0x08006f45
 8006ef4:	08006fd1 	.word	0x08006fd1
 8006ef8:	08006fd1 	.word	0x08006fd1
 8006efc:	08006fd1 	.word	0x08006fd1
 8006f00:	08006fd1 	.word	0x08006fd1
 8006f04:	08006fd1 	.word	0x08006fd1
 8006f08:	08006fd1 	.word	0x08006fd1
 8006f0c:	08006fd1 	.word	0x08006fd1
 8006f10:	08006f4b 	.word	0x08006f4b
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f14:	f107 0320 	add.w	r3, r7, #32
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7fe fad9 	bl	80054d0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f20:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f22:	e058      	b.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f24:	f107 0314 	add.w	r3, r7, #20
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7fe fc3d 	bl	80057a8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f32:	e050      	b.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f34:	f107 0308 	add.w	r3, r7, #8
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7fe fda1 	bl	8005a80 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f42:	e048      	b.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006f44:	4b11      	ldr	r3, [pc, #68]	@ (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8006f46:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f48:	e045      	b.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006f4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f50:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006f54:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f56:	4b09      	ldr	r3, [pc, #36]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0302 	and.w	r3, r3, #2
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d116      	bne.n	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 8006f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d113      	bne.n	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f68:	4b04      	ldr	r3, [pc, #16]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	08db      	lsrs	r3, r3, #3
 8006f6e:	f003 0303 	and.w	r3, r3, #3
 8006f72:	4a03      	ldr	r2, [pc, #12]	@ (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8006f74:	fa22 f303 	lsr.w	r3, r2, r3
 8006f78:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f7a:	e028      	b.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8006f7c:	44020c00 	.word	0x44020c00
 8006f80:	03d09000 	.word	0x03d09000
 8006f84:	003d0900 	.word	0x003d0900
 8006f88:	017d7840 	.word	0x017d7840
 8006f8c:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f90:	4b95      	ldr	r3, [pc, #596]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f9c:	d106      	bne.n	8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 8006f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fa4:	d102      	bne.n	8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006fa6:	4b91      	ldr	r3, [pc, #580]	@ (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8006fa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006faa:	e010      	b.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006fac:	4b8e      	ldr	r3, [pc, #568]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fb8:	d106      	bne.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 8006fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006fc0:	d102      	bne.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006fc2:	4b8b      	ldr	r3, [pc, #556]	@ (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8006fc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fc6:	e002      	b.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006fcc:	e003      	b.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8006fce:	e002      	b.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006fd4:	bf00      	nop
          }
        }
        break;
 8006fd6:	e200      	b.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006fd8:	4b83      	ldr	r3, [pc, #524]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006fde:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006fe2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fea:	d031      	beq.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8006fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ff2:	d866      	bhi.n	80070c2 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8006ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ff8:	d027      	beq.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 8006ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffc:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ffe:	d860      	bhi.n	80070c2 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8007000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007002:	2b80      	cmp	r3, #128	@ 0x80
 8007004:	d019      	beq.n	800703a <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 8007006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007008:	2b80      	cmp	r3, #128	@ 0x80
 800700a:	d85a      	bhi.n	80070c2 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 800700c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700e:	2b00      	cmp	r3, #0
 8007010:	d003      	beq.n	800701a <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 8007012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007014:	2b40      	cmp	r3, #64	@ 0x40
 8007016:	d008      	beq.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 8007018:	e053      	b.n	80070c2 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800701a:	f107 0320 	add.w	r3, r7, #32
 800701e:	4618      	mov	r0, r3
 8007020:	f7fe fa56 	bl	80054d0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007026:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007028:	e04e      	b.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800702a:	f107 0314 	add.w	r3, r7, #20
 800702e:	4618      	mov	r0, r3
 8007030:	f7fe fbba 	bl	80057a8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007038:	e046      	b.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800703a:	f107 0308 	add.w	r3, r7, #8
 800703e:	4618      	mov	r0, r3
 8007040:	f7fe fd1e 	bl	8005a80 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007048:	e03e      	b.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800704a:	4b6a      	ldr	r3, [pc, #424]	@ (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 800704c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800704e:	e03b      	b.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007050:	4b65      	ldr	r3, [pc, #404]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007052:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007056:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800705a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800705c:	4b62      	ldr	r3, [pc, #392]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0302 	and.w	r3, r3, #2
 8007064:	2b02      	cmp	r3, #2
 8007066:	d10c      	bne.n	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8007068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800706a:	2b00      	cmp	r3, #0
 800706c:	d109      	bne.n	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800706e:	4b5e      	ldr	r3, [pc, #376]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	08db      	lsrs	r3, r3, #3
 8007074:	f003 0303 	and.w	r3, r3, #3
 8007078:	4a5f      	ldr	r2, [pc, #380]	@ (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 800707a:	fa22 f303 	lsr.w	r3, r2, r3
 800707e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007080:	e01e      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007082:	4b59      	ldr	r3, [pc, #356]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800708a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800708e:	d106      	bne.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8007090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007096:	d102      	bne.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007098:	4b54      	ldr	r3, [pc, #336]	@ (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 800709a:	637b      	str	r3, [r7, #52]	@ 0x34
 800709c:	e010      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800709e:	4b52      	ldr	r3, [pc, #328]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070aa:	d106      	bne.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 80070ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070b2:	d102      	bne.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80070b4:	4b4e      	ldr	r3, [pc, #312]	@ (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80070b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80070b8:	e002      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80070ba:	2300      	movs	r3, #0
 80070bc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80070be:	e003      	b.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 80070c0:	e002      	b.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 80070c2:	2300      	movs	r3, #0
 80070c4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80070c6:	bf00      	nop
          }
        }
        break;
 80070c8:	e187      	b.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80070ca:	4b47      	ldr	r3, [pc, #284]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80070cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80070d0:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80070d4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80070d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d103      	bne.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80070dc:	f7fd f80c 	bl	80040f8 <HAL_RCC_GetPCLK2Freq>
 80070e0:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80070e2:	e17a      	b.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80070e4:	4b40      	ldr	r3, [pc, #256]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070f0:	d10b      	bne.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 80070f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070f8:	d107      	bne.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070fa:	f107 0314 	add.w	r3, r7, #20
 80070fe:	4618      	mov	r0, r3
 8007100:	f7fe fb52 	bl	80057a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	637b      	str	r3, [r7, #52]	@ 0x34
 8007108:	e045      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800710a:	4b37      	ldr	r3, [pc, #220]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007112:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007116:	d10b      	bne.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 8007118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800711e:	d107      	bne.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007120:	f107 0308 	add.w	r3, r7, #8
 8007124:	4618      	mov	r0, r3
 8007126:	f7fe fcab 	bl	8005a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	637b      	str	r3, [r7, #52]	@ 0x34
 800712e:	e032      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8007130:	4b2d      	ldr	r3, [pc, #180]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 0302 	and.w	r3, r3, #2
 8007138:	2b02      	cmp	r3, #2
 800713a:	d10d      	bne.n	8007158 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 800713c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007142:	d109      	bne.n	8007158 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007144:	4b28      	ldr	r3, [pc, #160]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	08db      	lsrs	r3, r3, #3
 800714a:	f003 0303 	and.w	r3, r3, #3
 800714e:	4a2a      	ldr	r2, [pc, #168]	@ (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8007150:	fa22 f303 	lsr.w	r3, r2, r3
 8007154:	637b      	str	r3, [r7, #52]	@ 0x34
 8007156:	e01e      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8007158:	4b23      	ldr	r3, [pc, #140]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007160:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007164:	d106      	bne.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 8007166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007168:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800716c:	d102      	bne.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 800716e:	4b1f      	ldr	r3, [pc, #124]	@ (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8007170:	637b      	str	r3, [r7, #52]	@ 0x34
 8007172:	e010      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8007174:	4b1c      	ldr	r3, [pc, #112]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800717c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007180:	d106      	bne.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 8007182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007184:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007188:	d102      	bne.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 800718a:	4b19      	ldr	r3, [pc, #100]	@ (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 800718c:	637b      	str	r3, [r7, #52]	@ 0x34
 800718e:	e002      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 8007190:	2300      	movs	r3, #0
 8007192:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007194:	e121      	b.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007196:	e120      	b.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007198:	4b13      	ldr	r3, [pc, #76]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800719a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800719e:	f003 0303 	and.w	r3, r3, #3
 80071a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80071a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a6:	2b03      	cmp	r3, #3
 80071a8:	d861      	bhi.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 80071aa:	a201      	add	r2, pc, #4	@ (adr r2, 80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 80071ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b0:	080071c1 	.word	0x080071c1
 80071b4:	080071c9 	.word	0x080071c9
 80071b8:	080071d9 	.word	0x080071d9
 80071bc:	080071fd 	.word	0x080071fd

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 80071c0:	f7fc ff68 	bl	8004094 <HAL_RCC_GetHCLKFreq>
 80071c4:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80071c6:	e055      	b.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071c8:	f107 0320 	add.w	r3, r7, #32
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7fe f97f 	bl	80054d0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80071d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80071d6:	e04d      	b.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071d8:	f107 0314 	add.w	r3, r7, #20
 80071dc:	4618      	mov	r0, r3
 80071de:	f7fe fae3 	bl	80057a8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80071e6:	e045      	b.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 80071e8:	44020c00 	.word	0x44020c00
 80071ec:	003d0900 	.word	0x003d0900
 80071f0:	017d7840 	.word	0x017d7840
 80071f4:	00bb8000 	.word	0x00bb8000
 80071f8:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80071fc:	4b79      	ldr	r3, [pc, #484]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80071fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007202:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007206:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007208:	4b76      	ldr	r3, [pc, #472]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0302 	and.w	r3, r3, #2
 8007210:	2b02      	cmp	r3, #2
 8007212:	d10c      	bne.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 8007214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007216:	2b00      	cmp	r3, #0
 8007218:	d109      	bne.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800721a:	4b72      	ldr	r3, [pc, #456]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	08db      	lsrs	r3, r3, #3
 8007220:	f003 0303 	and.w	r3, r3, #3
 8007224:	4a70      	ldr	r2, [pc, #448]	@ (80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 8007226:	fa22 f303 	lsr.w	r3, r2, r3
 800722a:	637b      	str	r3, [r7, #52]	@ 0x34
 800722c:	e01e      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800722e:	4b6d      	ldr	r3, [pc, #436]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007236:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800723a:	d106      	bne.n	800724a <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800723c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800723e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007242:	d102      	bne.n	800724a <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007244:	4b69      	ldr	r3, [pc, #420]	@ (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 8007246:	637b      	str	r3, [r7, #52]	@ 0x34
 8007248:	e010      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800724a:	4b66      	ldr	r3, [pc, #408]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007252:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007256:	d106      	bne.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8007258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800725a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800725e:	d102      	bne.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007260:	4b63      	ldr	r3, [pc, #396]	@ (80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 8007262:	637b      	str	r3, [r7, #52]	@ 0x34
 8007264:	e002      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007266:	2300      	movs	r3, #0
 8007268:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800726a:	e003      	b.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800726c:	e002      	b.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 800726e:	2300      	movs	r3, #0
 8007270:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007272:	bf00      	nop
          }
        }
        break;
 8007274:	e0b1      	b.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8007276:	4b5b      	ldr	r3, [pc, #364]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007278:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800727c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007280:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8007282:	4b58      	ldr	r3, [pc, #352]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007284:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007288:	f003 0302 	and.w	r3, r3, #2
 800728c:	2b02      	cmp	r3, #2
 800728e:	d106      	bne.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 8007290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007292:	2b00      	cmp	r3, #0
 8007294:	d103      	bne.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 8007296:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800729a:	637b      	str	r3, [r7, #52]	@ 0x34
 800729c:	e01f      	b.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800729e:	4b51      	ldr	r3, [pc, #324]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80072a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072ac:	d106      	bne.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 80072ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b0:	2b40      	cmp	r3, #64	@ 0x40
 80072b2:	d103      	bne.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 80072b4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80072b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80072ba:	e010      	b.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 80072bc:	4b49      	ldr	r3, [pc, #292]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072c8:	d106      	bne.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 80072ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072cc:	2b80      	cmp	r3, #128	@ 0x80
 80072ce:	d103      	bne.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 80072d0:	f248 0312 	movw	r3, #32786	@ 0x8012
 80072d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80072d6:	e002      	b.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 80072d8:	2300      	movs	r3, #0
 80072da:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80072dc:	e07d      	b.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80072de:	e07c      	b.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80072e0:	4b40      	ldr	r3, [pc, #256]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80072e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80072e6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80072ea:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80072ec:	4b3d      	ldr	r3, [pc, #244]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80072f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072f8:	d105      	bne.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 80072fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d102      	bne.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 8007300:	4b3c      	ldr	r3, [pc, #240]	@ (80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8007302:	637b      	str	r3, [r7, #52]	@ 0x34
 8007304:	e031      	b.n	800736a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8007306:	4b37      	ldr	r3, [pc, #220]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800730e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007312:	d10a      	bne.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 8007314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007316:	2b10      	cmp	r3, #16
 8007318:	d107      	bne.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800731a:	f107 0320 	add.w	r3, r7, #32
 800731e:	4618      	mov	r0, r3
 8007320:	f7fe f8d6 	bl	80054d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007326:	637b      	str	r3, [r7, #52]	@ 0x34
 8007328:	e01f      	b.n	800736a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800732a:	4b2e      	ldr	r3, [pc, #184]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800732c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007330:	f003 0302 	and.w	r3, r3, #2
 8007334:	2b02      	cmp	r3, #2
 8007336:	d106      	bne.n	8007346 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 8007338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800733a:	2b20      	cmp	r3, #32
 800733c:	d103      	bne.n	8007346 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 800733e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007342:	637b      	str	r3, [r7, #52]	@ 0x34
 8007344:	e011      	b.n	800736a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8007346:	4b27      	ldr	r3, [pc, #156]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007348:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800734c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007350:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007354:	d106      	bne.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 8007356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007358:	2b30      	cmp	r3, #48	@ 0x30
 800735a:	d103      	bne.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 800735c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007360:	637b      	str	r3, [r7, #52]	@ 0x34
 8007362:	e002      	b.n	800736a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8007364:	2300      	movs	r3, #0
 8007366:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8007368:	e037      	b.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800736a:	e036      	b.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800736c:	4b1d      	ldr	r3, [pc, #116]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800736e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007372:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007376:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8007378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800737a:	2b10      	cmp	r3, #16
 800737c:	d107      	bne.n	800738e <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800737e:	f107 0320 	add.w	r3, r7, #32
 8007382:	4618      	mov	r0, r3
 8007384:	f7fe f8a4 	bl	80054d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800738a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800738c:	e025      	b.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800738e:	4b15      	ldr	r3, [pc, #84]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007396:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800739a:	d10a      	bne.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 800739c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800739e:	2b20      	cmp	r3, #32
 80073a0:	d107      	bne.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073a2:	f107 0308 	add.w	r3, r7, #8
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7fe fb6a 	bl	8005a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80073b0:	e00f      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80073b2:	4b0c      	ldr	r3, [pc, #48]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80073ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073be:	d105      	bne.n	80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 80073c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c2:	2b30      	cmp	r3, #48	@ 0x30
 80073c4:	d102      	bne.n	80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 80073c6:	4b0b      	ldr	r3, [pc, #44]	@ (80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 80073c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80073ca:	e002      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 80073cc:	2300      	movs	r3, #0
 80073ce:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 80073d0:	e003      	b.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80073d2:	e002      	b.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 80073d4:	2300      	movs	r3, #0
 80073d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073d8:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 80073da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80073dc:	4618      	mov	r0, r3
 80073de:	373c      	adds	r7, #60	@ 0x3c
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd90      	pop	{r4, r7, pc}
 80073e4:	44020c00 	.word	0x44020c00
 80073e8:	03d09000 	.word	0x03d09000
 80073ec:	003d0900 	.word	0x003d0900
 80073f0:	017d7840 	.word	0x017d7840
 80073f4:	02dc6c00 	.word	0x02dc6c00

080073f8 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8007400:	4b48      	ldr	r3, [pc, #288]	@ (8007524 <RCCEx_PLL2_Config+0x12c>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a47      	ldr	r2, [pc, #284]	@ (8007524 <RCCEx_PLL2_Config+0x12c>)
 8007406:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800740a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800740c:	f7fa fae2 	bl	80019d4 <HAL_GetTick>
 8007410:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007412:	e008      	b.n	8007426 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007414:	f7fa fade 	bl	80019d4 <HAL_GetTick>
 8007418:	4602      	mov	r2, r0
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	2b02      	cmp	r3, #2
 8007420:	d901      	bls.n	8007426 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e07a      	b.n	800751c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007426:	4b3f      	ldr	r3, [pc, #252]	@ (8007524 <RCCEx_PLL2_Config+0x12c>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1f0      	bne.n	8007414 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007432:	4b3c      	ldr	r3, [pc, #240]	@ (8007524 <RCCEx_PLL2_Config+0x12c>)
 8007434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007436:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800743a:	f023 0303 	bic.w	r3, r3, #3
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	6811      	ldr	r1, [r2, #0]
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	6852      	ldr	r2, [r2, #4]
 8007446:	0212      	lsls	r2, r2, #8
 8007448:	430a      	orrs	r2, r1
 800744a:	4936      	ldr	r1, [pc, #216]	@ (8007524 <RCCEx_PLL2_Config+0x12c>)
 800744c:	4313      	orrs	r3, r2
 800744e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	3b01      	subs	r3, #1
 8007456:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	3b01      	subs	r3, #1
 8007460:	025b      	lsls	r3, r3, #9
 8007462:	b29b      	uxth	r3, r3
 8007464:	431a      	orrs	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	3b01      	subs	r3, #1
 800746c:	041b      	lsls	r3, r3, #16
 800746e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007472:	431a      	orrs	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	695b      	ldr	r3, [r3, #20]
 8007478:	3b01      	subs	r3, #1
 800747a:	061b      	lsls	r3, r3, #24
 800747c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007480:	4928      	ldr	r1, [pc, #160]	@ (8007524 <RCCEx_PLL2_Config+0x12c>)
 8007482:	4313      	orrs	r3, r2
 8007484:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007486:	4b27      	ldr	r3, [pc, #156]	@ (8007524 <RCCEx_PLL2_Config+0x12c>)
 8007488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800748a:	f023 020c 	bic.w	r2, r3, #12
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	699b      	ldr	r3, [r3, #24]
 8007492:	4924      	ldr	r1, [pc, #144]	@ (8007524 <RCCEx_PLL2_Config+0x12c>)
 8007494:	4313      	orrs	r3, r2
 8007496:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8007498:	4b22      	ldr	r3, [pc, #136]	@ (8007524 <RCCEx_PLL2_Config+0x12c>)
 800749a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800749c:	f023 0220 	bic.w	r2, r3, #32
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	69db      	ldr	r3, [r3, #28]
 80074a4:	491f      	ldr	r1, [pc, #124]	@ (8007524 <RCCEx_PLL2_Config+0x12c>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80074aa:	4b1e      	ldr	r3, [pc, #120]	@ (8007524 <RCCEx_PLL2_Config+0x12c>)
 80074ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b2:	491c      	ldr	r1, [pc, #112]	@ (8007524 <RCCEx_PLL2_Config+0x12c>)
 80074b4:	4313      	orrs	r3, r2
 80074b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80074b8:	4b1a      	ldr	r3, [pc, #104]	@ (8007524 <RCCEx_PLL2_Config+0x12c>)
 80074ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074bc:	4a19      	ldr	r2, [pc, #100]	@ (8007524 <RCCEx_PLL2_Config+0x12c>)
 80074be:	f023 0310 	bic.w	r3, r3, #16
 80074c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80074c4:	4b17      	ldr	r3, [pc, #92]	@ (8007524 <RCCEx_PLL2_Config+0x12c>)
 80074c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80074cc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	6a12      	ldr	r2, [r2, #32]
 80074d4:	00d2      	lsls	r2, r2, #3
 80074d6:	4913      	ldr	r1, [pc, #76]	@ (8007524 <RCCEx_PLL2_Config+0x12c>)
 80074d8:	4313      	orrs	r3, r2
 80074da:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80074dc:	4b11      	ldr	r3, [pc, #68]	@ (8007524 <RCCEx_PLL2_Config+0x12c>)
 80074de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e0:	4a10      	ldr	r2, [pc, #64]	@ (8007524 <RCCEx_PLL2_Config+0x12c>)
 80074e2:	f043 0310 	orr.w	r3, r3, #16
 80074e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80074e8:	4b0e      	ldr	r3, [pc, #56]	@ (8007524 <RCCEx_PLL2_Config+0x12c>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a0d      	ldr	r2, [pc, #52]	@ (8007524 <RCCEx_PLL2_Config+0x12c>)
 80074ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80074f2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80074f4:	f7fa fa6e 	bl	80019d4 <HAL_GetTick>
 80074f8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074fa:	e008      	b.n	800750e <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074fc:	f7fa fa6a 	bl	80019d4 <HAL_GetTick>
 8007500:	4602      	mov	r2, r0
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	2b02      	cmp	r3, #2
 8007508:	d901      	bls.n	800750e <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e006      	b.n	800751c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800750e:	4b05      	ldr	r3, [pc, #20]	@ (8007524 <RCCEx_PLL2_Config+0x12c>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007516:	2b00      	cmp	r3, #0
 8007518:	d0f0      	beq.n	80074fc <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800751a:	2300      	movs	r3, #0

}
 800751c:	4618      	mov	r0, r3
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	44020c00 	.word	0x44020c00

08007528 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8007530:	4b48      	ldr	r3, [pc, #288]	@ (8007654 <RCCEx_PLL3_Config+0x12c>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a47      	ldr	r2, [pc, #284]	@ (8007654 <RCCEx_PLL3_Config+0x12c>)
 8007536:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800753a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800753c:	f7fa fa4a 	bl	80019d4 <HAL_GetTick>
 8007540:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007542:	e008      	b.n	8007556 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007544:	f7fa fa46 	bl	80019d4 <HAL_GetTick>
 8007548:	4602      	mov	r2, r0
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	2b02      	cmp	r3, #2
 8007550:	d901      	bls.n	8007556 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e07a      	b.n	800764c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007556:	4b3f      	ldr	r3, [pc, #252]	@ (8007654 <RCCEx_PLL3_Config+0x12c>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1f0      	bne.n	8007544 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007562:	4b3c      	ldr	r3, [pc, #240]	@ (8007654 <RCCEx_PLL3_Config+0x12c>)
 8007564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007566:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800756a:	f023 0303 	bic.w	r3, r3, #3
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	6811      	ldr	r1, [r2, #0]
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	6852      	ldr	r2, [r2, #4]
 8007576:	0212      	lsls	r2, r2, #8
 8007578:	430a      	orrs	r2, r1
 800757a:	4936      	ldr	r1, [pc, #216]	@ (8007654 <RCCEx_PLL3_Config+0x12c>)
 800757c:	4313      	orrs	r3, r2
 800757e:	630b      	str	r3, [r1, #48]	@ 0x30
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	3b01      	subs	r3, #1
 8007586:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	3b01      	subs	r3, #1
 8007590:	025b      	lsls	r3, r3, #9
 8007592:	b29b      	uxth	r3, r3
 8007594:	431a      	orrs	r2, r3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	3b01      	subs	r3, #1
 800759c:	041b      	lsls	r3, r3, #16
 800759e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80075a2:	431a      	orrs	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	695b      	ldr	r3, [r3, #20]
 80075a8:	3b01      	subs	r3, #1
 80075aa:	061b      	lsls	r3, r3, #24
 80075ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80075b0:	4928      	ldr	r1, [pc, #160]	@ (8007654 <RCCEx_PLL3_Config+0x12c>)
 80075b2:	4313      	orrs	r3, r2
 80075b4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80075b6:	4b27      	ldr	r3, [pc, #156]	@ (8007654 <RCCEx_PLL3_Config+0x12c>)
 80075b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ba:	f023 020c 	bic.w	r2, r3, #12
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	699b      	ldr	r3, [r3, #24]
 80075c2:	4924      	ldr	r1, [pc, #144]	@ (8007654 <RCCEx_PLL3_Config+0x12c>)
 80075c4:	4313      	orrs	r3, r2
 80075c6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 80075c8:	4b22      	ldr	r3, [pc, #136]	@ (8007654 <RCCEx_PLL3_Config+0x12c>)
 80075ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075cc:	f023 0220 	bic.w	r2, r3, #32
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	69db      	ldr	r3, [r3, #28]
 80075d4:	491f      	ldr	r1, [pc, #124]	@ (8007654 <RCCEx_PLL3_Config+0x12c>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80075da:	4b1e      	ldr	r3, [pc, #120]	@ (8007654 <RCCEx_PLL3_Config+0x12c>)
 80075dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e2:	491c      	ldr	r1, [pc, #112]	@ (8007654 <RCCEx_PLL3_Config+0x12c>)
 80075e4:	4313      	orrs	r3, r2
 80075e6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 80075e8:	4b1a      	ldr	r3, [pc, #104]	@ (8007654 <RCCEx_PLL3_Config+0x12c>)
 80075ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ec:	4a19      	ldr	r2, [pc, #100]	@ (8007654 <RCCEx_PLL3_Config+0x12c>)
 80075ee:	f023 0310 	bic.w	r3, r3, #16
 80075f2:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 80075f4:	4b17      	ldr	r3, [pc, #92]	@ (8007654 <RCCEx_PLL3_Config+0x12c>)
 80075f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075f8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80075fc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	6a12      	ldr	r2, [r2, #32]
 8007604:	00d2      	lsls	r2, r2, #3
 8007606:	4913      	ldr	r1, [pc, #76]	@ (8007654 <RCCEx_PLL3_Config+0x12c>)
 8007608:	4313      	orrs	r3, r2
 800760a:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800760c:	4b11      	ldr	r3, [pc, #68]	@ (8007654 <RCCEx_PLL3_Config+0x12c>)
 800760e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007610:	4a10      	ldr	r2, [pc, #64]	@ (8007654 <RCCEx_PLL3_Config+0x12c>)
 8007612:	f043 0310 	orr.w	r3, r3, #16
 8007616:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8007618:	4b0e      	ldr	r3, [pc, #56]	@ (8007654 <RCCEx_PLL3_Config+0x12c>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a0d      	ldr	r2, [pc, #52]	@ (8007654 <RCCEx_PLL3_Config+0x12c>)
 800761e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007622:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007624:	f7fa f9d6 	bl	80019d4 <HAL_GetTick>
 8007628:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800762a:	e008      	b.n	800763e <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800762c:	f7fa f9d2 	bl	80019d4 <HAL_GetTick>
 8007630:	4602      	mov	r2, r0
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	2b02      	cmp	r3, #2
 8007638:	d901      	bls.n	800763e <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e006      	b.n	800764c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800763e:	4b05      	ldr	r3, [pc, #20]	@ (8007654 <RCCEx_PLL3_Config+0x12c>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d0f0      	beq.n	800762c <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800764a:	2300      	movs	r3, #0
}
 800764c:	4618      	mov	r0, r3
 800764e:	3710      	adds	r7, #16
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}
 8007654:	44020c00 	.word	0x44020c00

08007658 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d101      	bne.n	800766a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e049      	b.n	80076fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	d106      	bne.n	8007684 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f7f9 fdd4 	bl	800122c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2202      	movs	r2, #2
 8007688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	3304      	adds	r3, #4
 8007694:	4619      	mov	r1, r3
 8007696:	4610      	mov	r0, r2
 8007698:	f000 f9e2 	bl	8007a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b082      	sub	sp, #8
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d101      	bne.n	8007718 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e049      	b.n	80077ac <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800771e:	b2db      	uxtb	r3, r3
 8007720:	2b00      	cmp	r3, #0
 8007722:	d106      	bne.n	8007732 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f7f9 fd9f 	bl	8001270 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2202      	movs	r2, #2
 8007736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	3304      	adds	r3, #4
 8007742:	4619      	mov	r1, r3
 8007744:	4610      	mov	r0, r2
 8007746:	f000 f98b 	bl	8007a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2201      	movs	r2, #1
 8007756:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3708      	adds	r7, #8
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b086      	sub	sp, #24
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077c0:	2300      	movs	r3, #0
 80077c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d101      	bne.n	80077d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80077ce:	2302      	movs	r3, #2
 80077d0:	e0ff      	b.n	80079d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2201      	movs	r2, #1
 80077d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2b14      	cmp	r3, #20
 80077de:	f200 80f0 	bhi.w	80079c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80077e2:	a201      	add	r2, pc, #4	@ (adr r2, 80077e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80077e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e8:	0800783d 	.word	0x0800783d
 80077ec:	080079c3 	.word	0x080079c3
 80077f0:	080079c3 	.word	0x080079c3
 80077f4:	080079c3 	.word	0x080079c3
 80077f8:	0800787d 	.word	0x0800787d
 80077fc:	080079c3 	.word	0x080079c3
 8007800:	080079c3 	.word	0x080079c3
 8007804:	080079c3 	.word	0x080079c3
 8007808:	080078bf 	.word	0x080078bf
 800780c:	080079c3 	.word	0x080079c3
 8007810:	080079c3 	.word	0x080079c3
 8007814:	080079c3 	.word	0x080079c3
 8007818:	080078ff 	.word	0x080078ff
 800781c:	080079c3 	.word	0x080079c3
 8007820:	080079c3 	.word	0x080079c3
 8007824:	080079c3 	.word	0x080079c3
 8007828:	08007941 	.word	0x08007941
 800782c:	080079c3 	.word	0x080079c3
 8007830:	080079c3 	.word	0x080079c3
 8007834:	080079c3 	.word	0x080079c3
 8007838:	08007981 	.word	0x08007981
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68b9      	ldr	r1, [r7, #8]
 8007842:	4618      	mov	r0, r3
 8007844:	f000 f9f6 	bl	8007c34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	699a      	ldr	r2, [r3, #24]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f042 0208 	orr.w	r2, r2, #8
 8007856:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	699a      	ldr	r2, [r3, #24]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f022 0204 	bic.w	r2, r2, #4
 8007866:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	6999      	ldr	r1, [r3, #24]
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	691a      	ldr	r2, [r3, #16]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	430a      	orrs	r2, r1
 8007878:	619a      	str	r2, [r3, #24]
      break;
 800787a:	e0a5      	b.n	80079c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68b9      	ldr	r1, [r7, #8]
 8007882:	4618      	mov	r0, r3
 8007884:	f000 fa70 	bl	8007d68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	699a      	ldr	r2, [r3, #24]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007896:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	699a      	ldr	r2, [r3, #24]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	6999      	ldr	r1, [r3, #24]
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	021a      	lsls	r2, r3, #8
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	430a      	orrs	r2, r1
 80078ba:	619a      	str	r2, [r3, #24]
      break;
 80078bc:	e084      	b.n	80079c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68b9      	ldr	r1, [r7, #8]
 80078c4:	4618      	mov	r0, r3
 80078c6:	f000 fae7 	bl	8007e98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	69da      	ldr	r2, [r3, #28]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f042 0208 	orr.w	r2, r2, #8
 80078d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	69da      	ldr	r2, [r3, #28]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f022 0204 	bic.w	r2, r2, #4
 80078e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	69d9      	ldr	r1, [r3, #28]
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	691a      	ldr	r2, [r3, #16]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	430a      	orrs	r2, r1
 80078fa:	61da      	str	r2, [r3, #28]
      break;
 80078fc:	e064      	b.n	80079c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68b9      	ldr	r1, [r7, #8]
 8007904:	4618      	mov	r0, r3
 8007906:	f000 fb5d 	bl	8007fc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	69da      	ldr	r2, [r3, #28]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007918:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	69da      	ldr	r2, [r3, #28]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007928:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	69d9      	ldr	r1, [r3, #28]
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	021a      	lsls	r2, r3, #8
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	430a      	orrs	r2, r1
 800793c:	61da      	str	r2, [r3, #28]
      break;
 800793e:	e043      	b.n	80079c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68b9      	ldr	r1, [r7, #8]
 8007946:	4618      	mov	r0, r3
 8007948:	f000 fbd4 	bl	80080f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f042 0208 	orr.w	r2, r2, #8
 800795a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f022 0204 	bic.w	r2, r2, #4
 800796a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	691a      	ldr	r2, [r3, #16]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	430a      	orrs	r2, r1
 800797c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800797e:	e023      	b.n	80079c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68b9      	ldr	r1, [r7, #8]
 8007986:	4618      	mov	r0, r3
 8007988:	f000 fc1e 	bl	80081c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800799a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079aa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	021a      	lsls	r2, r3, #8
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	430a      	orrs	r2, r1
 80079be:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80079c0:	e002      	b.n	80079c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	75fb      	strb	r3, [r7, #23]
      break;
 80079c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80079d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3718      	adds	r7, #24
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop

080079dc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d101      	bne.n	80079f4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80079f0:	2302      	movs	r3, #2
 80079f2:	e031      	b.n	8007a58 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2202      	movs	r2, #2
 8007a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007a04:	6839      	ldr	r1, [r7, #0]
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fc4a 	bl	80082a0 <TIM_SlaveTimer_SetConfig>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d009      	beq.n	8007a26 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2201      	movs	r2, #1
 8007a16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e018      	b.n	8007a58 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68da      	ldr	r2, [r3, #12]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a34:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	68da      	ldr	r2, [r3, #12]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007a44:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3708      	adds	r7, #8
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b085      	sub	sp, #20
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a62      	ldr	r2, [pc, #392]	@ (8007bfc <TIM_Base_SetConfig+0x19c>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d02b      	beq.n	8007ad0 <TIM_Base_SetConfig+0x70>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4a61      	ldr	r2, [pc, #388]	@ (8007c00 <TIM_Base_SetConfig+0x1a0>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d027      	beq.n	8007ad0 <TIM_Base_SetConfig+0x70>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a86:	d023      	beq.n	8007ad0 <TIM_Base_SetConfig+0x70>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a8e:	d01f      	beq.n	8007ad0 <TIM_Base_SetConfig+0x70>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4a5c      	ldr	r2, [pc, #368]	@ (8007c04 <TIM_Base_SetConfig+0x1a4>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d01b      	beq.n	8007ad0 <TIM_Base_SetConfig+0x70>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a5b      	ldr	r2, [pc, #364]	@ (8007c08 <TIM_Base_SetConfig+0x1a8>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d017      	beq.n	8007ad0 <TIM_Base_SetConfig+0x70>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a5a      	ldr	r2, [pc, #360]	@ (8007c0c <TIM_Base_SetConfig+0x1ac>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d013      	beq.n	8007ad0 <TIM_Base_SetConfig+0x70>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a59      	ldr	r2, [pc, #356]	@ (8007c10 <TIM_Base_SetConfig+0x1b0>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d00f      	beq.n	8007ad0 <TIM_Base_SetConfig+0x70>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a58      	ldr	r2, [pc, #352]	@ (8007c14 <TIM_Base_SetConfig+0x1b4>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d00b      	beq.n	8007ad0 <TIM_Base_SetConfig+0x70>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a57      	ldr	r2, [pc, #348]	@ (8007c18 <TIM_Base_SetConfig+0x1b8>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d007      	beq.n	8007ad0 <TIM_Base_SetConfig+0x70>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a56      	ldr	r2, [pc, #344]	@ (8007c1c <TIM_Base_SetConfig+0x1bc>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d003      	beq.n	8007ad0 <TIM_Base_SetConfig+0x70>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a55      	ldr	r2, [pc, #340]	@ (8007c20 <TIM_Base_SetConfig+0x1c0>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d108      	bne.n	8007ae2 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a45      	ldr	r2, [pc, #276]	@ (8007bfc <TIM_Base_SetConfig+0x19c>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d03b      	beq.n	8007b62 <TIM_Base_SetConfig+0x102>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a44      	ldr	r2, [pc, #272]	@ (8007c00 <TIM_Base_SetConfig+0x1a0>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d037      	beq.n	8007b62 <TIM_Base_SetConfig+0x102>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007af8:	d033      	beq.n	8007b62 <TIM_Base_SetConfig+0x102>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b00:	d02f      	beq.n	8007b62 <TIM_Base_SetConfig+0x102>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a3f      	ldr	r2, [pc, #252]	@ (8007c04 <TIM_Base_SetConfig+0x1a4>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d02b      	beq.n	8007b62 <TIM_Base_SetConfig+0x102>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a3e      	ldr	r2, [pc, #248]	@ (8007c08 <TIM_Base_SetConfig+0x1a8>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d027      	beq.n	8007b62 <TIM_Base_SetConfig+0x102>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a3d      	ldr	r2, [pc, #244]	@ (8007c0c <TIM_Base_SetConfig+0x1ac>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d023      	beq.n	8007b62 <TIM_Base_SetConfig+0x102>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a3c      	ldr	r2, [pc, #240]	@ (8007c10 <TIM_Base_SetConfig+0x1b0>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d01f      	beq.n	8007b62 <TIM_Base_SetConfig+0x102>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a3b      	ldr	r2, [pc, #236]	@ (8007c14 <TIM_Base_SetConfig+0x1b4>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d01b      	beq.n	8007b62 <TIM_Base_SetConfig+0x102>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a3a      	ldr	r2, [pc, #232]	@ (8007c18 <TIM_Base_SetConfig+0x1b8>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d017      	beq.n	8007b62 <TIM_Base_SetConfig+0x102>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a39      	ldr	r2, [pc, #228]	@ (8007c1c <TIM_Base_SetConfig+0x1bc>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d013      	beq.n	8007b62 <TIM_Base_SetConfig+0x102>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a38      	ldr	r2, [pc, #224]	@ (8007c20 <TIM_Base_SetConfig+0x1c0>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d00f      	beq.n	8007b62 <TIM_Base_SetConfig+0x102>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a37      	ldr	r2, [pc, #220]	@ (8007c24 <TIM_Base_SetConfig+0x1c4>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d00b      	beq.n	8007b62 <TIM_Base_SetConfig+0x102>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a36      	ldr	r2, [pc, #216]	@ (8007c28 <TIM_Base_SetConfig+0x1c8>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d007      	beq.n	8007b62 <TIM_Base_SetConfig+0x102>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a35      	ldr	r2, [pc, #212]	@ (8007c2c <TIM_Base_SetConfig+0x1cc>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d003      	beq.n	8007b62 <TIM_Base_SetConfig+0x102>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a34      	ldr	r2, [pc, #208]	@ (8007c30 <TIM_Base_SetConfig+0x1d0>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d108      	bne.n	8007b74 <TIM_Base_SetConfig+0x114>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	695b      	ldr	r3, [r3, #20]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	689a      	ldr	r2, [r3, #8]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4a18      	ldr	r2, [pc, #96]	@ (8007bfc <TIM_Base_SetConfig+0x19c>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d013      	beq.n	8007bc8 <TIM_Base_SetConfig+0x168>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a17      	ldr	r2, [pc, #92]	@ (8007c00 <TIM_Base_SetConfig+0x1a0>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d00f      	beq.n	8007bc8 <TIM_Base_SetConfig+0x168>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4a1c      	ldr	r2, [pc, #112]	@ (8007c1c <TIM_Base_SetConfig+0x1bc>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d00b      	beq.n	8007bc8 <TIM_Base_SetConfig+0x168>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	4a1b      	ldr	r2, [pc, #108]	@ (8007c20 <TIM_Base_SetConfig+0x1c0>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d007      	beq.n	8007bc8 <TIM_Base_SetConfig+0x168>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4a1c      	ldr	r2, [pc, #112]	@ (8007c2c <TIM_Base_SetConfig+0x1cc>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d003      	beq.n	8007bc8 <TIM_Base_SetConfig+0x168>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a1b      	ldr	r2, [pc, #108]	@ (8007c30 <TIM_Base_SetConfig+0x1d0>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d103      	bne.n	8007bd0 <TIM_Base_SetConfig+0x170>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	691a      	ldr	r2, [r3, #16]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	f003 0301 	and.w	r3, r3, #1
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d105      	bne.n	8007bee <TIM_Base_SetConfig+0x18e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	f023 0201 	bic.w	r2, r3, #1
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	611a      	str	r2, [r3, #16]
  }
}
 8007bee:	bf00      	nop
 8007bf0:	3714      	adds	r7, #20
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	40012c00 	.word	0x40012c00
 8007c00:	50012c00 	.word	0x50012c00
 8007c04:	40000400 	.word	0x40000400
 8007c08:	50000400 	.word	0x50000400
 8007c0c:	40000800 	.word	0x40000800
 8007c10:	50000800 	.word	0x50000800
 8007c14:	40000c00 	.word	0x40000c00
 8007c18:	50000c00 	.word	0x50000c00
 8007c1c:	40013400 	.word	0x40013400
 8007c20:	50013400 	.word	0x50013400
 8007c24:	40001800 	.word	0x40001800
 8007c28:	50001800 	.word	0x50001800
 8007c2c:	40014000 	.word	0x40014000
 8007c30:	50014000 	.word	0x50014000

08007c34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b087      	sub	sp, #28
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a1b      	ldr	r3, [r3, #32]
 8007c42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6a1b      	ldr	r3, [r3, #32]
 8007c48:	f023 0201 	bic.w	r2, r3, #1
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	699b      	ldr	r3, [r3, #24]
 8007c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f023 0303 	bic.w	r3, r3, #3
 8007c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	f023 0302 	bic.w	r3, r3, #2
 8007c80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	697a      	ldr	r2, [r7, #20]
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a30      	ldr	r2, [pc, #192]	@ (8007d50 <TIM_OC1_SetConfig+0x11c>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d013      	beq.n	8007cbc <TIM_OC1_SetConfig+0x88>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a2f      	ldr	r2, [pc, #188]	@ (8007d54 <TIM_OC1_SetConfig+0x120>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d00f      	beq.n	8007cbc <TIM_OC1_SetConfig+0x88>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a2e      	ldr	r2, [pc, #184]	@ (8007d58 <TIM_OC1_SetConfig+0x124>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d00b      	beq.n	8007cbc <TIM_OC1_SetConfig+0x88>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a2d      	ldr	r2, [pc, #180]	@ (8007d5c <TIM_OC1_SetConfig+0x128>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d007      	beq.n	8007cbc <TIM_OC1_SetConfig+0x88>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4a2c      	ldr	r2, [pc, #176]	@ (8007d60 <TIM_OC1_SetConfig+0x12c>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d003      	beq.n	8007cbc <TIM_OC1_SetConfig+0x88>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4a2b      	ldr	r2, [pc, #172]	@ (8007d64 <TIM_OC1_SetConfig+0x130>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d10c      	bne.n	8007cd6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	f023 0308 	bic.w	r3, r3, #8
 8007cc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	697a      	ldr	r2, [r7, #20]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	f023 0304 	bic.w	r3, r3, #4
 8007cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8007d50 <TIM_OC1_SetConfig+0x11c>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d013      	beq.n	8007d06 <TIM_OC1_SetConfig+0xd2>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a1c      	ldr	r2, [pc, #112]	@ (8007d54 <TIM_OC1_SetConfig+0x120>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d00f      	beq.n	8007d06 <TIM_OC1_SetConfig+0xd2>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8007d58 <TIM_OC1_SetConfig+0x124>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d00b      	beq.n	8007d06 <TIM_OC1_SetConfig+0xd2>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a1a      	ldr	r2, [pc, #104]	@ (8007d5c <TIM_OC1_SetConfig+0x128>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d007      	beq.n	8007d06 <TIM_OC1_SetConfig+0xd2>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a19      	ldr	r2, [pc, #100]	@ (8007d60 <TIM_OC1_SetConfig+0x12c>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d003      	beq.n	8007d06 <TIM_OC1_SetConfig+0xd2>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a18      	ldr	r2, [pc, #96]	@ (8007d64 <TIM_OC1_SetConfig+0x130>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d111      	bne.n	8007d2a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	695b      	ldr	r3, [r3, #20]
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	699b      	ldr	r3, [r3, #24]
 8007d24:	693a      	ldr	r2, [r7, #16]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	693a      	ldr	r2, [r7, #16]
 8007d2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	685a      	ldr	r2, [r3, #4]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	697a      	ldr	r2, [r7, #20]
 8007d42:	621a      	str	r2, [r3, #32]
}
 8007d44:	bf00      	nop
 8007d46:	371c      	adds	r7, #28
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr
 8007d50:	40012c00 	.word	0x40012c00
 8007d54:	50012c00 	.word	0x50012c00
 8007d58:	40013400 	.word	0x40013400
 8007d5c:	50013400 	.word	0x50013400
 8007d60:	40014000 	.word	0x40014000
 8007d64:	50014000 	.word	0x50014000

08007d68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b087      	sub	sp, #28
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a1b      	ldr	r3, [r3, #32]
 8007d76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6a1b      	ldr	r3, [r3, #32]
 8007d7c:	f023 0210 	bic.w	r2, r3, #16
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	699b      	ldr	r3, [r3, #24]
 8007d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007da2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	021b      	lsls	r3, r3, #8
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	f023 0320 	bic.w	r3, r3, #32
 8007db6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	011b      	lsls	r3, r3, #4
 8007dbe:	697a      	ldr	r2, [r7, #20]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4a2e      	ldr	r2, [pc, #184]	@ (8007e80 <TIM_OC2_SetConfig+0x118>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d00b      	beq.n	8007de4 <TIM_OC2_SetConfig+0x7c>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4a2d      	ldr	r2, [pc, #180]	@ (8007e84 <TIM_OC2_SetConfig+0x11c>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d007      	beq.n	8007de4 <TIM_OC2_SetConfig+0x7c>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	4a2c      	ldr	r2, [pc, #176]	@ (8007e88 <TIM_OC2_SetConfig+0x120>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d003      	beq.n	8007de4 <TIM_OC2_SetConfig+0x7c>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4a2b      	ldr	r2, [pc, #172]	@ (8007e8c <TIM_OC2_SetConfig+0x124>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d10d      	bne.n	8007e00 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007dea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	011b      	lsls	r3, r3, #4
 8007df2:	697a      	ldr	r2, [r7, #20]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dfe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a1f      	ldr	r2, [pc, #124]	@ (8007e80 <TIM_OC2_SetConfig+0x118>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d013      	beq.n	8007e30 <TIM_OC2_SetConfig+0xc8>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a1e      	ldr	r2, [pc, #120]	@ (8007e84 <TIM_OC2_SetConfig+0x11c>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d00f      	beq.n	8007e30 <TIM_OC2_SetConfig+0xc8>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a1d      	ldr	r2, [pc, #116]	@ (8007e88 <TIM_OC2_SetConfig+0x120>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d00b      	beq.n	8007e30 <TIM_OC2_SetConfig+0xc8>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8007e8c <TIM_OC2_SetConfig+0x124>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d007      	beq.n	8007e30 <TIM_OC2_SetConfig+0xc8>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a1b      	ldr	r2, [pc, #108]	@ (8007e90 <TIM_OC2_SetConfig+0x128>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d003      	beq.n	8007e30 <TIM_OC2_SetConfig+0xc8>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a1a      	ldr	r2, [pc, #104]	@ (8007e94 <TIM_OC2_SetConfig+0x12c>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d113      	bne.n	8007e58 <TIM_OC2_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007e36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	695b      	ldr	r3, [r3, #20]
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	693a      	ldr	r2, [r7, #16]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	693a      	ldr	r2, [r7, #16]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	685a      	ldr	r2, [r3, #4]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	621a      	str	r2, [r3, #32]
}
 8007e72:	bf00      	nop
 8007e74:	371c      	adds	r7, #28
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	40012c00 	.word	0x40012c00
 8007e84:	50012c00 	.word	0x50012c00
 8007e88:	40013400 	.word	0x40013400
 8007e8c:	50013400 	.word	0x50013400
 8007e90:	40014000 	.word	0x40014000
 8007e94:	50014000 	.word	0x50014000

08007e98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b087      	sub	sp, #28
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6a1b      	ldr	r3, [r3, #32]
 8007eac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	69db      	ldr	r3, [r3, #28]
 8007ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ec6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f023 0303 	bic.w	r3, r3, #3
 8007ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007ee4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	021b      	lsls	r3, r3, #8
 8007eec:	697a      	ldr	r2, [r7, #20]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4a2d      	ldr	r2, [pc, #180]	@ (8007fac <TIM_OC3_SetConfig+0x114>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d00b      	beq.n	8007f12 <TIM_OC3_SetConfig+0x7a>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4a2c      	ldr	r2, [pc, #176]	@ (8007fb0 <TIM_OC3_SetConfig+0x118>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d007      	beq.n	8007f12 <TIM_OC3_SetConfig+0x7a>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4a2b      	ldr	r2, [pc, #172]	@ (8007fb4 <TIM_OC3_SetConfig+0x11c>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d003      	beq.n	8007f12 <TIM_OC3_SetConfig+0x7a>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	4a2a      	ldr	r2, [pc, #168]	@ (8007fb8 <TIM_OC3_SetConfig+0x120>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d10d      	bne.n	8007f2e <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007f18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	021b      	lsls	r3, r3, #8
 8007f20:	697a      	ldr	r2, [r7, #20]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007f2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a1e      	ldr	r2, [pc, #120]	@ (8007fac <TIM_OC3_SetConfig+0x114>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d013      	beq.n	8007f5e <TIM_OC3_SetConfig+0xc6>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a1d      	ldr	r2, [pc, #116]	@ (8007fb0 <TIM_OC3_SetConfig+0x118>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d00f      	beq.n	8007f5e <TIM_OC3_SetConfig+0xc6>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a1c      	ldr	r2, [pc, #112]	@ (8007fb4 <TIM_OC3_SetConfig+0x11c>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d00b      	beq.n	8007f5e <TIM_OC3_SetConfig+0xc6>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a1b      	ldr	r2, [pc, #108]	@ (8007fb8 <TIM_OC3_SetConfig+0x120>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d007      	beq.n	8007f5e <TIM_OC3_SetConfig+0xc6>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a1a      	ldr	r2, [pc, #104]	@ (8007fbc <TIM_OC3_SetConfig+0x124>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d003      	beq.n	8007f5e <TIM_OC3_SetConfig+0xc6>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a19      	ldr	r2, [pc, #100]	@ (8007fc0 <TIM_OC3_SetConfig+0x128>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d113      	bne.n	8007f86 <TIM_OC3_SetConfig+0xee>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	695b      	ldr	r3, [r3, #20]
 8007f72:	011b      	lsls	r3, r3, #4
 8007f74:	693a      	ldr	r2, [r7, #16]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	699b      	ldr	r3, [r3, #24]
 8007f7e:	011b      	lsls	r3, r3, #4
 8007f80:	693a      	ldr	r2, [r7, #16]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	693a      	ldr	r2, [r7, #16]
 8007f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	68fa      	ldr	r2, [r7, #12]
 8007f90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	685a      	ldr	r2, [r3, #4]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	697a      	ldr	r2, [r7, #20]
 8007f9e:	621a      	str	r2, [r3, #32]
}
 8007fa0:	bf00      	nop
 8007fa2:	371c      	adds	r7, #28
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr
 8007fac:	40012c00 	.word	0x40012c00
 8007fb0:	50012c00 	.word	0x50012c00
 8007fb4:	40013400 	.word	0x40013400
 8007fb8:	50013400 	.word	0x50013400
 8007fbc:	40014000 	.word	0x40014000
 8007fc0:	50014000 	.word	0x50014000

08007fc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b087      	sub	sp, #28
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a1b      	ldr	r3, [r3, #32]
 8007fd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a1b      	ldr	r3, [r3, #32]
 8007fd8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	69db      	ldr	r3, [r3, #28]
 8007fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007ff2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ffe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	021b      	lsls	r3, r3, #8
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	4313      	orrs	r3, r2
 800800a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008012:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	031b      	lsls	r3, r3, #12
 800801a:	697a      	ldr	r2, [r7, #20]
 800801c:	4313      	orrs	r3, r2
 800801e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	4a2e      	ldr	r2, [pc, #184]	@ (80080dc <TIM_OC4_SetConfig+0x118>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d00b      	beq.n	8008040 <TIM_OC4_SetConfig+0x7c>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4a2d      	ldr	r2, [pc, #180]	@ (80080e0 <TIM_OC4_SetConfig+0x11c>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d007      	beq.n	8008040 <TIM_OC4_SetConfig+0x7c>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4a2c      	ldr	r2, [pc, #176]	@ (80080e4 <TIM_OC4_SetConfig+0x120>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d003      	beq.n	8008040 <TIM_OC4_SetConfig+0x7c>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a2b      	ldr	r2, [pc, #172]	@ (80080e8 <TIM_OC4_SetConfig+0x124>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d10d      	bne.n	800805c <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008046:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	031b      	lsls	r3, r3, #12
 800804e:	697a      	ldr	r2, [r7, #20]
 8008050:	4313      	orrs	r3, r2
 8008052:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800805a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	4a1f      	ldr	r2, [pc, #124]	@ (80080dc <TIM_OC4_SetConfig+0x118>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d013      	beq.n	800808c <TIM_OC4_SetConfig+0xc8>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a1e      	ldr	r2, [pc, #120]	@ (80080e0 <TIM_OC4_SetConfig+0x11c>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d00f      	beq.n	800808c <TIM_OC4_SetConfig+0xc8>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a1d      	ldr	r2, [pc, #116]	@ (80080e4 <TIM_OC4_SetConfig+0x120>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d00b      	beq.n	800808c <TIM_OC4_SetConfig+0xc8>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4a1c      	ldr	r2, [pc, #112]	@ (80080e8 <TIM_OC4_SetConfig+0x124>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d007      	beq.n	800808c <TIM_OC4_SetConfig+0xc8>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a1b      	ldr	r2, [pc, #108]	@ (80080ec <TIM_OC4_SetConfig+0x128>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d003      	beq.n	800808c <TIM_OC4_SetConfig+0xc8>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a1a      	ldr	r2, [pc, #104]	@ (80080f0 <TIM_OC4_SetConfig+0x12c>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d113      	bne.n	80080b4 <TIM_OC4_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008092:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800809a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	695b      	ldr	r3, [r3, #20]
 80080a0:	019b      	lsls	r3, r3, #6
 80080a2:	693a      	ldr	r2, [r7, #16]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	019b      	lsls	r3, r3, #6
 80080ae:	693a      	ldr	r2, [r7, #16]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	693a      	ldr	r2, [r7, #16]
 80080b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	685a      	ldr	r2, [r3, #4]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	621a      	str	r2, [r3, #32]
}
 80080ce:	bf00      	nop
 80080d0:	371c      	adds	r7, #28
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	40012c00 	.word	0x40012c00
 80080e0:	50012c00 	.word	0x50012c00
 80080e4:	40013400 	.word	0x40013400
 80080e8:	50013400 	.word	0x50013400
 80080ec:	40014000 	.word	0x40014000
 80080f0:	50014000 	.word	0x50014000

080080f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b087      	sub	sp, #28
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a1b      	ldr	r3, [r3, #32]
 8008102:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6a1b      	ldr	r3, [r3, #32]
 8008108:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800811a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	4313      	orrs	r3, r2
 8008130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008138:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	041b      	lsls	r3, r3, #16
 8008140:	693a      	ldr	r2, [r7, #16]
 8008142:	4313      	orrs	r3, r2
 8008144:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a19      	ldr	r2, [pc, #100]	@ (80081b0 <TIM_OC5_SetConfig+0xbc>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d013      	beq.n	8008176 <TIM_OC5_SetConfig+0x82>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4a18      	ldr	r2, [pc, #96]	@ (80081b4 <TIM_OC5_SetConfig+0xc0>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d00f      	beq.n	8008176 <TIM_OC5_SetConfig+0x82>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4a17      	ldr	r2, [pc, #92]	@ (80081b8 <TIM_OC5_SetConfig+0xc4>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d00b      	beq.n	8008176 <TIM_OC5_SetConfig+0x82>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a16      	ldr	r2, [pc, #88]	@ (80081bc <TIM_OC5_SetConfig+0xc8>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d007      	beq.n	8008176 <TIM_OC5_SetConfig+0x82>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a15      	ldr	r2, [pc, #84]	@ (80081c0 <TIM_OC5_SetConfig+0xcc>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d003      	beq.n	8008176 <TIM_OC5_SetConfig+0x82>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4a14      	ldr	r2, [pc, #80]	@ (80081c4 <TIM_OC5_SetConfig+0xd0>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d109      	bne.n	800818a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800817c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	695b      	ldr	r3, [r3, #20]
 8008182:	021b      	lsls	r3, r3, #8
 8008184:	697a      	ldr	r2, [r7, #20]
 8008186:	4313      	orrs	r3, r2
 8008188:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	697a      	ldr	r2, [r7, #20]
 800818e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	685a      	ldr	r2, [r3, #4]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	693a      	ldr	r2, [r7, #16]
 80081a2:	621a      	str	r2, [r3, #32]
}
 80081a4:	bf00      	nop
 80081a6:	371c      	adds	r7, #28
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr
 80081b0:	40012c00 	.word	0x40012c00
 80081b4:	50012c00 	.word	0x50012c00
 80081b8:	40013400 	.word	0x40013400
 80081bc:	50013400 	.word	0x50013400
 80081c0:	40014000 	.word	0x40014000
 80081c4:	50014000 	.word	0x50014000

080081c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b087      	sub	sp, #28
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6a1b      	ldr	r3, [r3, #32]
 80081d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a1b      	ldr	r3, [r3, #32]
 80081dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80081f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	021b      	lsls	r3, r3, #8
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	4313      	orrs	r3, r2
 8008206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800820e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	051b      	lsls	r3, r3, #20
 8008216:	693a      	ldr	r2, [r7, #16]
 8008218:	4313      	orrs	r3, r2
 800821a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a1a      	ldr	r2, [pc, #104]	@ (8008288 <TIM_OC6_SetConfig+0xc0>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d013      	beq.n	800824c <TIM_OC6_SetConfig+0x84>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4a19      	ldr	r2, [pc, #100]	@ (800828c <TIM_OC6_SetConfig+0xc4>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d00f      	beq.n	800824c <TIM_OC6_SetConfig+0x84>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4a18      	ldr	r2, [pc, #96]	@ (8008290 <TIM_OC6_SetConfig+0xc8>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d00b      	beq.n	800824c <TIM_OC6_SetConfig+0x84>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	4a17      	ldr	r2, [pc, #92]	@ (8008294 <TIM_OC6_SetConfig+0xcc>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d007      	beq.n	800824c <TIM_OC6_SetConfig+0x84>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	4a16      	ldr	r2, [pc, #88]	@ (8008298 <TIM_OC6_SetConfig+0xd0>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d003      	beq.n	800824c <TIM_OC6_SetConfig+0x84>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a15      	ldr	r2, [pc, #84]	@ (800829c <TIM_OC6_SetConfig+0xd4>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d109      	bne.n	8008260 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008252:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	695b      	ldr	r3, [r3, #20]
 8008258:	029b      	lsls	r3, r3, #10
 800825a:	697a      	ldr	r2, [r7, #20]
 800825c:	4313      	orrs	r3, r2
 800825e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	685a      	ldr	r2, [r3, #4]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	693a      	ldr	r2, [r7, #16]
 8008278:	621a      	str	r2, [r3, #32]
}
 800827a:	bf00      	nop
 800827c:	371c      	adds	r7, #28
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	40012c00 	.word	0x40012c00
 800828c:	50012c00 	.word	0x50012c00
 8008290:	40013400 	.word	0x40013400
 8008294:	50013400 	.word	0x50013400
 8008298:	40014000 	.word	0x40014000
 800829c:	50014000 	.word	0x50014000

080082a0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b086      	sub	sp, #24
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80082bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082c0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082d2:	f023 0307 	bic.w	r3, r3, #7
 80082d6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	693a      	ldr	r2, [r7, #16]
 80082de:	4313      	orrs	r3, r2
 80082e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	693a      	ldr	r2, [r7, #16]
 80082e8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80082f2:	f000 80aa 	beq.w	800844a <TIM_SlaveTimer_SetConfig+0x1aa>
 80082f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80082fa:	f200 80a3 	bhi.w	8008444 <TIM_SlaveTimer_SetConfig+0x1a4>
 80082fe:	4a56      	ldr	r2, [pc, #344]	@ (8008458 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8008300:	4293      	cmp	r3, r2
 8008302:	f000 80a2 	beq.w	800844a <TIM_SlaveTimer_SetConfig+0x1aa>
 8008306:	4a54      	ldr	r2, [pc, #336]	@ (8008458 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8008308:	4293      	cmp	r3, r2
 800830a:	f200 809b 	bhi.w	8008444 <TIM_SlaveTimer_SetConfig+0x1a4>
 800830e:	4a53      	ldr	r2, [pc, #332]	@ (800845c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8008310:	4293      	cmp	r3, r2
 8008312:	f000 809a 	beq.w	800844a <TIM_SlaveTimer_SetConfig+0x1aa>
 8008316:	4a51      	ldr	r2, [pc, #324]	@ (800845c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8008318:	4293      	cmp	r3, r2
 800831a:	f200 8093 	bhi.w	8008444 <TIM_SlaveTimer_SetConfig+0x1a4>
 800831e:	4a50      	ldr	r2, [pc, #320]	@ (8008460 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8008320:	4293      	cmp	r3, r2
 8008322:	f000 8092 	beq.w	800844a <TIM_SlaveTimer_SetConfig+0x1aa>
 8008326:	4a4e      	ldr	r2, [pc, #312]	@ (8008460 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8008328:	4293      	cmp	r3, r2
 800832a:	f200 808b 	bhi.w	8008444 <TIM_SlaveTimer_SetConfig+0x1a4>
 800832e:	4a4d      	ldr	r2, [pc, #308]	@ (8008464 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8008330:	4293      	cmp	r3, r2
 8008332:	f000 808a 	beq.w	800844a <TIM_SlaveTimer_SetConfig+0x1aa>
 8008336:	4a4b      	ldr	r2, [pc, #300]	@ (8008464 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8008338:	4293      	cmp	r3, r2
 800833a:	f200 8083 	bhi.w	8008444 <TIM_SlaveTimer_SetConfig+0x1a4>
 800833e:	4a4a      	ldr	r2, [pc, #296]	@ (8008468 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8008340:	4293      	cmp	r3, r2
 8008342:	f000 8082 	beq.w	800844a <TIM_SlaveTimer_SetConfig+0x1aa>
 8008346:	4a48      	ldr	r2, [pc, #288]	@ (8008468 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d87b      	bhi.n	8008444 <TIM_SlaveTimer_SetConfig+0x1a4>
 800834c:	4a47      	ldr	r2, [pc, #284]	@ (800846c <TIM_SlaveTimer_SetConfig+0x1cc>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d07b      	beq.n	800844a <TIM_SlaveTimer_SetConfig+0x1aa>
 8008352:	4a46      	ldr	r2, [pc, #280]	@ (800846c <TIM_SlaveTimer_SetConfig+0x1cc>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d875      	bhi.n	8008444 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008358:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800835c:	d075      	beq.n	800844a <TIM_SlaveTimer_SetConfig+0x1aa>
 800835e:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008362:	d86f      	bhi.n	8008444 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008364:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008368:	d06f      	beq.n	800844a <TIM_SlaveTimer_SetConfig+0x1aa>
 800836a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800836e:	d869      	bhi.n	8008444 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008370:	2b70      	cmp	r3, #112	@ 0x70
 8008372:	d01a      	beq.n	80083aa <TIM_SlaveTimer_SetConfig+0x10a>
 8008374:	2b70      	cmp	r3, #112	@ 0x70
 8008376:	d865      	bhi.n	8008444 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008378:	2b60      	cmp	r3, #96	@ 0x60
 800837a:	d059      	beq.n	8008430 <TIM_SlaveTimer_SetConfig+0x190>
 800837c:	2b60      	cmp	r3, #96	@ 0x60
 800837e:	d861      	bhi.n	8008444 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008380:	2b50      	cmp	r3, #80	@ 0x50
 8008382:	d04b      	beq.n	800841c <TIM_SlaveTimer_SetConfig+0x17c>
 8008384:	2b50      	cmp	r3, #80	@ 0x50
 8008386:	d85d      	bhi.n	8008444 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008388:	2b40      	cmp	r3, #64	@ 0x40
 800838a:	d019      	beq.n	80083c0 <TIM_SlaveTimer_SetConfig+0x120>
 800838c:	2b40      	cmp	r3, #64	@ 0x40
 800838e:	d859      	bhi.n	8008444 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008390:	2b30      	cmp	r3, #48	@ 0x30
 8008392:	d05a      	beq.n	800844a <TIM_SlaveTimer_SetConfig+0x1aa>
 8008394:	2b30      	cmp	r3, #48	@ 0x30
 8008396:	d855      	bhi.n	8008444 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008398:	2b20      	cmp	r3, #32
 800839a:	d056      	beq.n	800844a <TIM_SlaveTimer_SetConfig+0x1aa>
 800839c:	2b20      	cmp	r3, #32
 800839e:	d851      	bhi.n	8008444 <TIM_SlaveTimer_SetConfig+0x1a4>
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d052      	beq.n	800844a <TIM_SlaveTimer_SetConfig+0x1aa>
 80083a4:	2b10      	cmp	r3, #16
 80083a6:	d050      	beq.n	800844a <TIM_SlaveTimer_SetConfig+0x1aa>
 80083a8:	e04c      	b.n	8008444 <TIM_SlaveTimer_SetConfig+0x1a4>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80083ba:	f000 f8b8 	bl	800852e <TIM_ETR_SetConfig>
      break;
 80083be:	e045      	b.n	800844c <TIM_SlaveTimer_SetConfig+0x1ac>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2b05      	cmp	r3, #5
 80083c6:	d004      	beq.n	80083d2 <TIM_SlaveTimer_SetConfig+0x132>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80083cc:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 80083d0:	d101      	bne.n	80083d6 <TIM_SlaveTimer_SetConfig+0x136>
      {
        return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e03b      	b.n	800844e <TIM_SlaveTimer_SetConfig+0x1ae>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	6a1b      	ldr	r3, [r3, #32]
 80083dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	6a1a      	ldr	r2, [r3, #32]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f022 0201 	bic.w	r2, r2, #1
 80083ec:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80083fc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	011b      	lsls	r3, r3, #4
 8008404:	68ba      	ldr	r2, [r7, #8]
 8008406:	4313      	orrs	r3, r2
 8008408:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	621a      	str	r2, [r3, #32]
      break;
 800841a:	e017      	b.n	800844c <TIM_SlaveTimer_SetConfig+0x1ac>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008428:	461a      	mov	r2, r3
 800842a:	f000 f821 	bl	8008470 <TIM_TI1_ConfigInputStage>
      break;
 800842e:	e00d      	b.n	800844c <TIM_SlaveTimer_SetConfig+0x1ac>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800843c:	461a      	mov	r2, r3
 800843e:	f000 f846 	bl	80084ce <TIM_TI2_ConfigInputStage>
      break;
 8008442:	e003      	b.n	800844c <TIM_SlaveTimer_SetConfig+0x1ac>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	75fb      	strb	r3, [r7, #23]
      break;
 8008448:	e000      	b.n	800844c <TIM_SlaveTimer_SetConfig+0x1ac>
      break;
 800844a:	bf00      	nop
  }

  return status;
 800844c:	7dfb      	ldrb	r3, [r7, #23]
}
 800844e:	4618      	mov	r0, r3
 8008450:	3718      	adds	r7, #24
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	00100070 	.word	0x00100070
 800845c:	00100060 	.word	0x00100060
 8008460:	00100050 	.word	0x00100050
 8008464:	00100040 	.word	0x00100040
 8008468:	00100030 	.word	0x00100030
 800846c:	00100020 	.word	0x00100020

08008470 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008470:	b480      	push	{r7}
 8008472:	b087      	sub	sp, #28
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6a1b      	ldr	r3, [r3, #32]
 8008480:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6a1b      	ldr	r3, [r3, #32]
 8008486:	f023 0201 	bic.w	r2, r3, #1
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800849a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	011b      	lsls	r3, r3, #4
 80084a0:	693a      	ldr	r2, [r7, #16]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	f023 030a 	bic.w	r3, r3, #10
 80084ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084ae:	697a      	ldr	r2, [r7, #20]
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	693a      	ldr	r2, [r7, #16]
 80084ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	697a      	ldr	r2, [r7, #20]
 80084c0:	621a      	str	r2, [r3, #32]
}
 80084c2:	bf00      	nop
 80084c4:	371c      	adds	r7, #28
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr

080084ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084ce:	b480      	push	{r7}
 80084d0:	b087      	sub	sp, #28
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	60f8      	str	r0, [r7, #12]
 80084d6:	60b9      	str	r1, [r7, #8]
 80084d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6a1b      	ldr	r3, [r3, #32]
 80084de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6a1b      	ldr	r3, [r3, #32]
 80084e4:	f023 0210 	bic.w	r2, r3, #16
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	699b      	ldr	r3, [r3, #24]
 80084f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80084f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	031b      	lsls	r3, r3, #12
 80084fe:	693a      	ldr	r2, [r7, #16]
 8008500:	4313      	orrs	r3, r2
 8008502:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800850a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	011b      	lsls	r3, r3, #4
 8008510:	697a      	ldr	r2, [r7, #20]
 8008512:	4313      	orrs	r3, r2
 8008514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	693a      	ldr	r2, [r7, #16]
 800851a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	697a      	ldr	r2, [r7, #20]
 8008520:	621a      	str	r2, [r3, #32]
}
 8008522:	bf00      	nop
 8008524:	371c      	adds	r7, #28
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr

0800852e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800852e:	b480      	push	{r7}
 8008530:	b087      	sub	sp, #28
 8008532:	af00      	add	r7, sp, #0
 8008534:	60f8      	str	r0, [r7, #12]
 8008536:	60b9      	str	r1, [r7, #8]
 8008538:	607a      	str	r2, [r7, #4]
 800853a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008548:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	021a      	lsls	r2, r3, #8
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	431a      	orrs	r2, r3
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	4313      	orrs	r3, r2
 8008556:	697a      	ldr	r2, [r7, #20]
 8008558:	4313      	orrs	r3, r2
 800855a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	697a      	ldr	r2, [r7, #20]
 8008560:	609a      	str	r2, [r3, #8]
}
 8008562:	bf00      	nop
 8008564:	371c      	adds	r7, #28
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr
	...

08008570 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008570:	b480      	push	{r7}
 8008572:	b085      	sub	sp, #20
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008580:	2b01      	cmp	r3, #1
 8008582:	d101      	bne.n	8008588 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008584:	2302      	movs	r3, #2
 8008586:	e0a1      	b.n	80086cc <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2202      	movs	r2, #2
 8008594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a4a      	ldr	r2, [pc, #296]	@ (80086d8 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d00e      	beq.n	80085d0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a49      	ldr	r2, [pc, #292]	@ (80086dc <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d009      	beq.n	80085d0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a47      	ldr	r2, [pc, #284]	@ (80086e0 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d004      	beq.n	80085d0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a46      	ldr	r2, [pc, #280]	@ (80086e4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d108      	bne.n	80085e2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80085d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	4313      	orrs	r3, r2
 80085e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80085e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	68fa      	ldr	r2, [r7, #12]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a34      	ldr	r2, [pc, #208]	@ (80086d8 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d04a      	beq.n	80086a0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a33      	ldr	r2, [pc, #204]	@ (80086dc <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d045      	beq.n	80086a0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800861c:	d040      	beq.n	80086a0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008626:	d03b      	beq.n	80086a0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a2e      	ldr	r2, [pc, #184]	@ (80086e8 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d036      	beq.n	80086a0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a2d      	ldr	r2, [pc, #180]	@ (80086ec <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d031      	beq.n	80086a0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a2b      	ldr	r2, [pc, #172]	@ (80086f0 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d02c      	beq.n	80086a0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a2a      	ldr	r2, [pc, #168]	@ (80086f4 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d027      	beq.n	80086a0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a28      	ldr	r2, [pc, #160]	@ (80086f8 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d022      	beq.n	80086a0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a27      	ldr	r2, [pc, #156]	@ (80086fc <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d01d      	beq.n	80086a0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a1d      	ldr	r2, [pc, #116]	@ (80086e0 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d018      	beq.n	80086a0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a1c      	ldr	r2, [pc, #112]	@ (80086e4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d013      	beq.n	80086a0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a20      	ldr	r2, [pc, #128]	@ (8008700 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d00e      	beq.n	80086a0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a1f      	ldr	r2, [pc, #124]	@ (8008704 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d009      	beq.n	80086a0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a1d      	ldr	r2, [pc, #116]	@ (8008708 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d004      	beq.n	80086a0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a1c      	ldr	r2, [pc, #112]	@ (800870c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d10c      	bne.n	80086ba <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	68ba      	ldr	r2, [r7, #8]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	68ba      	ldr	r2, [r7, #8]
 80086b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2201      	movs	r2, #1
 80086be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3714      	adds	r7, #20
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr
 80086d8:	40012c00 	.word	0x40012c00
 80086dc:	50012c00 	.word	0x50012c00
 80086e0:	40013400 	.word	0x40013400
 80086e4:	50013400 	.word	0x50013400
 80086e8:	40000400 	.word	0x40000400
 80086ec:	50000400 	.word	0x50000400
 80086f0:	40000800 	.word	0x40000800
 80086f4:	50000800 	.word	0x50000800
 80086f8:	40000c00 	.word	0x40000c00
 80086fc:	50000c00 	.word	0x50000c00
 8008700:	40001800 	.word	0x40001800
 8008704:	50001800 	.word	0x50001800
 8008708:	40014000 	.word	0x40014000
 800870c:	50014000 	.word	0x50014000

08008710 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800871a:	2300      	movs	r3, #0
 800871c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008724:	2b01      	cmp	r3, #1
 8008726:	d101      	bne.n	800872c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008728:	2302      	movs	r3, #2
 800872a:	e07d      	b.n	8008828 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	4313      	orrs	r3, r2
 8008740:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	4313      	orrs	r3, r2
 800874e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	4313      	orrs	r3, r2
 800875c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4313      	orrs	r3, r2
 800876a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	691b      	ldr	r3, [r3, #16]
 8008776:	4313      	orrs	r3, r2
 8008778:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	695b      	ldr	r3, [r3, #20]
 8008784:	4313      	orrs	r3, r2
 8008786:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008792:	4313      	orrs	r3, r2
 8008794:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	699b      	ldr	r3, [r3, #24]
 80087a0:	041b      	lsls	r3, r3, #16
 80087a2:	4313      	orrs	r3, r2
 80087a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	69db      	ldr	r3, [r3, #28]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a1e      	ldr	r2, [pc, #120]	@ (8008834 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d00e      	beq.n	80087dc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a1d      	ldr	r2, [pc, #116]	@ (8008838 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d009      	beq.n	80087dc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a1b      	ldr	r2, [pc, #108]	@ (800883c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d004      	beq.n	80087dc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a1a      	ldr	r2, [pc, #104]	@ (8008840 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d11c      	bne.n	8008816 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087e6:	051b      	lsls	r3, r3, #20
 80087e8:	4313      	orrs	r3, r2
 80087ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	6a1b      	ldr	r3, [r3, #32]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008804:	4313      	orrs	r3, r2
 8008806:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008812:	4313      	orrs	r3, r2
 8008814:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	68fa      	ldr	r2, [r7, #12]
 800881c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008826:	2300      	movs	r3, #0
}
 8008828:	4618      	mov	r0, r3
 800882a:	3714      	adds	r7, #20
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr
 8008834:	40012c00 	.word	0x40012c00
 8008838:	50012c00 	.word	0x50012c00
 800883c:	40013400 	.word	0x40013400
 8008840:	50013400 	.word	0x50013400

08008844 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d101      	bne.n	8008856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	e042      	b.n	80088dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800885c:	2b00      	cmp	r3, #0
 800885e:	d106      	bne.n	800886e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f7f8 fda3 	bl	80013b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2224      	movs	r2, #36	@ 0x24
 8008872:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f022 0201 	bic.w	r2, r2, #1
 8008884:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800888a:	2b00      	cmp	r3, #0
 800888c:	d002      	beq.n	8008894 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 fe5a 	bl	8009548 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 fca9 	bl	80091ec <UART_SetConfig>
 800889a:	4603      	mov	r3, r0
 800889c:	2b01      	cmp	r3, #1
 800889e:	d101      	bne.n	80088a4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	e01b      	b.n	80088dc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	685a      	ldr	r2, [r3, #4]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80088b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	689a      	ldr	r2, [r3, #8]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80088c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f042 0201 	orr.w	r2, r2, #1
 80088d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 fed9 	bl	800968c <UART_CheckIdleState>
 80088da:	4603      	mov	r3, r0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3708      	adds	r7, #8
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b08a      	sub	sp, #40	@ 0x28
 80088e8:	af02      	add	r7, sp, #8
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	603b      	str	r3, [r7, #0]
 80088f0:	4613      	mov	r3, r2
 80088f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088fa:	2b20      	cmp	r3, #32
 80088fc:	f040 808b 	bne.w	8008a16 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d002      	beq.n	800890c <HAL_UART_Transmit+0x28>
 8008906:	88fb      	ldrh	r3, [r7, #6]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d101      	bne.n	8008910 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800890c:	2301      	movs	r3, #1
 800890e:	e083      	b.n	8008a18 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800891a:	2b80      	cmp	r3, #128	@ 0x80
 800891c:	d107      	bne.n	800892e <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	689a      	ldr	r2, [r3, #8]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800892c:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2221      	movs	r2, #33	@ 0x21
 800893a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800893e:	f7f9 f849 	bl	80019d4 <HAL_GetTick>
 8008942:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	88fa      	ldrh	r2, [r7, #6]
 8008948:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	88fa      	ldrh	r2, [r7, #6]
 8008950:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800895c:	d108      	bne.n	8008970 <HAL_UART_Transmit+0x8c>
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	691b      	ldr	r3, [r3, #16]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d104      	bne.n	8008970 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8008966:	2300      	movs	r3, #0
 8008968:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	61bb      	str	r3, [r7, #24]
 800896e:	e003      	b.n	8008978 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008974:	2300      	movs	r3, #0
 8008976:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008978:	e030      	b.n	80089dc <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	9300      	str	r3, [sp, #0]
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	2200      	movs	r2, #0
 8008982:	2180      	movs	r1, #128	@ 0x80
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	f000 ff2b 	bl	80097e0 <UART_WaitOnFlagUntilTimeout>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d005      	beq.n	800899c <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2220      	movs	r2, #32
 8008994:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008998:	2303      	movs	r3, #3
 800899a:	e03d      	b.n	8008a18 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d10b      	bne.n	80089ba <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80089a2:	69bb      	ldr	r3, [r7, #24]
 80089a4:	881b      	ldrh	r3, [r3, #0]
 80089a6:	461a      	mov	r2, r3
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089b0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	3302      	adds	r3, #2
 80089b6:	61bb      	str	r3, [r7, #24]
 80089b8:	e007      	b.n	80089ca <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	781a      	ldrb	r2, [r3, #0]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	3301      	adds	r3, #1
 80089c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	3b01      	subs	r3, #1
 80089d4:	b29a      	uxth	r2, r3
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1c8      	bne.n	800897a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	2200      	movs	r2, #0
 80089f0:	2140      	movs	r1, #64	@ 0x40
 80089f2:	68f8      	ldr	r0, [r7, #12]
 80089f4:	f000 fef4 	bl	80097e0 <UART_WaitOnFlagUntilTimeout>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d005      	beq.n	8008a0a <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2220      	movs	r2, #32
 8008a02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008a06:	2303      	movs	r3, #3
 8008a08:	e006      	b.n	8008a18 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2220      	movs	r2, #32
 8008a0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008a12:	2300      	movs	r3, #0
 8008a14:	e000      	b.n	8008a18 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8008a16:	2302      	movs	r3, #2
  }
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3720      	adds	r7, #32
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b08a      	sub	sp, #40	@ 0x28
 8008a24:	af02      	add	r7, sp, #8
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	603b      	str	r3, [r7, #0]
 8008a2c:	4613      	mov	r3, r2
 8008a2e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a36:	2b20      	cmp	r3, #32
 8008a38:	f040 80c4 	bne.w	8008bc4 <HAL_UART_Receive+0x1a4>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d002      	beq.n	8008a48 <HAL_UART_Receive+0x28>
 8008a42:	88fb      	ldrh	r3, [r7, #6]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d101      	bne.n	8008a4c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e0bc      	b.n	8008bc6 <HAL_UART_Receive+0x1a6>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a56:	2b40      	cmp	r3, #64	@ 0x40
 8008a58:	d107      	bne.n	8008a6a <HAL_UART_Receive+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	689a      	ldr	r2, [r3, #8]
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a68:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2222      	movs	r2, #34	@ 0x22
 8008a76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a80:	f7f8 ffa8 	bl	80019d4 <HAL_GetTick>
 8008a84:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	88fa      	ldrh	r2, [r7, #6]
 8008a8a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	88fa      	ldrh	r2, [r7, #6]
 8008a92:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a9e:	d10e      	bne.n	8008abe <HAL_UART_Receive+0x9e>
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d105      	bne.n	8008ab4 <HAL_UART_Receive+0x94>
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008aae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ab2:	e02d      	b.n	8008b10 <HAL_UART_Receive+0xf0>
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	22ff      	movs	r2, #255	@ 0xff
 8008ab8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008abc:	e028      	b.n	8008b10 <HAL_UART_Receive+0xf0>
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d10d      	bne.n	8008ae2 <HAL_UART_Receive+0xc2>
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	691b      	ldr	r3, [r3, #16]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d104      	bne.n	8008ad8 <HAL_UART_Receive+0xb8>
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	22ff      	movs	r2, #255	@ 0xff
 8008ad2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ad6:	e01b      	b.n	8008b10 <HAL_UART_Receive+0xf0>
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	227f      	movs	r2, #127	@ 0x7f
 8008adc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ae0:	e016      	b.n	8008b10 <HAL_UART_Receive+0xf0>
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008aea:	d10d      	bne.n	8008b08 <HAL_UART_Receive+0xe8>
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	691b      	ldr	r3, [r3, #16]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d104      	bne.n	8008afe <HAL_UART_Receive+0xde>
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	227f      	movs	r2, #127	@ 0x7f
 8008af8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008afc:	e008      	b.n	8008b10 <HAL_UART_Receive+0xf0>
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	223f      	movs	r2, #63	@ 0x3f
 8008b02:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b06:	e003      	b.n	8008b10 <HAL_UART_Receive+0xf0>
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008b16:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b20:	d108      	bne.n	8008b34 <HAL_UART_Receive+0x114>
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	691b      	ldr	r3, [r3, #16]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d104      	bne.n	8008b34 <HAL_UART_Receive+0x114>
    {
      pdata8bits  = NULL;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	61bb      	str	r3, [r7, #24]
 8008b32:	e003      	b.n	8008b3c <HAL_UART_Receive+0x11c>
    }
    else
    {
      pdata8bits  = pData;
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008b3c:	e036      	b.n	8008bac <HAL_UART_Receive+0x18c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	2200      	movs	r2, #0
 8008b46:	2120      	movs	r1, #32
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f000 fe49 	bl	80097e0 <UART_WaitOnFlagUntilTimeout>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d005      	beq.n	8008b60 <HAL_UART_Receive+0x140>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2220      	movs	r2, #32
 8008b58:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	e032      	b.n	8008bc6 <HAL_UART_Receive+0x1a6>
      }
      if (pdata8bits == NULL)
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d10c      	bne.n	8008b80 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b6c:	b29a      	uxth	r2, r3
 8008b6e:	8a7b      	ldrh	r3, [r7, #18]
 8008b70:	4013      	ands	r3, r2
 8008b72:	b29a      	uxth	r2, r3
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	3302      	adds	r3, #2
 8008b7c:	61bb      	str	r3, [r7, #24]
 8008b7e:	e00c      	b.n	8008b9a <HAL_UART_Receive+0x17a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b86:	b2da      	uxtb	r2, r3
 8008b88:	8a7b      	ldrh	r3, [r7, #18]
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	b2da      	uxtb	r2, r3
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	3301      	adds	r3, #1
 8008b98:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	3b01      	subs	r3, #1
 8008ba4:	b29a      	uxth	r2, r3
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1c2      	bne.n	8008b3e <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2220      	movs	r2, #32
 8008bbc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	e000      	b.n	8008bc6 <HAL_UART_Receive+0x1a6>
  }
  else
  {
    return HAL_BUSY;
 8008bc4:	2302      	movs	r3, #2
  }
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3720      	adds	r7, #32
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
	...

08008bd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b0ae      	sub	sp, #184	@ 0xb8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	69db      	ldr	r3, [r3, #28]
 8008bde:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008bf6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008bfa:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008bfe:	4013      	ands	r3, r2
 8008c00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 8008c04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d11b      	bne.n	8008c44 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008c0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008c10:	f003 0320 	and.w	r3, r3, #32
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d015      	beq.n	8008c44 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008c18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008c1c:	f003 0320 	and.w	r3, r3, #32
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d105      	bne.n	8008c30 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008c24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d009      	beq.n	8008c44 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f000 82ac 	beq.w	8009192 <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	4798      	blx	r3
      }
      return;
 8008c42:	e2a6      	b.n	8009192 <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008c44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f000 80fd 	beq.w	8008e48 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008c4e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008c52:	4b7a      	ldr	r3, [pc, #488]	@ (8008e3c <HAL_UART_IRQHandler+0x26c>)
 8008c54:	4013      	ands	r3, r2
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d106      	bne.n	8008c68 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008c5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008c5e:	4b78      	ldr	r3, [pc, #480]	@ (8008e40 <HAL_UART_IRQHandler+0x270>)
 8008c60:	4013      	ands	r3, r2
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	f000 80f0 	beq.w	8008e48 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008c6c:	f003 0301 	and.w	r3, r3, #1
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d011      	beq.n	8008c98 <HAL_UART_IRQHandler+0xc8>
 8008c74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d00b      	beq.n	8008c98 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2201      	movs	r2, #1
 8008c86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c8e:	f043 0201 	orr.w	r2, r3, #1
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008c9c:	f003 0302 	and.w	r3, r3, #2
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d011      	beq.n	8008cc8 <HAL_UART_IRQHandler+0xf8>
 8008ca4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ca8:	f003 0301 	and.w	r3, r3, #1
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00b      	beq.n	8008cc8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2202      	movs	r2, #2
 8008cb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cbe:	f043 0204 	orr.w	r2, r3, #4
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008ccc:	f003 0304 	and.w	r3, r3, #4
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d011      	beq.n	8008cf8 <HAL_UART_IRQHandler+0x128>
 8008cd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008cd8:	f003 0301 	and.w	r3, r3, #1
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00b      	beq.n	8008cf8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2204      	movs	r2, #4
 8008ce6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cee:	f043 0202 	orr.w	r2, r3, #2
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008cf8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008cfc:	f003 0308 	and.w	r3, r3, #8
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d017      	beq.n	8008d34 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008d04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008d08:	f003 0320 	and.w	r3, r3, #32
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d105      	bne.n	8008d1c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008d10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008d14:	4b49      	ldr	r3, [pc, #292]	@ (8008e3c <HAL_UART_IRQHandler+0x26c>)
 8008d16:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d00b      	beq.n	8008d34 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2208      	movs	r2, #8
 8008d22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d2a:	f043 0208 	orr.w	r2, r3, #8
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008d34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008d38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d012      	beq.n	8008d66 <HAL_UART_IRQHandler+0x196>
 8008d40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008d44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d00c      	beq.n	8008d66 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008d54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d5c:	f043 0220 	orr.w	r2, r3, #32
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	f000 8212 	beq.w	8009196 <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008d76:	f003 0320 	and.w	r3, r3, #32
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d013      	beq.n	8008da6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008d82:	f003 0320 	and.w	r3, r3, #32
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d105      	bne.n	8008d96 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d007      	beq.n	8008da6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d003      	beq.n	8008da6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dba:	2b40      	cmp	r3, #64	@ 0x40
 8008dbc:	d005      	beq.n	8008dca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008dbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008dc2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d02e      	beq.n	8008e28 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 fd75 	bl	80098ba <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dda:	2b40      	cmp	r3, #64	@ 0x40
 8008ddc:	d120      	bne.n	8008e20 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d017      	beq.n	8008e18 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dee:	4a15      	ldr	r2, [pc, #84]	@ (8008e44 <HAL_UART_IRQHandler+0x274>)
 8008df0:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7f9 f827 	bl	8001e4c <HAL_DMA_Abort_IT>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d019      	beq.n	8008e38 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008e12:	4610      	mov	r0, r2
 8008e14:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e16:	e00f      	b.n	8008e38 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 f9d1 	bl	80091c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e1e:	e00b      	b.n	8008e38 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 f9cd 	bl	80091c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e26:	e007      	b.n	8008e38 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 f9c9 	bl	80091c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008e36:	e1ae      	b.n	8009196 <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e38:	bf00      	nop
    return;
 8008e3a:	e1ac      	b.n	8009196 <HAL_UART_IRQHandler+0x5c6>
 8008e3c:	10000001 	.word	0x10000001
 8008e40:	04000120 	.word	0x04000120
 8008e44:	08009987 	.word	0x08009987

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	f040 8142 	bne.w	80090d6 <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008e52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008e56:	f003 0310 	and.w	r3, r3, #16
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f000 813b 	beq.w	80090d6 <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008e60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008e64:	f003 0310 	and.w	r3, r3, #16
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f000 8134 	beq.w	80090d6 <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2210      	movs	r2, #16
 8008e74:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e80:	2b40      	cmp	r3, #64	@ 0x40
 8008e82:	f040 80aa 	bne.w	8008fda <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e90:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 8008e94:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	f000 8084 	beq.w	8008fa6 <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008ea4:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d27c      	bcs.n	8008fa6 <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8008eb2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ebe:	2b81      	cmp	r3, #129	@ 0x81
 8008ec0:	d060      	beq.n	8008f84 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	677b      	str	r3, [r7, #116]	@ 0x74
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008eca:	e853 3f00 	ldrex	r3, [r3]
 8008ece:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008ed0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ed2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ed6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	461a      	mov	r2, r3
 8008ee0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ee4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008ee8:	67fa      	str	r2, [r7, #124]	@ 0x7c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eea:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008eec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008ef0:	e841 2300 	strex	r3, r2, [r1]
 8008ef4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008ef6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1e2      	bne.n	8008ec2 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	3308      	adds	r3, #8
 8008f02:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f06:	e853 3f00 	ldrex	r3, [r3]
 8008f0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008f0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f0e:	f023 0301 	bic.w	r3, r3, #1
 8008f12:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	3308      	adds	r3, #8
 8008f1c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008f20:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008f22:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f24:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008f26:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008f28:	e841 2300 	strex	r3, r2, [r1]
 8008f2c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008f2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d1e3      	bne.n	8008efc <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2220      	movs	r2, #32
 8008f38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f4a:	e853 3f00 	ldrex	r3, [r3]
 8008f4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008f50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f52:	f023 0310 	bic.w	r3, r3, #16
 8008f56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	461a      	mov	r2, r3
 8008f60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008f64:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f66:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008f6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008f6c:	e841 2300 	strex	r3, r2, [r1]
 8008f70:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008f72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d1e4      	bne.n	8008f42 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7f8 fee8 	bl	8001d54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2202      	movs	r2, #2
 8008f88:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	1ad3      	subs	r3, r2, r3
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 f918 	bl	80091d4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008fa4:	e0f9      	b.n	800919a <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008fac:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	f040 80f2 	bne.w	800919a <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fbe:	2b81      	cmp	r3, #129	@ 0x81
 8008fc0:	f040 80eb 	bne.w	800919a <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2202      	movs	r2, #2
 8008fc8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 f8fe 	bl	80091d4 <HAL_UARTEx_RxEventCallback>
      return;
 8008fd8:	e0df      	b.n	800919a <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	1ad3      	subs	r3, r2, r3
 8008fea:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	f000 80d1 	beq.w	800919e <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 8008ffc:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8009000:	2b00      	cmp	r3, #0
 8009002:	f000 80cc 	beq.w	800919e <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800900c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800900e:	e853 3f00 	ldrex	r3, [r3]
 8009012:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009016:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800901a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	461a      	mov	r2, r3
 8009024:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009028:	647b      	str	r3, [r7, #68]	@ 0x44
 800902a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800902e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009030:	e841 2300 	strex	r3, r2, [r1]
 8009034:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009038:	2b00      	cmp	r3, #0
 800903a:	d1e4      	bne.n	8009006 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	3308      	adds	r3, #8
 8009042:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009046:	e853 3f00 	ldrex	r3, [r3]
 800904a:	623b      	str	r3, [r7, #32]
   return(result);
 800904c:	6a3b      	ldr	r3, [r7, #32]
 800904e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009052:	f023 0301 	bic.w	r3, r3, #1
 8009056:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	3308      	adds	r3, #8
 8009060:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009064:	633a      	str	r2, [r7, #48]	@ 0x30
 8009066:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009068:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800906a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800906c:	e841 2300 	strex	r3, r2, [r1]
 8009070:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009074:	2b00      	cmp	r3, #0
 8009076:	d1e1      	bne.n	800903c <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2220      	movs	r2, #32
 800907c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	e853 3f00 	ldrex	r3, [r3]
 8009098:	60fb      	str	r3, [r7, #12]
   return(result);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f023 0310 	bic.w	r3, r3, #16
 80090a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	461a      	mov	r2, r3
 80090aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80090ae:	61fb      	str	r3, [r7, #28]
 80090b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b2:	69b9      	ldr	r1, [r7, #24]
 80090b4:	69fa      	ldr	r2, [r7, #28]
 80090b6:	e841 2300 	strex	r3, r2, [r1]
 80090ba:	617b      	str	r3, [r7, #20]
   return(result);
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d1e4      	bne.n	800908c <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2202      	movs	r2, #2
 80090c6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80090c8:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80090cc:	4619      	mov	r1, r3
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 f880 	bl	80091d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80090d4:	e063      	b.n	800919e <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80090d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80090da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d00e      	beq.n	8009100 <HAL_UART_IRQHandler+0x530>
 80090e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d008      	beq.n	8009100 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80090f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 fc81 	bl	8009a00 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80090fe:	e051      	b.n	80091a4 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009100:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009104:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009108:	2b00      	cmp	r3, #0
 800910a:	d014      	beq.n	8009136 <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800910c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009110:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009114:	2b00      	cmp	r3, #0
 8009116:	d105      	bne.n	8009124 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009118:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800911c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009120:	2b00      	cmp	r3, #0
 8009122:	d008      	beq.n	8009136 <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009128:	2b00      	cmp	r3, #0
 800912a:	d03a      	beq.n	80091a2 <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	4798      	blx	r3
    }
    return;
 8009134:	e035      	b.n	80091a2 <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009136:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800913a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800913e:	2b00      	cmp	r3, #0
 8009140:	d009      	beq.n	8009156 <HAL_UART_IRQHandler+0x586>
 8009142:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800914a:	2b00      	cmp	r3, #0
 800914c:	d003      	beq.n	8009156 <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 fc2b 	bl	80099aa <UART_EndTransmit_IT>
    return;
 8009154:	e026      	b.n	80091a4 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009156:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800915a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800915e:	2b00      	cmp	r3, #0
 8009160:	d009      	beq.n	8009176 <HAL_UART_IRQHandler+0x5a6>
 8009162:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009166:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800916a:	2b00      	cmp	r3, #0
 800916c:	d003      	beq.n	8009176 <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fc5a 	bl	8009a28 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009174:	e016      	b.n	80091a4 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009176:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800917a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800917e:	2b00      	cmp	r3, #0
 8009180:	d010      	beq.n	80091a4 <HAL_UART_IRQHandler+0x5d4>
 8009182:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009186:	2b00      	cmp	r3, #0
 8009188:	da0c      	bge.n	80091a4 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 fc42 	bl	8009a14 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009190:	e008      	b.n	80091a4 <HAL_UART_IRQHandler+0x5d4>
      return;
 8009192:	bf00      	nop
 8009194:	e006      	b.n	80091a4 <HAL_UART_IRQHandler+0x5d4>
    return;
 8009196:	bf00      	nop
 8009198:	e004      	b.n	80091a4 <HAL_UART_IRQHandler+0x5d4>
      return;
 800919a:	bf00      	nop
 800919c:	e002      	b.n	80091a4 <HAL_UART_IRQHandler+0x5d4>
      return;
 800919e:	bf00      	nop
 80091a0:	e000      	b.n	80091a4 <HAL_UART_IRQHandler+0x5d4>
    return;
 80091a2:	bf00      	nop
  }
}
 80091a4:	37b8      	adds	r7, #184	@ 0xb8
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop

080091ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80091b4:	bf00      	nop
 80091b6:	370c      	adds	r7, #12
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80091c8:	bf00      	nop
 80091ca:	370c      	adds	r7, #12
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	460b      	mov	r3, r1
 80091de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80091e0:	bf00      	nop
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091f0:	b094      	sub	sp, #80	@ 0x50
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80091f6:	2300      	movs	r3, #0
 80091f8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80091fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	4b83      	ldr	r3, [pc, #524]	@ (8009410 <UART_SetConfig+0x224>)
 8009202:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009206:	689a      	ldr	r2, [r3, #8]
 8009208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800920a:	691b      	ldr	r3, [r3, #16]
 800920c:	431a      	orrs	r2, r3
 800920e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009210:	695b      	ldr	r3, [r3, #20]
 8009212:	431a      	orrs	r2, r3
 8009214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009216:	69db      	ldr	r3, [r3, #28]
 8009218:	4313      	orrs	r3, r2
 800921a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800921c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	497c      	ldr	r1, [pc, #496]	@ (8009414 <UART_SetConfig+0x228>)
 8009224:	4019      	ands	r1, r3
 8009226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800922c:	430b      	orrs	r3, r1
 800922e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800923a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800923c:	68d9      	ldr	r1, [r3, #12]
 800923e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	ea40 0301 	orr.w	r3, r0, r1
 8009246:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800924a:	699b      	ldr	r3, [r3, #24]
 800924c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800924e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	4b6f      	ldr	r3, [pc, #444]	@ (8009410 <UART_SetConfig+0x224>)
 8009254:	429a      	cmp	r2, r3
 8009256:	d009      	beq.n	800926c <UART_SetConfig+0x80>
 8009258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	4b6e      	ldr	r3, [pc, #440]	@ (8009418 <UART_SetConfig+0x22c>)
 800925e:	429a      	cmp	r2, r3
 8009260:	d004      	beq.n	800926c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009264:	6a1a      	ldr	r2, [r3, #32]
 8009266:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009268:	4313      	orrs	r3, r2
 800926a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800926c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8009276:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800927a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009280:	430b      	orrs	r3, r1
 8009282:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800928a:	f023 000f 	bic.w	r0, r3, #15
 800928e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009290:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	ea40 0301 	orr.w	r3, r0, r1
 800929a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800929c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	4b5e      	ldr	r3, [pc, #376]	@ (800941c <UART_SetConfig+0x230>)
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d102      	bne.n	80092ac <UART_SetConfig+0xc0>
 80092a6:	2301      	movs	r3, #1
 80092a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092aa:	e032      	b.n	8009312 <UART_SetConfig+0x126>
 80092ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	4b5b      	ldr	r3, [pc, #364]	@ (8009420 <UART_SetConfig+0x234>)
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d102      	bne.n	80092bc <UART_SetConfig+0xd0>
 80092b6:	2302      	movs	r3, #2
 80092b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092ba:	e02a      	b.n	8009312 <UART_SetConfig+0x126>
 80092bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	4b58      	ldr	r3, [pc, #352]	@ (8009424 <UART_SetConfig+0x238>)
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d102      	bne.n	80092cc <UART_SetConfig+0xe0>
 80092c6:	2304      	movs	r3, #4
 80092c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092ca:	e022      	b.n	8009312 <UART_SetConfig+0x126>
 80092cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	4b55      	ldr	r3, [pc, #340]	@ (8009428 <UART_SetConfig+0x23c>)
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d102      	bne.n	80092dc <UART_SetConfig+0xf0>
 80092d6:	2308      	movs	r3, #8
 80092d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092da:	e01a      	b.n	8009312 <UART_SetConfig+0x126>
 80092dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	4b52      	ldr	r3, [pc, #328]	@ (800942c <UART_SetConfig+0x240>)
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d102      	bne.n	80092ec <UART_SetConfig+0x100>
 80092e6:	2310      	movs	r3, #16
 80092e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092ea:	e012      	b.n	8009312 <UART_SetConfig+0x126>
 80092ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	4b4f      	ldr	r3, [pc, #316]	@ (8009430 <UART_SetConfig+0x244>)
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d102      	bne.n	80092fc <UART_SetConfig+0x110>
 80092f6:	2320      	movs	r3, #32
 80092f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092fa:	e00a      	b.n	8009312 <UART_SetConfig+0x126>
 80092fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	4b43      	ldr	r3, [pc, #268]	@ (8009410 <UART_SetConfig+0x224>)
 8009302:	429a      	cmp	r2, r3
 8009304:	d103      	bne.n	800930e <UART_SetConfig+0x122>
 8009306:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800930a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800930c:	e001      	b.n	8009312 <UART_SetConfig+0x126>
 800930e:	2300      	movs	r3, #0
 8009310:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	4b3e      	ldr	r3, [pc, #248]	@ (8009410 <UART_SetConfig+0x224>)
 8009318:	429a      	cmp	r2, r3
 800931a:	d005      	beq.n	8009328 <UART_SetConfig+0x13c>
 800931c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	4b3d      	ldr	r3, [pc, #244]	@ (8009418 <UART_SetConfig+0x22c>)
 8009322:	429a      	cmp	r2, r3
 8009324:	f040 8088 	bne.w	8009438 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009328:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800932a:	2200      	movs	r2, #0
 800932c:	623b      	str	r3, [r7, #32]
 800932e:	627a      	str	r2, [r7, #36]	@ 0x24
 8009330:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009334:	f7fc fd10 	bl	8005d58 <HAL_RCCEx_GetPeriphCLKFreq>
 8009338:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800933a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800933c:	2b00      	cmp	r3, #0
 800933e:	f000 80eb 	beq.w	8009518 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009346:	4a3b      	ldr	r2, [pc, #236]	@ (8009434 <UART_SetConfig+0x248>)
 8009348:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800934c:	461a      	mov	r2, r3
 800934e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009350:	fbb3 f3f2 	udiv	r3, r3, r2
 8009354:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009358:	685a      	ldr	r2, [r3, #4]
 800935a:	4613      	mov	r3, r2
 800935c:	005b      	lsls	r3, r3, #1
 800935e:	4413      	add	r3, r2
 8009360:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009362:	429a      	cmp	r2, r3
 8009364:	d305      	bcc.n	8009372 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800936c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800936e:	429a      	cmp	r2, r3
 8009370:	d903      	bls.n	800937a <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8009372:	2301      	movs	r3, #1
 8009374:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009378:	e048      	b.n	800940c <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800937a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800937c:	2200      	movs	r2, #0
 800937e:	61bb      	str	r3, [r7, #24]
 8009380:	61fa      	str	r2, [r7, #28]
 8009382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009386:	4a2b      	ldr	r2, [pc, #172]	@ (8009434 <UART_SetConfig+0x248>)
 8009388:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800938c:	b29b      	uxth	r3, r3
 800938e:	2200      	movs	r2, #0
 8009390:	613b      	str	r3, [r7, #16]
 8009392:	617a      	str	r2, [r7, #20]
 8009394:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009398:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800939c:	f7f6 ff7a 	bl	8000294 <__aeabi_uldivmod>
 80093a0:	4602      	mov	r2, r0
 80093a2:	460b      	mov	r3, r1
 80093a4:	4610      	mov	r0, r2
 80093a6:	4619      	mov	r1, r3
 80093a8:	f04f 0200 	mov.w	r2, #0
 80093ac:	f04f 0300 	mov.w	r3, #0
 80093b0:	020b      	lsls	r3, r1, #8
 80093b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80093b6:	0202      	lsls	r2, r0, #8
 80093b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093ba:	6849      	ldr	r1, [r1, #4]
 80093bc:	0849      	lsrs	r1, r1, #1
 80093be:	2000      	movs	r0, #0
 80093c0:	460c      	mov	r4, r1
 80093c2:	4605      	mov	r5, r0
 80093c4:	eb12 0804 	adds.w	r8, r2, r4
 80093c8:	eb43 0905 	adc.w	r9, r3, r5
 80093cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	60bb      	str	r3, [r7, #8]
 80093d4:	60fa      	str	r2, [r7, #12]
 80093d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80093da:	4640      	mov	r0, r8
 80093dc:	4649      	mov	r1, r9
 80093de:	f7f6 ff59 	bl	8000294 <__aeabi_uldivmod>
 80093e2:	4602      	mov	r2, r0
 80093e4:	460b      	mov	r3, r1
 80093e6:	4613      	mov	r3, r2
 80093e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80093ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80093f0:	d308      	bcc.n	8009404 <UART_SetConfig+0x218>
 80093f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80093f8:	d204      	bcs.n	8009404 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 80093fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009400:	60da      	str	r2, [r3, #12]
 8009402:	e003      	b.n	800940c <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800940a:	e085      	b.n	8009518 <UART_SetConfig+0x32c>
 800940c:	e084      	b.n	8009518 <UART_SetConfig+0x32c>
 800940e:	bf00      	nop
 8009410:	44002400 	.word	0x44002400
 8009414:	cfff69f3 	.word	0xcfff69f3
 8009418:	54002400 	.word	0x54002400
 800941c:	40013800 	.word	0x40013800
 8009420:	40004400 	.word	0x40004400
 8009424:	40004800 	.word	0x40004800
 8009428:	40004c00 	.word	0x40004c00
 800942c:	40005000 	.word	0x40005000
 8009430:	40006400 	.word	0x40006400
 8009434:	0800ae90 	.word	0x0800ae90
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800943a:	69db      	ldr	r3, [r3, #28]
 800943c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009440:	d13c      	bne.n	80094bc <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009442:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009444:	2200      	movs	r2, #0
 8009446:	603b      	str	r3, [r7, #0]
 8009448:	607a      	str	r2, [r7, #4]
 800944a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800944e:	f7fc fc83 	bl	8005d58 <HAL_RCCEx_GetPeriphCLKFreq>
 8009452:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009454:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009456:	2b00      	cmp	r3, #0
 8009458:	d05e      	beq.n	8009518 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800945a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800945c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800945e:	4a39      	ldr	r2, [pc, #228]	@ (8009544 <UART_SetConfig+0x358>)
 8009460:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009464:	461a      	mov	r2, r3
 8009466:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009468:	fbb3 f3f2 	udiv	r3, r3, r2
 800946c:	005a      	lsls	r2, r3, #1
 800946e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	085b      	lsrs	r3, r3, #1
 8009474:	441a      	add	r2, r3
 8009476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	fbb2 f3f3 	udiv	r3, r2, r3
 800947e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009480:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009482:	2b0f      	cmp	r3, #15
 8009484:	d916      	bls.n	80094b4 <UART_SetConfig+0x2c8>
 8009486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009488:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800948c:	d212      	bcs.n	80094b4 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800948e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009490:	b29b      	uxth	r3, r3
 8009492:	f023 030f 	bic.w	r3, r3, #15
 8009496:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800949a:	085b      	lsrs	r3, r3, #1
 800949c:	b29b      	uxth	r3, r3
 800949e:	f003 0307 	and.w	r3, r3, #7
 80094a2:	b29a      	uxth	r2, r3
 80094a4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80094a6:	4313      	orrs	r3, r2
 80094a8:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80094aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80094b0:	60da      	str	r2, [r3, #12]
 80094b2:	e031      	b.n	8009518 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80094b4:	2301      	movs	r3, #1
 80094b6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80094ba:	e02d      	b.n	8009518 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80094bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094be:	2200      	movs	r2, #0
 80094c0:	469a      	mov	sl, r3
 80094c2:	4693      	mov	fp, r2
 80094c4:	4650      	mov	r0, sl
 80094c6:	4659      	mov	r1, fp
 80094c8:	f7fc fc46 	bl	8005d58 <HAL_RCCEx_GetPeriphCLKFreq>
 80094cc:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80094ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d021      	beq.n	8009518 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094d8:	4a1a      	ldr	r2, [pc, #104]	@ (8009544 <UART_SetConfig+0x358>)
 80094da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094de:	461a      	mov	r2, r3
 80094e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80094e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	085b      	lsrs	r3, r3, #1
 80094ec:	441a      	add	r2, r3
 80094ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80094f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094fa:	2b0f      	cmp	r3, #15
 80094fc:	d909      	bls.n	8009512 <UART_SetConfig+0x326>
 80094fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009504:	d205      	bcs.n	8009512 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009508:	b29a      	uxth	r2, r3
 800950a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	60da      	str	r2, [r3, #12]
 8009510:	e002      	b.n	8009518 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8009512:	2301      	movs	r3, #1
 8009514:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800951a:	2201      	movs	r2, #1
 800951c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009522:	2201      	movs	r2, #1
 8009524:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800952a:	2200      	movs	r2, #0
 800952c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800952e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009530:	2200      	movs	r2, #0
 8009532:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009534:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8009538:	4618      	mov	r0, r3
 800953a:	3750      	adds	r7, #80	@ 0x50
 800953c:	46bd      	mov	sp, r7
 800953e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009542:	bf00      	nop
 8009544:	0800ae90 	.word	0x0800ae90

08009548 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009548:	b480      	push	{r7}
 800954a:	b083      	sub	sp, #12
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009554:	f003 0308 	and.w	r3, r3, #8
 8009558:	2b00      	cmp	r3, #0
 800955a:	d00a      	beq.n	8009572 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	430a      	orrs	r2, r1
 8009570:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009576:	f003 0301 	and.w	r3, r3, #1
 800957a:	2b00      	cmp	r3, #0
 800957c:	d00a      	beq.n	8009594 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	430a      	orrs	r2, r1
 8009592:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009598:	f003 0302 	and.w	r3, r3, #2
 800959c:	2b00      	cmp	r3, #0
 800959e:	d00a      	beq.n	80095b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	430a      	orrs	r2, r1
 80095b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ba:	f003 0304 	and.w	r3, r3, #4
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d00a      	beq.n	80095d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	430a      	orrs	r2, r1
 80095d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095dc:	f003 0310 	and.w	r3, r3, #16
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d00a      	beq.n	80095fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	430a      	orrs	r2, r1
 80095f8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095fe:	f003 0320 	and.w	r3, r3, #32
 8009602:	2b00      	cmp	r3, #0
 8009604:	d00a      	beq.n	800961c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	430a      	orrs	r2, r1
 800961a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009624:	2b00      	cmp	r3, #0
 8009626:	d01a      	beq.n	800965e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	430a      	orrs	r2, r1
 800963c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009642:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009646:	d10a      	bne.n	800965e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	430a      	orrs	r2, r1
 800965c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009666:	2b00      	cmp	r3, #0
 8009668:	d00a      	beq.n	8009680 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	430a      	orrs	r2, r1
 800967e:	605a      	str	r2, [r3, #4]
  }
}
 8009680:	bf00      	nop
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr

0800968c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b098      	sub	sp, #96	@ 0x60
 8009690:	af02      	add	r7, sp, #8
 8009692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800969c:	f7f8 f99a 	bl	80019d4 <HAL_GetTick>
 80096a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f003 0308 	and.w	r3, r3, #8
 80096ac:	2b08      	cmp	r3, #8
 80096ae:	d12f      	bne.n	8009710 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80096b4:	9300      	str	r3, [sp, #0]
 80096b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096b8:	2200      	movs	r2, #0
 80096ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 f88e 	bl	80097e0 <UART_WaitOnFlagUntilTimeout>
 80096c4:	4603      	mov	r3, r0
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d022      	beq.n	8009710 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d2:	e853 3f00 	ldrex	r3, [r3]
 80096d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80096d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80096de:	653b      	str	r3, [r7, #80]	@ 0x50
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	461a      	mov	r2, r3
 80096e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80096ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80096ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80096f0:	e841 2300 	strex	r3, r2, [r1]
 80096f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80096f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d1e6      	bne.n	80096ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2220      	movs	r2, #32
 8009700:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800970c:	2303      	movs	r3, #3
 800970e:	e063      	b.n	80097d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f003 0304 	and.w	r3, r3, #4
 800971a:	2b04      	cmp	r3, #4
 800971c:	d149      	bne.n	80097b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800971e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009722:	9300      	str	r3, [sp, #0]
 8009724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009726:	2200      	movs	r2, #0
 8009728:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 f857 	bl	80097e0 <UART_WaitOnFlagUntilTimeout>
 8009732:	4603      	mov	r3, r0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d03c      	beq.n	80097b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800973e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009740:	e853 3f00 	ldrex	r3, [r3]
 8009744:	623b      	str	r3, [r7, #32]
   return(result);
 8009746:	6a3b      	ldr	r3, [r7, #32]
 8009748:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800974c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	461a      	mov	r2, r3
 8009754:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009756:	633b      	str	r3, [r7, #48]	@ 0x30
 8009758:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800975a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800975c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800975e:	e841 2300 	strex	r3, r2, [r1]
 8009762:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009766:	2b00      	cmp	r3, #0
 8009768:	d1e6      	bne.n	8009738 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	3308      	adds	r3, #8
 8009770:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	e853 3f00 	ldrex	r3, [r3]
 8009778:	60fb      	str	r3, [r7, #12]
   return(result);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f023 0301 	bic.w	r3, r3, #1
 8009780:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	3308      	adds	r3, #8
 8009788:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800978a:	61fa      	str	r2, [r7, #28]
 800978c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800978e:	69b9      	ldr	r1, [r7, #24]
 8009790:	69fa      	ldr	r2, [r7, #28]
 8009792:	e841 2300 	strex	r3, r2, [r1]
 8009796:	617b      	str	r3, [r7, #20]
   return(result);
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d1e5      	bne.n	800976a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2220      	movs	r2, #32
 80097a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097ae:	2303      	movs	r3, #3
 80097b0:	e012      	b.n	80097d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2220      	movs	r2, #32
 80097b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2220      	movs	r2, #32
 80097be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2200      	movs	r2, #0
 80097c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2200      	movs	r2, #0
 80097d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80097d6:	2300      	movs	r3, #0
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3758      	adds	r7, #88	@ 0x58
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	603b      	str	r3, [r7, #0]
 80097ec:	4613      	mov	r3, r2
 80097ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097f0:	e04f      	b.n	8009892 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097f2:	69bb      	ldr	r3, [r7, #24]
 80097f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097f8:	d04b      	beq.n	8009892 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097fa:	f7f8 f8eb 	bl	80019d4 <HAL_GetTick>
 80097fe:	4602      	mov	r2, r0
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	1ad3      	subs	r3, r2, r3
 8009804:	69ba      	ldr	r2, [r7, #24]
 8009806:	429a      	cmp	r2, r3
 8009808:	d302      	bcc.n	8009810 <UART_WaitOnFlagUntilTimeout+0x30>
 800980a:	69bb      	ldr	r3, [r7, #24]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d101      	bne.n	8009814 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009810:	2303      	movs	r3, #3
 8009812:	e04e      	b.n	80098b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f003 0304 	and.w	r3, r3, #4
 800981e:	2b00      	cmp	r3, #0
 8009820:	d037      	beq.n	8009892 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	2b80      	cmp	r3, #128	@ 0x80
 8009826:	d034      	beq.n	8009892 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	2b40      	cmp	r3, #64	@ 0x40
 800982c:	d031      	beq.n	8009892 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	69db      	ldr	r3, [r3, #28]
 8009834:	f003 0308 	and.w	r3, r3, #8
 8009838:	2b08      	cmp	r3, #8
 800983a:	d110      	bne.n	800985e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2208      	movs	r2, #8
 8009842:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009844:	68f8      	ldr	r0, [r7, #12]
 8009846:	f000 f838 	bl	80098ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2208      	movs	r2, #8
 800984e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2200      	movs	r2, #0
 8009856:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800985a:	2301      	movs	r3, #1
 800985c:	e029      	b.n	80098b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	69db      	ldr	r3, [r3, #28]
 8009864:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009868:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800986c:	d111      	bne.n	8009892 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009876:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009878:	68f8      	ldr	r0, [r7, #12]
 800987a:	f000 f81e 	bl	80098ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2220      	movs	r2, #32
 8009882:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2200      	movs	r2, #0
 800988a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800988e:	2303      	movs	r3, #3
 8009890:	e00f      	b.n	80098b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	69da      	ldr	r2, [r3, #28]
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	4013      	ands	r3, r2
 800989c:	68ba      	ldr	r2, [r7, #8]
 800989e:	429a      	cmp	r2, r3
 80098a0:	bf0c      	ite	eq
 80098a2:	2301      	moveq	r3, #1
 80098a4:	2300      	movne	r3, #0
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	461a      	mov	r2, r3
 80098aa:	79fb      	ldrb	r3, [r7, #7]
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d0a0      	beq.n	80097f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098b0:	2300      	movs	r3, #0
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098ba:	b480      	push	{r7}
 80098bc:	b095      	sub	sp, #84	@ 0x54
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098ca:	e853 3f00 	ldrex	r3, [r3]
 80098ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80098d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80098d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	461a      	mov	r2, r3
 80098de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80098e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80098e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80098e8:	e841 2300 	strex	r3, r2, [r1]
 80098ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80098ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d1e6      	bne.n	80098c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	3308      	adds	r3, #8
 80098fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098fc:	6a3b      	ldr	r3, [r7, #32]
 80098fe:	e853 3f00 	ldrex	r3, [r3]
 8009902:	61fb      	str	r3, [r7, #28]
   return(result);
 8009904:	69fb      	ldr	r3, [r7, #28]
 8009906:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800990a:	f023 0301 	bic.w	r3, r3, #1
 800990e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	3308      	adds	r3, #8
 8009916:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009918:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800991a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800991c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800991e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009920:	e841 2300 	strex	r3, r2, [r1]
 8009924:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009928:	2b00      	cmp	r3, #0
 800992a:	d1e3      	bne.n	80098f4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009930:	2b01      	cmp	r3, #1
 8009932:	d118      	bne.n	8009966 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	e853 3f00 	ldrex	r3, [r3]
 8009940:	60bb      	str	r3, [r7, #8]
   return(result);
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	f023 0310 	bic.w	r3, r3, #16
 8009948:	647b      	str	r3, [r7, #68]	@ 0x44
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	461a      	mov	r2, r3
 8009950:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009952:	61bb      	str	r3, [r7, #24]
 8009954:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009956:	6979      	ldr	r1, [r7, #20]
 8009958:	69ba      	ldr	r2, [r7, #24]
 800995a:	e841 2300 	strex	r3, r2, [r1]
 800995e:	613b      	str	r3, [r7, #16]
   return(result);
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d1e6      	bne.n	8009934 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2220      	movs	r2, #32
 800996a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800997a:	bf00      	nop
 800997c:	3754      	adds	r7, #84	@ 0x54
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr

08009986 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b084      	sub	sp, #16
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009992:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2200      	movs	r2, #0
 8009998:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f7ff fc0f 	bl	80091c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099a2:	bf00      	nop
 80099a4:	3710      	adds	r7, #16
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}

080099aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b088      	sub	sp, #32
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	e853 3f00 	ldrex	r3, [r3]
 80099be:	60bb      	str	r3, [r7, #8]
   return(result);
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099c6:	61fb      	str	r3, [r7, #28]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	461a      	mov	r2, r3
 80099ce:	69fb      	ldr	r3, [r7, #28]
 80099d0:	61bb      	str	r3, [r7, #24]
 80099d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d4:	6979      	ldr	r1, [r7, #20]
 80099d6:	69ba      	ldr	r2, [r7, #24]
 80099d8:	e841 2300 	strex	r3, r2, [r1]
 80099dc:	613b      	str	r3, [r7, #16]
   return(result);
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d1e6      	bne.n	80099b2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2220      	movs	r2, #32
 80099e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f7ff fbda 	bl	80091ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099f8:	bf00      	nop
 80099fa:	3720      	adds	r7, #32
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009a08:	bf00      	nop
 8009a0a:	370c      	adds	r7, #12
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009a1c:	bf00      	nop
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009a30:	bf00      	nop
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b085      	sub	sp, #20
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009a4a:	2b01      	cmp	r3, #1
 8009a4c:	d101      	bne.n	8009a52 <HAL_UARTEx_DisableFifoMode+0x16>
 8009a4e:	2302      	movs	r3, #2
 8009a50:	e027      	b.n	8009aa2 <HAL_UARTEx_DisableFifoMode+0x66>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2201      	movs	r2, #1
 8009a56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2224      	movs	r2, #36	@ 0x24
 8009a5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f022 0201 	bic.w	r2, r2, #1
 8009a78:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009a80:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2200      	movs	r2, #0
 8009a86:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	68fa      	ldr	r2, [r7, #12]
 8009a8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2220      	movs	r2, #32
 8009a94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009aa0:	2300      	movs	r3, #0
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3714      	adds	r7, #20
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr

08009aae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b084      	sub	sp, #16
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
 8009ab6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009abe:	2b01      	cmp	r3, #1
 8009ac0:	d101      	bne.n	8009ac6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009ac2:	2302      	movs	r3, #2
 8009ac4:	e02d      	b.n	8009b22 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2224      	movs	r2, #36	@ 0x24
 8009ad2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f022 0201 	bic.w	r2, r2, #1
 8009aec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	683a      	ldr	r2, [r7, #0]
 8009afe:	430a      	orrs	r2, r1
 8009b00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f000 f850 	bl	8009ba8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	68fa      	ldr	r2, [r7, #12]
 8009b0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2220      	movs	r2, #32
 8009b14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3710      	adds	r7, #16
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}

08009b2a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b2a:	b580      	push	{r7, lr}
 8009b2c:	b084      	sub	sp, #16
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
 8009b32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d101      	bne.n	8009b42 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009b3e:	2302      	movs	r3, #2
 8009b40:	e02d      	b.n	8009b9e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2201      	movs	r2, #1
 8009b46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2224      	movs	r2, #36	@ 0x24
 8009b4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f022 0201 	bic.w	r2, r2, #1
 8009b68:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	683a      	ldr	r2, [r7, #0]
 8009b7a:	430a      	orrs	r2, r1
 8009b7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 f812 	bl	8009ba8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	68fa      	ldr	r2, [r7, #12]
 8009b8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2220      	movs	r2, #32
 8009b90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3710      	adds	r7, #16
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
	...

08009ba8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b085      	sub	sp, #20
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d108      	bne.n	8009bca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009bc8:	e031      	b.n	8009c2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009bca:	2308      	movs	r3, #8
 8009bcc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009bce:	2308      	movs	r3, #8
 8009bd0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	0e5b      	lsrs	r3, r3, #25
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	f003 0307 	and.w	r3, r3, #7
 8009be0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	0f5b      	lsrs	r3, r3, #29
 8009bea:	b2db      	uxtb	r3, r3
 8009bec:	f003 0307 	and.w	r3, r3, #7
 8009bf0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009bf2:	7bbb      	ldrb	r3, [r7, #14]
 8009bf4:	7b3a      	ldrb	r2, [r7, #12]
 8009bf6:	4911      	ldr	r1, [pc, #68]	@ (8009c3c <UARTEx_SetNbDataToProcess+0x94>)
 8009bf8:	5c8a      	ldrb	r2, [r1, r2]
 8009bfa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009bfe:	7b3a      	ldrb	r2, [r7, #12]
 8009c00:	490f      	ldr	r1, [pc, #60]	@ (8009c40 <UARTEx_SetNbDataToProcess+0x98>)
 8009c02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c04:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c08:	b29a      	uxth	r2, r3
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c10:	7bfb      	ldrb	r3, [r7, #15]
 8009c12:	7b7a      	ldrb	r2, [r7, #13]
 8009c14:	4909      	ldr	r1, [pc, #36]	@ (8009c3c <UARTEx_SetNbDataToProcess+0x94>)
 8009c16:	5c8a      	ldrb	r2, [r1, r2]
 8009c18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009c1c:	7b7a      	ldrb	r2, [r7, #13]
 8009c1e:	4908      	ldr	r1, [pc, #32]	@ (8009c40 <UARTEx_SetNbDataToProcess+0x98>)
 8009c20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c22:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c26:	b29a      	uxth	r2, r3
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009c2e:	bf00      	nop
 8009c30:	3714      	adds	r7, #20
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr
 8009c3a:	bf00      	nop
 8009c3c:	0800aea8 	.word	0x0800aea8
 8009c40:	0800aeb0 	.word	0x0800aeb0

08009c44 <std>:
 8009c44:	2300      	movs	r3, #0
 8009c46:	b510      	push	{r4, lr}
 8009c48:	4604      	mov	r4, r0
 8009c4a:	6083      	str	r3, [r0, #8]
 8009c4c:	8181      	strh	r1, [r0, #12]
 8009c4e:	4619      	mov	r1, r3
 8009c50:	6643      	str	r3, [r0, #100]	@ 0x64
 8009c52:	81c2      	strh	r2, [r0, #14]
 8009c54:	2208      	movs	r2, #8
 8009c56:	6183      	str	r3, [r0, #24]
 8009c58:	e9c0 3300 	strd	r3, r3, [r0]
 8009c5c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c60:	305c      	adds	r0, #92	@ 0x5c
 8009c62:	f000 f9f9 	bl	800a058 <memset>
 8009c66:	4b0d      	ldr	r3, [pc, #52]	@ (8009c9c <std+0x58>)
 8009c68:	6224      	str	r4, [r4, #32]
 8009c6a:	6263      	str	r3, [r4, #36]	@ 0x24
 8009c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8009ca0 <std+0x5c>)
 8009c6e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009c70:	4b0c      	ldr	r3, [pc, #48]	@ (8009ca4 <std+0x60>)
 8009c72:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009c74:	4b0c      	ldr	r3, [pc, #48]	@ (8009ca8 <std+0x64>)
 8009c76:	6323      	str	r3, [r4, #48]	@ 0x30
 8009c78:	4b0c      	ldr	r3, [pc, #48]	@ (8009cac <std+0x68>)
 8009c7a:	429c      	cmp	r4, r3
 8009c7c:	d006      	beq.n	8009c8c <std+0x48>
 8009c7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009c82:	4294      	cmp	r4, r2
 8009c84:	d002      	beq.n	8009c8c <std+0x48>
 8009c86:	33d0      	adds	r3, #208	@ 0xd0
 8009c88:	429c      	cmp	r4, r3
 8009c8a:	d105      	bne.n	8009c98 <std+0x54>
 8009c8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c94:	f000 ba58 	b.w	800a148 <__retarget_lock_init_recursive>
 8009c98:	bd10      	pop	{r4, pc}
 8009c9a:	bf00      	nop
 8009c9c:	08009ea9 	.word	0x08009ea9
 8009ca0:	08009ecb 	.word	0x08009ecb
 8009ca4:	08009f03 	.word	0x08009f03
 8009ca8:	08009f27 	.word	0x08009f27
 8009cac:	2000035c 	.word	0x2000035c

08009cb0 <stdio_exit_handler>:
 8009cb0:	4a02      	ldr	r2, [pc, #8]	@ (8009cbc <stdio_exit_handler+0xc>)
 8009cb2:	4903      	ldr	r1, [pc, #12]	@ (8009cc0 <stdio_exit_handler+0x10>)
 8009cb4:	4803      	ldr	r0, [pc, #12]	@ (8009cc4 <stdio_exit_handler+0x14>)
 8009cb6:	f000 b869 	b.w	8009d8c <_fwalk_sglue>
 8009cba:	bf00      	nop
 8009cbc:	20000014 	.word	0x20000014
 8009cc0:	0800a9f1 	.word	0x0800a9f1
 8009cc4:	20000024 	.word	0x20000024

08009cc8 <cleanup_stdio>:
 8009cc8:	6841      	ldr	r1, [r0, #4]
 8009cca:	4b0c      	ldr	r3, [pc, #48]	@ (8009cfc <cleanup_stdio+0x34>)
 8009ccc:	4299      	cmp	r1, r3
 8009cce:	b510      	push	{r4, lr}
 8009cd0:	4604      	mov	r4, r0
 8009cd2:	d001      	beq.n	8009cd8 <cleanup_stdio+0x10>
 8009cd4:	f000 fe8c 	bl	800a9f0 <_fflush_r>
 8009cd8:	68a1      	ldr	r1, [r4, #8]
 8009cda:	4b09      	ldr	r3, [pc, #36]	@ (8009d00 <cleanup_stdio+0x38>)
 8009cdc:	4299      	cmp	r1, r3
 8009cde:	d002      	beq.n	8009ce6 <cleanup_stdio+0x1e>
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	f000 fe85 	bl	800a9f0 <_fflush_r>
 8009ce6:	68e1      	ldr	r1, [r4, #12]
 8009ce8:	4b06      	ldr	r3, [pc, #24]	@ (8009d04 <cleanup_stdio+0x3c>)
 8009cea:	4299      	cmp	r1, r3
 8009cec:	d004      	beq.n	8009cf8 <cleanup_stdio+0x30>
 8009cee:	4620      	mov	r0, r4
 8009cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cf4:	f000 be7c 	b.w	800a9f0 <_fflush_r>
 8009cf8:	bd10      	pop	{r4, pc}
 8009cfa:	bf00      	nop
 8009cfc:	2000035c 	.word	0x2000035c
 8009d00:	200003c4 	.word	0x200003c4
 8009d04:	2000042c 	.word	0x2000042c

08009d08 <global_stdio_init.part.0>:
 8009d08:	b510      	push	{r4, lr}
 8009d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8009d38 <global_stdio_init.part.0+0x30>)
 8009d0c:	2104      	movs	r1, #4
 8009d0e:	4c0b      	ldr	r4, [pc, #44]	@ (8009d3c <global_stdio_init.part.0+0x34>)
 8009d10:	4a0b      	ldr	r2, [pc, #44]	@ (8009d40 <global_stdio_init.part.0+0x38>)
 8009d12:	4620      	mov	r0, r4
 8009d14:	601a      	str	r2, [r3, #0]
 8009d16:	2200      	movs	r2, #0
 8009d18:	f7ff ff94 	bl	8009c44 <std>
 8009d1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009d20:	2201      	movs	r2, #1
 8009d22:	2109      	movs	r1, #9
 8009d24:	f7ff ff8e 	bl	8009c44 <std>
 8009d28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009d2c:	2202      	movs	r2, #2
 8009d2e:	2112      	movs	r1, #18
 8009d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d34:	f7ff bf86 	b.w	8009c44 <std>
 8009d38:	20000494 	.word	0x20000494
 8009d3c:	2000035c 	.word	0x2000035c
 8009d40:	08009cb1 	.word	0x08009cb1

08009d44 <__sfp_lock_acquire>:
 8009d44:	4801      	ldr	r0, [pc, #4]	@ (8009d4c <__sfp_lock_acquire+0x8>)
 8009d46:	f000 ba00 	b.w	800a14a <__retarget_lock_acquire_recursive>
 8009d4a:	bf00      	nop
 8009d4c:	2000049d 	.word	0x2000049d

08009d50 <__sfp_lock_release>:
 8009d50:	4801      	ldr	r0, [pc, #4]	@ (8009d58 <__sfp_lock_release+0x8>)
 8009d52:	f000 b9fb 	b.w	800a14c <__retarget_lock_release_recursive>
 8009d56:	bf00      	nop
 8009d58:	2000049d 	.word	0x2000049d

08009d5c <__sinit>:
 8009d5c:	b510      	push	{r4, lr}
 8009d5e:	4604      	mov	r4, r0
 8009d60:	f7ff fff0 	bl	8009d44 <__sfp_lock_acquire>
 8009d64:	6a23      	ldr	r3, [r4, #32]
 8009d66:	b11b      	cbz	r3, 8009d70 <__sinit+0x14>
 8009d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d6c:	f7ff bff0 	b.w	8009d50 <__sfp_lock_release>
 8009d70:	4b04      	ldr	r3, [pc, #16]	@ (8009d84 <__sinit+0x28>)
 8009d72:	6223      	str	r3, [r4, #32]
 8009d74:	4b04      	ldr	r3, [pc, #16]	@ (8009d88 <__sinit+0x2c>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d1f5      	bne.n	8009d68 <__sinit+0xc>
 8009d7c:	f7ff ffc4 	bl	8009d08 <global_stdio_init.part.0>
 8009d80:	e7f2      	b.n	8009d68 <__sinit+0xc>
 8009d82:	bf00      	nop
 8009d84:	08009cc9 	.word	0x08009cc9
 8009d88:	20000494 	.word	0x20000494

08009d8c <_fwalk_sglue>:
 8009d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d90:	4607      	mov	r7, r0
 8009d92:	4688      	mov	r8, r1
 8009d94:	4614      	mov	r4, r2
 8009d96:	2600      	movs	r6, #0
 8009d98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d9c:	f1b9 0901 	subs.w	r9, r9, #1
 8009da0:	d505      	bpl.n	8009dae <_fwalk_sglue+0x22>
 8009da2:	6824      	ldr	r4, [r4, #0]
 8009da4:	2c00      	cmp	r4, #0
 8009da6:	d1f7      	bne.n	8009d98 <_fwalk_sglue+0xc>
 8009da8:	4630      	mov	r0, r6
 8009daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dae:	89ab      	ldrh	r3, [r5, #12]
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	d907      	bls.n	8009dc4 <_fwalk_sglue+0x38>
 8009db4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009db8:	3301      	adds	r3, #1
 8009dba:	d003      	beq.n	8009dc4 <_fwalk_sglue+0x38>
 8009dbc:	4629      	mov	r1, r5
 8009dbe:	4638      	mov	r0, r7
 8009dc0:	47c0      	blx	r8
 8009dc2:	4306      	orrs	r6, r0
 8009dc4:	3568      	adds	r5, #104	@ 0x68
 8009dc6:	e7e9      	b.n	8009d9c <_fwalk_sglue+0x10>

08009dc8 <iprintf>:
 8009dc8:	b40f      	push	{r0, r1, r2, r3}
 8009dca:	b507      	push	{r0, r1, r2, lr}
 8009dcc:	4906      	ldr	r1, [pc, #24]	@ (8009de8 <iprintf+0x20>)
 8009dce:	ab04      	add	r3, sp, #16
 8009dd0:	6808      	ldr	r0, [r1, #0]
 8009dd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dd6:	6881      	ldr	r1, [r0, #8]
 8009dd8:	9301      	str	r3, [sp, #4]
 8009dda:	f000 fadb 	bl	800a394 <_vfiprintf_r>
 8009dde:	b003      	add	sp, #12
 8009de0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009de4:	b004      	add	sp, #16
 8009de6:	4770      	bx	lr
 8009de8:	20000020 	.word	0x20000020

08009dec <_puts_r>:
 8009dec:	6a03      	ldr	r3, [r0, #32]
 8009dee:	b570      	push	{r4, r5, r6, lr}
 8009df0:	4605      	mov	r5, r0
 8009df2:	460e      	mov	r6, r1
 8009df4:	6884      	ldr	r4, [r0, #8]
 8009df6:	b90b      	cbnz	r3, 8009dfc <_puts_r+0x10>
 8009df8:	f7ff ffb0 	bl	8009d5c <__sinit>
 8009dfc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009dfe:	07db      	lsls	r3, r3, #31
 8009e00:	d405      	bmi.n	8009e0e <_puts_r+0x22>
 8009e02:	89a3      	ldrh	r3, [r4, #12]
 8009e04:	0598      	lsls	r0, r3, #22
 8009e06:	d402      	bmi.n	8009e0e <_puts_r+0x22>
 8009e08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e0a:	f000 f99e 	bl	800a14a <__retarget_lock_acquire_recursive>
 8009e0e:	89a3      	ldrh	r3, [r4, #12]
 8009e10:	0719      	lsls	r1, r3, #28
 8009e12:	d502      	bpl.n	8009e1a <_puts_r+0x2e>
 8009e14:	6923      	ldr	r3, [r4, #16]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d135      	bne.n	8009e86 <_puts_r+0x9a>
 8009e1a:	4621      	mov	r1, r4
 8009e1c:	4628      	mov	r0, r5
 8009e1e:	f000 f8c5 	bl	8009fac <__swsetup_r>
 8009e22:	b380      	cbz	r0, 8009e86 <_puts_r+0x9a>
 8009e24:	f04f 35ff 	mov.w	r5, #4294967295
 8009e28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e2a:	07da      	lsls	r2, r3, #31
 8009e2c:	d405      	bmi.n	8009e3a <_puts_r+0x4e>
 8009e2e:	89a3      	ldrh	r3, [r4, #12]
 8009e30:	059b      	lsls	r3, r3, #22
 8009e32:	d402      	bmi.n	8009e3a <_puts_r+0x4e>
 8009e34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e36:	f000 f989 	bl	800a14c <__retarget_lock_release_recursive>
 8009e3a:	4628      	mov	r0, r5
 8009e3c:	bd70      	pop	{r4, r5, r6, pc}
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	da04      	bge.n	8009e4c <_puts_r+0x60>
 8009e42:	69a2      	ldr	r2, [r4, #24]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	dc17      	bgt.n	8009e78 <_puts_r+0x8c>
 8009e48:	290a      	cmp	r1, #10
 8009e4a:	d015      	beq.n	8009e78 <_puts_r+0x8c>
 8009e4c:	6823      	ldr	r3, [r4, #0]
 8009e4e:	1c5a      	adds	r2, r3, #1
 8009e50:	6022      	str	r2, [r4, #0]
 8009e52:	7019      	strb	r1, [r3, #0]
 8009e54:	68a3      	ldr	r3, [r4, #8]
 8009e56:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009e5a:	3b01      	subs	r3, #1
 8009e5c:	60a3      	str	r3, [r4, #8]
 8009e5e:	2900      	cmp	r1, #0
 8009e60:	d1ed      	bne.n	8009e3e <_puts_r+0x52>
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	da11      	bge.n	8009e8a <_puts_r+0x9e>
 8009e66:	4622      	mov	r2, r4
 8009e68:	210a      	movs	r1, #10
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	f000 f85f 	bl	8009f2e <__swbuf_r>
 8009e70:	3001      	adds	r0, #1
 8009e72:	d0d7      	beq.n	8009e24 <_puts_r+0x38>
 8009e74:	250a      	movs	r5, #10
 8009e76:	e7d7      	b.n	8009e28 <_puts_r+0x3c>
 8009e78:	4622      	mov	r2, r4
 8009e7a:	4628      	mov	r0, r5
 8009e7c:	f000 f857 	bl	8009f2e <__swbuf_r>
 8009e80:	3001      	adds	r0, #1
 8009e82:	d1e7      	bne.n	8009e54 <_puts_r+0x68>
 8009e84:	e7ce      	b.n	8009e24 <_puts_r+0x38>
 8009e86:	3e01      	subs	r6, #1
 8009e88:	e7e4      	b.n	8009e54 <_puts_r+0x68>
 8009e8a:	6823      	ldr	r3, [r4, #0]
 8009e8c:	1c5a      	adds	r2, r3, #1
 8009e8e:	6022      	str	r2, [r4, #0]
 8009e90:	220a      	movs	r2, #10
 8009e92:	701a      	strb	r2, [r3, #0]
 8009e94:	e7ee      	b.n	8009e74 <_puts_r+0x88>
	...

08009e98 <puts>:
 8009e98:	4b02      	ldr	r3, [pc, #8]	@ (8009ea4 <puts+0xc>)
 8009e9a:	4601      	mov	r1, r0
 8009e9c:	6818      	ldr	r0, [r3, #0]
 8009e9e:	f7ff bfa5 	b.w	8009dec <_puts_r>
 8009ea2:	bf00      	nop
 8009ea4:	20000020 	.word	0x20000020

08009ea8 <__sread>:
 8009ea8:	b510      	push	{r4, lr}
 8009eaa:	460c      	mov	r4, r1
 8009eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eb0:	f000 f8fc 	bl	800a0ac <_read_r>
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	bfab      	itete	ge
 8009eb8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009eba:	89a3      	ldrhlt	r3, [r4, #12]
 8009ebc:	181b      	addge	r3, r3, r0
 8009ebe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009ec2:	bfac      	ite	ge
 8009ec4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009ec6:	81a3      	strhlt	r3, [r4, #12]
 8009ec8:	bd10      	pop	{r4, pc}

08009eca <__swrite>:
 8009eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ece:	461f      	mov	r7, r3
 8009ed0:	898b      	ldrh	r3, [r1, #12]
 8009ed2:	4605      	mov	r5, r0
 8009ed4:	460c      	mov	r4, r1
 8009ed6:	05db      	lsls	r3, r3, #23
 8009ed8:	4616      	mov	r6, r2
 8009eda:	d505      	bpl.n	8009ee8 <__swrite+0x1e>
 8009edc:	2302      	movs	r3, #2
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ee4:	f000 f8d0 	bl	800a088 <_lseek_r>
 8009ee8:	89a3      	ldrh	r3, [r4, #12]
 8009eea:	4632      	mov	r2, r6
 8009eec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ef0:	4628      	mov	r0, r5
 8009ef2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ef6:	81a3      	strh	r3, [r4, #12]
 8009ef8:	463b      	mov	r3, r7
 8009efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009efe:	f000 b8e7 	b.w	800a0d0 <_write_r>

08009f02 <__sseek>:
 8009f02:	b510      	push	{r4, lr}
 8009f04:	460c      	mov	r4, r1
 8009f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f0a:	f000 f8bd 	bl	800a088 <_lseek_r>
 8009f0e:	1c43      	adds	r3, r0, #1
 8009f10:	89a3      	ldrh	r3, [r4, #12]
 8009f12:	bf15      	itete	ne
 8009f14:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009f16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009f1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009f1e:	81a3      	strheq	r3, [r4, #12]
 8009f20:	bf18      	it	ne
 8009f22:	81a3      	strhne	r3, [r4, #12]
 8009f24:	bd10      	pop	{r4, pc}

08009f26 <__sclose>:
 8009f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f2a:	f000 b89d 	b.w	800a068 <_close_r>

08009f2e <__swbuf_r>:
 8009f2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f30:	460e      	mov	r6, r1
 8009f32:	4614      	mov	r4, r2
 8009f34:	4605      	mov	r5, r0
 8009f36:	b118      	cbz	r0, 8009f40 <__swbuf_r+0x12>
 8009f38:	6a03      	ldr	r3, [r0, #32]
 8009f3a:	b90b      	cbnz	r3, 8009f40 <__swbuf_r+0x12>
 8009f3c:	f7ff ff0e 	bl	8009d5c <__sinit>
 8009f40:	69a3      	ldr	r3, [r4, #24]
 8009f42:	60a3      	str	r3, [r4, #8]
 8009f44:	89a3      	ldrh	r3, [r4, #12]
 8009f46:	071a      	lsls	r2, r3, #28
 8009f48:	d501      	bpl.n	8009f4e <__swbuf_r+0x20>
 8009f4a:	6923      	ldr	r3, [r4, #16]
 8009f4c:	b943      	cbnz	r3, 8009f60 <__swbuf_r+0x32>
 8009f4e:	4621      	mov	r1, r4
 8009f50:	4628      	mov	r0, r5
 8009f52:	f000 f82b 	bl	8009fac <__swsetup_r>
 8009f56:	b118      	cbz	r0, 8009f60 <__swbuf_r+0x32>
 8009f58:	f04f 37ff 	mov.w	r7, #4294967295
 8009f5c:	4638      	mov	r0, r7
 8009f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f60:	6823      	ldr	r3, [r4, #0]
 8009f62:	b2f6      	uxtb	r6, r6
 8009f64:	6922      	ldr	r2, [r4, #16]
 8009f66:	4637      	mov	r7, r6
 8009f68:	1a98      	subs	r0, r3, r2
 8009f6a:	6963      	ldr	r3, [r4, #20]
 8009f6c:	4283      	cmp	r3, r0
 8009f6e:	dc05      	bgt.n	8009f7c <__swbuf_r+0x4e>
 8009f70:	4621      	mov	r1, r4
 8009f72:	4628      	mov	r0, r5
 8009f74:	f000 fd3c 	bl	800a9f0 <_fflush_r>
 8009f78:	2800      	cmp	r0, #0
 8009f7a:	d1ed      	bne.n	8009f58 <__swbuf_r+0x2a>
 8009f7c:	68a3      	ldr	r3, [r4, #8]
 8009f7e:	3b01      	subs	r3, #1
 8009f80:	60a3      	str	r3, [r4, #8]
 8009f82:	6823      	ldr	r3, [r4, #0]
 8009f84:	1c5a      	adds	r2, r3, #1
 8009f86:	6022      	str	r2, [r4, #0]
 8009f88:	701e      	strb	r6, [r3, #0]
 8009f8a:	1c43      	adds	r3, r0, #1
 8009f8c:	6962      	ldr	r2, [r4, #20]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d004      	beq.n	8009f9c <__swbuf_r+0x6e>
 8009f92:	89a3      	ldrh	r3, [r4, #12]
 8009f94:	07db      	lsls	r3, r3, #31
 8009f96:	d5e1      	bpl.n	8009f5c <__swbuf_r+0x2e>
 8009f98:	2e0a      	cmp	r6, #10
 8009f9a:	d1df      	bne.n	8009f5c <__swbuf_r+0x2e>
 8009f9c:	4621      	mov	r1, r4
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	f000 fd26 	bl	800a9f0 <_fflush_r>
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	d0d9      	beq.n	8009f5c <__swbuf_r+0x2e>
 8009fa8:	e7d6      	b.n	8009f58 <__swbuf_r+0x2a>
	...

08009fac <__swsetup_r>:
 8009fac:	b538      	push	{r3, r4, r5, lr}
 8009fae:	4b29      	ldr	r3, [pc, #164]	@ (800a054 <__swsetup_r+0xa8>)
 8009fb0:	4605      	mov	r5, r0
 8009fb2:	460c      	mov	r4, r1
 8009fb4:	6818      	ldr	r0, [r3, #0]
 8009fb6:	b118      	cbz	r0, 8009fc0 <__swsetup_r+0x14>
 8009fb8:	6a03      	ldr	r3, [r0, #32]
 8009fba:	b90b      	cbnz	r3, 8009fc0 <__swsetup_r+0x14>
 8009fbc:	f7ff fece 	bl	8009d5c <__sinit>
 8009fc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fc4:	0719      	lsls	r1, r3, #28
 8009fc6:	d422      	bmi.n	800a00e <__swsetup_r+0x62>
 8009fc8:	06da      	lsls	r2, r3, #27
 8009fca:	d407      	bmi.n	8009fdc <__swsetup_r+0x30>
 8009fcc:	2209      	movs	r2, #9
 8009fce:	602a      	str	r2, [r5, #0]
 8009fd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd8:	81a3      	strh	r3, [r4, #12]
 8009fda:	e033      	b.n	800a044 <__swsetup_r+0x98>
 8009fdc:	0758      	lsls	r0, r3, #29
 8009fde:	d512      	bpl.n	800a006 <__swsetup_r+0x5a>
 8009fe0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009fe2:	b141      	cbz	r1, 8009ff6 <__swsetup_r+0x4a>
 8009fe4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009fe8:	4299      	cmp	r1, r3
 8009fea:	d002      	beq.n	8009ff2 <__swsetup_r+0x46>
 8009fec:	4628      	mov	r0, r5
 8009fee:	f000 f8af 	bl	800a150 <_free_r>
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ff6:	89a3      	ldrh	r3, [r4, #12]
 8009ff8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009ffc:	81a3      	strh	r3, [r4, #12]
 8009ffe:	2300      	movs	r3, #0
 800a000:	6063      	str	r3, [r4, #4]
 800a002:	6923      	ldr	r3, [r4, #16]
 800a004:	6023      	str	r3, [r4, #0]
 800a006:	89a3      	ldrh	r3, [r4, #12]
 800a008:	f043 0308 	orr.w	r3, r3, #8
 800a00c:	81a3      	strh	r3, [r4, #12]
 800a00e:	6923      	ldr	r3, [r4, #16]
 800a010:	b94b      	cbnz	r3, 800a026 <__swsetup_r+0x7a>
 800a012:	89a3      	ldrh	r3, [r4, #12]
 800a014:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a018:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a01c:	d003      	beq.n	800a026 <__swsetup_r+0x7a>
 800a01e:	4621      	mov	r1, r4
 800a020:	4628      	mov	r0, r5
 800a022:	f000 fd32 	bl	800aa8a <__smakebuf_r>
 800a026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a02a:	f013 0201 	ands.w	r2, r3, #1
 800a02e:	d00a      	beq.n	800a046 <__swsetup_r+0x9a>
 800a030:	2200      	movs	r2, #0
 800a032:	60a2      	str	r2, [r4, #8]
 800a034:	6962      	ldr	r2, [r4, #20]
 800a036:	4252      	negs	r2, r2
 800a038:	61a2      	str	r2, [r4, #24]
 800a03a:	6922      	ldr	r2, [r4, #16]
 800a03c:	b942      	cbnz	r2, 800a050 <__swsetup_r+0xa4>
 800a03e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a042:	d1c5      	bne.n	8009fd0 <__swsetup_r+0x24>
 800a044:	bd38      	pop	{r3, r4, r5, pc}
 800a046:	0799      	lsls	r1, r3, #30
 800a048:	bf58      	it	pl
 800a04a:	6962      	ldrpl	r2, [r4, #20]
 800a04c:	60a2      	str	r2, [r4, #8]
 800a04e:	e7f4      	b.n	800a03a <__swsetup_r+0x8e>
 800a050:	2000      	movs	r0, #0
 800a052:	e7f7      	b.n	800a044 <__swsetup_r+0x98>
 800a054:	20000020 	.word	0x20000020

0800a058 <memset>:
 800a058:	4402      	add	r2, r0
 800a05a:	4603      	mov	r3, r0
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d100      	bne.n	800a062 <memset+0xa>
 800a060:	4770      	bx	lr
 800a062:	f803 1b01 	strb.w	r1, [r3], #1
 800a066:	e7f9      	b.n	800a05c <memset+0x4>

0800a068 <_close_r>:
 800a068:	b538      	push	{r3, r4, r5, lr}
 800a06a:	2300      	movs	r3, #0
 800a06c:	4d05      	ldr	r5, [pc, #20]	@ (800a084 <_close_r+0x1c>)
 800a06e:	4604      	mov	r4, r0
 800a070:	4608      	mov	r0, r1
 800a072:	602b      	str	r3, [r5, #0]
 800a074:	f7f7 faeb 	bl	800164e <_close>
 800a078:	1c43      	adds	r3, r0, #1
 800a07a:	d102      	bne.n	800a082 <_close_r+0x1a>
 800a07c:	682b      	ldr	r3, [r5, #0]
 800a07e:	b103      	cbz	r3, 800a082 <_close_r+0x1a>
 800a080:	6023      	str	r3, [r4, #0]
 800a082:	bd38      	pop	{r3, r4, r5, pc}
 800a084:	20000498 	.word	0x20000498

0800a088 <_lseek_r>:
 800a088:	b538      	push	{r3, r4, r5, lr}
 800a08a:	4604      	mov	r4, r0
 800a08c:	4d06      	ldr	r5, [pc, #24]	@ (800a0a8 <_lseek_r+0x20>)
 800a08e:	4608      	mov	r0, r1
 800a090:	4611      	mov	r1, r2
 800a092:	2200      	movs	r2, #0
 800a094:	602a      	str	r2, [r5, #0]
 800a096:	461a      	mov	r2, r3
 800a098:	f7f7 fb00 	bl	800169c <_lseek>
 800a09c:	1c43      	adds	r3, r0, #1
 800a09e:	d102      	bne.n	800a0a6 <_lseek_r+0x1e>
 800a0a0:	682b      	ldr	r3, [r5, #0]
 800a0a2:	b103      	cbz	r3, 800a0a6 <_lseek_r+0x1e>
 800a0a4:	6023      	str	r3, [r4, #0]
 800a0a6:	bd38      	pop	{r3, r4, r5, pc}
 800a0a8:	20000498 	.word	0x20000498

0800a0ac <_read_r>:
 800a0ac:	b538      	push	{r3, r4, r5, lr}
 800a0ae:	4604      	mov	r4, r0
 800a0b0:	4d06      	ldr	r5, [pc, #24]	@ (800a0cc <_read_r+0x20>)
 800a0b2:	4608      	mov	r0, r1
 800a0b4:	4611      	mov	r1, r2
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	602a      	str	r2, [r5, #0]
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	f7f7 fa8e 	bl	80015dc <_read>
 800a0c0:	1c43      	adds	r3, r0, #1
 800a0c2:	d102      	bne.n	800a0ca <_read_r+0x1e>
 800a0c4:	682b      	ldr	r3, [r5, #0]
 800a0c6:	b103      	cbz	r3, 800a0ca <_read_r+0x1e>
 800a0c8:	6023      	str	r3, [r4, #0]
 800a0ca:	bd38      	pop	{r3, r4, r5, pc}
 800a0cc:	20000498 	.word	0x20000498

0800a0d0 <_write_r>:
 800a0d0:	b538      	push	{r3, r4, r5, lr}
 800a0d2:	4604      	mov	r4, r0
 800a0d4:	4d06      	ldr	r5, [pc, #24]	@ (800a0f0 <_write_r+0x20>)
 800a0d6:	4608      	mov	r0, r1
 800a0d8:	4611      	mov	r1, r2
 800a0da:	2200      	movs	r2, #0
 800a0dc:	602a      	str	r2, [r5, #0]
 800a0de:	461a      	mov	r2, r3
 800a0e0:	f7f7 fa99 	bl	8001616 <_write>
 800a0e4:	1c43      	adds	r3, r0, #1
 800a0e6:	d102      	bne.n	800a0ee <_write_r+0x1e>
 800a0e8:	682b      	ldr	r3, [r5, #0]
 800a0ea:	b103      	cbz	r3, 800a0ee <_write_r+0x1e>
 800a0ec:	6023      	str	r3, [r4, #0]
 800a0ee:	bd38      	pop	{r3, r4, r5, pc}
 800a0f0:	20000498 	.word	0x20000498

0800a0f4 <__errno>:
 800a0f4:	4b01      	ldr	r3, [pc, #4]	@ (800a0fc <__errno+0x8>)
 800a0f6:	6818      	ldr	r0, [r3, #0]
 800a0f8:	4770      	bx	lr
 800a0fa:	bf00      	nop
 800a0fc:	20000020 	.word	0x20000020

0800a100 <__libc_init_array>:
 800a100:	b570      	push	{r4, r5, r6, lr}
 800a102:	4d0d      	ldr	r5, [pc, #52]	@ (800a138 <__libc_init_array+0x38>)
 800a104:	2600      	movs	r6, #0
 800a106:	4c0d      	ldr	r4, [pc, #52]	@ (800a13c <__libc_init_array+0x3c>)
 800a108:	1b64      	subs	r4, r4, r5
 800a10a:	10a4      	asrs	r4, r4, #2
 800a10c:	42a6      	cmp	r6, r4
 800a10e:	d109      	bne.n	800a124 <__libc_init_array+0x24>
 800a110:	4d0b      	ldr	r5, [pc, #44]	@ (800a140 <__libc_init_array+0x40>)
 800a112:	2600      	movs	r6, #0
 800a114:	4c0b      	ldr	r4, [pc, #44]	@ (800a144 <__libc_init_array+0x44>)
 800a116:	f000 fd35 	bl	800ab84 <_init>
 800a11a:	1b64      	subs	r4, r4, r5
 800a11c:	10a4      	asrs	r4, r4, #2
 800a11e:	42a6      	cmp	r6, r4
 800a120:	d105      	bne.n	800a12e <__libc_init_array+0x2e>
 800a122:	bd70      	pop	{r4, r5, r6, pc}
 800a124:	f855 3b04 	ldr.w	r3, [r5], #4
 800a128:	3601      	adds	r6, #1
 800a12a:	4798      	blx	r3
 800a12c:	e7ee      	b.n	800a10c <__libc_init_array+0xc>
 800a12e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a132:	3601      	adds	r6, #1
 800a134:	4798      	blx	r3
 800a136:	e7f2      	b.n	800a11e <__libc_init_array+0x1e>
 800a138:	0800aef4 	.word	0x0800aef4
 800a13c:	0800aef4 	.word	0x0800aef4
 800a140:	0800aef4 	.word	0x0800aef4
 800a144:	0800aef8 	.word	0x0800aef8

0800a148 <__retarget_lock_init_recursive>:
 800a148:	4770      	bx	lr

0800a14a <__retarget_lock_acquire_recursive>:
 800a14a:	4770      	bx	lr

0800a14c <__retarget_lock_release_recursive>:
 800a14c:	4770      	bx	lr
	...

0800a150 <_free_r>:
 800a150:	b538      	push	{r3, r4, r5, lr}
 800a152:	4605      	mov	r5, r0
 800a154:	2900      	cmp	r1, #0
 800a156:	d041      	beq.n	800a1dc <_free_r+0x8c>
 800a158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a15c:	1f0c      	subs	r4, r1, #4
 800a15e:	2b00      	cmp	r3, #0
 800a160:	bfb8      	it	lt
 800a162:	18e4      	addlt	r4, r4, r3
 800a164:	f000 f8e0 	bl	800a328 <__malloc_lock>
 800a168:	4a1d      	ldr	r2, [pc, #116]	@ (800a1e0 <_free_r+0x90>)
 800a16a:	6813      	ldr	r3, [r2, #0]
 800a16c:	b933      	cbnz	r3, 800a17c <_free_r+0x2c>
 800a16e:	6063      	str	r3, [r4, #4]
 800a170:	6014      	str	r4, [r2, #0]
 800a172:	4628      	mov	r0, r5
 800a174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a178:	f000 b8dc 	b.w	800a334 <__malloc_unlock>
 800a17c:	42a3      	cmp	r3, r4
 800a17e:	d908      	bls.n	800a192 <_free_r+0x42>
 800a180:	6820      	ldr	r0, [r4, #0]
 800a182:	1821      	adds	r1, r4, r0
 800a184:	428b      	cmp	r3, r1
 800a186:	bf01      	itttt	eq
 800a188:	6819      	ldreq	r1, [r3, #0]
 800a18a:	685b      	ldreq	r3, [r3, #4]
 800a18c:	1809      	addeq	r1, r1, r0
 800a18e:	6021      	streq	r1, [r4, #0]
 800a190:	e7ed      	b.n	800a16e <_free_r+0x1e>
 800a192:	461a      	mov	r2, r3
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	b10b      	cbz	r3, 800a19c <_free_r+0x4c>
 800a198:	42a3      	cmp	r3, r4
 800a19a:	d9fa      	bls.n	800a192 <_free_r+0x42>
 800a19c:	6811      	ldr	r1, [r2, #0]
 800a19e:	1850      	adds	r0, r2, r1
 800a1a0:	42a0      	cmp	r0, r4
 800a1a2:	d10b      	bne.n	800a1bc <_free_r+0x6c>
 800a1a4:	6820      	ldr	r0, [r4, #0]
 800a1a6:	4401      	add	r1, r0
 800a1a8:	1850      	adds	r0, r2, r1
 800a1aa:	6011      	str	r1, [r2, #0]
 800a1ac:	4283      	cmp	r3, r0
 800a1ae:	d1e0      	bne.n	800a172 <_free_r+0x22>
 800a1b0:	6818      	ldr	r0, [r3, #0]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	4408      	add	r0, r1
 800a1b6:	6053      	str	r3, [r2, #4]
 800a1b8:	6010      	str	r0, [r2, #0]
 800a1ba:	e7da      	b.n	800a172 <_free_r+0x22>
 800a1bc:	d902      	bls.n	800a1c4 <_free_r+0x74>
 800a1be:	230c      	movs	r3, #12
 800a1c0:	602b      	str	r3, [r5, #0]
 800a1c2:	e7d6      	b.n	800a172 <_free_r+0x22>
 800a1c4:	6820      	ldr	r0, [r4, #0]
 800a1c6:	1821      	adds	r1, r4, r0
 800a1c8:	428b      	cmp	r3, r1
 800a1ca:	bf02      	ittt	eq
 800a1cc:	6819      	ldreq	r1, [r3, #0]
 800a1ce:	685b      	ldreq	r3, [r3, #4]
 800a1d0:	1809      	addeq	r1, r1, r0
 800a1d2:	6063      	str	r3, [r4, #4]
 800a1d4:	bf08      	it	eq
 800a1d6:	6021      	streq	r1, [r4, #0]
 800a1d8:	6054      	str	r4, [r2, #4]
 800a1da:	e7ca      	b.n	800a172 <_free_r+0x22>
 800a1dc:	bd38      	pop	{r3, r4, r5, pc}
 800a1de:	bf00      	nop
 800a1e0:	200004a4 	.word	0x200004a4

0800a1e4 <sbrk_aligned>:
 800a1e4:	b570      	push	{r4, r5, r6, lr}
 800a1e6:	4e0f      	ldr	r6, [pc, #60]	@ (800a224 <sbrk_aligned+0x40>)
 800a1e8:	460c      	mov	r4, r1
 800a1ea:	4605      	mov	r5, r0
 800a1ec:	6831      	ldr	r1, [r6, #0]
 800a1ee:	b911      	cbnz	r1, 800a1f6 <sbrk_aligned+0x12>
 800a1f0:	f000 fcaa 	bl	800ab48 <_sbrk_r>
 800a1f4:	6030      	str	r0, [r6, #0]
 800a1f6:	4621      	mov	r1, r4
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	f000 fca5 	bl	800ab48 <_sbrk_r>
 800a1fe:	1c43      	adds	r3, r0, #1
 800a200:	d103      	bne.n	800a20a <sbrk_aligned+0x26>
 800a202:	f04f 34ff 	mov.w	r4, #4294967295
 800a206:	4620      	mov	r0, r4
 800a208:	bd70      	pop	{r4, r5, r6, pc}
 800a20a:	1cc4      	adds	r4, r0, #3
 800a20c:	f024 0403 	bic.w	r4, r4, #3
 800a210:	42a0      	cmp	r0, r4
 800a212:	d0f8      	beq.n	800a206 <sbrk_aligned+0x22>
 800a214:	1a21      	subs	r1, r4, r0
 800a216:	4628      	mov	r0, r5
 800a218:	f000 fc96 	bl	800ab48 <_sbrk_r>
 800a21c:	3001      	adds	r0, #1
 800a21e:	d1f2      	bne.n	800a206 <sbrk_aligned+0x22>
 800a220:	e7ef      	b.n	800a202 <sbrk_aligned+0x1e>
 800a222:	bf00      	nop
 800a224:	200004a0 	.word	0x200004a0

0800a228 <_malloc_r>:
 800a228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a22c:	1ccd      	adds	r5, r1, #3
 800a22e:	4606      	mov	r6, r0
 800a230:	f025 0503 	bic.w	r5, r5, #3
 800a234:	3508      	adds	r5, #8
 800a236:	2d0c      	cmp	r5, #12
 800a238:	bf38      	it	cc
 800a23a:	250c      	movcc	r5, #12
 800a23c:	2d00      	cmp	r5, #0
 800a23e:	db01      	blt.n	800a244 <_malloc_r+0x1c>
 800a240:	42a9      	cmp	r1, r5
 800a242:	d904      	bls.n	800a24e <_malloc_r+0x26>
 800a244:	230c      	movs	r3, #12
 800a246:	6033      	str	r3, [r6, #0]
 800a248:	2000      	movs	r0, #0
 800a24a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a24e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a324 <_malloc_r+0xfc>
 800a252:	f000 f869 	bl	800a328 <__malloc_lock>
 800a256:	f8d8 3000 	ldr.w	r3, [r8]
 800a25a:	461c      	mov	r4, r3
 800a25c:	bb44      	cbnz	r4, 800a2b0 <_malloc_r+0x88>
 800a25e:	4629      	mov	r1, r5
 800a260:	4630      	mov	r0, r6
 800a262:	f7ff ffbf 	bl	800a1e4 <sbrk_aligned>
 800a266:	1c43      	adds	r3, r0, #1
 800a268:	4604      	mov	r4, r0
 800a26a:	d158      	bne.n	800a31e <_malloc_r+0xf6>
 800a26c:	f8d8 4000 	ldr.w	r4, [r8]
 800a270:	4627      	mov	r7, r4
 800a272:	2f00      	cmp	r7, #0
 800a274:	d143      	bne.n	800a2fe <_malloc_r+0xd6>
 800a276:	2c00      	cmp	r4, #0
 800a278:	d04b      	beq.n	800a312 <_malloc_r+0xea>
 800a27a:	6823      	ldr	r3, [r4, #0]
 800a27c:	4639      	mov	r1, r7
 800a27e:	4630      	mov	r0, r6
 800a280:	eb04 0903 	add.w	r9, r4, r3
 800a284:	f000 fc60 	bl	800ab48 <_sbrk_r>
 800a288:	4581      	cmp	r9, r0
 800a28a:	d142      	bne.n	800a312 <_malloc_r+0xea>
 800a28c:	6821      	ldr	r1, [r4, #0]
 800a28e:	4630      	mov	r0, r6
 800a290:	1a6d      	subs	r5, r5, r1
 800a292:	4629      	mov	r1, r5
 800a294:	f7ff ffa6 	bl	800a1e4 <sbrk_aligned>
 800a298:	3001      	adds	r0, #1
 800a29a:	d03a      	beq.n	800a312 <_malloc_r+0xea>
 800a29c:	6823      	ldr	r3, [r4, #0]
 800a29e:	442b      	add	r3, r5
 800a2a0:	6023      	str	r3, [r4, #0]
 800a2a2:	f8d8 3000 	ldr.w	r3, [r8]
 800a2a6:	685a      	ldr	r2, [r3, #4]
 800a2a8:	bb62      	cbnz	r2, 800a304 <_malloc_r+0xdc>
 800a2aa:	f8c8 7000 	str.w	r7, [r8]
 800a2ae:	e00f      	b.n	800a2d0 <_malloc_r+0xa8>
 800a2b0:	6822      	ldr	r2, [r4, #0]
 800a2b2:	1b52      	subs	r2, r2, r5
 800a2b4:	d420      	bmi.n	800a2f8 <_malloc_r+0xd0>
 800a2b6:	2a0b      	cmp	r2, #11
 800a2b8:	d917      	bls.n	800a2ea <_malloc_r+0xc2>
 800a2ba:	1961      	adds	r1, r4, r5
 800a2bc:	42a3      	cmp	r3, r4
 800a2be:	6025      	str	r5, [r4, #0]
 800a2c0:	bf18      	it	ne
 800a2c2:	6059      	strne	r1, [r3, #4]
 800a2c4:	6863      	ldr	r3, [r4, #4]
 800a2c6:	bf08      	it	eq
 800a2c8:	f8c8 1000 	streq.w	r1, [r8]
 800a2cc:	5162      	str	r2, [r4, r5]
 800a2ce:	604b      	str	r3, [r1, #4]
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	f000 f82f 	bl	800a334 <__malloc_unlock>
 800a2d6:	f104 000b 	add.w	r0, r4, #11
 800a2da:	1d23      	adds	r3, r4, #4
 800a2dc:	f020 0007 	bic.w	r0, r0, #7
 800a2e0:	1ac2      	subs	r2, r0, r3
 800a2e2:	bf1c      	itt	ne
 800a2e4:	1a1b      	subne	r3, r3, r0
 800a2e6:	50a3      	strne	r3, [r4, r2]
 800a2e8:	e7af      	b.n	800a24a <_malloc_r+0x22>
 800a2ea:	6862      	ldr	r2, [r4, #4]
 800a2ec:	42a3      	cmp	r3, r4
 800a2ee:	bf0c      	ite	eq
 800a2f0:	f8c8 2000 	streq.w	r2, [r8]
 800a2f4:	605a      	strne	r2, [r3, #4]
 800a2f6:	e7eb      	b.n	800a2d0 <_malloc_r+0xa8>
 800a2f8:	4623      	mov	r3, r4
 800a2fa:	6864      	ldr	r4, [r4, #4]
 800a2fc:	e7ae      	b.n	800a25c <_malloc_r+0x34>
 800a2fe:	463c      	mov	r4, r7
 800a300:	687f      	ldr	r7, [r7, #4]
 800a302:	e7b6      	b.n	800a272 <_malloc_r+0x4a>
 800a304:	461a      	mov	r2, r3
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	42a3      	cmp	r3, r4
 800a30a:	d1fb      	bne.n	800a304 <_malloc_r+0xdc>
 800a30c:	2300      	movs	r3, #0
 800a30e:	6053      	str	r3, [r2, #4]
 800a310:	e7de      	b.n	800a2d0 <_malloc_r+0xa8>
 800a312:	230c      	movs	r3, #12
 800a314:	4630      	mov	r0, r6
 800a316:	6033      	str	r3, [r6, #0]
 800a318:	f000 f80c 	bl	800a334 <__malloc_unlock>
 800a31c:	e794      	b.n	800a248 <_malloc_r+0x20>
 800a31e:	6005      	str	r5, [r0, #0]
 800a320:	e7d6      	b.n	800a2d0 <_malloc_r+0xa8>
 800a322:	bf00      	nop
 800a324:	200004a4 	.word	0x200004a4

0800a328 <__malloc_lock>:
 800a328:	4801      	ldr	r0, [pc, #4]	@ (800a330 <__malloc_lock+0x8>)
 800a32a:	f7ff bf0e 	b.w	800a14a <__retarget_lock_acquire_recursive>
 800a32e:	bf00      	nop
 800a330:	2000049c 	.word	0x2000049c

0800a334 <__malloc_unlock>:
 800a334:	4801      	ldr	r0, [pc, #4]	@ (800a33c <__malloc_unlock+0x8>)
 800a336:	f7ff bf09 	b.w	800a14c <__retarget_lock_release_recursive>
 800a33a:	bf00      	nop
 800a33c:	2000049c 	.word	0x2000049c

0800a340 <__sfputc_r>:
 800a340:	6893      	ldr	r3, [r2, #8]
 800a342:	3b01      	subs	r3, #1
 800a344:	2b00      	cmp	r3, #0
 800a346:	6093      	str	r3, [r2, #8]
 800a348:	b410      	push	{r4}
 800a34a:	da08      	bge.n	800a35e <__sfputc_r+0x1e>
 800a34c:	6994      	ldr	r4, [r2, #24]
 800a34e:	42a3      	cmp	r3, r4
 800a350:	db01      	blt.n	800a356 <__sfputc_r+0x16>
 800a352:	290a      	cmp	r1, #10
 800a354:	d103      	bne.n	800a35e <__sfputc_r+0x1e>
 800a356:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a35a:	f7ff bde8 	b.w	8009f2e <__swbuf_r>
 800a35e:	6813      	ldr	r3, [r2, #0]
 800a360:	1c58      	adds	r0, r3, #1
 800a362:	6010      	str	r0, [r2, #0]
 800a364:	4608      	mov	r0, r1
 800a366:	7019      	strb	r1, [r3, #0]
 800a368:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a36c:	4770      	bx	lr

0800a36e <__sfputs_r>:
 800a36e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a370:	4606      	mov	r6, r0
 800a372:	460f      	mov	r7, r1
 800a374:	4614      	mov	r4, r2
 800a376:	18d5      	adds	r5, r2, r3
 800a378:	42ac      	cmp	r4, r5
 800a37a:	d101      	bne.n	800a380 <__sfputs_r+0x12>
 800a37c:	2000      	movs	r0, #0
 800a37e:	e007      	b.n	800a390 <__sfputs_r+0x22>
 800a380:	463a      	mov	r2, r7
 800a382:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a386:	4630      	mov	r0, r6
 800a388:	f7ff ffda 	bl	800a340 <__sfputc_r>
 800a38c:	1c43      	adds	r3, r0, #1
 800a38e:	d1f3      	bne.n	800a378 <__sfputs_r+0xa>
 800a390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a394 <_vfiprintf_r>:
 800a394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a398:	460d      	mov	r5, r1
 800a39a:	b09d      	sub	sp, #116	@ 0x74
 800a39c:	4614      	mov	r4, r2
 800a39e:	4698      	mov	r8, r3
 800a3a0:	4606      	mov	r6, r0
 800a3a2:	b118      	cbz	r0, 800a3ac <_vfiprintf_r+0x18>
 800a3a4:	6a03      	ldr	r3, [r0, #32]
 800a3a6:	b90b      	cbnz	r3, 800a3ac <_vfiprintf_r+0x18>
 800a3a8:	f7ff fcd8 	bl	8009d5c <__sinit>
 800a3ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3ae:	07d9      	lsls	r1, r3, #31
 800a3b0:	d405      	bmi.n	800a3be <_vfiprintf_r+0x2a>
 800a3b2:	89ab      	ldrh	r3, [r5, #12]
 800a3b4:	059a      	lsls	r2, r3, #22
 800a3b6:	d402      	bmi.n	800a3be <_vfiprintf_r+0x2a>
 800a3b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3ba:	f7ff fec6 	bl	800a14a <__retarget_lock_acquire_recursive>
 800a3be:	89ab      	ldrh	r3, [r5, #12]
 800a3c0:	071b      	lsls	r3, r3, #28
 800a3c2:	d501      	bpl.n	800a3c8 <_vfiprintf_r+0x34>
 800a3c4:	692b      	ldr	r3, [r5, #16]
 800a3c6:	b99b      	cbnz	r3, 800a3f0 <_vfiprintf_r+0x5c>
 800a3c8:	4629      	mov	r1, r5
 800a3ca:	4630      	mov	r0, r6
 800a3cc:	f7ff fdee 	bl	8009fac <__swsetup_r>
 800a3d0:	b170      	cbz	r0, 800a3f0 <_vfiprintf_r+0x5c>
 800a3d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3d4:	07dc      	lsls	r4, r3, #31
 800a3d6:	d504      	bpl.n	800a3e2 <_vfiprintf_r+0x4e>
 800a3d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3dc:	b01d      	add	sp, #116	@ 0x74
 800a3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e2:	89ab      	ldrh	r3, [r5, #12]
 800a3e4:	0598      	lsls	r0, r3, #22
 800a3e6:	d4f7      	bmi.n	800a3d8 <_vfiprintf_r+0x44>
 800a3e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3ea:	f7ff feaf 	bl	800a14c <__retarget_lock_release_recursive>
 800a3ee:	e7f3      	b.n	800a3d8 <_vfiprintf_r+0x44>
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3f6:	f04f 0901 	mov.w	r9, #1
 800a3fa:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800a5b0 <_vfiprintf_r+0x21c>
 800a3fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800a400:	2320      	movs	r3, #32
 800a402:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a406:	2330      	movs	r3, #48	@ 0x30
 800a408:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a40c:	4623      	mov	r3, r4
 800a40e:	469a      	mov	sl, r3
 800a410:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a414:	b10a      	cbz	r2, 800a41a <_vfiprintf_r+0x86>
 800a416:	2a25      	cmp	r2, #37	@ 0x25
 800a418:	d1f9      	bne.n	800a40e <_vfiprintf_r+0x7a>
 800a41a:	ebba 0b04 	subs.w	fp, sl, r4
 800a41e:	d00b      	beq.n	800a438 <_vfiprintf_r+0xa4>
 800a420:	465b      	mov	r3, fp
 800a422:	4622      	mov	r2, r4
 800a424:	4629      	mov	r1, r5
 800a426:	4630      	mov	r0, r6
 800a428:	f7ff ffa1 	bl	800a36e <__sfputs_r>
 800a42c:	3001      	adds	r0, #1
 800a42e:	f000 80a7 	beq.w	800a580 <_vfiprintf_r+0x1ec>
 800a432:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a434:	445a      	add	r2, fp
 800a436:	9209      	str	r2, [sp, #36]	@ 0x24
 800a438:	f89a 3000 	ldrb.w	r3, [sl]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	f000 809f 	beq.w	800a580 <_vfiprintf_r+0x1ec>
 800a442:	2300      	movs	r3, #0
 800a444:	f04f 32ff 	mov.w	r2, #4294967295
 800a448:	f10a 0a01 	add.w	sl, sl, #1
 800a44c:	9304      	str	r3, [sp, #16]
 800a44e:	9307      	str	r3, [sp, #28]
 800a450:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a454:	931a      	str	r3, [sp, #104]	@ 0x68
 800a456:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a45a:	4654      	mov	r4, sl
 800a45c:	2205      	movs	r2, #5
 800a45e:	4854      	ldr	r0, [pc, #336]	@ (800a5b0 <_vfiprintf_r+0x21c>)
 800a460:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a464:	f000 fb80 	bl	800ab68 <memchr>
 800a468:	9a04      	ldr	r2, [sp, #16]
 800a46a:	b9d8      	cbnz	r0, 800a4a4 <_vfiprintf_r+0x110>
 800a46c:	06d1      	lsls	r1, r2, #27
 800a46e:	bf44      	itt	mi
 800a470:	2320      	movmi	r3, #32
 800a472:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a476:	0713      	lsls	r3, r2, #28
 800a478:	bf44      	itt	mi
 800a47a:	232b      	movmi	r3, #43	@ 0x2b
 800a47c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a480:	f89a 3000 	ldrb.w	r3, [sl]
 800a484:	2b2a      	cmp	r3, #42	@ 0x2a
 800a486:	d015      	beq.n	800a4b4 <_vfiprintf_r+0x120>
 800a488:	9a07      	ldr	r2, [sp, #28]
 800a48a:	4654      	mov	r4, sl
 800a48c:	2000      	movs	r0, #0
 800a48e:	f04f 0c0a 	mov.w	ip, #10
 800a492:	4621      	mov	r1, r4
 800a494:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a498:	3b30      	subs	r3, #48	@ 0x30
 800a49a:	2b09      	cmp	r3, #9
 800a49c:	d94b      	bls.n	800a536 <_vfiprintf_r+0x1a2>
 800a49e:	b1b0      	cbz	r0, 800a4ce <_vfiprintf_r+0x13a>
 800a4a0:	9207      	str	r2, [sp, #28]
 800a4a2:	e014      	b.n	800a4ce <_vfiprintf_r+0x13a>
 800a4a4:	eba0 0308 	sub.w	r3, r0, r8
 800a4a8:	46a2      	mov	sl, r4
 800a4aa:	fa09 f303 	lsl.w	r3, r9, r3
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	9304      	str	r3, [sp, #16]
 800a4b2:	e7d2      	b.n	800a45a <_vfiprintf_r+0xc6>
 800a4b4:	9b03      	ldr	r3, [sp, #12]
 800a4b6:	1d19      	adds	r1, r3, #4
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	9103      	str	r1, [sp, #12]
 800a4be:	bfbb      	ittet	lt
 800a4c0:	425b      	neglt	r3, r3
 800a4c2:	f042 0202 	orrlt.w	r2, r2, #2
 800a4c6:	9307      	strge	r3, [sp, #28]
 800a4c8:	9307      	strlt	r3, [sp, #28]
 800a4ca:	bfb8      	it	lt
 800a4cc:	9204      	strlt	r2, [sp, #16]
 800a4ce:	7823      	ldrb	r3, [r4, #0]
 800a4d0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a4d2:	d10a      	bne.n	800a4ea <_vfiprintf_r+0x156>
 800a4d4:	7863      	ldrb	r3, [r4, #1]
 800a4d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4d8:	d132      	bne.n	800a540 <_vfiprintf_r+0x1ac>
 800a4da:	9b03      	ldr	r3, [sp, #12]
 800a4dc:	3402      	adds	r4, #2
 800a4de:	1d1a      	adds	r2, r3, #4
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a4e6:	9203      	str	r2, [sp, #12]
 800a4e8:	9305      	str	r3, [sp, #20]
 800a4ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a5c0 <_vfiprintf_r+0x22c>
 800a4ee:	2203      	movs	r2, #3
 800a4f0:	7821      	ldrb	r1, [r4, #0]
 800a4f2:	4650      	mov	r0, sl
 800a4f4:	f000 fb38 	bl	800ab68 <memchr>
 800a4f8:	b138      	cbz	r0, 800a50a <_vfiprintf_r+0x176>
 800a4fa:	eba0 000a 	sub.w	r0, r0, sl
 800a4fe:	2240      	movs	r2, #64	@ 0x40
 800a500:	9b04      	ldr	r3, [sp, #16]
 800a502:	3401      	adds	r4, #1
 800a504:	4082      	lsls	r2, r0
 800a506:	4313      	orrs	r3, r2
 800a508:	9304      	str	r3, [sp, #16]
 800a50a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a50e:	2206      	movs	r2, #6
 800a510:	4828      	ldr	r0, [pc, #160]	@ (800a5b4 <_vfiprintf_r+0x220>)
 800a512:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a516:	f000 fb27 	bl	800ab68 <memchr>
 800a51a:	2800      	cmp	r0, #0
 800a51c:	d03f      	beq.n	800a59e <_vfiprintf_r+0x20a>
 800a51e:	4b26      	ldr	r3, [pc, #152]	@ (800a5b8 <_vfiprintf_r+0x224>)
 800a520:	bb1b      	cbnz	r3, 800a56a <_vfiprintf_r+0x1d6>
 800a522:	9b03      	ldr	r3, [sp, #12]
 800a524:	3307      	adds	r3, #7
 800a526:	f023 0307 	bic.w	r3, r3, #7
 800a52a:	3308      	adds	r3, #8
 800a52c:	9303      	str	r3, [sp, #12]
 800a52e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a530:	443b      	add	r3, r7
 800a532:	9309      	str	r3, [sp, #36]	@ 0x24
 800a534:	e76a      	b.n	800a40c <_vfiprintf_r+0x78>
 800a536:	fb0c 3202 	mla	r2, ip, r2, r3
 800a53a:	460c      	mov	r4, r1
 800a53c:	2001      	movs	r0, #1
 800a53e:	e7a8      	b.n	800a492 <_vfiprintf_r+0xfe>
 800a540:	2300      	movs	r3, #0
 800a542:	3401      	adds	r4, #1
 800a544:	f04f 0c0a 	mov.w	ip, #10
 800a548:	4619      	mov	r1, r3
 800a54a:	9305      	str	r3, [sp, #20]
 800a54c:	4620      	mov	r0, r4
 800a54e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a552:	3a30      	subs	r2, #48	@ 0x30
 800a554:	2a09      	cmp	r2, #9
 800a556:	d903      	bls.n	800a560 <_vfiprintf_r+0x1cc>
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d0c6      	beq.n	800a4ea <_vfiprintf_r+0x156>
 800a55c:	9105      	str	r1, [sp, #20]
 800a55e:	e7c4      	b.n	800a4ea <_vfiprintf_r+0x156>
 800a560:	fb0c 2101 	mla	r1, ip, r1, r2
 800a564:	4604      	mov	r4, r0
 800a566:	2301      	movs	r3, #1
 800a568:	e7f0      	b.n	800a54c <_vfiprintf_r+0x1b8>
 800a56a:	ab03      	add	r3, sp, #12
 800a56c:	462a      	mov	r2, r5
 800a56e:	a904      	add	r1, sp, #16
 800a570:	4630      	mov	r0, r6
 800a572:	9300      	str	r3, [sp, #0]
 800a574:	4b11      	ldr	r3, [pc, #68]	@ (800a5bc <_vfiprintf_r+0x228>)
 800a576:	f3af 8000 	nop.w
 800a57a:	4607      	mov	r7, r0
 800a57c:	1c78      	adds	r0, r7, #1
 800a57e:	d1d6      	bne.n	800a52e <_vfiprintf_r+0x19a>
 800a580:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a582:	07d9      	lsls	r1, r3, #31
 800a584:	d405      	bmi.n	800a592 <_vfiprintf_r+0x1fe>
 800a586:	89ab      	ldrh	r3, [r5, #12]
 800a588:	059a      	lsls	r2, r3, #22
 800a58a:	d402      	bmi.n	800a592 <_vfiprintf_r+0x1fe>
 800a58c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a58e:	f7ff fddd 	bl	800a14c <__retarget_lock_release_recursive>
 800a592:	89ab      	ldrh	r3, [r5, #12]
 800a594:	065b      	lsls	r3, r3, #25
 800a596:	f53f af1f 	bmi.w	800a3d8 <_vfiprintf_r+0x44>
 800a59a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a59c:	e71e      	b.n	800a3dc <_vfiprintf_r+0x48>
 800a59e:	ab03      	add	r3, sp, #12
 800a5a0:	462a      	mov	r2, r5
 800a5a2:	a904      	add	r1, sp, #16
 800a5a4:	4630      	mov	r0, r6
 800a5a6:	9300      	str	r3, [sp, #0]
 800a5a8:	4b04      	ldr	r3, [pc, #16]	@ (800a5bc <_vfiprintf_r+0x228>)
 800a5aa:	f000 f87d 	bl	800a6a8 <_printf_i>
 800a5ae:	e7e4      	b.n	800a57a <_vfiprintf_r+0x1e6>
 800a5b0:	0800aeb8 	.word	0x0800aeb8
 800a5b4:	0800aec2 	.word	0x0800aec2
 800a5b8:	00000000 	.word	0x00000000
 800a5bc:	0800a36f 	.word	0x0800a36f
 800a5c0:	0800aebe 	.word	0x0800aebe

0800a5c4 <_printf_common>:
 800a5c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c8:	4616      	mov	r6, r2
 800a5ca:	4698      	mov	r8, r3
 800a5cc:	688a      	ldr	r2, [r1, #8]
 800a5ce:	4607      	mov	r7, r0
 800a5d0:	690b      	ldr	r3, [r1, #16]
 800a5d2:	460c      	mov	r4, r1
 800a5d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	bfb8      	it	lt
 800a5dc:	4613      	movlt	r3, r2
 800a5de:	6033      	str	r3, [r6, #0]
 800a5e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a5e4:	b10a      	cbz	r2, 800a5ea <_printf_common+0x26>
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	6033      	str	r3, [r6, #0]
 800a5ea:	6823      	ldr	r3, [r4, #0]
 800a5ec:	0699      	lsls	r1, r3, #26
 800a5ee:	bf42      	ittt	mi
 800a5f0:	6833      	ldrmi	r3, [r6, #0]
 800a5f2:	3302      	addmi	r3, #2
 800a5f4:	6033      	strmi	r3, [r6, #0]
 800a5f6:	6825      	ldr	r5, [r4, #0]
 800a5f8:	f015 0506 	ands.w	r5, r5, #6
 800a5fc:	d106      	bne.n	800a60c <_printf_common+0x48>
 800a5fe:	f104 0a19 	add.w	sl, r4, #25
 800a602:	68e3      	ldr	r3, [r4, #12]
 800a604:	6832      	ldr	r2, [r6, #0]
 800a606:	1a9b      	subs	r3, r3, r2
 800a608:	42ab      	cmp	r3, r5
 800a60a:	dc2b      	bgt.n	800a664 <_printf_common+0xa0>
 800a60c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a610:	6822      	ldr	r2, [r4, #0]
 800a612:	3b00      	subs	r3, #0
 800a614:	bf18      	it	ne
 800a616:	2301      	movne	r3, #1
 800a618:	0692      	lsls	r2, r2, #26
 800a61a:	d430      	bmi.n	800a67e <_printf_common+0xba>
 800a61c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a620:	4641      	mov	r1, r8
 800a622:	4638      	mov	r0, r7
 800a624:	47c8      	blx	r9
 800a626:	3001      	adds	r0, #1
 800a628:	d023      	beq.n	800a672 <_printf_common+0xae>
 800a62a:	6823      	ldr	r3, [r4, #0]
 800a62c:	341a      	adds	r4, #26
 800a62e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800a632:	f003 0306 	and.w	r3, r3, #6
 800a636:	2b04      	cmp	r3, #4
 800a638:	bf0a      	itet	eq
 800a63a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800a63e:	2500      	movne	r5, #0
 800a640:	6833      	ldreq	r3, [r6, #0]
 800a642:	f04f 0600 	mov.w	r6, #0
 800a646:	bf08      	it	eq
 800a648:	1aed      	subeq	r5, r5, r3
 800a64a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a64e:	bf08      	it	eq
 800a650:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a654:	4293      	cmp	r3, r2
 800a656:	bfc4      	itt	gt
 800a658:	1a9b      	subgt	r3, r3, r2
 800a65a:	18ed      	addgt	r5, r5, r3
 800a65c:	42b5      	cmp	r5, r6
 800a65e:	d11a      	bne.n	800a696 <_printf_common+0xd2>
 800a660:	2000      	movs	r0, #0
 800a662:	e008      	b.n	800a676 <_printf_common+0xb2>
 800a664:	2301      	movs	r3, #1
 800a666:	4652      	mov	r2, sl
 800a668:	4641      	mov	r1, r8
 800a66a:	4638      	mov	r0, r7
 800a66c:	47c8      	blx	r9
 800a66e:	3001      	adds	r0, #1
 800a670:	d103      	bne.n	800a67a <_printf_common+0xb6>
 800a672:	f04f 30ff 	mov.w	r0, #4294967295
 800a676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a67a:	3501      	adds	r5, #1
 800a67c:	e7c1      	b.n	800a602 <_printf_common+0x3e>
 800a67e:	18e1      	adds	r1, r4, r3
 800a680:	1c5a      	adds	r2, r3, #1
 800a682:	2030      	movs	r0, #48	@ 0x30
 800a684:	3302      	adds	r3, #2
 800a686:	4422      	add	r2, r4
 800a688:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a68c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a690:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a694:	e7c2      	b.n	800a61c <_printf_common+0x58>
 800a696:	2301      	movs	r3, #1
 800a698:	4622      	mov	r2, r4
 800a69a:	4641      	mov	r1, r8
 800a69c:	4638      	mov	r0, r7
 800a69e:	47c8      	blx	r9
 800a6a0:	3001      	adds	r0, #1
 800a6a2:	d0e6      	beq.n	800a672 <_printf_common+0xae>
 800a6a4:	3601      	adds	r6, #1
 800a6a6:	e7d9      	b.n	800a65c <_printf_common+0x98>

0800a6a8 <_printf_i>:
 800a6a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6ac:	7e0f      	ldrb	r7, [r1, #24]
 800a6ae:	4691      	mov	r9, r2
 800a6b0:	4680      	mov	r8, r0
 800a6b2:	460c      	mov	r4, r1
 800a6b4:	2f78      	cmp	r7, #120	@ 0x78
 800a6b6:	469a      	mov	sl, r3
 800a6b8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a6ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a6be:	d807      	bhi.n	800a6d0 <_printf_i+0x28>
 800a6c0:	2f62      	cmp	r7, #98	@ 0x62
 800a6c2:	d80a      	bhi.n	800a6da <_printf_i+0x32>
 800a6c4:	2f00      	cmp	r7, #0
 800a6c6:	f000 80d2 	beq.w	800a86e <_printf_i+0x1c6>
 800a6ca:	2f58      	cmp	r7, #88	@ 0x58
 800a6cc:	f000 80b9 	beq.w	800a842 <_printf_i+0x19a>
 800a6d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a6d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a6d8:	e03a      	b.n	800a750 <_printf_i+0xa8>
 800a6da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a6de:	2b15      	cmp	r3, #21
 800a6e0:	d8f6      	bhi.n	800a6d0 <_printf_i+0x28>
 800a6e2:	a101      	add	r1, pc, #4	@ (adr r1, 800a6e8 <_printf_i+0x40>)
 800a6e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6e8:	0800a741 	.word	0x0800a741
 800a6ec:	0800a755 	.word	0x0800a755
 800a6f0:	0800a6d1 	.word	0x0800a6d1
 800a6f4:	0800a6d1 	.word	0x0800a6d1
 800a6f8:	0800a6d1 	.word	0x0800a6d1
 800a6fc:	0800a6d1 	.word	0x0800a6d1
 800a700:	0800a755 	.word	0x0800a755
 800a704:	0800a6d1 	.word	0x0800a6d1
 800a708:	0800a6d1 	.word	0x0800a6d1
 800a70c:	0800a6d1 	.word	0x0800a6d1
 800a710:	0800a6d1 	.word	0x0800a6d1
 800a714:	0800a855 	.word	0x0800a855
 800a718:	0800a77f 	.word	0x0800a77f
 800a71c:	0800a80f 	.word	0x0800a80f
 800a720:	0800a6d1 	.word	0x0800a6d1
 800a724:	0800a6d1 	.word	0x0800a6d1
 800a728:	0800a877 	.word	0x0800a877
 800a72c:	0800a6d1 	.word	0x0800a6d1
 800a730:	0800a77f 	.word	0x0800a77f
 800a734:	0800a6d1 	.word	0x0800a6d1
 800a738:	0800a6d1 	.word	0x0800a6d1
 800a73c:	0800a817 	.word	0x0800a817
 800a740:	6833      	ldr	r3, [r6, #0]
 800a742:	1d1a      	adds	r2, r3, #4
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	6032      	str	r2, [r6, #0]
 800a748:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a74c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a750:	2301      	movs	r3, #1
 800a752:	e09d      	b.n	800a890 <_printf_i+0x1e8>
 800a754:	6833      	ldr	r3, [r6, #0]
 800a756:	6820      	ldr	r0, [r4, #0]
 800a758:	1d19      	adds	r1, r3, #4
 800a75a:	6031      	str	r1, [r6, #0]
 800a75c:	0606      	lsls	r6, r0, #24
 800a75e:	d501      	bpl.n	800a764 <_printf_i+0xbc>
 800a760:	681d      	ldr	r5, [r3, #0]
 800a762:	e003      	b.n	800a76c <_printf_i+0xc4>
 800a764:	0645      	lsls	r5, r0, #25
 800a766:	d5fb      	bpl.n	800a760 <_printf_i+0xb8>
 800a768:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a76c:	2d00      	cmp	r5, #0
 800a76e:	da03      	bge.n	800a778 <_printf_i+0xd0>
 800a770:	232d      	movs	r3, #45	@ 0x2d
 800a772:	426d      	negs	r5, r5
 800a774:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a778:	4859      	ldr	r0, [pc, #356]	@ (800a8e0 <_printf_i+0x238>)
 800a77a:	230a      	movs	r3, #10
 800a77c:	e011      	b.n	800a7a2 <_printf_i+0xfa>
 800a77e:	6821      	ldr	r1, [r4, #0]
 800a780:	6833      	ldr	r3, [r6, #0]
 800a782:	0608      	lsls	r0, r1, #24
 800a784:	f853 5b04 	ldr.w	r5, [r3], #4
 800a788:	d402      	bmi.n	800a790 <_printf_i+0xe8>
 800a78a:	0649      	lsls	r1, r1, #25
 800a78c:	bf48      	it	mi
 800a78e:	b2ad      	uxthmi	r5, r5
 800a790:	2f6f      	cmp	r7, #111	@ 0x6f
 800a792:	6033      	str	r3, [r6, #0]
 800a794:	4852      	ldr	r0, [pc, #328]	@ (800a8e0 <_printf_i+0x238>)
 800a796:	bf14      	ite	ne
 800a798:	230a      	movne	r3, #10
 800a79a:	2308      	moveq	r3, #8
 800a79c:	2100      	movs	r1, #0
 800a79e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a7a2:	6866      	ldr	r6, [r4, #4]
 800a7a4:	2e00      	cmp	r6, #0
 800a7a6:	60a6      	str	r6, [r4, #8]
 800a7a8:	bfa2      	ittt	ge
 800a7aa:	6821      	ldrge	r1, [r4, #0]
 800a7ac:	f021 0104 	bicge.w	r1, r1, #4
 800a7b0:	6021      	strge	r1, [r4, #0]
 800a7b2:	b90d      	cbnz	r5, 800a7b8 <_printf_i+0x110>
 800a7b4:	2e00      	cmp	r6, #0
 800a7b6:	d04b      	beq.n	800a850 <_printf_i+0x1a8>
 800a7b8:	4616      	mov	r6, r2
 800a7ba:	fbb5 f1f3 	udiv	r1, r5, r3
 800a7be:	fb03 5711 	mls	r7, r3, r1, r5
 800a7c2:	5dc7      	ldrb	r7, [r0, r7]
 800a7c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a7c8:	462f      	mov	r7, r5
 800a7ca:	460d      	mov	r5, r1
 800a7cc:	42bb      	cmp	r3, r7
 800a7ce:	d9f4      	bls.n	800a7ba <_printf_i+0x112>
 800a7d0:	2b08      	cmp	r3, #8
 800a7d2:	d10b      	bne.n	800a7ec <_printf_i+0x144>
 800a7d4:	6823      	ldr	r3, [r4, #0]
 800a7d6:	07df      	lsls	r7, r3, #31
 800a7d8:	d508      	bpl.n	800a7ec <_printf_i+0x144>
 800a7da:	6923      	ldr	r3, [r4, #16]
 800a7dc:	6861      	ldr	r1, [r4, #4]
 800a7de:	4299      	cmp	r1, r3
 800a7e0:	bfde      	ittt	le
 800a7e2:	2330      	movle	r3, #48	@ 0x30
 800a7e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a7e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a7ec:	1b92      	subs	r2, r2, r6
 800a7ee:	6122      	str	r2, [r4, #16]
 800a7f0:	464b      	mov	r3, r9
 800a7f2:	aa03      	add	r2, sp, #12
 800a7f4:	4621      	mov	r1, r4
 800a7f6:	4640      	mov	r0, r8
 800a7f8:	f8cd a000 	str.w	sl, [sp]
 800a7fc:	f7ff fee2 	bl	800a5c4 <_printf_common>
 800a800:	3001      	adds	r0, #1
 800a802:	d14a      	bne.n	800a89a <_printf_i+0x1f2>
 800a804:	f04f 30ff 	mov.w	r0, #4294967295
 800a808:	b004      	add	sp, #16
 800a80a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a80e:	6823      	ldr	r3, [r4, #0]
 800a810:	f043 0320 	orr.w	r3, r3, #32
 800a814:	6023      	str	r3, [r4, #0]
 800a816:	2778      	movs	r7, #120	@ 0x78
 800a818:	4832      	ldr	r0, [pc, #200]	@ (800a8e4 <_printf_i+0x23c>)
 800a81a:	6823      	ldr	r3, [r4, #0]
 800a81c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a820:	061f      	lsls	r7, r3, #24
 800a822:	6831      	ldr	r1, [r6, #0]
 800a824:	f851 5b04 	ldr.w	r5, [r1], #4
 800a828:	d402      	bmi.n	800a830 <_printf_i+0x188>
 800a82a:	065f      	lsls	r7, r3, #25
 800a82c:	bf48      	it	mi
 800a82e:	b2ad      	uxthmi	r5, r5
 800a830:	6031      	str	r1, [r6, #0]
 800a832:	07d9      	lsls	r1, r3, #31
 800a834:	bf44      	itt	mi
 800a836:	f043 0320 	orrmi.w	r3, r3, #32
 800a83a:	6023      	strmi	r3, [r4, #0]
 800a83c:	b11d      	cbz	r5, 800a846 <_printf_i+0x19e>
 800a83e:	2310      	movs	r3, #16
 800a840:	e7ac      	b.n	800a79c <_printf_i+0xf4>
 800a842:	4827      	ldr	r0, [pc, #156]	@ (800a8e0 <_printf_i+0x238>)
 800a844:	e7e9      	b.n	800a81a <_printf_i+0x172>
 800a846:	6823      	ldr	r3, [r4, #0]
 800a848:	f023 0320 	bic.w	r3, r3, #32
 800a84c:	6023      	str	r3, [r4, #0]
 800a84e:	e7f6      	b.n	800a83e <_printf_i+0x196>
 800a850:	4616      	mov	r6, r2
 800a852:	e7bd      	b.n	800a7d0 <_printf_i+0x128>
 800a854:	6833      	ldr	r3, [r6, #0]
 800a856:	6825      	ldr	r5, [r4, #0]
 800a858:	1d18      	adds	r0, r3, #4
 800a85a:	6961      	ldr	r1, [r4, #20]
 800a85c:	6030      	str	r0, [r6, #0]
 800a85e:	062e      	lsls	r6, r5, #24
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	d501      	bpl.n	800a868 <_printf_i+0x1c0>
 800a864:	6019      	str	r1, [r3, #0]
 800a866:	e002      	b.n	800a86e <_printf_i+0x1c6>
 800a868:	0668      	lsls	r0, r5, #25
 800a86a:	d5fb      	bpl.n	800a864 <_printf_i+0x1bc>
 800a86c:	8019      	strh	r1, [r3, #0]
 800a86e:	2300      	movs	r3, #0
 800a870:	4616      	mov	r6, r2
 800a872:	6123      	str	r3, [r4, #16]
 800a874:	e7bc      	b.n	800a7f0 <_printf_i+0x148>
 800a876:	6833      	ldr	r3, [r6, #0]
 800a878:	2100      	movs	r1, #0
 800a87a:	1d1a      	adds	r2, r3, #4
 800a87c:	6032      	str	r2, [r6, #0]
 800a87e:	681e      	ldr	r6, [r3, #0]
 800a880:	6862      	ldr	r2, [r4, #4]
 800a882:	4630      	mov	r0, r6
 800a884:	f000 f970 	bl	800ab68 <memchr>
 800a888:	b108      	cbz	r0, 800a88e <_printf_i+0x1e6>
 800a88a:	1b80      	subs	r0, r0, r6
 800a88c:	6060      	str	r0, [r4, #4]
 800a88e:	6863      	ldr	r3, [r4, #4]
 800a890:	6123      	str	r3, [r4, #16]
 800a892:	2300      	movs	r3, #0
 800a894:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a898:	e7aa      	b.n	800a7f0 <_printf_i+0x148>
 800a89a:	6923      	ldr	r3, [r4, #16]
 800a89c:	4632      	mov	r2, r6
 800a89e:	4649      	mov	r1, r9
 800a8a0:	4640      	mov	r0, r8
 800a8a2:	47d0      	blx	sl
 800a8a4:	3001      	adds	r0, #1
 800a8a6:	d0ad      	beq.n	800a804 <_printf_i+0x15c>
 800a8a8:	6823      	ldr	r3, [r4, #0]
 800a8aa:	079b      	lsls	r3, r3, #30
 800a8ac:	d413      	bmi.n	800a8d6 <_printf_i+0x22e>
 800a8ae:	68e0      	ldr	r0, [r4, #12]
 800a8b0:	9b03      	ldr	r3, [sp, #12]
 800a8b2:	4298      	cmp	r0, r3
 800a8b4:	bfb8      	it	lt
 800a8b6:	4618      	movlt	r0, r3
 800a8b8:	e7a6      	b.n	800a808 <_printf_i+0x160>
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	4632      	mov	r2, r6
 800a8be:	4649      	mov	r1, r9
 800a8c0:	4640      	mov	r0, r8
 800a8c2:	47d0      	blx	sl
 800a8c4:	3001      	adds	r0, #1
 800a8c6:	d09d      	beq.n	800a804 <_printf_i+0x15c>
 800a8c8:	3501      	adds	r5, #1
 800a8ca:	68e3      	ldr	r3, [r4, #12]
 800a8cc:	9903      	ldr	r1, [sp, #12]
 800a8ce:	1a5b      	subs	r3, r3, r1
 800a8d0:	42ab      	cmp	r3, r5
 800a8d2:	dcf2      	bgt.n	800a8ba <_printf_i+0x212>
 800a8d4:	e7eb      	b.n	800a8ae <_printf_i+0x206>
 800a8d6:	2500      	movs	r5, #0
 800a8d8:	f104 0619 	add.w	r6, r4, #25
 800a8dc:	e7f5      	b.n	800a8ca <_printf_i+0x222>
 800a8de:	bf00      	nop
 800a8e0:	0800aec9 	.word	0x0800aec9
 800a8e4:	0800aeda 	.word	0x0800aeda

0800a8e8 <__sflush_r>:
 800a8e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8f0:	0716      	lsls	r6, r2, #28
 800a8f2:	4605      	mov	r5, r0
 800a8f4:	460c      	mov	r4, r1
 800a8f6:	d454      	bmi.n	800a9a2 <__sflush_r+0xba>
 800a8f8:	684b      	ldr	r3, [r1, #4]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	dc02      	bgt.n	800a904 <__sflush_r+0x1c>
 800a8fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a900:	2b00      	cmp	r3, #0
 800a902:	dd48      	ble.n	800a996 <__sflush_r+0xae>
 800a904:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a906:	2e00      	cmp	r6, #0
 800a908:	d045      	beq.n	800a996 <__sflush_r+0xae>
 800a90a:	2300      	movs	r3, #0
 800a90c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a910:	682f      	ldr	r7, [r5, #0]
 800a912:	6a21      	ldr	r1, [r4, #32]
 800a914:	602b      	str	r3, [r5, #0]
 800a916:	d030      	beq.n	800a97a <__sflush_r+0x92>
 800a918:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a91a:	89a3      	ldrh	r3, [r4, #12]
 800a91c:	0759      	lsls	r1, r3, #29
 800a91e:	d505      	bpl.n	800a92c <__sflush_r+0x44>
 800a920:	6863      	ldr	r3, [r4, #4]
 800a922:	1ad2      	subs	r2, r2, r3
 800a924:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a926:	b10b      	cbz	r3, 800a92c <__sflush_r+0x44>
 800a928:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a92a:	1ad2      	subs	r2, r2, r3
 800a92c:	2300      	movs	r3, #0
 800a92e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a930:	6a21      	ldr	r1, [r4, #32]
 800a932:	4628      	mov	r0, r5
 800a934:	47b0      	blx	r6
 800a936:	1c43      	adds	r3, r0, #1
 800a938:	89a3      	ldrh	r3, [r4, #12]
 800a93a:	d106      	bne.n	800a94a <__sflush_r+0x62>
 800a93c:	6829      	ldr	r1, [r5, #0]
 800a93e:	291d      	cmp	r1, #29
 800a940:	d82b      	bhi.n	800a99a <__sflush_r+0xb2>
 800a942:	4a2a      	ldr	r2, [pc, #168]	@ (800a9ec <__sflush_r+0x104>)
 800a944:	410a      	asrs	r2, r1
 800a946:	07d6      	lsls	r6, r2, #31
 800a948:	d427      	bmi.n	800a99a <__sflush_r+0xb2>
 800a94a:	2200      	movs	r2, #0
 800a94c:	04d9      	lsls	r1, r3, #19
 800a94e:	6062      	str	r2, [r4, #4]
 800a950:	6922      	ldr	r2, [r4, #16]
 800a952:	6022      	str	r2, [r4, #0]
 800a954:	d504      	bpl.n	800a960 <__sflush_r+0x78>
 800a956:	1c42      	adds	r2, r0, #1
 800a958:	d101      	bne.n	800a95e <__sflush_r+0x76>
 800a95a:	682b      	ldr	r3, [r5, #0]
 800a95c:	b903      	cbnz	r3, 800a960 <__sflush_r+0x78>
 800a95e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a960:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a962:	602f      	str	r7, [r5, #0]
 800a964:	b1b9      	cbz	r1, 800a996 <__sflush_r+0xae>
 800a966:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a96a:	4299      	cmp	r1, r3
 800a96c:	d002      	beq.n	800a974 <__sflush_r+0x8c>
 800a96e:	4628      	mov	r0, r5
 800a970:	f7ff fbee 	bl	800a150 <_free_r>
 800a974:	2300      	movs	r3, #0
 800a976:	6363      	str	r3, [r4, #52]	@ 0x34
 800a978:	e00d      	b.n	800a996 <__sflush_r+0xae>
 800a97a:	2301      	movs	r3, #1
 800a97c:	4628      	mov	r0, r5
 800a97e:	47b0      	blx	r6
 800a980:	4602      	mov	r2, r0
 800a982:	1c50      	adds	r0, r2, #1
 800a984:	d1c9      	bne.n	800a91a <__sflush_r+0x32>
 800a986:	682b      	ldr	r3, [r5, #0]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d0c6      	beq.n	800a91a <__sflush_r+0x32>
 800a98c:	2b1d      	cmp	r3, #29
 800a98e:	d001      	beq.n	800a994 <__sflush_r+0xac>
 800a990:	2b16      	cmp	r3, #22
 800a992:	d11d      	bne.n	800a9d0 <__sflush_r+0xe8>
 800a994:	602f      	str	r7, [r5, #0]
 800a996:	2000      	movs	r0, #0
 800a998:	e021      	b.n	800a9de <__sflush_r+0xf6>
 800a99a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a99e:	b21b      	sxth	r3, r3
 800a9a0:	e01a      	b.n	800a9d8 <__sflush_r+0xf0>
 800a9a2:	690f      	ldr	r7, [r1, #16]
 800a9a4:	2f00      	cmp	r7, #0
 800a9a6:	d0f6      	beq.n	800a996 <__sflush_r+0xae>
 800a9a8:	0793      	lsls	r3, r2, #30
 800a9aa:	680e      	ldr	r6, [r1, #0]
 800a9ac:	600f      	str	r7, [r1, #0]
 800a9ae:	bf0c      	ite	eq
 800a9b0:	694b      	ldreq	r3, [r1, #20]
 800a9b2:	2300      	movne	r3, #0
 800a9b4:	eba6 0807 	sub.w	r8, r6, r7
 800a9b8:	608b      	str	r3, [r1, #8]
 800a9ba:	f1b8 0f00 	cmp.w	r8, #0
 800a9be:	ddea      	ble.n	800a996 <__sflush_r+0xae>
 800a9c0:	4643      	mov	r3, r8
 800a9c2:	463a      	mov	r2, r7
 800a9c4:	6a21      	ldr	r1, [r4, #32]
 800a9c6:	4628      	mov	r0, r5
 800a9c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a9ca:	47b0      	blx	r6
 800a9cc:	2800      	cmp	r0, #0
 800a9ce:	dc08      	bgt.n	800a9e2 <__sflush_r+0xfa>
 800a9d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9dc:	81a3      	strh	r3, [r4, #12]
 800a9de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9e2:	4407      	add	r7, r0
 800a9e4:	eba8 0800 	sub.w	r8, r8, r0
 800a9e8:	e7e7      	b.n	800a9ba <__sflush_r+0xd2>
 800a9ea:	bf00      	nop
 800a9ec:	dfbffffe 	.word	0xdfbffffe

0800a9f0 <_fflush_r>:
 800a9f0:	b538      	push	{r3, r4, r5, lr}
 800a9f2:	690b      	ldr	r3, [r1, #16]
 800a9f4:	4605      	mov	r5, r0
 800a9f6:	460c      	mov	r4, r1
 800a9f8:	b913      	cbnz	r3, 800aa00 <_fflush_r+0x10>
 800a9fa:	2500      	movs	r5, #0
 800a9fc:	4628      	mov	r0, r5
 800a9fe:	bd38      	pop	{r3, r4, r5, pc}
 800aa00:	b118      	cbz	r0, 800aa0a <_fflush_r+0x1a>
 800aa02:	6a03      	ldr	r3, [r0, #32]
 800aa04:	b90b      	cbnz	r3, 800aa0a <_fflush_r+0x1a>
 800aa06:	f7ff f9a9 	bl	8009d5c <__sinit>
 800aa0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d0f3      	beq.n	800a9fa <_fflush_r+0xa>
 800aa12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aa14:	07d0      	lsls	r0, r2, #31
 800aa16:	d404      	bmi.n	800aa22 <_fflush_r+0x32>
 800aa18:	0599      	lsls	r1, r3, #22
 800aa1a:	d402      	bmi.n	800aa22 <_fflush_r+0x32>
 800aa1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa1e:	f7ff fb94 	bl	800a14a <__retarget_lock_acquire_recursive>
 800aa22:	4628      	mov	r0, r5
 800aa24:	4621      	mov	r1, r4
 800aa26:	f7ff ff5f 	bl	800a8e8 <__sflush_r>
 800aa2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa2c:	4605      	mov	r5, r0
 800aa2e:	07da      	lsls	r2, r3, #31
 800aa30:	d4e4      	bmi.n	800a9fc <_fflush_r+0xc>
 800aa32:	89a3      	ldrh	r3, [r4, #12]
 800aa34:	059b      	lsls	r3, r3, #22
 800aa36:	d4e1      	bmi.n	800a9fc <_fflush_r+0xc>
 800aa38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa3a:	f7ff fb87 	bl	800a14c <__retarget_lock_release_recursive>
 800aa3e:	e7dd      	b.n	800a9fc <_fflush_r+0xc>

0800aa40 <__swhatbuf_r>:
 800aa40:	b570      	push	{r4, r5, r6, lr}
 800aa42:	460c      	mov	r4, r1
 800aa44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa48:	b096      	sub	sp, #88	@ 0x58
 800aa4a:	4615      	mov	r5, r2
 800aa4c:	2900      	cmp	r1, #0
 800aa4e:	461e      	mov	r6, r3
 800aa50:	da0c      	bge.n	800aa6c <__swhatbuf_r+0x2c>
 800aa52:	89a3      	ldrh	r3, [r4, #12]
 800aa54:	2100      	movs	r1, #0
 800aa56:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aa5a:	bf14      	ite	ne
 800aa5c:	2340      	movne	r3, #64	@ 0x40
 800aa5e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aa62:	2000      	movs	r0, #0
 800aa64:	6031      	str	r1, [r6, #0]
 800aa66:	602b      	str	r3, [r5, #0]
 800aa68:	b016      	add	sp, #88	@ 0x58
 800aa6a:	bd70      	pop	{r4, r5, r6, pc}
 800aa6c:	466a      	mov	r2, sp
 800aa6e:	f000 f849 	bl	800ab04 <_fstat_r>
 800aa72:	2800      	cmp	r0, #0
 800aa74:	dbed      	blt.n	800aa52 <__swhatbuf_r+0x12>
 800aa76:	9901      	ldr	r1, [sp, #4]
 800aa78:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aa7c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aa80:	4259      	negs	r1, r3
 800aa82:	4159      	adcs	r1, r3
 800aa84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa88:	e7eb      	b.n	800aa62 <__swhatbuf_r+0x22>

0800aa8a <__smakebuf_r>:
 800aa8a:	898b      	ldrh	r3, [r1, #12]
 800aa8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa8e:	079d      	lsls	r5, r3, #30
 800aa90:	4606      	mov	r6, r0
 800aa92:	460c      	mov	r4, r1
 800aa94:	d507      	bpl.n	800aaa6 <__smakebuf_r+0x1c>
 800aa96:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aa9a:	6023      	str	r3, [r4, #0]
 800aa9c:	6123      	str	r3, [r4, #16]
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	6163      	str	r3, [r4, #20]
 800aaa2:	b003      	add	sp, #12
 800aaa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaa6:	ab01      	add	r3, sp, #4
 800aaa8:	466a      	mov	r2, sp
 800aaaa:	f7ff ffc9 	bl	800aa40 <__swhatbuf_r>
 800aaae:	9f00      	ldr	r7, [sp, #0]
 800aab0:	4605      	mov	r5, r0
 800aab2:	4630      	mov	r0, r6
 800aab4:	4639      	mov	r1, r7
 800aab6:	f7ff fbb7 	bl	800a228 <_malloc_r>
 800aaba:	b948      	cbnz	r0, 800aad0 <__smakebuf_r+0x46>
 800aabc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aac0:	059a      	lsls	r2, r3, #22
 800aac2:	d4ee      	bmi.n	800aaa2 <__smakebuf_r+0x18>
 800aac4:	f023 0303 	bic.w	r3, r3, #3
 800aac8:	f043 0302 	orr.w	r3, r3, #2
 800aacc:	81a3      	strh	r3, [r4, #12]
 800aace:	e7e2      	b.n	800aa96 <__smakebuf_r+0xc>
 800aad0:	89a3      	ldrh	r3, [r4, #12]
 800aad2:	6020      	str	r0, [r4, #0]
 800aad4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aad8:	81a3      	strh	r3, [r4, #12]
 800aada:	9b01      	ldr	r3, [sp, #4]
 800aadc:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aae0:	b15b      	cbz	r3, 800aafa <__smakebuf_r+0x70>
 800aae2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aae6:	4630      	mov	r0, r6
 800aae8:	f000 f81e 	bl	800ab28 <_isatty_r>
 800aaec:	b128      	cbz	r0, 800aafa <__smakebuf_r+0x70>
 800aaee:	89a3      	ldrh	r3, [r4, #12]
 800aaf0:	f023 0303 	bic.w	r3, r3, #3
 800aaf4:	f043 0301 	orr.w	r3, r3, #1
 800aaf8:	81a3      	strh	r3, [r4, #12]
 800aafa:	89a3      	ldrh	r3, [r4, #12]
 800aafc:	431d      	orrs	r5, r3
 800aafe:	81a5      	strh	r5, [r4, #12]
 800ab00:	e7cf      	b.n	800aaa2 <__smakebuf_r+0x18>
	...

0800ab04 <_fstat_r>:
 800ab04:	b538      	push	{r3, r4, r5, lr}
 800ab06:	2300      	movs	r3, #0
 800ab08:	4d06      	ldr	r5, [pc, #24]	@ (800ab24 <_fstat_r+0x20>)
 800ab0a:	4604      	mov	r4, r0
 800ab0c:	4608      	mov	r0, r1
 800ab0e:	4611      	mov	r1, r2
 800ab10:	602b      	str	r3, [r5, #0]
 800ab12:	f7f6 fda8 	bl	8001666 <_fstat>
 800ab16:	1c43      	adds	r3, r0, #1
 800ab18:	d102      	bne.n	800ab20 <_fstat_r+0x1c>
 800ab1a:	682b      	ldr	r3, [r5, #0]
 800ab1c:	b103      	cbz	r3, 800ab20 <_fstat_r+0x1c>
 800ab1e:	6023      	str	r3, [r4, #0]
 800ab20:	bd38      	pop	{r3, r4, r5, pc}
 800ab22:	bf00      	nop
 800ab24:	20000498 	.word	0x20000498

0800ab28 <_isatty_r>:
 800ab28:	b538      	push	{r3, r4, r5, lr}
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	4d05      	ldr	r5, [pc, #20]	@ (800ab44 <_isatty_r+0x1c>)
 800ab2e:	4604      	mov	r4, r0
 800ab30:	4608      	mov	r0, r1
 800ab32:	602b      	str	r3, [r5, #0]
 800ab34:	f7f6 fda7 	bl	8001686 <_isatty>
 800ab38:	1c43      	adds	r3, r0, #1
 800ab3a:	d102      	bne.n	800ab42 <_isatty_r+0x1a>
 800ab3c:	682b      	ldr	r3, [r5, #0]
 800ab3e:	b103      	cbz	r3, 800ab42 <_isatty_r+0x1a>
 800ab40:	6023      	str	r3, [r4, #0]
 800ab42:	bd38      	pop	{r3, r4, r5, pc}
 800ab44:	20000498 	.word	0x20000498

0800ab48 <_sbrk_r>:
 800ab48:	b538      	push	{r3, r4, r5, lr}
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	4d05      	ldr	r5, [pc, #20]	@ (800ab64 <_sbrk_r+0x1c>)
 800ab4e:	4604      	mov	r4, r0
 800ab50:	4608      	mov	r0, r1
 800ab52:	602b      	str	r3, [r5, #0]
 800ab54:	f7f6 fdb0 	bl	80016b8 <_sbrk>
 800ab58:	1c43      	adds	r3, r0, #1
 800ab5a:	d102      	bne.n	800ab62 <_sbrk_r+0x1a>
 800ab5c:	682b      	ldr	r3, [r5, #0]
 800ab5e:	b103      	cbz	r3, 800ab62 <_sbrk_r+0x1a>
 800ab60:	6023      	str	r3, [r4, #0]
 800ab62:	bd38      	pop	{r3, r4, r5, pc}
 800ab64:	20000498 	.word	0x20000498

0800ab68 <memchr>:
 800ab68:	b2c9      	uxtb	r1, r1
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	4402      	add	r2, r0
 800ab6e:	b510      	push	{r4, lr}
 800ab70:	4293      	cmp	r3, r2
 800ab72:	4618      	mov	r0, r3
 800ab74:	d101      	bne.n	800ab7a <memchr+0x12>
 800ab76:	2000      	movs	r0, #0
 800ab78:	e003      	b.n	800ab82 <memchr+0x1a>
 800ab7a:	7804      	ldrb	r4, [r0, #0]
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	428c      	cmp	r4, r1
 800ab80:	d1f6      	bne.n	800ab70 <memchr+0x8>
 800ab82:	bd10      	pop	{r4, pc}

0800ab84 <_init>:
 800ab84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab86:	bf00      	nop
 800ab88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab8a:	bc08      	pop	{r3}
 800ab8c:	469e      	mov	lr, r3
 800ab8e:	4770      	bx	lr

0800ab90 <_fini>:
 800ab90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab92:	bf00      	nop
 800ab94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab96:	bc08      	pop	{r3}
 800ab98:	469e      	mov	lr, r3
 800ab9a:	4770      	bx	lr
