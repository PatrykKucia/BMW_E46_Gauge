
STM32H523CE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9e4  08000254  08000254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  0800bc38  0800bc38  0000cc38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c064  0800c064  0000e070  2**0
                  CONTENTS
  4 .ARM          00000008  0800c064  0800c064  0000d064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c06c  0800c06c  0000e070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c06c  0800c06c  0000d06c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c070  0800c070  0000d070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800c074  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000544  20000070  0800c0e4  0000e070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005b4  0800c0e4  0000e5b4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000e070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c125  00000000  00000000  0000e0a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ec2  00000000  00000000  0002a1cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a8  00000000  00000000  0002d090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001288  00000000  00000000  0002e838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cfbe  00000000  00000000  0002fac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d8c3  00000000  00000000  0005ca7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ffec  00000000  00000000  0007a341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019a32d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fe0  00000000  00000000  0019a370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001a1350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000254 <__do_global_dtors_aux>:
 8000254:	b510      	push	{r4, lr}
 8000256:	4c05      	ldr	r4, [pc, #20]	@ (800026c <__do_global_dtors_aux+0x18>)
 8000258:	7823      	ldrb	r3, [r4, #0]
 800025a:	b933      	cbnz	r3, 800026a <__do_global_dtors_aux+0x16>
 800025c:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x1c>)
 800025e:	b113      	cbz	r3, 8000266 <__do_global_dtors_aux+0x12>
 8000260:	4804      	ldr	r0, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x20>)
 8000262:	f3af 8000 	nop.w
 8000266:	2301      	movs	r3, #1
 8000268:	7023      	strb	r3, [r4, #0]
 800026a:	bd10      	pop	{r4, pc}
 800026c:	20000070 	.word	0x20000070
 8000270:	00000000 	.word	0x00000000
 8000274:	0800bc20 	.word	0x0800bc20

08000278 <frame_dummy>:
 8000278:	b508      	push	{r3, lr}
 800027a:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <frame_dummy+0x10>)
 800027c:	b11b      	cbz	r3, 8000286 <frame_dummy+0xe>
 800027e:	4903      	ldr	r1, [pc, #12]	@ (800028c <frame_dummy+0x14>)
 8000280:	4803      	ldr	r0, [pc, #12]	@ (8000290 <frame_dummy+0x18>)
 8000282:	f3af 8000 	nop.w
 8000286:	bd08      	pop	{r3, pc}
 8000288:	00000000 	.word	0x00000000
 800028c:	20000074 	.word	0x20000074
 8000290:	0800bc20 	.word	0x0800bc20

08000294 <strlen>:
 8000294:	4603      	mov	r3, r0
 8000296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029a:	2a00      	cmp	r2, #0
 800029c:	d1fb      	bne.n	8000296 <strlen+0x2>
 800029e:	1a18      	subs	r0, r3, r0
 80002a0:	3801      	subs	r0, #1
 80002a2:	4770      	bx	lr

080002a4 <__aeabi_drsub>:
 80002a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a8:	e002      	b.n	80002b0 <__adddf3>
 80002aa:	bf00      	nop

080002ac <__aeabi_dsub>:
 80002ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002b0 <__adddf3>:
 80002b0:	b530      	push	{r4, r5, lr}
 80002b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ba:	ea94 0f05 	teq	r4, r5
 80002be:	bf08      	it	eq
 80002c0:	ea90 0f02 	teqeq	r0, r2
 80002c4:	bf1f      	itttt	ne
 80002c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d6:	f000 80e2 	beq.w	800049e <__adddf3+0x1ee>
 80002da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e2:	bfb8      	it	lt
 80002e4:	426d      	neglt	r5, r5
 80002e6:	dd0c      	ble.n	8000302 <__adddf3+0x52>
 80002e8:	442c      	add	r4, r5
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	ea82 0000 	eor.w	r0, r2, r0
 80002f6:	ea83 0101 	eor.w	r1, r3, r1
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	2d36      	cmp	r5, #54	@ 0x36
 8000304:	bf88      	it	hi
 8000306:	bd30      	pophi	{r4, r5, pc}
 8000308:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800030c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000310:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000314:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x70>
 800031a:	4240      	negs	r0, r0
 800031c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000320:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000324:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000328:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x84>
 800032e:	4252      	negs	r2, r2
 8000330:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000334:	ea94 0f05 	teq	r4, r5
 8000338:	f000 80a7 	beq.w	800048a <__adddf3+0x1da>
 800033c:	f1a4 0401 	sub.w	r4, r4, #1
 8000340:	f1d5 0e20 	rsbs	lr, r5, #32
 8000344:	db0d      	blt.n	8000362 <__adddf3+0xb2>
 8000346:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034a:	fa22 f205 	lsr.w	r2, r2, r5
 800034e:	1880      	adds	r0, r0, r2
 8000350:	f141 0100 	adc.w	r1, r1, #0
 8000354:	fa03 f20e 	lsl.w	r2, r3, lr
 8000358:	1880      	adds	r0, r0, r2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	4159      	adcs	r1, r3
 8000360:	e00e      	b.n	8000380 <__adddf3+0xd0>
 8000362:	f1a5 0520 	sub.w	r5, r5, #32
 8000366:	f10e 0e20 	add.w	lr, lr, #32
 800036a:	2a01      	cmp	r2, #1
 800036c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000370:	bf28      	it	cs
 8000372:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	18c0      	adds	r0, r0, r3
 800037c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000380:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000384:	d507      	bpl.n	8000396 <__adddf3+0xe6>
 8000386:	f04f 0e00 	mov.w	lr, #0
 800038a:	f1dc 0c00 	rsbs	ip, ip, #0
 800038e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000392:	eb6e 0101 	sbc.w	r1, lr, r1
 8000396:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800039a:	d31b      	bcc.n	80003d4 <__adddf3+0x124>
 800039c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003a0:	d30c      	bcc.n	80003bc <__adddf3+0x10c>
 80003a2:	0849      	lsrs	r1, r1, #1
 80003a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003ac:	f104 0401 	add.w	r4, r4, #1
 80003b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b8:	f080 809a 	bcs.w	80004f0 <__adddf3+0x240>
 80003bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003c0:	bf08      	it	eq
 80003c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c6:	f150 0000 	adcs.w	r0, r0, #0
 80003ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ce:	ea41 0105 	orr.w	r1, r1, r5
 80003d2:	bd30      	pop	{r4, r5, pc}
 80003d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d8:	4140      	adcs	r0, r0
 80003da:	eb41 0101 	adc.w	r1, r1, r1
 80003de:	3c01      	subs	r4, #1
 80003e0:	bf28      	it	cs
 80003e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e6:	d2e9      	bcs.n	80003bc <__adddf3+0x10c>
 80003e8:	f091 0f00 	teq	r1, #0
 80003ec:	bf04      	itt	eq
 80003ee:	4601      	moveq	r1, r0
 80003f0:	2000      	moveq	r0, #0
 80003f2:	fab1 f381 	clz	r3, r1
 80003f6:	bf08      	it	eq
 80003f8:	3320      	addeq	r3, #32
 80003fa:	f1a3 030b 	sub.w	r3, r3, #11
 80003fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000402:	da0c      	bge.n	800041e <__adddf3+0x16e>
 8000404:	320c      	adds	r2, #12
 8000406:	dd08      	ble.n	800041a <__adddf3+0x16a>
 8000408:	f102 0c14 	add.w	ip, r2, #20
 800040c:	f1c2 020c 	rsb	r2, r2, #12
 8000410:	fa01 f00c 	lsl.w	r0, r1, ip
 8000414:	fa21 f102 	lsr.w	r1, r1, r2
 8000418:	e00c      	b.n	8000434 <__adddf3+0x184>
 800041a:	f102 0214 	add.w	r2, r2, #20
 800041e:	bfd8      	it	le
 8000420:	f1c2 0c20 	rsble	ip, r2, #32
 8000424:	fa01 f102 	lsl.w	r1, r1, r2
 8000428:	fa20 fc0c 	lsr.w	ip, r0, ip
 800042c:	bfdc      	itt	le
 800042e:	ea41 010c 	orrle.w	r1, r1, ip
 8000432:	4090      	lslle	r0, r2
 8000434:	1ae4      	subs	r4, r4, r3
 8000436:	bfa2      	ittt	ge
 8000438:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800043c:	4329      	orrge	r1, r5
 800043e:	bd30      	popge	{r4, r5, pc}
 8000440:	ea6f 0404 	mvn.w	r4, r4
 8000444:	3c1f      	subs	r4, #31
 8000446:	da1c      	bge.n	8000482 <__adddf3+0x1d2>
 8000448:	340c      	adds	r4, #12
 800044a:	dc0e      	bgt.n	800046a <__adddf3+0x1ba>
 800044c:	f104 0414 	add.w	r4, r4, #20
 8000450:	f1c4 0220 	rsb	r2, r4, #32
 8000454:	fa20 f004 	lsr.w	r0, r0, r4
 8000458:	fa01 f302 	lsl.w	r3, r1, r2
 800045c:	ea40 0003 	orr.w	r0, r0, r3
 8000460:	fa21 f304 	lsr.w	r3, r1, r4
 8000464:	ea45 0103 	orr.w	r1, r5, r3
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	f1c4 040c 	rsb	r4, r4, #12
 800046e:	f1c4 0220 	rsb	r2, r4, #32
 8000472:	fa20 f002 	lsr.w	r0, r0, r2
 8000476:	fa01 f304 	lsl.w	r3, r1, r4
 800047a:	ea40 0003 	orr.w	r0, r0, r3
 800047e:	4629      	mov	r1, r5
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	fa21 f004 	lsr.w	r0, r1, r4
 8000486:	4629      	mov	r1, r5
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	f094 0f00 	teq	r4, #0
 800048e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000492:	bf06      	itte	eq
 8000494:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000498:	3401      	addeq	r4, #1
 800049a:	3d01      	subne	r5, #1
 800049c:	e74e      	b.n	800033c <__adddf3+0x8c>
 800049e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a2:	bf18      	it	ne
 80004a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a8:	d029      	beq.n	80004fe <__adddf3+0x24e>
 80004aa:	ea94 0f05 	teq	r4, r5
 80004ae:	bf08      	it	eq
 80004b0:	ea90 0f02 	teqeq	r0, r2
 80004b4:	d005      	beq.n	80004c2 <__adddf3+0x212>
 80004b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ba:	bf04      	itt	eq
 80004bc:	4619      	moveq	r1, r3
 80004be:	4610      	moveq	r0, r2
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	ea91 0f03 	teq	r1, r3
 80004c6:	bf1e      	ittt	ne
 80004c8:	2100      	movne	r1, #0
 80004ca:	2000      	movne	r0, #0
 80004cc:	bd30      	popne	{r4, r5, pc}
 80004ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d2:	d105      	bne.n	80004e0 <__adddf3+0x230>
 80004d4:	0040      	lsls	r0, r0, #1
 80004d6:	4149      	adcs	r1, r1
 80004d8:	bf28      	it	cs
 80004da:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e4:	bf3c      	itt	cc
 80004e6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ea:	bd30      	popcc	{r4, r5, pc}
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f8:	f04f 0000 	mov.w	r0, #0
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000502:	bf1a      	itte	ne
 8000504:	4619      	movne	r1, r3
 8000506:	4610      	movne	r0, r2
 8000508:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800050c:	bf1c      	itt	ne
 800050e:	460b      	movne	r3, r1
 8000510:	4602      	movne	r2, r0
 8000512:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000516:	bf06      	itte	eq
 8000518:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800051c:	ea91 0f03 	teqeq	r1, r3
 8000520:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	bf00      	nop

08000528 <__aeabi_ui2d>:
 8000528:	f090 0f00 	teq	r0, #0
 800052c:	bf04      	itt	eq
 800052e:	2100      	moveq	r1, #0
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000538:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800053c:	f04f 0500 	mov.w	r5, #0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e750      	b.n	80003e8 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_i2d>:
 8000548:	f090 0f00 	teq	r0, #0
 800054c:	bf04      	itt	eq
 800054e:	2100      	moveq	r1, #0
 8000550:	4770      	bxeq	lr
 8000552:	b530      	push	{r4, r5, lr}
 8000554:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000558:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800055c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000560:	bf48      	it	mi
 8000562:	4240      	negmi	r0, r0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e73e      	b.n	80003e8 <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_f2d>:
 800056c:	0042      	lsls	r2, r0, #1
 800056e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000572:	ea4f 0131 	mov.w	r1, r1, rrx
 8000576:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057a:	bf1f      	itttt	ne
 800057c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000580:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000584:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000588:	4770      	bxne	lr
 800058a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058e:	bf08      	it	eq
 8000590:	4770      	bxeq	lr
 8000592:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000596:	bf04      	itt	eq
 8000598:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005ac:	e71c      	b.n	80003e8 <__adddf3+0x138>
 80005ae:	bf00      	nop

080005b0 <__aeabi_ul2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f04f 0500 	mov.w	r5, #0
 80005be:	e00a      	b.n	80005d6 <__aeabi_l2d+0x16>

080005c0 <__aeabi_l2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ce:	d502      	bpl.n	80005d6 <__aeabi_l2d+0x16>
 80005d0:	4240      	negs	r0, r0
 80005d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e2:	f43f aed8 	beq.w	8000396 <__adddf3+0xe6>
 80005e6:	f04f 0203 	mov.w	r2, #3
 80005ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ee:	bf18      	it	ne
 80005f0:	3203      	addne	r2, #3
 80005f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f6:	bf18      	it	ne
 80005f8:	3203      	addne	r2, #3
 80005fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fe:	f1c2 0320 	rsb	r3, r2, #32
 8000602:	fa00 fc03 	lsl.w	ip, r0, r3
 8000606:	fa20 f002 	lsr.w	r0, r0, r2
 800060a:	fa01 fe03 	lsl.w	lr, r1, r3
 800060e:	ea40 000e 	orr.w	r0, r0, lr
 8000612:	fa21 f102 	lsr.w	r1, r1, r2
 8000616:	4414      	add	r4, r2
 8000618:	e6bd      	b.n	8000396 <__adddf3+0xe6>
 800061a:	bf00      	nop

0800061c <__aeabi_uldivmod>:
 800061c:	b953      	cbnz	r3, 8000634 <__aeabi_uldivmod+0x18>
 800061e:	b94a      	cbnz	r2, 8000634 <__aeabi_uldivmod+0x18>
 8000620:	2900      	cmp	r1, #0
 8000622:	bf08      	it	eq
 8000624:	2800      	cmpeq	r0, #0
 8000626:	bf1c      	itt	ne
 8000628:	f04f 31ff 	movne.w	r1, #4294967295
 800062c:	f04f 30ff 	movne.w	r0, #4294967295
 8000630:	f000 b97e 	b.w	8000930 <__aeabi_idiv0>
 8000634:	f1ad 0c08 	sub.w	ip, sp, #8
 8000638:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800063c:	f000 f806 	bl	800064c <__udivmoddi4>
 8000640:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000644:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000648:	b004      	add	sp, #16
 800064a:	4770      	bx	lr

0800064c <__udivmoddi4>:
 800064c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000650:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000652:	460c      	mov	r4, r1
 8000654:	2b00      	cmp	r3, #0
 8000656:	d14d      	bne.n	80006f4 <__udivmoddi4+0xa8>
 8000658:	428a      	cmp	r2, r1
 800065a:	460f      	mov	r7, r1
 800065c:	4684      	mov	ip, r0
 800065e:	4696      	mov	lr, r2
 8000660:	fab2 f382 	clz	r3, r2
 8000664:	d960      	bls.n	8000728 <__udivmoddi4+0xdc>
 8000666:	b14b      	cbz	r3, 800067c <__udivmoddi4+0x30>
 8000668:	fa02 fe03 	lsl.w	lr, r2, r3
 800066c:	f1c3 0220 	rsb	r2, r3, #32
 8000670:	409f      	lsls	r7, r3
 8000672:	fa00 fc03 	lsl.w	ip, r0, r3
 8000676:	fa20 f202 	lsr.w	r2, r0, r2
 800067a:	4317      	orrs	r7, r2
 800067c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000680:	fa1f f48e 	uxth.w	r4, lr
 8000684:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000688:	fbb7 f1f6 	udiv	r1, r7, r6
 800068c:	fb06 7711 	mls	r7, r6, r1, r7
 8000690:	fb01 f004 	mul.w	r0, r1, r4
 8000694:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000698:	4290      	cmp	r0, r2
 800069a:	d908      	bls.n	80006ae <__udivmoddi4+0x62>
 800069c:	eb1e 0202 	adds.w	r2, lr, r2
 80006a0:	f101 37ff 	add.w	r7, r1, #4294967295
 80006a4:	d202      	bcs.n	80006ac <__udivmoddi4+0x60>
 80006a6:	4290      	cmp	r0, r2
 80006a8:	f200 812d 	bhi.w	8000906 <__udivmoddi4+0x2ba>
 80006ac:	4639      	mov	r1, r7
 80006ae:	1a12      	subs	r2, r2, r0
 80006b0:	fa1f fc8c 	uxth.w	ip, ip
 80006b4:	fbb2 f0f6 	udiv	r0, r2, r6
 80006b8:	fb06 2210 	mls	r2, r6, r0, r2
 80006bc:	fb00 f404 	mul.w	r4, r0, r4
 80006c0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80006c4:	4564      	cmp	r4, ip
 80006c6:	d908      	bls.n	80006da <__udivmoddi4+0x8e>
 80006c8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80006cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80006d0:	d202      	bcs.n	80006d8 <__udivmoddi4+0x8c>
 80006d2:	4564      	cmp	r4, ip
 80006d4:	f200 811a 	bhi.w	800090c <__udivmoddi4+0x2c0>
 80006d8:	4610      	mov	r0, r2
 80006da:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006de:	ebac 0c04 	sub.w	ip, ip, r4
 80006e2:	2100      	movs	r1, #0
 80006e4:	b125      	cbz	r5, 80006f0 <__udivmoddi4+0xa4>
 80006e6:	fa2c f303 	lsr.w	r3, ip, r3
 80006ea:	2200      	movs	r2, #0
 80006ec:	e9c5 3200 	strd	r3, r2, [r5]
 80006f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006f4:	428b      	cmp	r3, r1
 80006f6:	d905      	bls.n	8000704 <__udivmoddi4+0xb8>
 80006f8:	b10d      	cbz	r5, 80006fe <__udivmoddi4+0xb2>
 80006fa:	e9c5 0100 	strd	r0, r1, [r5]
 80006fe:	2100      	movs	r1, #0
 8000700:	4608      	mov	r0, r1
 8000702:	e7f5      	b.n	80006f0 <__udivmoddi4+0xa4>
 8000704:	fab3 f183 	clz	r1, r3
 8000708:	2900      	cmp	r1, #0
 800070a:	d14d      	bne.n	80007a8 <__udivmoddi4+0x15c>
 800070c:	42a3      	cmp	r3, r4
 800070e:	f0c0 80f2 	bcc.w	80008f6 <__udivmoddi4+0x2aa>
 8000712:	4290      	cmp	r0, r2
 8000714:	f080 80ef 	bcs.w	80008f6 <__udivmoddi4+0x2aa>
 8000718:	4606      	mov	r6, r0
 800071a:	4623      	mov	r3, r4
 800071c:	4608      	mov	r0, r1
 800071e:	2d00      	cmp	r5, #0
 8000720:	d0e6      	beq.n	80006f0 <__udivmoddi4+0xa4>
 8000722:	e9c5 6300 	strd	r6, r3, [r5]
 8000726:	e7e3      	b.n	80006f0 <__udivmoddi4+0xa4>
 8000728:	2b00      	cmp	r3, #0
 800072a:	f040 80a2 	bne.w	8000872 <__udivmoddi4+0x226>
 800072e:	1a8a      	subs	r2, r1, r2
 8000730:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000734:	fa1f f68e 	uxth.w	r6, lr
 8000738:	2101      	movs	r1, #1
 800073a:	fbb2 f4f7 	udiv	r4, r2, r7
 800073e:	fb07 2014 	mls	r0, r7, r4, r2
 8000742:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000746:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800074a:	fb06 f004 	mul.w	r0, r6, r4
 800074e:	4290      	cmp	r0, r2
 8000750:	d90f      	bls.n	8000772 <__udivmoddi4+0x126>
 8000752:	eb1e 0202 	adds.w	r2, lr, r2
 8000756:	f104 38ff 	add.w	r8, r4, #4294967295
 800075a:	bf2c      	ite	cs
 800075c:	f04f 0901 	movcs.w	r9, #1
 8000760:	f04f 0900 	movcc.w	r9, #0
 8000764:	4290      	cmp	r0, r2
 8000766:	d903      	bls.n	8000770 <__udivmoddi4+0x124>
 8000768:	f1b9 0f00 	cmp.w	r9, #0
 800076c:	f000 80c8 	beq.w	8000900 <__udivmoddi4+0x2b4>
 8000770:	4644      	mov	r4, r8
 8000772:	1a12      	subs	r2, r2, r0
 8000774:	fa1f fc8c 	uxth.w	ip, ip
 8000778:	fbb2 f0f7 	udiv	r0, r2, r7
 800077c:	fb07 2210 	mls	r2, r7, r0, r2
 8000780:	fb00 f606 	mul.w	r6, r0, r6
 8000784:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000788:	4566      	cmp	r6, ip
 800078a:	d908      	bls.n	800079e <__udivmoddi4+0x152>
 800078c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000790:	f100 32ff 	add.w	r2, r0, #4294967295
 8000794:	d202      	bcs.n	800079c <__udivmoddi4+0x150>
 8000796:	4566      	cmp	r6, ip
 8000798:	f200 80bb 	bhi.w	8000912 <__udivmoddi4+0x2c6>
 800079c:	4610      	mov	r0, r2
 800079e:	ebac 0c06 	sub.w	ip, ip, r6
 80007a2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007a6:	e79d      	b.n	80006e4 <__udivmoddi4+0x98>
 80007a8:	f1c1 0620 	rsb	r6, r1, #32
 80007ac:	408b      	lsls	r3, r1
 80007ae:	fa04 fe01 	lsl.w	lr, r4, r1
 80007b2:	fa22 f706 	lsr.w	r7, r2, r6
 80007b6:	fa20 fc06 	lsr.w	ip, r0, r6
 80007ba:	40f4      	lsrs	r4, r6
 80007bc:	408a      	lsls	r2, r1
 80007be:	431f      	orrs	r7, r3
 80007c0:	ea4e 030c 	orr.w	r3, lr, ip
 80007c4:	fa00 fe01 	lsl.w	lr, r0, r1
 80007c8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007cc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007d0:	fa1f fc87 	uxth.w	ip, r7
 80007d4:	fbb4 f0f8 	udiv	r0, r4, r8
 80007d8:	fb08 4410 	mls	r4, r8, r0, r4
 80007dc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007e0:	fb00 f90c 	mul.w	r9, r0, ip
 80007e4:	45a1      	cmp	r9, r4
 80007e6:	d90e      	bls.n	8000806 <__udivmoddi4+0x1ba>
 80007e8:	193c      	adds	r4, r7, r4
 80007ea:	f100 3aff 	add.w	sl, r0, #4294967295
 80007ee:	bf2c      	ite	cs
 80007f0:	f04f 0b01 	movcs.w	fp, #1
 80007f4:	f04f 0b00 	movcc.w	fp, #0
 80007f8:	45a1      	cmp	r9, r4
 80007fa:	d903      	bls.n	8000804 <__udivmoddi4+0x1b8>
 80007fc:	f1bb 0f00 	cmp.w	fp, #0
 8000800:	f000 8093 	beq.w	800092a <__udivmoddi4+0x2de>
 8000804:	4650      	mov	r0, sl
 8000806:	eba4 0409 	sub.w	r4, r4, r9
 800080a:	fa1f f983 	uxth.w	r9, r3
 800080e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000812:	fb08 4413 	mls	r4, r8, r3, r4
 8000816:	fb03 fc0c 	mul.w	ip, r3, ip
 800081a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800081e:	45a4      	cmp	ip, r4
 8000820:	d906      	bls.n	8000830 <__udivmoddi4+0x1e4>
 8000822:	193c      	adds	r4, r7, r4
 8000824:	f103 38ff 	add.w	r8, r3, #4294967295
 8000828:	d201      	bcs.n	800082e <__udivmoddi4+0x1e2>
 800082a:	45a4      	cmp	ip, r4
 800082c:	d87a      	bhi.n	8000924 <__udivmoddi4+0x2d8>
 800082e:	4643      	mov	r3, r8
 8000830:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000834:	eba4 040c 	sub.w	r4, r4, ip
 8000838:	fba0 9802 	umull	r9, r8, r0, r2
 800083c:	4544      	cmp	r4, r8
 800083e:	46cc      	mov	ip, r9
 8000840:	4643      	mov	r3, r8
 8000842:	d302      	bcc.n	800084a <__udivmoddi4+0x1fe>
 8000844:	d106      	bne.n	8000854 <__udivmoddi4+0x208>
 8000846:	45ce      	cmp	lr, r9
 8000848:	d204      	bcs.n	8000854 <__udivmoddi4+0x208>
 800084a:	3801      	subs	r0, #1
 800084c:	ebb9 0c02 	subs.w	ip, r9, r2
 8000850:	eb68 0307 	sbc.w	r3, r8, r7
 8000854:	b15d      	cbz	r5, 800086e <__udivmoddi4+0x222>
 8000856:	ebbe 020c 	subs.w	r2, lr, ip
 800085a:	eb64 0403 	sbc.w	r4, r4, r3
 800085e:	fa04 f606 	lsl.w	r6, r4, r6
 8000862:	fa22 f301 	lsr.w	r3, r2, r1
 8000866:	40cc      	lsrs	r4, r1
 8000868:	431e      	orrs	r6, r3
 800086a:	e9c5 6400 	strd	r6, r4, [r5]
 800086e:	2100      	movs	r1, #0
 8000870:	e73e      	b.n	80006f0 <__udivmoddi4+0xa4>
 8000872:	fa02 fe03 	lsl.w	lr, r2, r3
 8000876:	f1c3 0120 	rsb	r1, r3, #32
 800087a:	fa04 f203 	lsl.w	r2, r4, r3
 800087e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000882:	40cc      	lsrs	r4, r1
 8000884:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000888:	fa20 f101 	lsr.w	r1, r0, r1
 800088c:	fa1f f68e 	uxth.w	r6, lr
 8000890:	fbb4 f0f7 	udiv	r0, r4, r7
 8000894:	430a      	orrs	r2, r1
 8000896:	fb07 4410 	mls	r4, r7, r0, r4
 800089a:	0c11      	lsrs	r1, r2, #16
 800089c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80008a0:	fb00 f406 	mul.w	r4, r0, r6
 80008a4:	428c      	cmp	r4, r1
 80008a6:	d90e      	bls.n	80008c6 <__udivmoddi4+0x27a>
 80008a8:	eb1e 0101 	adds.w	r1, lr, r1
 80008ac:	f100 38ff 	add.w	r8, r0, #4294967295
 80008b0:	bf2c      	ite	cs
 80008b2:	f04f 0901 	movcs.w	r9, #1
 80008b6:	f04f 0900 	movcc.w	r9, #0
 80008ba:	428c      	cmp	r4, r1
 80008bc:	d902      	bls.n	80008c4 <__udivmoddi4+0x278>
 80008be:	f1b9 0f00 	cmp.w	r9, #0
 80008c2:	d02c      	beq.n	800091e <__udivmoddi4+0x2d2>
 80008c4:	4640      	mov	r0, r8
 80008c6:	1b09      	subs	r1, r1, r4
 80008c8:	b292      	uxth	r2, r2
 80008ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80008ce:	fb07 1114 	mls	r1, r7, r4, r1
 80008d2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008d6:	fb04 f106 	mul.w	r1, r4, r6
 80008da:	4291      	cmp	r1, r2
 80008dc:	d907      	bls.n	80008ee <__udivmoddi4+0x2a2>
 80008de:	eb1e 0202 	adds.w	r2, lr, r2
 80008e2:	f104 38ff 	add.w	r8, r4, #4294967295
 80008e6:	d201      	bcs.n	80008ec <__udivmoddi4+0x2a0>
 80008e8:	4291      	cmp	r1, r2
 80008ea:	d815      	bhi.n	8000918 <__udivmoddi4+0x2cc>
 80008ec:	4644      	mov	r4, r8
 80008ee:	1a52      	subs	r2, r2, r1
 80008f0:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 80008f4:	e721      	b.n	800073a <__udivmoddi4+0xee>
 80008f6:	1a86      	subs	r6, r0, r2
 80008f8:	eb64 0303 	sbc.w	r3, r4, r3
 80008fc:	2001      	movs	r0, #1
 80008fe:	e70e      	b.n	800071e <__udivmoddi4+0xd2>
 8000900:	3c02      	subs	r4, #2
 8000902:	4472      	add	r2, lr
 8000904:	e735      	b.n	8000772 <__udivmoddi4+0x126>
 8000906:	3902      	subs	r1, #2
 8000908:	4472      	add	r2, lr
 800090a:	e6d0      	b.n	80006ae <__udivmoddi4+0x62>
 800090c:	44f4      	add	ip, lr
 800090e:	3802      	subs	r0, #2
 8000910:	e6e3      	b.n	80006da <__udivmoddi4+0x8e>
 8000912:	44f4      	add	ip, lr
 8000914:	3802      	subs	r0, #2
 8000916:	e742      	b.n	800079e <__udivmoddi4+0x152>
 8000918:	3c02      	subs	r4, #2
 800091a:	4472      	add	r2, lr
 800091c:	e7e7      	b.n	80008ee <__udivmoddi4+0x2a2>
 800091e:	3802      	subs	r0, #2
 8000920:	4471      	add	r1, lr
 8000922:	e7d0      	b.n	80008c6 <__udivmoddi4+0x27a>
 8000924:	3b02      	subs	r3, #2
 8000926:	443c      	add	r4, r7
 8000928:	e782      	b.n	8000830 <__udivmoddi4+0x1e4>
 800092a:	3802      	subs	r0, #2
 800092c:	443c      	add	r4, r7
 800092e:	e76a      	b.n	8000806 <__udivmoddi4+0x1ba>

08000930 <__aeabi_idiv0>:
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop

08000934 <ProcessByte>:

ParserState state = STATE_SEARCHING;
uint16_t packet_length = 0;  // Długość pakietu
uint16_t data_index = 0;     // Indeks w buforze danych
uint8_t packet_buffer[256];  // Bufor na dane pakietu
void ProcessByte(uint8_t byte) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b09a      	sub	sp, #104	@ 0x68
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
    static uint8_t ipd_header_index = 0;
    static const uint8_t ipd_header[] = {0x2B, 0x49, 0x50, 0x44};  // "+IPD" w hex

    switch (state) {
 800093e:	4b6e      	ldr	r3, [pc, #440]	@ (8000af8 <ProcessByte+0x1c4>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b02      	cmp	r3, #2
 8000944:	d062      	beq.n	8000a0c <ProcessByte+0xd8>
 8000946:	2b02      	cmp	r3, #2
 8000948:	f300 80d1 	bgt.w	8000aee <ProcessByte+0x1ba>
 800094c:	2b00      	cmp	r3, #0
 800094e:	d002      	beq.n	8000956 <ProcessByte+0x22>
 8000950:	2b01      	cmp	r3, #1
 8000952:	d029      	beq.n	80009a8 <ProcessByte+0x74>

                state = STATE_SEARCHING;
            }
            break;
    }
}
 8000954:	e0cb      	b.n	8000aee <ProcessByte+0x1ba>
            if (byte == ipd_header[ipd_header_index]) {
 8000956:	4b69      	ldr	r3, [pc, #420]	@ (8000afc <ProcessByte+0x1c8>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	461a      	mov	r2, r3
 800095c:	4b68      	ldr	r3, [pc, #416]	@ (8000b00 <ProcessByte+0x1cc>)
 800095e:	5c9b      	ldrb	r3, [r3, r2]
 8000960:	79fa      	ldrb	r2, [r7, #7]
 8000962:	429a      	cmp	r2, r3
 8000964:	d114      	bne.n	8000990 <ProcessByte+0x5c>
                ipd_header_index++;
 8000966:	4b65      	ldr	r3, [pc, #404]	@ (8000afc <ProcessByte+0x1c8>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	3301      	adds	r3, #1
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4b63      	ldr	r3, [pc, #396]	@ (8000afc <ProcessByte+0x1c8>)
 8000970:	701a      	strb	r2, [r3, #0]
                if (ipd_header_index == sizeof(ipd_header)) {
 8000972:	4b62      	ldr	r3, [pc, #392]	@ (8000afc <ProcessByte+0x1c8>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b04      	cmp	r3, #4
 8000978:	f040 80b6 	bne.w	8000ae8 <ProcessByte+0x1b4>
                    state = STATE_READING_LEN;
 800097c:	4b5e      	ldr	r3, [pc, #376]	@ (8000af8 <ProcessByte+0x1c4>)
 800097e:	2201      	movs	r2, #1
 8000980:	701a      	strb	r2, [r3, #0]
                    ipd_header_index = 0;
 8000982:	4b5e      	ldr	r3, [pc, #376]	@ (8000afc <ProcessByte+0x1c8>)
 8000984:	2200      	movs	r2, #0
 8000986:	701a      	strb	r2, [r3, #0]
                    packet_length = 0;
 8000988:	4b5e      	ldr	r3, [pc, #376]	@ (8000b04 <ProcessByte+0x1d0>)
 800098a:	2200      	movs	r2, #0
 800098c:	801a      	strh	r2, [r3, #0]
            break;
 800098e:	e0ab      	b.n	8000ae8 <ProcessByte+0x1b4>
                ipd_header_index = (byte == ipd_header[0]) ? 1 : 0;
 8000990:	4b5b      	ldr	r3, [pc, #364]	@ (8000b00 <ProcessByte+0x1cc>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	79fa      	ldrb	r2, [r7, #7]
 8000996:	429a      	cmp	r2, r3
 8000998:	bf0c      	ite	eq
 800099a:	2301      	moveq	r3, #1
 800099c:	2300      	movne	r3, #0
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	461a      	mov	r2, r3
 80009a2:	4b56      	ldr	r3, [pc, #344]	@ (8000afc <ProcessByte+0x1c8>)
 80009a4:	701a      	strb	r2, [r3, #0]
            break;
 80009a6:	e09f      	b.n	8000ae8 <ProcessByte+0x1b4>
            if (byte >= '0' && byte <= '9') {
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	2b2f      	cmp	r3, #47	@ 0x2f
 80009ac:	d91c      	bls.n	80009e8 <ProcessByte+0xb4>
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	2b39      	cmp	r3, #57	@ 0x39
 80009b2:	d819      	bhi.n	80009e8 <ProcessByte+0xb4>
                packet_length = packet_length * 10 + (byte - '0');
 80009b4:	4b53      	ldr	r3, [pc, #332]	@ (8000b04 <ProcessByte+0x1d0>)
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	461a      	mov	r2, r3
 80009ba:	0092      	lsls	r2, r2, #2
 80009bc:	4413      	add	r3, r2
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	4413      	add	r3, r2
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	3b30      	subs	r3, #48	@ 0x30
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	4b4d      	ldr	r3, [pc, #308]	@ (8000b04 <ProcessByte+0x1d0>)
 80009d0:	801a      	strh	r2, [r3, #0]
                if (packet_length >= BUFFER_SIZE) {
 80009d2:	4b4c      	ldr	r3, [pc, #304]	@ (8000b04 <ProcessByte+0x1d0>)
 80009d4:	881b      	ldrh	r3, [r3, #0]
 80009d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80009d8:	d917      	bls.n	8000a0a <ProcessByte+0xd6>
                    state = STATE_SEARCHING;
 80009da:	4b47      	ldr	r3, [pc, #284]	@ (8000af8 <ProcessByte+0x1c4>)
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]
                    packet_length = 0;
 80009e0:	4b48      	ldr	r3, [pc, #288]	@ (8000b04 <ProcessByte+0x1d0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	801a      	strh	r2, [r3, #0]
                if (packet_length >= BUFFER_SIZE) {
 80009e6:	e010      	b.n	8000a0a <ProcessByte+0xd6>
            } else if (byte == ':') {
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	2b3a      	cmp	r3, #58	@ 0x3a
 80009ec:	d106      	bne.n	80009fc <ProcessByte+0xc8>
                state = STATE_READING_DATA;
 80009ee:	4b42      	ldr	r3, [pc, #264]	@ (8000af8 <ProcessByte+0x1c4>)
 80009f0:	2202      	movs	r2, #2
 80009f2:	701a      	strb	r2, [r3, #0]
                data_index = 0;
 80009f4:	4b44      	ldr	r3, [pc, #272]	@ (8000b08 <ProcessByte+0x1d4>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	801a      	strh	r2, [r3, #0]
            break;
 80009fa:	e078      	b.n	8000aee <ProcessByte+0x1ba>
                state = STATE_SEARCHING;
 80009fc:	4b3e      	ldr	r3, [pc, #248]	@ (8000af8 <ProcessByte+0x1c4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]
                packet_length = 0;
 8000a02:	4b40      	ldr	r3, [pc, #256]	@ (8000b04 <ProcessByte+0x1d0>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	801a      	strh	r2, [r3, #0]
            break;
 8000a08:	e071      	b.n	8000aee <ProcessByte+0x1ba>
 8000a0a:	e070      	b.n	8000aee <ProcessByte+0x1ba>
            if (data_index < packet_length && data_index < BUFFER_SIZE) {
 8000a0c:	4b3e      	ldr	r3, [pc, #248]	@ (8000b08 <ProcessByte+0x1d4>)
 8000a0e:	881a      	ldrh	r2, [r3, #0]
 8000a10:	4b3c      	ldr	r3, [pc, #240]	@ (8000b04 <ProcessByte+0x1d0>)
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d20d      	bcs.n	8000a34 <ProcessByte+0x100>
 8000a18:	4b3b      	ldr	r3, [pc, #236]	@ (8000b08 <ProcessByte+0x1d4>)
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a1e:	d809      	bhi.n	8000a34 <ProcessByte+0x100>
                packet_buffer[data_index++] = byte;
 8000a20:	4b39      	ldr	r3, [pc, #228]	@ (8000b08 <ProcessByte+0x1d4>)
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	1c5a      	adds	r2, r3, #1
 8000a26:	b291      	uxth	r1, r2
 8000a28:	4a37      	ldr	r2, [pc, #220]	@ (8000b08 <ProcessByte+0x1d4>)
 8000a2a:	8011      	strh	r1, [r2, #0]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4a37      	ldr	r2, [pc, #220]	@ (8000b0c <ProcessByte+0x1d8>)
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	5453      	strb	r3, [r2, r1]
            if (data_index >= packet_length) {
 8000a34:	4b34      	ldr	r3, [pc, #208]	@ (8000b08 <ProcessByte+0x1d4>)
 8000a36:	881a      	ldrh	r2, [r3, #0]
 8000a38:	4b32      	ldr	r3, [pc, #200]	@ (8000b04 <ProcessByte+0x1d0>)
 8000a3a:	881b      	ldrh	r3, [r3, #0]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d355      	bcc.n	8000aec <ProcessByte+0x1b8>
                if (packet_length >= sizeof(xxx)) {
 8000a40:	4b30      	ldr	r3, [pc, #192]	@ (8000b04 <ProcessByte+0x1d0>)
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	2b5f      	cmp	r3, #95	@ 0x5f
 8000a46:	d94b      	bls.n	8000ae0 <ProcessByte+0x1ac>
                    memcpy(&received_packet, packet_buffer, sizeof(xxx));
 8000a48:	4a30      	ldr	r2, [pc, #192]	@ (8000b0c <ProcessByte+0x1d8>)
 8000a4a:	f107 0308 	add.w	r3, r7, #8
 8000a4e:	4611      	mov	r1, r2
 8000a50:	2260      	movs	r2, #96	@ 0x60
 8000a52:	4618      	mov	r0, r3
 8000a54:	f00a fbbd 	bl	800b1d2 <memcpy>
                    printf("Speed: %.2f m/s\n", received_packet.speed);
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff fd86 	bl	800056c <__aeabi_f2d>
 8000a60:	4602      	mov	r2, r0
 8000a62:	460b      	mov	r3, r1
 8000a64:	482a      	ldr	r0, [pc, #168]	@ (8000b10 <ProcessByte+0x1dc>)
 8000a66:	f00a f9f1 	bl	800ae4c <iprintf>
                    printf("RPM: %.2f\n", received_packet.rpm);
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fd7d 	bl	800056c <__aeabi_f2d>
 8000a72:	4602      	mov	r2, r0
 8000a74:	460b      	mov	r3, r1
 8000a76:	4827      	ldr	r0, [pc, #156]	@ (8000b14 <ProcessByte+0x1e0>)
 8000a78:	f00a f9e8 	bl	800ae4c <iprintf>
                    printf("Throttle: %.2f\n", received_packet.throttle);
 8000a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fd74 	bl	800056c <__aeabi_f2d>
 8000a84:	4602      	mov	r2, r0
 8000a86:	460b      	mov	r3, r1
 8000a88:	4823      	ldr	r0, [pc, #140]	@ (8000b18 <ProcessByte+0x1e4>)
 8000a8a:	f00a f9df 	bl	800ae4c <iprintf>
                    printf("Brake: %.2f\n", received_packet.brake);
 8000a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fd6b 	bl	800056c <__aeabi_f2d>
 8000a96:	4602      	mov	r2, r0
 8000a98:	460b      	mov	r3, r1
 8000a9a:	4820      	ldr	r0, [pc, #128]	@ (8000b1c <ProcessByte+0x1e8>)
 8000a9c:	f00a f9d6 	bl	800ae4c <iprintf>
                    printf("Clutch: %.2f\n", received_packet.clutch);
 8000aa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fd62 	bl	800056c <__aeabi_f2d>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	460b      	mov	r3, r1
 8000aac:	481c      	ldr	r0, [pc, #112]	@ (8000b20 <ProcessByte+0x1ec>)
 8000aae:	f00a f9cd 	bl	800ae4c <iprintf>
                    printf("Gear: %d\n", received_packet.gear);
 8000ab2:	7cbb      	ldrb	r3, [r7, #18]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	481b      	ldr	r0, [pc, #108]	@ (8000b24 <ProcessByte+0x1f0>)
 8000ab8:	f00a f9c8 	bl	800ae4c <iprintf>
                    printf("Turbo: %.2f BAR\n", received_packet.turbo);
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff fd54 	bl	800056c <__aeabi_f2d>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	460b      	mov	r3, r1
 8000ac8:	4817      	ldr	r0, [pc, #92]	@ (8000b28 <ProcessByte+0x1f4>)
 8000aca:	f00a f9bf 	bl	800ae4c <iprintf>
                    printf("Engine Temp: %.2f C\n", received_packet.engTemp);
 8000ace:	6a3b      	ldr	r3, [r7, #32]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff fd4b 	bl	800056c <__aeabi_f2d>
 8000ad6:	4602      	mov	r2, r0
 8000ad8:	460b      	mov	r3, r1
 8000ada:	4814      	ldr	r0, [pc, #80]	@ (8000b2c <ProcessByte+0x1f8>)
 8000adc:	f00a f9b6 	bl	800ae4c <iprintf>
                state = STATE_SEARCHING;
 8000ae0:	4b05      	ldr	r3, [pc, #20]	@ (8000af8 <ProcessByte+0x1c4>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	701a      	strb	r2, [r3, #0]
            break;
 8000ae6:	e001      	b.n	8000aec <ProcessByte+0x1b8>
            break;
 8000ae8:	bf00      	nop
 8000aea:	e000      	b.n	8000aee <ProcessByte+0x1ba>
            break;
 8000aec:	bf00      	nop
}
 8000aee:	bf00      	nop
 8000af0:	3768      	adds	r7, #104	@ 0x68
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000354 	.word	0x20000354
 8000afc:	2000045c 	.word	0x2000045c
 8000b00:	0800bfdc 	.word	0x0800bfdc
 8000b04:	20000356 	.word	0x20000356
 8000b08:	20000358 	.word	0x20000358
 8000b0c:	2000035c 	.word	0x2000035c
 8000b10:	0800bc38 	.word	0x0800bc38
 8000b14:	0800bc4c 	.word	0x0800bc4c
 8000b18:	0800bc58 	.word	0x0800bc58
 8000b1c:	0800bc68 	.word	0x0800bc68
 8000b20:	0800bc78 	.word	0x0800bc78
 8000b24:	0800bc88 	.word	0x0800bc88
 8000b28:	0800bc94 	.word	0x0800bc94
 8000b2c:	0800bca8 	.word	0x0800bca8

08000b30 <ESP32_SendCommand>:

void ESP32_SendCommand(const char* command) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff fbab 	bl	8000294 <strlen>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	6879      	ldr	r1, [r7, #4]
 8000b48:	4808      	ldr	r0, [pc, #32]	@ (8000b6c <ESP32_SendCommand+0x3c>)
 8000b4a:	f008 ff0d 	bl	8009968 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);  // Końcówka komendy AT
 8000b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b52:	2202      	movs	r2, #2
 8000b54:	4906      	ldr	r1, [pc, #24]	@ (8000b70 <ESP32_SendCommand+0x40>)
 8000b56:	4805      	ldr	r0, [pc, #20]	@ (8000b6c <ESP32_SendCommand+0x3c>)
 8000b58:	f008 ff06 	bl	8009968 <HAL_UART_Transmit>
    HAL_Delay(100);  // Czekaj na odpowiedź
 8000b5c:	2064      	movs	r0, #100	@ 0x64
 8000b5e:	f001 fb8d 	bl	800227c <HAL_Delay>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200001dc 	.word	0x200001dc
 8000b70:	0800bcc0 	.word	0x0800bcc0

08000b74 <__io_putchar>:
// Funkcja do parsowania danych UDP
void ParseUDPPacket(uint8_t* data, xxx* packet) {
    memcpy(packet, data, sizeof(xxx));  // Skopiuj dane do struktury
}
int __io_putchar(int ch) //function used to print() in usart
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2b0a      	cmp	r3, #10
 8000b80:	d102      	bne.n	8000b88 <__io_putchar+0x14>
    __io_putchar('\r');
 8000b82:	200d      	movs	r0, #13
 8000b84:	f7ff fff6 	bl	8000b74 <__io_putchar>

  }

  HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000b88:	1d39      	adds	r1, r7, #4
 8000b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8e:	2201      	movs	r2, #1
 8000b90:	4803      	ldr	r0, [pc, #12]	@ (8000ba0 <__io_putchar+0x2c>)
 8000b92:	f008 fee9 	bl	8009968 <HAL_UART_Transmit>

  return 1;
 8000b96:	2301      	movs	r3, #1
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200001dc 	.word	0x200001dc

08000ba4 <Set_PWM_Frequency>:

    // Przemiana liniowa prędkości na częstotliwość PWM
    uint32_t freq = MIN_FREQ + (uint32_t)((float)(speed - MIN_SPEED) / (MAX_SPEED - MIN_SPEED) * (MAX_FREQ - MIN_FREQ));
    return freq;
}
void Set_PWM_Frequency(uint16_t speed_kmh) {
 8000ba4:	b480      	push	{r7}
 8000ba6:	b087      	sub	sp, #28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	80fb      	strh	r3, [r7, #6]
    // Poprawiona interpolacja częstotliwości
    uint32_t freq = 100 + ((1700 - 100) * speed_kmh) / 250;
 8000bae:	88fb      	ldrh	r3, [r7, #6]
 8000bb0:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8000bb4:	fb02 f303 	mul.w	r3, r2, r3
 8000bb8:	4a24      	ldr	r2, [pc, #144]	@ (8000c4c <Set_PWM_Frequency+0xa8>)
 8000bba:	fb82 1203 	smull	r1, r2, r2, r3
 8000bbe:	1112      	asrs	r2, r2, #4
 8000bc0:	17db      	asrs	r3, r3, #31
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	3364      	adds	r3, #100	@ 0x64
 8000bc6:	60fb      	str	r3, [r7, #12]

    uint32_t arr_value, psc_value;

    if (freq < 3800) {
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f640 62d7 	movw	r2, #3799	@ 0xed7
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d817      	bhi.n	8000c02 <Set_PWM_Frequency+0x5e>
        psc_value = (250000000 / (65536 * freq));
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	041b      	lsls	r3, r3, #16
 8000bd6:	4a1e      	ldr	r2, [pc, #120]	@ (8000c50 <Set_PWM_Frequency+0xac>)
 8000bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bdc:	613b      	str	r3, [r7, #16]
        if (psc_value > 65535) psc_value = 65535;  // PSC nie może przekroczyć 16 bitów
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000be4:	d302      	bcc.n	8000bec <Set_PWM_Frequency+0x48>
 8000be6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bea:	613b      	str	r3, [r7, #16]
        arr_value = (250000000 / ((psc_value + 1) * freq)) - 1;
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	68fa      	ldr	r2, [r7, #12]
 8000bf2:	fb02 f303 	mul.w	r3, r2, r3
 8000bf6:	4a16      	ldr	r2, [pc, #88]	@ (8000c50 <Set_PWM_Frequency+0xac>)
 8000bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	e007      	b.n	8000c12 <Set_PWM_Frequency+0x6e>
    } else {
        psc_value = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
        arr_value = (250000000 / freq) - 1;
 8000c06:	4a12      	ldr	r2, [pc, #72]	@ (8000c50 <Set_PWM_Frequency+0xac>)
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	617b      	str	r3, [r7, #20]
    }

    if (arr_value > 65535) arr_value = 65535;  // Ograniczenie ARR do 16 bitów
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c18:	d302      	bcc.n	8000c20 <Set_PWM_Frequency+0x7c>
 8000c1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c1e:	617b      	str	r3, [r7, #20]
    //printf("Speed: %d km/h, Freq: %lu Hz, PSC: %lu, ARR: %lu\n", speed_kmh, freq, psc_value, arr_value);

    __HAL_TIM_SET_PRESCALER(&htim1, psc_value);
 8000c20:	4b0c      	ldr	r3, [pc, #48]	@ (8000c54 <Set_PWM_Frequency+0xb0>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_TIM_SET_AUTORELOAD(&htim1, arr_value);
 8000c28:	4b0a      	ldr	r3, [pc, #40]	@ (8000c54 <Set_PWM_Frequency+0xb0>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	697a      	ldr	r2, [r7, #20]
 8000c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c30:	4a08      	ldr	r2, [pc, #32]	@ (8000c54 <Set_PWM_Frequency+0xb0>)
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000c36:	4b07      	ldr	r3, [pc, #28]	@ (8000c54 <Set_PWM_Frequency+0xb0>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	625a      	str	r2, [r3, #36]	@ 0x24

    // W niektórych przypadkach wymagane jest wygenerowanie zdarzenia aktualizacji
    //__HAL_TIM_GENERATE_EVENT(&htim1, TIM_EVENTSOURCE_UPDATE);
}
 8000c3e:	bf00      	nop
 8000c40:	371c      	adds	r7, #28
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	10624dd3 	.word	0x10624dd3
 8000c50:	0ee6b280 	.word	0x0ee6b280
 8000c54:	20000144 	.word	0x20000144

08000c58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c58:	b5b0      	push	{r4, r5, r7, lr}
 8000c5a:	b0e8      	sub	sp, #416	@ 0x1a0
 8000c5c:	af00      	add	r7, sp, #0
int main(void)
 8000c5e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8000c62:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c66:	f001 fa4b 	bl	8002100 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c6a:	f000 f995 	bl	8000f98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6e:	f000 fc51 	bl	8001514 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000c72:	f000 fa03 	bl	800107c <MX_FDCAN1_Init>
  MX_I2C1_Init();
 8000c76:	f000 fa47 	bl	8001108 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000c7a:	f000 fa99 	bl	80011b0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c7e:	f000 fb55 	bl	800132c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000c82:	f000 fbad 	bl	80013e0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000c86:	f000 fbf7 	bl	8001478 <MX_USART2_UART_Init>
  MX_ICACHE_Init();
 8000c8a:	f000 fa7d 	bl	8001188 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000c8e:	2100      	movs	r1, #0
 8000c90:	48a9      	ldr	r0, [pc, #676]	@ (8000f38 <main+0x2e0>)
 8000c92:	f007 f8af 	bl	8007df4 <HAL_TIM_OC_Start_IT>
  //initESP();
  //TIM1->CCR1 = 50;
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000c96:	2104      	movs	r1, #4
 8000c98:	48a7      	ldr	r0, [pc, #668]	@ (8000f38 <main+0x2e0>)
 8000c9a:	f007 fa95 	bl	80081c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	48a5      	ldr	r0, [pc, #660]	@ (8000f38 <main+0x2e0>)
 8000ca2:	f007 fa91 	bl	80081c8 <HAL_TIM_PWM_Start>

  // Konfiguracja ESP32 za pomocą komend AT
     ESP32_SendCommand("AT+RST");  // Resetuj ESP32
 8000ca6:	48a5      	ldr	r0, [pc, #660]	@ (8000f3c <main+0x2e4>)
 8000ca8:	f7ff ff42 	bl	8000b30 <ESP32_SendCommand>
    // HAL_Delay(1000);
    // ESP32_SendCommand("AT+CWMODE=1");  // Ustaw tryb stacji (klient Wi-Fi)
    // HAL_Delay(1000);
    // ESP32_SendCommand("AT+CWJAP=\"PLAY_Swiatlowod_19A1\",\"t8Xv9auf7Z#D\"");  // Połącz z Wi-Fi
     HAL_Delay(5000);
 8000cac:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000cb0:	f001 fae4 	bl	800227c <HAL_Delay>
     ESP32_SendCommand("AT+CIPSTART=\"UDP\",\"0.0.0.0\",12345,12345,2");  // Ustaw tryb UDP
 8000cb4:	48a2      	ldr	r0, [pc, #648]	@ (8000f40 <main+0x2e8>)
 8000cb6:	f7ff ff3b 	bl	8000b30 <ESP32_SendCommand>
     HAL_Delay(1000);
 8000cba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cbe:	f001 fadd 	bl	800227c <HAL_Delay>

  // Konfiguracja wiadomości



	 TxData_DME1[0] = 0x19 ;                     // LV_SWI_IGK=1, LV_F_N_ENG=0, LV_ACK_TCS=0, LV_ERR_GC=1, SF_TQD=1
 8000cc2:	4ba0      	ldr	r3, [pc, #640]	@ (8000f44 <main+0x2ec>)
 8000cc4:	2219      	movs	r2, #25
 8000cc6:	701a      	strb	r2, [r3, #0]
	 TxData_DME1[1] = 0x4C;      // TQI_TQR_CAN = 75%
 8000cc8:	4b9e      	ldr	r3, [pc, #632]	@ (8000f44 <main+0x2ec>)
 8000cca:	224c      	movs	r2, #76	@ 0x4c
 8000ccc:	705a      	strb	r2, [r3, #1]
	 uint16_t engineSpeed = (uint16_t)(3000 / 0.15625);
 8000cce:	f44f 4396 	mov.w	r3, #19200	@ 0x4b00
 8000cd2:	f8a7 319a 	strh.w	r3, [r7, #410]	@ 0x19a
	 TxData_DME1[2] = 0xD0; // N_ENG LSB
 8000cd6:	4b9b      	ldr	r3, [pc, #620]	@ (8000f44 <main+0x2ec>)
 8000cd8:	22d0      	movs	r2, #208	@ 0xd0
 8000cda:	709a      	strb	r2, [r3, #2]
	 TxData_DME1[3] = (uint8_t)(engineSpeed >> 8);   // N_ENG MSB
 8000cdc:	f8b7 319a 	ldrh.w	r3, [r7, #410]	@ 0x19a
 8000ce0:	0a1b      	lsrs	r3, r3, #8
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4b97      	ldr	r3, [pc, #604]	@ (8000f44 <main+0x2ec>)
 8000ce8:	70da      	strb	r2, [r3, #3]
	 TxData_DME1[4] = (uint8_t)(60 / 0.390625);      // TQI_CAN = 60%
 8000cea:	4b96      	ldr	r3, [pc, #600]	@ (8000f44 <main+0x2ec>)
 8000cec:	2299      	movs	r2, #153	@ 0x99
 8000cee:	711a      	strb	r2, [r3, #4]
	 TxData_DME1[5] = (uint8_t)(5 / 0.390625);       // TQ_LOSS_CAN = 5%
 8000cf0:	4b94      	ldr	r3, [pc, #592]	@ (8000f44 <main+0x2ec>)
 8000cf2:	220c      	movs	r2, #12
 8000cf4:	715a      	strb	r2, [r3, #5]
	 TxData_DME1[6] = 0b11000000;                   // ERR_AMT_CAN bits
 8000cf6:	4b93      	ldr	r3, [pc, #588]	@ (8000f44 <main+0x2ec>)
 8000cf8:	22c0      	movs	r2, #192	@ 0xc0
 8000cfa:	719a      	strb	r2, [r3, #6]
	 TxData_DME1[7] = (uint8_t)(80 / 0.390625);      // TQI_MAF_CAN = 80%
 8000cfc:	4b91      	ldr	r3, [pc, #580]	@ (8000f44 <main+0x2ec>)
 8000cfe:	22cc      	movs	r2, #204	@ 0xcc
 8000d00:	71da      	strb	r2, [r3, #7]

  TxHeader_DME1.Identifier = 0x316;  // ID ramki
 8000d02:	4b91      	ldr	r3, [pc, #580]	@ (8000f48 <main+0x2f0>)
 8000d04:	f240 3216 	movw	r2, #790	@ 0x316
 8000d08:	601a      	str	r2, [r3, #0]
  TxHeader_DME1.IdType = FDCAN_STANDARD_ID;
 8000d0a:	4b8f      	ldr	r3, [pc, #572]	@ (8000f48 <main+0x2f0>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	605a      	str	r2, [r3, #4]
  TxHeader_DME1.TxFrameType = FDCAN_DATA_FRAME;
 8000d10:	4b8d      	ldr	r3, [pc, #564]	@ (8000f48 <main+0x2f0>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  TxHeader_DME1.DataLength = FDCAN_DLC_BYTES_8;
 8000d16:	4b8c      	ldr	r3, [pc, #560]	@ (8000f48 <main+0x2f0>)
 8000d18:	2208      	movs	r2, #8
 8000d1a:	60da      	str	r2, [r3, #12]
  TxHeader_DME1.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000d1c:	4b8a      	ldr	r3, [pc, #552]	@ (8000f48 <main+0x2f0>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  TxHeader_DME1.BitRateSwitch = FDCAN_BRS_OFF;
 8000d22:	4b89      	ldr	r3, [pc, #548]	@ (8000f48 <main+0x2f0>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	615a      	str	r2, [r3, #20]
  TxHeader_DME1.FDFormat = FDCAN_CLASSIC_CAN;
 8000d28:	4b87      	ldr	r3, [pc, #540]	@ (8000f48 <main+0x2f0>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	619a      	str	r2, [r3, #24]
  TxHeader_DME1.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000d2e:	4b86      	ldr	r3, [pc, #536]	@ (8000f48 <main+0x2f0>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	61da      	str	r2, [r3, #28]



  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterIndex = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000d40:	2301      	movs	r3, #1
 8000d42:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
  sFilterConfig.FilterID1 = 0x316;
 8000d46:	f240 3316 	movw	r3, #790	@ 0x316
 8000d4a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  sFilterConfig.FilterID2 = 0x1FFFFFFF;
 8000d4e:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8000d52:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000d56:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	487b      	ldr	r0, [pc, #492]	@ (8000f4c <main+0x2f4>)
 8000d5e:	f001 fe41 	bl	80029e4 <HAL_FDCAN_ConfigFilter>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d002      	beq.n	8000d6e <main+0x116>
      /* Filter configuration Error */
      printf("[CAN] Unable to configure!\n");
 8000d68:	4879      	ldr	r0, [pc, #484]	@ (8000f50 <main+0x2f8>)
 8000d6a:	f00a f8d7 	bl	800af1c <puts>
  }
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 8000d6e:	4877      	ldr	r0, [pc, #476]	@ (8000f4c <main+0x2f4>)
 8000d70:	f001 fe92 	bl	8002a98 <HAL_FDCAN_Start>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <main+0x126>
  {
   Error_Handler();
 8000d7a:	f000 fd7d 	bl	8001878 <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2101      	movs	r1, #1
 8000d82:	4872      	ldr	r0, [pc, #456]	@ (8000f4c <main+0x2f4>)
 8000d84:	f001 ffd6 	bl	8002d34 <HAL_FDCAN_ActivateNotification>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <main+0x13a>
  {
    /* Notification Error */
    Error_Handler();
 8000d8e:	f000 fd73 	bl	8001878 <Error_Handler>
  }
  printf("starting\n");
 8000d92:	4870      	ldr	r0, [pc, #448]	@ (8000f54 <main+0x2fc>)
 8000d94:	f00a f8c2 	bl	800af1c <puts>
  HAL_GPIO_TogglePin(D1_GPIO_Port, D1_Pin);
 8000d98:	2110      	movs	r1, #16
 8000d9a:	486f      	ldr	r0, [pc, #444]	@ (8000f58 <main+0x300>)
 8000d9c:	f002 fc16 	bl	80035cc <HAL_GPIO_TogglePin>
  //HAL_GPIO_WritePin(GPIO_PIN_3, GPIOB, GPIO_PIN_RESET);
  uint8_t piecpiec[]     = {0x55};
 8000da0:	2355      	movs	r3, #85	@ 0x55
 8000da2:	f887 316c 	strb.w	r3, [r7, #364]	@ 0x16c

  uint8_t a[]     = {  0x3f, 0x0b, 0xBF ,0x0c, 0x00, 0x00, 0x00,0x00, 0x00 ,0x00, 0x01, 0x06 };
 8000da6:	4a6d      	ldr	r2, [pc, #436]	@ (8000f5c <main+0x304>)
 8000da8:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8000dac:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  uint8_t turnRight[]     = {0xD0, 0x07, 0xBF, 0x5B, 0x43, 0x83, 0x2E, 0x3F, 0xE2, '\n'};
 8000db2:	4a6b      	ldr	r2, [pc, #428]	@ (8000f60 <main+0x308>)
 8000db4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000db8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dba:	c303      	stmia	r3!, {r0, r1}
 8000dbc:	801a      	strh	r2, [r3, #0]
  uint8_t turnLeft[]      = {0xD0, 0x07, 0xBF, 0x5B, 0x23, 0x83, 0x0E, 0x3F, 0xA2};
 8000dbe:	4a69      	ldr	r2, [pc, #420]	@ (8000f64 <main+0x30c>)
 8000dc0:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000dc4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dc6:	c303      	stmia	r3!, {r0, r1}
 8000dc8:	701a      	strb	r2, [r3, #0]
  uint8_t hazardLights[]  = {0xD0, 0x07, 0xBF, 0x5B, 0x63, 0x83, 0x0E, 0x3F, 0xE2};
 8000dca:	4a67      	ldr	r2, [pc, #412]	@ (8000f68 <main+0x310>)
 8000dcc:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8000dd0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dd2:	c303      	stmia	r3!, {r0, r1}
 8000dd4:	701a      	strb	r2, [r3, #0]
  uint8_t highBeam1[] = {0xd0, 0x07, 0xbf, 0x5b, 0x07, 0x83, 0x0a, 0x3f, 0x82, '\n'};  // Zakończone LF (Line Feed)
 8000dd6:	4a65      	ldr	r2, [pc, #404]	@ (8000f6c <main+0x314>)
 8000dd8:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8000ddc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dde:	c303      	stmia	r3!, {r0, r1}
 8000de0:	801a      	strh	r2, [r3, #0]
  uint8_t highBeam2[] = {0xd0, 0x07, 0xbf, 0x5b, 0x07, 0x83, 0x0a, 0x3f, 0x82, '\r'};  // Zakończone CR (Carriage Return)
 8000de2:	4a63      	ldr	r2, [pc, #396]	@ (8000f70 <main+0x318>)
 8000de4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000de8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dea:	c303      	stmia	r3!, {r0, r1}
 8000dec:	801a      	strh	r2, [r3, #0]
  uint8_t highBeam3[] = {0xd0, 0x07, 0xbf, 0x5b, 0x07, 0x83, 0x0a, 0x3f, 0x82, '\r', '\n'}; // Zakończone CRLF (Carriage Return + Line Feed)
 8000dee:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000df2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000df6:	4a5f      	ldr	r2, [pc, #380]	@ (8000f74 <main+0x31c>)
 8000df8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dfa:	c303      	stmia	r3!, {r0, r1}
 8000dfc:	801a      	strh	r2, [r3, #0]
 8000dfe:	3302      	adds	r3, #2
 8000e00:	0c12      	lsrs	r2, r2, #16
 8000e02:	701a      	strb	r2, [r3, #0]
  uint8_t highBeam4[] = {0xd0, 0x07, 0xbf, 0x5b, 0x07, 0x83, 0x0a, 0x3f, 0x82, '\r', '\n'};
 8000e04:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000e08:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000e0c:	4a59      	ldr	r2, [pc, #356]	@ (8000f74 <main+0x31c>)
 8000e0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e10:	c303      	stmia	r3!, {r0, r1}
 8000e12:	801a      	strh	r2, [r3, #0]
 8000e14:	3302      	adds	r3, #2
 8000e16:	0c12      	lsrs	r2, r2, #16
 8000e18:	701a      	strb	r2, [r3, #0]
  uint8_t testing[] = {0xd0, 0x07, 0xbf, 0x5b, 0x01 , 0xC9 , 0x02 , 0x02 , 0xFB, '\n'}; // Zakończone NULL (znak końca ciągu w stylu C)
 8000e1a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000e1e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000e22:	4a55      	ldr	r2, [pc, #340]	@ (8000f78 <main+0x320>)
 8000e24:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e26:	c303      	stmia	r3!, {r0, r1}
 8000e28:	801a      	strh	r2, [r3, #0]
  uint8_t byte_before_newline = highBeam4[8];  // 0x82
 8000e2a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000e2e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000e32:	7a1b      	ldrb	r3, [r3, #8]
 8000e34:	f887 3199 	strb.w	r3, [r7, #409]	@ 0x199
  uint8_t new_byte = (byte_before_newline << 1); // Przesuwamy 0x82 w lewo o 1 bit, aby zrobić miejsce na bit LOW
 8000e38:	f897 3199 	ldrb.w	r3, [r7, #409]	@ 0x199
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	f887 3198 	strb.w	r3, [r7, #408]	@ 0x198

  // Wstawiamy nowy bajt do tablicy
  highBeam4[8] = new_byte;  // Zaktualizowana wartość 0x82 -> 0x04
 8000e42:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000e46:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000e4a:	f897 2198 	ldrb.w	r2, [r7, #408]	@ 0x198
 8000e4e:	721a      	strb	r2, [r3, #8]
  uint8_t highBeam5[] = {0xd0, 0x07, 0xbf, 0x5b, 0x07, 0x83, 0x0a, 0x3f, 0x82, 0xFF}; // Zakończone 0xFF (często używane w niektórych protokołach)
 8000e50:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000e54:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000e58:	4a48      	ldr	r2, [pc, #288]	@ (8000f7c <main+0x324>)
 8000e5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e5c:	c303      	stmia	r3!, {r0, r1}
 8000e5e:	801a      	strh	r2, [r3, #0]
  uint8_t stopTurning[]   = {0xD0, 0x07, 0xBF, 0x5B, 0x03, 0x83, 0x0A, 0x3F, 0x86};
 8000e60:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000e64:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000e68:	4a45      	ldr	r2, [pc, #276]	@ (8000f80 <main+0x328>)
 8000e6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e6c:	c303      	stmia	r3!, {r0, r1}
 8000e6e:	701a      	strb	r2, [r3, #0]
  uint8_t lcdTurnOff[]    = {0x30, 0x19, 0x80, 0x1A, 0x30, 0x00, 0x20, 0x20, 0x20,
 8000e70:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000e74:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000e78:	4a42      	ldr	r2, [pc, #264]	@ (8000f84 <main+0x32c>)
 8000e7a:	461c      	mov	r4, r3
 8000e7c:	4615      	mov	r5, r2
 8000e7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e82:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e86:	c407      	stmia	r4!, {r0, r1, r2}
 8000e88:	8023      	strh	r3, [r4, #0]
 8000e8a:	3402      	adds	r4, #2
 8000e8c:	0c1b      	lsrs	r3, r3, #16
 8000e8e:	7023      	strb	r3, [r4, #0]
                             0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                             0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x83, 0x80, 0x04,
                             0x30, 0x1B, 0x00, 0x8F};

  uint8_t turnRight_noChecksum[] = {0xD0, 0x07, 0xBF, 0x5B, 0x40, 0x40, 0x32, 0x40};
 8000e90:	4b3d      	ldr	r3, [pc, #244]	@ (8000f88 <main+0x330>)
 8000e92:	f507 72bf 	add.w	r2, r7, #382	@ 0x17e
 8000e96:	cb03      	ldmia	r3!, {r0, r1}
 8000e98:	6010      	str	r0, [r2, #0]
 8000e9a:	6051      	str	r1, [r2, #4]
  uint8_t turnLeft_noChecksum[]  = {0xD0, 0x07, 0xBF, 0x5B, 0x23, 0x83, 0x0E, 0x3F};
 8000e9c:	4b3b      	ldr	r3, [pc, #236]	@ (8000f8c <main+0x334>)
 8000e9e:	f207 126d 	addw	r2, r7, #365	@ 0x16d
 8000ea2:	cb03      	ldmia	r3!, {r0, r1}
 8000ea4:	6010      	str	r0, [r2, #0]
 8000ea6:	6051      	str	r1, [r2, #4]

 // HAL_UART_Transmit(&huart2, turnRight, sizeof(turnRight), 500);
  //HAL_UART_Transmit(&huart2, frame, sizeof(frame), HAL_MAX_DELAY);
  //HAL_UART_Transmit(&huart2, frame2, sizeof(frame), HAL_MAX_DELAY);
  uint8_t rxData[1]; // Bufor na 1 bajt danych
  uint16_t speed = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f8a7 319e 	strh.w	r3, [r7, #414]	@ 0x19e
	    int8_t direction = 1; // 1 = rośnie, -1 = maleje
 8000eae:	2301      	movs	r3, #1
 8000eb0:	f887 319d 	strb.w	r3, [r7, #413]	@ 0x19d
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t byte;
	          if (HAL_UART_Receive(&huart1, &byte, 1, 300) == HAL_OK) {
 8000eb4:	f107 014b 	add.w	r1, r7, #75	@ 0x4b
 8000eb8:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	4834      	ldr	r0, [pc, #208]	@ (8000f90 <main+0x338>)
 8000ec0:	f008 fdf0 	bl	8009aa4 <HAL_UART_Receive>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d107      	bne.n	8000eda <main+0x282>
	              ProcessByte(byte);
 8000eca:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000ece:	f2a3 1355 	subw	r3, r3, #341	@ 0x155
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fd2d 	bl	8000934 <ProcessByte>
//	          }
//
//	          HAL_Delay(100);  // Czekaj przed kolejnym odczytem


	        Set_PWM_Frequency(speed);
 8000eda:	f8b7 319e 	ldrh.w	r3, [r7, #414]	@ 0x19e
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fe60 	bl	8000ba4 <Set_PWM_Frequency>
	        HAL_Delay(1);
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	f001 f9c9 	bl	800227c <HAL_Delay>

	        speed += direction;
 8000eea:	f997 319d 	ldrsb.w	r3, [r7, #413]	@ 0x19d
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	f8b7 319e 	ldrh.w	r3, [r7, #414]	@ 0x19e
 8000ef4:	4413      	add	r3, r2
 8000ef6:	f8a7 319e 	strh.w	r3, [r7, #414]	@ 0x19e
	        if (speed >= 250) {
 8000efa:	f8b7 319e 	ldrh.w	r3, [r7, #414]	@ 0x19e
 8000efe:	2bf9      	cmp	r3, #249	@ 0xf9
 8000f00:	d903      	bls.n	8000f0a <main+0x2b2>
	            direction = -1; // Odwracamy kierunek
 8000f02:	23ff      	movs	r3, #255	@ 0xff
 8000f04:	f887 319d 	strb.w	r3, [r7, #413]	@ 0x19d
 8000f08:	e006      	b.n	8000f18 <main+0x2c0>
	        }
	        else if (speed <= 0) {
 8000f0a:	f8b7 319e 	ldrh.w	r3, [r7, #414]	@ 0x19e
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d102      	bne.n	8000f18 <main+0x2c0>
	       	            direction = 1; // Odwracamy kierunek
 8000f12:	2301      	movs	r3, #1
 8000f14:	f887 319d 	strb.w	r3, [r7, #413]	@ 0x19d
	  // HAL_UART_Transmit(&huart2, frame, sizeof(frame), 100);

	   //HAL_UART_Transmit(&huart2, frame2, sizeof(frame), HAL_MAX_DELAY);
	  // printf("working\n");
	   // HAL_UART_Transmit(&huart2, piecpiec		, sizeof(piecpiec), 100);
	   uint8_t lf = 0x0A;  // LF (Line Feed) w ASCII
 8000f18:	230a      	movs	r3, #10
 8000f1a:	f887 3197 	strb.w	r3, [r7, #407]	@ 0x197
		 //Set_PWM_Frequency(100);
		 // HAL_Delay(10);  // Poczekaj chwilę, aby USART mógł zakończyć transmisję

		  //HAL_UART_Transmit(&huart2, &lf, 1, HAL_MAX_DELAY);  // Wysyłanie LF

	      uint8_t turn_left_data[] = {0xD0 ,0x08 ,0xBF ,0x5B ,0x40 ,0x00 ,0x04 ,0x00 ,0x00 ,0x78};
 8000f1e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000f22:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8000f26:	4a1b      	ldr	r2, [pc, #108]	@ (8000f94 <main+0x33c>)
 8000f28:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f2a:	c303      	stmia	r3!, {r0, r1}
 8000f2c:	801a      	strh	r2, [r3, #0]
	      uint8_t identifier = 0x5A;  // Przykładowy identyfikator ramki
 8000f2e:	235a      	movs	r3, #90	@ 0x5a
 8000f30:	f887 3196 	strb.w	r3, [r7, #406]	@ 0x196
  {
 8000f34:	e7be      	b.n	8000eb4 <main+0x25c>
 8000f36:	bf00      	nop
 8000f38:	20000144 	.word	0x20000144
 8000f3c:	0800bcc4 	.word	0x0800bcc4
 8000f40:	0800bccc 	.word	0x0800bccc
 8000f44:	20000000 	.word	0x20000000
 8000f48:	20000304 	.word	0x20000304
 8000f4c:	2000008c 	.word	0x2000008c
 8000f50:	0800bcf8 	.word	0x0800bcf8
 8000f54:	0800bd14 	.word	0x0800bd14
 8000f58:	42020400 	.word	0x42020400
 8000f5c:	0800bd20 	.word	0x0800bd20
 8000f60:	0800bd2c 	.word	0x0800bd2c
 8000f64:	0800bd38 	.word	0x0800bd38
 8000f68:	0800bd44 	.word	0x0800bd44
 8000f6c:	0800bd50 	.word	0x0800bd50
 8000f70:	0800bd5c 	.word	0x0800bd5c
 8000f74:	0800bd68 	.word	0x0800bd68
 8000f78:	0800bd74 	.word	0x0800bd74
 8000f7c:	0800bd80 	.word	0x0800bd80
 8000f80:	0800bd8c 	.word	0x0800bd8c
 8000f84:	0800bd98 	.word	0x0800bd98
 8000f88:	0800bdb8 	.word	0x0800bdb8
 8000f8c:	0800bdc0 	.word	0x0800bdc0
 8000f90:	200001dc 	.word	0x200001dc
 8000f94:	0800bdc8 	.word	0x0800bdc8

08000f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b09c      	sub	sp, #112	@ 0x70
 8000f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9e:	f107 0320 	add.w	r3, r7, #32
 8000fa2:	2250      	movs	r2, #80	@ 0x50
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f00a f898 	bl	800b0dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fac:	f107 0308 	add.w	r3, r7, #8
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
 8000fbc:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000fbe:	4b2d      	ldr	r3, [pc, #180]	@ (8001074 <SystemClock_Config+0xdc>)
 8000fc0:	691b      	ldr	r3, [r3, #16]
 8000fc2:	4a2c      	ldr	r2, [pc, #176]	@ (8001074 <SystemClock_Config+0xdc>)
 8000fc4:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000fc8:	6113      	str	r3, [r2, #16]
 8000fca:	4b2a      	ldr	r3, [pc, #168]	@ (8001074 <SystemClock_Config+0xdc>)
 8000fcc:	691b      	ldr	r3, [r3, #16]
 8000fce:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fd6:	bf00      	nop
 8000fd8:	4b26      	ldr	r3, [pc, #152]	@ (8001074 <SystemClock_Config+0xdc>)
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	f003 0308 	and.w	r3, r3, #8
 8000fe0:	2b08      	cmp	r3, #8
 8000fe2:	d1f9      	bne.n	8000fd8 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fe8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 62;
 8000ffa:	233e      	movs	r3, #62	@ 0x3e
 8000ffc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ffe:	2302      	movs	r3, #2
 8001000:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001002:	2302      	movs	r3, #2
 8001004:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001006:	2302      	movs	r3, #2
 8001008:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 800100a:	230c      	movs	r3, #12
 800100c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800100e:	2300      	movs	r3, #0
 8001010:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8001012:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001016:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001018:	f107 0320 	add.w	r3, r7, #32
 800101c:	4618      	mov	r0, r3
 800101e:	f002 fc93 	bl	8003948 <HAL_RCC_OscConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001028:	f000 fc26 	bl	8001878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102c:	231f      	movs	r3, #31
 800102e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001030:	2303      	movs	r3, #3
 8001032:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001044:	f107 0308 	add.w	r3, r7, #8
 8001048:	2105      	movs	r1, #5
 800104a:	4618      	mov	r0, r3
 800104c:	f003 f8b4 	bl	80041b8 <HAL_RCC_ClockConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001056:	f000 fc0f 	bl	8001878 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 800105a:	4b07      	ldr	r3, [pc, #28]	@ (8001078 <SystemClock_Config+0xe0>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001062:	4a05      	ldr	r2, [pc, #20]	@ (8001078 <SystemClock_Config+0xe0>)
 8001064:	f043 0320 	orr.w	r3, r3, #32
 8001068:	6013      	str	r3, [r2, #0]
}
 800106a:	bf00      	nop
 800106c:	3770      	adds	r7, #112	@ 0x70
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	44020800 	.word	0x44020800
 8001078:	40022000 	.word	0x40022000

0800107c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001080:	4b1f      	ldr	r3, [pc, #124]	@ (8001100 <MX_FDCAN1_Init+0x84>)
 8001082:	4a20      	ldr	r2, [pc, #128]	@ (8001104 <MX_FDCAN1_Init+0x88>)
 8001084:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001086:	4b1e      	ldr	r3, [pc, #120]	@ (8001100 <MX_FDCAN1_Init+0x84>)
 8001088:	2200      	movs	r2, #0
 800108a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800108c:	4b1c      	ldr	r3, [pc, #112]	@ (8001100 <MX_FDCAN1_Init+0x84>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001092:	4b1b      	ldr	r3, [pc, #108]	@ (8001100 <MX_FDCAN1_Init+0x84>)
 8001094:	2200      	movs	r2, #0
 8001096:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001098:	4b19      	ldr	r3, [pc, #100]	@ (8001100 <MX_FDCAN1_Init+0x84>)
 800109a:	2200      	movs	r2, #0
 800109c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800109e:	4b18      	ldr	r3, [pc, #96]	@ (8001100 <MX_FDCAN1_Init+0x84>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80010a4:	4b16      	ldr	r3, [pc, #88]	@ (8001100 <MX_FDCAN1_Init+0x84>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80010aa:	4b15      	ldr	r3, [pc, #84]	@ (8001100 <MX_FDCAN1_Init+0x84>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80010b0:	4b13      	ldr	r3, [pc, #76]	@ (8001100 <MX_FDCAN1_Init+0x84>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 11;
 80010b6:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <MX_FDCAN1_Init+0x84>)
 80010b8:	220b      	movs	r2, #11
 80010ba:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 80010bc:	4b10      	ldr	r3, [pc, #64]	@ (8001100 <MX_FDCAN1_Init+0x84>)
 80010be:	2204      	movs	r2, #4
 80010c0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80010c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001100 <MX_FDCAN1_Init+0x84>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80010c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001100 <MX_FDCAN1_Init+0x84>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80010ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <MX_FDCAN1_Init+0x84>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80010d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001100 <MX_FDCAN1_Init+0x84>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80010da:	4b09      	ldr	r3, [pc, #36]	@ (8001100 <MX_FDCAN1_Init+0x84>)
 80010dc:	2201      	movs	r2, #1
 80010de:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80010e0:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <MX_FDCAN1_Init+0x84>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80010e6:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <MX_FDCAN1_Init+0x84>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80010ec:	4804      	ldr	r0, [pc, #16]	@ (8001100 <MX_FDCAN1_Init+0x84>)
 80010ee:	f001 fb1f 	bl	8002730 <HAL_FDCAN_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80010f8:	f000 fbbe 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	2000008c 	.word	0x2000008c
 8001104:	4000a400 	.word	0x4000a400

08001108 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800110c:	4b1b      	ldr	r3, [pc, #108]	@ (800117c <MX_I2C1_Init+0x74>)
 800110e:	4a1c      	ldr	r2, [pc, #112]	@ (8001180 <MX_I2C1_Init+0x78>)
 8001110:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60808CD3;
 8001112:	4b1a      	ldr	r3, [pc, #104]	@ (800117c <MX_I2C1_Init+0x74>)
 8001114:	4a1b      	ldr	r2, [pc, #108]	@ (8001184 <MX_I2C1_Init+0x7c>)
 8001116:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001118:	4b18      	ldr	r3, [pc, #96]	@ (800117c <MX_I2C1_Init+0x74>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800111e:	4b17      	ldr	r3, [pc, #92]	@ (800117c <MX_I2C1_Init+0x74>)
 8001120:	2201      	movs	r2, #1
 8001122:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001124:	4b15      	ldr	r3, [pc, #84]	@ (800117c <MX_I2C1_Init+0x74>)
 8001126:	2200      	movs	r2, #0
 8001128:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800112a:	4b14      	ldr	r3, [pc, #80]	@ (800117c <MX_I2C1_Init+0x74>)
 800112c:	2200      	movs	r2, #0
 800112e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001130:	4b12      	ldr	r3, [pc, #72]	@ (800117c <MX_I2C1_Init+0x74>)
 8001132:	2200      	movs	r2, #0
 8001134:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001136:	4b11      	ldr	r3, [pc, #68]	@ (800117c <MX_I2C1_Init+0x74>)
 8001138:	2200      	movs	r2, #0
 800113a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800113c:	4b0f      	ldr	r3, [pc, #60]	@ (800117c <MX_I2C1_Init+0x74>)
 800113e:	2200      	movs	r2, #0
 8001140:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001142:	480e      	ldr	r0, [pc, #56]	@ (800117c <MX_I2C1_Init+0x74>)
 8001144:	f002 fa5c 	bl	8003600 <HAL_I2C_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800114e:	f000 fb93 	bl	8001878 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001152:	2100      	movs	r1, #0
 8001154:	4809      	ldr	r0, [pc, #36]	@ (800117c <MX_I2C1_Init+0x74>)
 8001156:	f002 faee 	bl	8003736 <HAL_I2CEx_ConfigAnalogFilter>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001160:	f000 fb8a 	bl	8001878 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001164:	2100      	movs	r1, #0
 8001166:	4805      	ldr	r0, [pc, #20]	@ (800117c <MX_I2C1_Init+0x74>)
 8001168:	f002 fb30 	bl	80037cc <HAL_I2CEx_ConfigDigitalFilter>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001172:	f000 fb81 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200000f0 	.word	0x200000f0
 8001180:	40005400 	.word	0x40005400
 8001184:	60808cd3 	.word	0x60808cd3

08001188 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800118c:	2000      	movs	r0, #0
 800118e:	f002 fb69 	bl	8003864 <HAL_ICACHE_ConfigAssociativityMode>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001198:	f000 fb6e 	bl	8001878 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800119c:	f002 fb82 	bl	80038a4 <HAL_ICACHE_Enable>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80011a6:	f000 fb67 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b09c      	sub	sp, #112	@ 0x70
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011d0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
 80011e0:	615a      	str	r2, [r3, #20]
 80011e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	2234      	movs	r2, #52	@ 0x34
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f009 ff76 	bl	800b0dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011f0:	4b4c      	ldr	r3, [pc, #304]	@ (8001324 <MX_TIM1_Init+0x174>)
 80011f2:	4a4d      	ldr	r2, [pc, #308]	@ (8001328 <MX_TIM1_Init+0x178>)
 80011f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 49;
 80011f6:	4b4b      	ldr	r3, [pc, #300]	@ (8001324 <MX_TIM1_Init+0x174>)
 80011f8:	2231      	movs	r2, #49	@ 0x31
 80011fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fc:	4b49      	ldr	r3, [pc, #292]	@ (8001324 <MX_TIM1_Init+0x174>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001202:	4b48      	ldr	r3, [pc, #288]	@ (8001324 <MX_TIM1_Init+0x174>)
 8001204:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001208:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120a:	4b46      	ldr	r3, [pc, #280]	@ (8001324 <MX_TIM1_Init+0x174>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001210:	4b44      	ldr	r3, [pc, #272]	@ (8001324 <MX_TIM1_Init+0x174>)
 8001212:	2200      	movs	r2, #0
 8001214:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001216:	4b43      	ldr	r3, [pc, #268]	@ (8001324 <MX_TIM1_Init+0x174>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800121c:	4841      	ldr	r0, [pc, #260]	@ (8001324 <MX_TIM1_Init+0x174>)
 800121e:	f006 fd91 	bl	8007d44 <HAL_TIM_Base_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001228:	f000 fb26 	bl	8001878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800122c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001230:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001232:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001236:	4619      	mov	r1, r3
 8001238:	483a      	ldr	r0, [pc, #232]	@ (8001324 <MX_TIM1_Init+0x174>)
 800123a:	f007 fb6d 	bl	8008918 <HAL_TIM_ConfigClockSource>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001244:	f000 fb18 	bl	8001878 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001248:	4836      	ldr	r0, [pc, #216]	@ (8001324 <MX_TIM1_Init+0x174>)
 800124a:	f006 ff65 	bl	8008118 <HAL_TIM_PWM_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001254:	f000 fb10 	bl	8001878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001258:	2300      	movs	r3, #0
 800125a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800125c:	2300      	movs	r3, #0
 800125e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001260:	2300      	movs	r3, #0
 8001262:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001264:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001268:	4619      	mov	r1, r3
 800126a:	482e      	ldr	r0, [pc, #184]	@ (8001324 <MX_TIM1_Init+0x174>)
 800126c:	f008 f97c 	bl	8009568 <HAL_TIMEx_MasterConfigSynchronization>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001276:	f000 faff 	bl	8001878 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800127a:	2360      	movs	r3, #96	@ 0x60
 800127c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 5000;
 800127e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001282:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001284:	2300      	movs	r3, #0
 8001286:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001288:	2300      	movs	r3, #0
 800128a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800128c:	2300      	movs	r3, #0
 800128e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001290:	2300      	movs	r3, #0
 8001292:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001298:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800129c:	2200      	movs	r2, #0
 800129e:	4619      	mov	r1, r3
 80012a0:	4820      	ldr	r0, [pc, #128]	@ (8001324 <MX_TIM1_Init+0x174>)
 80012a2:	f007 fa25 	bl	80086f0 <HAL_TIM_PWM_ConfigChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80012ac:	f000 fae4 	bl	8001878 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012b0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012b4:	2204      	movs	r2, #4
 80012b6:	4619      	mov	r1, r3
 80012b8:	481a      	ldr	r0, [pc, #104]	@ (8001324 <MX_TIM1_Init+0x174>)
 80012ba:	f007 fa19 	bl	80086f0 <HAL_TIM_PWM_ConfigChannel>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80012c4:	f000 fad8 	bl	8001878 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80012e6:	2300      	movs	r3, #0
 80012e8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80012f8:	2300      	movs	r3, #0
 80012fa:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	4619      	mov	r1, r3
 8001304:	4807      	ldr	r0, [pc, #28]	@ (8001324 <MX_TIM1_Init+0x174>)
 8001306:	f008 f9ff 	bl	8009708 <HAL_TIMEx_ConfigBreakDeadTime>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8001310:	f000 fab2 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001314:	4803      	ldr	r0, [pc, #12]	@ (8001324 <MX_TIM1_Init+0x174>)
 8001316:	f000 fc0d 	bl	8001b34 <HAL_TIM_MspPostInit>

}
 800131a:	bf00      	nop
 800131c:	3770      	adds	r7, #112	@ 0x70
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000144 	.word	0x20000144
 8001328:	40012c00 	.word	0x40012c00

0800132c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08a      	sub	sp, #40	@ 0x28
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001332:	f107 031c 	add.w	r3, r7, #28
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800133e:	463b      	mov	r3, r7
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
 800134c:	615a      	str	r2, [r3, #20]
 800134e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001350:	4b22      	ldr	r3, [pc, #136]	@ (80013dc <MX_TIM2_Init+0xb0>)
 8001352:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001356:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001358:	4b20      	ldr	r3, [pc, #128]	@ (80013dc <MX_TIM2_Init+0xb0>)
 800135a:	2200      	movs	r2, #0
 800135c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135e:	4b1f      	ldr	r3, [pc, #124]	@ (80013dc <MX_TIM2_Init+0xb0>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001364:	4b1d      	ldr	r3, [pc, #116]	@ (80013dc <MX_TIM2_Init+0xb0>)
 8001366:	f04f 32ff 	mov.w	r2, #4294967295
 800136a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136c:	4b1b      	ldr	r3, [pc, #108]	@ (80013dc <MX_TIM2_Init+0xb0>)
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001372:	4b1a      	ldr	r3, [pc, #104]	@ (80013dc <MX_TIM2_Init+0xb0>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001378:	4818      	ldr	r0, [pc, #96]	@ (80013dc <MX_TIM2_Init+0xb0>)
 800137a:	f006 fecd 	bl	8008118 <HAL_TIM_PWM_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001384:	f000 fa78 	bl	8001878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138c:	2300      	movs	r3, #0
 800138e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001390:	f107 031c 	add.w	r3, r7, #28
 8001394:	4619      	mov	r1, r3
 8001396:	4811      	ldr	r0, [pc, #68]	@ (80013dc <MX_TIM2_Init+0xb0>)
 8001398:	f008 f8e6 	bl	8009568 <HAL_TIMEx_MasterConfigSynchronization>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80013a2:	f000 fa69 	bl	8001878 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013a6:	2360      	movs	r3, #96	@ 0x60
 80013a8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013b6:	463b      	mov	r3, r7
 80013b8:	2200      	movs	r2, #0
 80013ba:	4619      	mov	r1, r3
 80013bc:	4807      	ldr	r0, [pc, #28]	@ (80013dc <MX_TIM2_Init+0xb0>)
 80013be:	f007 f997 	bl	80086f0 <HAL_TIM_PWM_ConfigChannel>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80013c8:	f000 fa56 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013cc:	4803      	ldr	r0, [pc, #12]	@ (80013dc <MX_TIM2_Init+0xb0>)
 80013ce:	f000 fbb1 	bl	8001b34 <HAL_TIM_MspPostInit>

}
 80013d2:	bf00      	nop
 80013d4:	3728      	adds	r7, #40	@ 0x28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000190 	.word	0x20000190

080013e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013e4:	4b22      	ldr	r3, [pc, #136]	@ (8001470 <MX_USART1_UART_Init+0x90>)
 80013e6:	4a23      	ldr	r2, [pc, #140]	@ (8001474 <MX_USART1_UART_Init+0x94>)
 80013e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013ea:	4b21      	ldr	r3, [pc, #132]	@ (8001470 <MX_USART1_UART_Init+0x90>)
 80013ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001470 <MX_USART1_UART_Init+0x90>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001470 <MX_USART1_UART_Init+0x90>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001470 <MX_USART1_UART_Init+0x90>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001404:	4b1a      	ldr	r3, [pc, #104]	@ (8001470 <MX_USART1_UART_Init+0x90>)
 8001406:	220c      	movs	r2, #12
 8001408:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140a:	4b19      	ldr	r3, [pc, #100]	@ (8001470 <MX_USART1_UART_Init+0x90>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001410:	4b17      	ldr	r3, [pc, #92]	@ (8001470 <MX_USART1_UART_Init+0x90>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001416:	4b16      	ldr	r3, [pc, #88]	@ (8001470 <MX_USART1_UART_Init+0x90>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800141c:	4b14      	ldr	r3, [pc, #80]	@ (8001470 <MX_USART1_UART_Init+0x90>)
 800141e:	2200      	movs	r2, #0
 8001420:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001422:	4b13      	ldr	r3, [pc, #76]	@ (8001470 <MX_USART1_UART_Init+0x90>)
 8001424:	2200      	movs	r2, #0
 8001426:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001428:	4811      	ldr	r0, [pc, #68]	@ (8001470 <MX_USART1_UART_Init+0x90>)
 800142a:	f008 fa4d 	bl	80098c8 <HAL_UART_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001434:	f000 fa20 	bl	8001878 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001438:	2100      	movs	r1, #0
 800143a:	480d      	ldr	r0, [pc, #52]	@ (8001470 <MX_USART1_UART_Init+0x90>)
 800143c:	f009 fb79 	bl	800ab32 <HAL_UARTEx_SetTxFifoThreshold>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001446:	f000 fa17 	bl	8001878 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800144a:	2100      	movs	r1, #0
 800144c:	4808      	ldr	r0, [pc, #32]	@ (8001470 <MX_USART1_UART_Init+0x90>)
 800144e:	f009 fbae 	bl	800abae <HAL_UARTEx_SetRxFifoThreshold>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001458:	f000 fa0e 	bl	8001878 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800145c:	4804      	ldr	r0, [pc, #16]	@ (8001470 <MX_USART1_UART_Init+0x90>)
 800145e:	f009 fb2f 	bl	800aac0 <HAL_UARTEx_DisableFifoMode>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001468:	f000 fa06 	bl	8001878 <Error_Handler>
  }
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	200001dc 	.word	0x200001dc
 8001474:	40013800 	.word	0x40013800

08001478 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800147c:	4b23      	ldr	r3, [pc, #140]	@ (800150c <MX_USART2_UART_Init+0x94>)
 800147e:	4a24      	ldr	r2, [pc, #144]	@ (8001510 <MX_USART2_UART_Init+0x98>)
 8001480:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001482:	4b22      	ldr	r3, [pc, #136]	@ (800150c <MX_USART2_UART_Init+0x94>)
 8001484:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001488:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800148a:	4b20      	ldr	r3, [pc, #128]	@ (800150c <MX_USART2_UART_Init+0x94>)
 800148c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001490:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001492:	4b1e      	ldr	r3, [pc, #120]	@ (800150c <MX_USART2_UART_Init+0x94>)
 8001494:	2200      	movs	r2, #0
 8001496:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001498:	4b1c      	ldr	r3, [pc, #112]	@ (800150c <MX_USART2_UART_Init+0x94>)
 800149a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800149e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014a0:	4b1a      	ldr	r3, [pc, #104]	@ (800150c <MX_USART2_UART_Init+0x94>)
 80014a2:	220c      	movs	r2, #12
 80014a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a6:	4b19      	ldr	r3, [pc, #100]	@ (800150c <MX_USART2_UART_Init+0x94>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ac:	4b17      	ldr	r3, [pc, #92]	@ (800150c <MX_USART2_UART_Init+0x94>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014b2:	4b16      	ldr	r3, [pc, #88]	@ (800150c <MX_USART2_UART_Init+0x94>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014b8:	4b14      	ldr	r3, [pc, #80]	@ (800150c <MX_USART2_UART_Init+0x94>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014be:	4b13      	ldr	r3, [pc, #76]	@ (800150c <MX_USART2_UART_Init+0x94>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014c4:	4811      	ldr	r0, [pc, #68]	@ (800150c <MX_USART2_UART_Init+0x94>)
 80014c6:	f008 f9ff 	bl	80098c8 <HAL_UART_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80014d0:	f000 f9d2 	bl	8001878 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014d4:	2100      	movs	r1, #0
 80014d6:	480d      	ldr	r0, [pc, #52]	@ (800150c <MX_USART2_UART_Init+0x94>)
 80014d8:	f009 fb2b 	bl	800ab32 <HAL_UARTEx_SetTxFifoThreshold>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80014e2:	f000 f9c9 	bl	8001878 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014e6:	2100      	movs	r1, #0
 80014e8:	4808      	ldr	r0, [pc, #32]	@ (800150c <MX_USART2_UART_Init+0x94>)
 80014ea:	f009 fb60 	bl	800abae <HAL_UARTEx_SetRxFifoThreshold>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80014f4:	f000 f9c0 	bl	8001878 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80014f8:	4804      	ldr	r0, [pc, #16]	@ (800150c <MX_USART2_UART_Init+0x94>)
 80014fa:	f009 fae1 	bl	800aac0 <HAL_UARTEx_DisableFifoMode>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8001504:	f000 f9b8 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000270 	.word	0x20000270
 8001510:	40004400 	.word	0x40004400

08001514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	@ 0x28
 8001518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800152a:	4b5d      	ldr	r3, [pc, #372]	@ (80016a0 <MX_GPIO_Init+0x18c>)
 800152c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001530:	4a5b      	ldr	r2, [pc, #364]	@ (80016a0 <MX_GPIO_Init+0x18c>)
 8001532:	f043 0304 	orr.w	r3, r3, #4
 8001536:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800153a:	4b59      	ldr	r3, [pc, #356]	@ (80016a0 <MX_GPIO_Init+0x18c>)
 800153c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001548:	4b55      	ldr	r3, [pc, #340]	@ (80016a0 <MX_GPIO_Init+0x18c>)
 800154a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800154e:	4a54      	ldr	r2, [pc, #336]	@ (80016a0 <MX_GPIO_Init+0x18c>)
 8001550:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001554:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001558:	4b51      	ldr	r3, [pc, #324]	@ (80016a0 <MX_GPIO_Init+0x18c>)
 800155a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800155e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001566:	4b4e      	ldr	r3, [pc, #312]	@ (80016a0 <MX_GPIO_Init+0x18c>)
 8001568:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800156c:	4a4c      	ldr	r2, [pc, #304]	@ (80016a0 <MX_GPIO_Init+0x18c>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001576:	4b4a      	ldr	r3, [pc, #296]	@ (80016a0 <MX_GPIO_Init+0x18c>)
 8001578:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001584:	4b46      	ldr	r3, [pc, #280]	@ (80016a0 <MX_GPIO_Init+0x18c>)
 8001586:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800158a:	4a45      	ldr	r2, [pc, #276]	@ (80016a0 <MX_GPIO_Init+0x18c>)
 800158c:	f043 0302 	orr.w	r3, r3, #2
 8001590:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001594:	4b42      	ldr	r3, [pc, #264]	@ (80016a0 <MX_GPIO_Init+0x18c>)
 8001596:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80015a2:	2200      	movs	r2, #0
 80015a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015a8:	483e      	ldr	r0, [pc, #248]	@ (80016a4 <MX_GPIO_Init+0x190>)
 80015aa:	f001 fff7 	bl	800359c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(K_BUS_SLP_GPIO_Port, K_BUS_SLP_Pin, GPIO_PIN_SET);
 80015ae:	2201      	movs	r2, #1
 80015b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015b4:	483b      	ldr	r0, [pc, #236]	@ (80016a4 <MX_GPIO_Init+0x190>)
 80015b6:	f001 fff1 	bl	800359c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Backlight_STM_Pin|Batt_Charge_Light_STM_Pin|Oil_Iight_STM_Pin, GPIO_PIN_SET);
 80015ba:	2201      	movs	r2, #1
 80015bc:	2170      	movs	r1, #112	@ 0x70
 80015be:	483a      	ldr	r0, [pc, #232]	@ (80016a8 <MX_GPIO_Init+0x194>)
 80015c0:	f001 ffec 	bl	800359c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Brake_fluid_light_STM_Pin|TRCVR_MODE_Pin|D3_Pin, GPIO_PIN_RESET);
 80015c4:	2200      	movs	r2, #0
 80015c6:	f248 4180 	movw	r1, #33920	@ 0x8480
 80015ca:	4837      	ldr	r0, [pc, #220]	@ (80016a8 <MX_GPIO_Init+0x194>)
 80015cc:	f001 ffe6 	bl	800359c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ABS_STM_Pin|Parking_Brake_STM_Pin|Brake_Wear_Sens_STM_Pin|Coolant_level_Sens_STM_Pin
 80015d0:	2200      	movs	r2, #0
 80015d2:	f241 413e 	movw	r1, #5182	@ 0x143e
 80015d6:	4835      	ldr	r0, [pc, #212]	@ (80016ac <MX_GPIO_Init+0x198>)
 80015d8:	f001 ffe0 	bl	800359c <HAL_GPIO_WritePin>
                          |D2_Pin|D1_Pin|Fuel_HVC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Washer_Fluid_Lvl_STM_GPIO_Port, Washer_Fluid_Lvl_STM_Pin, GPIO_PIN_SET);
 80015dc:	2201      	movs	r2, #1
 80015de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015e2:	4832      	ldr	r0, [pc, #200]	@ (80016ac <MX_GPIO_Init+0x198>)
 80015e4:	f001 ffda 	bl	800359c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ee:	2301      	movs	r3, #1
 80015f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f6:	2300      	movs	r3, #0
 80015f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	4828      	ldr	r0, [pc, #160]	@ (80016a4 <MX_GPIO_Init+0x190>)
 8001602:	f001 fe79 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : K_BUS_SLP_Pin */
  GPIO_InitStruct.Pin = K_BUS_SLP_Pin;
 8001606:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800160a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160c:	2301      	movs	r3, #1
 800160e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001610:	2301      	movs	r3, #1
 8001612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	2300      	movs	r3, #0
 8001616:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(K_BUS_SLP_GPIO_Port, &GPIO_InitStruct);
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4619      	mov	r1, r3
 800161e:	4821      	ldr	r0, [pc, #132]	@ (80016a4 <MX_GPIO_Init+0x190>)
 8001620:	f001 fe6a 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Backlight_STM_Pin */
  GPIO_InitStruct.Pin = Backlight_STM_Pin;
 8001624:	2310      	movs	r3, #16
 8001626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001628:	2311      	movs	r3, #17
 800162a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800162c:	2301      	movs	r3, #1
 800162e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Backlight_STM_GPIO_Port, &GPIO_InitStruct);
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	4619      	mov	r1, r3
 800163a:	481b      	ldr	r0, [pc, #108]	@ (80016a8 <MX_GPIO_Init+0x194>)
 800163c:	f001 fe5c 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Batt_Charge_Light_STM_Pin Oil_Iight_STM_Pin Brake_fluid_light_STM_Pin TRCVR_MODE_Pin
                           D3_Pin */
  GPIO_InitStruct.Pin = Batt_Charge_Light_STM_Pin|Oil_Iight_STM_Pin|Brake_fluid_light_STM_Pin|TRCVR_MODE_Pin
 8001640:	f248 43e0 	movw	r3, #34016	@ 0x84e0
 8001644:	617b      	str	r3, [r7, #20]
                          |D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001646:	2301      	movs	r3, #1
 8001648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164e:	2300      	movs	r3, #0
 8001650:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	4813      	ldr	r0, [pc, #76]	@ (80016a8 <MX_GPIO_Init+0x194>)
 800165a:	f001 fe4d 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ABS_STM_Pin Parking_Brake_STM_Pin Brake_Wear_Sens_STM_Pin Coolant_level_Sens_STM_Pin
                           Washer_Fluid_Lvl_STM_Pin D2_Pin D1_Pin Fuel_HVC_Pin */
  GPIO_InitStruct.Pin = ABS_STM_Pin|Parking_Brake_STM_Pin|Brake_Wear_Sens_STM_Pin|Coolant_level_Sens_STM_Pin
 800165e:	f243 433e 	movw	r3, #13374	@ 0x343e
 8001662:	617b      	str	r3, [r7, #20]
                          |Washer_Fluid_Lvl_STM_Pin|D2_Pin|D1_Pin|Fuel_HVC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001664:	2301      	movs	r3, #1
 8001666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166c:	2300      	movs	r3, #0
 800166e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	4619      	mov	r1, r3
 8001676:	480d      	ldr	r0, [pc, #52]	@ (80016ac <MX_GPIO_Init+0x198>)
 8001678:	f001 fe3e 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800167c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001682:	2300      	movs	r3, #0
 8001684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	4619      	mov	r1, r3
 8001690:	4806      	ldr	r0, [pc, #24]	@ (80016ac <MX_GPIO_Init+0x198>)
 8001692:	f001 fe31 	bl	80032f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001696:	bf00      	nop
 8001698:	3728      	adds	r7, #40	@ 0x28
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	44020c00 	.word	0x44020c00
 80016a4:	42020800 	.word	0x42020800
 80016a8:	42020000 	.word	0x42020000
 80016ac:	42020400 	.word	0x42020400

080016b0 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
    void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
    {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
    	if (HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0) > 0) {
 80016ba:	2140      	movs	r1, #64	@ 0x40
 80016bc:	480e      	ldr	r0, [pc, #56]	@ (80016f8 <HAL_FDCAN_RxFifo0Callback+0x48>)
 80016be:	f001 fb1b 	bl	8002cf8 <HAL_FDCAN_GetRxFifoFillLevel>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d013      	beq.n	80016f0 <HAL_FDCAN_RxFifo0Callback+0x40>
    	    if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader2, RxData2) == HAL_OK) {
 80016c8:	4b0c      	ldr	r3, [pc, #48]	@ (80016fc <HAL_FDCAN_RxFifo0Callback+0x4c>)
 80016ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001700 <HAL_FDCAN_RxFifo0Callback+0x50>)
 80016cc:	2140      	movs	r1, #64	@ 0x40
 80016ce:	480a      	ldr	r0, [pc, #40]	@ (80016f8 <HAL_FDCAN_RxFifo0Callback+0x48>)
 80016d0:	f001 fa0a 	bl	8002ae8 <HAL_FDCAN_GetRxMessage>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10a      	bne.n	80016f0 <HAL_FDCAN_RxFifo0Callback+0x40>
    	       // printf("Odebrano ramkę: ID = 0x%03X, Dane = ", RxHeader2.Identifier);
    	        for (int i = 0; i < RxHeader2.DataLength; i++) {
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	e002      	b.n	80016e6 <HAL_FDCAN_RxFifo0Callback+0x36>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	3301      	adds	r3, #1
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <HAL_FDCAN_RxFifo0Callback+0x50>)
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d8f7      	bhi.n	80016e0 <HAL_FDCAN_RxFifo0Callback+0x30>
    	            //printf("%02X ", RxData2[i]);
    	        }
    	       // printf("\n");
    	    }
    	}
    }
 80016f0:	bf00      	nop
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	2000008c 	.word	0x2000008c
 80016fc:	2000034c 	.word	0x2000034c
 8001700:	20000328 	.word	0x20000328

08001704 <CheckCANErrors>:

void CheckCANErrors() {
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
    uint32_t error = HAL_FDCAN_GetError(&hfdcan1);
 800170a:	4841      	ldr	r0, [pc, #260]	@ (8001810 <CheckCANErrors+0x10c>)
 800170c:	f001 fd86 	bl	800321c <HAL_FDCAN_GetError>
 8001710:	6078      	str	r0, [r7, #4]

    if (error == HAL_FDCAN_ERROR_NONE) {
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d077      	beq.n	8001808 <CheckCANErrors+0x104>
      //  printf("Brak błędów CAN\n");
    } else {
        if (error & HAL_FDCAN_ERROR_TIMEOUT) {
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	d002      	beq.n	8001728 <CheckCANErrors+0x24>
            printf(" HAL_FDCAN_ERROR_TIMEOUT\n");
 8001722:	483c      	ldr	r0, [pc, #240]	@ (8001814 <CheckCANErrors+0x110>)
 8001724:	f009 fbfa 	bl	800af1c <puts>
        }
        if (error & HAL_FDCAN_ERROR_NOT_INITIALIZED) {
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d002      	beq.n	8001738 <CheckCANErrors+0x34>
            printf(" HAL_FDCAN_ERROR_NOT_INITIALIZED\n");
 8001732:	4839      	ldr	r0, [pc, #228]	@ (8001818 <CheckCANErrors+0x114>)
 8001734:	f009 fbf2 	bl	800af1c <puts>
        }
        if (error & HAL_FDCAN_ERROR_NOT_READY) {
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	2b00      	cmp	r3, #0
 8001740:	d002      	beq.n	8001748 <CheckCANErrors+0x44>
            printf(" HAL_FDCAN_ERROR_NOT_READY\n");
 8001742:	4836      	ldr	r0, [pc, #216]	@ (800181c <CheckCANErrors+0x118>)
 8001744:	f009 fbea 	bl	800af1c <puts>
        }
        if (error & HAL_FDCAN_ERROR_NOT_STARTED) {
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	2b00      	cmp	r3, #0
 8001750:	d002      	beq.n	8001758 <CheckCANErrors+0x54>
            printf(" HAL_FDCAN_ERROR_NOT_STARTED\n");
 8001752:	4833      	ldr	r0, [pc, #204]	@ (8001820 <CheckCANErrors+0x11c>)
 8001754:	f009 fbe2 	bl	800af1c <puts>
        }
        if (error & HAL_FDCAN_ERROR_NOT_SUPPORTED) {
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f003 0310 	and.w	r3, r3, #16
 800175e:	2b00      	cmp	r3, #0
 8001760:	d002      	beq.n	8001768 <CheckCANErrors+0x64>
            printf(" HAL_FDCAN_ERROR_NOT_SUPPORTED\n");
 8001762:	4830      	ldr	r0, [pc, #192]	@ (8001824 <CheckCANErrors+0x120>)
 8001764:	f009 fbda 	bl	800af1c <puts>
        }
        if (error & HAL_FDCAN_ERROR_PARAM) {
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f003 0320 	and.w	r3, r3, #32
 800176e:	2b00      	cmp	r3, #0
 8001770:	d002      	beq.n	8001778 <CheckCANErrors+0x74>
            printf("HAL_FDCAN_ERROR_PARAM\n");
 8001772:	482d      	ldr	r0, [pc, #180]	@ (8001828 <CheckCANErrors+0x124>)
 8001774:	f009 fbd2 	bl	800af1c <puts>
        }
        if (error & HAL_FDCAN_ERROR_PENDING) {
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <CheckCANErrors+0x84>
            printf("  HAL_FDCAN_ERROR_PENDING\n");
 8001782:	482a      	ldr	r0, [pc, #168]	@ (800182c <CheckCANErrors+0x128>)
 8001784:	f009 fbca 	bl	800af1c <puts>
        }
        if (error & HAL_FDCAN_ERROR_RAM_ACCESS) {
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800178e:	2b00      	cmp	r3, #0
 8001790:	d002      	beq.n	8001798 <CheckCANErrors+0x94>
            printf("  HAL_FDCAN_ERROR_RAM_ACCESS\n");
 8001792:	4827      	ldr	r0, [pc, #156]	@ (8001830 <CheckCANErrors+0x12c>)
 8001794:	f009 fbc2 	bl	800af1c <puts>
        }
        if (error & HAL_FDCAN_ERROR_PROTOCOL_ARBT) {
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d002      	beq.n	80017a8 <CheckCANErrors+0xa4>
            printf(" HAL_FDCAN_ERROR_PROTOCOL_ARBT\n");
 80017a2:	4824      	ldr	r0, [pc, #144]	@ (8001834 <CheckCANErrors+0x130>)
 80017a4:	f009 fbba 	bl	800af1c <puts>
        }
        if (error & HAL_FDCAN_ERROR_PROTOCOL_DATA) {
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d002      	beq.n	80017b8 <CheckCANErrors+0xb4>
                 printf(" HAL_FDCAN_ERROR_PROTOCOL_DATA\n");
 80017b2:	4821      	ldr	r0, [pc, #132]	@ (8001838 <CheckCANErrors+0x134>)
 80017b4:	f009 fbb2 	bl	800af1c <puts>
          }
        if (error & HAL_FDCAN_ERROR_RESERVED_AREA) {
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d002      	beq.n	80017c8 <CheckCANErrors+0xc4>
                        printf(" HAL_FDCAN_ERROR_RESERVED_AREA\n");
 80017c2:	481e      	ldr	r0, [pc, #120]	@ (800183c <CheckCANErrors+0x138>)
 80017c4:	f009 fbaa 	bl	800af1c <puts>
                 }
	   if (error & HAL_FDCAN_ERROR_FIFO_EMPTY) {
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d002      	beq.n	80017d8 <CheckCANErrors+0xd4>
		   printf("HAL_FDCAN_ERROR_FIFO_EMPTY\n");
 80017d2:	481b      	ldr	r0, [pc, #108]	@ (8001840 <CheckCANErrors+0x13c>)
 80017d4:	f009 fba2 	bl	800af1c <puts>
	   }
	   if (error & HAL_FDCAN_ERROR_FIFO_FULL) {
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d002      	beq.n	80017e8 <CheckCANErrors+0xe4>
		   printf("  HAL_FDCAN_ERROR_FIFO_FULL\n");
 80017e2:	4818      	ldr	r0, [pc, #96]	@ (8001844 <CheckCANErrors+0x140>)
 80017e4:	f009 fb9a 	bl	800af1c <puts>
	   }
	   if (error & HAL_FDCAN_ERROR_LOG_OVERFLOW) {
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d002      	beq.n	80017f8 <CheckCANErrors+0xf4>
		   printf("  HAL_FDCAN_ERROR_LOG_OVERFLOW\n");
 80017f2:	4815      	ldr	r0, [pc, #84]	@ (8001848 <CheckCANErrors+0x144>)
 80017f4:	f009 fb92 	bl	800af1c <puts>
	   }
	   if (error & HAL_FDCAN_ERROR_RAM_WDG) {
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d002      	beq.n	8001808 <CheckCANErrors+0x104>
		   printf(" HAL_FDCAN_ERROR_RAM_WDG\n");
 8001802:	4812      	ldr	r0, [pc, #72]	@ (800184c <CheckCANErrors+0x148>)
 8001804:	f009 fb8a 	bl	800af1c <puts>
    }
}}
 8001808:	bf00      	nop
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	2000008c 	.word	0x2000008c
 8001814:	0800bdd4 	.word	0x0800bdd4
 8001818:	0800bdf0 	.word	0x0800bdf0
 800181c:	0800be14 	.word	0x0800be14
 8001820:	0800be30 	.word	0x0800be30
 8001824:	0800be50 	.word	0x0800be50
 8001828:	0800be70 	.word	0x0800be70
 800182c:	0800be88 	.word	0x0800be88
 8001830:	0800bea4 	.word	0x0800bea4
 8001834:	0800bec4 	.word	0x0800bec4
 8001838:	0800bee4 	.word	0x0800bee4
 800183c:	0800bf04 	.word	0x0800bf04
 8001840:	0800bf24 	.word	0x0800bf24
 8001844:	0800bf40 	.word	0x0800bf40
 8001848:	0800bf5c 	.word	0x0800bf5c
 800184c:	0800bf7c 	.word	0x0800bf7c

08001850 <HAL_TIM_PeriodElapsedCallback>:
    } else {
        printf("Brak ramek do odebrania\n");
    }
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  if (htim == &htim1) {
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a05      	ldr	r2, [pc, #20]	@ (8001870 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d103      	bne.n	8001868 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 8001860:	2108      	movs	r1, #8
 8001862:	4804      	ldr	r0, [pc, #16]	@ (8001874 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001864:	f001 feb2 	bl	80035cc <HAL_GPIO_TogglePin>
  }
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000144 	.word	0x20000144
 8001874:	42020400 	.word	0x42020400

08001878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 800187c:	2201      	movs	r2, #1
 800187e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001882:	4804      	ldr	r0, [pc, #16]	@ (8001894 <Error_Handler+0x1c>)
 8001884:	f001 fe8a 	bl	800359c <HAL_GPIO_WritePin>
	CheckCANErrors();
 8001888:	f7ff ff3c 	bl	8001704 <CheckCANErrors>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800188c:	b672      	cpsid	i
}
 800188e:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <Error_Handler+0x18>
 8001894:	42020000 	.word	0x42020000

08001898 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* ICACHE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ICACHE_IRQn, 0, 0);
 800189c:	2200      	movs	r2, #0
 800189e:	2100      	movs	r1, #0
 80018a0:	2068      	movs	r0, #104	@ 0x68
 80018a2:	f000 fdc7 	bl	8002434 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ICACHE_IRQn);
 80018a6:	2068      	movs	r0, #104	@ 0x68
 80018a8:	f000 fdde 	bl	8002468 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b0be      	sub	sp, #248	@ 0xf8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018c8:	f107 0310 	add.w	r3, r7, #16
 80018cc:	22d0      	movs	r2, #208	@ 0xd0
 80018ce:	2100      	movs	r1, #0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f009 fc03 	bl	800b0dc <memset>
  if(hfdcan->Instance==FDCAN1)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a2f      	ldr	r2, [pc, #188]	@ (8001998 <HAL_FDCAN_MspInit+0xe8>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d157      	bne.n	8001990 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	f04f 0304 	mov.w	r3, #4
 80018e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL1Q;
 80018ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018f4:	f107 0310 	add.w	r3, r7, #16
 80018f8:	4618      	mov	r0, r3
 80018fa:	f002 ff9f 	bl	800483c <HAL_RCCEx_PeriphCLKConfig>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001904:	f7ff ffb8 	bl	8001878 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001908:	4b24      	ldr	r3, [pc, #144]	@ (800199c <HAL_FDCAN_MspInit+0xec>)
 800190a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800190e:	4a23      	ldr	r2, [pc, #140]	@ (800199c <HAL_FDCAN_MspInit+0xec>)
 8001910:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001914:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8001918:	4b20      	ldr	r3, [pc, #128]	@ (800199c <HAL_FDCAN_MspInit+0xec>)
 800191a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800191e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001926:	4b1d      	ldr	r3, [pc, #116]	@ (800199c <HAL_FDCAN_MspInit+0xec>)
 8001928:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800192c:	4a1b      	ldr	r2, [pc, #108]	@ (800199c <HAL_FDCAN_MspInit+0xec>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001936:	4b19      	ldr	r3, [pc, #100]	@ (800199c <HAL_FDCAN_MspInit+0xec>)
 8001938:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001944:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001948:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	2302      	movs	r3, #2
 800194e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001958:	2303      	movs	r3, #3
 800195a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800195e:	2309      	movs	r3, #9
 8001960:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001964:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001968:	4619      	mov	r1, r3
 800196a:	480d      	ldr	r0, [pc, #52]	@ (80019a0 <HAL_FDCAN_MspInit+0xf0>)
 800196c:	f001 fcc4 	bl	80032f8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001970:	2200      	movs	r2, #0
 8001972:	2100      	movs	r1, #0
 8001974:	2027      	movs	r0, #39	@ 0x27
 8001976:	f000 fd5d 	bl	8002434 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800197a:	2027      	movs	r0, #39	@ 0x27
 800197c:	f000 fd74 	bl	8002468 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8001980:	2200      	movs	r2, #0
 8001982:	2100      	movs	r1, #0
 8001984:	2028      	movs	r0, #40	@ 0x28
 8001986:	f000 fd55 	bl	8002434 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 800198a:	2028      	movs	r0, #40	@ 0x28
 800198c:	f000 fd6c 	bl	8002468 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8001990:	bf00      	nop
 8001992:	37f8      	adds	r7, #248	@ 0xf8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	4000a400 	.word	0x4000a400
 800199c:	44020c00 	.word	0x44020c00
 80019a0:	42020000 	.word	0x42020000

080019a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b0be      	sub	sp, #248	@ 0xf8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019bc:	f107 0310 	add.w	r3, r7, #16
 80019c0:	22d0      	movs	r2, #208	@ 0xd0
 80019c2:	2100      	movs	r1, #0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f009 fb89 	bl	800b0dc <memset>
  if(hi2c->Instance==I2C1)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a26      	ldr	r2, [pc, #152]	@ (8001a68 <HAL_I2C_MspInit+0xc4>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d145      	bne.n	8001a60 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80019d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019d8:	f04f 0300 	mov.w	r3, #0
 80019dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80019e0:	2300      	movs	r3, #0
 80019e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019e6:	f107 0310 	add.w	r3, r7, #16
 80019ea:	4618      	mov	r0, r3
 80019ec:	f002 ff26 	bl	800483c <HAL_RCCEx_PeriphCLKConfig>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80019f6:	f7ff ff3f 	bl	8001878 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fa:	4b1c      	ldr	r3, [pc, #112]	@ (8001a6c <HAL_I2C_MspInit+0xc8>)
 80019fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a00:	4a1a      	ldr	r2, [pc, #104]	@ (8001a6c <HAL_I2C_MspInit+0xc8>)
 8001a02:	f043 0302 	orr.w	r3, r3, #2
 8001a06:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a0a:	4b18      	ldr	r3, [pc, #96]	@ (8001a6c <HAL_I2C_MspInit+0xc8>)
 8001a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a18:	23c0      	movs	r3, #192	@ 0xc0
 8001a1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a1e:	2312      	movs	r3, #18
 8001a20:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a30:	2304      	movs	r3, #4
 8001a32:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a36:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	480c      	ldr	r0, [pc, #48]	@ (8001a70 <HAL_I2C_MspInit+0xcc>)
 8001a3e:	f001 fc5b 	bl	80032f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a42:	4b0a      	ldr	r3, [pc, #40]	@ (8001a6c <HAL_I2C_MspInit+0xc8>)
 8001a44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a48:	4a08      	ldr	r2, [pc, #32]	@ (8001a6c <HAL_I2C_MspInit+0xc8>)
 8001a4a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a4e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001a52:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <HAL_I2C_MspInit+0xc8>)
 8001a54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a60:	bf00      	nop
 8001a62:	37f8      	adds	r7, #248	@ 0xf8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40005400 	.word	0x40005400
 8001a6c:	44020c00 	.word	0x44020c00
 8001a70:	42020400 	.word	0x42020400

08001a74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a1a      	ldr	r2, [pc, #104]	@ (8001aec <HAL_TIM_Base_MspInit+0x78>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d12e      	bne.n	8001ae4 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a86:	4b1a      	ldr	r3, [pc, #104]	@ (8001af0 <HAL_TIM_Base_MspInit+0x7c>)
 8001a88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001a8c:	4a18      	ldr	r2, [pc, #96]	@ (8001af0 <HAL_TIM_Base_MspInit+0x7c>)
 8001a8e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a92:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001a96:	4b16      	ldr	r3, [pc, #88]	@ (8001af0 <HAL_TIM_Base_MspInit+0x7c>)
 8001a98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001a9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	2029      	movs	r0, #41	@ 0x29
 8001aaa:	f000 fcc3 	bl	8002434 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001aae:	2029      	movs	r0, #41	@ 0x29
 8001ab0:	f000 fcda 	bl	8002468 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	202a      	movs	r0, #42	@ 0x2a
 8001aba:	f000 fcbb 	bl	8002434 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001abe:	202a      	movs	r0, #42	@ 0x2a
 8001ac0:	f000 fcd2 	bl	8002468 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	202b      	movs	r0, #43	@ 0x2b
 8001aca:	f000 fcb3 	bl	8002434 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001ace:	202b      	movs	r0, #43	@ 0x2b
 8001ad0:	f000 fcca 	bl	8002468 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	202c      	movs	r0, #44	@ 0x2c
 8001ada:	f000 fcab 	bl	8002434 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001ade:	202c      	movs	r0, #44	@ 0x2c
 8001ae0:	f000 fcc2 	bl	8002468 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001ae4:	bf00      	nop
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40012c00 	.word	0x40012c00
 8001af0:	44020c00 	.word	0x44020c00

08001af4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b04:	d10e      	bne.n	8001b24 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b06:	4b0a      	ldr	r3, [pc, #40]	@ (8001b30 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b0c:	4a08      	ldr	r2, [pc, #32]	@ (8001b30 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001b16:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001b24:	bf00      	nop
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	44020c00 	.word	0x44020c00

08001b34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08a      	sub	sp, #40	@ 0x28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a25      	ldr	r2, [pc, #148]	@ (8001be8 <HAL_TIM_MspPostInit+0xb4>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d120      	bne.n	8001b98 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b56:	4b25      	ldr	r3, [pc, #148]	@ (8001bec <HAL_TIM_MspPostInit+0xb8>)
 8001b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b5c:	4a23      	ldr	r2, [pc, #140]	@ (8001bec <HAL_TIM_MspPostInit+0xb8>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b66:	4b21      	ldr	r3, [pc, #132]	@ (8001bec <HAL_TIM_MspPostInit+0xb8>)
 8001b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b74:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b86:	2301      	movs	r3, #1
 8001b88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4817      	ldr	r0, [pc, #92]	@ (8001bf0 <HAL_TIM_MspPostInit+0xbc>)
 8001b92:	f001 fbb1 	bl	80032f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b96:	e023      	b.n	8001be0 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM2)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ba0:	d11e      	bne.n	8001be0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba2:	4b12      	ldr	r3, [pc, #72]	@ (8001bec <HAL_TIM_MspPostInit+0xb8>)
 8001ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ba8:	4a10      	ldr	r2, [pc, #64]	@ (8001bec <HAL_TIM_MspPostInit+0xb8>)
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001bec <HAL_TIM_MspPostInit+0xb8>)
 8001bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4805      	ldr	r0, [pc, #20]	@ (8001bf0 <HAL_TIM_MspPostInit+0xbc>)
 8001bdc:	f001 fb8c 	bl	80032f8 <HAL_GPIO_Init>
}
 8001be0:	bf00      	nop
 8001be2:	3728      	adds	r7, #40	@ 0x28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40012c00 	.word	0x40012c00
 8001bec:	44020c00 	.word	0x44020c00
 8001bf0:	42020000 	.word	0x42020000

08001bf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b0c0      	sub	sp, #256	@ 0x100
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfc:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c0c:	f107 0318 	add.w	r3, r7, #24
 8001c10:	22d0      	movs	r2, #208	@ 0xd0
 8001c12:	2100      	movs	r1, #0
 8001c14:	4618      	mov	r0, r3
 8001c16:	f009 fa61 	bl	800b0dc <memset>
  if(huart->Instance==USART1)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a50      	ldr	r2, [pc, #320]	@ (8001d60 <HAL_UART_MspInit+0x16c>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d14e      	bne.n	8001cc2 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c24:	f04f 0201 	mov.w	r2, #1
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c30:	2300      	movs	r3, #0
 8001c32:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c34:	f107 0318 	add.w	r3, r7, #24
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f002 fdff 	bl	800483c <HAL_RCCEx_PeriphCLKConfig>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001c44:	f7ff fe18 	bl	8001878 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c48:	4b46      	ldr	r3, [pc, #280]	@ (8001d64 <HAL_UART_MspInit+0x170>)
 8001c4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001c4e:	4a45      	ldr	r2, [pc, #276]	@ (8001d64 <HAL_UART_MspInit+0x170>)
 8001c50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c54:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001c58:	4b42      	ldr	r3, [pc, #264]	@ (8001d64 <HAL_UART_MspInit+0x170>)
 8001c5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001c5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c66:	4b3f      	ldr	r3, [pc, #252]	@ (8001d64 <HAL_UART_MspInit+0x170>)
 8001c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c6c:	4a3d      	ldr	r2, [pc, #244]	@ (8001d64 <HAL_UART_MspInit+0x170>)
 8001c6e:	f043 0302 	orr.w	r3, r3, #2
 8001c72:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c76:	4b3b      	ldr	r3, [pc, #236]	@ (8001d64 <HAL_UART_MspInit+0x170>)
 8001c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001c84:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001c88:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001c9e:	2304      	movs	r3, #4
 8001ca0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001ca8:	4619      	mov	r1, r3
 8001caa:	482f      	ldr	r0, [pc, #188]	@ (8001d68 <HAL_UART_MspInit+0x174>)
 8001cac:	f001 fb24 	bl	80032f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	203a      	movs	r0, #58	@ 0x3a
 8001cb6:	f000 fbbd 	bl	8002434 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cba:	203a      	movs	r0, #58	@ 0x3a
 8001cbc:	f000 fbd4 	bl	8002468 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cc0:	e049      	b.n	8001d56 <HAL_UART_MspInit+0x162>
  else if(huart->Instance==USART2)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a29      	ldr	r2, [pc, #164]	@ (8001d6c <HAL_UART_MspInit+0x178>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d144      	bne.n	8001d56 <HAL_UART_MspInit+0x162>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ccc:	f04f 0202 	mov.w	r2, #2
 8001cd0:	f04f 0300 	mov.w	r3, #0
 8001cd4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cdc:	f107 0318 	add.w	r3, r7, #24
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f002 fdab 	bl	800483c <HAL_RCCEx_PeriphCLKConfig>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <HAL_UART_MspInit+0xfc>
      Error_Handler();
 8001cec:	f7ff fdc4 	bl	8001878 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cf0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d64 <HAL_UART_MspInit+0x170>)
 8001cf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001cf6:	4a1b      	ldr	r2, [pc, #108]	@ (8001d64 <HAL_UART_MspInit+0x170>)
 8001cf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cfc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001d00:	4b18      	ldr	r3, [pc, #96]	@ (8001d64 <HAL_UART_MspInit+0x170>)
 8001d02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0e:	4b15      	ldr	r3, [pc, #84]	@ (8001d64 <HAL_UART_MspInit+0x170>)
 8001d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d14:	4a13      	ldr	r2, [pc, #76]	@ (8001d64 <HAL_UART_MspInit+0x170>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d1e:	4b11      	ldr	r3, [pc, #68]	@ (8001d64 <HAL_UART_MspInit+0x170>)
 8001d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d2c:	230c      	movs	r3, #12
 8001d2e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d44:	2307      	movs	r3, #7
 8001d46:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4807      	ldr	r0, [pc, #28]	@ (8001d70 <HAL_UART_MspInit+0x17c>)
 8001d52:	f001 fad1 	bl	80032f8 <HAL_GPIO_Init>
}
 8001d56:	bf00      	nop
 8001d58:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40013800 	.word	0x40013800
 8001d64:	44020c00 	.word	0x44020c00
 8001d68:	42020400 	.word	0x42020400
 8001d6c:	40004400 	.word	0x40004400
 8001d70:	42020000 	.word	0x42020000

08001d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d78:	bf00      	nop
 8001d7a:	e7fd      	b.n	8001d78 <NMI_Handler+0x4>

08001d7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d80:	bf00      	nop
 8001d82:	e7fd      	b.n	8001d80 <HardFault_Handler+0x4>

08001d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d88:	bf00      	nop
 8001d8a:	e7fd      	b.n	8001d88 <MemManage_Handler+0x4>

08001d8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d90:	bf00      	nop
 8001d92:	e7fd      	b.n	8001d90 <BusFault_Handler+0x4>

08001d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d98:	bf00      	nop
 8001d9a:	e7fd      	b.n	8001d98 <UsageFault_Handler+0x4>

08001d9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dca:	f000 fa37 	bl	800223c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001dd8:	4802      	ldr	r0, [pc, #8]	@ (8001de4 <FDCAN1_IT0_IRQHandler+0x10>)
 8001dda:	f001 f891 	bl	8002f00 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	2000008c 	.word	0x2000008c

08001de8 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001dec:	4802      	ldr	r0, [pc, #8]	@ (8001df8 <FDCAN1_IT1_IRQHandler+0x10>)
 8001dee:	f001 f887 	bl	8002f00 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	2000008c 	.word	0x2000008c

08001dfc <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 Break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e00:	4802      	ldr	r0, [pc, #8]	@ (8001e0c <TIM1_BRK_IRQHandler+0x10>)
 8001e02:	f006 fb25 	bl	8008450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000144 	.word	0x20000144

08001e10 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e14:	4802      	ldr	r0, [pc, #8]	@ (8001e20 <TIM1_UP_IRQHandler+0x10>)
 8001e16:	f006 fb1b 	bl	8008450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000144 	.word	0x20000144

08001e24 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 Trigger and Commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e28:	4802      	ldr	r0, [pc, #8]	@ (8001e34 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001e2a:	f006 fb11 	bl	8008450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000144 	.word	0x20000144

08001e38 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 Capture Compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e3c:	4802      	ldr	r0, [pc, #8]	@ (8001e48 <TIM1_CC_IRQHandler+0x10>)
 8001e3e:	f006 fb07 	bl	8008450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000144 	.word	0x20000144

08001e4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e50:	4802      	ldr	r0, [pc, #8]	@ (8001e5c <USART1_IRQHandler+0x10>)
 8001e52:	f007 feff 	bl	8009c54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	200001dc 	.word	0x200001dc

08001e60 <ICACHE_IRQHandler>:

/**
  * @brief This function handles Instruction cache global interrupt.
  */
void ICACHE_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ICACHE_IRQn 0 */

  /* USER CODE END ICACHE_IRQn 0 */
  HAL_ICACHE_IRQHandler();
 8001e64:	f001 fd2e 	bl	80038c4 <HAL_ICACHE_IRQHandler>
  /* USER CODE BEGIN ICACHE_IRQn 1 */

  /* USER CODE END ICACHE_IRQn 1 */
}
 8001e68:	bf00      	nop
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	e00a      	b.n	8001e94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e7e:	f3af 8000 	nop.w
 8001e82:	4601      	mov	r1, r0
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	1c5a      	adds	r2, r3, #1
 8001e88:	60ba      	str	r2, [r7, #8]
 8001e8a:	b2ca      	uxtb	r2, r1
 8001e8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	3301      	adds	r3, #1
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	dbf0      	blt.n	8001e7e <_read+0x12>
  }

  return len;
 8001e9c:	687b      	ldr	r3, [r7, #4]
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3718      	adds	r7, #24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b086      	sub	sp, #24
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	60f8      	str	r0, [r7, #12]
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	e009      	b.n	8001ecc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	60ba      	str	r2, [r7, #8]
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7fe fe57 	bl	8000b74 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	dbf1      	blt.n	8001eb8 <_write+0x12>
  }
  return len;
 8001ed4:	687b      	ldr	r3, [r7, #4]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <_close>:

int _close(int file)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ee6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f06:	605a      	str	r2, [r3, #4]
  return 0;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <_isatty>:

int _isatty(int file)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f1e:	2301      	movs	r3, #1
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f50:	4a14      	ldr	r2, [pc, #80]	@ (8001fa4 <_sbrk+0x5c>)
 8001f52:	4b15      	ldr	r3, [pc, #84]	@ (8001fa8 <_sbrk+0x60>)
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f5c:	4b13      	ldr	r3, [pc, #76]	@ (8001fac <_sbrk+0x64>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d102      	bne.n	8001f6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f64:	4b11      	ldr	r3, [pc, #68]	@ (8001fac <_sbrk+0x64>)
 8001f66:	4a12      	ldr	r2, [pc, #72]	@ (8001fb0 <_sbrk+0x68>)
 8001f68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f6a:	4b10      	ldr	r3, [pc, #64]	@ (8001fac <_sbrk+0x64>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4413      	add	r3, r2
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d207      	bcs.n	8001f88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f78:	f009 f8fe 	bl	800b178 <__errno>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	220c      	movs	r2, #12
 8001f80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f82:	f04f 33ff 	mov.w	r3, #4294967295
 8001f86:	e009      	b.n	8001f9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f88:	4b08      	ldr	r3, [pc, #32]	@ (8001fac <_sbrk+0x64>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f8e:	4b07      	ldr	r3, [pc, #28]	@ (8001fac <_sbrk+0x64>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4413      	add	r3, r2
 8001f96:	4a05      	ldr	r2, [pc, #20]	@ (8001fac <_sbrk+0x64>)
 8001f98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	20044000 	.word	0x20044000
 8001fa8:	00000400 	.word	0x00000400
 8001fac:	20000460 	.word	0x20000460
 8001fb0:	200005b8 	.word	0x200005b8

08001fb4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001fba:	4b35      	ldr	r3, [pc, #212]	@ (8002090 <SystemInit+0xdc>)
 8001fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fc0:	4a33      	ldr	r2, [pc, #204]	@ (8002090 <SystemInit+0xdc>)
 8001fc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fc6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001fca:	4b32      	ldr	r3, [pc, #200]	@ (8002094 <SystemInit+0xe0>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001fd0:	4b30      	ldr	r3, [pc, #192]	@ (8002094 <SystemInit+0xe0>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001fd6:	4b2f      	ldr	r3, [pc, #188]	@ (8002094 <SystemInit+0xe0>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001fdc:	4b2d      	ldr	r3, [pc, #180]	@ (8002094 <SystemInit+0xe0>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	492c      	ldr	r1, [pc, #176]	@ (8002094 <SystemInit+0xe0>)
 8001fe2:	4b2d      	ldr	r3, [pc, #180]	@ (8002098 <SystemInit+0xe4>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001fe8:	4b2a      	ldr	r3, [pc, #168]	@ (8002094 <SystemInit+0xe0>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001fee:	4b29      	ldr	r3, [pc, #164]	@ (8002094 <SystemInit+0xe0>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001ff4:	4b27      	ldr	r3, [pc, #156]	@ (8002094 <SystemInit+0xe0>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001ffa:	4b26      	ldr	r3, [pc, #152]	@ (8002094 <SystemInit+0xe0>)
 8001ffc:	4a27      	ldr	r2, [pc, #156]	@ (800209c <SystemInit+0xe8>)
 8001ffe:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8002000:	4b24      	ldr	r3, [pc, #144]	@ (8002094 <SystemInit+0xe0>)
 8002002:	2200      	movs	r2, #0
 8002004:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8002006:	4b23      	ldr	r3, [pc, #140]	@ (8002094 <SystemInit+0xe0>)
 8002008:	4a24      	ldr	r2, [pc, #144]	@ (800209c <SystemInit+0xe8>)
 800200a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800200c:	4b21      	ldr	r3, [pc, #132]	@ (8002094 <SystemInit+0xe0>)
 800200e:	2200      	movs	r2, #0
 8002010:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8002012:	4b20      	ldr	r3, [pc, #128]	@ (8002094 <SystemInit+0xe0>)
 8002014:	4a21      	ldr	r2, [pc, #132]	@ (800209c <SystemInit+0xe8>)
 8002016:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8002018:	4b1e      	ldr	r3, [pc, #120]	@ (8002094 <SystemInit+0xe0>)
 800201a:	2200      	movs	r2, #0
 800201c:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800201e:	4b1d      	ldr	r3, [pc, #116]	@ (8002094 <SystemInit+0xe0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a1c      	ldr	r2, [pc, #112]	@ (8002094 <SystemInit+0xe0>)
 8002024:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002028:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800202a:	4b1a      	ldr	r3, [pc, #104]	@ (8002094 <SystemInit+0xe0>)
 800202c:	2200      	movs	r2, #0
 800202e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002030:	4b17      	ldr	r3, [pc, #92]	@ (8002090 <SystemInit+0xdc>)
 8002032:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002036:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8002038:	4b19      	ldr	r3, [pc, #100]	@ (80020a0 <SystemInit+0xec>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8002040:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8002048:	d003      	beq.n	8002052 <SystemInit+0x9e>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002050:	d117      	bne.n	8002082 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8002052:	4b13      	ldr	r3, [pc, #76]	@ (80020a0 <SystemInit+0xec>)
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d005      	beq.n	800206a <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800205e:	4b10      	ldr	r3, [pc, #64]	@ (80020a0 <SystemInit+0xec>)
 8002060:	4a10      	ldr	r2, [pc, #64]	@ (80020a4 <SystemInit+0xf0>)
 8002062:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8002064:	4b0e      	ldr	r3, [pc, #56]	@ (80020a0 <SystemInit+0xec>)
 8002066:	4a10      	ldr	r2, [pc, #64]	@ (80020a8 <SystemInit+0xf4>)
 8002068:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800206a:	4b0d      	ldr	r3, [pc, #52]	@ (80020a0 <SystemInit+0xec>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	4a0c      	ldr	r2, [pc, #48]	@ (80020a0 <SystemInit+0xec>)
 8002070:	f043 0302 	orr.w	r3, r3, #2
 8002074:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8002076:	4b0a      	ldr	r3, [pc, #40]	@ (80020a0 <SystemInit+0xec>)
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	4a09      	ldr	r2, [pc, #36]	@ (80020a0 <SystemInit+0xec>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	61d3      	str	r3, [r2, #28]
  }
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	e000ed00 	.word	0xe000ed00
 8002094:	44020c00 	.word	0x44020c00
 8002098:	eae2eae3 	.word	0xeae2eae3
 800209c:	01010280 	.word	0x01010280
 80020a0:	40022000 	.word	0x40022000
 80020a4:	08192a3b 	.word	0x08192a3b
 80020a8:	4c5d6e7f 	.word	0x4c5d6e7f

080020ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020ac:	480d      	ldr	r0, [pc, #52]	@ (80020e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80020b0:	f7ff ff80 	bl	8001fb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
	  ldr r0, =_sdata
 80020b4:	480c      	ldr	r0, [pc, #48]	@ (80020e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80020b6:	490d      	ldr	r1, [pc, #52]	@ (80020ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80020b8:	4a0d      	ldr	r2, [pc, #52]	@ (80020f0 <LoopForever+0xe>)
  movs r3, #0
 80020ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020bc:	e002      	b.n	80020c4 <LoopCopyDataInit>

080020be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020be:	58d4      	ldr	r4, [r2, r3]
	  str r4, [r0, r3]
 80020c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020c2:	3304      	adds	r3, #4

080020c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020c8:	d3f9      	bcc.n	80020be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ca:	4a0a      	ldr	r2, [pc, #40]	@ (80020f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020cc:	4c0a      	ldr	r4, [pc, #40]	@ (80020f8 <LoopForever+0x16>)
  movs r3, #0
 80020ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020d0:	e001      	b.n	80020d6 <LoopFillZerobss>

080020d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020d4:	3204      	adds	r2, #4

080020d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020d8:	d3fb      	bcc.n	80020d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020da:	f009 f853 	bl	800b184 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020de:	f7fe fdbb 	bl	8000c58 <main>

080020e2 <LoopForever>:

LoopForever:
    b LoopForever
 80020e2:	e7fe      	b.n	80020e2 <LoopForever>
  ldr   r0, =_estack
 80020e4:	20044000 	.word	0x20044000
	  ldr r0, =_sdata
 80020e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020ec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80020f0:	0800c074 	.word	0x0800c074
  ldr r2, =_sbss
 80020f4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80020f8:	200005b4 	.word	0x200005b4

080020fc <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020fc:	e7fe      	b.n	80020fc <ADC1_IRQHandler>
	...

08002100 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002104:	2003      	movs	r0, #3
 8002106:	f000 f98a 	bl	800241e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800210a:	f002 fa0d 	bl	8004528 <HAL_RCC_GetSysClockFreq>
 800210e:	4602      	mov	r2, r0
 8002110:	4b0c      	ldr	r3, [pc, #48]	@ (8002144 <HAL_Init+0x44>)
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	f003 030f 	and.w	r3, r3, #15
 8002118:	490b      	ldr	r1, [pc, #44]	@ (8002148 <HAL_Init+0x48>)
 800211a:	5ccb      	ldrb	r3, [r1, r3]
 800211c:	fa22 f303 	lsr.w	r3, r2, r3
 8002120:	4a0a      	ldr	r2, [pc, #40]	@ (800214c <HAL_Init+0x4c>)
 8002122:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002124:	2004      	movs	r0, #4
 8002126:	f000 f9cf 	bl	80024c8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800212a:	200f      	movs	r0, #15
 800212c:	f000 f810 	bl	8002150 <HAL_InitTick>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e002      	b.n	8002140 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800213a:	f7ff fbad 	bl	8001898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	bd80      	pop	{r7, pc}
 8002144:	44020c00 	.word	0x44020c00
 8002148:	0800bfe0 	.word	0x0800bfe0
 800214c:	20000008 	.word	0x20000008

08002150 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800215c:	4b33      	ldr	r3, [pc, #204]	@ (800222c <HAL_InitTick+0xdc>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e05c      	b.n	8002222 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002168:	4b31      	ldr	r3, [pc, #196]	@ (8002230 <HAL_InitTick+0xe0>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b04      	cmp	r3, #4
 8002172:	d10c      	bne.n	800218e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002174:	4b2f      	ldr	r3, [pc, #188]	@ (8002234 <HAL_InitTick+0xe4>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4b2c      	ldr	r3, [pc, #176]	@ (800222c <HAL_InitTick+0xdc>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	4619      	mov	r1, r3
 800217e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002182:	fbb3 f3f1 	udiv	r3, r3, r1
 8002186:	fbb2 f3f3 	udiv	r3, r2, r3
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	e037      	b.n	80021fe <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800218e:	f000 f9f3 	bl	8002578 <HAL_SYSTICK_GetCLKSourceConfig>
 8002192:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d023      	beq.n	80021e2 <HAL_InitTick+0x92>
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	2b02      	cmp	r3, #2
 800219e:	d82d      	bhi.n	80021fc <HAL_InitTick+0xac>
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_InitTick+0x5e>
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d00d      	beq.n	80021c8 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80021ac:	e026      	b.n	80021fc <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80021ae:	4b21      	ldr	r3, [pc, #132]	@ (8002234 <HAL_InitTick+0xe4>)
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	4b1e      	ldr	r3, [pc, #120]	@ (800222c <HAL_InitTick+0xdc>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	4619      	mov	r1, r3
 80021b8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80021bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80021c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c4:	60fb      	str	r3, [r7, #12]
        break;
 80021c6:	e01a      	b.n	80021fe <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80021c8:	4b18      	ldr	r3, [pc, #96]	@ (800222c <HAL_InitTick+0xdc>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	461a      	mov	r2, r3
 80021ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80021d6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80021da:	fbb2 f3f3 	udiv	r3, r2, r3
 80021de:	60fb      	str	r3, [r7, #12]
        break;
 80021e0:	e00d      	b.n	80021fe <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80021e2:	4b12      	ldr	r3, [pc, #72]	@ (800222c <HAL_InitTick+0xdc>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80021f0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80021f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f8:	60fb      	str	r3, [r7, #12]
        break;
 80021fa:	e000      	b.n	80021fe <HAL_InitTick+0xae>
        break;
 80021fc:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f000 f940 	bl	8002484 <HAL_SYSTICK_Config>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e009      	b.n	8002222 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800220e:	2200      	movs	r2, #0
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	f04f 30ff 	mov.w	r0, #4294967295
 8002216:	f000 f90d 	bl	8002434 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800221a:	4a07      	ldr	r2, [pc, #28]	@ (8002238 <HAL_InitTick+0xe8>)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20000010 	.word	0x20000010
 8002230:	e000e010 	.word	0xe000e010
 8002234:	20000008 	.word	0x20000008
 8002238:	2000000c 	.word	0x2000000c

0800223c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002240:	4b06      	ldr	r3, [pc, #24]	@ (800225c <HAL_IncTick+0x20>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	461a      	mov	r2, r3
 8002246:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <HAL_IncTick+0x24>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4413      	add	r3, r2
 800224c:	4a04      	ldr	r2, [pc, #16]	@ (8002260 <HAL_IncTick+0x24>)
 800224e:	6013      	str	r3, [r2, #0]
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	20000010 	.word	0x20000010
 8002260:	20000464 	.word	0x20000464

08002264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  return uwTick;
 8002268:	4b03      	ldr	r3, [pc, #12]	@ (8002278 <HAL_GetTick+0x14>)
 800226a:	681b      	ldr	r3, [r3, #0]
}
 800226c:	4618      	mov	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	20000464 	.word	0x20000464

0800227c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002284:	f7ff ffee 	bl	8002264 <HAL_GetTick>
 8002288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002294:	d005      	beq.n	80022a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002296:	4b0a      	ldr	r3, [pc, #40]	@ (80022c0 <HAL_Delay+0x44>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4413      	add	r3, r2
 80022a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022a2:	bf00      	nop
 80022a4:	f7ff ffde 	bl	8002264 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d8f7      	bhi.n	80022a4 <HAL_Delay+0x28>
  {
  }
}
 80022b4:	bf00      	nop
 80022b6:	bf00      	nop
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	20000010 	.word	0x20000010

080022c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002308 <__NVIC_SetPriorityGrouping+0x44>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022e0:	4013      	ands	r3, r2
 80022e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022f6:	4a04      	ldr	r2, [pc, #16]	@ (8002308 <__NVIC_SetPriorityGrouping+0x44>)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	60d3      	str	r3, [r2, #12]
}
 80022fc:	bf00      	nop
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002310:	4b04      	ldr	r3, [pc, #16]	@ (8002324 <__NVIC_GetPriorityGrouping+0x18>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	0a1b      	lsrs	r3, r3, #8
 8002316:	f003 0307 	and.w	r3, r3, #7
}
 800231a:	4618      	mov	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002332:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002336:	2b00      	cmp	r3, #0
 8002338:	db0b      	blt.n	8002352 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800233a:	88fb      	ldrh	r3, [r7, #6]
 800233c:	f003 021f 	and.w	r2, r3, #31
 8002340:	4907      	ldr	r1, [pc, #28]	@ (8002360 <__NVIC_EnableIRQ+0x38>)
 8002342:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002346:	095b      	lsrs	r3, r3, #5
 8002348:	2001      	movs	r0, #1
 800234a:	fa00 f202 	lsl.w	r2, r0, r2
 800234e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	e000e100 	.word	0xe000e100

08002364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	6039      	str	r1, [r7, #0]
 800236e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002370:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002374:	2b00      	cmp	r3, #0
 8002376:	db0a      	blt.n	800238e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	b2da      	uxtb	r2, r3
 800237c:	490c      	ldr	r1, [pc, #48]	@ (80023b0 <__NVIC_SetPriority+0x4c>)
 800237e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002382:	0112      	lsls	r2, r2, #4
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	440b      	add	r3, r1
 8002388:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800238c:	e00a      	b.n	80023a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	b2da      	uxtb	r2, r3
 8002392:	4908      	ldr	r1, [pc, #32]	@ (80023b4 <__NVIC_SetPriority+0x50>)
 8002394:	88fb      	ldrh	r3, [r7, #6]
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	3b04      	subs	r3, #4
 800239c:	0112      	lsls	r2, r2, #4
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	440b      	add	r3, r1
 80023a2:	761a      	strb	r2, [r3, #24]
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	e000e100 	.word	0xe000e100
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b089      	sub	sp, #36	@ 0x24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f1c3 0307 	rsb	r3, r3, #7
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	bf28      	it	cs
 80023d6:	2304      	movcs	r3, #4
 80023d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3304      	adds	r3, #4
 80023de:	2b06      	cmp	r3, #6
 80023e0:	d902      	bls.n	80023e8 <NVIC_EncodePriority+0x30>
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3b03      	subs	r3, #3
 80023e6:	e000      	b.n	80023ea <NVIC_EncodePriority+0x32>
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ec:	f04f 32ff 	mov.w	r2, #4294967295
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43da      	mvns	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	401a      	ands	r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002400:	f04f 31ff 	mov.w	r1, #4294967295
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	fa01 f303 	lsl.w	r3, r1, r3
 800240a:	43d9      	mvns	r1, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002410:	4313      	orrs	r3, r2
         );
}
 8002412:	4618      	mov	r0, r3
 8002414:	3724      	adds	r7, #36	@ 0x24
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7ff ff4c 	bl	80022c4 <__NVIC_SetPriorityGrouping>
}
 800242c:	bf00      	nop
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
 8002440:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002442:	f7ff ff63 	bl	800230c <__NVIC_GetPriorityGrouping>
 8002446:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	68b9      	ldr	r1, [r7, #8]
 800244c:	6978      	ldr	r0, [r7, #20]
 800244e:	f7ff ffb3 	bl	80023b8 <NVIC_EncodePriority>
 8002452:	4602      	mov	r2, r0
 8002454:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002458:	4611      	mov	r1, r2
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff ff82 	bl	8002364 <__NVIC_SetPriority>
}
 8002460:	bf00      	nop
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002472:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff ff56 	bl	8002328 <__NVIC_EnableIRQ>
}
 800247c:	bf00      	nop
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3b01      	subs	r3, #1
 8002490:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002494:	d301      	bcc.n	800249a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002496:	2301      	movs	r3, #1
 8002498:	e00d      	b.n	80024b6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800249a:	4a0a      	ldr	r2, [pc, #40]	@ (80024c4 <HAL_SYSTICK_Config+0x40>)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3b01      	subs	r3, #1
 80024a0:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80024a2:	4b08      	ldr	r3, [pc, #32]	@ (80024c4 <HAL_SYSTICK_Config+0x40>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80024a8:	4b06      	ldr	r3, [pc, #24]	@ (80024c4 <HAL_SYSTICK_Config+0x40>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a05      	ldr	r2, [pc, #20]	@ (80024c4 <HAL_SYSTICK_Config+0x40>)
 80024ae:	f043 0303 	orr.w	r3, r3, #3
 80024b2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	e000e010 	.word	0xe000e010

080024c8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	d844      	bhi.n	8002560 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80024d6:	a201      	add	r2, pc, #4	@ (adr r2, 80024dc <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80024d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024dc:	080024ff 	.word	0x080024ff
 80024e0:	0800251d 	.word	0x0800251d
 80024e4:	0800253f 	.word	0x0800253f
 80024e8:	08002561 	.word	0x08002561
 80024ec:	080024f1 	.word	0x080024f1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80024f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002570 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a1e      	ldr	r2, [pc, #120]	@ (8002570 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80024f6:	f043 0304 	orr.w	r3, r3, #4
 80024fa:	6013      	str	r3, [r2, #0]
      break;
 80024fc:	e031      	b.n	8002562 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80024fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002570 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a1b      	ldr	r2, [pc, #108]	@ (8002570 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002504:	f023 0304 	bic.w	r3, r3, #4
 8002508:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800250a:	4b1a      	ldr	r3, [pc, #104]	@ (8002574 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800250c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002510:	4a18      	ldr	r2, [pc, #96]	@ (8002574 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002512:	f023 030c 	bic.w	r3, r3, #12
 8002516:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800251a:	e022      	b.n	8002562 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800251c:	4b14      	ldr	r3, [pc, #80]	@ (8002570 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a13      	ldr	r2, [pc, #76]	@ (8002570 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002522:	f023 0304 	bic.w	r3, r3, #4
 8002526:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8002528:	4b12      	ldr	r3, [pc, #72]	@ (8002574 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800252a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800252e:	f023 030c 	bic.w	r3, r3, #12
 8002532:	4a10      	ldr	r2, [pc, #64]	@ (8002574 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002534:	f043 0304 	orr.w	r3, r3, #4
 8002538:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800253c:	e011      	b.n	8002562 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800253e:	4b0c      	ldr	r3, [pc, #48]	@ (8002570 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a0b      	ldr	r2, [pc, #44]	@ (8002570 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002544:	f023 0304 	bic.w	r3, r3, #4
 8002548:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800254a:	4b0a      	ldr	r3, [pc, #40]	@ (8002574 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800254c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002550:	f023 030c 	bic.w	r3, r3, #12
 8002554:	4a07      	ldr	r2, [pc, #28]	@ (8002574 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002556:	f043 0308 	orr.w	r3, r3, #8
 800255a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800255e:	e000      	b.n	8002562 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002560:	bf00      	nop
  }
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	e000e010 	.word	0xe000e010
 8002574:	44020c00 	.word	0x44020c00

08002578 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800257e:	4b17      	ldr	r3, [pc, #92]	@ (80025dc <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0304 	and.w	r3, r3, #4
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800258a:	2304      	movs	r3, #4
 800258c:	607b      	str	r3, [r7, #4]
 800258e:	e01e      	b.n	80025ce <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8002590:	4b13      	ldr	r3, [pc, #76]	@ (80025e0 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8002592:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002596:	f003 030c 	and.w	r3, r3, #12
 800259a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	2b08      	cmp	r3, #8
 80025a0:	d00f      	beq.n	80025c2 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	d80f      	bhi.n	80025c8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d003      	beq.n	80025bc <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80025b4:	e008      	b.n	80025c8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80025b6:	2300      	movs	r3, #0
 80025b8:	607b      	str	r3, [r7, #4]
        break;
 80025ba:	e008      	b.n	80025ce <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80025bc:	2301      	movs	r3, #1
 80025be:	607b      	str	r3, [r7, #4]
        break;
 80025c0:	e005      	b.n	80025ce <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80025c2:	2302      	movs	r3, #2
 80025c4:	607b      	str	r3, [r7, #4]
        break;
 80025c6:	e002      	b.n	80025ce <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80025c8:	2300      	movs	r3, #0
 80025ca:	607b      	str	r3, [r7, #4]
        break;
 80025cc:	bf00      	nop
    }
  }
  return systick_source;
 80025ce:	687b      	ldr	r3, [r7, #4]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	e000e010 	.word	0xe000e010
 80025e0:	44020c00 	.word	0x44020c00

080025e4 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80025ec:	f7ff fe3a 	bl	8002264 <HAL_GetTick>
 80025f0:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e06b      	b.n	80026d4 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d008      	beq.n	800261a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2220      	movs	r2, #32
 800260c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e05c      	b.n	80026d4 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695a      	ldr	r2, [r3, #20]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f042 0204 	orr.w	r2, r2, #4
 8002628:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2205      	movs	r2, #5
 800262e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002632:	e020      	b.n	8002676 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002634:	f7ff fe16 	bl	8002264 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b05      	cmp	r3, #5
 8002640:	d919      	bls.n	8002676 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002646:	f043 0210 	orr.w	r2, r3, #16
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2203      	movs	r2, #3
 8002652:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800265a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002666:	2201      	movs	r2, #1
 8002668:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e02e      	b.n	80026d4 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0d7      	beq.n	8002634 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	695a      	ldr	r2, [r3, #20]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0202 	orr.w	r2, r2, #2
 8002692:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2204      	movs	r2, #4
 8002698:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80026a4:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d007      	beq.n	80026ca <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026be:	2201      	movs	r2, #1
 80026c0:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2200      	movs	r2, #0
 80026c8:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e019      	b.n	8002722 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d004      	beq.n	8002704 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2220      	movs	r2, #32
 80026fe:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e00e      	b.n	8002722 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2204      	movs	r2, #4
 8002708:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6812      	ldr	r2, [r2, #0]
 8002716:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800271a:	f043 0304 	orr.w	r3, r3, #4
 800271e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
	...

08002730 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e147      	b.n	80029d2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d106      	bne.n	800275c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7ff f8aa 	bl	80018b0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	699a      	ldr	r2, [r3, #24]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0210 	bic.w	r2, r2, #16
 800276a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800276c:	f7ff fd7a 	bl	8002264 <HAL_GetTick>
 8002770:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002772:	e012      	b.n	800279a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002774:	f7ff fd76 	bl	8002264 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b0a      	cmp	r3, #10
 8002780:	d90b      	bls.n	800279a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002786:	f043 0201 	orr.w	r2, r3, #1
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2203      	movs	r2, #3
 8002792:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e11b      	b.n	80029d2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	f003 0308 	and.w	r3, r3, #8
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	d0e5      	beq.n	8002774 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	699a      	ldr	r2, [r3, #24]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027b8:	f7ff fd54 	bl	8002264 <HAL_GetTick>
 80027bc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80027be:	e012      	b.n	80027e6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80027c0:	f7ff fd50 	bl	8002264 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b0a      	cmp	r3, #10
 80027cc:	d90b      	bls.n	80027e6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027d2:	f043 0201 	orr.w	r2, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2203      	movs	r2, #3
 80027de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e0f5      	b.n	80029d2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0e5      	beq.n	80027c0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699a      	ldr	r2, [r3, #24]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0202 	orr.w	r2, r2, #2
 8002802:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a74      	ldr	r2, [pc, #464]	@ (80029dc <HAL_FDCAN_Init+0x2ac>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d103      	bne.n	8002816 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800280e:	4a74      	ldr	r2, [pc, #464]	@ (80029e0 <HAL_FDCAN_Init+0x2b0>)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	7c1b      	ldrb	r3, [r3, #16]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d108      	bne.n	8002830 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	699a      	ldr	r2, [r3, #24]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800282c:	619a      	str	r2, [r3, #24]
 800282e:	e007      	b.n	8002840 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	699a      	ldr	r2, [r3, #24]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800283e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	7c5b      	ldrb	r3, [r3, #17]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d108      	bne.n	800285a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699a      	ldr	r2, [r3, #24]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002856:	619a      	str	r2, [r3, #24]
 8002858:	e007      	b.n	800286a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	699a      	ldr	r2, [r3, #24]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002868:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	7c9b      	ldrb	r3, [r3, #18]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d108      	bne.n	8002884 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	699a      	ldr	r2, [r3, #24]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002880:	619a      	str	r2, [r3, #24]
 8002882:	e007      	b.n	8002894 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699a      	ldr	r2, [r3, #24]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002892:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	699a      	ldr	r2, [r3, #24]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80028b8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0210 	bic.w	r2, r2, #16
 80028c8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d108      	bne.n	80028e4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	699a      	ldr	r2, [r3, #24]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f042 0204 	orr.w	r2, r2, #4
 80028e0:	619a      	str	r2, [r3, #24]
 80028e2:	e02c      	b.n	800293e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d028      	beq.n	800293e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d01c      	beq.n	800292e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699a      	ldr	r2, [r3, #24]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002902:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	691a      	ldr	r2, [r3, #16]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0210 	orr.w	r2, r2, #16
 8002912:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	2b03      	cmp	r3, #3
 800291a:	d110      	bne.n	800293e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699a      	ldr	r2, [r3, #24]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0220 	orr.w	r2, r2, #32
 800292a:	619a      	str	r2, [r3, #24]
 800292c:	e007      	b.n	800293e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	699a      	ldr	r2, [r3, #24]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f042 0220 	orr.w	r2, r2, #32
 800293c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	3b01      	subs	r3, #1
 8002944:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	3b01      	subs	r3, #1
 800294c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800294e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002956:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	3b01      	subs	r3, #1
 8002960:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002966:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002968:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002972:	d115      	bne.n	80029a0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002978:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297e:	3b01      	subs	r3, #1
 8002980:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002982:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002988:	3b01      	subs	r3, #1
 800298a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800298c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002994:	3b01      	subs	r3, #1
 8002996:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800299c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800299e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 fc3c 	bl	8003234 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	4000a400 	.word	0x4000a400
 80029e0:	4000a500 	.word	0x4000a500

080029e4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80029f4:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80029f6:	7dfb      	ldrb	r3, [r7, #23]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d002      	beq.n	8002a02 <HAL_FDCAN_ConfigFilter+0x1e>
 80029fc:	7dfb      	ldrb	r3, [r7, #23]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d13d      	bne.n	8002a7e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d119      	bne.n	8002a3e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002a16:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8002a1e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002a24:	4313      	orrs	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	e01d      	b.n	8002a7a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	075a      	lsls	r2, r3, #29
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	079a      	lsls	r2, r3, #30
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	4413      	add	r3, r2
 8002a66:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	3304      	adds	r3, #4
 8002a72:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	e006      	b.n	8002a8c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a82:	f043 0202 	orr.w	r2, r3, #2
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
  }
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	371c      	adds	r7, #28
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d110      	bne.n	8002ace <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	699a      	ldr	r2, [r3, #24]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0201 	bic.w	r2, r2, #1
 8002ac2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	e006      	b.n	8002adc <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ad2:	f043 0204 	orr.w	r2, r3, #4
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
  }
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b08b      	sub	sp, #44	@ 0x2c
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
 8002af4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002b00:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8002b02:	7efb      	ldrb	r3, [r7, #27]
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	f040 80e8 	bne.w	8002cda <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2b40      	cmp	r3, #64	@ 0x40
 8002b0e:	d137      	bne.n	8002b80 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b18:	f003 030f 	and.w	r3, r3, #15
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d107      	bne.n	8002b30 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b24:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e0db      	b.n	8002ce8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b38:	0e1b      	lsrs	r3, r3, #24
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d10a      	bne.n	8002b58 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b4a:	0a5b      	lsrs	r3, r3, #9
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002b54:	2301      	movs	r3, #1
 8002b56:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b60:	0a1b      	lsrs	r3, r3, #8
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	69fa      	ldr	r2, [r7, #28]
 8002b68:	4413      	add	r3, r2
 8002b6a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8002b70:	69fa      	ldr	r2, [r7, #28]
 8002b72:	4613      	mov	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4413      	add	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	440b      	add	r3, r1
 8002b7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b7e:	e036      	b.n	8002bee <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b88:	f003 030f 	and.w	r3, r3, #15
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d107      	bne.n	8002ba0 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b94:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e0a3      	b.n	8002ce8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ba8:	0e1b      	lsrs	r3, r3, #24
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d10a      	bne.n	8002bc8 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bba:	0a1b      	lsrs	r3, r3, #8
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bd0:	0a1b      	lsrs	r3, r3, #8
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	69fa      	ldr	r2, [r7, #28]
 8002bd8:	4413      	add	r3, r2
 8002bda:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002be0:	69fa      	ldr	r2, [r7, #28]
 8002be2:	4613      	mov	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	4413      	add	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	440b      	add	r3, r1
 8002bec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d107      	bne.n	8002c12 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8002c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	0c9b      	lsrs	r3, r3, #18
 8002c08:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	e005      	b.n	8002c1e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8002c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8002c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c38:	3304      	adds	r3, #4
 8002c3a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8002c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	0c1b      	lsrs	r3, r3, #16
 8002c4c:	f003 020f 	and.w	r2, r3, #15
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8002c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	0e1b      	lsrs	r3, r3, #24
 8002c72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	0fda      	lsrs	r2, r3, #31
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c86:	3304      	adds	r3, #4
 8002c88:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8002c8e:	2300      	movs	r3, #0
 8002c90:	623b      	str	r3, [r7, #32]
 8002c92:	e00a      	b.n	8002caa <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	441a      	add	r2, r3
 8002c9a:	6839      	ldr	r1, [r7, #0]
 8002c9c:	6a3b      	ldr	r3, [r7, #32]
 8002c9e:	440b      	add	r3, r1
 8002ca0:	7812      	ldrb	r2, [r2, #0]
 8002ca2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	623b      	str	r3, [r7, #32]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	4a11      	ldr	r2, [pc, #68]	@ (8002cf4 <HAL_FDCAN_GetRxMessage+0x20c>)
 8002cb0:	5cd3      	ldrb	r3, [r2, r3]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d3ec      	bcc.n	8002c94 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2b40      	cmp	r3, #64	@ 0x40
 8002cbe:	d105      	bne.n	8002ccc <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	69fa      	ldr	r2, [r7, #28]
 8002cc6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8002cca:	e004      	b.n	8002cd6 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	69fa      	ldr	r2, [r7, #28]
 8002cd2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	e006      	b.n	8002ce8 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cde:	f043 0208 	orr.w	r2, r3, #8
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
  }
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	372c      	adds	r7, #44	@ 0x2c
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	0800bff8 	.word	0x0800bff8

08002cf8 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(const FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b40      	cmp	r3, #64	@ 0x40
 8002d06:	d107      	bne.n	8002d18 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d10:	f003 030f 	and.w	r3, r3, #15
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	e006      	b.n	8002d26 <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d20:	f003 030f 	and.w	r3, r3, #15
 8002d24:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 8002d26:	68fb      	ldr	r3, [r7, #12]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b087      	sub	sp, #28
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d46:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002d48:	7dfb      	ldrb	r3, [r7, #23]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d003      	beq.n	8002d56 <HAL_FDCAN_ActivateNotification+0x22>
 8002d4e:	7dfb      	ldrb	r3, [r7, #23]
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	f040 80c8 	bne.w	8002ee6 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5c:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d004      	beq.n	8002d72 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d03b      	beq.n	8002dea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d004      	beq.n	8002d86 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d031      	beq.n	8002dea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d004      	beq.n	8002d9a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d027      	beq.n	8002dea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d004      	beq.n	8002dae <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d01d      	beq.n	8002dea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d004      	beq.n	8002dc2 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	f003 0310 	and.w	r3, r3, #16
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d013      	beq.n	8002dea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d004      	beq.n	8002dd6 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d009      	beq.n	8002dea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00c      	beq.n	8002dfa <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d107      	bne.n	8002dfa <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f042 0201 	orr.w	r2, r2, #1
 8002df8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d004      	beq.n	8002e0e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d13b      	bne.n	8002e86 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d004      	beq.n	8002e22 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d131      	bne.n	8002e86 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d004      	beq.n	8002e36 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d127      	bne.n	8002e86 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d004      	beq.n	8002e4a <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d11d      	bne.n	8002e86 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d004      	beq.n	8002e5e <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	f003 0310 	and.w	r3, r3, #16
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d113      	bne.n	8002e86 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d004      	beq.n	8002e72 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	f003 0320 	and.w	r3, r3, #32
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d109      	bne.n	8002e86 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00c      	beq.n	8002e96 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d007      	beq.n	8002e96 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f042 0202 	orr.w	r2, r2, #2
 8002e94:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d009      	beq.n	8002eb4 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d009      	beq.n	8002ed2 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	e006      	b.n	8002ef4 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eea:	f043 0202 	orr.w	r2, r3, #2
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
  }
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	371c      	adds	r7, #28
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b08c      	sub	sp, #48	@ 0x30
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f0e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8002f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f34:	4013      	ands	r3, r2
 8002f36:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f42:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f56:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8002f5a:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f62:	6a3a      	ldr	r2, [r7, #32]
 8002f64:	4013      	ands	r3, r2
 8002f66:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f6e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002f72:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f7a:	69fa      	ldr	r2, [r7, #28]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f86:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f8e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00b      	beq.n	8002fb2 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d006      	beq.n	8002fb2 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2240      	movs	r2, #64	@ 0x40
 8002faa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f916 	bl	80031de <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d019      	beq.n	8002ff0 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d014      	beq.n	8002ff0 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002fce:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fe6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002fe8:	6939      	ldr	r1, [r7, #16]
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f8d8 	bl	80031a0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d007      	beq.n	8003006 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ffc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002ffe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f8a2 	bl	800314a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003008:	2b00      	cmp	r3, #0
 800300a:	d007      	beq.n	800301c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003012:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003014:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7fe fb4a 	bl	80016b0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800301c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301e:	2b00      	cmp	r3, #0
 8003020:	d007      	beq.n	8003032 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003028:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800302a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f897 	bl	8003160 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00c      	beq.n	8003056 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003042:	2b00      	cmp	r3, #0
 8003044:	d007      	beq.n	8003056 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800304e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f890 	bl	8003176 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800305c:	2b00      	cmp	r3, #0
 800305e:	d018      	beq.n	8003092 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003066:	2b00      	cmp	r3, #0
 8003068:	d013      	beq.n	8003092 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003072:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	4013      	ands	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2280      	movs	r2, #128	@ 0x80
 8003088:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800308a:	68f9      	ldr	r1, [r7, #12]
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f87c 	bl	800318a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00c      	beq.n	80030b6 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d007      	beq.n	80030b6 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80030ae:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f880 	bl	80031b6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00c      	beq.n	80030da <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d007      	beq.n	80030da <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80030d2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 f878 	bl	80031ca <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00f      	beq.n	8003104 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00a      	beq.n	8003104 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80030f6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030fc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d007      	beq.n	800311a <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	69fa      	ldr	r2, [r7, #28]
 8003110:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003112:	69f9      	ldr	r1, [r7, #28]
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f876 	bl	8003206 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800311a:	6a3b      	ldr	r3, [r7, #32]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d009      	beq.n	8003134 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6a3a      	ldr	r2, [r7, #32]
 8003126:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800312c:	6a3b      	ldr	r3, [r7, #32]
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003138:	2b00      	cmp	r3, #0
 800313a:	d002      	beq.n	8003142 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f858 	bl	80031f2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003142:	bf00      	nop
 8003144:	3730      	adds	r7, #48	@ 0x30
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
 8003192:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b083      	sub	sp, #12
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80031fa:	bf00      	nop
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003206:	b480      	push	{r7}
 8003208:	b083      	sub	sp, #12
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
 800320e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_FDCAN_GetError>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval FDCAN Error Code
  */
uint32_t HAL_FDCAN_GetError(const FDCAN_HandleTypeDef *hfdcan)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Return FDCAN error code */
  return hfdcan->ErrorCode;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
}
 8003228:	4618      	mov	r0, r3
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800323c:	4b2c      	ldr	r3, [pc, #176]	@ (80032f0 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 800323e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a2b      	ldr	r2, [pc, #172]	@ (80032f4 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d103      	bne.n	8003252 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003250:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003260:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003268:	041a      	lsls	r2, r3, #16
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003286:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800328e:	061a      	lsls	r2, r3, #24
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	e005      	b.n	80032d4 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	3304      	adds	r3, #4
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d3f3      	bcc.n	80032c8 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 80032e0:	bf00      	nop
 80032e2:	bf00      	nop
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	4000ac00 	.word	0x4000ac00
 80032f4:	4000a800 	.word	0x4000a800

080032f8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8003302:	2300      	movs	r3, #0
 8003304:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003306:	e136      	b.n	8003576 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	2101      	movs	r1, #1
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	fa01 f303 	lsl.w	r3, r1, r3
 8003314:	4013      	ands	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 8128 	beq.w	8003570 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b02      	cmp	r3, #2
 8003326:	d003      	beq.n	8003330 <HAL_GPIO_Init+0x38>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2b12      	cmp	r3, #18
 800332e:	d125      	bne.n	800337c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	08da      	lsrs	r2, r3, #3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3208      	adds	r2, #8
 8003338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800333c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	220f      	movs	r2, #15
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	4013      	ands	r3, r2
 8003352:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	f003 020f 	and.w	r2, r3, #15
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	4313      	orrs	r3, r2
 800336c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	08da      	lsrs	r2, r3, #3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	3208      	adds	r2, #8
 8003376:	6979      	ldr	r1, [r7, #20]
 8003378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	2203      	movs	r2, #3
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	4013      	ands	r3, r2
 8003392:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 0203 	and.w	r2, r3, #3
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d00b      	beq.n	80033d0 <HAL_GPIO_Init+0xd8>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d007      	beq.n	80033d0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033c4:	2b11      	cmp	r3, #17
 80033c6:	d003      	beq.n	80033d0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b12      	cmp	r3, #18
 80033ce:	d130      	bne.n	8003432 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	2203      	movs	r2, #3
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	43db      	mvns	r3, r3
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	4013      	ands	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	68da      	ldr	r2, [r3, #12]
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003406:	2201      	movs	r2, #1
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	43db      	mvns	r3, r3
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	4013      	ands	r3, r2
 8003414:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	091b      	lsrs	r3, r3, #4
 800341c:	f003 0201 	and.w	r2, r3, #1
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	4313      	orrs	r3, r2
 800342a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b03      	cmp	r3, #3
 8003438:	d017      	beq.n	800346a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	2203      	movs	r2, #3
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	43db      	mvns	r3, r3
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	4013      	ands	r3, r2
 8003450:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	689a      	ldr	r2, [r3, #8]
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	4313      	orrs	r3, r2
 8003462:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d07c      	beq.n	8003570 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003476:	4a47      	ldr	r2, [pc, #284]	@ (8003594 <HAL_GPIO_Init+0x29c>)
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	089b      	lsrs	r3, r3, #2
 800347c:	3318      	adds	r3, #24
 800347e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003482:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	220f      	movs	r2, #15
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43db      	mvns	r3, r3
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	4013      	ands	r3, r2
 8003498:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	0a9a      	lsrs	r2, r3, #10
 800349e:	4b3e      	ldr	r3, [pc, #248]	@ (8003598 <HAL_GPIO_Init+0x2a0>)
 80034a0:	4013      	ands	r3, r2
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	f002 0203 	and.w	r2, r2, #3
 80034a8:	00d2      	lsls	r2, r2, #3
 80034aa:	4093      	lsls	r3, r2
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80034b2:	4938      	ldr	r1, [pc, #224]	@ (8003594 <HAL_GPIO_Init+0x29c>)
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	089b      	lsrs	r3, r3, #2
 80034b8:	3318      	adds	r3, #24
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80034c0:	4b34      	ldr	r3, [pc, #208]	@ (8003594 <HAL_GPIO_Init+0x29c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	43db      	mvns	r3, r3
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	4013      	ands	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80034e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003594 <HAL_GPIO_Init+0x29c>)
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80034ea:	4b2a      	ldr	r3, [pc, #168]	@ (8003594 <HAL_GPIO_Init+0x29c>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	43db      	mvns	r3, r3
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	4013      	ands	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	4313      	orrs	r3, r2
 800350c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800350e:	4a21      	ldr	r2, [pc, #132]	@ (8003594 <HAL_GPIO_Init+0x29c>)
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003514:	4b1f      	ldr	r3, [pc, #124]	@ (8003594 <HAL_GPIO_Init+0x29c>)
 8003516:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800351a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	43db      	mvns	r3, r3
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	4013      	ands	r3, r2
 8003524:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4313      	orrs	r3, r2
 8003538:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800353a:	4a16      	ldr	r2, [pc, #88]	@ (8003594 <HAL_GPIO_Init+0x29c>)
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003542:	4b14      	ldr	r3, [pc, #80]	@ (8003594 <HAL_GPIO_Init+0x29c>)
 8003544:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003548:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	43db      	mvns	r3, r3
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	4013      	ands	r3, r2
 8003552:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	4313      	orrs	r3, r2
 8003566:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003568:	4a0a      	ldr	r2, [pc, #40]	@ (8003594 <HAL_GPIO_Init+0x29c>)
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	3301      	adds	r3, #1
 8003574:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	fa22 f303 	lsr.w	r3, r2, r3
 8003580:	2b00      	cmp	r3, #0
 8003582:	f47f aec1 	bne.w	8003308 <HAL_GPIO_Init+0x10>
  }
}
 8003586:	bf00      	nop
 8003588:	bf00      	nop
 800358a:	371c      	adds	r7, #28
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	44022000 	.word	0x44022000
 8003598:	002f7f7f 	.word	0x002f7f7f

0800359c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	807b      	strh	r3, [r7, #2]
 80035a8:	4613      	mov	r3, r2
 80035aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035ac:	787b      	ldrb	r3, [r7, #1]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035b2:	887a      	ldrh	r2, [r7, #2]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035b8:	e002      	b.n	80035c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035ba:	887a      	ldrh	r2, [r7, #2]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035de:	887a      	ldrh	r2, [r7, #2]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4013      	ands	r3, r2
 80035e4:	041a      	lsls	r2, r3, #16
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	43d9      	mvns	r1, r3
 80035ea:	887b      	ldrh	r3, [r7, #2]
 80035ec:	400b      	ands	r3, r1
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	619a      	str	r2, [r3, #24]
}
 80035f4:	bf00      	nop
 80035f6:	3714      	adds	r7, #20
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e08d      	b.n	800372e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d106      	bne.n	800362c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7fe f9bc 	bl	80019a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2224      	movs	r2, #36	@ 0x24
 8003630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0201 	bic.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003650:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003660:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d107      	bne.n	800367a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003676:	609a      	str	r2, [r3, #8]
 8003678:	e006      	b.n	8003688 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003686:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	2b02      	cmp	r3, #2
 800368e:	d108      	bne.n	80036a2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800369e:	605a      	str	r2, [r3, #4]
 80036a0:	e007      	b.n	80036b2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6812      	ldr	r2, [r2, #0]
 80036bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80036c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691a      	ldr	r2, [r3, #16]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	69d9      	ldr	r1, [r3, #28]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a1a      	ldr	r2, [r3, #32]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0201 	orr.w	r2, r2, #1
 800370e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2220      	movs	r2, #32
 800371a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
 800373e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b20      	cmp	r3, #32
 800374a:	d138      	bne.n	80037be <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003752:	2b01      	cmp	r3, #1
 8003754:	d101      	bne.n	800375a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003756:	2302      	movs	r3, #2
 8003758:	e032      	b.n	80037c0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2224      	movs	r2, #36	@ 0x24
 8003766:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0201 	bic.w	r2, r2, #1
 8003778:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003788:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6819      	ldr	r1, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f042 0201 	orr.w	r2, r2, #1
 80037a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2220      	movs	r2, #32
 80037ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037ba:	2300      	movs	r3, #0
 80037bc:	e000      	b.n	80037c0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037be:	2302      	movs	r3, #2
  }
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b20      	cmp	r3, #32
 80037e0:	d139      	bne.n	8003856 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e033      	b.n	8003858 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2224      	movs	r2, #36	@ 0x24
 80037fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 0201 	bic.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800381e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	021b      	lsls	r3, r3, #8
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	4313      	orrs	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f042 0201 	orr.w	r2, r2, #1
 8003840:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2220      	movs	r2, #32
 8003846:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003852:	2300      	movs	r3, #0
 8003854:	e000      	b.n	8003858 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003856:	2302      	movs	r3, #2
  }
}
 8003858:	4618      	mov	r0, r3
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800386c:	2300      	movs	r3, #0
 800386e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003870:	4b0b      	ldr	r3, [pc, #44]	@ (80038a0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	d002      	beq.n	8003882 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	73fb      	strb	r3, [r7, #15]
 8003880:	e007      	b.n	8003892 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003882:	4b07      	ldr	r3, [pc, #28]	@ (80038a0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f023 0204 	bic.w	r2, r3, #4
 800388a:	4905      	ldr	r1, [pc, #20]	@ (80038a0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4313      	orrs	r3, r2
 8003890:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003892:	7bfb      	ldrb	r3, [r7, #15]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	40030400 	.word	0x40030400

080038a4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80038a8:	4b05      	ldr	r3, [pc, #20]	@ (80038c0 <HAL_ICACHE_Enable+0x1c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a04      	ldr	r2, [pc, #16]	@ (80038c0 <HAL_ICACHE_Enable+0x1c>)
 80038ae:	f043 0301 	orr.w	r3, r3, #1
 80038b2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	40030400 	.word	0x40030400

080038c4 <HAL_ICACHE_IRQHandler>:
  * @note This function respectively disables the interrupt and clears the
  *       flag of any pending flag before calling the associated user callback.
  * @retval None
  */
void HAL_ICACHE_IRQHandler(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
  /* Get current interrupt flags and interrupt sources value */
  uint32_t itflags   = READ_REG(ICACHE->SR);
 80038ca:	4b17      	ldr	r3, [pc, #92]	@ (8003928 <HAL_ICACHE_IRQHandler+0x64>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	607b      	str	r3, [r7, #4]
  uint32_t itsources = READ_REG(ICACHE->IER);
 80038d0:	4b15      	ldr	r3, [pc, #84]	@ (8003928 <HAL_ICACHE_IRQHandler+0x64>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	603b      	str	r3, [r7, #0]

  /* Check Instruction cache Error interrupt flag */
  if (((itflags & itsources) & ICACHE_FLAG_ERROR) != 0U)
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	4013      	ands	r3, r2
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00a      	beq.n	80038fa <HAL_ICACHE_IRQHandler+0x36>
  {
    /* Disable error interrupt */
    CLEAR_BIT(ICACHE->IER, ICACHE_IER_ERRIE);
 80038e4:	4b10      	ldr	r3, [pc, #64]	@ (8003928 <HAL_ICACHE_IRQHandler+0x64>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	4a0f      	ldr	r2, [pc, #60]	@ (8003928 <HAL_ICACHE_IRQHandler+0x64>)
 80038ea:	f023 0304 	bic.w	r3, r3, #4
 80038ee:	6093      	str	r3, [r2, #8]

    /* Clear ERR pending flag */
    WRITE_REG(ICACHE->FCR, ICACHE_FCR_CERRF);
 80038f0:	4b0d      	ldr	r3, [pc, #52]	@ (8003928 <HAL_ICACHE_IRQHandler+0x64>)
 80038f2:	2204      	movs	r2, #4
 80038f4:	60da      	str	r2, [r3, #12]

    /* Instruction cache error interrupt user callback */
    HAL_ICACHE_ErrorCallback();
 80038f6:	f000 f820 	bl	800393a <HAL_ICACHE_ErrorCallback>
  }

  /* Check Instruction cache BusyEnd interrupt flag */
  if (((itflags & itsources) & ICACHE_FLAG_BUSYEND) != 0U)
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	4013      	ands	r3, r2
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00a      	beq.n	800391e <HAL_ICACHE_IRQHandler+0x5a>
  {
    /* Disable end of cache invalidation interrupt */
    CLEAR_BIT(ICACHE->IER, ICACHE_IER_BSYENDIE);
 8003908:	4b07      	ldr	r3, [pc, #28]	@ (8003928 <HAL_ICACHE_IRQHandler+0x64>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	4a06      	ldr	r2, [pc, #24]	@ (8003928 <HAL_ICACHE_IRQHandler+0x64>)
 800390e:	f023 0302 	bic.w	r3, r3, #2
 8003912:	6093      	str	r3, [r2, #8]

    /* Clear BSYENDF pending flag */
    WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 8003914:	4b04      	ldr	r3, [pc, #16]	@ (8003928 <HAL_ICACHE_IRQHandler+0x64>)
 8003916:	2202      	movs	r2, #2
 8003918:	60da      	str	r2, [r3, #12]

    /* Instruction cache busyend interrupt user callback */
    HAL_ICACHE_InvalidateCompleteCallback();
 800391a:	f000 f807 	bl	800392c <HAL_ICACHE_InvalidateCompleteCallback>
  }
}
 800391e:	bf00      	nop
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40030400 	.word	0x40030400

0800392c <HAL_ICACHE_InvalidateCompleteCallback>:

/**
  * @brief  Cache invalidation complete callback.
  */
__weak void HAL_ICACHE_InvalidateCompleteCallback(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_ICACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 8003930:	bf00      	nop
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <HAL_ICACHE_ErrorCallback>:

/**
  * @brief  Error callback.
  */
__weak void HAL_ICACHE_ErrorCallback(void)
{
 800393a:	b480      	push	{r7}
 800393c:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_ICACHE_ErrorCallback() should be implemented in the user file
   */
}
 800393e:	bf00      	nop
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b088      	sub	sp, #32
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d102      	bne.n	800395c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	f000 bc28 	b.w	80041ac <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800395c:	4b94      	ldr	r3, [pc, #592]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	f003 0318 	and.w	r3, r3, #24
 8003964:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8003966:	4b92      	ldr	r3, [pc, #584]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 8003968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0310 	and.w	r3, r3, #16
 8003978:	2b00      	cmp	r3, #0
 800397a:	d05b      	beq.n	8003a34 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	2b08      	cmp	r3, #8
 8003980:	d005      	beq.n	800398e <HAL_RCC_OscConfig+0x46>
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	2b18      	cmp	r3, #24
 8003986:	d114      	bne.n	80039b2 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	2b02      	cmp	r3, #2
 800398c:	d111      	bne.n	80039b2 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d102      	bne.n	800399c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	f000 bc08 	b.w	80041ac <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800399c:	4b84      	ldr	r3, [pc, #528]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	041b      	lsls	r3, r3, #16
 80039aa:	4981      	ldr	r1, [pc, #516]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80039b0:	e040      	b.n	8003a34 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d023      	beq.n	8003a02 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80039ba:	4b7d      	ldr	r3, [pc, #500]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a7c      	ldr	r2, [pc, #496]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 80039c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c6:	f7fe fc4d 	bl	8002264 <HAL_GetTick>
 80039ca:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80039ce:	f7fe fc49 	bl	8002264 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e3e5      	b.n	80041ac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80039e0:	4b73      	ldr	r3, [pc, #460]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0f0      	beq.n	80039ce <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80039ec:	4b70      	ldr	r3, [pc, #448]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	041b      	lsls	r3, r3, #16
 80039fa:	496d      	ldr	r1, [pc, #436]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	618b      	str	r3, [r1, #24]
 8003a00:	e018      	b.n	8003a34 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003a02:	4b6b      	ldr	r3, [pc, #428]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a6a      	ldr	r2, [pc, #424]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 8003a08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0e:	f7fe fc29 	bl	8002264 <HAL_GetTick>
 8003a12:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003a14:	e008      	b.n	8003a28 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003a16:	f7fe fc25 	bl	8002264 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e3c1      	b.n	80041ac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003a28:	4b61      	ldr	r3, [pc, #388]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1f0      	bne.n	8003a16 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 80a0 	beq.w	8003b82 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	2b10      	cmp	r3, #16
 8003a46:	d005      	beq.n	8003a54 <HAL_RCC_OscConfig+0x10c>
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	2b18      	cmp	r3, #24
 8003a4c:	d109      	bne.n	8003a62 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d106      	bne.n	8003a62 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f040 8092 	bne.w	8003b82 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e3a4      	b.n	80041ac <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a6a:	d106      	bne.n	8003a7a <HAL_RCC_OscConfig+0x132>
 8003a6c:	4b50      	ldr	r3, [pc, #320]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a4f      	ldr	r2, [pc, #316]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 8003a72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a76:	6013      	str	r3, [r2, #0]
 8003a78:	e058      	b.n	8003b2c <HAL_RCC_OscConfig+0x1e4>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d112      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x160>
 8003a82:	4b4b      	ldr	r3, [pc, #300]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a4a      	ldr	r2, [pc, #296]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 8003a88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	4b48      	ldr	r3, [pc, #288]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a47      	ldr	r2, [pc, #284]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 8003a94:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	4b45      	ldr	r3, [pc, #276]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a44      	ldr	r2, [pc, #272]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 8003aa0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	e041      	b.n	8003b2c <HAL_RCC_OscConfig+0x1e4>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ab0:	d112      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x190>
 8003ab2:	4b3f      	ldr	r3, [pc, #252]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a3e      	ldr	r2, [pc, #248]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 8003ab8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	4b3c      	ldr	r3, [pc, #240]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a3b      	ldr	r2, [pc, #236]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 8003ac4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	4b39      	ldr	r3, [pc, #228]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a38      	ldr	r2, [pc, #224]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 8003ad0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	e029      	b.n	8003b2c <HAL_RCC_OscConfig+0x1e4>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003ae0:	d112      	bne.n	8003b08 <HAL_RCC_OscConfig+0x1c0>
 8003ae2:	4b33      	ldr	r3, [pc, #204]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a32      	ldr	r2, [pc, #200]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 8003ae8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	4b30      	ldr	r3, [pc, #192]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a2f      	ldr	r2, [pc, #188]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 8003af4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	4b2d      	ldr	r3, [pc, #180]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a2c      	ldr	r2, [pc, #176]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 8003b00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	e011      	b.n	8003b2c <HAL_RCC_OscConfig+0x1e4>
 8003b08:	4b29      	ldr	r3, [pc, #164]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a28      	ldr	r2, [pc, #160]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 8003b0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b12:	6013      	str	r3, [r2, #0]
 8003b14:	4b26      	ldr	r3, [pc, #152]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a25      	ldr	r2, [pc, #148]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 8003b1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b1e:	6013      	str	r3, [r2, #0]
 8003b20:	4b23      	ldr	r3, [pc, #140]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a22      	ldr	r2, [pc, #136]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 8003b26:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d013      	beq.n	8003b5c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b34:	f7fe fb96 	bl	8002264 <HAL_GetTick>
 8003b38:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003b3c:	f7fe fb92 	bl	8002264 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b64      	cmp	r3, #100	@ 0x64
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e32e      	b.n	80041ac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b4e:	4b18      	ldr	r3, [pc, #96]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0f0      	beq.n	8003b3c <HAL_RCC_OscConfig+0x1f4>
 8003b5a:	e012      	b.n	8003b82 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5c:	f7fe fb82 	bl	8002264 <HAL_GetTick>
 8003b60:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003b64:	f7fe fb7e 	bl	8002264 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b64      	cmp	r3, #100	@ 0x64
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e31a      	b.n	80041ac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b76:	4b0e      	ldr	r3, [pc, #56]	@ (8003bb0 <HAL_RCC_OscConfig+0x268>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1f0      	bne.n	8003b64 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 809a 	beq.w	8003cc4 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d005      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x25a>
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	2b18      	cmp	r3, #24
 8003b9a:	d149      	bne.n	8003c30 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d146      	bne.n	8003c30 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d104      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e2fe      	b.n	80041ac <HAL_RCC_OscConfig+0x864>
 8003bae:	bf00      	nop
 8003bb0:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d11c      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8003bba:	4b9a      	ldr	r3, [pc, #616]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0218 	and.w	r2, r3, #24
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d014      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003bca:	4b96      	ldr	r3, [pc, #600]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f023 0218 	bic.w	r2, r3, #24
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	4993      	ldr	r1, [pc, #588]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003bdc:	f000 fdd0 	bl	8004780 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003be0:	4b91      	ldr	r3, [pc, #580]	@ (8003e28 <HAL_RCC_OscConfig+0x4e0>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7fe fab3 	bl	8002150 <HAL_InitTick>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e2db      	b.n	80041ac <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf4:	f7fe fb36 	bl	8002264 <HAL_GetTick>
 8003bf8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003bfc:	f7fe fb32 	bl	8002264 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e2ce      	b.n	80041ac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c0e:	4b85      	ldr	r3, [pc, #532]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0f0      	beq.n	8003bfc <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003c1a:	4b82      	ldr	r3, [pc, #520]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	041b      	lsls	r3, r3, #16
 8003c28:	497e      	ldr	r1, [pc, #504]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003c2e:	e049      	b.n	8003cc4 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d02c      	beq.n	8003c92 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003c38:	4b7a      	ldr	r3, [pc, #488]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f023 0218 	bic.w	r2, r3, #24
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	4977      	ldr	r1, [pc, #476]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8003c4a:	4b76      	ldr	r3, [pc, #472]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a75      	ldr	r2, [pc, #468]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003c50:	f043 0301 	orr.w	r3, r3, #1
 8003c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c56:	f7fe fb05 	bl	8002264 <HAL_GetTick>
 8003c5a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003c5e:	f7fe fb01 	bl	8002264 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e29d      	b.n	80041ac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c70:	4b6c      	ldr	r3, [pc, #432]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0f0      	beq.n	8003c5e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003c7c:	4b69      	ldr	r3, [pc, #420]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	041b      	lsls	r3, r3, #16
 8003c8a:	4966      	ldr	r1, [pc, #408]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	610b      	str	r3, [r1, #16]
 8003c90:	e018      	b.n	8003cc4 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c92:	4b64      	ldr	r3, [pc, #400]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a63      	ldr	r2, [pc, #396]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003c98:	f023 0301 	bic.w	r3, r3, #1
 8003c9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9e:	f7fe fae1 	bl	8002264 <HAL_GetTick>
 8003ca2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003ca6:	f7fe fadd 	bl	8002264 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e279      	b.n	80041ac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cb8:	4b5a      	ldr	r3, [pc, #360]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1f0      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0308 	and.w	r3, r3, #8
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d03c      	beq.n	8003d4a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d01c      	beq.n	8003d12 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cd8:	4b52      	ldr	r3, [pc, #328]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003cda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cde:	4a51      	ldr	r2, [pc, #324]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003ce0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ce4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce8:	f7fe fabc 	bl	8002264 <HAL_GetTick>
 8003cec:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003cf0:	f7fe fab8 	bl	8002264 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e254      	b.n	80041ac <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003d02:	4b48      	ldr	r3, [pc, #288]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003d04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0ef      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x3a8>
 8003d10:	e01b      	b.n	8003d4a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d12:	4b44      	ldr	r3, [pc, #272]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003d14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d18:	4a42      	ldr	r2, [pc, #264]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003d1a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d1e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d22:	f7fe fa9f 	bl	8002264 <HAL_GetTick>
 8003d26:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003d28:	e008      	b.n	8003d3c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003d2a:	f7fe fa9b 	bl	8002264 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e237      	b.n	80041ac <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003d3c:	4b39      	ldr	r3, [pc, #228]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003d3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1ef      	bne.n	8003d2a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0304 	and.w	r3, r3, #4
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 80d2 	beq.w	8003efc <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003d58:	4b34      	ldr	r3, [pc, #208]	@ (8003e2c <HAL_RCC_OscConfig+0x4e4>)
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d118      	bne.n	8003d96 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003d64:	4b31      	ldr	r3, [pc, #196]	@ (8003e2c <HAL_RCC_OscConfig+0x4e4>)
 8003d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d68:	4a30      	ldr	r2, [pc, #192]	@ (8003e2c <HAL_RCC_OscConfig+0x4e4>)
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d70:	f7fe fa78 	bl	8002264 <HAL_GetTick>
 8003d74:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d78:	f7fe fa74 	bl	8002264 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e210      	b.n	80041ac <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003d8a:	4b28      	ldr	r3, [pc, #160]	@ (8003e2c <HAL_RCC_OscConfig+0x4e4>)
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d108      	bne.n	8003db0 <HAL_RCC_OscConfig+0x468>
 8003d9e:	4b21      	ldr	r3, [pc, #132]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003da0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003da4:	4a1f      	ldr	r2, [pc, #124]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003da6:	f043 0301 	orr.w	r3, r3, #1
 8003daa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003dae:	e074      	b.n	8003e9a <HAL_RCC_OscConfig+0x552>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d118      	bne.n	8003dea <HAL_RCC_OscConfig+0x4a2>
 8003db8:	4b1a      	ldr	r3, [pc, #104]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003dba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dbe:	4a19      	ldr	r2, [pc, #100]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003dc0:	f023 0301 	bic.w	r3, r3, #1
 8003dc4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003dc8:	4b16      	ldr	r3, [pc, #88]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003dca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dce:	4a15      	ldr	r2, [pc, #84]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003dd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dd4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003dd8:	4b12      	ldr	r3, [pc, #72]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003dda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dde:	4a11      	ldr	r2, [pc, #68]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003de0:	f023 0304 	bic.w	r3, r3, #4
 8003de4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003de8:	e057      	b.n	8003e9a <HAL_RCC_OscConfig+0x552>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	2b05      	cmp	r3, #5
 8003df0:	d11e      	bne.n	8003e30 <HAL_RCC_OscConfig+0x4e8>
 8003df2:	4b0c      	ldr	r3, [pc, #48]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003df4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003df8:	4a0a      	ldr	r2, [pc, #40]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003dfa:	f043 0304 	orr.w	r3, r3, #4
 8003dfe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e02:	4b08      	ldr	r3, [pc, #32]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003e04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e08:	4a06      	ldr	r2, [pc, #24]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003e0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e12:	4b04      	ldr	r3, [pc, #16]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003e14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e18:	4a02      	ldr	r2, [pc, #8]	@ (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003e1a:	f043 0301 	orr.w	r3, r3, #1
 8003e1e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e22:	e03a      	b.n	8003e9a <HAL_RCC_OscConfig+0x552>
 8003e24:	44020c00 	.word	0x44020c00
 8003e28:	2000000c 	.word	0x2000000c
 8003e2c:	44020800 	.word	0x44020800
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	2b85      	cmp	r3, #133	@ 0x85
 8003e36:	d118      	bne.n	8003e6a <HAL_RCC_OscConfig+0x522>
 8003e38:	4ba2      	ldr	r3, [pc, #648]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 8003e3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e3e:	4aa1      	ldr	r2, [pc, #644]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 8003e40:	f043 0304 	orr.w	r3, r3, #4
 8003e44:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e48:	4b9e      	ldr	r3, [pc, #632]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 8003e4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e4e:	4a9d      	ldr	r2, [pc, #628]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 8003e50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e54:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e58:	4b9a      	ldr	r3, [pc, #616]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 8003e5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e5e:	4a99      	ldr	r2, [pc, #612]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 8003e60:	f043 0301 	orr.w	r3, r3, #1
 8003e64:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e68:	e017      	b.n	8003e9a <HAL_RCC_OscConfig+0x552>
 8003e6a:	4b96      	ldr	r3, [pc, #600]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 8003e6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e70:	4a94      	ldr	r2, [pc, #592]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 8003e72:	f023 0301 	bic.w	r3, r3, #1
 8003e76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e7a:	4b92      	ldr	r3, [pc, #584]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 8003e7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e80:	4a90      	ldr	r2, [pc, #576]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 8003e82:	f023 0304 	bic.w	r3, r3, #4
 8003e86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e8a:	4b8e      	ldr	r3, [pc, #568]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 8003e8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e90:	4a8c      	ldr	r2, [pc, #560]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 8003e92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e96:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d016      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea2:	f7fe f9df 	bl	8002264 <HAL_GetTick>
 8003ea6:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ea8:	e00a      	b.n	8003ec0 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eaa:	f7fe f9db 	bl	8002264 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e175      	b.n	80041ac <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ec0:	4b80      	ldr	r3, [pc, #512]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 8003ec2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0ed      	beq.n	8003eaa <HAL_RCC_OscConfig+0x562>
 8003ece:	e015      	b.n	8003efc <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed0:	f7fe f9c8 	bl	8002264 <HAL_GetTick>
 8003ed4:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ed6:	e00a      	b.n	8003eee <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ed8:	f7fe f9c4 	bl	8002264 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e15e      	b.n	80041ac <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003eee:	4b75      	ldr	r3, [pc, #468]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 8003ef0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1ed      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0320 	and.w	r3, r3, #32
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d036      	beq.n	8003f76 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d019      	beq.n	8003f44 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f10:	4b6c      	ldr	r3, [pc, #432]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a6b      	ldr	r2, [pc, #428]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 8003f16:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003f1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1c:	f7fe f9a2 	bl	8002264 <HAL_GetTick>
 8003f20:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003f24:	f7fe f99e 	bl	8002264 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e13a      	b.n	80041ac <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003f36:	4b63      	ldr	r3, [pc, #396]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d0f0      	beq.n	8003f24 <HAL_RCC_OscConfig+0x5dc>
 8003f42:	e018      	b.n	8003f76 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f44:	4b5f      	ldr	r3, [pc, #380]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a5e      	ldr	r2, [pc, #376]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 8003f4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f50:	f7fe f988 	bl	8002264 <HAL_GetTick>
 8003f54:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003f58:	f7fe f984 	bl	8002264 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e120      	b.n	80041ac <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003f6a:	4b56      	ldr	r3, [pc, #344]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1f0      	bne.n	8003f58 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 8115 	beq.w	80041aa <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	2b18      	cmp	r3, #24
 8003f84:	f000 80af 	beq.w	80040e6 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	f040 8086 	bne.w	800409e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003f92:	4b4c      	ldr	r3, [pc, #304]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a4b      	ldr	r2, [pc, #300]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 8003f98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9e:	f7fe f961 	bl	8002264 <HAL_GetTick>
 8003fa2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003fa6:	f7fe f95d 	bl	8002264 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e0f9      	b.n	80041ac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003fb8:	4b42      	ldr	r3, [pc, #264]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1f0      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003fc4:	4b3f      	ldr	r3, [pc, #252]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 8003fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003fcc:	f023 0303 	bic.w	r3, r3, #3
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003fd8:	0212      	lsls	r2, r2, #8
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	4939      	ldr	r1, [pc, #228]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	628b      	str	r3, [r1, #40]	@ 0x28
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	025b      	lsls	r3, r3, #9
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	041b      	lsls	r3, r3, #16
 8004000:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004004:	431a      	orrs	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400a:	3b01      	subs	r3, #1
 800400c:	061b      	lsls	r3, r3, #24
 800400e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004012:	492c      	ldr	r1, [pc, #176]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 8004014:	4313      	orrs	r3, r2
 8004016:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004018:	4b2a      	ldr	r3, [pc, #168]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 800401a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401c:	4a29      	ldr	r2, [pc, #164]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 800401e:	f023 0310 	bic.w	r3, r3, #16
 8004022:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004028:	4a26      	ldr	r2, [pc, #152]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800402e:	4b25      	ldr	r3, [pc, #148]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 8004030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004032:	4a24      	ldr	r2, [pc, #144]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 8004034:	f043 0310 	orr.w	r3, r3, #16
 8004038:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800403a:	4b22      	ldr	r3, [pc, #136]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 800403c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800403e:	f023 020c 	bic.w	r2, r3, #12
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004046:	491f      	ldr	r1, [pc, #124]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 8004048:	4313      	orrs	r3, r2
 800404a:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 800404c:	4b1d      	ldr	r3, [pc, #116]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 800404e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004050:	f023 0220 	bic.w	r2, r3, #32
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004058:	491a      	ldr	r1, [pc, #104]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 800405a:	4313      	orrs	r3, r2
 800405c:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800405e:	4b19      	ldr	r3, [pc, #100]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 8004060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004062:	4a18      	ldr	r2, [pc, #96]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 8004064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004068:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800406a:	4b16      	ldr	r3, [pc, #88]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a15      	ldr	r2, [pc, #84]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 8004070:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004074:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004076:	f7fe f8f5 	bl	8002264 <HAL_GetTick>
 800407a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800407c:	e008      	b.n	8004090 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800407e:	f7fe f8f1 	bl	8002264 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e08d      	b.n	80041ac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004090:	4b0c      	ldr	r3, [pc, #48]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0f0      	beq.n	800407e <HAL_RCC_OscConfig+0x736>
 800409c:	e085      	b.n	80041aa <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800409e:	4b09      	ldr	r3, [pc, #36]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a08      	ldr	r2, [pc, #32]	@ (80040c4 <HAL_RCC_OscConfig+0x77c>)
 80040a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040aa:	f7fe f8db 	bl	8002264 <HAL_GetTick>
 80040ae:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80040b0:	e00a      	b.n	80040c8 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80040b2:	f7fe f8d7 	bl	8002264 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d903      	bls.n	80040c8 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e073      	b.n	80041ac <HAL_RCC_OscConfig+0x864>
 80040c4:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80040c8:	4b3a      	ldr	r3, [pc, #232]	@ (80041b4 <HAL_RCC_OscConfig+0x86c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1ee      	bne.n	80040b2 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80040d4:	4b37      	ldr	r3, [pc, #220]	@ (80041b4 <HAL_RCC_OscConfig+0x86c>)
 80040d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d8:	4a36      	ldr	r2, [pc, #216]	@ (80041b4 <HAL_RCC_OscConfig+0x86c>)
 80040da:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80040de:	f023 0303 	bic.w	r3, r3, #3
 80040e2:	6293      	str	r3, [r2, #40]	@ 0x28
 80040e4:	e061      	b.n	80041aa <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80040e6:	4b33      	ldr	r3, [pc, #204]	@ (80041b4 <HAL_RCC_OscConfig+0x86c>)
 80040e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ea:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80040ec:	4b31      	ldr	r3, [pc, #196]	@ (80041b4 <HAL_RCC_OscConfig+0x86c>)
 80040ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040f0:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d031      	beq.n	800415e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	f003 0203 	and.w	r2, r3, #3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004104:	429a      	cmp	r2, r3
 8004106:	d12a      	bne.n	800415e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	0a1b      	lsrs	r3, r3, #8
 800410c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004114:	429a      	cmp	r2, r3
 8004116:	d122      	bne.n	800415e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004122:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004124:	429a      	cmp	r2, r3
 8004126:	d11a      	bne.n	800415e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	0a5b      	lsrs	r3, r3, #9
 800412c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004134:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004136:	429a      	cmp	r2, r3
 8004138:	d111      	bne.n	800415e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	0c1b      	lsrs	r3, r3, #16
 800413e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004146:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004148:	429a      	cmp	r2, r3
 800414a:	d108      	bne.n	800415e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	0e1b      	lsrs	r3, r3, #24
 8004150:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004158:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800415a:	429a      	cmp	r2, r3
 800415c:	d001      	beq.n	8004162 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e024      	b.n	80041ac <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004162:	4b14      	ldr	r3, [pc, #80]	@ (80041b4 <HAL_RCC_OscConfig+0x86c>)
 8004164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004166:	08db      	lsrs	r3, r3, #3
 8004168:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004170:	429a      	cmp	r2, r3
 8004172:	d01a      	beq.n	80041aa <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004174:	4b0f      	ldr	r3, [pc, #60]	@ (80041b4 <HAL_RCC_OscConfig+0x86c>)
 8004176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004178:	4a0e      	ldr	r2, [pc, #56]	@ (80041b4 <HAL_RCC_OscConfig+0x86c>)
 800417a:	f023 0310 	bic.w	r3, r3, #16
 800417e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004180:	f7fe f870 	bl	8002264 <HAL_GetTick>
 8004184:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8004186:	bf00      	nop
 8004188:	f7fe f86c 	bl	8002264 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	4293      	cmp	r3, r2
 8004192:	d0f9      	beq.n	8004188 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004198:	4a06      	ldr	r2, [pc, #24]	@ (80041b4 <HAL_RCC_OscConfig+0x86c>)
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800419e:	4b05      	ldr	r3, [pc, #20]	@ (80041b4 <HAL_RCC_OscConfig+0x86c>)
 80041a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a2:	4a04      	ldr	r2, [pc, #16]	@ (80041b4 <HAL_RCC_OscConfig+0x86c>)
 80041a4:	f043 0310 	orr.w	r3, r3, #16
 80041a8:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3720      	adds	r7, #32
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	44020c00 	.word	0x44020c00

080041b8 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e19e      	b.n	800450a <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041cc:	4b83      	ldr	r3, [pc, #524]	@ (80043dc <HAL_RCC_ClockConfig+0x224>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 030f 	and.w	r3, r3, #15
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d910      	bls.n	80041fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041da:	4b80      	ldr	r3, [pc, #512]	@ (80043dc <HAL_RCC_ClockConfig+0x224>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f023 020f 	bic.w	r2, r3, #15
 80041e2:	497e      	ldr	r1, [pc, #504]	@ (80043dc <HAL_RCC_ClockConfig+0x224>)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ea:	4b7c      	ldr	r3, [pc, #496]	@ (80043dc <HAL_RCC_ClockConfig+0x224>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d001      	beq.n	80041fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e186      	b.n	800450a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0310 	and.w	r3, r3, #16
 8004204:	2b00      	cmp	r3, #0
 8004206:	d012      	beq.n	800422e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	695a      	ldr	r2, [r3, #20]
 800420c:	4b74      	ldr	r3, [pc, #464]	@ (80043e0 <HAL_RCC_ClockConfig+0x228>)
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	0a1b      	lsrs	r3, r3, #8
 8004212:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004216:	429a      	cmp	r2, r3
 8004218:	d909      	bls.n	800422e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800421a:	4b71      	ldr	r3, [pc, #452]	@ (80043e0 <HAL_RCC_ClockConfig+0x228>)
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	021b      	lsls	r3, r3, #8
 8004228:	496d      	ldr	r1, [pc, #436]	@ (80043e0 <HAL_RCC_ClockConfig+0x228>)
 800422a:	4313      	orrs	r3, r2
 800422c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b00      	cmp	r3, #0
 8004238:	d012      	beq.n	8004260 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691a      	ldr	r2, [r3, #16]
 800423e:	4b68      	ldr	r3, [pc, #416]	@ (80043e0 <HAL_RCC_ClockConfig+0x228>)
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	091b      	lsrs	r3, r3, #4
 8004244:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004248:	429a      	cmp	r2, r3
 800424a:	d909      	bls.n	8004260 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800424c:	4b64      	ldr	r3, [pc, #400]	@ (80043e0 <HAL_RCC_ClockConfig+0x228>)
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	011b      	lsls	r3, r3, #4
 800425a:	4961      	ldr	r1, [pc, #388]	@ (80043e0 <HAL_RCC_ClockConfig+0x228>)
 800425c:	4313      	orrs	r3, r2
 800425e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	d010      	beq.n	800428e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68da      	ldr	r2, [r3, #12]
 8004270:	4b5b      	ldr	r3, [pc, #364]	@ (80043e0 <HAL_RCC_ClockConfig+0x228>)
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004278:	429a      	cmp	r2, r3
 800427a:	d908      	bls.n	800428e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800427c:	4b58      	ldr	r3, [pc, #352]	@ (80043e0 <HAL_RCC_ClockConfig+0x228>)
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	4955      	ldr	r1, [pc, #340]	@ (80043e0 <HAL_RCC_ClockConfig+0x228>)
 800428a:	4313      	orrs	r3, r2
 800428c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d010      	beq.n	80042bc <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689a      	ldr	r2, [r3, #8]
 800429e:	4b50      	ldr	r3, [pc, #320]	@ (80043e0 <HAL_RCC_ClockConfig+0x228>)
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	f003 030f 	and.w	r3, r3, #15
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d908      	bls.n	80042bc <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80042aa:	4b4d      	ldr	r3, [pc, #308]	@ (80043e0 <HAL_RCC_ClockConfig+0x228>)
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	f023 020f 	bic.w	r2, r3, #15
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	494a      	ldr	r1, [pc, #296]	@ (80043e0 <HAL_RCC_ClockConfig+0x228>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 8093 	beq.w	80043f0 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	d107      	bne.n	80042e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80042d2:	4b43      	ldr	r3, [pc, #268]	@ (80043e0 <HAL_RCC_ClockConfig+0x228>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d121      	bne.n	8004322 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e113      	b.n	800450a <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d107      	bne.n	80042fa <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042ea:	4b3d      	ldr	r3, [pc, #244]	@ (80043e0 <HAL_RCC_ClockConfig+0x228>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d115      	bne.n	8004322 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e107      	b.n	800450a <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d107      	bne.n	8004312 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004302:	4b37      	ldr	r3, [pc, #220]	@ (80043e0 <HAL_RCC_ClockConfig+0x228>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800430a:	2b00      	cmp	r3, #0
 800430c:	d109      	bne.n	8004322 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e0fb      	b.n	800450a <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004312:	4b33      	ldr	r3, [pc, #204]	@ (80043e0 <HAL_RCC_ClockConfig+0x228>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e0f3      	b.n	800450a <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8004322:	4b2f      	ldr	r3, [pc, #188]	@ (80043e0 <HAL_RCC_ClockConfig+0x228>)
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	f023 0203 	bic.w	r2, r3, #3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	492c      	ldr	r1, [pc, #176]	@ (80043e0 <HAL_RCC_ClockConfig+0x228>)
 8004330:	4313      	orrs	r3, r2
 8004332:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004334:	f7fd ff96 	bl	8002264 <HAL_GetTick>
 8004338:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	2b03      	cmp	r3, #3
 8004340:	d112      	bne.n	8004368 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004342:	e00a      	b.n	800435a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004344:	f7fd ff8e 	bl	8002264 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004352:	4293      	cmp	r3, r2
 8004354:	d901      	bls.n	800435a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e0d7      	b.n	800450a <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800435a:	4b21      	ldr	r3, [pc, #132]	@ (80043e0 <HAL_RCC_ClockConfig+0x228>)
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	f003 0318 	and.w	r3, r3, #24
 8004362:	2b18      	cmp	r3, #24
 8004364:	d1ee      	bne.n	8004344 <HAL_RCC_ClockConfig+0x18c>
 8004366:	e043      	b.n	80043f0 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	2b02      	cmp	r3, #2
 800436e:	d112      	bne.n	8004396 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004370:	e00a      	b.n	8004388 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004372:	f7fd ff77 	bl	8002264 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004380:	4293      	cmp	r3, r2
 8004382:	d901      	bls.n	8004388 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e0c0      	b.n	800450a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004388:	4b15      	ldr	r3, [pc, #84]	@ (80043e0 <HAL_RCC_ClockConfig+0x228>)
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	f003 0318 	and.w	r3, r3, #24
 8004390:	2b10      	cmp	r3, #16
 8004392:	d1ee      	bne.n	8004372 <HAL_RCC_ClockConfig+0x1ba>
 8004394:	e02c      	b.n	80043f0 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d122      	bne.n	80043e4 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800439e:	e00a      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80043a0:	f7fd ff60 	bl	8002264 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e0a9      	b.n	800450a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80043b6:	4b0a      	ldr	r3, [pc, #40]	@ (80043e0 <HAL_RCC_ClockConfig+0x228>)
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	f003 0318 	and.w	r3, r3, #24
 80043be:	2b08      	cmp	r3, #8
 80043c0:	d1ee      	bne.n	80043a0 <HAL_RCC_ClockConfig+0x1e8>
 80043c2:	e015      	b.n	80043f0 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80043c4:	f7fd ff4e 	bl	8002264 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d906      	bls.n	80043e4 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e097      	b.n	800450a <HAL_RCC_ClockConfig+0x352>
 80043da:	bf00      	nop
 80043dc:	40022000 	.word	0x40022000
 80043e0:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80043e4:	4b4b      	ldr	r3, [pc, #300]	@ (8004514 <HAL_RCC_ClockConfig+0x35c>)
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	f003 0318 	and.w	r3, r3, #24
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1e9      	bne.n	80043c4 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d010      	beq.n	800441e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	4b44      	ldr	r3, [pc, #272]	@ (8004514 <HAL_RCC_ClockConfig+0x35c>)
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	f003 030f 	and.w	r3, r3, #15
 8004408:	429a      	cmp	r2, r3
 800440a:	d208      	bcs.n	800441e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800440c:	4b41      	ldr	r3, [pc, #260]	@ (8004514 <HAL_RCC_ClockConfig+0x35c>)
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	f023 020f 	bic.w	r2, r3, #15
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	493e      	ldr	r1, [pc, #248]	@ (8004514 <HAL_RCC_ClockConfig+0x35c>)
 800441a:	4313      	orrs	r3, r2
 800441c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800441e:	4b3e      	ldr	r3, [pc, #248]	@ (8004518 <HAL_RCC_ClockConfig+0x360>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	429a      	cmp	r2, r3
 800442a:	d210      	bcs.n	800444e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800442c:	4b3a      	ldr	r3, [pc, #232]	@ (8004518 <HAL_RCC_ClockConfig+0x360>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f023 020f 	bic.w	r2, r3, #15
 8004434:	4938      	ldr	r1, [pc, #224]	@ (8004518 <HAL_RCC_ClockConfig+0x360>)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	4313      	orrs	r3, r2
 800443a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800443c:	4b36      	ldr	r3, [pc, #216]	@ (8004518 <HAL_RCC_ClockConfig+0x360>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 030f 	and.w	r3, r3, #15
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	429a      	cmp	r2, r3
 8004448:	d001      	beq.n	800444e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e05d      	b.n	800450a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0304 	and.w	r3, r3, #4
 8004456:	2b00      	cmp	r3, #0
 8004458:	d010      	beq.n	800447c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	4b2d      	ldr	r3, [pc, #180]	@ (8004514 <HAL_RCC_ClockConfig+0x35c>)
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004466:	429a      	cmp	r2, r3
 8004468:	d208      	bcs.n	800447c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800446a:	4b2a      	ldr	r3, [pc, #168]	@ (8004514 <HAL_RCC_ClockConfig+0x35c>)
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	4927      	ldr	r1, [pc, #156]	@ (8004514 <HAL_RCC_ClockConfig+0x35c>)
 8004478:	4313      	orrs	r3, r2
 800447a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0308 	and.w	r3, r3, #8
 8004484:	2b00      	cmp	r3, #0
 8004486:	d012      	beq.n	80044ae <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691a      	ldr	r2, [r3, #16]
 800448c:	4b21      	ldr	r3, [pc, #132]	@ (8004514 <HAL_RCC_ClockConfig+0x35c>)
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	091b      	lsrs	r3, r3, #4
 8004492:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004496:	429a      	cmp	r2, r3
 8004498:	d209      	bcs.n	80044ae <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800449a:	4b1e      	ldr	r3, [pc, #120]	@ (8004514 <HAL_RCC_ClockConfig+0x35c>)
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	011b      	lsls	r3, r3, #4
 80044a8:	491a      	ldr	r1, [pc, #104]	@ (8004514 <HAL_RCC_ClockConfig+0x35c>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0310 	and.w	r3, r3, #16
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d012      	beq.n	80044e0 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	695a      	ldr	r2, [r3, #20]
 80044be:	4b15      	ldr	r3, [pc, #84]	@ (8004514 <HAL_RCC_ClockConfig+0x35c>)
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	0a1b      	lsrs	r3, r3, #8
 80044c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d209      	bcs.n	80044e0 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80044cc:	4b11      	ldr	r3, [pc, #68]	@ (8004514 <HAL_RCC_ClockConfig+0x35c>)
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	021b      	lsls	r3, r3, #8
 80044da:	490e      	ldr	r1, [pc, #56]	@ (8004514 <HAL_RCC_ClockConfig+0x35c>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80044e0:	f000 f822 	bl	8004528 <HAL_RCC_GetSysClockFreq>
 80044e4:	4602      	mov	r2, r0
 80044e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004514 <HAL_RCC_ClockConfig+0x35c>)
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	f003 030f 	and.w	r3, r3, #15
 80044ee:	490b      	ldr	r1, [pc, #44]	@ (800451c <HAL_RCC_ClockConfig+0x364>)
 80044f0:	5ccb      	ldrb	r3, [r1, r3]
 80044f2:	fa22 f303 	lsr.w	r3, r2, r3
 80044f6:	4a0a      	ldr	r2, [pc, #40]	@ (8004520 <HAL_RCC_ClockConfig+0x368>)
 80044f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80044fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004524 <HAL_RCC_ClockConfig+0x36c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fd fe26 	bl	8002150 <HAL_InitTick>
 8004504:	4603      	mov	r3, r0
 8004506:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004508:	7afb      	ldrb	r3, [r7, #11]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	44020c00 	.word	0x44020c00
 8004518:	40022000 	.word	0x40022000
 800451c:	0800bfe0 	.word	0x0800bfe0
 8004520:	20000008 	.word	0x20000008
 8004524:	2000000c 	.word	0x2000000c

08004528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004528:	b480      	push	{r7}
 800452a:	b089      	sub	sp, #36	@ 0x24
 800452c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800452e:	4b8c      	ldr	r3, [pc, #560]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x238>)
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	f003 0318 	and.w	r3, r3, #24
 8004536:	2b08      	cmp	r3, #8
 8004538:	d102      	bne.n	8004540 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800453a:	4b8a      	ldr	r3, [pc, #552]	@ (8004764 <HAL_RCC_GetSysClockFreq+0x23c>)
 800453c:	61fb      	str	r3, [r7, #28]
 800453e:	e107      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004540:	4b87      	ldr	r3, [pc, #540]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x238>)
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	f003 0318 	and.w	r3, r3, #24
 8004548:	2b00      	cmp	r3, #0
 800454a:	d112      	bne.n	8004572 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800454c:	4b84      	ldr	r3, [pc, #528]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x238>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0320 	and.w	r3, r3, #32
 8004554:	2b00      	cmp	r3, #0
 8004556:	d009      	beq.n	800456c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004558:	4b81      	ldr	r3, [pc, #516]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x238>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	08db      	lsrs	r3, r3, #3
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	4a81      	ldr	r2, [pc, #516]	@ (8004768 <HAL_RCC_GetSysClockFreq+0x240>)
 8004564:	fa22 f303 	lsr.w	r3, r2, r3
 8004568:	61fb      	str	r3, [r7, #28]
 800456a:	e0f1      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800456c:	4b7e      	ldr	r3, [pc, #504]	@ (8004768 <HAL_RCC_GetSysClockFreq+0x240>)
 800456e:	61fb      	str	r3, [r7, #28]
 8004570:	e0ee      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004572:	4b7b      	ldr	r3, [pc, #492]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x238>)
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	f003 0318 	and.w	r3, r3, #24
 800457a:	2b10      	cmp	r3, #16
 800457c:	d102      	bne.n	8004584 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800457e:	4b7b      	ldr	r3, [pc, #492]	@ (800476c <HAL_RCC_GetSysClockFreq+0x244>)
 8004580:	61fb      	str	r3, [r7, #28]
 8004582:	e0e5      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004584:	4b76      	ldr	r3, [pc, #472]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x238>)
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	f003 0318 	and.w	r3, r3, #24
 800458c:	2b18      	cmp	r3, #24
 800458e:	f040 80dd 	bne.w	800474c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004592:	4b73      	ldr	r3, [pc, #460]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x238>)
 8004594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800459c:	4b70      	ldr	r3, [pc, #448]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x238>)
 800459e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a0:	0a1b      	lsrs	r3, r3, #8
 80045a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045a6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80045a8:	4b6d      	ldr	r3, [pc, #436]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x238>)
 80045aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ac:	091b      	lsrs	r3, r3, #4
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80045b4:	4b6a      	ldr	r3, [pc, #424]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x238>)
 80045b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80045b8:	08db      	lsrs	r3, r3, #3
 80045ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	fb02 f303 	mul.w	r3, r2, r3
 80045c4:	ee07 3a90 	vmov	s15, r3
 80045c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045cc:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 80b7 	beq.w	8004746 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d003      	beq.n	80045e6 <HAL_RCC_GetSysClockFreq+0xbe>
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2b03      	cmp	r3, #3
 80045e2:	d056      	beq.n	8004692 <HAL_RCC_GetSysClockFreq+0x16a>
 80045e4:	e077      	b.n	80046d6 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80045e6:	4b5e      	ldr	r3, [pc, #376]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x238>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0320 	and.w	r3, r3, #32
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d02d      	beq.n	800464e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80045f2:	4b5b      	ldr	r3, [pc, #364]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x238>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	08db      	lsrs	r3, r3, #3
 80045f8:	f003 0303 	and.w	r3, r3, #3
 80045fc:	4a5a      	ldr	r2, [pc, #360]	@ (8004768 <HAL_RCC_GetSysClockFreq+0x240>)
 80045fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004602:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	ee07 3a90 	vmov	s15, r3
 800460a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	ee07 3a90 	vmov	s15, r3
 8004614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004618:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800461c:	4b50      	ldr	r3, [pc, #320]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x238>)
 800461e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004624:	ee07 3a90 	vmov	s15, r3
 8004628:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800462c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004630:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8004770 <HAL_RCC_GetSysClockFreq+0x248>
 8004634:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004638:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800463c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004640:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004648:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 800464c:	e065      	b.n	800471a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	ee07 3a90 	vmov	s15, r3
 8004654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004658:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004774 <HAL_RCC_GetSysClockFreq+0x24c>
 800465c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004660:	4b3f      	ldr	r3, [pc, #252]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x238>)
 8004662:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004668:	ee07 3a90 	vmov	s15, r3
 800466c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004670:	ed97 6a02 	vldr	s12, [r7, #8]
 8004674:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004770 <HAL_RCC_GetSysClockFreq+0x248>
 8004678:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800467c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004680:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004684:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800468c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004690:	e043      	b.n	800471a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	ee07 3a90 	vmov	s15, r3
 8004698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800469c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004778 <HAL_RCC_GetSysClockFreq+0x250>
 80046a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046a4:	4b2e      	ldr	r3, [pc, #184]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x238>)
 80046a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ac:	ee07 3a90 	vmov	s15, r3
 80046b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80046b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80046b8:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8004770 <HAL_RCC_GetSysClockFreq+0x248>
 80046bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80046c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80046c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80046cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d0:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80046d4:	e021      	b.n	800471a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	ee07 3a90 	vmov	s15, r3
 80046dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e0:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800477c <HAL_RCC_GetSysClockFreq+0x254>
 80046e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x238>)
 80046ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f0:	ee07 3a90 	vmov	s15, r3
 80046f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80046f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80046fc:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8004770 <HAL_RCC_GetSysClockFreq+0x248>
 8004700:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004704:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004708:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800470c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004714:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004718:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800471a:	4b11      	ldr	r3, [pc, #68]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x238>)
 800471c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800471e:	0a5b      	lsrs	r3, r3, #9
 8004720:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004724:	3301      	adds	r3, #1
 8004726:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	ee07 3a90 	vmov	s15, r3
 800472e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004732:	edd7 6a06 	vldr	s13, [r7, #24]
 8004736:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800473a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800473e:	ee17 3a90 	vmov	r3, s15
 8004742:	61fb      	str	r3, [r7, #28]
 8004744:	e004      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8004746:	2300      	movs	r3, #0
 8004748:	61fb      	str	r3, [r7, #28]
 800474a:	e001      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800474c:	4b06      	ldr	r3, [pc, #24]	@ (8004768 <HAL_RCC_GetSysClockFreq+0x240>)
 800474e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004750:	69fb      	ldr	r3, [r7, #28]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3724      	adds	r7, #36	@ 0x24
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	44020c00 	.word	0x44020c00
 8004764:	003d0900 	.word	0x003d0900
 8004768:	03d09000 	.word	0x03d09000
 800476c:	007a1200 	.word	0x007a1200
 8004770:	46000000 	.word	0x46000000
 8004774:	4c742400 	.word	0x4c742400
 8004778:	4af42400 	.word	0x4af42400
 800477c:	4a742400 	.word	0x4a742400

08004780 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004784:	f7ff fed0 	bl	8004528 <HAL_RCC_GetSysClockFreq>
 8004788:	4602      	mov	r2, r0
 800478a:	4b08      	ldr	r3, [pc, #32]	@ (80047ac <HAL_RCC_GetHCLKFreq+0x2c>)
 800478c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800478e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004792:	4907      	ldr	r1, [pc, #28]	@ (80047b0 <HAL_RCC_GetHCLKFreq+0x30>)
 8004794:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004796:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800479a:	fa22 f303 	lsr.w	r3, r2, r3
 800479e:	4a05      	ldr	r2, [pc, #20]	@ (80047b4 <HAL_RCC_GetHCLKFreq+0x34>)
 80047a0:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80047a2:	4b04      	ldr	r3, [pc, #16]	@ (80047b4 <HAL_RCC_GetHCLKFreq+0x34>)
 80047a4:	681b      	ldr	r3, [r3, #0]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	44020c00 	.word	0x44020c00
 80047b0:	0800bfe0 	.word	0x0800bfe0
 80047b4:	20000008 	.word	0x20000008

080047b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80047bc:	f7ff ffe0 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 80047c0:	4602      	mov	r2, r0
 80047c2:	4b06      	ldr	r3, [pc, #24]	@ (80047dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	091b      	lsrs	r3, r3, #4
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	4904      	ldr	r1, [pc, #16]	@ (80047e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047ce:	5ccb      	ldrb	r3, [r1, r3]
 80047d0:	f003 031f 	and.w	r3, r3, #31
 80047d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047d8:	4618      	mov	r0, r3
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	44020c00 	.word	0x44020c00
 80047e0:	0800bff0 	.word	0x0800bff0

080047e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80047e8:	f7ff ffca 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 80047ec:	4602      	mov	r2, r0
 80047ee:	4b06      	ldr	r3, [pc, #24]	@ (8004808 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	0a1b      	lsrs	r3, r3, #8
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	4904      	ldr	r1, [pc, #16]	@ (800480c <HAL_RCC_GetPCLK2Freq+0x28>)
 80047fa:	5ccb      	ldrb	r3, [r1, r3]
 80047fc:	f003 031f 	and.w	r3, r3, #31
 8004800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004804:	4618      	mov	r0, r3
 8004806:	bd80      	pop	{r7, pc}
 8004808:	44020c00 	.word	0x44020c00
 800480c:	0800bff0 	.word	0x0800bff0

08004810 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8004814:	f7ff ffb4 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 8004818:	4602      	mov	r2, r0
 800481a:	4b06      	ldr	r3, [pc, #24]	@ (8004834 <HAL_RCC_GetPCLK3Freq+0x24>)
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	0b1b      	lsrs	r3, r3, #12
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	4904      	ldr	r1, [pc, #16]	@ (8004838 <HAL_RCC_GetPCLK3Freq+0x28>)
 8004826:	5ccb      	ldrb	r3, [r1, r3]
 8004828:	f003 031f 	and.w	r3, r3, #31
 800482c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004830:	4618      	mov	r0, r3
 8004832:	bd80      	pop	{r7, pc}
 8004834:	44020c00 	.word	0x44020c00
 8004838:	0800bff0 	.word	0x0800bff0

0800483c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800483c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004840:	b0ba      	sub	sp, #232	@ 0xe8
 8004842:	af00      	add	r7, sp, #0
 8004844:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004848:	2300      	movs	r3, #0
 800484a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800484e:	2300      	movs	r3, #0
 8004850:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004854:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485c:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8004860:	2500      	movs	r5, #0
 8004862:	ea54 0305 	orrs.w	r3, r4, r5
 8004866:	d00b      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8004868:	4bcd      	ldr	r3, [pc, #820]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800486a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800486e:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8004872:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004878:	4ac9      	ldr	r2, [pc, #804]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800487a:	430b      	orrs	r3, r1
 800487c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004880:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004888:	f002 0801 	and.w	r8, r2, #1
 800488c:	f04f 0900 	mov.w	r9, #0
 8004890:	ea58 0309 	orrs.w	r3, r8, r9
 8004894:	d042      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8004896:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800489a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800489c:	2b05      	cmp	r3, #5
 800489e:	d823      	bhi.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80048a0:	a201      	add	r2, pc, #4	@ (adr r2, 80048a8 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80048a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a6:	bf00      	nop
 80048a8:	080048f1 	.word	0x080048f1
 80048ac:	080048c1 	.word	0x080048c1
 80048b0:	080048d5 	.word	0x080048d5
 80048b4:	080048f1 	.word	0x080048f1
 80048b8:	080048f1 	.word	0x080048f1
 80048bc:	080048f1 	.word	0x080048f1
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80048c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048c4:	3308      	adds	r3, #8
 80048c6:	4618      	mov	r0, r3
 80048c8:	f003 f90c 	bl	8007ae4 <RCCEx_PLL2_Config>
 80048cc:	4603      	mov	r3, r0
 80048ce:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 80048d2:	e00e      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80048d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048d8:	3330      	adds	r3, #48	@ 0x30
 80048da:	4618      	mov	r0, r3
 80048dc:	f003 f99a 	bl	8007c14 <RCCEx_PLL3_Config>
 80048e0:	4603      	mov	r3, r0
 80048e2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 80048e6:	e004      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80048ee:	e000      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80048f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048f2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10c      	bne.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80048fa:	4ba9      	ldr	r3, [pc, #676]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80048fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004900:	f023 0107 	bic.w	r1, r3, #7
 8004904:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800490a:	4aa5      	ldr	r2, [pc, #660]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800490c:	430b      	orrs	r3, r1
 800490e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004912:	e003      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004914:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004918:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800491c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004924:	f002 0a02 	and.w	sl, r2, #2
 8004928:	f04f 0b00 	mov.w	fp, #0
 800492c:	ea5a 030b 	orrs.w	r3, sl, fp
 8004930:	f000 8088 	beq.w	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8004934:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800493a:	2b28      	cmp	r3, #40	@ 0x28
 800493c:	d868      	bhi.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800493e:	a201      	add	r2, pc, #4	@ (adr r2, 8004944 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004944:	08004a19 	.word	0x08004a19
 8004948:	08004a11 	.word	0x08004a11
 800494c:	08004a11 	.word	0x08004a11
 8004950:	08004a11 	.word	0x08004a11
 8004954:	08004a11 	.word	0x08004a11
 8004958:	08004a11 	.word	0x08004a11
 800495c:	08004a11 	.word	0x08004a11
 8004960:	08004a11 	.word	0x08004a11
 8004964:	080049e9 	.word	0x080049e9
 8004968:	08004a11 	.word	0x08004a11
 800496c:	08004a11 	.word	0x08004a11
 8004970:	08004a11 	.word	0x08004a11
 8004974:	08004a11 	.word	0x08004a11
 8004978:	08004a11 	.word	0x08004a11
 800497c:	08004a11 	.word	0x08004a11
 8004980:	08004a11 	.word	0x08004a11
 8004984:	080049fd 	.word	0x080049fd
 8004988:	08004a11 	.word	0x08004a11
 800498c:	08004a11 	.word	0x08004a11
 8004990:	08004a11 	.word	0x08004a11
 8004994:	08004a11 	.word	0x08004a11
 8004998:	08004a11 	.word	0x08004a11
 800499c:	08004a11 	.word	0x08004a11
 80049a0:	08004a11 	.word	0x08004a11
 80049a4:	08004a19 	.word	0x08004a19
 80049a8:	08004a11 	.word	0x08004a11
 80049ac:	08004a11 	.word	0x08004a11
 80049b0:	08004a11 	.word	0x08004a11
 80049b4:	08004a11 	.word	0x08004a11
 80049b8:	08004a11 	.word	0x08004a11
 80049bc:	08004a11 	.word	0x08004a11
 80049c0:	08004a11 	.word	0x08004a11
 80049c4:	08004a19 	.word	0x08004a19
 80049c8:	08004a11 	.word	0x08004a11
 80049cc:	08004a11 	.word	0x08004a11
 80049d0:	08004a11 	.word	0x08004a11
 80049d4:	08004a11 	.word	0x08004a11
 80049d8:	08004a11 	.word	0x08004a11
 80049dc:	08004a11 	.word	0x08004a11
 80049e0:	08004a11 	.word	0x08004a11
 80049e4:	08004a19 	.word	0x08004a19
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049ec:	3308      	adds	r3, #8
 80049ee:	4618      	mov	r0, r3
 80049f0:	f003 f878 	bl	8007ae4 <RCCEx_PLL2_Config>
 80049f4:	4603      	mov	r3, r0
 80049f6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 80049fa:	e00e      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80049fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a00:	3330      	adds	r3, #48	@ 0x30
 8004a02:	4618      	mov	r0, r3
 8004a04:	f003 f906 	bl	8007c14 <RCCEx_PLL3_Config>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8004a0e:	e004      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004a16:	e000      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8004a18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a1a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10c      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004a22:	4b5f      	ldr	r3, [pc, #380]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004a24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004a28:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004a2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a32:	4a5b      	ldr	r2, [pc, #364]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004a34:	430b      	orrs	r3, r1
 8004a36:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004a3a:	e003      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a3c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004a40:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4c:	f002 0304 	and.w	r3, r2, #4
 8004a50:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a54:	2300      	movs	r3, #0
 8004a56:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a5a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004a5e:	460b      	mov	r3, r1
 8004a60:	4313      	orrs	r3, r2
 8004a62:	d04e      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8004a64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a6a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004a6e:	d02c      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8004a70:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004a74:	d825      	bhi.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004a76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a7a:	d028      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004a7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a80:	d81f      	bhi.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004a82:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a84:	d025      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004a86:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a88:	d81b      	bhi.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004a8a:	2b80      	cmp	r3, #128	@ 0x80
 8004a8c:	d00f      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x272>
 8004a8e:	2b80      	cmp	r3, #128	@ 0x80
 8004a90:	d817      	bhi.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d01f      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8004a96:	2b40      	cmp	r3, #64	@ 0x40
 8004a98:	d113      	bne.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a9e:	3308      	adds	r3, #8
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f003 f81f 	bl	8007ae4 <RCCEx_PLL2_Config>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8004aac:	e014      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004aae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ab2:	3330      	adds	r3, #48	@ 0x30
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f003 f8ad 	bl	8007c14 <RCCEx_PLL3_Config>
 8004aba:	4603      	mov	r3, r0
 8004abc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8004ac0:	e00a      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004ac8:	e006      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004aca:	bf00      	nop
 8004acc:	e004      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004ace:	bf00      	nop
 8004ad0:	e002      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004ad2:	bf00      	nop
 8004ad4:	e000      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004ad6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ad8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10c      	bne.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004ae0:	4b2f      	ldr	r3, [pc, #188]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004ae2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004ae6:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004aea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004aee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004af0:	4a2b      	ldr	r2, [pc, #172]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004af2:	430b      	orrs	r3, r1
 8004af4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004af8:	e003      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004afa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004afe:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0a:	f002 0308 	and.w	r3, r2, #8
 8004b0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b12:	2300      	movs	r3, #0
 8004b14:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004b18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	d056      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8004b22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b28:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004b2c:	d031      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004b2e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004b32:	d82a      	bhi.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004b34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b38:	d02d      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004b3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b3e:	d824      	bhi.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004b40:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004b44:	d029      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004b46:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004b4a:	d81e      	bhi.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004b4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b50:	d011      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004b52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b56:	d818      	bhi.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d023      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004b5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b60:	d113      	bne.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b66:	3308      	adds	r3, #8
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f002 ffbb 	bl	8007ae4 <RCCEx_PLL2_Config>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8004b74:	e017      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b7a:	3330      	adds	r3, #48	@ 0x30
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f003 f849 	bl	8007c14 <RCCEx_PLL3_Config>
 8004b82:	4603      	mov	r3, r0
 8004b84:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8004b88:	e00d      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004b90:	e009      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004b92:	bf00      	nop
 8004b94:	e007      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004b96:	bf00      	nop
 8004b98:	e005      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004b9a:	bf00      	nop
 8004b9c:	e003      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004b9e:	bf00      	nop
 8004ba0:	44020c00 	.word	0x44020c00
        break;
 8004ba4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ba6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10c      	bne.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004bae:	4bb9      	ldr	r3, [pc, #740]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004bb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004bb4:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004bb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bbe:	4ab5      	ldr	r2, [pc, #724]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004bc0:	430b      	orrs	r3, r1
 8004bc2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004bc6:	e003      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bc8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004bcc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004bd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd8:	f002 0310 	and.w	r3, r2, #16
 8004bdc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004be0:	2300      	movs	r3, #0
 8004be2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004be6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004bea:	460b      	mov	r3, r1
 8004bec:	4313      	orrs	r3, r2
 8004bee:	d053      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8004bf0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bf6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004bfa:	d031      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004bfc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004c00:	d82a      	bhi.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004c02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c06:	d02d      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004c08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c0c:	d824      	bhi.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004c0e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c12:	d029      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004c14:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c18:	d81e      	bhi.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004c1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c1e:	d011      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004c20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c24:	d818      	bhi.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d020      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x430>
 8004c2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c2e:	d113      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c34:	3308      	adds	r3, #8
 8004c36:	4618      	mov	r0, r3
 8004c38:	f002 ff54 	bl	8007ae4 <RCCEx_PLL2_Config>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8004c42:	e014      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c48:	3330      	adds	r3, #48	@ 0x30
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f002 ffe2 	bl	8007c14 <RCCEx_PLL3_Config>
 8004c50:	4603      	mov	r3, r0
 8004c52:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8004c56:	e00a      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004c5e:	e006      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004c60:	bf00      	nop
 8004c62:	e004      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004c64:	bf00      	nop
 8004c66:	e002      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004c68:	bf00      	nop
 8004c6a:	e000      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004c6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c6e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10c      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004c76:	4b87      	ldr	r3, [pc, #540]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004c78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004c7c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004c80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c86:	4a83      	ldr	r2, [pc, #524]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004c88:	430b      	orrs	r3, r1
 8004c8a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004c8e:	e003      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c90:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c94:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004c98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca0:	f002 0320 	and.w	r3, r2, #32
 8004ca4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ca8:	2300      	movs	r3, #0
 8004caa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004cae:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	d053      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8004cb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cbe:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004cc2:	d031      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8004cc4:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004cc8:	d82a      	bhi.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004cca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cce:	d02d      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004cd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cd4:	d824      	bhi.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004cd6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004cda:	d029      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004cdc:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004ce0:	d81e      	bhi.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004ce2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ce6:	d011      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cec:	d818      	bhi.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d020      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8004cf2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cf6:	d113      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cf8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cfc:	3308      	adds	r3, #8
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f002 fef0 	bl	8007ae4 <RCCEx_PLL2_Config>
 8004d04:	4603      	mov	r3, r0
 8004d06:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8004d0a:	e014      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d10:	3330      	adds	r3, #48	@ 0x30
 8004d12:	4618      	mov	r0, r3
 8004d14:	f002 ff7e 	bl	8007c14 <RCCEx_PLL3_Config>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8004d1e:	e00a      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004d26:	e006      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004d28:	bf00      	nop
 8004d2a:	e004      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004d2c:	bf00      	nop
 8004d2e:	e002      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004d30:	bf00      	nop
 8004d32:	e000      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004d34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d36:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10c      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8004d3e:	4b55      	ldr	r3, [pc, #340]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004d40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004d44:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8004d48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d4e:	4a51      	ldr	r2, [pc, #324]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004d50:	430b      	orrs	r3, r1
 8004d52:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004d56:	e003      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d58:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d5c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d68:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004d6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d70:	2300      	movs	r3, #0
 8004d72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004d76:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	d053      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004d80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d86:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004d8a:	d031      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8004d8c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004d90:	d82a      	bhi.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004d92:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d96:	d02d      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8004d98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d9c:	d824      	bhi.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004d9e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004da2:	d029      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004da4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004da8:	d81e      	bhi.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004daa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004dae:	d011      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004db0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004db4:	d818      	bhi.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d020      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004dba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004dbe:	d113      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004dc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dc4:	3308      	adds	r3, #8
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f002 fe8c 	bl	8007ae4 <RCCEx_PLL2_Config>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004dd2:	e014      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004dd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dd8:	3330      	adds	r3, #48	@ 0x30
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f002 ff1a 	bl	8007c14 <RCCEx_PLL3_Config>
 8004de0:	4603      	mov	r3, r0
 8004de2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004de6:	e00a      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004dee:	e006      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004df0:	bf00      	nop
 8004df2:	e004      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004df4:	bf00      	nop
 8004df6:	e002      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004df8:	bf00      	nop
 8004dfa:	e000      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004dfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dfe:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10c      	bne.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004e06:	4b23      	ldr	r3, [pc, #140]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e0c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004e10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e16:	4a1f      	ldr	r2, [pc, #124]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004e18:	430b      	orrs	r3, r1
 8004e1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004e1e:	e003      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e20:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e24:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e30:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004e34:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e38:	2300      	movs	r3, #0
 8004e3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004e3e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004e42:	460b      	mov	r3, r1
 8004e44:	4313      	orrs	r3, r2
 8004e46:	d03d      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8004e48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e4e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e52:	d01b      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x650>
 8004e54:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e58:	d814      	bhi.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8004e5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e5e:	d017      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8004e60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e64:	d80e      	bhi.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d016      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8004e6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e6e:	d109      	bne.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e74:	3330      	adds	r3, #48	@ 0x30
 8004e76:	4618      	mov	r0, r3
 8004e78:	f002 fecc 	bl	8007c14 <RCCEx_PLL3_Config>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8004e82:	e00a      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004e8a:	e006      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8004e8c:	bf00      	nop
 8004e8e:	e004      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8004e90:	bf00      	nop
 8004e92:	e002      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8004e94:	44020c00 	.word	0x44020c00
        break;
 8004e98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e9a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10c      	bne.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004ea2:	4b99      	ldr	r3, [pc, #612]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ea4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ea8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004eac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004eb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004eb2:	4a95      	ldr	r2, [pc, #596]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004eb4:	430b      	orrs	r3, r1
 8004eb6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004eba:	e003      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ebc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ec0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ec4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ecc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004ed0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004eda:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	d03b      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8004ee4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ee8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004eea:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004eee:	d01b      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8004ef0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004ef4:	d814      	bhi.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8004ef6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004efa:	d017      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8004efc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004f00:	d80e      	bhi.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d014      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8004f06:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f0a:	d109      	bne.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f10:	3330      	adds	r3, #48	@ 0x30
 8004f12:	4618      	mov	r0, r3
 8004f14:	f002 fe7e 	bl	8007c14 <RCCEx_PLL3_Config>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8004f1e:	e008      	b.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004f26:	e004      	b.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004f28:	bf00      	nop
 8004f2a:	e002      	b.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004f2c:	bf00      	nop
 8004f2e:	e000      	b.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004f30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f32:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10c      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004f3a:	4b73      	ldr	r3, [pc, #460]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f40:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004f44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f4a:	4a6f      	ldr	r2, [pc, #444]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f4c:	430b      	orrs	r3, r1
 8004f4e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004f52:	e003      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f54:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f58:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f64:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004f68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004f72:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004f76:	460b      	mov	r3, r1
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	d03d      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8004f7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f88:	d01b      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x786>
 8004f8a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f8e:	d814      	bhi.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8004f90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f94:	d017      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8004f96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f9a:	d80e      	bhi.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d014      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8004fa0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fa4:	d109      	bne.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004fa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004faa:	3330      	adds	r3, #48	@ 0x30
 8004fac:	4618      	mov	r0, r3
 8004fae:	f002 fe31 	bl	8007c14 <RCCEx_PLL3_Config>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 8004fb8:	e008      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004fc0:	e004      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8004fc2:	bf00      	nop
 8004fc4:	e002      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8004fc6:	bf00      	nop
 8004fc8:	e000      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8004fca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fcc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10d      	bne.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004fd4:	4b4c      	ldr	r3, [pc, #304]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004fd6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004fda:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004fde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fe6:	4a48      	ldr	r2, [pc, #288]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004fe8:	430b      	orrs	r3, r1
 8004fea:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004fee:	e003      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ff4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8004ff8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005000:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005004:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005008:	2300      	movs	r3, #0
 800500a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800500e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005012:	460b      	mov	r3, r1
 8005014:	4313      	orrs	r3, r2
 8005016:	d035      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8005018:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800501c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005020:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005024:	d015      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8005026:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800502a:	d80e      	bhi.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x80e>
 800502c:	2b00      	cmp	r3, #0
 800502e:	d012      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8005030:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005034:	d109      	bne.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005036:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800503a:	3330      	adds	r3, #48	@ 0x30
 800503c:	4618      	mov	r0, r3
 800503e:	f002 fde9 	bl	8007c14 <RCCEx_PLL3_Config>
 8005042:	4603      	mov	r3, r0
 8005044:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8005048:	e006      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005050:	e002      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8005052:	bf00      	nop
 8005054:	e000      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8005056:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005058:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10d      	bne.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8005060:	4b29      	ldr	r3, [pc, #164]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005062:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005066:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800506a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800506e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005072:	4a25      	ldr	r2, [pc, #148]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005074:	430b      	orrs	r3, r1
 8005076:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800507a:	e003      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800507c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005080:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8005084:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508c:	2100      	movs	r1, #0
 800508e:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8005092:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005096:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800509a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800509e:	460b      	mov	r3, r1
 80050a0:	4313      	orrs	r3, r2
 80050a2:	d037      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 80050a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050b0:	d015      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80050b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050b6:	d80e      	bhi.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d012      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 80050bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050c0:	d109      	bne.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80050c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050c6:	3330      	adds	r3, #48	@ 0x30
 80050c8:	4618      	mov	r0, r3
 80050ca:	f002 fda3 	bl	8007c14 <RCCEx_PLL3_Config>
 80050ce:	4603      	mov	r3, r0
 80050d0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 80050d4:	e006      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80050dc:	e002      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 80050de:	bf00      	nop
 80050e0:	e000      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 80050e2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80050e4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10f      	bne.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 80050ec:	4b06      	ldr	r3, [pc, #24]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80050f2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80050f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050fe:	4a02      	ldr	r2, [pc, #8]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005100:	430b      	orrs	r3, r1
 8005102:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005106:	e005      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 8005108:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800510c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005110:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005114:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511c:	2100      	movs	r1, #0
 800511e:	67b9      	str	r1, [r7, #120]	@ 0x78
 8005120:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005124:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005126:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800512a:	460b      	mov	r3, r1
 800512c:	4313      	orrs	r3, r2
 800512e:	d00e      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8005130:	4bb8      	ldr	r3, [pc, #736]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	4ab7      	ldr	r2, [pc, #732]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005136:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800513a:	61d3      	str	r3, [r2, #28]
 800513c:	4bb5      	ldr	r3, [pc, #724]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800513e:	69d9      	ldr	r1, [r3, #28]
 8005140:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005144:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005148:	4ab2      	ldr	r2, [pc, #712]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800514a:	430b      	orrs	r3, r1
 800514c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800514e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005156:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800515a:	673b      	str	r3, [r7, #112]	@ 0x70
 800515c:	2300      	movs	r3, #0
 800515e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005160:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005164:	460b      	mov	r3, r1
 8005166:	4313      	orrs	r3, r2
 8005168:	d055      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800516a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800516e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005172:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005176:	d031      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8005178:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800517c:	d82a      	bhi.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x998>
 800517e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005182:	d02d      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8005184:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005188:	d824      	bhi.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x998>
 800518a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800518e:	d029      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8005190:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005194:	d81e      	bhi.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8005196:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800519a:	d011      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800519c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051a0:	d818      	bhi.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d020      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 80051a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051aa:	d113      	bne.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80051ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051b0:	3308      	adds	r3, #8
 80051b2:	4618      	mov	r0, r3
 80051b4:	f002 fc96 	bl	8007ae4 <RCCEx_PLL2_Config>
 80051b8:	4603      	mov	r3, r0
 80051ba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80051be:	e014      	b.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051c4:	3330      	adds	r3, #48	@ 0x30
 80051c6:	4618      	mov	r0, r3
 80051c8:	f002 fd24 	bl	8007c14 <RCCEx_PLL3_Config>
 80051cc:	4603      	mov	r3, r0
 80051ce:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80051d2:	e00a      	b.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80051da:	e006      	b.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 80051dc:	bf00      	nop
 80051de:	e004      	b.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 80051e0:	bf00      	nop
 80051e2:	e002      	b.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 80051e4:	bf00      	nop
 80051e6:	e000      	b.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 80051e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051ea:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10d      	bne.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80051f2:	4b88      	ldr	r3, [pc, #544]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80051f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80051f8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80051fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005200:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005204:	4a83      	ldr	r2, [pc, #524]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005206:	430b      	orrs	r3, r1
 8005208:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800520c:	e003      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800520e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005212:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005216:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800521a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005222:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005224:	2300      	movs	r3, #0
 8005226:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005228:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800522c:	460b      	mov	r3, r1
 800522e:	4313      	orrs	r3, r2
 8005230:	d055      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8005232:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800523a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800523e:	d031      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8005240:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005244:	d82a      	bhi.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8005246:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800524a:	d02d      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 800524c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005250:	d824      	bhi.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8005252:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005256:	d029      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005258:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800525c:	d81e      	bhi.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800525e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005262:	d011      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8005264:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005268:	d818      	bhi.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800526a:	2b00      	cmp	r3, #0
 800526c:	d020      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800526e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005272:	d113      	bne.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005274:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005278:	3308      	adds	r3, #8
 800527a:	4618      	mov	r0, r3
 800527c:	f002 fc32 	bl	8007ae4 <RCCEx_PLL2_Config>
 8005280:	4603      	mov	r3, r0
 8005282:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8005286:	e014      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005288:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800528c:	3330      	adds	r3, #48	@ 0x30
 800528e:	4618      	mov	r0, r3
 8005290:	f002 fcc0 	bl	8007c14 <RCCEx_PLL3_Config>
 8005294:	4603      	mov	r3, r0
 8005296:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800529a:	e00a      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80052a2:	e006      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80052a4:	bf00      	nop
 80052a6:	e004      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80052a8:	bf00      	nop
 80052aa:	e002      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80052ac:	bf00      	nop
 80052ae:	e000      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80052b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052b2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10d      	bne.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80052ba:	4b56      	ldr	r3, [pc, #344]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80052bc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80052c0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80052c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052cc:	4a51      	ldr	r2, [pc, #324]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80052ce:	430b      	orrs	r3, r1
 80052d0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80052d4:	e003      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80052da:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80052de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80052ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80052ec:	2300      	movs	r3, #0
 80052ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80052f0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80052f4:	460b      	mov	r3, r1
 80052f6:	4313      	orrs	r3, r2
 80052f8:	d032      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80052fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005302:	2b05      	cmp	r3, #5
 8005304:	d80f      	bhi.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8005306:	2b03      	cmp	r3, #3
 8005308:	d211      	bcs.n	800532e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 800530a:	2b01      	cmp	r3, #1
 800530c:	d911      	bls.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 800530e:	2b02      	cmp	r3, #2
 8005310:	d109      	bne.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005312:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005316:	3308      	adds	r3, #8
 8005318:	4618      	mov	r0, r3
 800531a:	f002 fbe3 	bl	8007ae4 <RCCEx_PLL2_Config>
 800531e:	4603      	mov	r3, r0
 8005320:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005324:	e006      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800532c:	e002      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 800532e:	bf00      	nop
 8005330:	e000      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8005332:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005334:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10d      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800533c:	4b35      	ldr	r3, [pc, #212]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800533e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005342:	f023 0107 	bic.w	r1, r3, #7
 8005346:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800534a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800534e:	4a31      	ldr	r2, [pc, #196]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005350:	430b      	orrs	r3, r1
 8005352:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005356:	e003      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005358:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800535c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8005360:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005368:	2100      	movs	r1, #0
 800536a:	65b9      	str	r1, [r7, #88]	@ 0x58
 800536c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005370:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005372:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005376:	460b      	mov	r3, r1
 8005378:	4313      	orrs	r3, r2
 800537a:	d024      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800537c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005380:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005384:	2b00      	cmp	r3, #0
 8005386:	d005      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8005388:	2b08      	cmp	r3, #8
 800538a:	d005      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005392:	e002      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8005394:	bf00      	nop
 8005396:	e000      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8005398:	bf00      	nop
    }

    if (ret == HAL_OK)
 800539a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10d      	bne.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80053a2:	4b1c      	ldr	r3, [pc, #112]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80053a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80053a8:	f023 0108 	bic.w	r1, r3, #8
 80053ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80053b4:	4a17      	ldr	r2, [pc, #92]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80053b6:	430b      	orrs	r3, r1
 80053b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80053bc:	e003      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053be:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80053c2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ce:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80053d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80053d4:	2300      	movs	r3, #0
 80053d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80053d8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80053dc:	460b      	mov	r3, r1
 80053de:	4313      	orrs	r3, r2
 80053e0:	f000 80b9 	beq.w	8005556 <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80053e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 80053e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e8:	4a0b      	ldr	r2, [pc, #44]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 80053ea:	f043 0301 	orr.w	r3, r3, #1
 80053ee:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053f0:	f7fc ff38 	bl	8002264 <HAL_GetTick>
 80053f4:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80053f8:	e010      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053fa:	f7fc ff33 	bl	8002264 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d908      	bls.n	800541c <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005410:	e00a      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8005412:	bf00      	nop
 8005414:	44020c00 	.word	0x44020c00
 8005418:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800541c:	4bba      	ldr	r3, [pc, #744]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 800541e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0e8      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 8005428:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800542c:	2b00      	cmp	r3, #0
 800542e:	f040 808e 	bne.w	800554e <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005432:	4bb6      	ldr	r3, [pc, #728]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005434:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005438:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800543c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005444:	2b00      	cmp	r3, #0
 8005446:	d023      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005448:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800544c:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8005450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005454:	4293      	cmp	r3, r2
 8005456:	d01b      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005458:	4bac      	ldr	r3, [pc, #688]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800545a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800545e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005462:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005466:	4ba9      	ldr	r3, [pc, #676]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005468:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800546c:	4aa7      	ldr	r2, [pc, #668]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800546e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005472:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005476:	4ba5      	ldr	r3, [pc, #660]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800547c:	4aa3      	ldr	r2, [pc, #652]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800547e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005482:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005486:	4aa1      	ldr	r2, [pc, #644]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800548c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b00      	cmp	r3, #0
 800549a:	d019      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549c:	f7fc fee2 	bl	8002264 <HAL_GetTick>
 80054a0:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054a4:	e00d      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054a6:	f7fc fedd 	bl	8002264 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054b0:	1ad2      	subs	r2, r2, r3
 80054b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d903      	bls.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 80054c0:	e006      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054c2:	4b92      	ldr	r3, [pc, #584]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80054c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d0ea      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 80054d0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d135      	bne.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80054d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054dc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80054e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054e8:	d110      	bne.n	800550c <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 80054ea:	4b88      	ldr	r3, [pc, #544]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80054f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80054fa:	091b      	lsrs	r3, r3, #4
 80054fc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005500:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005504:	4a81      	ldr	r2, [pc, #516]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005506:	430b      	orrs	r3, r1
 8005508:	61d3      	str	r3, [r2, #28]
 800550a:	e005      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800550c:	4b7f      	ldr	r3, [pc, #508]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800550e:	69db      	ldr	r3, [r3, #28]
 8005510:	4a7e      	ldr	r2, [pc, #504]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005512:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005516:	61d3      	str	r3, [r2, #28]
 8005518:	4b7c      	ldr	r3, [pc, #496]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800551a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800551e:	4a7b      	ldr	r2, [pc, #492]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005520:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005524:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005528:	4b78      	ldr	r3, [pc, #480]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800552a:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 800552e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005532:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800553a:	4a74      	ldr	r2, [pc, #464]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800553c:	430b      	orrs	r3, r1
 800553e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005542:	e008      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005544:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005548:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 800554c:	e003      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800554e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005552:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005556:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800555a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005562:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005564:	2300      	movs	r3, #0
 8005566:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005568:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800556c:	460b      	mov	r3, r1
 800556e:	4313      	orrs	r3, r2
 8005570:	d035      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005572:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005576:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800557a:	2b30      	cmp	r3, #48	@ 0x30
 800557c:	d014      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 800557e:	2b30      	cmp	r3, #48	@ 0x30
 8005580:	d80e      	bhi.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8005582:	2b20      	cmp	r3, #32
 8005584:	d012      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8005586:	2b20      	cmp	r3, #32
 8005588:	d80a      	bhi.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 800558a:	2b00      	cmp	r3, #0
 800558c:	d010      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 800558e:	2b10      	cmp	r3, #16
 8005590:	d106      	bne.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005592:	4b5e      	ldr	r3, [pc, #376]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005596:	4a5d      	ldr	r2, [pc, #372]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005598:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800559c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800559e:	e008      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80055a6:	e004      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80055a8:	bf00      	nop
 80055aa:	e002      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80055ac:	bf00      	nop
 80055ae:	e000      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80055b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055b2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10d      	bne.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80055ba:	4b54      	ldr	r3, [pc, #336]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80055bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80055c0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80055c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055cc:	4a4f      	ldr	r2, [pc, #316]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80055ce:	430b      	orrs	r3, r1
 80055d0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80055d4:	e003      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055d6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80055da:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80055de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e6:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80055ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80055ec:	2300      	movs	r3, #0
 80055ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80055f0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80055f4:	460b      	mov	r3, r1
 80055f6:	4313      	orrs	r3, r2
 80055f8:	d033      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80055fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005602:	2b00      	cmp	r3, #0
 8005604:	d002      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 8005606:	2b40      	cmp	r3, #64	@ 0x40
 8005608:	d007      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800560a:	e010      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800560c:	4b3f      	ldr	r3, [pc, #252]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800560e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005610:	4a3e      	ldr	r2, [pc, #248]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005612:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005616:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005618:	e00d      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800561a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800561e:	3308      	adds	r3, #8
 8005620:	4618      	mov	r0, r3
 8005622:	f002 fa5f 	bl	8007ae4 <RCCEx_PLL2_Config>
 8005626:	4603      	mov	r3, r0
 8005628:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800562c:	e003      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005634:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005636:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10d      	bne.n	800565a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800563e:	4b33      	ldr	r3, [pc, #204]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005640:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005644:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8005648:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800564c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005650:	4a2e      	ldr	r2, [pc, #184]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005652:	430b      	orrs	r3, r1
 8005654:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005658:	e003      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800565a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800565e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005662:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566a:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800566e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005670:	2300      	movs	r3, #0
 8005672:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005674:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005678:	460b      	mov	r3, r1
 800567a:	4313      	orrs	r3, r2
 800567c:	d04c      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800567e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005682:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005686:	2b04      	cmp	r3, #4
 8005688:	d827      	bhi.n	80056da <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 800568a:	a201      	add	r2, pc, #4	@ (adr r2, 8005690 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 800568c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005690:	080056a5 	.word	0x080056a5
 8005694:	080056b3 	.word	0x080056b3
 8005698:	080056c7 	.word	0x080056c7
 800569c:	080056e3 	.word	0x080056e3
 80056a0:	080056e3 	.word	0x080056e3
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056a4:	4b19      	ldr	r3, [pc, #100]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80056a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a8:	4a18      	ldr	r2, [pc, #96]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80056aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056ae:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80056b0:	e018      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056b6:	3308      	adds	r3, #8
 80056b8:	4618      	mov	r0, r3
 80056ba:	f002 fa13 	bl	8007ae4 <RCCEx_PLL2_Config>
 80056be:	4603      	mov	r3, r0
 80056c0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80056c4:	e00e      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056ca:	3330      	adds	r3, #48	@ 0x30
 80056cc:	4618      	mov	r0, r3
 80056ce:	f002 faa1 	bl	8007c14 <RCCEx_PLL3_Config>
 80056d2:	4603      	mov	r3, r0
 80056d4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80056d8:	e004      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80056e0:	e000      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 80056e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056e4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d111      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80056ec:	4b07      	ldr	r3, [pc, #28]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80056ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056f2:	f023 0107 	bic.w	r1, r3, #7
 80056f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80056fe:	4a03      	ldr	r2, [pc, #12]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005700:	430b      	orrs	r3, r1
 8005702:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005706:	e007      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8005708:	44020800 	.word	0x44020800
 800570c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005710:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005714:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005718:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800571c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005720:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005724:	633b      	str	r3, [r7, #48]	@ 0x30
 8005726:	2300      	movs	r3, #0
 8005728:	637b      	str	r3, [r7, #52]	@ 0x34
 800572a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800572e:	460b      	mov	r3, r1
 8005730:	4313      	orrs	r3, r2
 8005732:	f000 8081 	beq.w	8005838 <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8005736:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800573a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800573e:	2b20      	cmp	r3, #32
 8005740:	d85f      	bhi.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8005742:	a201      	add	r2, pc, #4	@ (adr r2, 8005748 <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8005744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005748:	080057cd 	.word	0x080057cd
 800574c:	08005803 	.word	0x08005803
 8005750:	08005803 	.word	0x08005803
 8005754:	08005803 	.word	0x08005803
 8005758:	08005803 	.word	0x08005803
 800575c:	08005803 	.word	0x08005803
 8005760:	08005803 	.word	0x08005803
 8005764:	08005803 	.word	0x08005803
 8005768:	080057db 	.word	0x080057db
 800576c:	08005803 	.word	0x08005803
 8005770:	08005803 	.word	0x08005803
 8005774:	08005803 	.word	0x08005803
 8005778:	08005803 	.word	0x08005803
 800577c:	08005803 	.word	0x08005803
 8005780:	08005803 	.word	0x08005803
 8005784:	08005803 	.word	0x08005803
 8005788:	080057ef 	.word	0x080057ef
 800578c:	08005803 	.word	0x08005803
 8005790:	08005803 	.word	0x08005803
 8005794:	08005803 	.word	0x08005803
 8005798:	08005803 	.word	0x08005803
 800579c:	08005803 	.word	0x08005803
 80057a0:	08005803 	.word	0x08005803
 80057a4:	08005803 	.word	0x08005803
 80057a8:	0800580b 	.word	0x0800580b
 80057ac:	08005803 	.word	0x08005803
 80057b0:	08005803 	.word	0x08005803
 80057b4:	08005803 	.word	0x08005803
 80057b8:	08005803 	.word	0x08005803
 80057bc:	08005803 	.word	0x08005803
 80057c0:	08005803 	.word	0x08005803
 80057c4:	08005803 	.word	0x08005803
 80057c8:	0800580b 	.word	0x0800580b
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057cc:	4bb9      	ldr	r3, [pc, #740]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80057ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d0:	4ab8      	ldr	r2, [pc, #736]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80057d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057d6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80057d8:	e018      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80057da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057de:	3308      	adds	r3, #8
 80057e0:	4618      	mov	r0, r3
 80057e2:	f002 f97f 	bl	8007ae4 <RCCEx_PLL2_Config>
 80057e6:	4603      	mov	r3, r0
 80057e8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80057ec:	e00e      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80057ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057f2:	3330      	adds	r3, #48	@ 0x30
 80057f4:	4618      	mov	r0, r3
 80057f6:	f002 fa0d 	bl	8007c14 <RCCEx_PLL3_Config>
 80057fa:	4603      	mov	r3, r0
 80057fc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005800:	e004      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005808:	e000      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 800580a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800580c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005810:	2b00      	cmp	r3, #0
 8005812:	d10d      	bne.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005814:	4ba7      	ldr	r3, [pc, #668]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800581a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800581e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005822:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005826:	4aa3      	ldr	r2, [pc, #652]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005828:	430b      	orrs	r3, r1
 800582a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800582e:	e003      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005830:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005834:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005838:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800583c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005840:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005844:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005846:	2300      	movs	r3, #0
 8005848:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800584a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800584e:	460b      	mov	r3, r1
 8005850:	4313      	orrs	r3, r2
 8005852:	d04e      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8005854:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005858:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800585c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005860:	d02e      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005862:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005866:	d827      	bhi.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005868:	2bc0      	cmp	r3, #192	@ 0xc0
 800586a:	d02b      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 800586c:	2bc0      	cmp	r3, #192	@ 0xc0
 800586e:	d823      	bhi.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005870:	2b80      	cmp	r3, #128	@ 0x80
 8005872:	d017      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 8005874:	2b80      	cmp	r3, #128	@ 0x80
 8005876:	d81f      	bhi.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005878:	2b00      	cmp	r3, #0
 800587a:	d002      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x1046>
 800587c:	2b40      	cmp	r3, #64	@ 0x40
 800587e:	d007      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 8005880:	e01a      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005882:	4b8c      	ldr	r3, [pc, #560]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005886:	4a8b      	ldr	r2, [pc, #556]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005888:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800588c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800588e:	e01a      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005890:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005894:	3308      	adds	r3, #8
 8005896:	4618      	mov	r0, r3
 8005898:	f002 f924 	bl	8007ae4 <RCCEx_PLL2_Config>
 800589c:	4603      	mov	r3, r0
 800589e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80058a2:	e010      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80058a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058a8:	3330      	adds	r3, #48	@ 0x30
 80058aa:	4618      	mov	r0, r3
 80058ac:	f002 f9b2 	bl	8007c14 <RCCEx_PLL3_Config>
 80058b0:	4603      	mov	r3, r0
 80058b2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80058b6:	e006      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80058be:	e002      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 80058c0:	bf00      	nop
 80058c2:	e000      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 80058c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058c6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10d      	bne.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80058ce:	4b79      	ldr	r3, [pc, #484]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80058d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80058d4:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 80058d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80058e0:	4974      	ldr	r1, [pc, #464]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80058e8:	e003      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ea:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80058ee:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80058f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80058fe:	623b      	str	r3, [r7, #32]
 8005900:	2300      	movs	r3, #0
 8005902:	627b      	str	r3, [r7, #36]	@ 0x24
 8005904:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005908:	460b      	mov	r3, r1
 800590a:	4313      	orrs	r3, r2
 800590c:	d055      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800590e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005912:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005916:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800591a:	d031      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 800591c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005920:	d82a      	bhi.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005922:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005926:	d02d      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8005928:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800592c:	d824      	bhi.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800592e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005932:	d029      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x114c>
 8005934:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005938:	d81e      	bhi.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800593a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800593e:	d011      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8005940:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005944:	d818      	bhi.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005946:	2b00      	cmp	r3, #0
 8005948:	d020      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x1150>
 800594a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800594e:	d113      	bne.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005950:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005954:	3308      	adds	r3, #8
 8005956:	4618      	mov	r0, r3
 8005958:	f002 f8c4 	bl	8007ae4 <RCCEx_PLL2_Config>
 800595c:	4603      	mov	r3, r0
 800595e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005962:	e014      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005964:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005968:	3330      	adds	r3, #48	@ 0x30
 800596a:	4618      	mov	r0, r3
 800596c:	f002 f952 	bl	8007c14 <RCCEx_PLL3_Config>
 8005970:	4603      	mov	r3, r0
 8005972:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005976:	e00a      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800597e:	e006      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005980:	bf00      	nop
 8005982:	e004      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005984:	bf00      	nop
 8005986:	e002      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005988:	bf00      	nop
 800598a:	e000      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 800598c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800598e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10d      	bne.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8005996:	4b47      	ldr	r3, [pc, #284]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800599c:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 80059a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80059a8:	4942      	ldr	r1, [pc, #264]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80059b0:	e003      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80059b6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80059ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c2:	2100      	movs	r1, #0
 80059c4:	61b9      	str	r1, [r7, #24]
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	61fb      	str	r3, [r7, #28]
 80059cc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80059d0:	460b      	mov	r3, r1
 80059d2:	4313      	orrs	r3, r2
 80059d4:	d03c      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 80059d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80059de:	2b03      	cmp	r3, #3
 80059e0:	d81b      	bhi.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x11de>
 80059e2:	a201      	add	r2, pc, #4	@ (adr r2, 80059e8 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 80059e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e8:	08005a23 	.word	0x08005a23
 80059ec:	080059f9 	.word	0x080059f9
 80059f0:	08005a07 	.word	0x08005a07
 80059f4:	08005a23 	.word	0x08005a23
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059f8:	4b2e      	ldr	r3, [pc, #184]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80059fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fc:	4a2d      	ldr	r2, [pc, #180]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80059fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a02:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005a04:	e00e      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a0a:	3308      	adds	r3, #8
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f002 f869 	bl	8007ae4 <RCCEx_PLL2_Config>
 8005a12:	4603      	mov	r3, r0
 8005a14:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8005a18:	e004      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005a20:	e000      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 8005a22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a24:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10d      	bne.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005a2c:	4b21      	ldr	r3, [pc, #132]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005a2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a32:	f023 0203 	bic.w	r2, r3, #3
 8005a36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005a3e:	491d      	ldr	r1, [pc, #116]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005a46:	e003      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a48:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a4c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a58:	2100      	movs	r1, #0
 8005a5a:	6139      	str	r1, [r7, #16]
 8005a5c:	f003 0304 	and.w	r3, r3, #4
 8005a60:	617b      	str	r3, [r7, #20]
 8005a62:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005a66:	460b      	mov	r3, r1
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	d03c      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005a6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a78:	d00e      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8005a7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a7e:	d815      	bhi.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x1270>
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d019      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x127c>
 8005a84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a88:	d110      	bne.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a8e:	4a09      	ldr	r2, [pc, #36]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005a90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a94:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005a96:	e010      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a9c:	3308      	adds	r3, #8
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f002 f820 	bl	8007ae4 <RCCEx_PLL2_Config>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005aaa:	e006      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005ab2:	e002      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x127e>
 8005ab4:	44020c00 	.word	0x44020c00
        break;
 8005ab8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aba:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10d      	bne.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8005ac2:	4b3d      	ldr	r3, [pc, #244]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005ac4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005ac8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005acc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ad4:	4938      	ldr	r1, [pc, #224]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8005adc:	e003      	b.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ade:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005ae2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ae6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aee:	2100      	movs	r1, #0
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	f003 0310 	and.w	r3, r3, #16
 8005af6:	60fb      	str	r3, [r7, #12]
 8005af8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005afc:	460b      	mov	r3, r1
 8005afe:	4313      	orrs	r3, r2
 8005b00:	d038      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8005b02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b06:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005b0a:	2b30      	cmp	r3, #48	@ 0x30
 8005b0c:	d01b      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x130a>
 8005b0e:	2b30      	cmp	r3, #48	@ 0x30
 8005b10:	d815      	bhi.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x1302>
 8005b12:	2b10      	cmp	r3, #16
 8005b14:	d002      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 8005b16:	2b20      	cmp	r3, #32
 8005b18:	d007      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 8005b1a:	e010      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b1c:	4b26      	ldr	r3, [pc, #152]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b20:	4a25      	ldr	r2, [pc, #148]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005b22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b26:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8005b28:	e00e      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b2e:	3330      	adds	r3, #48	@ 0x30
 8005b30:	4618      	mov	r0, r3
 8005b32:	f002 f86f 	bl	8007c14 <RCCEx_PLL3_Config>
 8005b36:	4603      	mov	r3, r0
 8005b38:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8005b3c:	e004      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005b44:	e000      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 8005b46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b48:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10d      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005b50:	4b19      	ldr	r3, [pc, #100]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005b52:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b56:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005b5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b5e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005b62:	4915      	ldr	r1, [pc, #84]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005b6a:	e003      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b6c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005b70:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	6039      	str	r1, [r7, #0]
 8005b80:	f003 0308 	and.w	r3, r3, #8
 8005b84:	607b      	str	r3, [r7, #4]
 8005b86:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	d00c      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005b90:	4b09      	ldr	r3, [pc, #36]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005b92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005b96:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005b9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b9e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005ba2:	4905      	ldr	r1, [pc, #20]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8005baa:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	37e8      	adds	r7, #232	@ 0xe8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bb8:	44020c00 	.word	0x44020c00

08005bbc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b08b      	sub	sp, #44	@ 0x2c
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005bc4:	4bae      	ldr	r3, [pc, #696]	@ (8005e80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005bc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bcc:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005bce:	4bac      	ldr	r3, [pc, #688]	@ (8005e80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd2:	f003 0303 	and.w	r3, r3, #3
 8005bd6:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005bd8:	4ba9      	ldr	r3, [pc, #676]	@ (8005e80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bdc:	0a1b      	lsrs	r3, r3, #8
 8005bde:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005be2:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005be4:	4ba6      	ldr	r3, [pc, #664]	@ (8005e80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be8:	091b      	lsrs	r3, r3, #4
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005bf0:	4ba3      	ldr	r3, [pc, #652]	@ (8005e80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf4:	08db      	lsrs	r3, r3, #3
 8005bf6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	fb02 f303 	mul.w	r3, r2, r3
 8005c00:	ee07 3a90 	vmov	s15, r3
 8005c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c08:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f000 8126 	beq.w	8005e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	2b03      	cmp	r3, #3
 8005c18:	d053      	beq.n	8005cc2 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	2b03      	cmp	r3, #3
 8005c1e:	d86f      	bhi.n	8005d00 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d003      	beq.n	8005c2e <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d02b      	beq.n	8005c84 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005c2c:	e068      	b.n	8005d00 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005c2e:	4b94      	ldr	r3, [pc, #592]	@ (8005e80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	08db      	lsrs	r3, r3, #3
 8005c34:	f003 0303 	and.w	r3, r3, #3
 8005c38:	4a92      	ldr	r2, [pc, #584]	@ (8005e84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8005c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c3e:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	ee07 3a90 	vmov	s15, r3
 8005c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	ee07 3a90 	vmov	s15, r3
 8005c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c58:	6a3b      	ldr	r3, [r7, #32]
 8005c5a:	ee07 3a90 	vmov	s15, r3
 8005c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c62:	ed97 6a04 	vldr	s12, [r7, #16]
 8005c66:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8005e88 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c7e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005c82:	e068      	b.n	8005d56 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	ee07 3a90 	vmov	s15, r3
 8005c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8005e8c <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8005c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c96:	6a3b      	ldr	r3, [r7, #32]
 8005c98:	ee07 3a90 	vmov	s15, r3
 8005c9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ca0:	ed97 6a04 	vldr	s12, [r7, #16]
 8005ca4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005e88 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005ca8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cb0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cbc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005cc0:	e049      	b.n	8005d56 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	ee07 3a90 	vmov	s15, r3
 8005cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ccc:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8005cd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cd4:	6a3b      	ldr	r3, [r7, #32]
 8005cd6:	ee07 3a90 	vmov	s15, r3
 8005cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cde:	ed97 6a04 	vldr	s12, [r7, #16]
 8005ce2:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8005e88 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cfa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005cfe:	e02a      	b.n	8005d56 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005d00:	4b5f      	ldr	r3, [pc, #380]	@ (8005e80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	08db      	lsrs	r3, r3, #3
 8005d06:	f003 0303 	and.w	r3, r3, #3
 8005d0a:	4a5e      	ldr	r2, [pc, #376]	@ (8005e84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8005d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d10:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	ee07 3a90 	vmov	s15, r3
 8005d18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	ee07 3a90 	vmov	s15, r3
 8005d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	ee07 3a90 	vmov	s15, r3
 8005d30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d34:	ed97 6a04 	vldr	s12, [r7, #16]
 8005d38:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005e88 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005d3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d50:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005d54:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d56:	4b4a      	ldr	r3, [pc, #296]	@ (8005e80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d62:	d121      	bne.n	8005da8 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005d64:	4b46      	ldr	r3, [pc, #280]	@ (8005e80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d017      	beq.n	8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005d70:	4b43      	ldr	r3, [pc, #268]	@ (8005e80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d74:	0a5b      	lsrs	r3, r3, #9
 8005d76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d7a:	ee07 3a90 	vmov	s15, r3
 8005d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8005d82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d86:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005d8a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005d8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d96:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	e006      	b.n	8005dae <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	601a      	str	r2, [r3, #0]
 8005da6:	e002      	b.n	8005dae <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005dae:	4b34      	ldr	r3, [pc, #208]	@ (8005e80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005db6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005dba:	d121      	bne.n	8005e00 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005dbc:	4b30      	ldr	r3, [pc, #192]	@ (8005e80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d017      	beq.n	8005df8 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005dc8:	4b2d      	ldr	r3, [pc, #180]	@ (8005e80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dcc:	0c1b      	lsrs	r3, r3, #16
 8005dce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dd2:	ee07 3a90 	vmov	s15, r3
 8005dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005dda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dde:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005de2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dee:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	605a      	str	r2, [r3, #4]
 8005df6:	e006      	b.n	8005e06 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	605a      	str	r2, [r3, #4]
 8005dfe:	e002      	b.n	8005e06 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e06:	4b1e      	ldr	r3, [pc, #120]	@ (8005e80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e12:	d121      	bne.n	8005e58 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005e14:	4b1a      	ldr	r3, [pc, #104]	@ (8005e80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d017      	beq.n	8005e50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005e20:	4b17      	ldr	r3, [pc, #92]	@ (8005e80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e24:	0e1b      	lsrs	r3, r3, #24
 8005e26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e2a:	ee07 3a90 	vmov	s15, r3
 8005e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8005e32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e36:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005e3a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005e3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e46:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005e4e:	e010      	b.n	8005e72 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	609a      	str	r2, [r3, #8]
}
 8005e56:	e00c      	b.n	8005e72 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	609a      	str	r2, [r3, #8]
}
 8005e5e:	e008      	b.n	8005e72 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	609a      	str	r2, [r3, #8]
}
 8005e72:	bf00      	nop
 8005e74:	372c      	adds	r7, #44	@ 0x2c
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	44020c00 	.word	0x44020c00
 8005e84:	03d09000 	.word	0x03d09000
 8005e88:	46000000 	.word	0x46000000
 8005e8c:	4a742400 	.word	0x4a742400
 8005e90:	4af42400 	.word	0x4af42400

08005e94 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b08b      	sub	sp, #44	@ 0x2c
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005e9c:	4bae      	ldr	r3, [pc, #696]	@ (8006158 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ea4:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005ea6:	4bac      	ldr	r3, [pc, #688]	@ (8006158 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8005eb0:	4ba9      	ldr	r3, [pc, #676]	@ (8006158 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb4:	0a1b      	lsrs	r3, r3, #8
 8005eb6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005eba:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005ebc:	4ba6      	ldr	r3, [pc, #664]	@ (8006158 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec0:	091b      	lsrs	r3, r3, #4
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005ec8:	4ba3      	ldr	r3, [pc, #652]	@ (8006158 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ecc:	08db      	lsrs	r3, r3, #3
 8005ece:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	fb02 f303 	mul.w	r3, r2, r3
 8005ed8:	ee07 3a90 	vmov	s15, r3
 8005edc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee0:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f000 8126 	beq.w	8006138 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	2b03      	cmp	r3, #3
 8005ef0:	d053      	beq.n	8005f9a <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	2b03      	cmp	r3, #3
 8005ef6:	d86f      	bhi.n	8005fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d003      	beq.n	8005f06 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d02b      	beq.n	8005f5c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8005f04:	e068      	b.n	8005fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005f06:	4b94      	ldr	r3, [pc, #592]	@ (8006158 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	08db      	lsrs	r3, r3, #3
 8005f0c:	f003 0303 	and.w	r3, r3, #3
 8005f10:	4a92      	ldr	r2, [pc, #584]	@ (800615c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8005f12:	fa22 f303 	lsr.w	r3, r2, r3
 8005f16:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	ee07 3a90 	vmov	s15, r3
 8005f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	ee07 3a90 	vmov	s15, r3
 8005f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f30:	6a3b      	ldr	r3, [r7, #32]
 8005f32:	ee07 3a90 	vmov	s15, r3
 8005f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f3a:	ed97 6a04 	vldr	s12, [r7, #16]
 8005f3e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8006160 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f56:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005f5a:	e068      	b.n	800602e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	ee07 3a90 	vmov	s15, r3
 8005f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f66:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8006164 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8005f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f6e:	6a3b      	ldr	r3, [r7, #32]
 8005f70:	ee07 3a90 	vmov	s15, r3
 8005f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f78:	ed97 6a04 	vldr	s12, [r7, #16]
 8005f7c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006160 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005f80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f88:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f94:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005f98:	e049      	b.n	800602e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	ee07 3a90 	vmov	s15, r3
 8005fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006168 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8005fa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	ee07 3a90 	vmov	s15, r3
 8005fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fb6:	ed97 6a04 	vldr	s12, [r7, #16]
 8005fba:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8006160 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fd2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005fd6:	e02a      	b.n	800602e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005fd8:	4b5f      	ldr	r3, [pc, #380]	@ (8006158 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	08db      	lsrs	r3, r3, #3
 8005fde:	f003 0303 	and.w	r3, r3, #3
 8005fe2:	4a5e      	ldr	r2, [pc, #376]	@ (800615c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8005fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe8:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	ee07 3a90 	vmov	s15, r3
 8005ff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	ee07 3a90 	vmov	s15, r3
 8005ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	ee07 3a90 	vmov	s15, r3
 8006008:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800600c:	ed97 6a04 	vldr	s12, [r7, #16]
 8006010:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006160 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006014:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006018:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800601c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006020:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006028:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800602c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800602e:	4b4a      	ldr	r3, [pc, #296]	@ (8006158 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006036:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800603a:	d121      	bne.n	8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800603c:	4b46      	ldr	r3, [pc, #280]	@ (8006158 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800603e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006040:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d017      	beq.n	8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006048:	4b43      	ldr	r3, [pc, #268]	@ (8006158 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800604a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800604c:	0a5b      	lsrs	r3, r3, #9
 800604e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006052:	ee07 3a90 	vmov	s15, r3
 8006056:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800605a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800605e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006062:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006066:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800606a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800606e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	e006      	b.n	8006086 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	e002      	b.n	8006086 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006086:	4b34      	ldr	r3, [pc, #208]	@ (8006158 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800608e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006092:	d121      	bne.n	80060d8 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006094:	4b30      	ldr	r3, [pc, #192]	@ (8006158 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d017      	beq.n	80060d0 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80060a0:	4b2d      	ldr	r3, [pc, #180]	@ (8006158 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80060a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060a4:	0c1b      	lsrs	r3, r3, #16
 80060a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060aa:	ee07 3a90 	vmov	s15, r3
 80060ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80060b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060b6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80060ba:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80060be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060c6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	605a      	str	r2, [r3, #4]
 80060ce:	e006      	b.n	80060de <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	605a      	str	r2, [r3, #4]
 80060d6:	e002      	b.n	80060de <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80060de:	4b1e      	ldr	r3, [pc, #120]	@ (8006158 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060ea:	d121      	bne.n	8006130 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80060ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006158 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80060ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d017      	beq.n	8006128 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80060f8:	4b17      	ldr	r3, [pc, #92]	@ (8006158 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80060fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060fc:	0e1b      	lsrs	r3, r3, #24
 80060fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006102:	ee07 3a90 	vmov	s15, r3
 8006106:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800610a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800610e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006112:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800611a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800611e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006126:	e010      	b.n	800614a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	609a      	str	r2, [r3, #8]
}
 800612e:	e00c      	b.n	800614a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	609a      	str	r2, [r3, #8]
}
 8006136:	e008      	b.n	800614a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	609a      	str	r2, [r3, #8]
}
 800614a:	bf00      	nop
 800614c:	372c      	adds	r7, #44	@ 0x2c
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	44020c00 	.word	0x44020c00
 800615c:	03d09000 	.word	0x03d09000
 8006160:	46000000 	.word	0x46000000
 8006164:	4a742400 	.word	0x4a742400
 8006168:	4af42400 	.word	0x4af42400

0800616c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 800616c:	b480      	push	{r7}
 800616e:	b08b      	sub	sp, #44	@ 0x2c
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006174:	4bae      	ldr	r3, [pc, #696]	@ (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800617c:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800617e:	4bac      	ldr	r3, [pc, #688]	@ (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006182:	f003 0303 	and.w	r3, r3, #3
 8006186:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8006188:	4ba9      	ldr	r3, [pc, #676]	@ (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800618a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800618c:	0a1b      	lsrs	r3, r3, #8
 800618e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006192:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8006194:	4ba6      	ldr	r3, [pc, #664]	@ (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006198:	091b      	lsrs	r3, r3, #4
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80061a0:	4ba3      	ldr	r3, [pc, #652]	@ (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80061a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061a4:	08db      	lsrs	r3, r3, #3
 80061a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	fb02 f303 	mul.w	r3, r2, r3
 80061b0:	ee07 3a90 	vmov	s15, r3
 80061b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061b8:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f000 8126 	beq.w	8006410 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	2b03      	cmp	r3, #3
 80061c8:	d053      	beq.n	8006272 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	2b03      	cmp	r3, #3
 80061ce:	d86f      	bhi.n	80062b0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d003      	beq.n	80061de <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d02b      	beq.n	8006234 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80061dc:	e068      	b.n	80062b0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80061de:	4b94      	ldr	r3, [pc, #592]	@ (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	08db      	lsrs	r3, r3, #3
 80061e4:	f003 0303 	and.w	r3, r3, #3
 80061e8:	4a92      	ldr	r2, [pc, #584]	@ (8006434 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80061ea:	fa22 f303 	lsr.w	r3, r2, r3
 80061ee:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	ee07 3a90 	vmov	s15, r3
 80061f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	ee07 3a90 	vmov	s15, r3
 8006200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006204:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	ee07 3a90 	vmov	s15, r3
 800620e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006212:	ed97 6a04 	vldr	s12, [r7, #16]
 8006216:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8006438 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800621a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800621e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006222:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800622a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800622e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006232:	e068      	b.n	8006306 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	ee07 3a90 	vmov	s15, r3
 800623a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800623e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800643c <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8006242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006246:	6a3b      	ldr	r3, [r7, #32]
 8006248:	ee07 3a90 	vmov	s15, r3
 800624c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006250:	ed97 6a04 	vldr	s12, [r7, #16]
 8006254:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006438 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8006258:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800625c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006260:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006264:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800626c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006270:	e049      	b.n	8006306 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	ee07 3a90 	vmov	s15, r3
 8006278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800627c:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006440 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8006280:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	ee07 3a90 	vmov	s15, r3
 800628a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800628e:	ed97 6a04 	vldr	s12, [r7, #16]
 8006292:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8006438 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8006296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800629a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800629e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062aa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80062ae:	e02a      	b.n	8006306 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80062b0:	4b5f      	ldr	r3, [pc, #380]	@ (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	08db      	lsrs	r3, r3, #3
 80062b6:	f003 0303 	and.w	r3, r3, #3
 80062ba:	4a5e      	ldr	r2, [pc, #376]	@ (8006434 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80062bc:	fa22 f303 	lsr.w	r3, r2, r3
 80062c0:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	ee07 3a90 	vmov	s15, r3
 80062c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	ee07 3a90 	vmov	s15, r3
 80062d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	ee07 3a90 	vmov	s15, r3
 80062e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062e4:	ed97 6a04 	vldr	s12, [r7, #16]
 80062e8:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006438 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80062ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006300:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006304:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006306:	4b4a      	ldr	r3, [pc, #296]	@ (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800630e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006312:	d121      	bne.n	8006358 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006314:	4b46      	ldr	r3, [pc, #280]	@ (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006318:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d017      	beq.n	8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006320:	4b43      	ldr	r3, [pc, #268]	@ (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006324:	0a5b      	lsrs	r3, r3, #9
 8006326:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800632a:	ee07 3a90 	vmov	s15, r3
 800632e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8006332:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006336:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800633a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800633e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006342:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006346:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	601a      	str	r2, [r3, #0]
 800634e:	e006      	b.n	800635e <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	601a      	str	r2, [r3, #0]
 8006356:	e002      	b.n	800635e <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800635e:	4b34      	ldr	r3, [pc, #208]	@ (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006366:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800636a:	d121      	bne.n	80063b0 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800636c:	4b30      	ldr	r3, [pc, #192]	@ (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800636e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d017      	beq.n	80063a8 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006378:	4b2d      	ldr	r3, [pc, #180]	@ (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800637a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800637c:	0c1b      	lsrs	r3, r3, #16
 800637e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006382:	ee07 3a90 	vmov	s15, r3
 8006386:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800638a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800638e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006392:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006396:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800639a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800639e:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	605a      	str	r2, [r3, #4]
 80063a6:	e006      	b.n	80063b6 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	605a      	str	r2, [r3, #4]
 80063ae:	e002      	b.n	80063b6 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80063b6:	4b1e      	ldr	r3, [pc, #120]	@ (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063c2:	d121      	bne.n	8006408 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80063c4:	4b1a      	ldr	r3, [pc, #104]	@ (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80063c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d017      	beq.n	8006400 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80063d0:	4b17      	ldr	r3, [pc, #92]	@ (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80063d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063d4:	0e1b      	lsrs	r3, r3, #24
 80063d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063da:	ee07 3a90 	vmov	s15, r3
 80063de:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 80063e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063e6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80063ea:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80063ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063f6:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80063fe:	e010      	b.n	8006422 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	609a      	str	r2, [r3, #8]
}
 8006406:	e00c      	b.n	8006422 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	609a      	str	r2, [r3, #8]
}
 800640e:	e008      	b.n	8006422 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	609a      	str	r2, [r3, #8]
}
 8006422:	bf00      	nop
 8006424:	372c      	adds	r7, #44	@ 0x2c
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	44020c00 	.word	0x44020c00
 8006434:	03d09000 	.word	0x03d09000
 8006438:	46000000 	.word	0x46000000
 800643c:	4a742400 	.word	0x4a742400
 8006440:	4af42400 	.word	0x4af42400

08006444 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006444:	b590      	push	{r4, r7, lr}
 8006446:	b08f      	sub	sp, #60	@ 0x3c
 8006448:	af00      	add	r7, sp, #0
 800644a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800644e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006452:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8006456:	4321      	orrs	r1, r4
 8006458:	d150      	bne.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800645a:	4b26      	ldr	r3, [pc, #152]	@ (80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800645c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006460:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006464:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006466:	4b23      	ldr	r3, [pc, #140]	@ (80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006468:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800646c:	f003 0302 	and.w	r3, r3, #2
 8006470:	2b02      	cmp	r3, #2
 8006472:	d108      	bne.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006476:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800647a:	d104      	bne.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800647c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006480:	637b      	str	r3, [r7, #52]	@ 0x34
 8006482:	f001 bb20 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006486:	4b1b      	ldr	r3, [pc, #108]	@ (80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006488:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800648c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006490:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006494:	d108      	bne.n	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8006496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800649c:	d104      	bne.n	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800649e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80064a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80064a4:	f001 bb0f 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80064a8:	4b12      	ldr	r3, [pc, #72]	@ (80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064b4:	d119      	bne.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80064b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064bc:	d115      	bne.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80064be:	4b0d      	ldr	r3, [pc, #52]	@ (80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80064c0:	69db      	ldr	r3, [r3, #28]
 80064c2:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80064c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064ca:	d30a      	bcc.n	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80064cc:	4b09      	ldr	r3, [pc, #36]	@ (80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80064ce:	69db      	ldr	r3, [r3, #28]
 80064d0:	0a1b      	lsrs	r3, r3, #8
 80064d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80064d6:	4a08      	ldr	r2, [pc, #32]	@ (80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80064d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80064de:	f001 baf2 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 80064e2:	2300      	movs	r3, #0
 80064e4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80064e6:	f001 baee 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80064ea:	2300      	movs	r3, #0
 80064ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80064ee:	f001 baea 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80064f2:	bf00      	nop
 80064f4:	44020c00 	.word	0x44020c00
 80064f8:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80064fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006500:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 8006504:	ea50 0104 	orrs.w	r1, r0, r4
 8006508:	f000 8615 	beq.w	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 800650c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006510:	2801      	cmp	r0, #1
 8006512:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 8006516:	f081 82d3 	bcs.w	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800651a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800651e:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8006522:	ea50 0104 	orrs.w	r1, r0, r4
 8006526:	f000 84d8 	beq.w	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800652a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800652e:	2801      	cmp	r0, #1
 8006530:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8006534:	f081 82c4 	bcs.w	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006538:	e9d7 0100 	ldrd	r0, r1, [r7]
 800653c:	f1a1 0410 	sub.w	r4, r1, #16
 8006540:	ea50 0104 	orrs.w	r1, r0, r4
 8006544:	f001 8288 	beq.w	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 8006548:	e9d7 0100 	ldrd	r0, r1, [r7]
 800654c:	2801      	cmp	r0, #1
 800654e:	f171 0110 	sbcs.w	r1, r1, #16
 8006552:	f081 82b5 	bcs.w	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006556:	e9d7 0100 	ldrd	r0, r1, [r7]
 800655a:	f1a1 0408 	sub.w	r4, r1, #8
 800655e:	ea50 0104 	orrs.w	r1, r0, r4
 8006562:	f001 81fe 	beq.w	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 8006566:	e9d7 0100 	ldrd	r0, r1, [r7]
 800656a:	2801      	cmp	r0, #1
 800656c:	f171 0108 	sbcs.w	r1, r1, #8
 8006570:	f081 82a6 	bcs.w	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006574:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006578:	1f0c      	subs	r4, r1, #4
 800657a:	ea50 0104 	orrs.w	r1, r0, r4
 800657e:	f000 8753 	beq.w	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 8006582:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006586:	2801      	cmp	r0, #1
 8006588:	f171 0104 	sbcs.w	r1, r1, #4
 800658c:	f081 8298 	bcs.w	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006590:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006594:	1e8c      	subs	r4, r1, #2
 8006596:	ea50 0104 	orrs.w	r1, r0, r4
 800659a:	f001 8173 	beq.w	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 800659e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065a2:	2801      	cmp	r0, #1
 80065a4:	f171 0102 	sbcs.w	r1, r1, #2
 80065a8:	f081 828a 	bcs.w	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80065ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065b0:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 80065b4:	4321      	orrs	r1, r4
 80065b6:	f001 80fe 	beq.w	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 80065ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065be:	4ccb      	ldr	r4, [pc, #812]	@ (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 80065c0:	42a0      	cmp	r0, r4
 80065c2:	f171 0100 	sbcs.w	r1, r1, #0
 80065c6:	f081 827b 	bcs.w	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80065ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065ce:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 80065d2:	4321      	orrs	r1, r4
 80065d4:	f001 8076 	beq.w	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 80065d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065dc:	4cc4      	ldr	r4, [pc, #784]	@ (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 80065de:	42a0      	cmp	r0, r4
 80065e0:	f171 0100 	sbcs.w	r1, r1, #0
 80065e4:	f081 826c 	bcs.w	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80065e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065ec:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 80065f0:	4321      	orrs	r1, r4
 80065f2:	f000 87b5 	beq.w	8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 80065f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065fa:	4cbe      	ldr	r4, [pc, #760]	@ (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 80065fc:	42a0      	cmp	r0, r4
 80065fe:	f171 0100 	sbcs.w	r1, r1, #0
 8006602:	f081 825d 	bcs.w	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006606:	e9d7 0100 	ldrd	r0, r1, [r7]
 800660a:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 800660e:	4321      	orrs	r1, r4
 8006610:	f000 8738 	beq.w	8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8006614:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006618:	4cb7      	ldr	r4, [pc, #732]	@ (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 800661a:	42a0      	cmp	r0, r4
 800661c:	f171 0100 	sbcs.w	r1, r1, #0
 8006620:	f081 824e 	bcs.w	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006624:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006628:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 800662c:	4321      	orrs	r1, r4
 800662e:	f001 81cd 	beq.w	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 8006632:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006636:	4cb1      	ldr	r4, [pc, #708]	@ (80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 8006638:	42a0      	cmp	r0, r4
 800663a:	f171 0100 	sbcs.w	r1, r1, #0
 800663e:	f081 823f 	bcs.w	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006642:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006646:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 800664a:	4321      	orrs	r1, r4
 800664c:	f000 80d9 	beq.w	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006650:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006654:	4caa      	ldr	r4, [pc, #680]	@ (8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 8006656:	42a0      	cmp	r0, r4
 8006658:	f171 0100 	sbcs.w	r1, r1, #0
 800665c:	f081 8230 	bcs.w	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006660:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006664:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8006668:	4321      	orrs	r1, r4
 800666a:	f000 83da 	beq.w	8006e22 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 800666e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006672:	4ca4      	ldr	r4, [pc, #656]	@ (8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 8006674:	42a0      	cmp	r0, r4
 8006676:	f171 0100 	sbcs.w	r1, r1, #0
 800667a:	f081 8221 	bcs.w	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800667e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006682:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8006686:	4321      	orrs	r1, r4
 8006688:	f000 8627 	beq.w	80072da <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 800668c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006690:	4c9d      	ldr	r4, [pc, #628]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 8006692:	42a0      	cmp	r0, r4
 8006694:	f171 0100 	sbcs.w	r1, r1, #0
 8006698:	f081 8212 	bcs.w	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800669c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066a0:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 80066a4:	4321      	orrs	r1, r4
 80066a6:	f000 857a 	beq.w	800719e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80066aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066ae:	4c97      	ldr	r4, [pc, #604]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 80066b0:	42a0      	cmp	r0, r4
 80066b2:	f171 0100 	sbcs.w	r1, r1, #0
 80066b6:	f081 8203 	bcs.w	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80066ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066be:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 80066c2:	4321      	orrs	r1, r4
 80066c4:	f000 84fb 	beq.w	80070be <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 80066c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066cc:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 80066d0:	f171 0100 	sbcs.w	r1, r1, #0
 80066d4:	f081 81f4 	bcs.w	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80066d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066dc:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 80066e0:	4321      	orrs	r1, r4
 80066e2:	f000 84a9 	beq.w	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 80066e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066ea:	f248 0401 	movw	r4, #32769	@ 0x8001
 80066ee:	42a0      	cmp	r0, r4
 80066f0:	f171 0100 	sbcs.w	r1, r1, #0
 80066f4:	f081 81e4 	bcs.w	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80066f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066fc:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8006700:	4321      	orrs	r1, r4
 8006702:	f000 8456 	beq.w	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 8006706:	e9d7 0100 	ldrd	r0, r1, [r7]
 800670a:	f244 0401 	movw	r4, #16385	@ 0x4001
 800670e:	42a0      	cmp	r0, r4
 8006710:	f171 0100 	sbcs.w	r1, r1, #0
 8006714:	f081 81d4 	bcs.w	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006718:	e9d7 0100 	ldrd	r0, r1, [r7]
 800671c:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8006720:	4321      	orrs	r1, r4
 8006722:	f000 8403 	beq.w	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8006726:	e9d7 0100 	ldrd	r0, r1, [r7]
 800672a:	f242 0401 	movw	r4, #8193	@ 0x2001
 800672e:	42a0      	cmp	r0, r4
 8006730:	f171 0100 	sbcs.w	r1, r1, #0
 8006734:	f081 81c4 	bcs.w	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006738:	e9d7 0100 	ldrd	r0, r1, [r7]
 800673c:	2821      	cmp	r0, #33	@ 0x21
 800673e:	f171 0100 	sbcs.w	r1, r1, #0
 8006742:	d255      	bcs.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8006744:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006748:	4301      	orrs	r1, r0
 800674a:	f001 81b9 	beq.w	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800674e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006752:	1e42      	subs	r2, r0, #1
 8006754:	f141 33ff 	adc.w	r3, r1, #4294967295
 8006758:	2a20      	cmp	r2, #32
 800675a:	f173 0100 	sbcs.w	r1, r3, #0
 800675e:	f081 81af 	bcs.w	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006762:	2a1f      	cmp	r2, #31
 8006764:	f201 81ac 	bhi.w	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006768:	a101      	add	r1, pc, #4	@ (adr r1, 8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 800676a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800676e:	bf00      	nop
 8006770:	08006847 	.word	0x08006847
 8006774:	08006945 	.word	0x08006945
 8006778:	08007ac1 	.word	0x08007ac1
 800677c:	08006a05 	.word	0x08006a05
 8006780:	08007ac1 	.word	0x08007ac1
 8006784:	08007ac1 	.word	0x08007ac1
 8006788:	08007ac1 	.word	0x08007ac1
 800678c:	08006ad5 	.word	0x08006ad5
 8006790:	08007ac1 	.word	0x08007ac1
 8006794:	08007ac1 	.word	0x08007ac1
 8006798:	08007ac1 	.word	0x08007ac1
 800679c:	08007ac1 	.word	0x08007ac1
 80067a0:	08007ac1 	.word	0x08007ac1
 80067a4:	08007ac1 	.word	0x08007ac1
 80067a8:	08007ac1 	.word	0x08007ac1
 80067ac:	08006bb9 	.word	0x08006bb9
 80067b0:	08007ac1 	.word	0x08007ac1
 80067b4:	08007ac1 	.word	0x08007ac1
 80067b8:	08007ac1 	.word	0x08007ac1
 80067bc:	08007ac1 	.word	0x08007ac1
 80067c0:	08007ac1 	.word	0x08007ac1
 80067c4:	08007ac1 	.word	0x08007ac1
 80067c8:	08007ac1 	.word	0x08007ac1
 80067cc:	08007ac1 	.word	0x08007ac1
 80067d0:	08007ac1 	.word	0x08007ac1
 80067d4:	08007ac1 	.word	0x08007ac1
 80067d8:	08007ac1 	.word	0x08007ac1
 80067dc:	08007ac1 	.word	0x08007ac1
 80067e0:	08007ac1 	.word	0x08007ac1
 80067e4:	08007ac1 	.word	0x08007ac1
 80067e8:	08007ac1 	.word	0x08007ac1
 80067ec:	08006c8f 	.word	0x08006c8f
 80067f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067f4:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80067f8:	430b      	orrs	r3, r1
 80067fa:	f000 82b3 	beq.w	8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 80067fe:	f001 b95f 	b.w	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8006802:	4b43      	ldr	r3, [pc, #268]	@ (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006804:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800680c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800680e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006810:	2b00      	cmp	r3, #0
 8006812:	d108      	bne.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006814:	f107 0320 	add.w	r3, r7, #32
 8006818:	4618      	mov	r0, r3
 800681a:	f7ff f9cf 	bl	8005bbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800681e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006820:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006822:	f001 b950 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8006826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006828:	2b40      	cmp	r3, #64	@ 0x40
 800682a:	d108      	bne.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800682c:	f107 0314 	add.w	r3, r7, #20
 8006830:	4618      	mov	r0, r3
 8006832:	f7ff fb2f 	bl	8005e94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800683a:	f001 b944 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 800683e:	2300      	movs	r3, #0
 8006840:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006842:	f001 b940 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006846:	4b32      	ldr	r3, [pc, #200]	@ (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006848:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800684c:	f003 0307 	and.w	r3, r3, #7
 8006850:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006854:	2b00      	cmp	r3, #0
 8006856:	d104      	bne.n	8006862 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8006858:	f7fd ffc4 	bl	80047e4 <HAL_RCC_GetPCLK2Freq>
 800685c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800685e:	f001 b932 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8006862:	4b2b      	ldr	r3, [pc, #172]	@ (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800686a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800686e:	d10a      	bne.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8006870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006872:	2b01      	cmp	r3, #1
 8006874:	d107      	bne.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006876:	f107 0314 	add.w	r3, r7, #20
 800687a:	4618      	mov	r0, r3
 800687c:	f7ff fb0a 	bl	8005e94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	637b      	str	r3, [r7, #52]	@ 0x34
 8006884:	e05c      	b.n	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8006886:	4b22      	ldr	r3, [pc, #136]	@ (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800688e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006892:	d10a      	bne.n	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8006894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006896:	2b02      	cmp	r3, #2
 8006898:	d107      	bne.n	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800689a:	f107 0308 	add.w	r3, r7, #8
 800689e:	4618      	mov	r0, r3
 80068a0:	f7ff fc64 	bl	800616c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80068a8:	e04a      	b.n	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80068aa:	4b19      	ldr	r3, [pc, #100]	@ (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d10c      	bne.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 80068b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b8:	2b03      	cmp	r3, #3
 80068ba:	d109      	bne.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068bc:	4b14      	ldr	r3, [pc, #80]	@ (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	08db      	lsrs	r3, r3, #3
 80068c2:	f003 0303 	and.w	r3, r3, #3
 80068c6:	4a13      	ldr	r2, [pc, #76]	@ (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 80068c8:	fa22 f303 	lsr.w	r3, r2, r3
 80068cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80068ce:	e037      	b.n	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80068d0:	4b0f      	ldr	r3, [pc, #60]	@ (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068dc:	d11e      	bne.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 80068de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e0:	2b04      	cmp	r3, #4
 80068e2:	d11b      	bne.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 80068e4:	4b0c      	ldr	r3, [pc, #48]	@ (8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 80068e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80068e8:	e02a      	b.n	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 80068ea:	bf00      	nop
 80068ec:	40000001 	.word	0x40000001
 80068f0:	20000001 	.word	0x20000001
 80068f4:	10000001 	.word	0x10000001
 80068f8:	08000001 	.word	0x08000001
 80068fc:	04000001 	.word	0x04000001
 8006900:	00400001 	.word	0x00400001
 8006904:	00200001 	.word	0x00200001
 8006908:	00040001 	.word	0x00040001
 800690c:	00020001 	.word	0x00020001
 8006910:	44020c00 	.word	0x44020c00
 8006914:	03d09000 	.word	0x03d09000
 8006918:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800691c:	4ba3      	ldr	r3, [pc, #652]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800691e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006922:	f003 0302 	and.w	r3, r3, #2
 8006926:	2b02      	cmp	r3, #2
 8006928:	d106      	bne.n	8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800692a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800692c:	2b05      	cmp	r3, #5
 800692e:	d103      	bne.n	8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 8006930:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006934:	637b      	str	r3, [r7, #52]	@ 0x34
 8006936:	e003      	b.n	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 8006938:	2300      	movs	r3, #0
 800693a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800693c:	f001 b8c3 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006940:	f001 b8c1 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006944:	4b99      	ldr	r3, [pc, #612]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006946:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800694a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800694e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006952:	2b00      	cmp	r3, #0
 8006954:	d104      	bne.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006956:	f7fd ff2f 	bl	80047b8 <HAL_RCC_GetPCLK1Freq>
 800695a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800695c:	f001 b8b3 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8006960:	4b92      	ldr	r3, [pc, #584]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006968:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800696c:	d10a      	bne.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 800696e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006970:	2b08      	cmp	r3, #8
 8006972:	d107      	bne.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006974:	f107 0314 	add.w	r3, r7, #20
 8006978:	4618      	mov	r0, r3
 800697a:	f7ff fa8b 	bl	8005e94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	637b      	str	r3, [r7, #52]	@ 0x34
 8006982:	e03d      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8006984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006986:	2b10      	cmp	r3, #16
 8006988:	d108      	bne.n	800699c <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800698a:	f107 0308 	add.w	r3, r7, #8
 800698e:	4618      	mov	r0, r3
 8006990:	f7ff fbec 	bl	800616c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006998:	f001 b895 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800699c:	4b83      	ldr	r3, [pc, #524]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 0302 	and.w	r3, r3, #2
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d10c      	bne.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 80069a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069aa:	2b18      	cmp	r3, #24
 80069ac:	d109      	bne.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80069ae:	4b7f      	ldr	r3, [pc, #508]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	08db      	lsrs	r3, r3, #3
 80069b4:	f003 0303 	and.w	r3, r3, #3
 80069b8:	4a7d      	ldr	r2, [pc, #500]	@ (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80069ba:	fa22 f303 	lsr.w	r3, r2, r3
 80069be:	637b      	str	r3, [r7, #52]	@ 0x34
 80069c0:	e01e      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80069c2:	4b7a      	ldr	r3, [pc, #488]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069ce:	d105      	bne.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 80069d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d2:	2b20      	cmp	r3, #32
 80069d4:	d102      	bne.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 80069d6:	4b77      	ldr	r3, [pc, #476]	@ (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80069d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80069da:	e011      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80069dc:	4b73      	ldr	r3, [pc, #460]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80069de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d106      	bne.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 80069ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ec:	2b28      	cmp	r3, #40	@ 0x28
 80069ee:	d103      	bne.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 80069f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80069f6:	e003      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 80069f8:	2300      	movs	r3, #0
 80069fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069fc:	f001 b863 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006a00:	f001 b861 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006a04:	4b69      	ldr	r3, [pc, #420]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006a06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006a0a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006a0e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d104      	bne.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a16:	f7fd fecf 	bl	80047b8 <HAL_RCC_GetPCLK1Freq>
 8006a1a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006a1c:	f001 b853 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8006a20:	4b62      	ldr	r3, [pc, #392]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a2c:	d10a      	bne.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8006a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a30:	2b40      	cmp	r3, #64	@ 0x40
 8006a32:	d107      	bne.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a34:	f107 0314 	add.w	r3, r7, #20
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7ff fa2b 	bl	8005e94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a42:	e045      	b.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8006a44:	4b59      	ldr	r3, [pc, #356]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a50:	d10a      	bne.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8006a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a54:	2b80      	cmp	r3, #128	@ 0x80
 8006a56:	d107      	bne.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a58:	f107 0308 	add.w	r3, r7, #8
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7ff fb85 	bl	800616c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a66:	e033      	b.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006a68:	4b50      	ldr	r3, [pc, #320]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0302 	and.w	r3, r3, #2
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d10c      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8006a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a76:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a78:	d109      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a7a:	4b4c      	ldr	r3, [pc, #304]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	08db      	lsrs	r3, r3, #3
 8006a80:	f003 0303 	and.w	r3, r3, #3
 8006a84:	4a4a      	ldr	r2, [pc, #296]	@ (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8006a86:	fa22 f303 	lsr.w	r3, r2, r3
 8006a8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a8c:	e020      	b.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8006a8e:	4b47      	ldr	r3, [pc, #284]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a9a:	d106      	bne.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006aa2:	d102      	bne.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 8006aa4:	4b43      	ldr	r3, [pc, #268]	@ (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8006aa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aa8:	e012      	b.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006aaa:	4b40      	ldr	r3, [pc, #256]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006aac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ab0:	f003 0302 	and.w	r3, r3, #2
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d107      	bne.n	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aba:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006abe:	d103      	bne.n	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 8006ac0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ac4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ac6:	e003      	b.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006acc:	f000 bffb 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006ad0:	f000 bff9 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006ad4:	4b35      	ldr	r3, [pc, #212]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006ad6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006ada:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8006ade:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d104      	bne.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006ae6:	f7fd fe67 	bl	80047b8 <HAL_RCC_GetPCLK1Freq>
 8006aea:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006aec:	f000 bfeb 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8006af0:	4b2e      	ldr	r3, [pc, #184]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006af8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006afc:	d10b      	bne.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 8006afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b04:	d107      	bne.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b06:	f107 0314 	add.w	r3, r7, #20
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7ff f9c2 	bl	8005e94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b14:	e047      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8006b16:	4b25      	ldr	r3, [pc, #148]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b22:	d10b      	bne.n	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b2a:	d107      	bne.n	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b2c:	f107 0308 	add.w	r3, r7, #8
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7ff fb1b 	bl	800616c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b3a:	e034      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0302 	and.w	r3, r3, #2
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d10d      	bne.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8006b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006b4e:	d109      	bne.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b50:	4b16      	ldr	r3, [pc, #88]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	08db      	lsrs	r3, r3, #3
 8006b56:	f003 0303 	and.w	r3, r3, #3
 8006b5a:	4a15      	ldr	r2, [pc, #84]	@ (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8006b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b60:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b62:	e020      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8006b64:	4b11      	ldr	r3, [pc, #68]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b70:	d106      	bne.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8006b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b78:	d102      	bne.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 8006b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8006b7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b7e:	e012      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006b80:	4b0a      	ldr	r3, [pc, #40]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006b82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d107      	bne.n	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8006b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b90:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006b94:	d103      	bne.n	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 8006b96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b9c:	e003      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ba2:	f000 bf90 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006ba6:	f000 bf8e 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006baa:	bf00      	nop
 8006bac:	44020c00 	.word	0x44020c00
 8006bb0:	03d09000 	.word	0x03d09000
 8006bb4:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006bb8:	4ba5      	ldr	r3, [pc, #660]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006bba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006bbe:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006bc2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d104      	bne.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006bca:	f7fd fdf5 	bl	80047b8 <HAL_RCC_GetPCLK1Freq>
 8006bce:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8006bd0:	f000 bf79 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8006bd4:	4b9e      	ldr	r3, [pc, #632]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bdc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006be0:	d10b      	bne.n	8006bfa <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8006be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006be8:	d107      	bne.n	8006bfa <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bea:	f107 0314 	add.w	r3, r7, #20
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7ff f950 	bl	8005e94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bf8:	e047      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8006bfa:	4b95      	ldr	r3, [pc, #596]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c06:	d10b      	bne.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8006c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c0e:	d107      	bne.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c10:	f107 0308 	add.w	r3, r7, #8
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7ff faa9 	bl	800616c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c1e:	e034      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006c20:	4b8b      	ldr	r3, [pc, #556]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0302 	and.w	r3, r3, #2
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d10d      	bne.n	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 8006c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c32:	d109      	bne.n	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c34:	4b86      	ldr	r3, [pc, #536]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	08db      	lsrs	r3, r3, #3
 8006c3a:	f003 0303 	and.w	r3, r3, #3
 8006c3e:	4a85      	ldr	r2, [pc, #532]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8006c40:	fa22 f303 	lsr.w	r3, r2, r3
 8006c44:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c46:	e020      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8006c48:	4b81      	ldr	r3, [pc, #516]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c54:	d106      	bne.n	8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8006c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c5c:	d102      	bne.n	8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 8006c5e:	4b7e      	ldr	r3, [pc, #504]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8006c60:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c62:	e012      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006c64:	4b7a      	ldr	r3, [pc, #488]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006c66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d107      	bne.n	8006c82 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 8006c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c74:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006c78:	d103      	bne.n	8006c82 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 8006c7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c80:	e003      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 8006c82:	2300      	movs	r3, #0
 8006c84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c86:	f000 bf1e 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006c8a:	f000 bf1c 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8006c8e:	4b70      	ldr	r3, [pc, #448]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006c90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006c94:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8006c98:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d104      	bne.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006ca0:	f7fd fd8a 	bl	80047b8 <HAL_RCC_GetPCLK1Freq>
 8006ca4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8006ca6:	f000 bf0e 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8006caa:	4b69      	ldr	r3, [pc, #420]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cb6:	d10b      	bne.n	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8006cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cbe:	d107      	bne.n	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cc0:	f107 0314 	add.w	r3, r7, #20
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7ff f8e5 	bl	8005e94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cce:	e047      	b.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8006cd0:	4b5f      	ldr	r3, [pc, #380]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006cd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cdc:	d10b      	bne.n	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8006cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ce4:	d107      	bne.n	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ce6:	f107 0308 	add.w	r3, r7, #8
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7ff fa3e 	bl	800616c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cf4:	e034      	b.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8006cf6:	4b56      	ldr	r3, [pc, #344]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0302 	and.w	r3, r3, #2
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d10d      	bne.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8006d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d04:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006d08:	d109      	bne.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d0a:	4b51      	ldr	r3, [pc, #324]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	08db      	lsrs	r3, r3, #3
 8006d10:	f003 0303 	and.w	r3, r3, #3
 8006d14:	4a4f      	ldr	r2, [pc, #316]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8006d16:	fa22 f303 	lsr.w	r3, r2, r3
 8006d1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d1c:	e020      	b.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8006d1e:	4b4c      	ldr	r3, [pc, #304]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d2a:	d106      	bne.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 8006d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d32:	d102      	bne.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 8006d34:	4b48      	ldr	r3, [pc, #288]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8006d36:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d38:	e012      	b.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8006d3a:	4b45      	ldr	r3, [pc, #276]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006d3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d40:	f003 0302 	and.w	r3, r3, #2
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d107      	bne.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8006d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006d4e:	d103      	bne.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8006d50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d54:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d56:	e003      	b.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d5c:	f000 beb3 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006d60:	f000 beb1 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006d64:	4b3a      	ldr	r3, [pc, #232]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d6a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006d6e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d104      	bne.n	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006d76:	f7fd fd4b 	bl	8004810 <HAL_RCC_GetPCLK3Freq>
 8006d7a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006d7c:	f000 bea3 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8006d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d86:	d108      	bne.n	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d88:	f107 0314 	add.w	r3, r7, #20
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7ff f881 	bl	8005e94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d96:	f000 be96 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8006d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006da0:	d108      	bne.n	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006da2:	f107 0308 	add.w	r3, r7, #8
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7ff f9e0 	bl	800616c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006db0:	f000 be89 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006db4:	4b26      	ldr	r3, [pc, #152]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0302 	and.w	r3, r3, #2
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d10d      	bne.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006dc6:	d109      	bne.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006dc8:	4b21      	ldr	r3, [pc, #132]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	08db      	lsrs	r3, r3, #3
 8006dce:	f003 0303 	and.w	r3, r3, #3
 8006dd2:	4a20      	ldr	r2, [pc, #128]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8006dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8006dd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dda:	e020      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8006ddc:	4b1c      	ldr	r3, [pc, #112]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006de4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006de8:	d106      	bne.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8006dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006df0:	d102      	bne.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 8006df2:	4b19      	ldr	r3, [pc, #100]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8006df4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006df6:	e012      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006df8:	4b15      	ldr	r3, [pc, #84]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006dfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006dfe:	f003 0302 	and.w	r3, r3, #2
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d107      	bne.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8006e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e08:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006e0c:	d103      	bne.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 8006e0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e12:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e14:	e003      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 8006e16:	2300      	movs	r3, #0
 8006e18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e1a:	f000 be54 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006e1e:	f000 be52 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006e22:	4b0b      	ldr	r3, [pc, #44]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006e24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e28:	f003 0307 	and.w	r3, r3, #7
 8006e2c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d104      	bne.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8006e34:	f7fd fca4 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 8006e38:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8006e3a:	f000 be44 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d10b      	bne.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 8006e44:	f7fd fb70 	bl	8004528 <HAL_RCC_GetSysClockFreq>
 8006e48:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006e4a:	f000 be3c 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006e4e:	bf00      	nop
 8006e50:	44020c00 	.word	0x44020c00
 8006e54:	03d09000 	.word	0x03d09000
 8006e58:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8006e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d108      	bne.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e62:	f107 0314 	add.w	r3, r7, #20
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7ff f814 	bl	8005e94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e70:	f000 be29 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006e74:	4b9f      	ldr	r3, [pc, #636]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e80:	d105      	bne.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8006e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e84:	2b03      	cmp	r3, #3
 8006e86:	d102      	bne.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 8006e88:	4b9b      	ldr	r3, [pc, #620]	@ (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 8006e8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e8c:	e023      	b.n	8006ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006e8e:	4b99      	ldr	r3, [pc, #612]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 0302 	and.w	r3, r3, #2
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	d10c      	bne.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e9c:	2b04      	cmp	r3, #4
 8006e9e:	d109      	bne.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ea0:	4b94      	ldr	r3, [pc, #592]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	08db      	lsrs	r3, r3, #3
 8006ea6:	f003 0303 	and.w	r3, r3, #3
 8006eaa:	4a94      	ldr	r2, [pc, #592]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8006eac:	fa22 f303 	lsr.w	r3, r2, r3
 8006eb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eb2:	e010      	b.n	8006ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8006eb4:	4b8f      	ldr	r3, [pc, #572]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ebc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ec0:	d105      	bne.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 8006ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec4:	2b05      	cmp	r3, #5
 8006ec6:	d102      	bne.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 8006ec8:	4b8d      	ldr	r3, [pc, #564]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8006eca:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ecc:	e003      	b.n	8006ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ed2:	f000 bdf8 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006ed6:	f000 bdf6 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8006eda:	4b86      	ldr	r3, [pc, #536]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006edc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006ee0:	f003 0308 	and.w	r3, r3, #8
 8006ee4:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8006ee6:	4b83      	ldr	r3, [pc, #524]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006ee8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006eec:	f003 0302 	and.w	r3, r3, #2
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d106      	bne.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8006ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d103      	bne.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 8006efa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006efe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f00:	e012      	b.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8006f02:	4b7c      	ldr	r3, [pc, #496]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006f04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f10:	d106      	bne.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 8006f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f14:	2b08      	cmp	r3, #8
 8006f16:	d103      	bne.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 8006f18:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006f1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f1e:	e003      	b.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8006f20:	2300      	movs	r3, #0
 8006f22:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8006f24:	f000 bdcf 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006f28:	f000 bdcd 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006f2c:	4b71      	ldr	r3, [pc, #452]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006f2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006f32:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006f36:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d104      	bne.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006f3e:	f7fd fc3b 	bl	80047b8 <HAL_RCC_GetPCLK1Freq>
 8006f42:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006f44:	f000 bdbf 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8006f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f4e:	d108      	bne.n	8006f62 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f50:	f107 0308 	add.w	r3, r7, #8
 8006f54:	4618      	mov	r0, r3
 8006f56:	f7ff f909 	bl	800616c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f5e:	f000 bdb2 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006f62:	4b64      	ldr	r3, [pc, #400]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 0302 	and.w	r3, r3, #2
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d10d      	bne.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 8006f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f74:	d109      	bne.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f76:	4b5f      	ldr	r3, [pc, #380]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	08db      	lsrs	r3, r3, #3
 8006f7c:	f003 0303 	and.w	r3, r3, #3
 8006f80:	4a5e      	ldr	r2, [pc, #376]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8006f82:	fa22 f303 	lsr.w	r3, r2, r3
 8006f86:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f88:	e011      	b.n	8006fae <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8006f8a:	4b5a      	ldr	r3, [pc, #360]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f96:	d106      	bne.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 8006f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f9a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f9e:	d102      	bne.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 8006fa0:	4b57      	ldr	r3, [pc, #348]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8006fa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fa4:	e003      	b.n	8006fae <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006faa:	f000 bd8c 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006fae:	f000 bd8a 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006fb2:	4b50      	ldr	r3, [pc, #320]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006fb4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006fb8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006fbc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d104      	bne.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006fc4:	f7fd fbf8 	bl	80047b8 <HAL_RCC_GetPCLK1Freq>
 8006fc8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006fca:	f000 bd7c 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8006fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006fd4:	d108      	bne.n	8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fd6:	f107 0308 	add.w	r3, r7, #8
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7ff f8c6 	bl	800616c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fe4:	f000 bd6f 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006fe8:	4b42      	ldr	r3, [pc, #264]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0302 	and.w	r3, r3, #2
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d10d      	bne.n	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 8006ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006ffa:	d109      	bne.n	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ffc:	4b3d      	ldr	r3, [pc, #244]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	08db      	lsrs	r3, r3, #3
 8007002:	f003 0303 	and.w	r3, r3, #3
 8007006:	4a3d      	ldr	r2, [pc, #244]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8007008:	fa22 f303 	lsr.w	r3, r2, r3
 800700c:	637b      	str	r3, [r7, #52]	@ 0x34
 800700e:	e011      	b.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8007010:	4b38      	ldr	r3, [pc, #224]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007018:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800701c:	d106      	bne.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 800701e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007020:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007024:	d102      	bne.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 8007026:	4b36      	ldr	r3, [pc, #216]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8007028:	637b      	str	r3, [r7, #52]	@ 0x34
 800702a:	e003      	b.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 800702c:	2300      	movs	r3, #0
 800702e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007030:	f000 bd49 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007034:	f000 bd47 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007038:	4b2e      	ldr	r3, [pc, #184]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800703a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800703e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007042:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8007044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007046:	2b00      	cmp	r3, #0
 8007048:	d104      	bne.n	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800704a:	f7fd fbe1 	bl	8004810 <HAL_RCC_GetPCLK3Freq>
 800704e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007050:	f000 bd39 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8007054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007056:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800705a:	d108      	bne.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800705c:	f107 0308 	add.w	r3, r7, #8
 8007060:	4618      	mov	r0, r3
 8007062:	f7ff f883 	bl	800616c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800706a:	f000 bd2c 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800706e:	4b21      	ldr	r3, [pc, #132]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0302 	and.w	r3, r3, #2
 8007076:	2b02      	cmp	r3, #2
 8007078:	d10d      	bne.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 800707a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007080:	d109      	bne.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007082:	4b1c      	ldr	r3, [pc, #112]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	08db      	lsrs	r3, r3, #3
 8007088:	f003 0303 	and.w	r3, r3, #3
 800708c:	4a1b      	ldr	r2, [pc, #108]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 800708e:	fa22 f303 	lsr.w	r3, r2, r3
 8007092:	637b      	str	r3, [r7, #52]	@ 0x34
 8007094:	e011      	b.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8007096:	4b17      	ldr	r3, [pc, #92]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800709e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070a2:	d106      	bne.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 80070a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070aa:	d102      	bne.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 80070ac:	4b14      	ldr	r3, [pc, #80]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80070ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80070b0:	e003      	b.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 80070b2:	2300      	movs	r3, #0
 80070b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070b6:	f000 bd06 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80070ba:	f000 bd04 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80070be:	4b0d      	ldr	r3, [pc, #52]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80070c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80070c4:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80070c8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80070ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d104      	bne.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80070d0:	f7fd fb72 	bl	80047b8 <HAL_RCC_GetPCLK1Freq>
 80070d4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80070d6:	f000 bcf6 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 80070da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070e0:	d110      	bne.n	8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070e2:	f107 0308 	add.w	r3, r7, #8
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7ff f840 	bl	800616c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070f0:	f000 bce9 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80070f4:	44020c00 	.word	0x44020c00
 80070f8:	007a1200 	.word	0x007a1200
 80070fc:	03d09000 	.word	0x03d09000
 8007100:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8007104:	4ba4      	ldr	r3, [pc, #656]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 0302 	and.w	r3, r3, #2
 800710c:	2b02      	cmp	r3, #2
 800710e:	d10e      	bne.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 8007110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007112:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007116:	d10a      	bne.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007118:	4b9f      	ldr	r3, [pc, #636]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	08db      	lsrs	r3, r3, #3
 800711e:	f003 0303 	and.w	r3, r3, #3
 8007122:	4a9e      	ldr	r2, [pc, #632]	@ (800739c <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8007124:	fa22 f303 	lsr.w	r3, r2, r3
 8007128:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800712a:	f000 bccc 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 800712e:	2300      	movs	r3, #0
 8007130:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007132:	f000 bcc8 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8007136:	4b98      	ldr	r3, [pc, #608]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007138:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800713c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007140:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8007142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007144:	2b00      	cmp	r3, #0
 8007146:	d104      	bne.n	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007148:	f7fd fb62 	bl	8004810 <HAL_RCC_GetPCLK3Freq>
 800714c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800714e:	f000 bcba 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 8007152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007154:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007158:	d108      	bne.n	800716c <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800715a:	f107 0308 	add.w	r3, r7, #8
 800715e:	4618      	mov	r0, r3
 8007160:	f7ff f804 	bl	800616c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007168:	f000 bcad 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 800716c:	4b8a      	ldr	r3, [pc, #552]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 0302 	and.w	r3, r3, #2
 8007174:	2b02      	cmp	r3, #2
 8007176:	d10e      	bne.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8007178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800717a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800717e:	d10a      	bne.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007180:	4b85      	ldr	r3, [pc, #532]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	08db      	lsrs	r3, r3, #3
 8007186:	f003 0303 	and.w	r3, r3, #3
 800718a:	4a84      	ldr	r2, [pc, #528]	@ (800739c <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 800718c:	fa22 f303 	lsr.w	r3, r2, r3
 8007190:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007192:	f000 bc98 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8007196:	2300      	movs	r3, #0
 8007198:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800719a:	f000 bc94 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800719e:	4b7e      	ldr	r3, [pc, #504]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80071a0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80071a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80071a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80071aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ac:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80071b0:	d056      	beq.n	8007260 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 80071b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80071b8:	f200 808b 	bhi.w	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 80071bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071c2:	d03e      	beq.n	8007242 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 80071c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071ca:	f200 8082 	bhi.w	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 80071ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071d4:	d027      	beq.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 80071d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071dc:	d879      	bhi.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 80071de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071e4:	d017      	beq.n	8007216 <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 80071e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071ec:	d871      	bhi.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 80071ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d004      	beq.n	80071fe <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 80071f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071fa:	d004      	beq.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 80071fc:	e069      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80071fe:	f7fd fb07 	bl	8004810 <HAL_RCC_GetPCLK3Freq>
 8007202:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007204:	e068      	b.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007206:	f107 0314 	add.w	r3, r7, #20
 800720a:	4618      	mov	r0, r3
 800720c:	f7fe fe42 	bl	8005e94 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007214:	e060      	b.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007216:	f107 0308 	add.w	r3, r7, #8
 800721a:	4618      	mov	r0, r3
 800721c:	f7fe ffa6 	bl	800616c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007224:	e058      	b.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007226:	4b5c      	ldr	r3, [pc, #368]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007228:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800722c:	f003 0302 	and.w	r3, r3, #2
 8007230:	2b02      	cmp	r3, #2
 8007232:	d103      	bne.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 8007234:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007238:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800723a:	e04d      	b.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 800723c:	2300      	movs	r3, #0
 800723e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007240:	e04a      	b.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007242:	4b55      	ldr	r3, [pc, #340]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007244:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007248:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800724c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007250:	d103      	bne.n	800725a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 8007252:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007256:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007258:	e03e      	b.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 800725a:	2300      	movs	r3, #0
 800725c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800725e:	e03b      	b.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007260:	4b4d      	ldr	r3, [pc, #308]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007262:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007266:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800726a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800726c:	4b4a      	ldr	r3, [pc, #296]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 0302 	and.w	r3, r3, #2
 8007274:	2b02      	cmp	r3, #2
 8007276:	d10c      	bne.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 8007278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800727a:	2b00      	cmp	r3, #0
 800727c:	d109      	bne.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800727e:	4b46      	ldr	r3, [pc, #280]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	08db      	lsrs	r3, r3, #3
 8007284:	f003 0303 	and.w	r3, r3, #3
 8007288:	4a44      	ldr	r2, [pc, #272]	@ (800739c <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 800728a:	fa22 f303 	lsr.w	r3, r2, r3
 800728e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007290:	e01e      	b.n	80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007292:	4b41      	ldr	r3, [pc, #260]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800729a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800729e:	d106      	bne.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80072a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072a6:	d102      	bne.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80072a8:	4b3d      	ldr	r3, [pc, #244]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 80072aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80072ac:	e010      	b.n	80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80072ae:	4b3a      	ldr	r3, [pc, #232]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072ba:	d106      	bne.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 80072bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072c2:	d102      	bne.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80072c4:	4b37      	ldr	r3, [pc, #220]	@ (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 80072c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80072c8:	e002      	b.n	80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80072ca:	2300      	movs	r3, #0
 80072cc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80072ce:	e003      	b.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 80072d0:	e002      	b.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 80072d2:	2300      	movs	r3, #0
 80072d4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80072d6:	bf00      	nop
          }
        }
        break;
 80072d8:	e3f5      	b.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80072da:	4b2f      	ldr	r3, [pc, #188]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80072dc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80072e0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80072e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80072e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80072ec:	d05f      	beq.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 80072ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80072f4:	f200 8094 	bhi.w	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80072f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072fe:	d03f      	beq.n	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 8007300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007302:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007306:	f200 808b 	bhi.w	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800730a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007310:	d028      	beq.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8007312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007314:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007318:	f200 8082 	bhi.w	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800731c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800731e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007322:	d017      	beq.n	8007354 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 8007324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007326:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800732a:	d879      	bhi.n	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800732c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732e:	2b00      	cmp	r3, #0
 8007330:	d004      	beq.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8007332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007334:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007338:	d004      	beq.n	8007344 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 800733a:	e071      	b.n	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800733c:	f7fd fa3c 	bl	80047b8 <HAL_RCC_GetPCLK1Freq>
 8007340:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007342:	e070      	b.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007344:	f107 0314 	add.w	r3, r7, #20
 8007348:	4618      	mov	r0, r3
 800734a:	f7fe fda3 	bl	8005e94 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007352:	e068      	b.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007354:	f107 0308 	add.w	r3, r7, #8
 8007358:	4618      	mov	r0, r3
 800735a:	f7fe ff07 	bl	800616c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007362:	e060      	b.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007364:	4b0c      	ldr	r3, [pc, #48]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007366:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800736a:	f003 0302 	and.w	r3, r3, #2
 800736e:	2b02      	cmp	r3, #2
 8007370:	d103      	bne.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 8007372:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007376:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007378:	e055      	b.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 800737a:	2300      	movs	r3, #0
 800737c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800737e:	e052      	b.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007380:	4b05      	ldr	r3, [pc, #20]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007382:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007386:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800738a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800738e:	d10b      	bne.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 8007390:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007394:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007396:	e046      	b.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8007398:	44020c00 	.word	0x44020c00
 800739c:	03d09000 	.word	0x03d09000
 80073a0:	003d0900 	.word	0x003d0900
 80073a4:	007a1200 	.word	0x007a1200
              frequency = 0;
 80073a8:	2300      	movs	r3, #0
 80073aa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80073ac:	e03b      	b.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80073ae:	4bae      	ldr	r3, [pc, #696]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80073b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80073b4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80073b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80073ba:	4bab      	ldr	r3, [pc, #684]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 0302 	and.w	r3, r3, #2
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d10c      	bne.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 80073c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d109      	bne.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80073cc:	4ba6      	ldr	r3, [pc, #664]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	08db      	lsrs	r3, r3, #3
 80073d2:	f003 0303 	and.w	r3, r3, #3
 80073d6:	4aa5      	ldr	r2, [pc, #660]	@ (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 80073d8:	fa22 f303 	lsr.w	r3, r2, r3
 80073dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80073de:	e01e      	b.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80073e0:	4ba1      	ldr	r3, [pc, #644]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073ec:	d106      	bne.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 80073ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073f4:	d102      	bne.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80073f6:	4b9e      	ldr	r3, [pc, #632]	@ (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 80073f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80073fa:	e010      	b.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80073fc:	4b9a      	ldr	r3, [pc, #616]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007404:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007408:	d106      	bne.n	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 800740a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800740c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007410:	d102      	bne.n	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007412:	4b98      	ldr	r3, [pc, #608]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8007414:	637b      	str	r3, [r7, #52]	@ 0x34
 8007416:	e002      	b.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007418:	2300      	movs	r3, #0
 800741a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800741c:	e003      	b.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 800741e:	e002      	b.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 8007420:	2300      	movs	r3, #0
 8007422:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007424:	bf00      	nop
          }
        }
        break;
 8007426:	e34e      	b.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007428:	4b8f      	ldr	r3, [pc, #572]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800742a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800742e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007432:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8007434:	4b8c      	ldr	r3, [pc, #560]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800743c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007440:	d105      	bne.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 8007442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007444:	2b00      	cmp	r3, #0
 8007446:	d102      	bne.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 8007448:	4b8a      	ldr	r3, [pc, #552]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 800744a:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800744c:	e33b      	b.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800744e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007450:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007454:	d107      	bne.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007456:	f107 0320 	add.w	r3, r7, #32
 800745a:	4618      	mov	r0, r3
 800745c:	f7fe fbae 	bl	8005bbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007462:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007464:	e32f      	b.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8007466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007468:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800746c:	d107      	bne.n	800747e <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800746e:	f107 0314 	add.w	r3, r7, #20
 8007472:	4618      	mov	r0, r3
 8007474:	f7fe fd0e 	bl	8005e94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800747c:	e323      	b.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 800747e:	2300      	movs	r3, #0
 8007480:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007482:	e320      	b.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007484:	4b78      	ldr	r3, [pc, #480]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800748a:	f003 0307 	and.w	r3, r3, #7
 800748e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007492:	2b04      	cmp	r3, #4
 8007494:	d860      	bhi.n	8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 8007496:	a201      	add	r2, pc, #4	@ (adr r2, 800749c <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8007498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800749c:	080074b1 	.word	0x080074b1
 80074a0:	080074c1 	.word	0x080074c1
 80074a4:	080074d1 	.word	0x080074d1
 80074a8:	080074e1 	.word	0x080074e1
 80074ac:	080074e7 	.word	0x080074e7
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074b0:	f107 0320 	add.w	r3, r7, #32
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7fe fb81 	bl	8005bbc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80074ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074bc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80074be:	e04e      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074c0:	f107 0314 	add.w	r3, r7, #20
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7fe fce5 	bl	8005e94 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80074ce:	e046      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074d0:	f107 0308 	add.w	r3, r7, #8
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7fe fe49 	bl	800616c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80074de:	e03e      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80074e0:	4b65      	ldr	r3, [pc, #404]	@ (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 80074e2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80074e4:	e03b      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80074e6:	4b60      	ldr	r3, [pc, #384]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80074e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80074ec:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80074f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074f2:	4b5d      	ldr	r3, [pc, #372]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 0302 	and.w	r3, r3, #2
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d10c      	bne.n	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 80074fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007500:	2b00      	cmp	r3, #0
 8007502:	d109      	bne.n	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007504:	4b58      	ldr	r3, [pc, #352]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	08db      	lsrs	r3, r3, #3
 800750a:	f003 0303 	and.w	r3, r3, #3
 800750e:	4a57      	ldr	r2, [pc, #348]	@ (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8007510:	fa22 f303 	lsr.w	r3, r2, r3
 8007514:	637b      	str	r3, [r7, #52]	@ 0x34
 8007516:	e01e      	b.n	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007518:	4b53      	ldr	r3, [pc, #332]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007524:	d106      	bne.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 8007526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007528:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800752c:	d102      	bne.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800752e:	4b50      	ldr	r3, [pc, #320]	@ (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8007530:	637b      	str	r3, [r7, #52]	@ 0x34
 8007532:	e010      	b.n	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007534:	4b4c      	ldr	r3, [pc, #304]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800753c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007540:	d106      	bne.n	8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 8007542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007544:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007548:	d102      	bne.n	8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800754a:	4b4a      	ldr	r3, [pc, #296]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 800754c:	637b      	str	r3, [r7, #52]	@ 0x34
 800754e:	e002      	b.n	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007550:	2300      	movs	r3, #0
 8007552:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007554:	e003      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8007556:	e002      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 8007558:	2300      	movs	r3, #0
 800755a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800755c:	bf00      	nop
          }
        }
        break;
 800755e:	e2b2      	b.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007560:	4b41      	ldr	r3, [pc, #260]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007566:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800756a:	633b      	str	r3, [r7, #48]	@ 0x30
 800756c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800756e:	2b20      	cmp	r3, #32
 8007570:	f200 80a4 	bhi.w	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 8007574:	a201      	add	r2, pc, #4	@ (adr r2, 800757c <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 8007576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757a:	bf00      	nop
 800757c:	08007601 	.word	0x08007601
 8007580:	080076bd 	.word	0x080076bd
 8007584:	080076bd 	.word	0x080076bd
 8007588:	080076bd 	.word	0x080076bd
 800758c:	080076bd 	.word	0x080076bd
 8007590:	080076bd 	.word	0x080076bd
 8007594:	080076bd 	.word	0x080076bd
 8007598:	080076bd 	.word	0x080076bd
 800759c:	08007611 	.word	0x08007611
 80075a0:	080076bd 	.word	0x080076bd
 80075a4:	080076bd 	.word	0x080076bd
 80075a8:	080076bd 	.word	0x080076bd
 80075ac:	080076bd 	.word	0x080076bd
 80075b0:	080076bd 	.word	0x080076bd
 80075b4:	080076bd 	.word	0x080076bd
 80075b8:	080076bd 	.word	0x080076bd
 80075bc:	08007621 	.word	0x08007621
 80075c0:	080076bd 	.word	0x080076bd
 80075c4:	080076bd 	.word	0x080076bd
 80075c8:	080076bd 	.word	0x080076bd
 80075cc:	080076bd 	.word	0x080076bd
 80075d0:	080076bd 	.word	0x080076bd
 80075d4:	080076bd 	.word	0x080076bd
 80075d8:	080076bd 	.word	0x080076bd
 80075dc:	08007631 	.word	0x08007631
 80075e0:	080076bd 	.word	0x080076bd
 80075e4:	080076bd 	.word	0x080076bd
 80075e8:	080076bd 	.word	0x080076bd
 80075ec:	080076bd 	.word	0x080076bd
 80075f0:	080076bd 	.word	0x080076bd
 80075f4:	080076bd 	.word	0x080076bd
 80075f8:	080076bd 	.word	0x080076bd
 80075fc:	08007637 	.word	0x08007637
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007600:	f107 0320 	add.w	r3, r7, #32
 8007604:	4618      	mov	r0, r3
 8007606:	f7fe fad9 	bl	8005bbc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800760a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800760e:	e058      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007610:	f107 0314 	add.w	r3, r7, #20
 8007614:	4618      	mov	r0, r3
 8007616:	f7fe fc3d 	bl	8005e94 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800761e:	e050      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007620:	f107 0308 	add.w	r3, r7, #8
 8007624:	4618      	mov	r0, r3
 8007626:	f7fe fda1 	bl	800616c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800762e:	e048      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007630:	4b11      	ldr	r3, [pc, #68]	@ (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8007632:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007634:	e045      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007636:	4b0c      	ldr	r3, [pc, #48]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007638:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800763c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007640:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007642:	4b09      	ldr	r3, [pc, #36]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 0302 	and.w	r3, r3, #2
 800764a:	2b02      	cmp	r3, #2
 800764c:	d116      	bne.n	800767c <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 800764e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007650:	2b00      	cmp	r3, #0
 8007652:	d113      	bne.n	800767c <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007654:	4b04      	ldr	r3, [pc, #16]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	08db      	lsrs	r3, r3, #3
 800765a:	f003 0303 	and.w	r3, r3, #3
 800765e:	4a03      	ldr	r2, [pc, #12]	@ (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8007660:	fa22 f303 	lsr.w	r3, r2, r3
 8007664:	637b      	str	r3, [r7, #52]	@ 0x34
 8007666:	e028      	b.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8007668:	44020c00 	.word	0x44020c00
 800766c:	03d09000 	.word	0x03d09000
 8007670:	003d0900 	.word	0x003d0900
 8007674:	007a1200 	.word	0x007a1200
 8007678:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800767c:	4b95      	ldr	r3, [pc, #596]	@ (80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007684:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007688:	d106      	bne.n	8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 800768a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800768c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007690:	d102      	bne.n	8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007692:	4b91      	ldr	r3, [pc, #580]	@ (80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8007694:	637b      	str	r3, [r7, #52]	@ 0x34
 8007696:	e010      	b.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007698:	4b8e      	ldr	r3, [pc, #568]	@ (80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076a4:	d106      	bne.n	80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 80076a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076ac:	d102      	bne.n	80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80076ae:	4b8b      	ldr	r3, [pc, #556]	@ (80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80076b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80076b2:	e002      	b.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80076b4:	2300      	movs	r3, #0
 80076b6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80076b8:	e003      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 80076ba:	e002      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 80076bc:	2300      	movs	r3, #0
 80076be:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80076c0:	bf00      	nop
          }
        }
        break;
 80076c2:	e200      	b.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80076c4:	4b83      	ldr	r3, [pc, #524]	@ (80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80076c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80076ca:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80076ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80076d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076d6:	d031      	beq.n	800773c <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 80076d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076de:	d866      	bhi.n	80077ae <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 80076e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80076e4:	d027      	beq.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 80076e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e8:	2bc0      	cmp	r3, #192	@ 0xc0
 80076ea:	d860      	bhi.n	80077ae <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 80076ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ee:	2b80      	cmp	r3, #128	@ 0x80
 80076f0:	d019      	beq.n	8007726 <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 80076f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f4:	2b80      	cmp	r3, #128	@ 0x80
 80076f6:	d85a      	bhi.n	80077ae <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 80076f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d003      	beq.n	8007706 <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 80076fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007700:	2b40      	cmp	r3, #64	@ 0x40
 8007702:	d008      	beq.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 8007704:	e053      	b.n	80077ae <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007706:	f107 0320 	add.w	r3, r7, #32
 800770a:	4618      	mov	r0, r3
 800770c:	f7fe fa56 	bl	8005bbc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007712:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007714:	e04e      	b.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007716:	f107 0314 	add.w	r3, r7, #20
 800771a:	4618      	mov	r0, r3
 800771c:	f7fe fbba 	bl	8005e94 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007724:	e046      	b.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007726:	f107 0308 	add.w	r3, r7, #8
 800772a:	4618      	mov	r0, r3
 800772c:	f7fe fd1e 	bl	800616c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007734:	e03e      	b.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007736:	4b6a      	ldr	r3, [pc, #424]	@ (80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 8007738:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800773a:	e03b      	b.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800773c:	4b65      	ldr	r3, [pc, #404]	@ (80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800773e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007742:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007746:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007748:	4b62      	ldr	r3, [pc, #392]	@ (80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 0302 	and.w	r3, r3, #2
 8007750:	2b02      	cmp	r3, #2
 8007752:	d10c      	bne.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8007754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007756:	2b00      	cmp	r3, #0
 8007758:	d109      	bne.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800775a:	4b5e      	ldr	r3, [pc, #376]	@ (80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	08db      	lsrs	r3, r3, #3
 8007760:	f003 0303 	and.w	r3, r3, #3
 8007764:	4a5f      	ldr	r2, [pc, #380]	@ (80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8007766:	fa22 f303 	lsr.w	r3, r2, r3
 800776a:	637b      	str	r3, [r7, #52]	@ 0x34
 800776c:	e01e      	b.n	80077ac <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800776e:	4b59      	ldr	r3, [pc, #356]	@ (80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007776:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800777a:	d106      	bne.n	800778a <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 800777c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800777e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007782:	d102      	bne.n	800778a <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007784:	4b54      	ldr	r3, [pc, #336]	@ (80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8007786:	637b      	str	r3, [r7, #52]	@ 0x34
 8007788:	e010      	b.n	80077ac <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800778a:	4b52      	ldr	r3, [pc, #328]	@ (80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007792:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007796:	d106      	bne.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 8007798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800779a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800779e:	d102      	bne.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80077a0:	4b4e      	ldr	r3, [pc, #312]	@ (80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80077a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80077a4:	e002      	b.n	80077ac <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80077a6:	2300      	movs	r3, #0
 80077a8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80077aa:	e003      	b.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 80077ac:	e002      	b.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 80077ae:	2300      	movs	r3, #0
 80077b0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80077b2:	bf00      	nop
          }
        }
        break;
 80077b4:	e187      	b.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80077b6:	4b47      	ldr	r3, [pc, #284]	@ (80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80077b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80077bc:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80077c0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80077c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d103      	bne.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80077c8:	f7fd f80c 	bl	80047e4 <HAL_RCC_GetPCLK2Freq>
 80077cc:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80077ce:	e17a      	b.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80077d0:	4b40      	ldr	r3, [pc, #256]	@ (80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077dc:	d10b      	bne.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 80077de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077e4:	d107      	bne.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077e6:	f107 0314 	add.w	r3, r7, #20
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7fe fb52 	bl	8005e94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80077f4:	e045      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 80077f6:	4b37      	ldr	r3, [pc, #220]	@ (80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007802:	d10b      	bne.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 8007804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007806:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800780a:	d107      	bne.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800780c:	f107 0308 	add.w	r3, r7, #8
 8007810:	4618      	mov	r0, r3
 8007812:	f7fe fcab 	bl	800616c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	637b      	str	r3, [r7, #52]	@ 0x34
 800781a:	e032      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800781c:	4b2d      	ldr	r3, [pc, #180]	@ (80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 0302 	and.w	r3, r3, #2
 8007824:	2b02      	cmp	r3, #2
 8007826:	d10d      	bne.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 8007828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800782e:	d109      	bne.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007830:	4b28      	ldr	r3, [pc, #160]	@ (80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	08db      	lsrs	r3, r3, #3
 8007836:	f003 0303 	and.w	r3, r3, #3
 800783a:	4a2a      	ldr	r2, [pc, #168]	@ (80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 800783c:	fa22 f303 	lsr.w	r3, r2, r3
 8007840:	637b      	str	r3, [r7, #52]	@ 0x34
 8007842:	e01e      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8007844:	4b23      	ldr	r3, [pc, #140]	@ (80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800784c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007850:	d106      	bne.n	8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 8007852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007854:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007858:	d102      	bne.n	8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 800785a:	4b1f      	ldr	r3, [pc, #124]	@ (80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 800785c:	637b      	str	r3, [r7, #52]	@ 0x34
 800785e:	e010      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8007860:	4b1c      	ldr	r3, [pc, #112]	@ (80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007868:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800786c:	d106      	bne.n	800787c <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 800786e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007870:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007874:	d102      	bne.n	800787c <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 8007876:	4b19      	ldr	r3, [pc, #100]	@ (80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8007878:	637b      	str	r3, [r7, #52]	@ 0x34
 800787a:	e002      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 800787c:	2300      	movs	r3, #0
 800787e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007880:	e121      	b.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007882:	e120      	b.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007884:	4b13      	ldr	r3, [pc, #76]	@ (80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007886:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800788a:	f003 0303 	and.w	r3, r3, #3
 800788e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007892:	2b03      	cmp	r3, #3
 8007894:	d861      	bhi.n	800795a <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 8007896:	a201      	add	r2, pc, #4	@ (adr r2, 800789c <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 8007898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800789c:	080078ad 	.word	0x080078ad
 80078a0:	080078b5 	.word	0x080078b5
 80078a4:	080078c5 	.word	0x080078c5
 80078a8:	080078e9 	.word	0x080078e9

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 80078ac:	f7fc ff68 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 80078b0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80078b2:	e055      	b.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078b4:	f107 0320 	add.w	r3, r7, #32
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7fe f97f 	bl	8005bbc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80078be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80078c2:	e04d      	b.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078c4:	f107 0314 	add.w	r3, r7, #20
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7fe fae3 	bl	8005e94 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80078d2:	e045      	b.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 80078d4:	44020c00 	.word	0x44020c00
 80078d8:	003d0900 	.word	0x003d0900
 80078dc:	007a1200 	.word	0x007a1200
 80078e0:	00bb8000 	.word	0x00bb8000
 80078e4:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80078e8:	4b79      	ldr	r3, [pc, #484]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80078ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80078ee:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80078f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078f4:	4b76      	ldr	r3, [pc, #472]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0302 	and.w	r3, r3, #2
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d10c      	bne.n	800791a <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 8007900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007902:	2b00      	cmp	r3, #0
 8007904:	d109      	bne.n	800791a <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007906:	4b72      	ldr	r3, [pc, #456]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	08db      	lsrs	r3, r3, #3
 800790c:	f003 0303 	and.w	r3, r3, #3
 8007910:	4a70      	ldr	r2, [pc, #448]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 8007912:	fa22 f303 	lsr.w	r3, r2, r3
 8007916:	637b      	str	r3, [r7, #52]	@ 0x34
 8007918:	e01e      	b.n	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800791a:	4b6d      	ldr	r3, [pc, #436]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007922:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007926:	d106      	bne.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 8007928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800792a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800792e:	d102      	bne.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007930:	4b69      	ldr	r3, [pc, #420]	@ (8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 8007932:	637b      	str	r3, [r7, #52]	@ 0x34
 8007934:	e010      	b.n	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007936:	4b66      	ldr	r3, [pc, #408]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800793e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007942:	d106      	bne.n	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8007944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007946:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800794a:	d102      	bne.n	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800794c:	4b63      	ldr	r3, [pc, #396]	@ (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 800794e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007950:	e002      	b.n	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007952:	2300      	movs	r3, #0
 8007954:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007956:	e003      	b.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8007958:	e002      	b.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 800795a:	2300      	movs	r3, #0
 800795c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800795e:	bf00      	nop
          }
        }
        break;
 8007960:	e0b1      	b.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8007962:	4b5b      	ldr	r3, [pc, #364]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007964:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007968:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800796c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800796e:	4b58      	ldr	r3, [pc, #352]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007970:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007974:	f003 0302 	and.w	r3, r3, #2
 8007978:	2b02      	cmp	r3, #2
 800797a:	d106      	bne.n	800798a <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 800797c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800797e:	2b00      	cmp	r3, #0
 8007980:	d103      	bne.n	800798a <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 8007982:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007986:	637b      	str	r3, [r7, #52]	@ 0x34
 8007988:	e01f      	b.n	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800798a:	4b51      	ldr	r3, [pc, #324]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800798c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007990:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007994:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007998:	d106      	bne.n	80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 800799a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800799c:	2b40      	cmp	r3, #64	@ 0x40
 800799e:	d103      	bne.n	80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 80079a0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80079a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80079a6:	e010      	b.n	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 80079a8:	4b49      	ldr	r3, [pc, #292]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079b4:	d106      	bne.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 80079b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b8:	2b80      	cmp	r3, #128	@ 0x80
 80079ba:	d103      	bne.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 80079bc:	f248 0312 	movw	r3, #32786	@ 0x8012
 80079c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80079c2:	e002      	b.n	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 80079c4:	2300      	movs	r3, #0
 80079c6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80079c8:	e07d      	b.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80079ca:	e07c      	b.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80079cc:	4b40      	ldr	r3, [pc, #256]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80079ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80079d2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80079d6:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80079d8:	4b3d      	ldr	r3, [pc, #244]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80079e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079e4:	d105      	bne.n	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 80079e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d102      	bne.n	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 80079ec:	4b3c      	ldr	r3, [pc, #240]	@ (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 80079ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80079f0:	e031      	b.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80079f2:	4b37      	ldr	r3, [pc, #220]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80079fe:	d10a      	bne.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 8007a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a02:	2b10      	cmp	r3, #16
 8007a04:	d107      	bne.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a06:	f107 0320 	add.w	r3, r7, #32
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7fe f8d6 	bl	8005bbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a12:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a14:	e01f      	b.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8007a16:	4b2e      	ldr	r3, [pc, #184]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007a18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a1c:	f003 0302 	and.w	r3, r3, #2
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d106      	bne.n	8007a32 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 8007a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a26:	2b20      	cmp	r3, #32
 8007a28:	d103      	bne.n	8007a32 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 8007a2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a30:	e011      	b.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8007a32:	4b27      	ldr	r3, [pc, #156]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007a34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a40:	d106      	bne.n	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 8007a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a44:	2b30      	cmp	r3, #48	@ 0x30
 8007a46:	d103      	bne.n	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 8007a48:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007a4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a4e:	e002      	b.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8007a50:	2300      	movs	r3, #0
 8007a52:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8007a54:	e037      	b.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007a56:	e036      	b.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8007a58:	4b1d      	ldr	r3, [pc, #116]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007a5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007a5e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007a62:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8007a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a66:	2b10      	cmp	r3, #16
 8007a68:	d107      	bne.n	8007a7a <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a6a:	f107 0320 	add.w	r3, r7, #32
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7fe f8a4 	bl	8005bbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a76:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007a78:	e025      	b.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8007a7a:	4b15      	ldr	r3, [pc, #84]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a86:	d10a      	bne.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 8007a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a8a:	2b20      	cmp	r3, #32
 8007a8c:	d107      	bne.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a8e:	f107 0308 	add.w	r3, r7, #8
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7fe fb6a 	bl	800616c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a9c:	e00f      	b.n	8007abe <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8007a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007aa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007aaa:	d105      	bne.n	8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 8007aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aae:	2b30      	cmp	r3, #48	@ 0x30
 8007ab0:	d102      	bne.n	8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 8007ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8007ab4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ab6:	e002      	b.n	8007abe <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8007abc:	e003      	b.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007abe:	e002      	b.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ac4:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 8007ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	373c      	adds	r7, #60	@ 0x3c
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd90      	pop	{r4, r7, pc}
 8007ad0:	44020c00 	.word	0x44020c00
 8007ad4:	03d09000 	.word	0x03d09000
 8007ad8:	003d0900 	.word	0x003d0900
 8007adc:	007a1200 	.word	0x007a1200
 8007ae0:	02dc6c00 	.word	0x02dc6c00

08007ae4 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8007aec:	4b48      	ldr	r3, [pc, #288]	@ (8007c10 <RCCEx_PLL2_Config+0x12c>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a47      	ldr	r2, [pc, #284]	@ (8007c10 <RCCEx_PLL2_Config+0x12c>)
 8007af2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007af6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007af8:	f7fa fbb4 	bl	8002264 <HAL_GetTick>
 8007afc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007afe:	e008      	b.n	8007b12 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b00:	f7fa fbb0 	bl	8002264 <HAL_GetTick>
 8007b04:	4602      	mov	r2, r0
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d901      	bls.n	8007b12 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e07a      	b.n	8007c08 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b12:	4b3f      	ldr	r3, [pc, #252]	@ (8007c10 <RCCEx_PLL2_Config+0x12c>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1f0      	bne.n	8007b00 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007b1e:	4b3c      	ldr	r3, [pc, #240]	@ (8007c10 <RCCEx_PLL2_Config+0x12c>)
 8007b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b22:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007b26:	f023 0303 	bic.w	r3, r3, #3
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	6811      	ldr	r1, [r2, #0]
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	6852      	ldr	r2, [r2, #4]
 8007b32:	0212      	lsls	r2, r2, #8
 8007b34:	430a      	orrs	r2, r1
 8007b36:	4936      	ldr	r1, [pc, #216]	@ (8007c10 <RCCEx_PLL2_Config+0x12c>)
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	3b01      	subs	r3, #1
 8007b42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	025b      	lsls	r3, r3, #9
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	431a      	orrs	r2, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	3b01      	subs	r3, #1
 8007b58:	041b      	lsls	r3, r3, #16
 8007b5a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007b5e:	431a      	orrs	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	695b      	ldr	r3, [r3, #20]
 8007b64:	3b01      	subs	r3, #1
 8007b66:	061b      	lsls	r3, r3, #24
 8007b68:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007b6c:	4928      	ldr	r1, [pc, #160]	@ (8007c10 <RCCEx_PLL2_Config+0x12c>)
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007b72:	4b27      	ldr	r3, [pc, #156]	@ (8007c10 <RCCEx_PLL2_Config+0x12c>)
 8007b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b76:	f023 020c 	bic.w	r2, r3, #12
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	699b      	ldr	r3, [r3, #24]
 8007b7e:	4924      	ldr	r1, [pc, #144]	@ (8007c10 <RCCEx_PLL2_Config+0x12c>)
 8007b80:	4313      	orrs	r3, r2
 8007b82:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8007b84:	4b22      	ldr	r3, [pc, #136]	@ (8007c10 <RCCEx_PLL2_Config+0x12c>)
 8007b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b88:	f023 0220 	bic.w	r2, r3, #32
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	69db      	ldr	r3, [r3, #28]
 8007b90:	491f      	ldr	r1, [pc, #124]	@ (8007c10 <RCCEx_PLL2_Config+0x12c>)
 8007b92:	4313      	orrs	r3, r2
 8007b94:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007b96:	4b1e      	ldr	r3, [pc, #120]	@ (8007c10 <RCCEx_PLL2_Config+0x12c>)
 8007b98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b9e:	491c      	ldr	r1, [pc, #112]	@ (8007c10 <RCCEx_PLL2_Config+0x12c>)
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8007ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8007c10 <RCCEx_PLL2_Config+0x12c>)
 8007ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ba8:	4a19      	ldr	r2, [pc, #100]	@ (8007c10 <RCCEx_PLL2_Config+0x12c>)
 8007baa:	f023 0310 	bic.w	r3, r3, #16
 8007bae:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8007bb0:	4b17      	ldr	r3, [pc, #92]	@ (8007c10 <RCCEx_PLL2_Config+0x12c>)
 8007bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bb4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007bb8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	6a12      	ldr	r2, [r2, #32]
 8007bc0:	00d2      	lsls	r2, r2, #3
 8007bc2:	4913      	ldr	r1, [pc, #76]	@ (8007c10 <RCCEx_PLL2_Config+0x12c>)
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8007bc8:	4b11      	ldr	r3, [pc, #68]	@ (8007c10 <RCCEx_PLL2_Config+0x12c>)
 8007bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bcc:	4a10      	ldr	r2, [pc, #64]	@ (8007c10 <RCCEx_PLL2_Config+0x12c>)
 8007bce:	f043 0310 	orr.w	r3, r3, #16
 8007bd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8007bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8007c10 <RCCEx_PLL2_Config+0x12c>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8007c10 <RCCEx_PLL2_Config+0x12c>)
 8007bda:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007bde:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007be0:	f7fa fb40 	bl	8002264 <HAL_GetTick>
 8007be4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007be6:	e008      	b.n	8007bfa <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007be8:	f7fa fb3c 	bl	8002264 <HAL_GetTick>
 8007bec:	4602      	mov	r2, r0
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d901      	bls.n	8007bfa <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e006      	b.n	8007c08 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007bfa:	4b05      	ldr	r3, [pc, #20]	@ (8007c10 <RCCEx_PLL2_Config+0x12c>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d0f0      	beq.n	8007be8 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8007c06:	2300      	movs	r3, #0

}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	44020c00 	.word	0x44020c00

08007c14 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8007c1c:	4b48      	ldr	r3, [pc, #288]	@ (8007d40 <RCCEx_PLL3_Config+0x12c>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a47      	ldr	r2, [pc, #284]	@ (8007d40 <RCCEx_PLL3_Config+0x12c>)
 8007c22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c26:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007c28:	f7fa fb1c 	bl	8002264 <HAL_GetTick>
 8007c2c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c2e:	e008      	b.n	8007c42 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007c30:	f7fa fb18 	bl	8002264 <HAL_GetTick>
 8007c34:	4602      	mov	r2, r0
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	1ad3      	subs	r3, r2, r3
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d901      	bls.n	8007c42 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	e07a      	b.n	8007d38 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c42:	4b3f      	ldr	r3, [pc, #252]	@ (8007d40 <RCCEx_PLL3_Config+0x12c>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1f0      	bne.n	8007c30 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007c4e:	4b3c      	ldr	r3, [pc, #240]	@ (8007d40 <RCCEx_PLL3_Config+0x12c>)
 8007c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c52:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007c56:	f023 0303 	bic.w	r3, r3, #3
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	6811      	ldr	r1, [r2, #0]
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	6852      	ldr	r2, [r2, #4]
 8007c62:	0212      	lsls	r2, r2, #8
 8007c64:	430a      	orrs	r2, r1
 8007c66:	4936      	ldr	r1, [pc, #216]	@ (8007d40 <RCCEx_PLL3_Config+0x12c>)
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	630b      	str	r3, [r1, #48]	@ 0x30
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	3b01      	subs	r3, #1
 8007c72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	025b      	lsls	r3, r3, #9
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	431a      	orrs	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	3b01      	subs	r3, #1
 8007c88:	041b      	lsls	r3, r3, #16
 8007c8a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007c8e:	431a      	orrs	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	695b      	ldr	r3, [r3, #20]
 8007c94:	3b01      	subs	r3, #1
 8007c96:	061b      	lsls	r3, r3, #24
 8007c98:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007c9c:	4928      	ldr	r1, [pc, #160]	@ (8007d40 <RCCEx_PLL3_Config+0x12c>)
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007ca2:	4b27      	ldr	r3, [pc, #156]	@ (8007d40 <RCCEx_PLL3_Config+0x12c>)
 8007ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ca6:	f023 020c 	bic.w	r2, r3, #12
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	4924      	ldr	r1, [pc, #144]	@ (8007d40 <RCCEx_PLL3_Config+0x12c>)
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8007cb4:	4b22      	ldr	r3, [pc, #136]	@ (8007d40 <RCCEx_PLL3_Config+0x12c>)
 8007cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cb8:	f023 0220 	bic.w	r2, r3, #32
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	69db      	ldr	r3, [r3, #28]
 8007cc0:	491f      	ldr	r1, [pc, #124]	@ (8007d40 <RCCEx_PLL3_Config+0x12c>)
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8007d40 <RCCEx_PLL3_Config+0x12c>)
 8007cc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cce:	491c      	ldr	r1, [pc, #112]	@ (8007d40 <RCCEx_PLL3_Config+0x12c>)
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8007cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8007d40 <RCCEx_PLL3_Config+0x12c>)
 8007cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cd8:	4a19      	ldr	r2, [pc, #100]	@ (8007d40 <RCCEx_PLL3_Config+0x12c>)
 8007cda:	f023 0310 	bic.w	r3, r3, #16
 8007cde:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8007ce0:	4b17      	ldr	r3, [pc, #92]	@ (8007d40 <RCCEx_PLL3_Config+0x12c>)
 8007ce2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ce4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007ce8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	6a12      	ldr	r2, [r2, #32]
 8007cf0:	00d2      	lsls	r2, r2, #3
 8007cf2:	4913      	ldr	r1, [pc, #76]	@ (8007d40 <RCCEx_PLL3_Config+0x12c>)
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8007cf8:	4b11      	ldr	r3, [pc, #68]	@ (8007d40 <RCCEx_PLL3_Config+0x12c>)
 8007cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cfc:	4a10      	ldr	r2, [pc, #64]	@ (8007d40 <RCCEx_PLL3_Config+0x12c>)
 8007cfe:	f043 0310 	orr.w	r3, r3, #16
 8007d02:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8007d04:	4b0e      	ldr	r3, [pc, #56]	@ (8007d40 <RCCEx_PLL3_Config+0x12c>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a0d      	ldr	r2, [pc, #52]	@ (8007d40 <RCCEx_PLL3_Config+0x12c>)
 8007d0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d0e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007d10:	f7fa faa8 	bl	8002264 <HAL_GetTick>
 8007d14:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d16:	e008      	b.n	8007d2a <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007d18:	f7fa faa4 	bl	8002264 <HAL_GetTick>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	d901      	bls.n	8007d2a <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8007d26:	2303      	movs	r3, #3
 8007d28:	e006      	b.n	8007d38 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d2a:	4b05      	ldr	r3, [pc, #20]	@ (8007d40 <RCCEx_PLL3_Config+0x12c>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d0f0      	beq.n	8007d18 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3710      	adds	r7, #16
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	44020c00 	.word	0x44020c00

08007d44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d101      	bne.n	8007d56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e049      	b.n	8007dea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d106      	bne.n	8007d70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f7f9 fe82 	bl	8001a74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2202      	movs	r2, #2
 8007d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	3304      	adds	r3, #4
 8007d80:	4619      	mov	r1, r3
 8007d82:	4610      	mov	r0, r2
 8007d84:	f000 ff0e 	bl	8008ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3708      	adds	r7, #8
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
	...

08007df4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d109      	bne.n	8007e1c <HAL_TIM_OC_Start_IT+0x28>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	bf14      	ite	ne
 8007e14:	2301      	movne	r3, #1
 8007e16:	2300      	moveq	r3, #0
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	e03c      	b.n	8007e96 <HAL_TIM_OC_Start_IT+0xa2>
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	2b04      	cmp	r3, #4
 8007e20:	d109      	bne.n	8007e36 <HAL_TIM_OC_Start_IT+0x42>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	bf14      	ite	ne
 8007e2e:	2301      	movne	r3, #1
 8007e30:	2300      	moveq	r3, #0
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	e02f      	b.n	8007e96 <HAL_TIM_OC_Start_IT+0xa2>
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	2b08      	cmp	r3, #8
 8007e3a:	d109      	bne.n	8007e50 <HAL_TIM_OC_Start_IT+0x5c>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	bf14      	ite	ne
 8007e48:	2301      	movne	r3, #1
 8007e4a:	2300      	moveq	r3, #0
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	e022      	b.n	8007e96 <HAL_TIM_OC_Start_IT+0xa2>
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	2b0c      	cmp	r3, #12
 8007e54:	d109      	bne.n	8007e6a <HAL_TIM_OC_Start_IT+0x76>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	bf14      	ite	ne
 8007e62:	2301      	movne	r3, #1
 8007e64:	2300      	moveq	r3, #0
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	e015      	b.n	8007e96 <HAL_TIM_OC_Start_IT+0xa2>
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	2b10      	cmp	r3, #16
 8007e6e:	d109      	bne.n	8007e84 <HAL_TIM_OC_Start_IT+0x90>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	bf14      	ite	ne
 8007e7c:	2301      	movne	r3, #1
 8007e7e:	2300      	moveq	r3, #0
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	e008      	b.n	8007e96 <HAL_TIM_OC_Start_IT+0xa2>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	bf14      	ite	ne
 8007e90:	2301      	movne	r3, #1
 8007e92:	2300      	moveq	r3, #0
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d001      	beq.n	8007e9e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e11a      	b.n	80080d4 <HAL_TIM_OC_Start_IT+0x2e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d104      	bne.n	8007eae <HAL_TIM_OC_Start_IT+0xba>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007eac:	e023      	b.n	8007ef6 <HAL_TIM_OC_Start_IT+0x102>
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	2b04      	cmp	r3, #4
 8007eb2:	d104      	bne.n	8007ebe <HAL_TIM_OC_Start_IT+0xca>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2202      	movs	r2, #2
 8007eb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ebc:	e01b      	b.n	8007ef6 <HAL_TIM_OC_Start_IT+0x102>
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	2b08      	cmp	r3, #8
 8007ec2:	d104      	bne.n	8007ece <HAL_TIM_OC_Start_IT+0xda>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2202      	movs	r2, #2
 8007ec8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ecc:	e013      	b.n	8007ef6 <HAL_TIM_OC_Start_IT+0x102>
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	2b0c      	cmp	r3, #12
 8007ed2:	d104      	bne.n	8007ede <HAL_TIM_OC_Start_IT+0xea>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2202      	movs	r2, #2
 8007ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007edc:	e00b      	b.n	8007ef6 <HAL_TIM_OC_Start_IT+0x102>
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	2b10      	cmp	r3, #16
 8007ee2:	d104      	bne.n	8007eee <HAL_TIM_OC_Start_IT+0xfa>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007eec:	e003      	b.n	8007ef6 <HAL_TIM_OC_Start_IT+0x102>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2202      	movs	r2, #2
 8007ef2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	2b0c      	cmp	r3, #12
 8007efa:	d841      	bhi.n	8007f80 <HAL_TIM_OC_Start_IT+0x18c>
 8007efc:	a201      	add	r2, pc, #4	@ (adr r2, 8007f04 <HAL_TIM_OC_Start_IT+0x110>)
 8007efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f02:	bf00      	nop
 8007f04:	08007f39 	.word	0x08007f39
 8007f08:	08007f81 	.word	0x08007f81
 8007f0c:	08007f81 	.word	0x08007f81
 8007f10:	08007f81 	.word	0x08007f81
 8007f14:	08007f4b 	.word	0x08007f4b
 8007f18:	08007f81 	.word	0x08007f81
 8007f1c:	08007f81 	.word	0x08007f81
 8007f20:	08007f81 	.word	0x08007f81
 8007f24:	08007f5d 	.word	0x08007f5d
 8007f28:	08007f81 	.word	0x08007f81
 8007f2c:	08007f81 	.word	0x08007f81
 8007f30:	08007f81 	.word	0x08007f81
 8007f34:	08007f6f 	.word	0x08007f6f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	68da      	ldr	r2, [r3, #12]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f042 0202 	orr.w	r2, r2, #2
 8007f46:	60da      	str	r2, [r3, #12]
      break;
 8007f48:	e01d      	b.n	8007f86 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	68da      	ldr	r2, [r3, #12]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f042 0204 	orr.w	r2, r2, #4
 8007f58:	60da      	str	r2, [r3, #12]
      break;
 8007f5a:	e014      	b.n	8007f86 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68da      	ldr	r2, [r3, #12]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f042 0208 	orr.w	r2, r2, #8
 8007f6a:	60da      	str	r2, [r3, #12]
      break;
 8007f6c:	e00b      	b.n	8007f86 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68da      	ldr	r2, [r3, #12]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f042 0210 	orr.w	r2, r2, #16
 8007f7c:	60da      	str	r2, [r3, #12]
      break;
 8007f7e:	e002      	b.n	8007f86 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	73fb      	strb	r3, [r7, #15]
      break;
 8007f84:	bf00      	nop
  }

  if (status == HAL_OK)
 8007f86:	7bfb      	ldrb	r3, [r7, #15]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	f040 80a2 	bne.w	80080d2 <HAL_TIM_OC_Start_IT+0x2de>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2201      	movs	r2, #1
 8007f94:	6839      	ldr	r1, [r7, #0]
 8007f96:	4618      	mov	r0, r3
 8007f98:	f001 fac0 	bl	800951c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a4e      	ldr	r2, [pc, #312]	@ (80080dc <HAL_TIM_OC_Start_IT+0x2e8>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d018      	beq.n	8007fd8 <HAL_TIM_OC_Start_IT+0x1e4>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a4d      	ldr	r2, [pc, #308]	@ (80080e0 <HAL_TIM_OC_Start_IT+0x2ec>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d013      	beq.n	8007fd8 <HAL_TIM_OC_Start_IT+0x1e4>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a4b      	ldr	r2, [pc, #300]	@ (80080e4 <HAL_TIM_OC_Start_IT+0x2f0>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d00e      	beq.n	8007fd8 <HAL_TIM_OC_Start_IT+0x1e4>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a4a      	ldr	r2, [pc, #296]	@ (80080e8 <HAL_TIM_OC_Start_IT+0x2f4>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d009      	beq.n	8007fd8 <HAL_TIM_OC_Start_IT+0x1e4>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a48      	ldr	r2, [pc, #288]	@ (80080ec <HAL_TIM_OC_Start_IT+0x2f8>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d004      	beq.n	8007fd8 <HAL_TIM_OC_Start_IT+0x1e4>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a47      	ldr	r2, [pc, #284]	@ (80080f0 <HAL_TIM_OC_Start_IT+0x2fc>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d101      	bne.n	8007fdc <HAL_TIM_OC_Start_IT+0x1e8>
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e000      	b.n	8007fde <HAL_TIM_OC_Start_IT+0x1ea>
 8007fdc:	2300      	movs	r3, #0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d007      	beq.n	8007ff2 <HAL_TIM_OC_Start_IT+0x1fe>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007ff0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a39      	ldr	r2, [pc, #228]	@ (80080dc <HAL_TIM_OC_Start_IT+0x2e8>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d04a      	beq.n	8008092 <HAL_TIM_OC_Start_IT+0x29e>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a37      	ldr	r2, [pc, #220]	@ (80080e0 <HAL_TIM_OC_Start_IT+0x2ec>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d045      	beq.n	8008092 <HAL_TIM_OC_Start_IT+0x29e>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800800e:	d040      	beq.n	8008092 <HAL_TIM_OC_Start_IT+0x29e>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008018:	d03b      	beq.n	8008092 <HAL_TIM_OC_Start_IT+0x29e>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a35      	ldr	r2, [pc, #212]	@ (80080f4 <HAL_TIM_OC_Start_IT+0x300>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d036      	beq.n	8008092 <HAL_TIM_OC_Start_IT+0x29e>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a33      	ldr	r2, [pc, #204]	@ (80080f8 <HAL_TIM_OC_Start_IT+0x304>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d031      	beq.n	8008092 <HAL_TIM_OC_Start_IT+0x29e>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a32      	ldr	r2, [pc, #200]	@ (80080fc <HAL_TIM_OC_Start_IT+0x308>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d02c      	beq.n	8008092 <HAL_TIM_OC_Start_IT+0x29e>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a30      	ldr	r2, [pc, #192]	@ (8008100 <HAL_TIM_OC_Start_IT+0x30c>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d027      	beq.n	8008092 <HAL_TIM_OC_Start_IT+0x29e>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a2f      	ldr	r2, [pc, #188]	@ (8008104 <HAL_TIM_OC_Start_IT+0x310>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d022      	beq.n	8008092 <HAL_TIM_OC_Start_IT+0x29e>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a2d      	ldr	r2, [pc, #180]	@ (8008108 <HAL_TIM_OC_Start_IT+0x314>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d01d      	beq.n	8008092 <HAL_TIM_OC_Start_IT+0x29e>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a22      	ldr	r2, [pc, #136]	@ (80080e4 <HAL_TIM_OC_Start_IT+0x2f0>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d018      	beq.n	8008092 <HAL_TIM_OC_Start_IT+0x29e>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a20      	ldr	r2, [pc, #128]	@ (80080e8 <HAL_TIM_OC_Start_IT+0x2f4>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d013      	beq.n	8008092 <HAL_TIM_OC_Start_IT+0x29e>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a27      	ldr	r2, [pc, #156]	@ (800810c <HAL_TIM_OC_Start_IT+0x318>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d00e      	beq.n	8008092 <HAL_TIM_OC_Start_IT+0x29e>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a25      	ldr	r2, [pc, #148]	@ (8008110 <HAL_TIM_OC_Start_IT+0x31c>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d009      	beq.n	8008092 <HAL_TIM_OC_Start_IT+0x29e>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a1a      	ldr	r2, [pc, #104]	@ (80080ec <HAL_TIM_OC_Start_IT+0x2f8>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d004      	beq.n	8008092 <HAL_TIM_OC_Start_IT+0x29e>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a18      	ldr	r2, [pc, #96]	@ (80080f0 <HAL_TIM_OC_Start_IT+0x2fc>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d115      	bne.n	80080be <HAL_TIM_OC_Start_IT+0x2ca>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	689a      	ldr	r2, [r3, #8]
 8008098:	4b1e      	ldr	r3, [pc, #120]	@ (8008114 <HAL_TIM_OC_Start_IT+0x320>)
 800809a:	4013      	ands	r3, r2
 800809c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	2b06      	cmp	r3, #6
 80080a2:	d015      	beq.n	80080d0 <HAL_TIM_OC_Start_IT+0x2dc>
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080aa:	d011      	beq.n	80080d0 <HAL_TIM_OC_Start_IT+0x2dc>
      {
        __HAL_TIM_ENABLE(htim);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f042 0201 	orr.w	r2, r2, #1
 80080ba:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080bc:	e008      	b.n	80080d0 <HAL_TIM_OC_Start_IT+0x2dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f042 0201 	orr.w	r2, r2, #1
 80080cc:	601a      	str	r2, [r3, #0]
 80080ce:	e000      	b.n	80080d2 <HAL_TIM_OC_Start_IT+0x2de>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080d0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80080d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3710      	adds	r7, #16
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	40012c00 	.word	0x40012c00
 80080e0:	50012c00 	.word	0x50012c00
 80080e4:	40013400 	.word	0x40013400
 80080e8:	50013400 	.word	0x50013400
 80080ec:	40014000 	.word	0x40014000
 80080f0:	50014000 	.word	0x50014000
 80080f4:	40000400 	.word	0x40000400
 80080f8:	50000400 	.word	0x50000400
 80080fc:	40000800 	.word	0x40000800
 8008100:	50000800 	.word	0x50000800
 8008104:	40000c00 	.word	0x40000c00
 8008108:	50000c00 	.word	0x50000c00
 800810c:	40001800 	.word	0x40001800
 8008110:	50001800 	.word	0x50001800
 8008114:	00010007 	.word	0x00010007

08008118 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d101      	bne.n	800812a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	e049      	b.n	80081be <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008130:	b2db      	uxtb	r3, r3
 8008132:	2b00      	cmp	r3, #0
 8008134:	d106      	bne.n	8008144 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7f9 fcd8 	bl	8001af4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2202      	movs	r2, #2
 8008148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	3304      	adds	r3, #4
 8008154:	4619      	mov	r1, r3
 8008156:	4610      	mov	r0, r2
 8008158:	f000 fd24 	bl	8008ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
	...

080081c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d109      	bne.n	80081ec <HAL_TIM_PWM_Start+0x24>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	bf14      	ite	ne
 80081e4:	2301      	movne	r3, #1
 80081e6:	2300      	moveq	r3, #0
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	e03c      	b.n	8008266 <HAL_TIM_PWM_Start+0x9e>
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	2b04      	cmp	r3, #4
 80081f0:	d109      	bne.n	8008206 <HAL_TIM_PWM_Start+0x3e>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	bf14      	ite	ne
 80081fe:	2301      	movne	r3, #1
 8008200:	2300      	moveq	r3, #0
 8008202:	b2db      	uxtb	r3, r3
 8008204:	e02f      	b.n	8008266 <HAL_TIM_PWM_Start+0x9e>
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	2b08      	cmp	r3, #8
 800820a:	d109      	bne.n	8008220 <HAL_TIM_PWM_Start+0x58>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008212:	b2db      	uxtb	r3, r3
 8008214:	2b01      	cmp	r3, #1
 8008216:	bf14      	ite	ne
 8008218:	2301      	movne	r3, #1
 800821a:	2300      	moveq	r3, #0
 800821c:	b2db      	uxtb	r3, r3
 800821e:	e022      	b.n	8008266 <HAL_TIM_PWM_Start+0x9e>
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	2b0c      	cmp	r3, #12
 8008224:	d109      	bne.n	800823a <HAL_TIM_PWM_Start+0x72>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800822c:	b2db      	uxtb	r3, r3
 800822e:	2b01      	cmp	r3, #1
 8008230:	bf14      	ite	ne
 8008232:	2301      	movne	r3, #1
 8008234:	2300      	moveq	r3, #0
 8008236:	b2db      	uxtb	r3, r3
 8008238:	e015      	b.n	8008266 <HAL_TIM_PWM_Start+0x9e>
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	2b10      	cmp	r3, #16
 800823e:	d109      	bne.n	8008254 <HAL_TIM_PWM_Start+0x8c>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008246:	b2db      	uxtb	r3, r3
 8008248:	2b01      	cmp	r3, #1
 800824a:	bf14      	ite	ne
 800824c:	2301      	movne	r3, #1
 800824e:	2300      	moveq	r3, #0
 8008250:	b2db      	uxtb	r3, r3
 8008252:	e008      	b.n	8008266 <HAL_TIM_PWM_Start+0x9e>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800825a:	b2db      	uxtb	r3, r3
 800825c:	2b01      	cmp	r3, #1
 800825e:	bf14      	ite	ne
 8008260:	2301      	movne	r3, #1
 8008262:	2300      	moveq	r3, #0
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b00      	cmp	r3, #0
 8008268:	d001      	beq.n	800826e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e0ce      	b.n	800840c <HAL_TIM_PWM_Start+0x244>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d104      	bne.n	800827e <HAL_TIM_PWM_Start+0xb6>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2202      	movs	r2, #2
 8008278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800827c:	e023      	b.n	80082c6 <HAL_TIM_PWM_Start+0xfe>
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	2b04      	cmp	r3, #4
 8008282:	d104      	bne.n	800828e <HAL_TIM_PWM_Start+0xc6>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2202      	movs	r2, #2
 8008288:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800828c:	e01b      	b.n	80082c6 <HAL_TIM_PWM_Start+0xfe>
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	2b08      	cmp	r3, #8
 8008292:	d104      	bne.n	800829e <HAL_TIM_PWM_Start+0xd6>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2202      	movs	r2, #2
 8008298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800829c:	e013      	b.n	80082c6 <HAL_TIM_PWM_Start+0xfe>
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	2b0c      	cmp	r3, #12
 80082a2:	d104      	bne.n	80082ae <HAL_TIM_PWM_Start+0xe6>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2202      	movs	r2, #2
 80082a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80082ac:	e00b      	b.n	80082c6 <HAL_TIM_PWM_Start+0xfe>
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	2b10      	cmp	r3, #16
 80082b2:	d104      	bne.n	80082be <HAL_TIM_PWM_Start+0xf6>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2202      	movs	r2, #2
 80082b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80082bc:	e003      	b.n	80082c6 <HAL_TIM_PWM_Start+0xfe>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2202      	movs	r2, #2
 80082c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2201      	movs	r2, #1
 80082cc:	6839      	ldr	r1, [r7, #0]
 80082ce:	4618      	mov	r0, r3
 80082d0:	f001 f924 	bl	800951c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a4e      	ldr	r2, [pc, #312]	@ (8008414 <HAL_TIM_PWM_Start+0x24c>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d018      	beq.n	8008310 <HAL_TIM_PWM_Start+0x148>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a4d      	ldr	r2, [pc, #308]	@ (8008418 <HAL_TIM_PWM_Start+0x250>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d013      	beq.n	8008310 <HAL_TIM_PWM_Start+0x148>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a4b      	ldr	r2, [pc, #300]	@ (800841c <HAL_TIM_PWM_Start+0x254>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d00e      	beq.n	8008310 <HAL_TIM_PWM_Start+0x148>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a4a      	ldr	r2, [pc, #296]	@ (8008420 <HAL_TIM_PWM_Start+0x258>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d009      	beq.n	8008310 <HAL_TIM_PWM_Start+0x148>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a48      	ldr	r2, [pc, #288]	@ (8008424 <HAL_TIM_PWM_Start+0x25c>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d004      	beq.n	8008310 <HAL_TIM_PWM_Start+0x148>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a47      	ldr	r2, [pc, #284]	@ (8008428 <HAL_TIM_PWM_Start+0x260>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d101      	bne.n	8008314 <HAL_TIM_PWM_Start+0x14c>
 8008310:	2301      	movs	r3, #1
 8008312:	e000      	b.n	8008316 <HAL_TIM_PWM_Start+0x14e>
 8008314:	2300      	movs	r3, #0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d007      	beq.n	800832a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008328:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a39      	ldr	r2, [pc, #228]	@ (8008414 <HAL_TIM_PWM_Start+0x24c>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d04a      	beq.n	80083ca <HAL_TIM_PWM_Start+0x202>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a37      	ldr	r2, [pc, #220]	@ (8008418 <HAL_TIM_PWM_Start+0x250>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d045      	beq.n	80083ca <HAL_TIM_PWM_Start+0x202>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008346:	d040      	beq.n	80083ca <HAL_TIM_PWM_Start+0x202>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008350:	d03b      	beq.n	80083ca <HAL_TIM_PWM_Start+0x202>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a35      	ldr	r2, [pc, #212]	@ (800842c <HAL_TIM_PWM_Start+0x264>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d036      	beq.n	80083ca <HAL_TIM_PWM_Start+0x202>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a33      	ldr	r2, [pc, #204]	@ (8008430 <HAL_TIM_PWM_Start+0x268>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d031      	beq.n	80083ca <HAL_TIM_PWM_Start+0x202>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a32      	ldr	r2, [pc, #200]	@ (8008434 <HAL_TIM_PWM_Start+0x26c>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d02c      	beq.n	80083ca <HAL_TIM_PWM_Start+0x202>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a30      	ldr	r2, [pc, #192]	@ (8008438 <HAL_TIM_PWM_Start+0x270>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d027      	beq.n	80083ca <HAL_TIM_PWM_Start+0x202>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a2f      	ldr	r2, [pc, #188]	@ (800843c <HAL_TIM_PWM_Start+0x274>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d022      	beq.n	80083ca <HAL_TIM_PWM_Start+0x202>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a2d      	ldr	r2, [pc, #180]	@ (8008440 <HAL_TIM_PWM_Start+0x278>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d01d      	beq.n	80083ca <HAL_TIM_PWM_Start+0x202>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a22      	ldr	r2, [pc, #136]	@ (800841c <HAL_TIM_PWM_Start+0x254>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d018      	beq.n	80083ca <HAL_TIM_PWM_Start+0x202>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a20      	ldr	r2, [pc, #128]	@ (8008420 <HAL_TIM_PWM_Start+0x258>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d013      	beq.n	80083ca <HAL_TIM_PWM_Start+0x202>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a27      	ldr	r2, [pc, #156]	@ (8008444 <HAL_TIM_PWM_Start+0x27c>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d00e      	beq.n	80083ca <HAL_TIM_PWM_Start+0x202>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a25      	ldr	r2, [pc, #148]	@ (8008448 <HAL_TIM_PWM_Start+0x280>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d009      	beq.n	80083ca <HAL_TIM_PWM_Start+0x202>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a1a      	ldr	r2, [pc, #104]	@ (8008424 <HAL_TIM_PWM_Start+0x25c>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d004      	beq.n	80083ca <HAL_TIM_PWM_Start+0x202>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a18      	ldr	r2, [pc, #96]	@ (8008428 <HAL_TIM_PWM_Start+0x260>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d115      	bne.n	80083f6 <HAL_TIM_PWM_Start+0x22e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	689a      	ldr	r2, [r3, #8]
 80083d0:	4b1e      	ldr	r3, [pc, #120]	@ (800844c <HAL_TIM_PWM_Start+0x284>)
 80083d2:	4013      	ands	r3, r2
 80083d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2b06      	cmp	r3, #6
 80083da:	d015      	beq.n	8008408 <HAL_TIM_PWM_Start+0x240>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083e2:	d011      	beq.n	8008408 <HAL_TIM_PWM_Start+0x240>
    {
      __HAL_TIM_ENABLE(htim);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f042 0201 	orr.w	r2, r2, #1
 80083f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083f4:	e008      	b.n	8008408 <HAL_TIM_PWM_Start+0x240>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f042 0201 	orr.w	r2, r2, #1
 8008404:	601a      	str	r2, [r3, #0]
 8008406:	e000      	b.n	800840a <HAL_TIM_PWM_Start+0x242>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008408:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800840a:	2300      	movs	r3, #0
}
 800840c:	4618      	mov	r0, r3
 800840e:	3710      	adds	r7, #16
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}
 8008414:	40012c00 	.word	0x40012c00
 8008418:	50012c00 	.word	0x50012c00
 800841c:	40013400 	.word	0x40013400
 8008420:	50013400 	.word	0x50013400
 8008424:	40014000 	.word	0x40014000
 8008428:	50014000 	.word	0x50014000
 800842c:	40000400 	.word	0x40000400
 8008430:	50000400 	.word	0x50000400
 8008434:	40000800 	.word	0x40000800
 8008438:	50000800 	.word	0x50000800
 800843c:	40000c00 	.word	0x40000c00
 8008440:	50000c00 	.word	0x50000c00
 8008444:	40001800 	.word	0x40001800
 8008448:	50001800 	.word	0x50001800
 800844c:	00010007 	.word	0x00010007

08008450 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	f003 0302 	and.w	r3, r3, #2
 800846e:	2b00      	cmp	r3, #0
 8008470:	d020      	beq.n	80084b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f003 0302 	and.w	r3, r3, #2
 8008478:	2b00      	cmp	r3, #0
 800847a:	d01b      	beq.n	80084b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f06f 0202 	mvn.w	r2, #2
 8008484:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2201      	movs	r2, #1
 800848a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	f003 0303 	and.w	r3, r3, #3
 8008496:	2b00      	cmp	r3, #0
 8008498:	d003      	beq.n	80084a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fb64 	bl	8008b68 <HAL_TIM_IC_CaptureCallback>
 80084a0:	e005      	b.n	80084ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 fb56 	bl	8008b54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 fb67 	bl	8008b7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	f003 0304 	and.w	r3, r3, #4
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d020      	beq.n	8008500 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f003 0304 	and.w	r3, r3, #4
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d01b      	beq.n	8008500 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f06f 0204 	mvn.w	r2, #4
 80084d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2202      	movs	r2, #2
 80084d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	699b      	ldr	r3, [r3, #24]
 80084de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d003      	beq.n	80084ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 fb3e 	bl	8008b68 <HAL_TIM_IC_CaptureCallback>
 80084ec:	e005      	b.n	80084fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fb30 	bl	8008b54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 fb41 	bl	8008b7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	f003 0308 	and.w	r3, r3, #8
 8008506:	2b00      	cmp	r3, #0
 8008508:	d020      	beq.n	800854c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f003 0308 	and.w	r3, r3, #8
 8008510:	2b00      	cmp	r3, #0
 8008512:	d01b      	beq.n	800854c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f06f 0208 	mvn.w	r2, #8
 800851c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2204      	movs	r2, #4
 8008522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	69db      	ldr	r3, [r3, #28]
 800852a:	f003 0303 	and.w	r3, r3, #3
 800852e:	2b00      	cmp	r3, #0
 8008530:	d003      	beq.n	800853a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 fb18 	bl	8008b68 <HAL_TIM_IC_CaptureCallback>
 8008538:	e005      	b.n	8008546 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 fb0a 	bl	8008b54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 fb1b 	bl	8008b7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	f003 0310 	and.w	r3, r3, #16
 8008552:	2b00      	cmp	r3, #0
 8008554:	d020      	beq.n	8008598 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f003 0310 	and.w	r3, r3, #16
 800855c:	2b00      	cmp	r3, #0
 800855e:	d01b      	beq.n	8008598 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f06f 0210 	mvn.w	r2, #16
 8008568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2208      	movs	r2, #8
 800856e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	69db      	ldr	r3, [r3, #28]
 8008576:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800857a:	2b00      	cmp	r3, #0
 800857c:	d003      	beq.n	8008586 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 faf2 	bl	8008b68 <HAL_TIM_IC_CaptureCallback>
 8008584:	e005      	b.n	8008592 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 fae4 	bl	8008b54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 faf5 	bl	8008b7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	f003 0301 	and.w	r3, r3, #1
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00c      	beq.n	80085bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f003 0301 	and.w	r3, r3, #1
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d007      	beq.n	80085bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f06f 0201 	mvn.w	r2, #1
 80085b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f7f9 f94a 	bl	8001850 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d104      	bne.n	80085d0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00c      	beq.n	80085ea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d007      	beq.n	80085ea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80085e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f001 f933 	bl	8009850 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00c      	beq.n	800860e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d007      	beq.n	800860e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f001 f92b 	bl	8009864 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00c      	beq.n	8008632 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800861e:	2b00      	cmp	r3, #0
 8008620:	d007      	beq.n	8008632 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800862a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 faaf 	bl	8008b90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	f003 0320 	and.w	r3, r3, #32
 8008638:	2b00      	cmp	r3, #0
 800863a:	d00c      	beq.n	8008656 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f003 0320 	and.w	r3, r3, #32
 8008642:	2b00      	cmp	r3, #0
 8008644:	d007      	beq.n	8008656 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f06f 0220 	mvn.w	r2, #32
 800864e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f001 f8f3 	bl	800983c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00c      	beq.n	800867a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008666:	2b00      	cmp	r3, #0
 8008668:	d007      	beq.n	800867a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f001 f8ff 	bl	8009878 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00c      	beq.n	800869e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800868a:	2b00      	cmp	r3, #0
 800868c:	d007      	beq.n	800869e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f001 f8f7 	bl	800988c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00c      	beq.n	80086c2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d007      	beq.n	80086c2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80086ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f001 f8ef 	bl	80098a0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00c      	beq.n	80086e6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d007      	beq.n	80086e6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80086de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f001 f8e7 	bl	80098b4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80086e6:	bf00      	nop
 80086e8:	3710      	adds	r7, #16
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
	...

080086f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b086      	sub	sp, #24
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086fc:	2300      	movs	r3, #0
 80086fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008706:	2b01      	cmp	r3, #1
 8008708:	d101      	bne.n	800870e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800870a:	2302      	movs	r3, #2
 800870c:	e0ff      	b.n	800890e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2201      	movs	r2, #1
 8008712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2b14      	cmp	r3, #20
 800871a:	f200 80f0 	bhi.w	80088fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800871e:	a201      	add	r2, pc, #4	@ (adr r2, 8008724 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008724:	08008779 	.word	0x08008779
 8008728:	080088ff 	.word	0x080088ff
 800872c:	080088ff 	.word	0x080088ff
 8008730:	080088ff 	.word	0x080088ff
 8008734:	080087b9 	.word	0x080087b9
 8008738:	080088ff 	.word	0x080088ff
 800873c:	080088ff 	.word	0x080088ff
 8008740:	080088ff 	.word	0x080088ff
 8008744:	080087fb 	.word	0x080087fb
 8008748:	080088ff 	.word	0x080088ff
 800874c:	080088ff 	.word	0x080088ff
 8008750:	080088ff 	.word	0x080088ff
 8008754:	0800883b 	.word	0x0800883b
 8008758:	080088ff 	.word	0x080088ff
 800875c:	080088ff 	.word	0x080088ff
 8008760:	080088ff 	.word	0x080088ff
 8008764:	0800887d 	.word	0x0800887d
 8008768:	080088ff 	.word	0x080088ff
 800876c:	080088ff 	.word	0x080088ff
 8008770:	080088ff 	.word	0x080088ff
 8008774:	080088bd 	.word	0x080088bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68b9      	ldr	r1, [r7, #8]
 800877e:	4618      	mov	r0, r3
 8008780:	f000 fafa 	bl	8008d78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	699a      	ldr	r2, [r3, #24]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f042 0208 	orr.w	r2, r2, #8
 8008792:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	699a      	ldr	r2, [r3, #24]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f022 0204 	bic.w	r2, r2, #4
 80087a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	6999      	ldr	r1, [r3, #24]
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	691a      	ldr	r2, [r3, #16]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	430a      	orrs	r2, r1
 80087b4:	619a      	str	r2, [r3, #24]
      break;
 80087b6:	e0a5      	b.n	8008904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	68b9      	ldr	r1, [r7, #8]
 80087be:	4618      	mov	r0, r3
 80087c0:	f000 fb74 	bl	8008eac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	699a      	ldr	r2, [r3, #24]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80087d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	699a      	ldr	r2, [r3, #24]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80087e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	6999      	ldr	r1, [r3, #24]
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	021a      	lsls	r2, r3, #8
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	430a      	orrs	r2, r1
 80087f6:	619a      	str	r2, [r3, #24]
      break;
 80087f8:	e084      	b.n	8008904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	68b9      	ldr	r1, [r7, #8]
 8008800:	4618      	mov	r0, r3
 8008802:	f000 fbeb 	bl	8008fdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	69da      	ldr	r2, [r3, #28]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f042 0208 	orr.w	r2, r2, #8
 8008814:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	69da      	ldr	r2, [r3, #28]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f022 0204 	bic.w	r2, r2, #4
 8008824:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	69d9      	ldr	r1, [r3, #28]
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	691a      	ldr	r2, [r3, #16]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	430a      	orrs	r2, r1
 8008836:	61da      	str	r2, [r3, #28]
      break;
 8008838:	e064      	b.n	8008904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	68b9      	ldr	r1, [r7, #8]
 8008840:	4618      	mov	r0, r3
 8008842:	f000 fc61 	bl	8009108 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	69da      	ldr	r2, [r3, #28]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008854:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	69da      	ldr	r2, [r3, #28]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008864:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	69d9      	ldr	r1, [r3, #28]
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	691b      	ldr	r3, [r3, #16]
 8008870:	021a      	lsls	r2, r3, #8
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	430a      	orrs	r2, r1
 8008878:	61da      	str	r2, [r3, #28]
      break;
 800887a:	e043      	b.n	8008904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68b9      	ldr	r1, [r7, #8]
 8008882:	4618      	mov	r0, r3
 8008884:	f000 fcd8 	bl	8009238 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f042 0208 	orr.w	r2, r2, #8
 8008896:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f022 0204 	bic.w	r2, r2, #4
 80088a6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	691a      	ldr	r2, [r3, #16]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	430a      	orrs	r2, r1
 80088b8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80088ba:	e023      	b.n	8008904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	68b9      	ldr	r1, [r7, #8]
 80088c2:	4618      	mov	r0, r3
 80088c4:	f000 fd22 	bl	800930c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80088d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088e6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	021a      	lsls	r2, r3, #8
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	430a      	orrs	r2, r1
 80088fa:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80088fc:	e002      	b.n	8008904 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	75fb      	strb	r3, [r7, #23]
      break;
 8008902:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2200      	movs	r2, #0
 8008908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800890c:	7dfb      	ldrb	r3, [r7, #23]
}
 800890e:	4618      	mov	r0, r3
 8008910:	3718      	adds	r7, #24
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop

08008918 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008922:	2300      	movs	r3, #0
 8008924:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800892c:	2b01      	cmp	r3, #1
 800892e:	d101      	bne.n	8008934 <HAL_TIM_ConfigClockSource+0x1c>
 8008930:	2302      	movs	r3, #2
 8008932:	e0fe      	b.n	8008b32 <HAL_TIM_ConfigClockSource+0x21a>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2202      	movs	r2, #2
 8008940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008952:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800895e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68ba      	ldr	r2, [r7, #8]
 8008966:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008970:	f000 80c9 	beq.w	8008b06 <HAL_TIM_ConfigClockSource+0x1ee>
 8008974:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008978:	f200 80ce 	bhi.w	8008b18 <HAL_TIM_ConfigClockSource+0x200>
 800897c:	4a6f      	ldr	r2, [pc, #444]	@ (8008b3c <HAL_TIM_ConfigClockSource+0x224>)
 800897e:	4293      	cmp	r3, r2
 8008980:	f000 80c1 	beq.w	8008b06 <HAL_TIM_ConfigClockSource+0x1ee>
 8008984:	4a6d      	ldr	r2, [pc, #436]	@ (8008b3c <HAL_TIM_ConfigClockSource+0x224>)
 8008986:	4293      	cmp	r3, r2
 8008988:	f200 80c6 	bhi.w	8008b18 <HAL_TIM_ConfigClockSource+0x200>
 800898c:	4a6c      	ldr	r2, [pc, #432]	@ (8008b40 <HAL_TIM_ConfigClockSource+0x228>)
 800898e:	4293      	cmp	r3, r2
 8008990:	f000 80b9 	beq.w	8008b06 <HAL_TIM_ConfigClockSource+0x1ee>
 8008994:	4a6a      	ldr	r2, [pc, #424]	@ (8008b40 <HAL_TIM_ConfigClockSource+0x228>)
 8008996:	4293      	cmp	r3, r2
 8008998:	f200 80be 	bhi.w	8008b18 <HAL_TIM_ConfigClockSource+0x200>
 800899c:	4a69      	ldr	r2, [pc, #420]	@ (8008b44 <HAL_TIM_ConfigClockSource+0x22c>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	f000 80b1 	beq.w	8008b06 <HAL_TIM_ConfigClockSource+0x1ee>
 80089a4:	4a67      	ldr	r2, [pc, #412]	@ (8008b44 <HAL_TIM_ConfigClockSource+0x22c>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	f200 80b6 	bhi.w	8008b18 <HAL_TIM_ConfigClockSource+0x200>
 80089ac:	4a66      	ldr	r2, [pc, #408]	@ (8008b48 <HAL_TIM_ConfigClockSource+0x230>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	f000 80a9 	beq.w	8008b06 <HAL_TIM_ConfigClockSource+0x1ee>
 80089b4:	4a64      	ldr	r2, [pc, #400]	@ (8008b48 <HAL_TIM_ConfigClockSource+0x230>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	f200 80ae 	bhi.w	8008b18 <HAL_TIM_ConfigClockSource+0x200>
 80089bc:	4a63      	ldr	r2, [pc, #396]	@ (8008b4c <HAL_TIM_ConfigClockSource+0x234>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	f000 80a1 	beq.w	8008b06 <HAL_TIM_ConfigClockSource+0x1ee>
 80089c4:	4a61      	ldr	r2, [pc, #388]	@ (8008b4c <HAL_TIM_ConfigClockSource+0x234>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	f200 80a6 	bhi.w	8008b18 <HAL_TIM_ConfigClockSource+0x200>
 80089cc:	4a60      	ldr	r2, [pc, #384]	@ (8008b50 <HAL_TIM_ConfigClockSource+0x238>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	f000 8099 	beq.w	8008b06 <HAL_TIM_ConfigClockSource+0x1ee>
 80089d4:	4a5e      	ldr	r2, [pc, #376]	@ (8008b50 <HAL_TIM_ConfigClockSource+0x238>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	f200 809e 	bhi.w	8008b18 <HAL_TIM_ConfigClockSource+0x200>
 80089dc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80089e0:	f000 8091 	beq.w	8008b06 <HAL_TIM_ConfigClockSource+0x1ee>
 80089e4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80089e8:	f200 8096 	bhi.w	8008b18 <HAL_TIM_ConfigClockSource+0x200>
 80089ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089f0:	f000 8089 	beq.w	8008b06 <HAL_TIM_ConfigClockSource+0x1ee>
 80089f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089f8:	f200 808e 	bhi.w	8008b18 <HAL_TIM_ConfigClockSource+0x200>
 80089fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a00:	d03e      	beq.n	8008a80 <HAL_TIM_ConfigClockSource+0x168>
 8008a02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a06:	f200 8087 	bhi.w	8008b18 <HAL_TIM_ConfigClockSource+0x200>
 8008a0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a0e:	f000 8086 	beq.w	8008b1e <HAL_TIM_ConfigClockSource+0x206>
 8008a12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a16:	d87f      	bhi.n	8008b18 <HAL_TIM_ConfigClockSource+0x200>
 8008a18:	2b70      	cmp	r3, #112	@ 0x70
 8008a1a:	d01a      	beq.n	8008a52 <HAL_TIM_ConfigClockSource+0x13a>
 8008a1c:	2b70      	cmp	r3, #112	@ 0x70
 8008a1e:	d87b      	bhi.n	8008b18 <HAL_TIM_ConfigClockSource+0x200>
 8008a20:	2b60      	cmp	r3, #96	@ 0x60
 8008a22:	d050      	beq.n	8008ac6 <HAL_TIM_ConfigClockSource+0x1ae>
 8008a24:	2b60      	cmp	r3, #96	@ 0x60
 8008a26:	d877      	bhi.n	8008b18 <HAL_TIM_ConfigClockSource+0x200>
 8008a28:	2b50      	cmp	r3, #80	@ 0x50
 8008a2a:	d03c      	beq.n	8008aa6 <HAL_TIM_ConfigClockSource+0x18e>
 8008a2c:	2b50      	cmp	r3, #80	@ 0x50
 8008a2e:	d873      	bhi.n	8008b18 <HAL_TIM_ConfigClockSource+0x200>
 8008a30:	2b40      	cmp	r3, #64	@ 0x40
 8008a32:	d058      	beq.n	8008ae6 <HAL_TIM_ConfigClockSource+0x1ce>
 8008a34:	2b40      	cmp	r3, #64	@ 0x40
 8008a36:	d86f      	bhi.n	8008b18 <HAL_TIM_ConfigClockSource+0x200>
 8008a38:	2b30      	cmp	r3, #48	@ 0x30
 8008a3a:	d064      	beq.n	8008b06 <HAL_TIM_ConfigClockSource+0x1ee>
 8008a3c:	2b30      	cmp	r3, #48	@ 0x30
 8008a3e:	d86b      	bhi.n	8008b18 <HAL_TIM_ConfigClockSource+0x200>
 8008a40:	2b20      	cmp	r3, #32
 8008a42:	d060      	beq.n	8008b06 <HAL_TIM_ConfigClockSource+0x1ee>
 8008a44:	2b20      	cmp	r3, #32
 8008a46:	d867      	bhi.n	8008b18 <HAL_TIM_ConfigClockSource+0x200>
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d05c      	beq.n	8008b06 <HAL_TIM_ConfigClockSource+0x1ee>
 8008a4c:	2b10      	cmp	r3, #16
 8008a4e:	d05a      	beq.n	8008b06 <HAL_TIM_ConfigClockSource+0x1ee>
 8008a50:	e062      	b.n	8008b18 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a62:	f000 fd3b 	bl	80094dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008a74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	68ba      	ldr	r2, [r7, #8]
 8008a7c:	609a      	str	r2, [r3, #8]
      break;
 8008a7e:	e04f      	b.n	8008b20 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a90:	f000 fd24 	bl	80094dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	689a      	ldr	r2, [r3, #8]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008aa2:	609a      	str	r2, [r3, #8]
      break;
 8008aa4:	e03c      	b.n	8008b20 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	f000 fc96 	bl	80093e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2150      	movs	r1, #80	@ 0x50
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f000 fcef 	bl	80094a2 <TIM_ITRx_SetConfig>
      break;
 8008ac4:	e02c      	b.n	8008b20 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	f000 fcb5 	bl	8009442 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2160      	movs	r1, #96	@ 0x60
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f000 fcdf 	bl	80094a2 <TIM_ITRx_SetConfig>
      break;
 8008ae4:	e01c      	b.n	8008b20 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008af2:	461a      	mov	r2, r3
 8008af4:	f000 fc76 	bl	80093e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2140      	movs	r1, #64	@ 0x40
 8008afe:	4618      	mov	r0, r3
 8008b00:	f000 fccf 	bl	80094a2 <TIM_ITRx_SetConfig>
      break;
 8008b04:	e00c      	b.n	8008b20 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4619      	mov	r1, r3
 8008b10:	4610      	mov	r0, r2
 8008b12:	f000 fcc6 	bl	80094a2 <TIM_ITRx_SetConfig>
      break;
 8008b16:	e003      	b.n	8008b20 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8008b1c:	e000      	b.n	8008b20 <HAL_TIM_ConfigClockSource+0x208>
      break;
 8008b1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	00100070 	.word	0x00100070
 8008b40:	00100060 	.word	0x00100060
 8008b44:	00100050 	.word	0x00100050
 8008b48:	00100040 	.word	0x00100040
 8008b4c:	00100030 	.word	0x00100030
 8008b50:	00100020 	.word	0x00100020

08008b54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b5c:	bf00      	nop
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b70:	bf00      	nop
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b84:	bf00      	nop
 8008b86:	370c      	adds	r7, #12
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b98:	bf00      	nop
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4a62      	ldr	r2, [pc, #392]	@ (8008d40 <TIM_Base_SetConfig+0x19c>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d02b      	beq.n	8008c14 <TIM_Base_SetConfig+0x70>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	4a61      	ldr	r2, [pc, #388]	@ (8008d44 <TIM_Base_SetConfig+0x1a0>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d027      	beq.n	8008c14 <TIM_Base_SetConfig+0x70>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bca:	d023      	beq.n	8008c14 <TIM_Base_SetConfig+0x70>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008bd2:	d01f      	beq.n	8008c14 <TIM_Base_SetConfig+0x70>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4a5c      	ldr	r2, [pc, #368]	@ (8008d48 <TIM_Base_SetConfig+0x1a4>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d01b      	beq.n	8008c14 <TIM_Base_SetConfig+0x70>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4a5b      	ldr	r2, [pc, #364]	@ (8008d4c <TIM_Base_SetConfig+0x1a8>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d017      	beq.n	8008c14 <TIM_Base_SetConfig+0x70>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	4a5a      	ldr	r2, [pc, #360]	@ (8008d50 <TIM_Base_SetConfig+0x1ac>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d013      	beq.n	8008c14 <TIM_Base_SetConfig+0x70>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4a59      	ldr	r2, [pc, #356]	@ (8008d54 <TIM_Base_SetConfig+0x1b0>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d00f      	beq.n	8008c14 <TIM_Base_SetConfig+0x70>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a58      	ldr	r2, [pc, #352]	@ (8008d58 <TIM_Base_SetConfig+0x1b4>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d00b      	beq.n	8008c14 <TIM_Base_SetConfig+0x70>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4a57      	ldr	r2, [pc, #348]	@ (8008d5c <TIM_Base_SetConfig+0x1b8>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d007      	beq.n	8008c14 <TIM_Base_SetConfig+0x70>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a56      	ldr	r2, [pc, #344]	@ (8008d60 <TIM_Base_SetConfig+0x1bc>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d003      	beq.n	8008c14 <TIM_Base_SetConfig+0x70>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a55      	ldr	r2, [pc, #340]	@ (8008d64 <TIM_Base_SetConfig+0x1c0>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d108      	bne.n	8008c26 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	68fa      	ldr	r2, [r7, #12]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a45      	ldr	r2, [pc, #276]	@ (8008d40 <TIM_Base_SetConfig+0x19c>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d03b      	beq.n	8008ca6 <TIM_Base_SetConfig+0x102>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a44      	ldr	r2, [pc, #272]	@ (8008d44 <TIM_Base_SetConfig+0x1a0>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d037      	beq.n	8008ca6 <TIM_Base_SetConfig+0x102>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c3c:	d033      	beq.n	8008ca6 <TIM_Base_SetConfig+0x102>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c44:	d02f      	beq.n	8008ca6 <TIM_Base_SetConfig+0x102>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a3f      	ldr	r2, [pc, #252]	@ (8008d48 <TIM_Base_SetConfig+0x1a4>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d02b      	beq.n	8008ca6 <TIM_Base_SetConfig+0x102>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a3e      	ldr	r2, [pc, #248]	@ (8008d4c <TIM_Base_SetConfig+0x1a8>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d027      	beq.n	8008ca6 <TIM_Base_SetConfig+0x102>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4a3d      	ldr	r2, [pc, #244]	@ (8008d50 <TIM_Base_SetConfig+0x1ac>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d023      	beq.n	8008ca6 <TIM_Base_SetConfig+0x102>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a3c      	ldr	r2, [pc, #240]	@ (8008d54 <TIM_Base_SetConfig+0x1b0>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d01f      	beq.n	8008ca6 <TIM_Base_SetConfig+0x102>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4a3b      	ldr	r2, [pc, #236]	@ (8008d58 <TIM_Base_SetConfig+0x1b4>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d01b      	beq.n	8008ca6 <TIM_Base_SetConfig+0x102>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4a3a      	ldr	r2, [pc, #232]	@ (8008d5c <TIM_Base_SetConfig+0x1b8>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d017      	beq.n	8008ca6 <TIM_Base_SetConfig+0x102>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a39      	ldr	r2, [pc, #228]	@ (8008d60 <TIM_Base_SetConfig+0x1bc>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d013      	beq.n	8008ca6 <TIM_Base_SetConfig+0x102>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a38      	ldr	r2, [pc, #224]	@ (8008d64 <TIM_Base_SetConfig+0x1c0>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d00f      	beq.n	8008ca6 <TIM_Base_SetConfig+0x102>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a37      	ldr	r2, [pc, #220]	@ (8008d68 <TIM_Base_SetConfig+0x1c4>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d00b      	beq.n	8008ca6 <TIM_Base_SetConfig+0x102>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a36      	ldr	r2, [pc, #216]	@ (8008d6c <TIM_Base_SetConfig+0x1c8>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d007      	beq.n	8008ca6 <TIM_Base_SetConfig+0x102>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a35      	ldr	r2, [pc, #212]	@ (8008d70 <TIM_Base_SetConfig+0x1cc>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d003      	beq.n	8008ca6 <TIM_Base_SetConfig+0x102>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a34      	ldr	r2, [pc, #208]	@ (8008d74 <TIM_Base_SetConfig+0x1d0>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d108      	bne.n	8008cb8 <TIM_Base_SetConfig+0x114>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008cac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	68fa      	ldr	r2, [r7, #12]
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	695b      	ldr	r3, [r3, #20]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	689a      	ldr	r2, [r3, #8]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a18      	ldr	r2, [pc, #96]	@ (8008d40 <TIM_Base_SetConfig+0x19c>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d013      	beq.n	8008d0c <TIM_Base_SetConfig+0x168>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a17      	ldr	r2, [pc, #92]	@ (8008d44 <TIM_Base_SetConfig+0x1a0>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d00f      	beq.n	8008d0c <TIM_Base_SetConfig+0x168>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a1c      	ldr	r2, [pc, #112]	@ (8008d60 <TIM_Base_SetConfig+0x1bc>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d00b      	beq.n	8008d0c <TIM_Base_SetConfig+0x168>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a1b      	ldr	r2, [pc, #108]	@ (8008d64 <TIM_Base_SetConfig+0x1c0>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d007      	beq.n	8008d0c <TIM_Base_SetConfig+0x168>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a1c      	ldr	r2, [pc, #112]	@ (8008d70 <TIM_Base_SetConfig+0x1cc>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d003      	beq.n	8008d0c <TIM_Base_SetConfig+0x168>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a1b      	ldr	r2, [pc, #108]	@ (8008d74 <TIM_Base_SetConfig+0x1d0>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d103      	bne.n	8008d14 <TIM_Base_SetConfig+0x170>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	691a      	ldr	r2, [r3, #16]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	691b      	ldr	r3, [r3, #16]
 8008d1e:	f003 0301 	and.w	r3, r3, #1
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d105      	bne.n	8008d32 <TIM_Base_SetConfig+0x18e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	691b      	ldr	r3, [r3, #16]
 8008d2a:	f023 0201 	bic.w	r2, r3, #1
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	611a      	str	r2, [r3, #16]
  }
}
 8008d32:	bf00      	nop
 8008d34:	3714      	adds	r7, #20
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr
 8008d3e:	bf00      	nop
 8008d40:	40012c00 	.word	0x40012c00
 8008d44:	50012c00 	.word	0x50012c00
 8008d48:	40000400 	.word	0x40000400
 8008d4c:	50000400 	.word	0x50000400
 8008d50:	40000800 	.word	0x40000800
 8008d54:	50000800 	.word	0x50000800
 8008d58:	40000c00 	.word	0x40000c00
 8008d5c:	50000c00 	.word	0x50000c00
 8008d60:	40013400 	.word	0x40013400
 8008d64:	50013400 	.word	0x50013400
 8008d68:	40001800 	.word	0x40001800
 8008d6c:	50001800 	.word	0x50001800
 8008d70:	40014000 	.word	0x40014000
 8008d74:	50014000 	.word	0x50014000

08008d78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b087      	sub	sp, #28
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a1b      	ldr	r3, [r3, #32]
 8008d86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6a1b      	ldr	r3, [r3, #32]
 8008d8c:	f023 0201 	bic.w	r2, r3, #1
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	699b      	ldr	r3, [r3, #24]
 8008d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f023 0303 	bic.w	r3, r3, #3
 8008db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	f023 0302 	bic.w	r3, r3, #2
 8008dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	697a      	ldr	r2, [r7, #20]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4a30      	ldr	r2, [pc, #192]	@ (8008e94 <TIM_OC1_SetConfig+0x11c>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d013      	beq.n	8008e00 <TIM_OC1_SetConfig+0x88>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a2f      	ldr	r2, [pc, #188]	@ (8008e98 <TIM_OC1_SetConfig+0x120>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d00f      	beq.n	8008e00 <TIM_OC1_SetConfig+0x88>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a2e      	ldr	r2, [pc, #184]	@ (8008e9c <TIM_OC1_SetConfig+0x124>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d00b      	beq.n	8008e00 <TIM_OC1_SetConfig+0x88>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4a2d      	ldr	r2, [pc, #180]	@ (8008ea0 <TIM_OC1_SetConfig+0x128>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d007      	beq.n	8008e00 <TIM_OC1_SetConfig+0x88>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	4a2c      	ldr	r2, [pc, #176]	@ (8008ea4 <TIM_OC1_SetConfig+0x12c>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d003      	beq.n	8008e00 <TIM_OC1_SetConfig+0x88>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4a2b      	ldr	r2, [pc, #172]	@ (8008ea8 <TIM_OC1_SetConfig+0x130>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d10c      	bne.n	8008e1a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	f023 0308 	bic.w	r3, r3, #8
 8008e06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	697a      	ldr	r2, [r7, #20]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	f023 0304 	bic.w	r3, r3, #4
 8008e18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4a1d      	ldr	r2, [pc, #116]	@ (8008e94 <TIM_OC1_SetConfig+0x11c>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d013      	beq.n	8008e4a <TIM_OC1_SetConfig+0xd2>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a1c      	ldr	r2, [pc, #112]	@ (8008e98 <TIM_OC1_SetConfig+0x120>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d00f      	beq.n	8008e4a <TIM_OC1_SetConfig+0xd2>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8008e9c <TIM_OC1_SetConfig+0x124>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d00b      	beq.n	8008e4a <TIM_OC1_SetConfig+0xd2>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4a1a      	ldr	r2, [pc, #104]	@ (8008ea0 <TIM_OC1_SetConfig+0x128>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d007      	beq.n	8008e4a <TIM_OC1_SetConfig+0xd2>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4a19      	ldr	r2, [pc, #100]	@ (8008ea4 <TIM_OC1_SetConfig+0x12c>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d003      	beq.n	8008e4a <TIM_OC1_SetConfig+0xd2>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a18      	ldr	r2, [pc, #96]	@ (8008ea8 <TIM_OC1_SetConfig+0x130>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d111      	bne.n	8008e6e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008e58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	695b      	ldr	r3, [r3, #20]
 8008e5e:	693a      	ldr	r2, [r7, #16]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	699b      	ldr	r3, [r3, #24]
 8008e68:	693a      	ldr	r2, [r7, #16]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	693a      	ldr	r2, [r7, #16]
 8008e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	685a      	ldr	r2, [r3, #4]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	697a      	ldr	r2, [r7, #20]
 8008e86:	621a      	str	r2, [r3, #32]
}
 8008e88:	bf00      	nop
 8008e8a:	371c      	adds	r7, #28
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr
 8008e94:	40012c00 	.word	0x40012c00
 8008e98:	50012c00 	.word	0x50012c00
 8008e9c:	40013400 	.word	0x40013400
 8008ea0:	50013400 	.word	0x50013400
 8008ea4:	40014000 	.word	0x40014000
 8008ea8:	50014000 	.word	0x50014000

08008eac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b087      	sub	sp, #28
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a1b      	ldr	r3, [r3, #32]
 8008eba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6a1b      	ldr	r3, [r3, #32]
 8008ec0:	f023 0210 	bic.w	r2, r3, #16
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008eda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ee6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	021b      	lsls	r3, r3, #8
 8008eee:	68fa      	ldr	r2, [r7, #12]
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	f023 0320 	bic.w	r3, r3, #32
 8008efa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	011b      	lsls	r3, r3, #4
 8008f02:	697a      	ldr	r2, [r7, #20]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a2e      	ldr	r2, [pc, #184]	@ (8008fc4 <TIM_OC2_SetConfig+0x118>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d00b      	beq.n	8008f28 <TIM_OC2_SetConfig+0x7c>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4a2d      	ldr	r2, [pc, #180]	@ (8008fc8 <TIM_OC2_SetConfig+0x11c>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d007      	beq.n	8008f28 <TIM_OC2_SetConfig+0x7c>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	4a2c      	ldr	r2, [pc, #176]	@ (8008fcc <TIM_OC2_SetConfig+0x120>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d003      	beq.n	8008f28 <TIM_OC2_SetConfig+0x7c>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	4a2b      	ldr	r2, [pc, #172]	@ (8008fd0 <TIM_OC2_SetConfig+0x124>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d10d      	bne.n	8008f44 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	011b      	lsls	r3, r3, #4
 8008f36:	697a      	ldr	r2, [r7, #20]
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a1f      	ldr	r2, [pc, #124]	@ (8008fc4 <TIM_OC2_SetConfig+0x118>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d013      	beq.n	8008f74 <TIM_OC2_SetConfig+0xc8>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a1e      	ldr	r2, [pc, #120]	@ (8008fc8 <TIM_OC2_SetConfig+0x11c>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d00f      	beq.n	8008f74 <TIM_OC2_SetConfig+0xc8>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4a1d      	ldr	r2, [pc, #116]	@ (8008fcc <TIM_OC2_SetConfig+0x120>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d00b      	beq.n	8008f74 <TIM_OC2_SetConfig+0xc8>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a1c      	ldr	r2, [pc, #112]	@ (8008fd0 <TIM_OC2_SetConfig+0x124>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d007      	beq.n	8008f74 <TIM_OC2_SetConfig+0xc8>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a1b      	ldr	r2, [pc, #108]	@ (8008fd4 <TIM_OC2_SetConfig+0x128>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d003      	beq.n	8008f74 <TIM_OC2_SetConfig+0xc8>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4a1a      	ldr	r2, [pc, #104]	@ (8008fd8 <TIM_OC2_SetConfig+0x12c>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d113      	bne.n	8008f9c <TIM_OC2_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008f7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008f82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	695b      	ldr	r3, [r3, #20]
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	693a      	ldr	r2, [r7, #16]
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	699b      	ldr	r3, [r3, #24]
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	693a      	ldr	r2, [r7, #16]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	693a      	ldr	r2, [r7, #16]
 8008fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	68fa      	ldr	r2, [r7, #12]
 8008fa6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	685a      	ldr	r2, [r3, #4]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	697a      	ldr	r2, [r7, #20]
 8008fb4:	621a      	str	r2, [r3, #32]
}
 8008fb6:	bf00      	nop
 8008fb8:	371c      	adds	r7, #28
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	40012c00 	.word	0x40012c00
 8008fc8:	50012c00 	.word	0x50012c00
 8008fcc:	40013400 	.word	0x40013400
 8008fd0:	50013400 	.word	0x50013400
 8008fd4:	40014000 	.word	0x40014000
 8008fd8:	50014000 	.word	0x50014000

08008fdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b087      	sub	sp, #28
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6a1b      	ldr	r3, [r3, #32]
 8008fea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6a1b      	ldr	r3, [r3, #32]
 8008ff0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	69db      	ldr	r3, [r3, #28]
 8009002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800900a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800900e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f023 0303 	bic.w	r3, r3, #3
 8009016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	68fa      	ldr	r2, [r7, #12]
 800901e:	4313      	orrs	r3, r2
 8009020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	021b      	lsls	r3, r3, #8
 8009030:	697a      	ldr	r2, [r7, #20]
 8009032:	4313      	orrs	r3, r2
 8009034:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	4a2d      	ldr	r2, [pc, #180]	@ (80090f0 <TIM_OC3_SetConfig+0x114>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d00b      	beq.n	8009056 <TIM_OC3_SetConfig+0x7a>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	4a2c      	ldr	r2, [pc, #176]	@ (80090f4 <TIM_OC3_SetConfig+0x118>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d007      	beq.n	8009056 <TIM_OC3_SetConfig+0x7a>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	4a2b      	ldr	r2, [pc, #172]	@ (80090f8 <TIM_OC3_SetConfig+0x11c>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d003      	beq.n	8009056 <TIM_OC3_SetConfig+0x7a>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4a2a      	ldr	r2, [pc, #168]	@ (80090fc <TIM_OC3_SetConfig+0x120>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d10d      	bne.n	8009072 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800905c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	021b      	lsls	r3, r3, #8
 8009064:	697a      	ldr	r2, [r7, #20]
 8009066:	4313      	orrs	r3, r2
 8009068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	4a1e      	ldr	r2, [pc, #120]	@ (80090f0 <TIM_OC3_SetConfig+0x114>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d013      	beq.n	80090a2 <TIM_OC3_SetConfig+0xc6>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4a1d      	ldr	r2, [pc, #116]	@ (80090f4 <TIM_OC3_SetConfig+0x118>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d00f      	beq.n	80090a2 <TIM_OC3_SetConfig+0xc6>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4a1c      	ldr	r2, [pc, #112]	@ (80090f8 <TIM_OC3_SetConfig+0x11c>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d00b      	beq.n	80090a2 <TIM_OC3_SetConfig+0xc6>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	4a1b      	ldr	r2, [pc, #108]	@ (80090fc <TIM_OC3_SetConfig+0x120>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d007      	beq.n	80090a2 <TIM_OC3_SetConfig+0xc6>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a1a      	ldr	r2, [pc, #104]	@ (8009100 <TIM_OC3_SetConfig+0x124>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d003      	beq.n	80090a2 <TIM_OC3_SetConfig+0xc6>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a19      	ldr	r2, [pc, #100]	@ (8009104 <TIM_OC3_SetConfig+0x128>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d113      	bne.n	80090ca <TIM_OC3_SetConfig+0xee>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80090a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80090b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	695b      	ldr	r3, [r3, #20]
 80090b6:	011b      	lsls	r3, r3, #4
 80090b8:	693a      	ldr	r2, [r7, #16]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	699b      	ldr	r3, [r3, #24]
 80090c2:	011b      	lsls	r3, r3, #4
 80090c4:	693a      	ldr	r2, [r7, #16]
 80090c6:	4313      	orrs	r3, r2
 80090c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	693a      	ldr	r2, [r7, #16]
 80090ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	68fa      	ldr	r2, [r7, #12]
 80090d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	685a      	ldr	r2, [r3, #4]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	697a      	ldr	r2, [r7, #20]
 80090e2:	621a      	str	r2, [r3, #32]
}
 80090e4:	bf00      	nop
 80090e6:	371c      	adds	r7, #28
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr
 80090f0:	40012c00 	.word	0x40012c00
 80090f4:	50012c00 	.word	0x50012c00
 80090f8:	40013400 	.word	0x40013400
 80090fc:	50013400 	.word	0x50013400
 8009100:	40014000 	.word	0x40014000
 8009104:	50014000 	.word	0x50014000

08009108 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009108:	b480      	push	{r7}
 800910a:	b087      	sub	sp, #28
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6a1b      	ldr	r3, [r3, #32]
 8009116:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6a1b      	ldr	r3, [r3, #32]
 800911c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	69db      	ldr	r3, [r3, #28]
 800912e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009136:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800913a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	021b      	lsls	r3, r3, #8
 800914a:	68fa      	ldr	r2, [r7, #12]
 800914c:	4313      	orrs	r3, r2
 800914e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009156:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	031b      	lsls	r3, r3, #12
 800915e:	697a      	ldr	r2, [r7, #20]
 8009160:	4313      	orrs	r3, r2
 8009162:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4a2e      	ldr	r2, [pc, #184]	@ (8009220 <TIM_OC4_SetConfig+0x118>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d00b      	beq.n	8009184 <TIM_OC4_SetConfig+0x7c>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	4a2d      	ldr	r2, [pc, #180]	@ (8009224 <TIM_OC4_SetConfig+0x11c>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d007      	beq.n	8009184 <TIM_OC4_SetConfig+0x7c>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4a2c      	ldr	r2, [pc, #176]	@ (8009228 <TIM_OC4_SetConfig+0x120>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d003      	beq.n	8009184 <TIM_OC4_SetConfig+0x7c>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	4a2b      	ldr	r2, [pc, #172]	@ (800922c <TIM_OC4_SetConfig+0x124>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d10d      	bne.n	80091a0 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800918a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	031b      	lsls	r3, r3, #12
 8009192:	697a      	ldr	r2, [r7, #20]
 8009194:	4313      	orrs	r3, r2
 8009196:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800919e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	4a1f      	ldr	r2, [pc, #124]	@ (8009220 <TIM_OC4_SetConfig+0x118>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d013      	beq.n	80091d0 <TIM_OC4_SetConfig+0xc8>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	4a1e      	ldr	r2, [pc, #120]	@ (8009224 <TIM_OC4_SetConfig+0x11c>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d00f      	beq.n	80091d0 <TIM_OC4_SetConfig+0xc8>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	4a1d      	ldr	r2, [pc, #116]	@ (8009228 <TIM_OC4_SetConfig+0x120>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d00b      	beq.n	80091d0 <TIM_OC4_SetConfig+0xc8>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	4a1c      	ldr	r2, [pc, #112]	@ (800922c <TIM_OC4_SetConfig+0x124>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d007      	beq.n	80091d0 <TIM_OC4_SetConfig+0xc8>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4a1b      	ldr	r2, [pc, #108]	@ (8009230 <TIM_OC4_SetConfig+0x128>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d003      	beq.n	80091d0 <TIM_OC4_SetConfig+0xc8>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	4a1a      	ldr	r2, [pc, #104]	@ (8009234 <TIM_OC4_SetConfig+0x12c>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d113      	bne.n	80091f8 <TIM_OC4_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80091d6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80091de:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	695b      	ldr	r3, [r3, #20]
 80091e4:	019b      	lsls	r3, r3, #6
 80091e6:	693a      	ldr	r2, [r7, #16]
 80091e8:	4313      	orrs	r3, r2
 80091ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	699b      	ldr	r3, [r3, #24]
 80091f0:	019b      	lsls	r3, r3, #6
 80091f2:	693a      	ldr	r2, [r7, #16]
 80091f4:	4313      	orrs	r3, r2
 80091f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	693a      	ldr	r2, [r7, #16]
 80091fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	685a      	ldr	r2, [r3, #4]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	697a      	ldr	r2, [r7, #20]
 8009210:	621a      	str	r2, [r3, #32]
}
 8009212:	bf00      	nop
 8009214:	371c      	adds	r7, #28
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	40012c00 	.word	0x40012c00
 8009224:	50012c00 	.word	0x50012c00
 8009228:	40013400 	.word	0x40013400
 800922c:	50013400 	.word	0x50013400
 8009230:	40014000 	.word	0x40014000
 8009234:	50014000 	.word	0x50014000

08009238 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009238:	b480      	push	{r7}
 800923a:	b087      	sub	sp, #28
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6a1b      	ldr	r3, [r3, #32]
 8009246:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6a1b      	ldr	r3, [r3, #32]
 800924c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800925e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800926a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	68fa      	ldr	r2, [r7, #12]
 8009272:	4313      	orrs	r3, r2
 8009274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800927c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	041b      	lsls	r3, r3, #16
 8009284:	693a      	ldr	r2, [r7, #16]
 8009286:	4313      	orrs	r3, r2
 8009288:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4a19      	ldr	r2, [pc, #100]	@ (80092f4 <TIM_OC5_SetConfig+0xbc>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d013      	beq.n	80092ba <TIM_OC5_SetConfig+0x82>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	4a18      	ldr	r2, [pc, #96]	@ (80092f8 <TIM_OC5_SetConfig+0xc0>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d00f      	beq.n	80092ba <TIM_OC5_SetConfig+0x82>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	4a17      	ldr	r2, [pc, #92]	@ (80092fc <TIM_OC5_SetConfig+0xc4>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d00b      	beq.n	80092ba <TIM_OC5_SetConfig+0x82>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	4a16      	ldr	r2, [pc, #88]	@ (8009300 <TIM_OC5_SetConfig+0xc8>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d007      	beq.n	80092ba <TIM_OC5_SetConfig+0x82>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	4a15      	ldr	r2, [pc, #84]	@ (8009304 <TIM_OC5_SetConfig+0xcc>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d003      	beq.n	80092ba <TIM_OC5_SetConfig+0x82>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	4a14      	ldr	r2, [pc, #80]	@ (8009308 <TIM_OC5_SetConfig+0xd0>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d109      	bne.n	80092ce <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80092c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	695b      	ldr	r3, [r3, #20]
 80092c6:	021b      	lsls	r3, r3, #8
 80092c8:	697a      	ldr	r2, [r7, #20]
 80092ca:	4313      	orrs	r3, r2
 80092cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	697a      	ldr	r2, [r7, #20]
 80092d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	68fa      	ldr	r2, [r7, #12]
 80092d8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	685a      	ldr	r2, [r3, #4]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	693a      	ldr	r2, [r7, #16]
 80092e6:	621a      	str	r2, [r3, #32]
}
 80092e8:	bf00      	nop
 80092ea:	371c      	adds	r7, #28
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr
 80092f4:	40012c00 	.word	0x40012c00
 80092f8:	50012c00 	.word	0x50012c00
 80092fc:	40013400 	.word	0x40013400
 8009300:	50013400 	.word	0x50013400
 8009304:	40014000 	.word	0x40014000
 8009308:	50014000 	.word	0x50014000

0800930c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800930c:	b480      	push	{r7}
 800930e:	b087      	sub	sp, #28
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6a1b      	ldr	r3, [r3, #32]
 800931a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6a1b      	ldr	r3, [r3, #32]
 8009320:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800933a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800933e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	021b      	lsls	r3, r3, #8
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	4313      	orrs	r3, r2
 800934a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009352:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	051b      	lsls	r3, r3, #20
 800935a:	693a      	ldr	r2, [r7, #16]
 800935c:	4313      	orrs	r3, r2
 800935e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4a1a      	ldr	r2, [pc, #104]	@ (80093cc <TIM_OC6_SetConfig+0xc0>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d013      	beq.n	8009390 <TIM_OC6_SetConfig+0x84>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4a19      	ldr	r2, [pc, #100]	@ (80093d0 <TIM_OC6_SetConfig+0xc4>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d00f      	beq.n	8009390 <TIM_OC6_SetConfig+0x84>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	4a18      	ldr	r2, [pc, #96]	@ (80093d4 <TIM_OC6_SetConfig+0xc8>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d00b      	beq.n	8009390 <TIM_OC6_SetConfig+0x84>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a17      	ldr	r2, [pc, #92]	@ (80093d8 <TIM_OC6_SetConfig+0xcc>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d007      	beq.n	8009390 <TIM_OC6_SetConfig+0x84>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4a16      	ldr	r2, [pc, #88]	@ (80093dc <TIM_OC6_SetConfig+0xd0>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d003      	beq.n	8009390 <TIM_OC6_SetConfig+0x84>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a15      	ldr	r2, [pc, #84]	@ (80093e0 <TIM_OC6_SetConfig+0xd4>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d109      	bne.n	80093a4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009396:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	695b      	ldr	r3, [r3, #20]
 800939c:	029b      	lsls	r3, r3, #10
 800939e:	697a      	ldr	r2, [r7, #20]
 80093a0:	4313      	orrs	r3, r2
 80093a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	697a      	ldr	r2, [r7, #20]
 80093a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	68fa      	ldr	r2, [r7, #12]
 80093ae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	685a      	ldr	r2, [r3, #4]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	693a      	ldr	r2, [r7, #16]
 80093bc:	621a      	str	r2, [r3, #32]
}
 80093be:	bf00      	nop
 80093c0:	371c      	adds	r7, #28
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	40012c00 	.word	0x40012c00
 80093d0:	50012c00 	.word	0x50012c00
 80093d4:	40013400 	.word	0x40013400
 80093d8:	50013400 	.word	0x50013400
 80093dc:	40014000 	.word	0x40014000
 80093e0:	50014000 	.word	0x50014000

080093e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b087      	sub	sp, #28
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	6a1b      	ldr	r3, [r3, #32]
 80093f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6a1b      	ldr	r3, [r3, #32]
 80093fa:	f023 0201 	bic.w	r2, r3, #1
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	699b      	ldr	r3, [r3, #24]
 8009406:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800940e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	011b      	lsls	r3, r3, #4
 8009414:	693a      	ldr	r2, [r7, #16]
 8009416:	4313      	orrs	r3, r2
 8009418:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	f023 030a 	bic.w	r3, r3, #10
 8009420:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009422:	697a      	ldr	r2, [r7, #20]
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	4313      	orrs	r3, r2
 8009428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	693a      	ldr	r2, [r7, #16]
 800942e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	697a      	ldr	r2, [r7, #20]
 8009434:	621a      	str	r2, [r3, #32]
}
 8009436:	bf00      	nop
 8009438:	371c      	adds	r7, #28
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr

08009442 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009442:	b480      	push	{r7}
 8009444:	b087      	sub	sp, #28
 8009446:	af00      	add	r7, sp, #0
 8009448:	60f8      	str	r0, [r7, #12]
 800944a:	60b9      	str	r1, [r7, #8]
 800944c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	6a1b      	ldr	r3, [r3, #32]
 8009452:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	6a1b      	ldr	r3, [r3, #32]
 8009458:	f023 0210 	bic.w	r2, r3, #16
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	699b      	ldr	r3, [r3, #24]
 8009464:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800946c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	031b      	lsls	r3, r3, #12
 8009472:	693a      	ldr	r2, [r7, #16]
 8009474:	4313      	orrs	r3, r2
 8009476:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800947e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	011b      	lsls	r3, r3, #4
 8009484:	697a      	ldr	r2, [r7, #20]
 8009486:	4313      	orrs	r3, r2
 8009488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	693a      	ldr	r2, [r7, #16]
 800948e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	697a      	ldr	r2, [r7, #20]
 8009494:	621a      	str	r2, [r3, #32]
}
 8009496:	bf00      	nop
 8009498:	371c      	adds	r7, #28
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr

080094a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80094a2:	b480      	push	{r7}
 80094a4:	b085      	sub	sp, #20
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
 80094aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80094b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80094be:	683a      	ldr	r2, [r7, #0]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	4313      	orrs	r3, r2
 80094c4:	f043 0307 	orr.w	r3, r3, #7
 80094c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	609a      	str	r2, [r3, #8]
}
 80094d0:	bf00      	nop
 80094d2:	3714      	adds	r7, #20
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80094dc:	b480      	push	{r7}
 80094de:	b087      	sub	sp, #28
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	60b9      	str	r1, [r7, #8]
 80094e6:	607a      	str	r2, [r7, #4]
 80094e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80094f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	021a      	lsls	r2, r3, #8
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	431a      	orrs	r2, r3
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	4313      	orrs	r3, r2
 8009504:	697a      	ldr	r2, [r7, #20]
 8009506:	4313      	orrs	r3, r2
 8009508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	697a      	ldr	r2, [r7, #20]
 800950e:	609a      	str	r2, [r3, #8]
}
 8009510:	bf00      	nop
 8009512:	371c      	adds	r7, #28
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800951c:	b480      	push	{r7}
 800951e:	b087      	sub	sp, #28
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	f003 031f 	and.w	r3, r3, #31
 800952e:	2201      	movs	r2, #1
 8009530:	fa02 f303 	lsl.w	r3, r2, r3
 8009534:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6a1a      	ldr	r2, [r3, #32]
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	43db      	mvns	r3, r3
 800953e:	401a      	ands	r2, r3
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	6a1a      	ldr	r2, [r3, #32]
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	f003 031f 	and.w	r3, r3, #31
 800954e:	6879      	ldr	r1, [r7, #4]
 8009550:	fa01 f303 	lsl.w	r3, r1, r3
 8009554:	431a      	orrs	r2, r3
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	621a      	str	r2, [r3, #32]
}
 800955a:	bf00      	nop
 800955c:	371c      	adds	r7, #28
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr
	...

08009568 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009568:	b480      	push	{r7}
 800956a:	b085      	sub	sp, #20
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009578:	2b01      	cmp	r3, #1
 800957a:	d101      	bne.n	8009580 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800957c:	2302      	movs	r3, #2
 800957e:	e0a1      	b.n	80096c4 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2202      	movs	r2, #2
 800958c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a4a      	ldr	r2, [pc, #296]	@ (80096d0 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d00e      	beq.n	80095c8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4a49      	ldr	r2, [pc, #292]	@ (80096d4 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d009      	beq.n	80095c8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a47      	ldr	r2, [pc, #284]	@ (80096d8 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d004      	beq.n	80095c8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4a46      	ldr	r2, [pc, #280]	@ (80096dc <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d108      	bne.n	80095da <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80095ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	68fa      	ldr	r2, [r7, #12]
 80095d6:	4313      	orrs	r3, r2
 80095d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80095e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	68fa      	ldr	r2, [r7, #12]
 80095ec:	4313      	orrs	r3, r2
 80095ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	68fa      	ldr	r2, [r7, #12]
 80095f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a34      	ldr	r2, [pc, #208]	@ (80096d0 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d04a      	beq.n	8009698 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a33      	ldr	r2, [pc, #204]	@ (80096d4 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d045      	beq.n	8009698 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009614:	d040      	beq.n	8009698 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800961e:	d03b      	beq.n	8009698 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a2e      	ldr	r2, [pc, #184]	@ (80096e0 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d036      	beq.n	8009698 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a2d      	ldr	r2, [pc, #180]	@ (80096e4 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d031      	beq.n	8009698 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a2b      	ldr	r2, [pc, #172]	@ (80096e8 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d02c      	beq.n	8009698 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a2a      	ldr	r2, [pc, #168]	@ (80096ec <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d027      	beq.n	8009698 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a28      	ldr	r2, [pc, #160]	@ (80096f0 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d022      	beq.n	8009698 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a27      	ldr	r2, [pc, #156]	@ (80096f4 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d01d      	beq.n	8009698 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a1d      	ldr	r2, [pc, #116]	@ (80096d8 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d018      	beq.n	8009698 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a1c      	ldr	r2, [pc, #112]	@ (80096dc <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d013      	beq.n	8009698 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a20      	ldr	r2, [pc, #128]	@ (80096f8 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d00e      	beq.n	8009698 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a1f      	ldr	r2, [pc, #124]	@ (80096fc <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d009      	beq.n	8009698 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a1d      	ldr	r2, [pc, #116]	@ (8009700 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d004      	beq.n	8009698 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a1c      	ldr	r2, [pc, #112]	@ (8009704 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d10c      	bne.n	80096b2 <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800969e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	68ba      	ldr	r2, [r7, #8]
 80096a6:	4313      	orrs	r3, r2
 80096a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	68ba      	ldr	r2, [r7, #8]
 80096b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2201      	movs	r2, #1
 80096b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80096c2:	2300      	movs	r3, #0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3714      	adds	r7, #20
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr
 80096d0:	40012c00 	.word	0x40012c00
 80096d4:	50012c00 	.word	0x50012c00
 80096d8:	40013400 	.word	0x40013400
 80096dc:	50013400 	.word	0x50013400
 80096e0:	40000400 	.word	0x40000400
 80096e4:	50000400 	.word	0x50000400
 80096e8:	40000800 	.word	0x40000800
 80096ec:	50000800 	.word	0x50000800
 80096f0:	40000c00 	.word	0x40000c00
 80096f4:	50000c00 	.word	0x50000c00
 80096f8:	40001800 	.word	0x40001800
 80096fc:	50001800 	.word	0x50001800
 8009700:	40014000 	.word	0x40014000
 8009704:	50014000 	.word	0x50014000

08009708 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009712:	2300      	movs	r3, #0
 8009714:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800971c:	2b01      	cmp	r3, #1
 800971e:	d101      	bne.n	8009724 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009720:	2302      	movs	r3, #2
 8009722:	e07d      	b.n	8009820 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	4313      	orrs	r3, r2
 8009738:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	4313      	orrs	r3, r2
 8009746:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	4313      	orrs	r3, r2
 8009754:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4313      	orrs	r3, r2
 8009762:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	691b      	ldr	r3, [r3, #16]
 800976e:	4313      	orrs	r3, r2
 8009770:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	695b      	ldr	r3, [r3, #20]
 800977c:	4313      	orrs	r3, r2
 800977e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800978a:	4313      	orrs	r3, r2
 800978c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	699b      	ldr	r3, [r3, #24]
 8009798:	041b      	lsls	r3, r3, #16
 800979a:	4313      	orrs	r3, r2
 800979c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	69db      	ldr	r3, [r3, #28]
 80097a8:	4313      	orrs	r3, r2
 80097aa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a1e      	ldr	r2, [pc, #120]	@ (800982c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d00e      	beq.n	80097d4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a1d      	ldr	r2, [pc, #116]	@ (8009830 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d009      	beq.n	80097d4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a1b      	ldr	r2, [pc, #108]	@ (8009834 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d004      	beq.n	80097d4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a1a      	ldr	r2, [pc, #104]	@ (8009838 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d11c      	bne.n	800980e <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097de:	051b      	lsls	r3, r3, #20
 80097e0:	4313      	orrs	r3, r2
 80097e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	6a1b      	ldr	r3, [r3, #32]
 80097ee:	4313      	orrs	r3, r2
 80097f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097fc:	4313      	orrs	r3, r2
 80097fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800980a:	4313      	orrs	r3, r2
 800980c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	68fa      	ldr	r2, [r7, #12]
 8009814:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800981e:	2300      	movs	r3, #0
}
 8009820:	4618      	mov	r0, r3
 8009822:	3714      	adds	r7, #20
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr
 800982c:	40012c00 	.word	0x40012c00
 8009830:	50012c00 	.word	0x50012c00
 8009834:	40013400 	.word	0x40013400
 8009838:	50013400 	.word	0x50013400

0800983c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009844:	bf00      	nop
 8009846:	370c      	adds	r7, #12
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009858:	bf00      	nop
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800986c:	bf00      	nop
 800986e:	370c      	adds	r7, #12
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009880:	bf00      	nop
 8009882:	370c      	adds	r7, #12
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009894:	bf00      	nop
 8009896:	370c      	adds	r7, #12
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr

080098a0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b083      	sub	sp, #12
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80098a8:	bf00      	nop
 80098aa:	370c      	adds	r7, #12
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr

080098b4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80098bc:	bf00      	nop
 80098be:	370c      	adds	r7, #12
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr

080098c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d101      	bne.n	80098da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80098d6:	2301      	movs	r3, #1
 80098d8:	e042      	b.n	8009960 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d106      	bne.n	80098f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f7f8 f981 	bl	8001bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2224      	movs	r2, #36	@ 0x24
 80098f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f022 0201 	bic.w	r2, r2, #1
 8009908:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800990e:	2b00      	cmp	r3, #0
 8009910:	d002      	beq.n	8009918 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 fe5a 	bl	800a5cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 fca9 	bl	800a270 <UART_SetConfig>
 800991e:	4603      	mov	r3, r0
 8009920:	2b01      	cmp	r3, #1
 8009922:	d101      	bne.n	8009928 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009924:	2301      	movs	r3, #1
 8009926:	e01b      	b.n	8009960 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	685a      	ldr	r2, [r3, #4]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009936:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	689a      	ldr	r2, [r3, #8]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009946:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f042 0201 	orr.w	r2, r2, #1
 8009956:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 fed9 	bl	800a710 <UART_CheckIdleState>
 800995e:	4603      	mov	r3, r0
}
 8009960:	4618      	mov	r0, r3
 8009962:	3708      	adds	r7, #8
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b08a      	sub	sp, #40	@ 0x28
 800996c:	af02      	add	r7, sp, #8
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	603b      	str	r3, [r7, #0]
 8009974:	4613      	mov	r3, r2
 8009976:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800997e:	2b20      	cmp	r3, #32
 8009980:	f040 808b 	bne.w	8009a9a <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d002      	beq.n	8009990 <HAL_UART_Transmit+0x28>
 800998a:	88fb      	ldrh	r3, [r7, #6]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d101      	bne.n	8009994 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009990:	2301      	movs	r3, #1
 8009992:	e083      	b.n	8009a9c <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800999e:	2b80      	cmp	r3, #128	@ 0x80
 80099a0:	d107      	bne.n	80099b2 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	689a      	ldr	r2, [r3, #8]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80099b0:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2200      	movs	r2, #0
 80099b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2221      	movs	r2, #33	@ 0x21
 80099be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80099c2:	f7f8 fc4f 	bl	8002264 <HAL_GetTick>
 80099c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	88fa      	ldrh	r2, [r7, #6]
 80099cc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	88fa      	ldrh	r2, [r7, #6]
 80099d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099e0:	d108      	bne.n	80099f4 <HAL_UART_Transmit+0x8c>
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d104      	bne.n	80099f4 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 80099ea:	2300      	movs	r3, #0
 80099ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	61bb      	str	r3, [r7, #24]
 80099f2:	e003      	b.n	80099fc <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80099f8:	2300      	movs	r3, #0
 80099fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80099fc:	e030      	b.n	8009a60 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	9300      	str	r3, [sp, #0]
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	2200      	movs	r2, #0
 8009a06:	2180      	movs	r1, #128	@ 0x80
 8009a08:	68f8      	ldr	r0, [r7, #12]
 8009a0a:	f000 ff2b 	bl	800a864 <UART_WaitOnFlagUntilTimeout>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d005      	beq.n	8009a20 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2220      	movs	r2, #32
 8009a18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009a1c:	2303      	movs	r3, #3
 8009a1e:	e03d      	b.n	8009a9c <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8009a20:	69fb      	ldr	r3, [r7, #28]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d10b      	bne.n	8009a3e <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	881b      	ldrh	r3, [r3, #0]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a34:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009a36:	69bb      	ldr	r3, [r7, #24]
 8009a38:	3302      	adds	r3, #2
 8009a3a:	61bb      	str	r3, [r7, #24]
 8009a3c:	e007      	b.n	8009a4e <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	781a      	ldrb	r2, [r3, #0]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009a48:	69fb      	ldr	r3, [r7, #28]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	3b01      	subs	r3, #1
 8009a58:	b29a      	uxth	r2, r3
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d1c8      	bne.n	80099fe <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	9300      	str	r3, [sp, #0]
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	2200      	movs	r2, #0
 8009a74:	2140      	movs	r1, #64	@ 0x40
 8009a76:	68f8      	ldr	r0, [r7, #12]
 8009a78:	f000 fef4 	bl	800a864 <UART_WaitOnFlagUntilTimeout>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d005      	beq.n	8009a8e <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2220      	movs	r2, #32
 8009a86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009a8a:	2303      	movs	r3, #3
 8009a8c:	e006      	b.n	8009a9c <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2220      	movs	r2, #32
 8009a92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009a96:	2300      	movs	r3, #0
 8009a98:	e000      	b.n	8009a9c <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8009a9a:	2302      	movs	r3, #2
  }
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3720      	adds	r7, #32
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b08a      	sub	sp, #40	@ 0x28
 8009aa8:	af02      	add	r7, sp, #8
 8009aaa:	60f8      	str	r0, [r7, #12]
 8009aac:	60b9      	str	r1, [r7, #8]
 8009aae:	603b      	str	r3, [r7, #0]
 8009ab0:	4613      	mov	r3, r2
 8009ab2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009aba:	2b20      	cmp	r3, #32
 8009abc:	f040 80c4 	bne.w	8009c48 <HAL_UART_Receive+0x1a4>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d002      	beq.n	8009acc <HAL_UART_Receive+0x28>
 8009ac6:	88fb      	ldrh	r3, [r7, #6]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d101      	bne.n	8009ad0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8009acc:	2301      	movs	r3, #1
 8009ace:	e0bc      	b.n	8009c4a <HAL_UART_Receive+0x1a6>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ada:	2b40      	cmp	r3, #64	@ 0x40
 8009adc:	d107      	bne.n	8009aee <HAL_UART_Receive+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	689a      	ldr	r2, [r3, #8]
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009aec:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2200      	movs	r2, #0
 8009af2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2222      	movs	r2, #34	@ 0x22
 8009afa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2200      	movs	r2, #0
 8009b02:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009b04:	f7f8 fbae 	bl	8002264 <HAL_GetTick>
 8009b08:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	88fa      	ldrh	r2, [r7, #6]
 8009b0e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	88fa      	ldrh	r2, [r7, #6]
 8009b16:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	689b      	ldr	r3, [r3, #8]
 8009b1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b22:	d10e      	bne.n	8009b42 <HAL_UART_Receive+0x9e>
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	691b      	ldr	r3, [r3, #16]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d105      	bne.n	8009b38 <HAL_UART_Receive+0x94>
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009b32:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009b36:	e02d      	b.n	8009b94 <HAL_UART_Receive+0xf0>
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	22ff      	movs	r2, #255	@ 0xff
 8009b3c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009b40:	e028      	b.n	8009b94 <HAL_UART_Receive+0xf0>
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d10d      	bne.n	8009b66 <HAL_UART_Receive+0xc2>
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	691b      	ldr	r3, [r3, #16]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d104      	bne.n	8009b5c <HAL_UART_Receive+0xb8>
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	22ff      	movs	r2, #255	@ 0xff
 8009b56:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009b5a:	e01b      	b.n	8009b94 <HAL_UART_Receive+0xf0>
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	227f      	movs	r2, #127	@ 0x7f
 8009b60:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009b64:	e016      	b.n	8009b94 <HAL_UART_Receive+0xf0>
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	689b      	ldr	r3, [r3, #8]
 8009b6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b6e:	d10d      	bne.n	8009b8c <HAL_UART_Receive+0xe8>
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d104      	bne.n	8009b82 <HAL_UART_Receive+0xde>
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	227f      	movs	r2, #127	@ 0x7f
 8009b7c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009b80:	e008      	b.n	8009b94 <HAL_UART_Receive+0xf0>
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	223f      	movs	r2, #63	@ 0x3f
 8009b86:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009b8a:	e003      	b.n	8009b94 <HAL_UART_Receive+0xf0>
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009b9a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ba4:	d108      	bne.n	8009bb8 <HAL_UART_Receive+0x114>
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	691b      	ldr	r3, [r3, #16]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d104      	bne.n	8009bb8 <HAL_UART_Receive+0x114>
    {
      pdata8bits  = NULL;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	61bb      	str	r3, [r7, #24]
 8009bb6:	e003      	b.n	8009bc0 <HAL_UART_Receive+0x11c>
    }
    else
    {
      pdata8bits  = pData;
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009bc0:	e036      	b.n	8009c30 <HAL_UART_Receive+0x18c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	9300      	str	r3, [sp, #0]
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	2120      	movs	r1, #32
 8009bcc:	68f8      	ldr	r0, [r7, #12]
 8009bce:	f000 fe49 	bl	800a864 <UART_WaitOnFlagUntilTimeout>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d005      	beq.n	8009be4 <HAL_UART_Receive+0x140>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2220      	movs	r2, #32
 8009bdc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8009be0:	2303      	movs	r3, #3
 8009be2:	e032      	b.n	8009c4a <HAL_UART_Receive+0x1a6>
      }
      if (pdata8bits == NULL)
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d10c      	bne.n	8009c04 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bf0:	b29a      	uxth	r2, r3
 8009bf2:	8a7b      	ldrh	r3, [r7, #18]
 8009bf4:	4013      	ands	r3, r2
 8009bf6:	b29a      	uxth	r2, r3
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009bfc:	69bb      	ldr	r3, [r7, #24]
 8009bfe:	3302      	adds	r3, #2
 8009c00:	61bb      	str	r3, [r7, #24]
 8009c02:	e00c      	b.n	8009c1e <HAL_UART_Receive+0x17a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c0a:	b2da      	uxtb	r2, r3
 8009c0c:	8a7b      	ldrh	r3, [r7, #18]
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	4013      	ands	r3, r2
 8009c12:	b2da      	uxtb	r2, r3
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	3b01      	subs	r3, #1
 8009c28:	b29a      	uxth	r2, r3
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d1c2      	bne.n	8009bc2 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2220      	movs	r2, #32
 8009c40:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8009c44:	2300      	movs	r3, #0
 8009c46:	e000      	b.n	8009c4a <HAL_UART_Receive+0x1a6>
  }
  else
  {
    return HAL_BUSY;
 8009c48:	2302      	movs	r3, #2
  }
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3720      	adds	r7, #32
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
	...

08009c54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b0ae      	sub	sp, #184	@ 0xb8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	69db      	ldr	r3, [r3, #28]
 8009c62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009c7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009c7e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009c82:	4013      	ands	r3, r2
 8009c84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 8009c88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d11b      	bne.n	8009cc8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009c90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009c94:	f003 0320 	and.w	r3, r3, #32
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d015      	beq.n	8009cc8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009c9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009ca0:	f003 0320 	and.w	r3, r3, #32
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d105      	bne.n	8009cb4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009ca8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009cac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d009      	beq.n	8009cc8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	f000 82ac 	beq.w	800a216 <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	4798      	blx	r3
      }
      return;
 8009cc6:	e2a6      	b.n	800a216 <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009cc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	f000 80fd 	beq.w	8009ecc <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009cd2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009cd6:	4b7a      	ldr	r3, [pc, #488]	@ (8009ec0 <HAL_UART_IRQHandler+0x26c>)
 8009cd8:	4013      	ands	r3, r2
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d106      	bne.n	8009cec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009cde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009ce2:	4b78      	ldr	r3, [pc, #480]	@ (8009ec4 <HAL_UART_IRQHandler+0x270>)
 8009ce4:	4013      	ands	r3, r2
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	f000 80f0 	beq.w	8009ecc <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009cec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009cf0:	f003 0301 	and.w	r3, r3, #1
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d011      	beq.n	8009d1c <HAL_UART_IRQHandler+0xc8>
 8009cf8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d00b      	beq.n	8009d1c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2201      	movs	r2, #1
 8009d0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d12:	f043 0201 	orr.w	r2, r3, #1
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009d20:	f003 0302 	and.w	r3, r3, #2
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d011      	beq.n	8009d4c <HAL_UART_IRQHandler+0xf8>
 8009d28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d2c:	f003 0301 	and.w	r3, r3, #1
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d00b      	beq.n	8009d4c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	2202      	movs	r2, #2
 8009d3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d42:	f043 0204 	orr.w	r2, r3, #4
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009d50:	f003 0304 	and.w	r3, r3, #4
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d011      	beq.n	8009d7c <HAL_UART_IRQHandler+0x128>
 8009d58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d5c:	f003 0301 	and.w	r3, r3, #1
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d00b      	beq.n	8009d7c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	2204      	movs	r2, #4
 8009d6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d72:	f043 0202 	orr.w	r2, r3, #2
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009d7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009d80:	f003 0308 	and.w	r3, r3, #8
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d017      	beq.n	8009db8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009d88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009d8c:	f003 0320 	and.w	r3, r3, #32
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d105      	bne.n	8009da0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009d94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009d98:	4b49      	ldr	r3, [pc, #292]	@ (8009ec0 <HAL_UART_IRQHandler+0x26c>)
 8009d9a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d00b      	beq.n	8009db8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	2208      	movs	r2, #8
 8009da6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009dae:	f043 0208 	orr.w	r2, r3, #8
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009db8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009dbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d012      	beq.n	8009dea <HAL_UART_IRQHandler+0x196>
 8009dc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009dc8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d00c      	beq.n	8009dea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009dd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009de0:	f043 0220 	orr.w	r2, r3, #32
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	f000 8212 	beq.w	800a21a <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009df6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009dfa:	f003 0320 	and.w	r3, r3, #32
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d013      	beq.n	8009e2a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009e02:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009e06:	f003 0320 	and.w	r3, r3, #32
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d105      	bne.n	8009e1a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009e0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d007      	beq.n	8009e2a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d003      	beq.n	8009e2a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	689b      	ldr	r3, [r3, #8]
 8009e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e3e:	2b40      	cmp	r3, #64	@ 0x40
 8009e40:	d005      	beq.n	8009e4e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009e42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009e46:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d02e      	beq.n	8009eac <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 fd75 	bl	800a93e <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	689b      	ldr	r3, [r3, #8]
 8009e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e5e:	2b40      	cmp	r3, #64	@ 0x40
 8009e60:	d120      	bne.n	8009ea4 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d017      	beq.n	8009e9c <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e72:	4a15      	ldr	r2, [pc, #84]	@ (8009ec8 <HAL_UART_IRQHandler+0x274>)
 8009e74:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f7f8 fc2d 	bl	80026dc <HAL_DMA_Abort_IT>
 8009e82:	4603      	mov	r3, r0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d019      	beq.n	8009ebc <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009e96:	4610      	mov	r0, r2
 8009e98:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e9a:	e00f      	b.n	8009ebc <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f000 f9d1 	bl	800a244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ea2:	e00b      	b.n	8009ebc <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 f9cd 	bl	800a244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009eaa:	e007      	b.n	8009ebc <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 f9c9 	bl	800a244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009eba:	e1ae      	b.n	800a21a <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ebc:	bf00      	nop
    return;
 8009ebe:	e1ac      	b.n	800a21a <HAL_UART_IRQHandler+0x5c6>
 8009ec0:	10000001 	.word	0x10000001
 8009ec4:	04000120 	.word	0x04000120
 8009ec8:	0800aa0b 	.word	0x0800aa0b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	f040 8142 	bne.w	800a15a <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009ed6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009eda:	f003 0310 	and.w	r3, r3, #16
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	f000 813b 	beq.w	800a15a <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009ee4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009ee8:	f003 0310 	and.w	r3, r3, #16
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	f000 8134 	beq.w	800a15a <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	2210      	movs	r2, #16
 8009ef8:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	689b      	ldr	r3, [r3, #8]
 8009f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f04:	2b40      	cmp	r3, #64	@ 0x40
 8009f06:	f040 80aa 	bne.w	800a05e <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f14:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 8009f18:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	f000 8084 	beq.w	800a02a <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009f28:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d27c      	bcs.n	800a02a <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8009f36:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f42:	2b81      	cmp	r3, #129	@ 0x81
 8009f44:	d060      	beq.n	800a008 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009f4e:	e853 3f00 	ldrex	r3, [r3]
 8009f52:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009f54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f56:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	461a      	mov	r2, r3
 8009f64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009f68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009f6c:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f6e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009f70:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009f74:	e841 2300 	strex	r3, r2, [r1]
 8009f78:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009f7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d1e2      	bne.n	8009f46 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	3308      	adds	r3, #8
 8009f86:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009f8a:	e853 3f00 	ldrex	r3, [r3]
 8009f8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009f90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f92:	f023 0301 	bic.w	r3, r3, #1
 8009f96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	3308      	adds	r3, #8
 8009fa0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009fa4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009fa6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009faa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009fac:	e841 2300 	strex	r3, r2, [r1]
 8009fb0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009fb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d1e3      	bne.n	8009f80 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2220      	movs	r2, #32
 8009fbc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fce:	e853 3f00 	ldrex	r3, [r3]
 8009fd2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009fd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009fd6:	f023 0310 	bic.w	r3, r3, #16
 8009fda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009fe8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009fea:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009fee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009ff0:	e841 2300 	strex	r3, r2, [r1]
 8009ff4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009ff6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d1e4      	bne.n	8009fc6 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a002:	4618      	mov	r0, r3
 800a004:	f7f8 faee 	bl	80025e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2202      	movs	r2, #2
 800a00c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	1ad3      	subs	r3, r2, r3
 800a01e:	b29b      	uxth	r3, r3
 800a020:	4619      	mov	r1, r3
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 f918 	bl	800a258 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a028:	e0f9      	b.n	800a21e <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a030:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800a034:	429a      	cmp	r2, r3
 800a036:	f040 80f2 	bne.w	800a21e <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a040:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a042:	2b81      	cmp	r3, #129	@ 0x81
 800a044:	f040 80eb 	bne.w	800a21e <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2202      	movs	r2, #2
 800a04c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a054:	4619      	mov	r1, r3
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 f8fe 	bl	800a258 <HAL_UARTEx_RxEventCallback>
      return;
 800a05c:	e0df      	b.n	800a21e <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	1ad3      	subs	r3, r2, r3
 800a06e:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a078:	b29b      	uxth	r3, r3
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	f000 80d1 	beq.w	800a222 <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 800a080:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800a084:	2b00      	cmp	r3, #0
 800a086:	f000 80cc 	beq.w	800a222 <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a092:	e853 3f00 	ldrex	r3, [r3]
 800a096:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a09a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a09e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a0ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a0b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a0b4:	e841 2300 	strex	r3, r2, [r1]
 800a0b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a0ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d1e4      	bne.n	800a08a <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	3308      	adds	r3, #8
 800a0c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ca:	e853 3f00 	ldrex	r3, [r3]
 800a0ce:	623b      	str	r3, [r7, #32]
   return(result);
 800a0d0:	6a3b      	ldr	r3, [r7, #32]
 800a0d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a0d6:	f023 0301 	bic.w	r3, r3, #1
 800a0da:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	3308      	adds	r3, #8
 800a0e4:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800a0e8:	633a      	str	r2, [r7, #48]	@ 0x30
 800a0ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0f0:	e841 2300 	strex	r3, r2, [r1]
 800a0f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a0f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d1e1      	bne.n	800a0c0 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2220      	movs	r2, #32
 800a100:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2200      	movs	r2, #0
 800a108:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2200      	movs	r2, #0
 800a10e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	e853 3f00 	ldrex	r3, [r3]
 800a11c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f023 0310 	bic.w	r3, r3, #16
 800a124:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	461a      	mov	r2, r3
 800a12e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a132:	61fb      	str	r3, [r7, #28]
 800a134:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a136:	69b9      	ldr	r1, [r7, #24]
 800a138:	69fa      	ldr	r2, [r7, #28]
 800a13a:	e841 2300 	strex	r3, r2, [r1]
 800a13e:	617b      	str	r3, [r7, #20]
   return(result);
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d1e4      	bne.n	800a110 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2202      	movs	r2, #2
 800a14a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a14c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800a150:	4619      	mov	r1, r3
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 f880 	bl	800a258 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a158:	e063      	b.n	800a222 <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a15a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a15e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a162:	2b00      	cmp	r3, #0
 800a164:	d00e      	beq.n	800a184 <HAL_UART_IRQHandler+0x530>
 800a166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a16a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d008      	beq.n	800a184 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a17a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 fc81 	bl	800aa84 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a182:	e051      	b.n	800a228 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a184:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d014      	beq.n	800a1ba <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a190:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a194:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d105      	bne.n	800a1a8 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a19c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a1a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d008      	beq.n	800a1ba <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d03a      	beq.n	800a226 <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	4798      	blx	r3
    }
    return;
 800a1b8:	e035      	b.n	800a226 <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a1ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a1be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d009      	beq.n	800a1da <HAL_UART_IRQHandler+0x586>
 800a1c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a1ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d003      	beq.n	800a1da <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 fc2b 	bl	800aa2e <UART_EndTransmit_IT>
    return;
 800a1d8:	e026      	b.n	800a228 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a1da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a1de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d009      	beq.n	800a1fa <HAL_UART_IRQHandler+0x5a6>
 800a1e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a1ea:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d003      	beq.n	800a1fa <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 fc5a 	bl	800aaac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a1f8:	e016      	b.n	800a228 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a1fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a1fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a202:	2b00      	cmp	r3, #0
 800a204:	d010      	beq.n	800a228 <HAL_UART_IRQHandler+0x5d4>
 800a206:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	da0c      	bge.n	800a228 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 fc42 	bl	800aa98 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a214:	e008      	b.n	800a228 <HAL_UART_IRQHandler+0x5d4>
      return;
 800a216:	bf00      	nop
 800a218:	e006      	b.n	800a228 <HAL_UART_IRQHandler+0x5d4>
    return;
 800a21a:	bf00      	nop
 800a21c:	e004      	b.n	800a228 <HAL_UART_IRQHandler+0x5d4>
      return;
 800a21e:	bf00      	nop
 800a220:	e002      	b.n	800a228 <HAL_UART_IRQHandler+0x5d4>
      return;
 800a222:	bf00      	nop
 800a224:	e000      	b.n	800a228 <HAL_UART_IRQHandler+0x5d4>
    return;
 800a226:	bf00      	nop
  }
}
 800a228:	37b8      	adds	r7, #184	@ 0xb8
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	bf00      	nop

0800a230 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a238:	bf00      	nop
 800a23a:	370c      	adds	r7, #12
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr

0800a244 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a24c:	bf00      	nop
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a258:	b480      	push	{r7}
 800a25a:	b083      	sub	sp, #12
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	460b      	mov	r3, r1
 800a262:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a264:	bf00      	nop
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a274:	b094      	sub	sp, #80	@ 0x50
 800a276:	af00      	add	r7, sp, #0
 800a278:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a27a:	2300      	movs	r3, #0
 800a27c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	4b83      	ldr	r3, [pc, #524]	@ (800a494 <UART_SetConfig+0x224>)
 800a286:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a28a:	689a      	ldr	r2, [r3, #8]
 800a28c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a28e:	691b      	ldr	r3, [r3, #16]
 800a290:	431a      	orrs	r2, r3
 800a292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a294:	695b      	ldr	r3, [r3, #20]
 800a296:	431a      	orrs	r2, r3
 800a298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a29a:	69db      	ldr	r3, [r3, #28]
 800a29c:	4313      	orrs	r3, r2
 800a29e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a2a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	497c      	ldr	r1, [pc, #496]	@ (800a498 <UART_SetConfig+0x228>)
 800a2a8:	4019      	ands	r1, r3
 800a2aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2b0:	430b      	orrs	r3, r1
 800a2b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a2b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a2be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2c0:	68d9      	ldr	r1, [r3, #12]
 800a2c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	ea40 0301 	orr.w	r3, r0, r1
 800a2ca:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a2cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2ce:	699b      	ldr	r3, [r3, #24]
 800a2d0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a2d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	4b6f      	ldr	r3, [pc, #444]	@ (800a494 <UART_SetConfig+0x224>)
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d009      	beq.n	800a2f0 <UART_SetConfig+0x80>
 800a2dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2de:	681a      	ldr	r2, [r3, #0]
 800a2e0:	4b6e      	ldr	r3, [pc, #440]	@ (800a49c <UART_SetConfig+0x22c>)
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d004      	beq.n	800a2f0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a2e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2e8:	6a1a      	ldr	r2, [r3, #32]
 800a2ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a2f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800a2fa:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800a2fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a304:	430b      	orrs	r3, r1
 800a306:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a30e:	f023 000f 	bic.w	r0, r3, #15
 800a312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a314:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	ea40 0301 	orr.w	r3, r0, r1
 800a31e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a322:	681a      	ldr	r2, [r3, #0]
 800a324:	4b5e      	ldr	r3, [pc, #376]	@ (800a4a0 <UART_SetConfig+0x230>)
 800a326:	429a      	cmp	r2, r3
 800a328:	d102      	bne.n	800a330 <UART_SetConfig+0xc0>
 800a32a:	2301      	movs	r3, #1
 800a32c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a32e:	e032      	b.n	800a396 <UART_SetConfig+0x126>
 800a330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	4b5b      	ldr	r3, [pc, #364]	@ (800a4a4 <UART_SetConfig+0x234>)
 800a336:	429a      	cmp	r2, r3
 800a338:	d102      	bne.n	800a340 <UART_SetConfig+0xd0>
 800a33a:	2302      	movs	r3, #2
 800a33c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a33e:	e02a      	b.n	800a396 <UART_SetConfig+0x126>
 800a340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	4b58      	ldr	r3, [pc, #352]	@ (800a4a8 <UART_SetConfig+0x238>)
 800a346:	429a      	cmp	r2, r3
 800a348:	d102      	bne.n	800a350 <UART_SetConfig+0xe0>
 800a34a:	2304      	movs	r3, #4
 800a34c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a34e:	e022      	b.n	800a396 <UART_SetConfig+0x126>
 800a350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	4b55      	ldr	r3, [pc, #340]	@ (800a4ac <UART_SetConfig+0x23c>)
 800a356:	429a      	cmp	r2, r3
 800a358:	d102      	bne.n	800a360 <UART_SetConfig+0xf0>
 800a35a:	2308      	movs	r3, #8
 800a35c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a35e:	e01a      	b.n	800a396 <UART_SetConfig+0x126>
 800a360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	4b52      	ldr	r3, [pc, #328]	@ (800a4b0 <UART_SetConfig+0x240>)
 800a366:	429a      	cmp	r2, r3
 800a368:	d102      	bne.n	800a370 <UART_SetConfig+0x100>
 800a36a:	2310      	movs	r3, #16
 800a36c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a36e:	e012      	b.n	800a396 <UART_SetConfig+0x126>
 800a370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a372:	681a      	ldr	r2, [r3, #0]
 800a374:	4b4f      	ldr	r3, [pc, #316]	@ (800a4b4 <UART_SetConfig+0x244>)
 800a376:	429a      	cmp	r2, r3
 800a378:	d102      	bne.n	800a380 <UART_SetConfig+0x110>
 800a37a:	2320      	movs	r3, #32
 800a37c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a37e:	e00a      	b.n	800a396 <UART_SetConfig+0x126>
 800a380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	4b43      	ldr	r3, [pc, #268]	@ (800a494 <UART_SetConfig+0x224>)
 800a386:	429a      	cmp	r2, r3
 800a388:	d103      	bne.n	800a392 <UART_SetConfig+0x122>
 800a38a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a38e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a390:	e001      	b.n	800a396 <UART_SetConfig+0x126>
 800a392:	2300      	movs	r3, #0
 800a394:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	4b3e      	ldr	r3, [pc, #248]	@ (800a494 <UART_SetConfig+0x224>)
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d005      	beq.n	800a3ac <UART_SetConfig+0x13c>
 800a3a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	4b3d      	ldr	r3, [pc, #244]	@ (800a49c <UART_SetConfig+0x22c>)
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	f040 8088 	bne.w	800a4bc <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a3ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	623b      	str	r3, [r7, #32]
 800a3b2:	627a      	str	r2, [r7, #36]	@ 0x24
 800a3b4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a3b8:	f7fc f844 	bl	8006444 <HAL_RCCEx_GetPeriphCLKFreq>
 800a3bc:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800a3be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	f000 80eb 	beq.w	800a59c <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a3c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ca:	4a3b      	ldr	r2, [pc, #236]	@ (800a4b8 <UART_SetConfig+0x248>)
 800a3cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3d8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a3da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3dc:	685a      	ldr	r2, [r3, #4]
 800a3de:	4613      	mov	r3, r2
 800a3e0:	005b      	lsls	r3, r3, #1
 800a3e2:	4413      	add	r3, r2
 800a3e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d305      	bcc.n	800a3f6 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a3ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a3f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d903      	bls.n	800a3fe <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a3fc:	e048      	b.n	800a490 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a400:	2200      	movs	r2, #0
 800a402:	61bb      	str	r3, [r7, #24]
 800a404:	61fa      	str	r2, [r7, #28]
 800a406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a40a:	4a2b      	ldr	r2, [pc, #172]	@ (800a4b8 <UART_SetConfig+0x248>)
 800a40c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a410:	b29b      	uxth	r3, r3
 800a412:	2200      	movs	r2, #0
 800a414:	613b      	str	r3, [r7, #16]
 800a416:	617a      	str	r2, [r7, #20]
 800a418:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a41c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a420:	f7f6 f8fc 	bl	800061c <__aeabi_uldivmod>
 800a424:	4602      	mov	r2, r0
 800a426:	460b      	mov	r3, r1
 800a428:	4610      	mov	r0, r2
 800a42a:	4619      	mov	r1, r3
 800a42c:	f04f 0200 	mov.w	r2, #0
 800a430:	f04f 0300 	mov.w	r3, #0
 800a434:	020b      	lsls	r3, r1, #8
 800a436:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a43a:	0202      	lsls	r2, r0, #8
 800a43c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a43e:	6849      	ldr	r1, [r1, #4]
 800a440:	0849      	lsrs	r1, r1, #1
 800a442:	2000      	movs	r0, #0
 800a444:	460c      	mov	r4, r1
 800a446:	4605      	mov	r5, r0
 800a448:	eb12 0804 	adds.w	r8, r2, r4
 800a44c:	eb43 0905 	adc.w	r9, r3, r5
 800a450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	2200      	movs	r2, #0
 800a456:	60bb      	str	r3, [r7, #8]
 800a458:	60fa      	str	r2, [r7, #12]
 800a45a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a45e:	4640      	mov	r0, r8
 800a460:	4649      	mov	r1, r9
 800a462:	f7f6 f8db 	bl	800061c <__aeabi_uldivmod>
 800a466:	4602      	mov	r2, r0
 800a468:	460b      	mov	r3, r1
 800a46a:	4613      	mov	r3, r2
 800a46c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a46e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a470:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a474:	d308      	bcc.n	800a488 <UART_SetConfig+0x218>
 800a476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a478:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a47c:	d204      	bcs.n	800a488 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800a47e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a484:	60da      	str	r2, [r3, #12]
 800a486:	e003      	b.n	800a490 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800a488:	2301      	movs	r3, #1
 800a48a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800a48e:	e085      	b.n	800a59c <UART_SetConfig+0x32c>
 800a490:	e084      	b.n	800a59c <UART_SetConfig+0x32c>
 800a492:	bf00      	nop
 800a494:	44002400 	.word	0x44002400
 800a498:	cfff69f3 	.word	0xcfff69f3
 800a49c:	54002400 	.word	0x54002400
 800a4a0:	40013800 	.word	0x40013800
 800a4a4:	40004400 	.word	0x40004400
 800a4a8:	40004800 	.word	0x40004800
 800a4ac:	40004c00 	.word	0x40004c00
 800a4b0:	40005000 	.word	0x40005000
 800a4b4:	40006400 	.word	0x40006400
 800a4b8:	0800c008 	.word	0x0800c008
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a4bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4be:	69db      	ldr	r3, [r3, #28]
 800a4c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a4c4:	d13c      	bne.n	800a540 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a4c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	603b      	str	r3, [r7, #0]
 800a4cc:	607a      	str	r2, [r7, #4]
 800a4ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a4d2:	f7fb ffb7 	bl	8006444 <HAL_RCCEx_GetPeriphCLKFreq>
 800a4d6:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a4d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d05e      	beq.n	800a59c <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4e2:	4a39      	ldr	r2, [pc, #228]	@ (800a5c8 <UART_SetConfig+0x358>)
 800a4e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4f0:	005a      	lsls	r2, r3, #1
 800a4f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	085b      	lsrs	r3, r3, #1
 800a4f8:	441a      	add	r2, r3
 800a4fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800a502:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a506:	2b0f      	cmp	r3, #15
 800a508:	d916      	bls.n	800a538 <UART_SetConfig+0x2c8>
 800a50a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a50c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a510:	d212      	bcs.n	800a538 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a514:	b29b      	uxth	r3, r3
 800a516:	f023 030f 	bic.w	r3, r3, #15
 800a51a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a51c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a51e:	085b      	lsrs	r3, r3, #1
 800a520:	b29b      	uxth	r3, r3
 800a522:	f003 0307 	and.w	r3, r3, #7
 800a526:	b29a      	uxth	r2, r3
 800a528:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a52a:	4313      	orrs	r3, r2
 800a52c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800a52e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800a534:	60da      	str	r2, [r3, #12]
 800a536:	e031      	b.n	800a59c <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a53e:	e02d      	b.n	800a59c <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a540:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a542:	2200      	movs	r2, #0
 800a544:	469a      	mov	sl, r3
 800a546:	4693      	mov	fp, r2
 800a548:	4650      	mov	r0, sl
 800a54a:	4659      	mov	r1, fp
 800a54c:	f7fb ff7a 	bl	8006444 <HAL_RCCEx_GetPeriphCLKFreq>
 800a550:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800a552:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a554:	2b00      	cmp	r3, #0
 800a556:	d021      	beq.n	800a59c <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a55a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a55c:	4a1a      	ldr	r2, [pc, #104]	@ (800a5c8 <UART_SetConfig+0x358>)
 800a55e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a562:	461a      	mov	r2, r3
 800a564:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a566:	fbb3 f2f2 	udiv	r2, r3, r2
 800a56a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	085b      	lsrs	r3, r3, #1
 800a570:	441a      	add	r2, r3
 800a572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	fbb2 f3f3 	udiv	r3, r2, r3
 800a57a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a57c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a57e:	2b0f      	cmp	r3, #15
 800a580:	d909      	bls.n	800a596 <UART_SetConfig+0x326>
 800a582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a584:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a588:	d205      	bcs.n	800a596 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a58a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a58c:	b29a      	uxth	r2, r3
 800a58e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	60da      	str	r2, [r3, #12]
 800a594:	e002      	b.n	800a59c <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800a596:	2301      	movs	r3, #1
 800a598:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a59c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a59e:	2201      	movs	r2, #1
 800a5a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a5a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a5ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a5b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a5b8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3750      	adds	r7, #80	@ 0x50
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a5c6:	bf00      	nop
 800a5c8:	0800c008 	.word	0x0800c008

0800a5cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b083      	sub	sp, #12
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5d8:	f003 0308 	and.w	r3, r3, #8
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d00a      	beq.n	800a5f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	430a      	orrs	r2, r1
 800a5f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5fa:	f003 0301 	and.w	r3, r3, #1
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d00a      	beq.n	800a618 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	430a      	orrs	r2, r1
 800a616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a61c:	f003 0302 	and.w	r3, r3, #2
 800a620:	2b00      	cmp	r3, #0
 800a622:	d00a      	beq.n	800a63a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	430a      	orrs	r2, r1
 800a638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a63e:	f003 0304 	and.w	r3, r3, #4
 800a642:	2b00      	cmp	r3, #0
 800a644:	d00a      	beq.n	800a65c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	430a      	orrs	r2, r1
 800a65a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a660:	f003 0310 	and.w	r3, r3, #16
 800a664:	2b00      	cmp	r3, #0
 800a666:	d00a      	beq.n	800a67e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	689b      	ldr	r3, [r3, #8]
 800a66e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	430a      	orrs	r2, r1
 800a67c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a682:	f003 0320 	and.w	r3, r3, #32
 800a686:	2b00      	cmp	r3, #0
 800a688:	d00a      	beq.n	800a6a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	689b      	ldr	r3, [r3, #8]
 800a690:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	430a      	orrs	r2, r1
 800a69e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d01a      	beq.n	800a6e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	430a      	orrs	r2, r1
 800a6c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a6ca:	d10a      	bne.n	800a6e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	430a      	orrs	r2, r1
 800a6e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d00a      	beq.n	800a704 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	430a      	orrs	r2, r1
 800a702:	605a      	str	r2, [r3, #4]
  }
}
 800a704:	bf00      	nop
 800a706:	370c      	adds	r7, #12
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b098      	sub	sp, #96	@ 0x60
 800a714:	af02      	add	r7, sp, #8
 800a716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a720:	f7f7 fda0 	bl	8002264 <HAL_GetTick>
 800a724:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f003 0308 	and.w	r3, r3, #8
 800a730:	2b08      	cmp	r3, #8
 800a732:	d12f      	bne.n	800a794 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a734:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a738:	9300      	str	r3, [sp, #0]
 800a73a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a73c:	2200      	movs	r2, #0
 800a73e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 f88e 	bl	800a864 <UART_WaitOnFlagUntilTimeout>
 800a748:	4603      	mov	r3, r0
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d022      	beq.n	800a794 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a756:	e853 3f00 	ldrex	r3, [r3]
 800a75a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a75c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a75e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a762:	653b      	str	r3, [r7, #80]	@ 0x50
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	461a      	mov	r2, r3
 800a76a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a76c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a76e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a770:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a772:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a774:	e841 2300 	strex	r3, r2, [r1]
 800a778:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a77a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d1e6      	bne.n	800a74e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2220      	movs	r2, #32
 800a784:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2200      	movs	r2, #0
 800a78c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a790:	2303      	movs	r3, #3
 800a792:	e063      	b.n	800a85c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f003 0304 	and.w	r3, r3, #4
 800a79e:	2b04      	cmp	r3, #4
 800a7a0:	d149      	bne.n	800a836 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a7a6:	9300      	str	r3, [sp, #0]
 800a7a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f000 f857 	bl	800a864 <UART_WaitOnFlagUntilTimeout>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d03c      	beq.n	800a836 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7c4:	e853 3f00 	ldrex	r3, [r3]
 800a7c8:	623b      	str	r3, [r7, #32]
   return(result);
 800a7ca:	6a3b      	ldr	r3, [r7, #32]
 800a7cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a7d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7da:	633b      	str	r3, [r7, #48]	@ 0x30
 800a7dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a7e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7e2:	e841 2300 	strex	r3, r2, [r1]
 800a7e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a7e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d1e6      	bne.n	800a7bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	3308      	adds	r3, #8
 800a7f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	e853 3f00 	ldrex	r3, [r3]
 800a7fc:	60fb      	str	r3, [r7, #12]
   return(result);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	f023 0301 	bic.w	r3, r3, #1
 800a804:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	3308      	adds	r3, #8
 800a80c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a80e:	61fa      	str	r2, [r7, #28]
 800a810:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a812:	69b9      	ldr	r1, [r7, #24]
 800a814:	69fa      	ldr	r2, [r7, #28]
 800a816:	e841 2300 	strex	r3, r2, [r1]
 800a81a:	617b      	str	r3, [r7, #20]
   return(result);
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d1e5      	bne.n	800a7ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2220      	movs	r2, #32
 800a826:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a832:	2303      	movs	r3, #3
 800a834:	e012      	b.n	800a85c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2220      	movs	r2, #32
 800a83a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2220      	movs	r2, #32
 800a842:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2200      	movs	r2, #0
 800a84a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2200      	movs	r2, #0
 800a850:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2200      	movs	r2, #0
 800a856:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a85a:	2300      	movs	r3, #0
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3758      	adds	r7, #88	@ 0x58
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}

0800a864 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b084      	sub	sp, #16
 800a868:	af00      	add	r7, sp, #0
 800a86a:	60f8      	str	r0, [r7, #12]
 800a86c:	60b9      	str	r1, [r7, #8]
 800a86e:	603b      	str	r3, [r7, #0]
 800a870:	4613      	mov	r3, r2
 800a872:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a874:	e04f      	b.n	800a916 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a876:	69bb      	ldr	r3, [r7, #24]
 800a878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a87c:	d04b      	beq.n	800a916 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a87e:	f7f7 fcf1 	bl	8002264 <HAL_GetTick>
 800a882:	4602      	mov	r2, r0
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	1ad3      	subs	r3, r2, r3
 800a888:	69ba      	ldr	r2, [r7, #24]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d302      	bcc.n	800a894 <UART_WaitOnFlagUntilTimeout+0x30>
 800a88e:	69bb      	ldr	r3, [r7, #24]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d101      	bne.n	800a898 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a894:	2303      	movs	r3, #3
 800a896:	e04e      	b.n	800a936 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f003 0304 	and.w	r3, r3, #4
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d037      	beq.n	800a916 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	2b80      	cmp	r3, #128	@ 0x80
 800a8aa:	d034      	beq.n	800a916 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	2b40      	cmp	r3, #64	@ 0x40
 800a8b0:	d031      	beq.n	800a916 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	69db      	ldr	r3, [r3, #28]
 800a8b8:	f003 0308 	and.w	r3, r3, #8
 800a8bc:	2b08      	cmp	r3, #8
 800a8be:	d110      	bne.n	800a8e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	2208      	movs	r2, #8
 800a8c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a8c8:	68f8      	ldr	r0, [r7, #12]
 800a8ca:	f000 f838 	bl	800a93e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2208      	movs	r2, #8
 800a8d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	e029      	b.n	800a936 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	69db      	ldr	r3, [r3, #28]
 800a8e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a8ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a8f0:	d111      	bne.n	800a916 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a8fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a8fc:	68f8      	ldr	r0, [r7, #12]
 800a8fe:	f000 f81e 	bl	800a93e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2220      	movs	r2, #32
 800a906:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2200      	movs	r2, #0
 800a90e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a912:	2303      	movs	r3, #3
 800a914:	e00f      	b.n	800a936 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	69da      	ldr	r2, [r3, #28]
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	4013      	ands	r3, r2
 800a920:	68ba      	ldr	r2, [r7, #8]
 800a922:	429a      	cmp	r2, r3
 800a924:	bf0c      	ite	eq
 800a926:	2301      	moveq	r3, #1
 800a928:	2300      	movne	r3, #0
 800a92a:	b2db      	uxtb	r3, r3
 800a92c:	461a      	mov	r2, r3
 800a92e:	79fb      	ldrb	r3, [r7, #7]
 800a930:	429a      	cmp	r2, r3
 800a932:	d0a0      	beq.n	800a876 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	3710      	adds	r7, #16
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}

0800a93e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a93e:	b480      	push	{r7}
 800a940:	b095      	sub	sp, #84	@ 0x54
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a94c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a94e:	e853 3f00 	ldrex	r3, [r3]
 800a952:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a956:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a95a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	461a      	mov	r2, r3
 800a962:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a964:	643b      	str	r3, [r7, #64]	@ 0x40
 800a966:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a968:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a96a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a96c:	e841 2300 	strex	r3, r2, [r1]
 800a970:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a974:	2b00      	cmp	r3, #0
 800a976:	d1e6      	bne.n	800a946 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	3308      	adds	r3, #8
 800a97e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a980:	6a3b      	ldr	r3, [r7, #32]
 800a982:	e853 3f00 	ldrex	r3, [r3]
 800a986:	61fb      	str	r3, [r7, #28]
   return(result);
 800a988:	69fb      	ldr	r3, [r7, #28]
 800a98a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a98e:	f023 0301 	bic.w	r3, r3, #1
 800a992:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	3308      	adds	r3, #8
 800a99a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a99c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a99e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a9a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9a4:	e841 2300 	strex	r3, r2, [r1]
 800a9a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d1e3      	bne.n	800a978 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	d118      	bne.n	800a9ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	e853 3f00 	ldrex	r3, [r3]
 800a9c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	f023 0310 	bic.w	r3, r3, #16
 800a9cc:	647b      	str	r3, [r7, #68]	@ 0x44
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9d6:	61bb      	str	r3, [r7, #24]
 800a9d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9da:	6979      	ldr	r1, [r7, #20]
 800a9dc:	69ba      	ldr	r2, [r7, #24]
 800a9de:	e841 2300 	strex	r3, r2, [r1]
 800a9e2:	613b      	str	r3, [r7, #16]
   return(result);
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d1e6      	bne.n	800a9b8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2220      	movs	r2, #32
 800a9ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a9fe:	bf00      	nop
 800aa00:	3754      	adds	r7, #84	@ 0x54
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr

0800aa0a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b084      	sub	sp, #16
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aa20:	68f8      	ldr	r0, [r7, #12]
 800aa22:	f7ff fc0f 	bl	800a244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa26:	bf00      	nop
 800aa28:	3710      	adds	r7, #16
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}

0800aa2e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aa2e:	b580      	push	{r7, lr}
 800aa30:	b088      	sub	sp, #32
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	e853 3f00 	ldrex	r3, [r3]
 800aa42:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa4a:	61fb      	str	r3, [r7, #28]
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	461a      	mov	r2, r3
 800aa52:	69fb      	ldr	r3, [r7, #28]
 800aa54:	61bb      	str	r3, [r7, #24]
 800aa56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa58:	6979      	ldr	r1, [r7, #20]
 800aa5a:	69ba      	ldr	r2, [r7, #24]
 800aa5c:	e841 2300 	strex	r3, r2, [r1]
 800aa60:	613b      	str	r3, [r7, #16]
   return(result);
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d1e6      	bne.n	800aa36 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2220      	movs	r2, #32
 800aa6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2200      	movs	r2, #0
 800aa74:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f7ff fbda 	bl	800a230 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa7c:	bf00      	nop
 800aa7e:	3720      	adds	r7, #32
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aa8c:	bf00      	nop
 800aa8e:	370c      	adds	r7, #12
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr

0800aa98 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b083      	sub	sp, #12
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800aaa0:	bf00      	nop
 800aaa2:	370c      	adds	r7, #12
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr

0800aaac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b083      	sub	sp, #12
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800aab4:	bf00      	nop
 800aab6:	370c      	adds	r7, #12
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b085      	sub	sp, #20
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d101      	bne.n	800aad6 <HAL_UARTEx_DisableFifoMode+0x16>
 800aad2:	2302      	movs	r3, #2
 800aad4:	e027      	b.n	800ab26 <HAL_UARTEx_DisableFifoMode+0x66>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2201      	movs	r2, #1
 800aada:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2224      	movs	r2, #36	@ 0x24
 800aae2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	681a      	ldr	r2, [r3, #0]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f022 0201 	bic.w	r2, r2, #1
 800aafc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ab04:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	68fa      	ldr	r2, [r7, #12]
 800ab12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2220      	movs	r2, #32
 800ab18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab24:	2300      	movs	r3, #0
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3714      	adds	r7, #20
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab30:	4770      	bx	lr

0800ab32 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab32:	b580      	push	{r7, lr}
 800ab34:	b084      	sub	sp, #16
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	6078      	str	r0, [r7, #4]
 800ab3a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d101      	bne.n	800ab4a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ab46:	2302      	movs	r3, #2
 800ab48:	e02d      	b.n	800aba6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2224      	movs	r2, #36	@ 0x24
 800ab56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	681a      	ldr	r2, [r3, #0]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f022 0201 	bic.w	r2, r2, #1
 800ab70:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	689b      	ldr	r3, [r3, #8]
 800ab78:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	683a      	ldr	r2, [r7, #0]
 800ab82:	430a      	orrs	r2, r1
 800ab84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 f850 	bl	800ac2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	68fa      	ldr	r2, [r7, #12]
 800ab92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2220      	movs	r2, #32
 800ab98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aba4:	2300      	movs	r3, #0
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3710      	adds	r7, #16
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}

0800abae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800abae:	b580      	push	{r7, lr}
 800abb0:	b084      	sub	sp, #16
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6078      	str	r0, [r7, #4]
 800abb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800abbe:	2b01      	cmp	r3, #1
 800abc0:	d101      	bne.n	800abc6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800abc2:	2302      	movs	r3, #2
 800abc4:	e02d      	b.n	800ac22 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2201      	movs	r2, #1
 800abca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2224      	movs	r2, #36	@ 0x24
 800abd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	681a      	ldr	r2, [r3, #0]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f022 0201 	bic.w	r2, r2, #1
 800abec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	689b      	ldr	r3, [r3, #8]
 800abf4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	683a      	ldr	r2, [r7, #0]
 800abfe:	430a      	orrs	r2, r1
 800ac00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f000 f812 	bl	800ac2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2220      	movs	r2, #32
 800ac14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ac20:	2300      	movs	r3, #0
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3710      	adds	r7, #16
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
	...

0800ac2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b085      	sub	sp, #20
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d108      	bne.n	800ac4e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2201      	movs	r2, #1
 800ac40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2201      	movs	r2, #1
 800ac48:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ac4c:	e031      	b.n	800acb2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ac4e:	2308      	movs	r3, #8
 800ac50:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ac52:	2308      	movs	r3, #8
 800ac54:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	689b      	ldr	r3, [r3, #8]
 800ac5c:	0e5b      	lsrs	r3, r3, #25
 800ac5e:	b2db      	uxtb	r3, r3
 800ac60:	f003 0307 	and.w	r3, r3, #7
 800ac64:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	689b      	ldr	r3, [r3, #8]
 800ac6c:	0f5b      	lsrs	r3, r3, #29
 800ac6e:	b2db      	uxtb	r3, r3
 800ac70:	f003 0307 	and.w	r3, r3, #7
 800ac74:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac76:	7bbb      	ldrb	r3, [r7, #14]
 800ac78:	7b3a      	ldrb	r2, [r7, #12]
 800ac7a:	4911      	ldr	r1, [pc, #68]	@ (800acc0 <UARTEx_SetNbDataToProcess+0x94>)
 800ac7c:	5c8a      	ldrb	r2, [r1, r2]
 800ac7e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ac82:	7b3a      	ldrb	r2, [r7, #12]
 800ac84:	490f      	ldr	r1, [pc, #60]	@ (800acc4 <UARTEx_SetNbDataToProcess+0x98>)
 800ac86:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac88:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac8c:	b29a      	uxth	r2, r3
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac94:	7bfb      	ldrb	r3, [r7, #15]
 800ac96:	7b7a      	ldrb	r2, [r7, #13]
 800ac98:	4909      	ldr	r1, [pc, #36]	@ (800acc0 <UARTEx_SetNbDataToProcess+0x94>)
 800ac9a:	5c8a      	ldrb	r2, [r1, r2]
 800ac9c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aca0:	7b7a      	ldrb	r2, [r7, #13]
 800aca2:	4908      	ldr	r1, [pc, #32]	@ (800acc4 <UARTEx_SetNbDataToProcess+0x98>)
 800aca4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aca6:	fb93 f3f2 	sdiv	r3, r3, r2
 800acaa:	b29a      	uxth	r2, r3
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800acb2:	bf00      	nop
 800acb4:	3714      	adds	r7, #20
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr
 800acbe:	bf00      	nop
 800acc0:	0800c020 	.word	0x0800c020
 800acc4:	0800c028 	.word	0x0800c028

0800acc8 <std>:
 800acc8:	2300      	movs	r3, #0
 800acca:	b510      	push	{r4, lr}
 800accc:	4604      	mov	r4, r0
 800acce:	6083      	str	r3, [r0, #8]
 800acd0:	8181      	strh	r1, [r0, #12]
 800acd2:	4619      	mov	r1, r3
 800acd4:	6643      	str	r3, [r0, #100]	@ 0x64
 800acd6:	81c2      	strh	r2, [r0, #14]
 800acd8:	2208      	movs	r2, #8
 800acda:	6183      	str	r3, [r0, #24]
 800acdc:	e9c0 3300 	strd	r3, r3, [r0]
 800ace0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ace4:	305c      	adds	r0, #92	@ 0x5c
 800ace6:	f000 f9f9 	bl	800b0dc <memset>
 800acea:	4b0d      	ldr	r3, [pc, #52]	@ (800ad20 <std+0x58>)
 800acec:	6224      	str	r4, [r4, #32]
 800acee:	6263      	str	r3, [r4, #36]	@ 0x24
 800acf0:	4b0c      	ldr	r3, [pc, #48]	@ (800ad24 <std+0x5c>)
 800acf2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800acf4:	4b0c      	ldr	r3, [pc, #48]	@ (800ad28 <std+0x60>)
 800acf6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800acf8:	4b0c      	ldr	r3, [pc, #48]	@ (800ad2c <std+0x64>)
 800acfa:	6323      	str	r3, [r4, #48]	@ 0x30
 800acfc:	4b0c      	ldr	r3, [pc, #48]	@ (800ad30 <std+0x68>)
 800acfe:	429c      	cmp	r4, r3
 800ad00:	d006      	beq.n	800ad10 <std+0x48>
 800ad02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ad06:	4294      	cmp	r4, r2
 800ad08:	d002      	beq.n	800ad10 <std+0x48>
 800ad0a:	33d0      	adds	r3, #208	@ 0xd0
 800ad0c:	429c      	cmp	r4, r3
 800ad0e:	d105      	bne.n	800ad1c <std+0x54>
 800ad10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ad14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad18:	f000 ba58 	b.w	800b1cc <__retarget_lock_init_recursive>
 800ad1c:	bd10      	pop	{r4, pc}
 800ad1e:	bf00      	nop
 800ad20:	0800af2d 	.word	0x0800af2d
 800ad24:	0800af4f 	.word	0x0800af4f
 800ad28:	0800af87 	.word	0x0800af87
 800ad2c:	0800afab 	.word	0x0800afab
 800ad30:	20000468 	.word	0x20000468

0800ad34 <stdio_exit_handler>:
 800ad34:	4a02      	ldr	r2, [pc, #8]	@ (800ad40 <stdio_exit_handler+0xc>)
 800ad36:	4903      	ldr	r1, [pc, #12]	@ (800ad44 <stdio_exit_handler+0x10>)
 800ad38:	4803      	ldr	r0, [pc, #12]	@ (800ad48 <stdio_exit_handler+0x14>)
 800ad3a:	f000 b869 	b.w	800ae10 <_fwalk_sglue>
 800ad3e:	bf00      	nop
 800ad40:	20000014 	.word	0x20000014
 800ad44:	0800ba8d 	.word	0x0800ba8d
 800ad48:	20000024 	.word	0x20000024

0800ad4c <cleanup_stdio>:
 800ad4c:	6841      	ldr	r1, [r0, #4]
 800ad4e:	4b0c      	ldr	r3, [pc, #48]	@ (800ad80 <cleanup_stdio+0x34>)
 800ad50:	4299      	cmp	r1, r3
 800ad52:	b510      	push	{r4, lr}
 800ad54:	4604      	mov	r4, r0
 800ad56:	d001      	beq.n	800ad5c <cleanup_stdio+0x10>
 800ad58:	f000 fe98 	bl	800ba8c <_fflush_r>
 800ad5c:	68a1      	ldr	r1, [r4, #8]
 800ad5e:	4b09      	ldr	r3, [pc, #36]	@ (800ad84 <cleanup_stdio+0x38>)
 800ad60:	4299      	cmp	r1, r3
 800ad62:	d002      	beq.n	800ad6a <cleanup_stdio+0x1e>
 800ad64:	4620      	mov	r0, r4
 800ad66:	f000 fe91 	bl	800ba8c <_fflush_r>
 800ad6a:	68e1      	ldr	r1, [r4, #12]
 800ad6c:	4b06      	ldr	r3, [pc, #24]	@ (800ad88 <cleanup_stdio+0x3c>)
 800ad6e:	4299      	cmp	r1, r3
 800ad70:	d004      	beq.n	800ad7c <cleanup_stdio+0x30>
 800ad72:	4620      	mov	r0, r4
 800ad74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad78:	f000 be88 	b.w	800ba8c <_fflush_r>
 800ad7c:	bd10      	pop	{r4, pc}
 800ad7e:	bf00      	nop
 800ad80:	20000468 	.word	0x20000468
 800ad84:	200004d0 	.word	0x200004d0
 800ad88:	20000538 	.word	0x20000538

0800ad8c <global_stdio_init.part.0>:
 800ad8c:	b510      	push	{r4, lr}
 800ad8e:	4b0b      	ldr	r3, [pc, #44]	@ (800adbc <global_stdio_init.part.0+0x30>)
 800ad90:	2104      	movs	r1, #4
 800ad92:	4c0b      	ldr	r4, [pc, #44]	@ (800adc0 <global_stdio_init.part.0+0x34>)
 800ad94:	4a0b      	ldr	r2, [pc, #44]	@ (800adc4 <global_stdio_init.part.0+0x38>)
 800ad96:	4620      	mov	r0, r4
 800ad98:	601a      	str	r2, [r3, #0]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f7ff ff94 	bl	800acc8 <std>
 800ada0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ada4:	2201      	movs	r2, #1
 800ada6:	2109      	movs	r1, #9
 800ada8:	f7ff ff8e 	bl	800acc8 <std>
 800adac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800adb0:	2202      	movs	r2, #2
 800adb2:	2112      	movs	r1, #18
 800adb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adb8:	f7ff bf86 	b.w	800acc8 <std>
 800adbc:	200005a0 	.word	0x200005a0
 800adc0:	20000468 	.word	0x20000468
 800adc4:	0800ad35 	.word	0x0800ad35

0800adc8 <__sfp_lock_acquire>:
 800adc8:	4801      	ldr	r0, [pc, #4]	@ (800add0 <__sfp_lock_acquire+0x8>)
 800adca:	f000 ba00 	b.w	800b1ce <__retarget_lock_acquire_recursive>
 800adce:	bf00      	nop
 800add0:	200005a9 	.word	0x200005a9

0800add4 <__sfp_lock_release>:
 800add4:	4801      	ldr	r0, [pc, #4]	@ (800addc <__sfp_lock_release+0x8>)
 800add6:	f000 b9fb 	b.w	800b1d0 <__retarget_lock_release_recursive>
 800adda:	bf00      	nop
 800addc:	200005a9 	.word	0x200005a9

0800ade0 <__sinit>:
 800ade0:	b510      	push	{r4, lr}
 800ade2:	4604      	mov	r4, r0
 800ade4:	f7ff fff0 	bl	800adc8 <__sfp_lock_acquire>
 800ade8:	6a23      	ldr	r3, [r4, #32]
 800adea:	b11b      	cbz	r3, 800adf4 <__sinit+0x14>
 800adec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adf0:	f7ff bff0 	b.w	800add4 <__sfp_lock_release>
 800adf4:	4b04      	ldr	r3, [pc, #16]	@ (800ae08 <__sinit+0x28>)
 800adf6:	6223      	str	r3, [r4, #32]
 800adf8:	4b04      	ldr	r3, [pc, #16]	@ (800ae0c <__sinit+0x2c>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d1f5      	bne.n	800adec <__sinit+0xc>
 800ae00:	f7ff ffc4 	bl	800ad8c <global_stdio_init.part.0>
 800ae04:	e7f2      	b.n	800adec <__sinit+0xc>
 800ae06:	bf00      	nop
 800ae08:	0800ad4d 	.word	0x0800ad4d
 800ae0c:	200005a0 	.word	0x200005a0

0800ae10 <_fwalk_sglue>:
 800ae10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae14:	4607      	mov	r7, r0
 800ae16:	4688      	mov	r8, r1
 800ae18:	4614      	mov	r4, r2
 800ae1a:	2600      	movs	r6, #0
 800ae1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae20:	f1b9 0901 	subs.w	r9, r9, #1
 800ae24:	d505      	bpl.n	800ae32 <_fwalk_sglue+0x22>
 800ae26:	6824      	ldr	r4, [r4, #0]
 800ae28:	2c00      	cmp	r4, #0
 800ae2a:	d1f7      	bne.n	800ae1c <_fwalk_sglue+0xc>
 800ae2c:	4630      	mov	r0, r6
 800ae2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae32:	89ab      	ldrh	r3, [r5, #12]
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d907      	bls.n	800ae48 <_fwalk_sglue+0x38>
 800ae38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	d003      	beq.n	800ae48 <_fwalk_sglue+0x38>
 800ae40:	4629      	mov	r1, r5
 800ae42:	4638      	mov	r0, r7
 800ae44:	47c0      	blx	r8
 800ae46:	4306      	orrs	r6, r0
 800ae48:	3568      	adds	r5, #104	@ 0x68
 800ae4a:	e7e9      	b.n	800ae20 <_fwalk_sglue+0x10>

0800ae4c <iprintf>:
 800ae4c:	b40f      	push	{r0, r1, r2, r3}
 800ae4e:	b507      	push	{r0, r1, r2, lr}
 800ae50:	4906      	ldr	r1, [pc, #24]	@ (800ae6c <iprintf+0x20>)
 800ae52:	ab04      	add	r3, sp, #16
 800ae54:	6808      	ldr	r0, [r1, #0]
 800ae56:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae5a:	6881      	ldr	r1, [r0, #8]
 800ae5c:	9301      	str	r3, [sp, #4]
 800ae5e:	f000 fae7 	bl	800b430 <_vfiprintf_r>
 800ae62:	b003      	add	sp, #12
 800ae64:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae68:	b004      	add	sp, #16
 800ae6a:	4770      	bx	lr
 800ae6c:	20000020 	.word	0x20000020

0800ae70 <_puts_r>:
 800ae70:	6a03      	ldr	r3, [r0, #32]
 800ae72:	b570      	push	{r4, r5, r6, lr}
 800ae74:	4605      	mov	r5, r0
 800ae76:	460e      	mov	r6, r1
 800ae78:	6884      	ldr	r4, [r0, #8]
 800ae7a:	b90b      	cbnz	r3, 800ae80 <_puts_r+0x10>
 800ae7c:	f7ff ffb0 	bl	800ade0 <__sinit>
 800ae80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae82:	07db      	lsls	r3, r3, #31
 800ae84:	d405      	bmi.n	800ae92 <_puts_r+0x22>
 800ae86:	89a3      	ldrh	r3, [r4, #12]
 800ae88:	0598      	lsls	r0, r3, #22
 800ae8a:	d402      	bmi.n	800ae92 <_puts_r+0x22>
 800ae8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae8e:	f000 f99e 	bl	800b1ce <__retarget_lock_acquire_recursive>
 800ae92:	89a3      	ldrh	r3, [r4, #12]
 800ae94:	0719      	lsls	r1, r3, #28
 800ae96:	d502      	bpl.n	800ae9e <_puts_r+0x2e>
 800ae98:	6923      	ldr	r3, [r4, #16]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d135      	bne.n	800af0a <_puts_r+0x9a>
 800ae9e:	4621      	mov	r1, r4
 800aea0:	4628      	mov	r0, r5
 800aea2:	f000 f8c5 	bl	800b030 <__swsetup_r>
 800aea6:	b380      	cbz	r0, 800af0a <_puts_r+0x9a>
 800aea8:	f04f 35ff 	mov.w	r5, #4294967295
 800aeac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aeae:	07da      	lsls	r2, r3, #31
 800aeb0:	d405      	bmi.n	800aebe <_puts_r+0x4e>
 800aeb2:	89a3      	ldrh	r3, [r4, #12]
 800aeb4:	059b      	lsls	r3, r3, #22
 800aeb6:	d402      	bmi.n	800aebe <_puts_r+0x4e>
 800aeb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aeba:	f000 f989 	bl	800b1d0 <__retarget_lock_release_recursive>
 800aebe:	4628      	mov	r0, r5
 800aec0:	bd70      	pop	{r4, r5, r6, pc}
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	da04      	bge.n	800aed0 <_puts_r+0x60>
 800aec6:	69a2      	ldr	r2, [r4, #24]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	dc17      	bgt.n	800aefc <_puts_r+0x8c>
 800aecc:	290a      	cmp	r1, #10
 800aece:	d015      	beq.n	800aefc <_puts_r+0x8c>
 800aed0:	6823      	ldr	r3, [r4, #0]
 800aed2:	1c5a      	adds	r2, r3, #1
 800aed4:	6022      	str	r2, [r4, #0]
 800aed6:	7019      	strb	r1, [r3, #0]
 800aed8:	68a3      	ldr	r3, [r4, #8]
 800aeda:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aede:	3b01      	subs	r3, #1
 800aee0:	60a3      	str	r3, [r4, #8]
 800aee2:	2900      	cmp	r1, #0
 800aee4:	d1ed      	bne.n	800aec2 <_puts_r+0x52>
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	da11      	bge.n	800af0e <_puts_r+0x9e>
 800aeea:	4622      	mov	r2, r4
 800aeec:	210a      	movs	r1, #10
 800aeee:	4628      	mov	r0, r5
 800aef0:	f000 f85f 	bl	800afb2 <__swbuf_r>
 800aef4:	3001      	adds	r0, #1
 800aef6:	d0d7      	beq.n	800aea8 <_puts_r+0x38>
 800aef8:	250a      	movs	r5, #10
 800aefa:	e7d7      	b.n	800aeac <_puts_r+0x3c>
 800aefc:	4622      	mov	r2, r4
 800aefe:	4628      	mov	r0, r5
 800af00:	f000 f857 	bl	800afb2 <__swbuf_r>
 800af04:	3001      	adds	r0, #1
 800af06:	d1e7      	bne.n	800aed8 <_puts_r+0x68>
 800af08:	e7ce      	b.n	800aea8 <_puts_r+0x38>
 800af0a:	3e01      	subs	r6, #1
 800af0c:	e7e4      	b.n	800aed8 <_puts_r+0x68>
 800af0e:	6823      	ldr	r3, [r4, #0]
 800af10:	1c5a      	adds	r2, r3, #1
 800af12:	6022      	str	r2, [r4, #0]
 800af14:	220a      	movs	r2, #10
 800af16:	701a      	strb	r2, [r3, #0]
 800af18:	e7ee      	b.n	800aef8 <_puts_r+0x88>
	...

0800af1c <puts>:
 800af1c:	4b02      	ldr	r3, [pc, #8]	@ (800af28 <puts+0xc>)
 800af1e:	4601      	mov	r1, r0
 800af20:	6818      	ldr	r0, [r3, #0]
 800af22:	f7ff bfa5 	b.w	800ae70 <_puts_r>
 800af26:	bf00      	nop
 800af28:	20000020 	.word	0x20000020

0800af2c <__sread>:
 800af2c:	b510      	push	{r4, lr}
 800af2e:	460c      	mov	r4, r1
 800af30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af34:	f000 f8fc 	bl	800b130 <_read_r>
 800af38:	2800      	cmp	r0, #0
 800af3a:	bfab      	itete	ge
 800af3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800af3e:	89a3      	ldrhlt	r3, [r4, #12]
 800af40:	181b      	addge	r3, r3, r0
 800af42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800af46:	bfac      	ite	ge
 800af48:	6563      	strge	r3, [r4, #84]	@ 0x54
 800af4a:	81a3      	strhlt	r3, [r4, #12]
 800af4c:	bd10      	pop	{r4, pc}

0800af4e <__swrite>:
 800af4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af52:	461f      	mov	r7, r3
 800af54:	898b      	ldrh	r3, [r1, #12]
 800af56:	4605      	mov	r5, r0
 800af58:	460c      	mov	r4, r1
 800af5a:	05db      	lsls	r3, r3, #23
 800af5c:	4616      	mov	r6, r2
 800af5e:	d505      	bpl.n	800af6c <__swrite+0x1e>
 800af60:	2302      	movs	r3, #2
 800af62:	2200      	movs	r2, #0
 800af64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af68:	f000 f8d0 	bl	800b10c <_lseek_r>
 800af6c:	89a3      	ldrh	r3, [r4, #12]
 800af6e:	4632      	mov	r2, r6
 800af70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af74:	4628      	mov	r0, r5
 800af76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800af7a:	81a3      	strh	r3, [r4, #12]
 800af7c:	463b      	mov	r3, r7
 800af7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af82:	f000 b8e7 	b.w	800b154 <_write_r>

0800af86 <__sseek>:
 800af86:	b510      	push	{r4, lr}
 800af88:	460c      	mov	r4, r1
 800af8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af8e:	f000 f8bd 	bl	800b10c <_lseek_r>
 800af92:	1c43      	adds	r3, r0, #1
 800af94:	89a3      	ldrh	r3, [r4, #12]
 800af96:	bf15      	itete	ne
 800af98:	6560      	strne	r0, [r4, #84]	@ 0x54
 800af9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800af9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800afa2:	81a3      	strheq	r3, [r4, #12]
 800afa4:	bf18      	it	ne
 800afa6:	81a3      	strhne	r3, [r4, #12]
 800afa8:	bd10      	pop	{r4, pc}

0800afaa <__sclose>:
 800afaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afae:	f000 b89d 	b.w	800b0ec <_close_r>

0800afb2 <__swbuf_r>:
 800afb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afb4:	460e      	mov	r6, r1
 800afb6:	4614      	mov	r4, r2
 800afb8:	4605      	mov	r5, r0
 800afba:	b118      	cbz	r0, 800afc4 <__swbuf_r+0x12>
 800afbc:	6a03      	ldr	r3, [r0, #32]
 800afbe:	b90b      	cbnz	r3, 800afc4 <__swbuf_r+0x12>
 800afc0:	f7ff ff0e 	bl	800ade0 <__sinit>
 800afc4:	69a3      	ldr	r3, [r4, #24]
 800afc6:	60a3      	str	r3, [r4, #8]
 800afc8:	89a3      	ldrh	r3, [r4, #12]
 800afca:	071a      	lsls	r2, r3, #28
 800afcc:	d501      	bpl.n	800afd2 <__swbuf_r+0x20>
 800afce:	6923      	ldr	r3, [r4, #16]
 800afd0:	b943      	cbnz	r3, 800afe4 <__swbuf_r+0x32>
 800afd2:	4621      	mov	r1, r4
 800afd4:	4628      	mov	r0, r5
 800afd6:	f000 f82b 	bl	800b030 <__swsetup_r>
 800afda:	b118      	cbz	r0, 800afe4 <__swbuf_r+0x32>
 800afdc:	f04f 37ff 	mov.w	r7, #4294967295
 800afe0:	4638      	mov	r0, r7
 800afe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afe4:	6823      	ldr	r3, [r4, #0]
 800afe6:	b2f6      	uxtb	r6, r6
 800afe8:	6922      	ldr	r2, [r4, #16]
 800afea:	4637      	mov	r7, r6
 800afec:	1a98      	subs	r0, r3, r2
 800afee:	6963      	ldr	r3, [r4, #20]
 800aff0:	4283      	cmp	r3, r0
 800aff2:	dc05      	bgt.n	800b000 <__swbuf_r+0x4e>
 800aff4:	4621      	mov	r1, r4
 800aff6:	4628      	mov	r0, r5
 800aff8:	f000 fd48 	bl	800ba8c <_fflush_r>
 800affc:	2800      	cmp	r0, #0
 800affe:	d1ed      	bne.n	800afdc <__swbuf_r+0x2a>
 800b000:	68a3      	ldr	r3, [r4, #8]
 800b002:	3b01      	subs	r3, #1
 800b004:	60a3      	str	r3, [r4, #8]
 800b006:	6823      	ldr	r3, [r4, #0]
 800b008:	1c5a      	adds	r2, r3, #1
 800b00a:	6022      	str	r2, [r4, #0]
 800b00c:	701e      	strb	r6, [r3, #0]
 800b00e:	1c43      	adds	r3, r0, #1
 800b010:	6962      	ldr	r2, [r4, #20]
 800b012:	429a      	cmp	r2, r3
 800b014:	d004      	beq.n	800b020 <__swbuf_r+0x6e>
 800b016:	89a3      	ldrh	r3, [r4, #12]
 800b018:	07db      	lsls	r3, r3, #31
 800b01a:	d5e1      	bpl.n	800afe0 <__swbuf_r+0x2e>
 800b01c:	2e0a      	cmp	r6, #10
 800b01e:	d1df      	bne.n	800afe0 <__swbuf_r+0x2e>
 800b020:	4621      	mov	r1, r4
 800b022:	4628      	mov	r0, r5
 800b024:	f000 fd32 	bl	800ba8c <_fflush_r>
 800b028:	2800      	cmp	r0, #0
 800b02a:	d0d9      	beq.n	800afe0 <__swbuf_r+0x2e>
 800b02c:	e7d6      	b.n	800afdc <__swbuf_r+0x2a>
	...

0800b030 <__swsetup_r>:
 800b030:	b538      	push	{r3, r4, r5, lr}
 800b032:	4b29      	ldr	r3, [pc, #164]	@ (800b0d8 <__swsetup_r+0xa8>)
 800b034:	4605      	mov	r5, r0
 800b036:	460c      	mov	r4, r1
 800b038:	6818      	ldr	r0, [r3, #0]
 800b03a:	b118      	cbz	r0, 800b044 <__swsetup_r+0x14>
 800b03c:	6a03      	ldr	r3, [r0, #32]
 800b03e:	b90b      	cbnz	r3, 800b044 <__swsetup_r+0x14>
 800b040:	f7ff fece 	bl	800ade0 <__sinit>
 800b044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b048:	0719      	lsls	r1, r3, #28
 800b04a:	d422      	bmi.n	800b092 <__swsetup_r+0x62>
 800b04c:	06da      	lsls	r2, r3, #27
 800b04e:	d407      	bmi.n	800b060 <__swsetup_r+0x30>
 800b050:	2209      	movs	r2, #9
 800b052:	602a      	str	r2, [r5, #0]
 800b054:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b058:	f04f 30ff 	mov.w	r0, #4294967295
 800b05c:	81a3      	strh	r3, [r4, #12]
 800b05e:	e033      	b.n	800b0c8 <__swsetup_r+0x98>
 800b060:	0758      	lsls	r0, r3, #29
 800b062:	d512      	bpl.n	800b08a <__swsetup_r+0x5a>
 800b064:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b066:	b141      	cbz	r1, 800b07a <__swsetup_r+0x4a>
 800b068:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b06c:	4299      	cmp	r1, r3
 800b06e:	d002      	beq.n	800b076 <__swsetup_r+0x46>
 800b070:	4628      	mov	r0, r5
 800b072:	f000 f8bb 	bl	800b1ec <_free_r>
 800b076:	2300      	movs	r3, #0
 800b078:	6363      	str	r3, [r4, #52]	@ 0x34
 800b07a:	89a3      	ldrh	r3, [r4, #12]
 800b07c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b080:	81a3      	strh	r3, [r4, #12]
 800b082:	2300      	movs	r3, #0
 800b084:	6063      	str	r3, [r4, #4]
 800b086:	6923      	ldr	r3, [r4, #16]
 800b088:	6023      	str	r3, [r4, #0]
 800b08a:	89a3      	ldrh	r3, [r4, #12]
 800b08c:	f043 0308 	orr.w	r3, r3, #8
 800b090:	81a3      	strh	r3, [r4, #12]
 800b092:	6923      	ldr	r3, [r4, #16]
 800b094:	b94b      	cbnz	r3, 800b0aa <__swsetup_r+0x7a>
 800b096:	89a3      	ldrh	r3, [r4, #12]
 800b098:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b09c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0a0:	d003      	beq.n	800b0aa <__swsetup_r+0x7a>
 800b0a2:	4621      	mov	r1, r4
 800b0a4:	4628      	mov	r0, r5
 800b0a6:	f000 fd3e 	bl	800bb26 <__smakebuf_r>
 800b0aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0ae:	f013 0201 	ands.w	r2, r3, #1
 800b0b2:	d00a      	beq.n	800b0ca <__swsetup_r+0x9a>
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	60a2      	str	r2, [r4, #8]
 800b0b8:	6962      	ldr	r2, [r4, #20]
 800b0ba:	4252      	negs	r2, r2
 800b0bc:	61a2      	str	r2, [r4, #24]
 800b0be:	6922      	ldr	r2, [r4, #16]
 800b0c0:	b942      	cbnz	r2, 800b0d4 <__swsetup_r+0xa4>
 800b0c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b0c6:	d1c5      	bne.n	800b054 <__swsetup_r+0x24>
 800b0c8:	bd38      	pop	{r3, r4, r5, pc}
 800b0ca:	0799      	lsls	r1, r3, #30
 800b0cc:	bf58      	it	pl
 800b0ce:	6962      	ldrpl	r2, [r4, #20]
 800b0d0:	60a2      	str	r2, [r4, #8]
 800b0d2:	e7f4      	b.n	800b0be <__swsetup_r+0x8e>
 800b0d4:	2000      	movs	r0, #0
 800b0d6:	e7f7      	b.n	800b0c8 <__swsetup_r+0x98>
 800b0d8:	20000020 	.word	0x20000020

0800b0dc <memset>:
 800b0dc:	4402      	add	r2, r0
 800b0de:	4603      	mov	r3, r0
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d100      	bne.n	800b0e6 <memset+0xa>
 800b0e4:	4770      	bx	lr
 800b0e6:	f803 1b01 	strb.w	r1, [r3], #1
 800b0ea:	e7f9      	b.n	800b0e0 <memset+0x4>

0800b0ec <_close_r>:
 800b0ec:	b538      	push	{r3, r4, r5, lr}
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	4d05      	ldr	r5, [pc, #20]	@ (800b108 <_close_r+0x1c>)
 800b0f2:	4604      	mov	r4, r0
 800b0f4:	4608      	mov	r0, r1
 800b0f6:	602b      	str	r3, [r5, #0]
 800b0f8:	f7f6 fef1 	bl	8001ede <_close>
 800b0fc:	1c43      	adds	r3, r0, #1
 800b0fe:	d102      	bne.n	800b106 <_close_r+0x1a>
 800b100:	682b      	ldr	r3, [r5, #0]
 800b102:	b103      	cbz	r3, 800b106 <_close_r+0x1a>
 800b104:	6023      	str	r3, [r4, #0]
 800b106:	bd38      	pop	{r3, r4, r5, pc}
 800b108:	200005a4 	.word	0x200005a4

0800b10c <_lseek_r>:
 800b10c:	b538      	push	{r3, r4, r5, lr}
 800b10e:	4604      	mov	r4, r0
 800b110:	4d06      	ldr	r5, [pc, #24]	@ (800b12c <_lseek_r+0x20>)
 800b112:	4608      	mov	r0, r1
 800b114:	4611      	mov	r1, r2
 800b116:	2200      	movs	r2, #0
 800b118:	602a      	str	r2, [r5, #0]
 800b11a:	461a      	mov	r2, r3
 800b11c:	f7f6 ff06 	bl	8001f2c <_lseek>
 800b120:	1c43      	adds	r3, r0, #1
 800b122:	d102      	bne.n	800b12a <_lseek_r+0x1e>
 800b124:	682b      	ldr	r3, [r5, #0]
 800b126:	b103      	cbz	r3, 800b12a <_lseek_r+0x1e>
 800b128:	6023      	str	r3, [r4, #0]
 800b12a:	bd38      	pop	{r3, r4, r5, pc}
 800b12c:	200005a4 	.word	0x200005a4

0800b130 <_read_r>:
 800b130:	b538      	push	{r3, r4, r5, lr}
 800b132:	4604      	mov	r4, r0
 800b134:	4d06      	ldr	r5, [pc, #24]	@ (800b150 <_read_r+0x20>)
 800b136:	4608      	mov	r0, r1
 800b138:	4611      	mov	r1, r2
 800b13a:	2200      	movs	r2, #0
 800b13c:	602a      	str	r2, [r5, #0]
 800b13e:	461a      	mov	r2, r3
 800b140:	f7f6 fe94 	bl	8001e6c <_read>
 800b144:	1c43      	adds	r3, r0, #1
 800b146:	d102      	bne.n	800b14e <_read_r+0x1e>
 800b148:	682b      	ldr	r3, [r5, #0]
 800b14a:	b103      	cbz	r3, 800b14e <_read_r+0x1e>
 800b14c:	6023      	str	r3, [r4, #0]
 800b14e:	bd38      	pop	{r3, r4, r5, pc}
 800b150:	200005a4 	.word	0x200005a4

0800b154 <_write_r>:
 800b154:	b538      	push	{r3, r4, r5, lr}
 800b156:	4604      	mov	r4, r0
 800b158:	4d06      	ldr	r5, [pc, #24]	@ (800b174 <_write_r+0x20>)
 800b15a:	4608      	mov	r0, r1
 800b15c:	4611      	mov	r1, r2
 800b15e:	2200      	movs	r2, #0
 800b160:	602a      	str	r2, [r5, #0]
 800b162:	461a      	mov	r2, r3
 800b164:	f7f6 fe9f 	bl	8001ea6 <_write>
 800b168:	1c43      	adds	r3, r0, #1
 800b16a:	d102      	bne.n	800b172 <_write_r+0x1e>
 800b16c:	682b      	ldr	r3, [r5, #0]
 800b16e:	b103      	cbz	r3, 800b172 <_write_r+0x1e>
 800b170:	6023      	str	r3, [r4, #0]
 800b172:	bd38      	pop	{r3, r4, r5, pc}
 800b174:	200005a4 	.word	0x200005a4

0800b178 <__errno>:
 800b178:	4b01      	ldr	r3, [pc, #4]	@ (800b180 <__errno+0x8>)
 800b17a:	6818      	ldr	r0, [r3, #0]
 800b17c:	4770      	bx	lr
 800b17e:	bf00      	nop
 800b180:	20000020 	.word	0x20000020

0800b184 <__libc_init_array>:
 800b184:	b570      	push	{r4, r5, r6, lr}
 800b186:	4d0d      	ldr	r5, [pc, #52]	@ (800b1bc <__libc_init_array+0x38>)
 800b188:	2600      	movs	r6, #0
 800b18a:	4c0d      	ldr	r4, [pc, #52]	@ (800b1c0 <__libc_init_array+0x3c>)
 800b18c:	1b64      	subs	r4, r4, r5
 800b18e:	10a4      	asrs	r4, r4, #2
 800b190:	42a6      	cmp	r6, r4
 800b192:	d109      	bne.n	800b1a8 <__libc_init_array+0x24>
 800b194:	4d0b      	ldr	r5, [pc, #44]	@ (800b1c4 <__libc_init_array+0x40>)
 800b196:	2600      	movs	r6, #0
 800b198:	4c0b      	ldr	r4, [pc, #44]	@ (800b1c8 <__libc_init_array+0x44>)
 800b19a:	f000 fd41 	bl	800bc20 <_init>
 800b19e:	1b64      	subs	r4, r4, r5
 800b1a0:	10a4      	asrs	r4, r4, #2
 800b1a2:	42a6      	cmp	r6, r4
 800b1a4:	d105      	bne.n	800b1b2 <__libc_init_array+0x2e>
 800b1a6:	bd70      	pop	{r4, r5, r6, pc}
 800b1a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1ac:	3601      	adds	r6, #1
 800b1ae:	4798      	blx	r3
 800b1b0:	e7ee      	b.n	800b190 <__libc_init_array+0xc>
 800b1b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1b6:	3601      	adds	r6, #1
 800b1b8:	4798      	blx	r3
 800b1ba:	e7f2      	b.n	800b1a2 <__libc_init_array+0x1e>
 800b1bc:	0800c06c 	.word	0x0800c06c
 800b1c0:	0800c06c 	.word	0x0800c06c
 800b1c4:	0800c06c 	.word	0x0800c06c
 800b1c8:	0800c070 	.word	0x0800c070

0800b1cc <__retarget_lock_init_recursive>:
 800b1cc:	4770      	bx	lr

0800b1ce <__retarget_lock_acquire_recursive>:
 800b1ce:	4770      	bx	lr

0800b1d0 <__retarget_lock_release_recursive>:
 800b1d0:	4770      	bx	lr

0800b1d2 <memcpy>:
 800b1d2:	440a      	add	r2, r1
 800b1d4:	1e43      	subs	r3, r0, #1
 800b1d6:	4291      	cmp	r1, r2
 800b1d8:	d100      	bne.n	800b1dc <memcpy+0xa>
 800b1da:	4770      	bx	lr
 800b1dc:	b510      	push	{r4, lr}
 800b1de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1e2:	4291      	cmp	r1, r2
 800b1e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1e8:	d1f9      	bne.n	800b1de <memcpy+0xc>
 800b1ea:	bd10      	pop	{r4, pc}

0800b1ec <_free_r>:
 800b1ec:	b538      	push	{r3, r4, r5, lr}
 800b1ee:	4605      	mov	r5, r0
 800b1f0:	2900      	cmp	r1, #0
 800b1f2:	d041      	beq.n	800b278 <_free_r+0x8c>
 800b1f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1f8:	1f0c      	subs	r4, r1, #4
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	bfb8      	it	lt
 800b1fe:	18e4      	addlt	r4, r4, r3
 800b200:	f000 f8e0 	bl	800b3c4 <__malloc_lock>
 800b204:	4a1d      	ldr	r2, [pc, #116]	@ (800b27c <_free_r+0x90>)
 800b206:	6813      	ldr	r3, [r2, #0]
 800b208:	b933      	cbnz	r3, 800b218 <_free_r+0x2c>
 800b20a:	6063      	str	r3, [r4, #4]
 800b20c:	6014      	str	r4, [r2, #0]
 800b20e:	4628      	mov	r0, r5
 800b210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b214:	f000 b8dc 	b.w	800b3d0 <__malloc_unlock>
 800b218:	42a3      	cmp	r3, r4
 800b21a:	d908      	bls.n	800b22e <_free_r+0x42>
 800b21c:	6820      	ldr	r0, [r4, #0]
 800b21e:	1821      	adds	r1, r4, r0
 800b220:	428b      	cmp	r3, r1
 800b222:	bf01      	itttt	eq
 800b224:	6819      	ldreq	r1, [r3, #0]
 800b226:	685b      	ldreq	r3, [r3, #4]
 800b228:	1809      	addeq	r1, r1, r0
 800b22a:	6021      	streq	r1, [r4, #0]
 800b22c:	e7ed      	b.n	800b20a <_free_r+0x1e>
 800b22e:	461a      	mov	r2, r3
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	b10b      	cbz	r3, 800b238 <_free_r+0x4c>
 800b234:	42a3      	cmp	r3, r4
 800b236:	d9fa      	bls.n	800b22e <_free_r+0x42>
 800b238:	6811      	ldr	r1, [r2, #0]
 800b23a:	1850      	adds	r0, r2, r1
 800b23c:	42a0      	cmp	r0, r4
 800b23e:	d10b      	bne.n	800b258 <_free_r+0x6c>
 800b240:	6820      	ldr	r0, [r4, #0]
 800b242:	4401      	add	r1, r0
 800b244:	1850      	adds	r0, r2, r1
 800b246:	6011      	str	r1, [r2, #0]
 800b248:	4283      	cmp	r3, r0
 800b24a:	d1e0      	bne.n	800b20e <_free_r+0x22>
 800b24c:	6818      	ldr	r0, [r3, #0]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	4408      	add	r0, r1
 800b252:	6053      	str	r3, [r2, #4]
 800b254:	6010      	str	r0, [r2, #0]
 800b256:	e7da      	b.n	800b20e <_free_r+0x22>
 800b258:	d902      	bls.n	800b260 <_free_r+0x74>
 800b25a:	230c      	movs	r3, #12
 800b25c:	602b      	str	r3, [r5, #0]
 800b25e:	e7d6      	b.n	800b20e <_free_r+0x22>
 800b260:	6820      	ldr	r0, [r4, #0]
 800b262:	1821      	adds	r1, r4, r0
 800b264:	428b      	cmp	r3, r1
 800b266:	bf02      	ittt	eq
 800b268:	6819      	ldreq	r1, [r3, #0]
 800b26a:	685b      	ldreq	r3, [r3, #4]
 800b26c:	1809      	addeq	r1, r1, r0
 800b26e:	6063      	str	r3, [r4, #4]
 800b270:	bf08      	it	eq
 800b272:	6021      	streq	r1, [r4, #0]
 800b274:	6054      	str	r4, [r2, #4]
 800b276:	e7ca      	b.n	800b20e <_free_r+0x22>
 800b278:	bd38      	pop	{r3, r4, r5, pc}
 800b27a:	bf00      	nop
 800b27c:	200005b0 	.word	0x200005b0

0800b280 <sbrk_aligned>:
 800b280:	b570      	push	{r4, r5, r6, lr}
 800b282:	4e0f      	ldr	r6, [pc, #60]	@ (800b2c0 <sbrk_aligned+0x40>)
 800b284:	460c      	mov	r4, r1
 800b286:	4605      	mov	r5, r0
 800b288:	6831      	ldr	r1, [r6, #0]
 800b28a:	b911      	cbnz	r1, 800b292 <sbrk_aligned+0x12>
 800b28c:	f000 fcaa 	bl	800bbe4 <_sbrk_r>
 800b290:	6030      	str	r0, [r6, #0]
 800b292:	4621      	mov	r1, r4
 800b294:	4628      	mov	r0, r5
 800b296:	f000 fca5 	bl	800bbe4 <_sbrk_r>
 800b29a:	1c43      	adds	r3, r0, #1
 800b29c:	d103      	bne.n	800b2a6 <sbrk_aligned+0x26>
 800b29e:	f04f 34ff 	mov.w	r4, #4294967295
 800b2a2:	4620      	mov	r0, r4
 800b2a4:	bd70      	pop	{r4, r5, r6, pc}
 800b2a6:	1cc4      	adds	r4, r0, #3
 800b2a8:	f024 0403 	bic.w	r4, r4, #3
 800b2ac:	42a0      	cmp	r0, r4
 800b2ae:	d0f8      	beq.n	800b2a2 <sbrk_aligned+0x22>
 800b2b0:	1a21      	subs	r1, r4, r0
 800b2b2:	4628      	mov	r0, r5
 800b2b4:	f000 fc96 	bl	800bbe4 <_sbrk_r>
 800b2b8:	3001      	adds	r0, #1
 800b2ba:	d1f2      	bne.n	800b2a2 <sbrk_aligned+0x22>
 800b2bc:	e7ef      	b.n	800b29e <sbrk_aligned+0x1e>
 800b2be:	bf00      	nop
 800b2c0:	200005ac 	.word	0x200005ac

0800b2c4 <_malloc_r>:
 800b2c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2c8:	1ccd      	adds	r5, r1, #3
 800b2ca:	4606      	mov	r6, r0
 800b2cc:	f025 0503 	bic.w	r5, r5, #3
 800b2d0:	3508      	adds	r5, #8
 800b2d2:	2d0c      	cmp	r5, #12
 800b2d4:	bf38      	it	cc
 800b2d6:	250c      	movcc	r5, #12
 800b2d8:	2d00      	cmp	r5, #0
 800b2da:	db01      	blt.n	800b2e0 <_malloc_r+0x1c>
 800b2dc:	42a9      	cmp	r1, r5
 800b2de:	d904      	bls.n	800b2ea <_malloc_r+0x26>
 800b2e0:	230c      	movs	r3, #12
 800b2e2:	6033      	str	r3, [r6, #0]
 800b2e4:	2000      	movs	r0, #0
 800b2e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b3c0 <_malloc_r+0xfc>
 800b2ee:	f000 f869 	bl	800b3c4 <__malloc_lock>
 800b2f2:	f8d8 3000 	ldr.w	r3, [r8]
 800b2f6:	461c      	mov	r4, r3
 800b2f8:	bb44      	cbnz	r4, 800b34c <_malloc_r+0x88>
 800b2fa:	4629      	mov	r1, r5
 800b2fc:	4630      	mov	r0, r6
 800b2fe:	f7ff ffbf 	bl	800b280 <sbrk_aligned>
 800b302:	1c43      	adds	r3, r0, #1
 800b304:	4604      	mov	r4, r0
 800b306:	d158      	bne.n	800b3ba <_malloc_r+0xf6>
 800b308:	f8d8 4000 	ldr.w	r4, [r8]
 800b30c:	4627      	mov	r7, r4
 800b30e:	2f00      	cmp	r7, #0
 800b310:	d143      	bne.n	800b39a <_malloc_r+0xd6>
 800b312:	2c00      	cmp	r4, #0
 800b314:	d04b      	beq.n	800b3ae <_malloc_r+0xea>
 800b316:	6823      	ldr	r3, [r4, #0]
 800b318:	4639      	mov	r1, r7
 800b31a:	4630      	mov	r0, r6
 800b31c:	eb04 0903 	add.w	r9, r4, r3
 800b320:	f000 fc60 	bl	800bbe4 <_sbrk_r>
 800b324:	4581      	cmp	r9, r0
 800b326:	d142      	bne.n	800b3ae <_malloc_r+0xea>
 800b328:	6821      	ldr	r1, [r4, #0]
 800b32a:	4630      	mov	r0, r6
 800b32c:	1a6d      	subs	r5, r5, r1
 800b32e:	4629      	mov	r1, r5
 800b330:	f7ff ffa6 	bl	800b280 <sbrk_aligned>
 800b334:	3001      	adds	r0, #1
 800b336:	d03a      	beq.n	800b3ae <_malloc_r+0xea>
 800b338:	6823      	ldr	r3, [r4, #0]
 800b33a:	442b      	add	r3, r5
 800b33c:	6023      	str	r3, [r4, #0]
 800b33e:	f8d8 3000 	ldr.w	r3, [r8]
 800b342:	685a      	ldr	r2, [r3, #4]
 800b344:	bb62      	cbnz	r2, 800b3a0 <_malloc_r+0xdc>
 800b346:	f8c8 7000 	str.w	r7, [r8]
 800b34a:	e00f      	b.n	800b36c <_malloc_r+0xa8>
 800b34c:	6822      	ldr	r2, [r4, #0]
 800b34e:	1b52      	subs	r2, r2, r5
 800b350:	d420      	bmi.n	800b394 <_malloc_r+0xd0>
 800b352:	2a0b      	cmp	r2, #11
 800b354:	d917      	bls.n	800b386 <_malloc_r+0xc2>
 800b356:	1961      	adds	r1, r4, r5
 800b358:	42a3      	cmp	r3, r4
 800b35a:	6025      	str	r5, [r4, #0]
 800b35c:	bf18      	it	ne
 800b35e:	6059      	strne	r1, [r3, #4]
 800b360:	6863      	ldr	r3, [r4, #4]
 800b362:	bf08      	it	eq
 800b364:	f8c8 1000 	streq.w	r1, [r8]
 800b368:	5162      	str	r2, [r4, r5]
 800b36a:	604b      	str	r3, [r1, #4]
 800b36c:	4630      	mov	r0, r6
 800b36e:	f000 f82f 	bl	800b3d0 <__malloc_unlock>
 800b372:	f104 000b 	add.w	r0, r4, #11
 800b376:	1d23      	adds	r3, r4, #4
 800b378:	f020 0007 	bic.w	r0, r0, #7
 800b37c:	1ac2      	subs	r2, r0, r3
 800b37e:	bf1c      	itt	ne
 800b380:	1a1b      	subne	r3, r3, r0
 800b382:	50a3      	strne	r3, [r4, r2]
 800b384:	e7af      	b.n	800b2e6 <_malloc_r+0x22>
 800b386:	6862      	ldr	r2, [r4, #4]
 800b388:	42a3      	cmp	r3, r4
 800b38a:	bf0c      	ite	eq
 800b38c:	f8c8 2000 	streq.w	r2, [r8]
 800b390:	605a      	strne	r2, [r3, #4]
 800b392:	e7eb      	b.n	800b36c <_malloc_r+0xa8>
 800b394:	4623      	mov	r3, r4
 800b396:	6864      	ldr	r4, [r4, #4]
 800b398:	e7ae      	b.n	800b2f8 <_malloc_r+0x34>
 800b39a:	463c      	mov	r4, r7
 800b39c:	687f      	ldr	r7, [r7, #4]
 800b39e:	e7b6      	b.n	800b30e <_malloc_r+0x4a>
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	685b      	ldr	r3, [r3, #4]
 800b3a4:	42a3      	cmp	r3, r4
 800b3a6:	d1fb      	bne.n	800b3a0 <_malloc_r+0xdc>
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	6053      	str	r3, [r2, #4]
 800b3ac:	e7de      	b.n	800b36c <_malloc_r+0xa8>
 800b3ae:	230c      	movs	r3, #12
 800b3b0:	4630      	mov	r0, r6
 800b3b2:	6033      	str	r3, [r6, #0]
 800b3b4:	f000 f80c 	bl	800b3d0 <__malloc_unlock>
 800b3b8:	e794      	b.n	800b2e4 <_malloc_r+0x20>
 800b3ba:	6005      	str	r5, [r0, #0]
 800b3bc:	e7d6      	b.n	800b36c <_malloc_r+0xa8>
 800b3be:	bf00      	nop
 800b3c0:	200005b0 	.word	0x200005b0

0800b3c4 <__malloc_lock>:
 800b3c4:	4801      	ldr	r0, [pc, #4]	@ (800b3cc <__malloc_lock+0x8>)
 800b3c6:	f7ff bf02 	b.w	800b1ce <__retarget_lock_acquire_recursive>
 800b3ca:	bf00      	nop
 800b3cc:	200005a8 	.word	0x200005a8

0800b3d0 <__malloc_unlock>:
 800b3d0:	4801      	ldr	r0, [pc, #4]	@ (800b3d8 <__malloc_unlock+0x8>)
 800b3d2:	f7ff befd 	b.w	800b1d0 <__retarget_lock_release_recursive>
 800b3d6:	bf00      	nop
 800b3d8:	200005a8 	.word	0x200005a8

0800b3dc <__sfputc_r>:
 800b3dc:	6893      	ldr	r3, [r2, #8]
 800b3de:	3b01      	subs	r3, #1
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	6093      	str	r3, [r2, #8]
 800b3e4:	b410      	push	{r4}
 800b3e6:	da08      	bge.n	800b3fa <__sfputc_r+0x1e>
 800b3e8:	6994      	ldr	r4, [r2, #24]
 800b3ea:	42a3      	cmp	r3, r4
 800b3ec:	db01      	blt.n	800b3f2 <__sfputc_r+0x16>
 800b3ee:	290a      	cmp	r1, #10
 800b3f0:	d103      	bne.n	800b3fa <__sfputc_r+0x1e>
 800b3f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3f6:	f7ff bddc 	b.w	800afb2 <__swbuf_r>
 800b3fa:	6813      	ldr	r3, [r2, #0]
 800b3fc:	1c58      	adds	r0, r3, #1
 800b3fe:	6010      	str	r0, [r2, #0]
 800b400:	4608      	mov	r0, r1
 800b402:	7019      	strb	r1, [r3, #0]
 800b404:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b408:	4770      	bx	lr

0800b40a <__sfputs_r>:
 800b40a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b40c:	4606      	mov	r6, r0
 800b40e:	460f      	mov	r7, r1
 800b410:	4614      	mov	r4, r2
 800b412:	18d5      	adds	r5, r2, r3
 800b414:	42ac      	cmp	r4, r5
 800b416:	d101      	bne.n	800b41c <__sfputs_r+0x12>
 800b418:	2000      	movs	r0, #0
 800b41a:	e007      	b.n	800b42c <__sfputs_r+0x22>
 800b41c:	463a      	mov	r2, r7
 800b41e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b422:	4630      	mov	r0, r6
 800b424:	f7ff ffda 	bl	800b3dc <__sfputc_r>
 800b428:	1c43      	adds	r3, r0, #1
 800b42a:	d1f3      	bne.n	800b414 <__sfputs_r+0xa>
 800b42c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b430 <_vfiprintf_r>:
 800b430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b434:	460d      	mov	r5, r1
 800b436:	b09d      	sub	sp, #116	@ 0x74
 800b438:	4614      	mov	r4, r2
 800b43a:	4698      	mov	r8, r3
 800b43c:	4606      	mov	r6, r0
 800b43e:	b118      	cbz	r0, 800b448 <_vfiprintf_r+0x18>
 800b440:	6a03      	ldr	r3, [r0, #32]
 800b442:	b90b      	cbnz	r3, 800b448 <_vfiprintf_r+0x18>
 800b444:	f7ff fccc 	bl	800ade0 <__sinit>
 800b448:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b44a:	07d9      	lsls	r1, r3, #31
 800b44c:	d405      	bmi.n	800b45a <_vfiprintf_r+0x2a>
 800b44e:	89ab      	ldrh	r3, [r5, #12]
 800b450:	059a      	lsls	r2, r3, #22
 800b452:	d402      	bmi.n	800b45a <_vfiprintf_r+0x2a>
 800b454:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b456:	f7ff feba 	bl	800b1ce <__retarget_lock_acquire_recursive>
 800b45a:	89ab      	ldrh	r3, [r5, #12]
 800b45c:	071b      	lsls	r3, r3, #28
 800b45e:	d501      	bpl.n	800b464 <_vfiprintf_r+0x34>
 800b460:	692b      	ldr	r3, [r5, #16]
 800b462:	b99b      	cbnz	r3, 800b48c <_vfiprintf_r+0x5c>
 800b464:	4629      	mov	r1, r5
 800b466:	4630      	mov	r0, r6
 800b468:	f7ff fde2 	bl	800b030 <__swsetup_r>
 800b46c:	b170      	cbz	r0, 800b48c <_vfiprintf_r+0x5c>
 800b46e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b470:	07dc      	lsls	r4, r3, #31
 800b472:	d504      	bpl.n	800b47e <_vfiprintf_r+0x4e>
 800b474:	f04f 30ff 	mov.w	r0, #4294967295
 800b478:	b01d      	add	sp, #116	@ 0x74
 800b47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b47e:	89ab      	ldrh	r3, [r5, #12]
 800b480:	0598      	lsls	r0, r3, #22
 800b482:	d4f7      	bmi.n	800b474 <_vfiprintf_r+0x44>
 800b484:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b486:	f7ff fea3 	bl	800b1d0 <__retarget_lock_release_recursive>
 800b48a:	e7f3      	b.n	800b474 <_vfiprintf_r+0x44>
 800b48c:	2300      	movs	r3, #0
 800b48e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b492:	f04f 0901 	mov.w	r9, #1
 800b496:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800b64c <_vfiprintf_r+0x21c>
 800b49a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b49c:	2320      	movs	r3, #32
 800b49e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b4a2:	2330      	movs	r3, #48	@ 0x30
 800b4a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b4a8:	4623      	mov	r3, r4
 800b4aa:	469a      	mov	sl, r3
 800b4ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4b0:	b10a      	cbz	r2, 800b4b6 <_vfiprintf_r+0x86>
 800b4b2:	2a25      	cmp	r2, #37	@ 0x25
 800b4b4:	d1f9      	bne.n	800b4aa <_vfiprintf_r+0x7a>
 800b4b6:	ebba 0b04 	subs.w	fp, sl, r4
 800b4ba:	d00b      	beq.n	800b4d4 <_vfiprintf_r+0xa4>
 800b4bc:	465b      	mov	r3, fp
 800b4be:	4622      	mov	r2, r4
 800b4c0:	4629      	mov	r1, r5
 800b4c2:	4630      	mov	r0, r6
 800b4c4:	f7ff ffa1 	bl	800b40a <__sfputs_r>
 800b4c8:	3001      	adds	r0, #1
 800b4ca:	f000 80a7 	beq.w	800b61c <_vfiprintf_r+0x1ec>
 800b4ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4d0:	445a      	add	r2, fp
 800b4d2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b4d4:	f89a 3000 	ldrb.w	r3, [sl]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	f000 809f 	beq.w	800b61c <_vfiprintf_r+0x1ec>
 800b4de:	2300      	movs	r3, #0
 800b4e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b4e4:	f10a 0a01 	add.w	sl, sl, #1
 800b4e8:	9304      	str	r3, [sp, #16]
 800b4ea:	9307      	str	r3, [sp, #28]
 800b4ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b4f0:	931a      	str	r3, [sp, #104]	@ 0x68
 800b4f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4f6:	4654      	mov	r4, sl
 800b4f8:	2205      	movs	r2, #5
 800b4fa:	4854      	ldr	r0, [pc, #336]	@ (800b64c <_vfiprintf_r+0x21c>)
 800b4fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b500:	f000 fb80 	bl	800bc04 <memchr>
 800b504:	9a04      	ldr	r2, [sp, #16]
 800b506:	b9d8      	cbnz	r0, 800b540 <_vfiprintf_r+0x110>
 800b508:	06d1      	lsls	r1, r2, #27
 800b50a:	bf44      	itt	mi
 800b50c:	2320      	movmi	r3, #32
 800b50e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b512:	0713      	lsls	r3, r2, #28
 800b514:	bf44      	itt	mi
 800b516:	232b      	movmi	r3, #43	@ 0x2b
 800b518:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b51c:	f89a 3000 	ldrb.w	r3, [sl]
 800b520:	2b2a      	cmp	r3, #42	@ 0x2a
 800b522:	d015      	beq.n	800b550 <_vfiprintf_r+0x120>
 800b524:	9a07      	ldr	r2, [sp, #28]
 800b526:	4654      	mov	r4, sl
 800b528:	2000      	movs	r0, #0
 800b52a:	f04f 0c0a 	mov.w	ip, #10
 800b52e:	4621      	mov	r1, r4
 800b530:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b534:	3b30      	subs	r3, #48	@ 0x30
 800b536:	2b09      	cmp	r3, #9
 800b538:	d94b      	bls.n	800b5d2 <_vfiprintf_r+0x1a2>
 800b53a:	b1b0      	cbz	r0, 800b56a <_vfiprintf_r+0x13a>
 800b53c:	9207      	str	r2, [sp, #28]
 800b53e:	e014      	b.n	800b56a <_vfiprintf_r+0x13a>
 800b540:	eba0 0308 	sub.w	r3, r0, r8
 800b544:	46a2      	mov	sl, r4
 800b546:	fa09 f303 	lsl.w	r3, r9, r3
 800b54a:	4313      	orrs	r3, r2
 800b54c:	9304      	str	r3, [sp, #16]
 800b54e:	e7d2      	b.n	800b4f6 <_vfiprintf_r+0xc6>
 800b550:	9b03      	ldr	r3, [sp, #12]
 800b552:	1d19      	adds	r1, r3, #4
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	9103      	str	r1, [sp, #12]
 800b55a:	bfbb      	ittet	lt
 800b55c:	425b      	neglt	r3, r3
 800b55e:	f042 0202 	orrlt.w	r2, r2, #2
 800b562:	9307      	strge	r3, [sp, #28]
 800b564:	9307      	strlt	r3, [sp, #28]
 800b566:	bfb8      	it	lt
 800b568:	9204      	strlt	r2, [sp, #16]
 800b56a:	7823      	ldrb	r3, [r4, #0]
 800b56c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b56e:	d10a      	bne.n	800b586 <_vfiprintf_r+0x156>
 800b570:	7863      	ldrb	r3, [r4, #1]
 800b572:	2b2a      	cmp	r3, #42	@ 0x2a
 800b574:	d132      	bne.n	800b5dc <_vfiprintf_r+0x1ac>
 800b576:	9b03      	ldr	r3, [sp, #12]
 800b578:	3402      	adds	r4, #2
 800b57a:	1d1a      	adds	r2, r3, #4
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b582:	9203      	str	r2, [sp, #12]
 800b584:	9305      	str	r3, [sp, #20]
 800b586:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b65c <_vfiprintf_r+0x22c>
 800b58a:	2203      	movs	r2, #3
 800b58c:	7821      	ldrb	r1, [r4, #0]
 800b58e:	4650      	mov	r0, sl
 800b590:	f000 fb38 	bl	800bc04 <memchr>
 800b594:	b138      	cbz	r0, 800b5a6 <_vfiprintf_r+0x176>
 800b596:	eba0 000a 	sub.w	r0, r0, sl
 800b59a:	2240      	movs	r2, #64	@ 0x40
 800b59c:	9b04      	ldr	r3, [sp, #16]
 800b59e:	3401      	adds	r4, #1
 800b5a0:	4082      	lsls	r2, r0
 800b5a2:	4313      	orrs	r3, r2
 800b5a4:	9304      	str	r3, [sp, #16]
 800b5a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5aa:	2206      	movs	r2, #6
 800b5ac:	4828      	ldr	r0, [pc, #160]	@ (800b650 <_vfiprintf_r+0x220>)
 800b5ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b5b2:	f000 fb27 	bl	800bc04 <memchr>
 800b5b6:	2800      	cmp	r0, #0
 800b5b8:	d03f      	beq.n	800b63a <_vfiprintf_r+0x20a>
 800b5ba:	4b26      	ldr	r3, [pc, #152]	@ (800b654 <_vfiprintf_r+0x224>)
 800b5bc:	bb1b      	cbnz	r3, 800b606 <_vfiprintf_r+0x1d6>
 800b5be:	9b03      	ldr	r3, [sp, #12]
 800b5c0:	3307      	adds	r3, #7
 800b5c2:	f023 0307 	bic.w	r3, r3, #7
 800b5c6:	3308      	adds	r3, #8
 800b5c8:	9303      	str	r3, [sp, #12]
 800b5ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5cc:	443b      	add	r3, r7
 800b5ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5d0:	e76a      	b.n	800b4a8 <_vfiprintf_r+0x78>
 800b5d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5d6:	460c      	mov	r4, r1
 800b5d8:	2001      	movs	r0, #1
 800b5da:	e7a8      	b.n	800b52e <_vfiprintf_r+0xfe>
 800b5dc:	2300      	movs	r3, #0
 800b5de:	3401      	adds	r4, #1
 800b5e0:	f04f 0c0a 	mov.w	ip, #10
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	9305      	str	r3, [sp, #20]
 800b5e8:	4620      	mov	r0, r4
 800b5ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5ee:	3a30      	subs	r2, #48	@ 0x30
 800b5f0:	2a09      	cmp	r2, #9
 800b5f2:	d903      	bls.n	800b5fc <_vfiprintf_r+0x1cc>
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d0c6      	beq.n	800b586 <_vfiprintf_r+0x156>
 800b5f8:	9105      	str	r1, [sp, #20]
 800b5fa:	e7c4      	b.n	800b586 <_vfiprintf_r+0x156>
 800b5fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b600:	4604      	mov	r4, r0
 800b602:	2301      	movs	r3, #1
 800b604:	e7f0      	b.n	800b5e8 <_vfiprintf_r+0x1b8>
 800b606:	ab03      	add	r3, sp, #12
 800b608:	462a      	mov	r2, r5
 800b60a:	a904      	add	r1, sp, #16
 800b60c:	4630      	mov	r0, r6
 800b60e:	9300      	str	r3, [sp, #0]
 800b610:	4b11      	ldr	r3, [pc, #68]	@ (800b658 <_vfiprintf_r+0x228>)
 800b612:	f3af 8000 	nop.w
 800b616:	4607      	mov	r7, r0
 800b618:	1c78      	adds	r0, r7, #1
 800b61a:	d1d6      	bne.n	800b5ca <_vfiprintf_r+0x19a>
 800b61c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b61e:	07d9      	lsls	r1, r3, #31
 800b620:	d405      	bmi.n	800b62e <_vfiprintf_r+0x1fe>
 800b622:	89ab      	ldrh	r3, [r5, #12]
 800b624:	059a      	lsls	r2, r3, #22
 800b626:	d402      	bmi.n	800b62e <_vfiprintf_r+0x1fe>
 800b628:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b62a:	f7ff fdd1 	bl	800b1d0 <__retarget_lock_release_recursive>
 800b62e:	89ab      	ldrh	r3, [r5, #12]
 800b630:	065b      	lsls	r3, r3, #25
 800b632:	f53f af1f 	bmi.w	800b474 <_vfiprintf_r+0x44>
 800b636:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b638:	e71e      	b.n	800b478 <_vfiprintf_r+0x48>
 800b63a:	ab03      	add	r3, sp, #12
 800b63c:	462a      	mov	r2, r5
 800b63e:	a904      	add	r1, sp, #16
 800b640:	4630      	mov	r0, r6
 800b642:	9300      	str	r3, [sp, #0]
 800b644:	4b04      	ldr	r3, [pc, #16]	@ (800b658 <_vfiprintf_r+0x228>)
 800b646:	f000 f87d 	bl	800b744 <_printf_i>
 800b64a:	e7e4      	b.n	800b616 <_vfiprintf_r+0x1e6>
 800b64c:	0800c030 	.word	0x0800c030
 800b650:	0800c03a 	.word	0x0800c03a
 800b654:	00000000 	.word	0x00000000
 800b658:	0800b40b 	.word	0x0800b40b
 800b65c:	0800c036 	.word	0x0800c036

0800b660 <_printf_common>:
 800b660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b664:	4616      	mov	r6, r2
 800b666:	4698      	mov	r8, r3
 800b668:	688a      	ldr	r2, [r1, #8]
 800b66a:	4607      	mov	r7, r0
 800b66c:	690b      	ldr	r3, [r1, #16]
 800b66e:	460c      	mov	r4, r1
 800b670:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b674:	4293      	cmp	r3, r2
 800b676:	bfb8      	it	lt
 800b678:	4613      	movlt	r3, r2
 800b67a:	6033      	str	r3, [r6, #0]
 800b67c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b680:	b10a      	cbz	r2, 800b686 <_printf_common+0x26>
 800b682:	3301      	adds	r3, #1
 800b684:	6033      	str	r3, [r6, #0]
 800b686:	6823      	ldr	r3, [r4, #0]
 800b688:	0699      	lsls	r1, r3, #26
 800b68a:	bf42      	ittt	mi
 800b68c:	6833      	ldrmi	r3, [r6, #0]
 800b68e:	3302      	addmi	r3, #2
 800b690:	6033      	strmi	r3, [r6, #0]
 800b692:	6825      	ldr	r5, [r4, #0]
 800b694:	f015 0506 	ands.w	r5, r5, #6
 800b698:	d106      	bne.n	800b6a8 <_printf_common+0x48>
 800b69a:	f104 0a19 	add.w	sl, r4, #25
 800b69e:	68e3      	ldr	r3, [r4, #12]
 800b6a0:	6832      	ldr	r2, [r6, #0]
 800b6a2:	1a9b      	subs	r3, r3, r2
 800b6a4:	42ab      	cmp	r3, r5
 800b6a6:	dc2b      	bgt.n	800b700 <_printf_common+0xa0>
 800b6a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b6ac:	6822      	ldr	r2, [r4, #0]
 800b6ae:	3b00      	subs	r3, #0
 800b6b0:	bf18      	it	ne
 800b6b2:	2301      	movne	r3, #1
 800b6b4:	0692      	lsls	r2, r2, #26
 800b6b6:	d430      	bmi.n	800b71a <_printf_common+0xba>
 800b6b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b6bc:	4641      	mov	r1, r8
 800b6be:	4638      	mov	r0, r7
 800b6c0:	47c8      	blx	r9
 800b6c2:	3001      	adds	r0, #1
 800b6c4:	d023      	beq.n	800b70e <_printf_common+0xae>
 800b6c6:	6823      	ldr	r3, [r4, #0]
 800b6c8:	341a      	adds	r4, #26
 800b6ca:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800b6ce:	f003 0306 	and.w	r3, r3, #6
 800b6d2:	2b04      	cmp	r3, #4
 800b6d4:	bf0a      	itet	eq
 800b6d6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800b6da:	2500      	movne	r5, #0
 800b6dc:	6833      	ldreq	r3, [r6, #0]
 800b6de:	f04f 0600 	mov.w	r6, #0
 800b6e2:	bf08      	it	eq
 800b6e4:	1aed      	subeq	r5, r5, r3
 800b6e6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b6ea:	bf08      	it	eq
 800b6ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	bfc4      	itt	gt
 800b6f4:	1a9b      	subgt	r3, r3, r2
 800b6f6:	18ed      	addgt	r5, r5, r3
 800b6f8:	42b5      	cmp	r5, r6
 800b6fa:	d11a      	bne.n	800b732 <_printf_common+0xd2>
 800b6fc:	2000      	movs	r0, #0
 800b6fe:	e008      	b.n	800b712 <_printf_common+0xb2>
 800b700:	2301      	movs	r3, #1
 800b702:	4652      	mov	r2, sl
 800b704:	4641      	mov	r1, r8
 800b706:	4638      	mov	r0, r7
 800b708:	47c8      	blx	r9
 800b70a:	3001      	adds	r0, #1
 800b70c:	d103      	bne.n	800b716 <_printf_common+0xb6>
 800b70e:	f04f 30ff 	mov.w	r0, #4294967295
 800b712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b716:	3501      	adds	r5, #1
 800b718:	e7c1      	b.n	800b69e <_printf_common+0x3e>
 800b71a:	18e1      	adds	r1, r4, r3
 800b71c:	1c5a      	adds	r2, r3, #1
 800b71e:	2030      	movs	r0, #48	@ 0x30
 800b720:	3302      	adds	r3, #2
 800b722:	4422      	add	r2, r4
 800b724:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b728:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b72c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b730:	e7c2      	b.n	800b6b8 <_printf_common+0x58>
 800b732:	2301      	movs	r3, #1
 800b734:	4622      	mov	r2, r4
 800b736:	4641      	mov	r1, r8
 800b738:	4638      	mov	r0, r7
 800b73a:	47c8      	blx	r9
 800b73c:	3001      	adds	r0, #1
 800b73e:	d0e6      	beq.n	800b70e <_printf_common+0xae>
 800b740:	3601      	adds	r6, #1
 800b742:	e7d9      	b.n	800b6f8 <_printf_common+0x98>

0800b744 <_printf_i>:
 800b744:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b748:	7e0f      	ldrb	r7, [r1, #24]
 800b74a:	4691      	mov	r9, r2
 800b74c:	4680      	mov	r8, r0
 800b74e:	460c      	mov	r4, r1
 800b750:	2f78      	cmp	r7, #120	@ 0x78
 800b752:	469a      	mov	sl, r3
 800b754:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b756:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b75a:	d807      	bhi.n	800b76c <_printf_i+0x28>
 800b75c:	2f62      	cmp	r7, #98	@ 0x62
 800b75e:	d80a      	bhi.n	800b776 <_printf_i+0x32>
 800b760:	2f00      	cmp	r7, #0
 800b762:	f000 80d2 	beq.w	800b90a <_printf_i+0x1c6>
 800b766:	2f58      	cmp	r7, #88	@ 0x58
 800b768:	f000 80b9 	beq.w	800b8de <_printf_i+0x19a>
 800b76c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b770:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b774:	e03a      	b.n	800b7ec <_printf_i+0xa8>
 800b776:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b77a:	2b15      	cmp	r3, #21
 800b77c:	d8f6      	bhi.n	800b76c <_printf_i+0x28>
 800b77e:	a101      	add	r1, pc, #4	@ (adr r1, 800b784 <_printf_i+0x40>)
 800b780:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b784:	0800b7dd 	.word	0x0800b7dd
 800b788:	0800b7f1 	.word	0x0800b7f1
 800b78c:	0800b76d 	.word	0x0800b76d
 800b790:	0800b76d 	.word	0x0800b76d
 800b794:	0800b76d 	.word	0x0800b76d
 800b798:	0800b76d 	.word	0x0800b76d
 800b79c:	0800b7f1 	.word	0x0800b7f1
 800b7a0:	0800b76d 	.word	0x0800b76d
 800b7a4:	0800b76d 	.word	0x0800b76d
 800b7a8:	0800b76d 	.word	0x0800b76d
 800b7ac:	0800b76d 	.word	0x0800b76d
 800b7b0:	0800b8f1 	.word	0x0800b8f1
 800b7b4:	0800b81b 	.word	0x0800b81b
 800b7b8:	0800b8ab 	.word	0x0800b8ab
 800b7bc:	0800b76d 	.word	0x0800b76d
 800b7c0:	0800b76d 	.word	0x0800b76d
 800b7c4:	0800b913 	.word	0x0800b913
 800b7c8:	0800b76d 	.word	0x0800b76d
 800b7cc:	0800b81b 	.word	0x0800b81b
 800b7d0:	0800b76d 	.word	0x0800b76d
 800b7d4:	0800b76d 	.word	0x0800b76d
 800b7d8:	0800b8b3 	.word	0x0800b8b3
 800b7dc:	6833      	ldr	r3, [r6, #0]
 800b7de:	1d1a      	adds	r2, r3, #4
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	6032      	str	r2, [r6, #0]
 800b7e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b7e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	e09d      	b.n	800b92c <_printf_i+0x1e8>
 800b7f0:	6833      	ldr	r3, [r6, #0]
 800b7f2:	6820      	ldr	r0, [r4, #0]
 800b7f4:	1d19      	adds	r1, r3, #4
 800b7f6:	6031      	str	r1, [r6, #0]
 800b7f8:	0606      	lsls	r6, r0, #24
 800b7fa:	d501      	bpl.n	800b800 <_printf_i+0xbc>
 800b7fc:	681d      	ldr	r5, [r3, #0]
 800b7fe:	e003      	b.n	800b808 <_printf_i+0xc4>
 800b800:	0645      	lsls	r5, r0, #25
 800b802:	d5fb      	bpl.n	800b7fc <_printf_i+0xb8>
 800b804:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b808:	2d00      	cmp	r5, #0
 800b80a:	da03      	bge.n	800b814 <_printf_i+0xd0>
 800b80c:	232d      	movs	r3, #45	@ 0x2d
 800b80e:	426d      	negs	r5, r5
 800b810:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b814:	4859      	ldr	r0, [pc, #356]	@ (800b97c <_printf_i+0x238>)
 800b816:	230a      	movs	r3, #10
 800b818:	e011      	b.n	800b83e <_printf_i+0xfa>
 800b81a:	6821      	ldr	r1, [r4, #0]
 800b81c:	6833      	ldr	r3, [r6, #0]
 800b81e:	0608      	lsls	r0, r1, #24
 800b820:	f853 5b04 	ldr.w	r5, [r3], #4
 800b824:	d402      	bmi.n	800b82c <_printf_i+0xe8>
 800b826:	0649      	lsls	r1, r1, #25
 800b828:	bf48      	it	mi
 800b82a:	b2ad      	uxthmi	r5, r5
 800b82c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b82e:	6033      	str	r3, [r6, #0]
 800b830:	4852      	ldr	r0, [pc, #328]	@ (800b97c <_printf_i+0x238>)
 800b832:	bf14      	ite	ne
 800b834:	230a      	movne	r3, #10
 800b836:	2308      	moveq	r3, #8
 800b838:	2100      	movs	r1, #0
 800b83a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b83e:	6866      	ldr	r6, [r4, #4]
 800b840:	2e00      	cmp	r6, #0
 800b842:	60a6      	str	r6, [r4, #8]
 800b844:	bfa2      	ittt	ge
 800b846:	6821      	ldrge	r1, [r4, #0]
 800b848:	f021 0104 	bicge.w	r1, r1, #4
 800b84c:	6021      	strge	r1, [r4, #0]
 800b84e:	b90d      	cbnz	r5, 800b854 <_printf_i+0x110>
 800b850:	2e00      	cmp	r6, #0
 800b852:	d04b      	beq.n	800b8ec <_printf_i+0x1a8>
 800b854:	4616      	mov	r6, r2
 800b856:	fbb5 f1f3 	udiv	r1, r5, r3
 800b85a:	fb03 5711 	mls	r7, r3, r1, r5
 800b85e:	5dc7      	ldrb	r7, [r0, r7]
 800b860:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b864:	462f      	mov	r7, r5
 800b866:	460d      	mov	r5, r1
 800b868:	42bb      	cmp	r3, r7
 800b86a:	d9f4      	bls.n	800b856 <_printf_i+0x112>
 800b86c:	2b08      	cmp	r3, #8
 800b86e:	d10b      	bne.n	800b888 <_printf_i+0x144>
 800b870:	6823      	ldr	r3, [r4, #0]
 800b872:	07df      	lsls	r7, r3, #31
 800b874:	d508      	bpl.n	800b888 <_printf_i+0x144>
 800b876:	6923      	ldr	r3, [r4, #16]
 800b878:	6861      	ldr	r1, [r4, #4]
 800b87a:	4299      	cmp	r1, r3
 800b87c:	bfde      	ittt	le
 800b87e:	2330      	movle	r3, #48	@ 0x30
 800b880:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b884:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b888:	1b92      	subs	r2, r2, r6
 800b88a:	6122      	str	r2, [r4, #16]
 800b88c:	464b      	mov	r3, r9
 800b88e:	aa03      	add	r2, sp, #12
 800b890:	4621      	mov	r1, r4
 800b892:	4640      	mov	r0, r8
 800b894:	f8cd a000 	str.w	sl, [sp]
 800b898:	f7ff fee2 	bl	800b660 <_printf_common>
 800b89c:	3001      	adds	r0, #1
 800b89e:	d14a      	bne.n	800b936 <_printf_i+0x1f2>
 800b8a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b8a4:	b004      	add	sp, #16
 800b8a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8aa:	6823      	ldr	r3, [r4, #0]
 800b8ac:	f043 0320 	orr.w	r3, r3, #32
 800b8b0:	6023      	str	r3, [r4, #0]
 800b8b2:	2778      	movs	r7, #120	@ 0x78
 800b8b4:	4832      	ldr	r0, [pc, #200]	@ (800b980 <_printf_i+0x23c>)
 800b8b6:	6823      	ldr	r3, [r4, #0]
 800b8b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b8bc:	061f      	lsls	r7, r3, #24
 800b8be:	6831      	ldr	r1, [r6, #0]
 800b8c0:	f851 5b04 	ldr.w	r5, [r1], #4
 800b8c4:	d402      	bmi.n	800b8cc <_printf_i+0x188>
 800b8c6:	065f      	lsls	r7, r3, #25
 800b8c8:	bf48      	it	mi
 800b8ca:	b2ad      	uxthmi	r5, r5
 800b8cc:	6031      	str	r1, [r6, #0]
 800b8ce:	07d9      	lsls	r1, r3, #31
 800b8d0:	bf44      	itt	mi
 800b8d2:	f043 0320 	orrmi.w	r3, r3, #32
 800b8d6:	6023      	strmi	r3, [r4, #0]
 800b8d8:	b11d      	cbz	r5, 800b8e2 <_printf_i+0x19e>
 800b8da:	2310      	movs	r3, #16
 800b8dc:	e7ac      	b.n	800b838 <_printf_i+0xf4>
 800b8de:	4827      	ldr	r0, [pc, #156]	@ (800b97c <_printf_i+0x238>)
 800b8e0:	e7e9      	b.n	800b8b6 <_printf_i+0x172>
 800b8e2:	6823      	ldr	r3, [r4, #0]
 800b8e4:	f023 0320 	bic.w	r3, r3, #32
 800b8e8:	6023      	str	r3, [r4, #0]
 800b8ea:	e7f6      	b.n	800b8da <_printf_i+0x196>
 800b8ec:	4616      	mov	r6, r2
 800b8ee:	e7bd      	b.n	800b86c <_printf_i+0x128>
 800b8f0:	6833      	ldr	r3, [r6, #0]
 800b8f2:	6825      	ldr	r5, [r4, #0]
 800b8f4:	1d18      	adds	r0, r3, #4
 800b8f6:	6961      	ldr	r1, [r4, #20]
 800b8f8:	6030      	str	r0, [r6, #0]
 800b8fa:	062e      	lsls	r6, r5, #24
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	d501      	bpl.n	800b904 <_printf_i+0x1c0>
 800b900:	6019      	str	r1, [r3, #0]
 800b902:	e002      	b.n	800b90a <_printf_i+0x1c6>
 800b904:	0668      	lsls	r0, r5, #25
 800b906:	d5fb      	bpl.n	800b900 <_printf_i+0x1bc>
 800b908:	8019      	strh	r1, [r3, #0]
 800b90a:	2300      	movs	r3, #0
 800b90c:	4616      	mov	r6, r2
 800b90e:	6123      	str	r3, [r4, #16]
 800b910:	e7bc      	b.n	800b88c <_printf_i+0x148>
 800b912:	6833      	ldr	r3, [r6, #0]
 800b914:	2100      	movs	r1, #0
 800b916:	1d1a      	adds	r2, r3, #4
 800b918:	6032      	str	r2, [r6, #0]
 800b91a:	681e      	ldr	r6, [r3, #0]
 800b91c:	6862      	ldr	r2, [r4, #4]
 800b91e:	4630      	mov	r0, r6
 800b920:	f000 f970 	bl	800bc04 <memchr>
 800b924:	b108      	cbz	r0, 800b92a <_printf_i+0x1e6>
 800b926:	1b80      	subs	r0, r0, r6
 800b928:	6060      	str	r0, [r4, #4]
 800b92a:	6863      	ldr	r3, [r4, #4]
 800b92c:	6123      	str	r3, [r4, #16]
 800b92e:	2300      	movs	r3, #0
 800b930:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b934:	e7aa      	b.n	800b88c <_printf_i+0x148>
 800b936:	6923      	ldr	r3, [r4, #16]
 800b938:	4632      	mov	r2, r6
 800b93a:	4649      	mov	r1, r9
 800b93c:	4640      	mov	r0, r8
 800b93e:	47d0      	blx	sl
 800b940:	3001      	adds	r0, #1
 800b942:	d0ad      	beq.n	800b8a0 <_printf_i+0x15c>
 800b944:	6823      	ldr	r3, [r4, #0]
 800b946:	079b      	lsls	r3, r3, #30
 800b948:	d413      	bmi.n	800b972 <_printf_i+0x22e>
 800b94a:	68e0      	ldr	r0, [r4, #12]
 800b94c:	9b03      	ldr	r3, [sp, #12]
 800b94e:	4298      	cmp	r0, r3
 800b950:	bfb8      	it	lt
 800b952:	4618      	movlt	r0, r3
 800b954:	e7a6      	b.n	800b8a4 <_printf_i+0x160>
 800b956:	2301      	movs	r3, #1
 800b958:	4632      	mov	r2, r6
 800b95a:	4649      	mov	r1, r9
 800b95c:	4640      	mov	r0, r8
 800b95e:	47d0      	blx	sl
 800b960:	3001      	adds	r0, #1
 800b962:	d09d      	beq.n	800b8a0 <_printf_i+0x15c>
 800b964:	3501      	adds	r5, #1
 800b966:	68e3      	ldr	r3, [r4, #12]
 800b968:	9903      	ldr	r1, [sp, #12]
 800b96a:	1a5b      	subs	r3, r3, r1
 800b96c:	42ab      	cmp	r3, r5
 800b96e:	dcf2      	bgt.n	800b956 <_printf_i+0x212>
 800b970:	e7eb      	b.n	800b94a <_printf_i+0x206>
 800b972:	2500      	movs	r5, #0
 800b974:	f104 0619 	add.w	r6, r4, #25
 800b978:	e7f5      	b.n	800b966 <_printf_i+0x222>
 800b97a:	bf00      	nop
 800b97c:	0800c041 	.word	0x0800c041
 800b980:	0800c052 	.word	0x0800c052

0800b984 <__sflush_r>:
 800b984:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b98c:	0716      	lsls	r6, r2, #28
 800b98e:	4605      	mov	r5, r0
 800b990:	460c      	mov	r4, r1
 800b992:	d454      	bmi.n	800ba3e <__sflush_r+0xba>
 800b994:	684b      	ldr	r3, [r1, #4]
 800b996:	2b00      	cmp	r3, #0
 800b998:	dc02      	bgt.n	800b9a0 <__sflush_r+0x1c>
 800b99a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	dd48      	ble.n	800ba32 <__sflush_r+0xae>
 800b9a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b9a2:	2e00      	cmp	r6, #0
 800b9a4:	d045      	beq.n	800ba32 <__sflush_r+0xae>
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b9ac:	682f      	ldr	r7, [r5, #0]
 800b9ae:	6a21      	ldr	r1, [r4, #32]
 800b9b0:	602b      	str	r3, [r5, #0]
 800b9b2:	d030      	beq.n	800ba16 <__sflush_r+0x92>
 800b9b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b9b6:	89a3      	ldrh	r3, [r4, #12]
 800b9b8:	0759      	lsls	r1, r3, #29
 800b9ba:	d505      	bpl.n	800b9c8 <__sflush_r+0x44>
 800b9bc:	6863      	ldr	r3, [r4, #4]
 800b9be:	1ad2      	subs	r2, r2, r3
 800b9c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b9c2:	b10b      	cbz	r3, 800b9c8 <__sflush_r+0x44>
 800b9c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b9c6:	1ad2      	subs	r2, r2, r3
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b9cc:	6a21      	ldr	r1, [r4, #32]
 800b9ce:	4628      	mov	r0, r5
 800b9d0:	47b0      	blx	r6
 800b9d2:	1c43      	adds	r3, r0, #1
 800b9d4:	89a3      	ldrh	r3, [r4, #12]
 800b9d6:	d106      	bne.n	800b9e6 <__sflush_r+0x62>
 800b9d8:	6829      	ldr	r1, [r5, #0]
 800b9da:	291d      	cmp	r1, #29
 800b9dc:	d82b      	bhi.n	800ba36 <__sflush_r+0xb2>
 800b9de:	4a2a      	ldr	r2, [pc, #168]	@ (800ba88 <__sflush_r+0x104>)
 800b9e0:	410a      	asrs	r2, r1
 800b9e2:	07d6      	lsls	r6, r2, #31
 800b9e4:	d427      	bmi.n	800ba36 <__sflush_r+0xb2>
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	04d9      	lsls	r1, r3, #19
 800b9ea:	6062      	str	r2, [r4, #4]
 800b9ec:	6922      	ldr	r2, [r4, #16]
 800b9ee:	6022      	str	r2, [r4, #0]
 800b9f0:	d504      	bpl.n	800b9fc <__sflush_r+0x78>
 800b9f2:	1c42      	adds	r2, r0, #1
 800b9f4:	d101      	bne.n	800b9fa <__sflush_r+0x76>
 800b9f6:	682b      	ldr	r3, [r5, #0]
 800b9f8:	b903      	cbnz	r3, 800b9fc <__sflush_r+0x78>
 800b9fa:	6560      	str	r0, [r4, #84]	@ 0x54
 800b9fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b9fe:	602f      	str	r7, [r5, #0]
 800ba00:	b1b9      	cbz	r1, 800ba32 <__sflush_r+0xae>
 800ba02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ba06:	4299      	cmp	r1, r3
 800ba08:	d002      	beq.n	800ba10 <__sflush_r+0x8c>
 800ba0a:	4628      	mov	r0, r5
 800ba0c:	f7ff fbee 	bl	800b1ec <_free_r>
 800ba10:	2300      	movs	r3, #0
 800ba12:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba14:	e00d      	b.n	800ba32 <__sflush_r+0xae>
 800ba16:	2301      	movs	r3, #1
 800ba18:	4628      	mov	r0, r5
 800ba1a:	47b0      	blx	r6
 800ba1c:	4602      	mov	r2, r0
 800ba1e:	1c50      	adds	r0, r2, #1
 800ba20:	d1c9      	bne.n	800b9b6 <__sflush_r+0x32>
 800ba22:	682b      	ldr	r3, [r5, #0]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d0c6      	beq.n	800b9b6 <__sflush_r+0x32>
 800ba28:	2b1d      	cmp	r3, #29
 800ba2a:	d001      	beq.n	800ba30 <__sflush_r+0xac>
 800ba2c:	2b16      	cmp	r3, #22
 800ba2e:	d11d      	bne.n	800ba6c <__sflush_r+0xe8>
 800ba30:	602f      	str	r7, [r5, #0]
 800ba32:	2000      	movs	r0, #0
 800ba34:	e021      	b.n	800ba7a <__sflush_r+0xf6>
 800ba36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba3a:	b21b      	sxth	r3, r3
 800ba3c:	e01a      	b.n	800ba74 <__sflush_r+0xf0>
 800ba3e:	690f      	ldr	r7, [r1, #16]
 800ba40:	2f00      	cmp	r7, #0
 800ba42:	d0f6      	beq.n	800ba32 <__sflush_r+0xae>
 800ba44:	0793      	lsls	r3, r2, #30
 800ba46:	680e      	ldr	r6, [r1, #0]
 800ba48:	600f      	str	r7, [r1, #0]
 800ba4a:	bf0c      	ite	eq
 800ba4c:	694b      	ldreq	r3, [r1, #20]
 800ba4e:	2300      	movne	r3, #0
 800ba50:	eba6 0807 	sub.w	r8, r6, r7
 800ba54:	608b      	str	r3, [r1, #8]
 800ba56:	f1b8 0f00 	cmp.w	r8, #0
 800ba5a:	ddea      	ble.n	800ba32 <__sflush_r+0xae>
 800ba5c:	4643      	mov	r3, r8
 800ba5e:	463a      	mov	r2, r7
 800ba60:	6a21      	ldr	r1, [r4, #32]
 800ba62:	4628      	mov	r0, r5
 800ba64:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ba66:	47b0      	blx	r6
 800ba68:	2800      	cmp	r0, #0
 800ba6a:	dc08      	bgt.n	800ba7e <__sflush_r+0xfa>
 800ba6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba74:	f04f 30ff 	mov.w	r0, #4294967295
 800ba78:	81a3      	strh	r3, [r4, #12]
 800ba7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba7e:	4407      	add	r7, r0
 800ba80:	eba8 0800 	sub.w	r8, r8, r0
 800ba84:	e7e7      	b.n	800ba56 <__sflush_r+0xd2>
 800ba86:	bf00      	nop
 800ba88:	dfbffffe 	.word	0xdfbffffe

0800ba8c <_fflush_r>:
 800ba8c:	b538      	push	{r3, r4, r5, lr}
 800ba8e:	690b      	ldr	r3, [r1, #16]
 800ba90:	4605      	mov	r5, r0
 800ba92:	460c      	mov	r4, r1
 800ba94:	b913      	cbnz	r3, 800ba9c <_fflush_r+0x10>
 800ba96:	2500      	movs	r5, #0
 800ba98:	4628      	mov	r0, r5
 800ba9a:	bd38      	pop	{r3, r4, r5, pc}
 800ba9c:	b118      	cbz	r0, 800baa6 <_fflush_r+0x1a>
 800ba9e:	6a03      	ldr	r3, [r0, #32]
 800baa0:	b90b      	cbnz	r3, 800baa6 <_fflush_r+0x1a>
 800baa2:	f7ff f99d 	bl	800ade0 <__sinit>
 800baa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d0f3      	beq.n	800ba96 <_fflush_r+0xa>
 800baae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bab0:	07d0      	lsls	r0, r2, #31
 800bab2:	d404      	bmi.n	800babe <_fflush_r+0x32>
 800bab4:	0599      	lsls	r1, r3, #22
 800bab6:	d402      	bmi.n	800babe <_fflush_r+0x32>
 800bab8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800baba:	f7ff fb88 	bl	800b1ce <__retarget_lock_acquire_recursive>
 800babe:	4628      	mov	r0, r5
 800bac0:	4621      	mov	r1, r4
 800bac2:	f7ff ff5f 	bl	800b984 <__sflush_r>
 800bac6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bac8:	4605      	mov	r5, r0
 800baca:	07da      	lsls	r2, r3, #31
 800bacc:	d4e4      	bmi.n	800ba98 <_fflush_r+0xc>
 800bace:	89a3      	ldrh	r3, [r4, #12]
 800bad0:	059b      	lsls	r3, r3, #22
 800bad2:	d4e1      	bmi.n	800ba98 <_fflush_r+0xc>
 800bad4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bad6:	f7ff fb7b 	bl	800b1d0 <__retarget_lock_release_recursive>
 800bada:	e7dd      	b.n	800ba98 <_fflush_r+0xc>

0800badc <__swhatbuf_r>:
 800badc:	b570      	push	{r4, r5, r6, lr}
 800bade:	460c      	mov	r4, r1
 800bae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bae4:	b096      	sub	sp, #88	@ 0x58
 800bae6:	4615      	mov	r5, r2
 800bae8:	2900      	cmp	r1, #0
 800baea:	461e      	mov	r6, r3
 800baec:	da0c      	bge.n	800bb08 <__swhatbuf_r+0x2c>
 800baee:	89a3      	ldrh	r3, [r4, #12]
 800baf0:	2100      	movs	r1, #0
 800baf2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800baf6:	bf14      	ite	ne
 800baf8:	2340      	movne	r3, #64	@ 0x40
 800bafa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bafe:	2000      	movs	r0, #0
 800bb00:	6031      	str	r1, [r6, #0]
 800bb02:	602b      	str	r3, [r5, #0]
 800bb04:	b016      	add	sp, #88	@ 0x58
 800bb06:	bd70      	pop	{r4, r5, r6, pc}
 800bb08:	466a      	mov	r2, sp
 800bb0a:	f000 f849 	bl	800bba0 <_fstat_r>
 800bb0e:	2800      	cmp	r0, #0
 800bb10:	dbed      	blt.n	800baee <__swhatbuf_r+0x12>
 800bb12:	9901      	ldr	r1, [sp, #4]
 800bb14:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bb18:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bb1c:	4259      	negs	r1, r3
 800bb1e:	4159      	adcs	r1, r3
 800bb20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bb24:	e7eb      	b.n	800bafe <__swhatbuf_r+0x22>

0800bb26 <__smakebuf_r>:
 800bb26:	898b      	ldrh	r3, [r1, #12]
 800bb28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb2a:	079d      	lsls	r5, r3, #30
 800bb2c:	4606      	mov	r6, r0
 800bb2e:	460c      	mov	r4, r1
 800bb30:	d507      	bpl.n	800bb42 <__smakebuf_r+0x1c>
 800bb32:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bb36:	6023      	str	r3, [r4, #0]
 800bb38:	6123      	str	r3, [r4, #16]
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	6163      	str	r3, [r4, #20]
 800bb3e:	b003      	add	sp, #12
 800bb40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb42:	ab01      	add	r3, sp, #4
 800bb44:	466a      	mov	r2, sp
 800bb46:	f7ff ffc9 	bl	800badc <__swhatbuf_r>
 800bb4a:	9f00      	ldr	r7, [sp, #0]
 800bb4c:	4605      	mov	r5, r0
 800bb4e:	4630      	mov	r0, r6
 800bb50:	4639      	mov	r1, r7
 800bb52:	f7ff fbb7 	bl	800b2c4 <_malloc_r>
 800bb56:	b948      	cbnz	r0, 800bb6c <__smakebuf_r+0x46>
 800bb58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb5c:	059a      	lsls	r2, r3, #22
 800bb5e:	d4ee      	bmi.n	800bb3e <__smakebuf_r+0x18>
 800bb60:	f023 0303 	bic.w	r3, r3, #3
 800bb64:	f043 0302 	orr.w	r3, r3, #2
 800bb68:	81a3      	strh	r3, [r4, #12]
 800bb6a:	e7e2      	b.n	800bb32 <__smakebuf_r+0xc>
 800bb6c:	89a3      	ldrh	r3, [r4, #12]
 800bb6e:	6020      	str	r0, [r4, #0]
 800bb70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb74:	81a3      	strh	r3, [r4, #12]
 800bb76:	9b01      	ldr	r3, [sp, #4]
 800bb78:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bb7c:	b15b      	cbz	r3, 800bb96 <__smakebuf_r+0x70>
 800bb7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb82:	4630      	mov	r0, r6
 800bb84:	f000 f81e 	bl	800bbc4 <_isatty_r>
 800bb88:	b128      	cbz	r0, 800bb96 <__smakebuf_r+0x70>
 800bb8a:	89a3      	ldrh	r3, [r4, #12]
 800bb8c:	f023 0303 	bic.w	r3, r3, #3
 800bb90:	f043 0301 	orr.w	r3, r3, #1
 800bb94:	81a3      	strh	r3, [r4, #12]
 800bb96:	89a3      	ldrh	r3, [r4, #12]
 800bb98:	431d      	orrs	r5, r3
 800bb9a:	81a5      	strh	r5, [r4, #12]
 800bb9c:	e7cf      	b.n	800bb3e <__smakebuf_r+0x18>
	...

0800bba0 <_fstat_r>:
 800bba0:	b538      	push	{r3, r4, r5, lr}
 800bba2:	2300      	movs	r3, #0
 800bba4:	4d06      	ldr	r5, [pc, #24]	@ (800bbc0 <_fstat_r+0x20>)
 800bba6:	4604      	mov	r4, r0
 800bba8:	4608      	mov	r0, r1
 800bbaa:	4611      	mov	r1, r2
 800bbac:	602b      	str	r3, [r5, #0]
 800bbae:	f7f6 f9a2 	bl	8001ef6 <_fstat>
 800bbb2:	1c43      	adds	r3, r0, #1
 800bbb4:	d102      	bne.n	800bbbc <_fstat_r+0x1c>
 800bbb6:	682b      	ldr	r3, [r5, #0]
 800bbb8:	b103      	cbz	r3, 800bbbc <_fstat_r+0x1c>
 800bbba:	6023      	str	r3, [r4, #0]
 800bbbc:	bd38      	pop	{r3, r4, r5, pc}
 800bbbe:	bf00      	nop
 800bbc0:	200005a4 	.word	0x200005a4

0800bbc4 <_isatty_r>:
 800bbc4:	b538      	push	{r3, r4, r5, lr}
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	4d05      	ldr	r5, [pc, #20]	@ (800bbe0 <_isatty_r+0x1c>)
 800bbca:	4604      	mov	r4, r0
 800bbcc:	4608      	mov	r0, r1
 800bbce:	602b      	str	r3, [r5, #0]
 800bbd0:	f7f6 f9a1 	bl	8001f16 <_isatty>
 800bbd4:	1c43      	adds	r3, r0, #1
 800bbd6:	d102      	bne.n	800bbde <_isatty_r+0x1a>
 800bbd8:	682b      	ldr	r3, [r5, #0]
 800bbda:	b103      	cbz	r3, 800bbde <_isatty_r+0x1a>
 800bbdc:	6023      	str	r3, [r4, #0]
 800bbde:	bd38      	pop	{r3, r4, r5, pc}
 800bbe0:	200005a4 	.word	0x200005a4

0800bbe4 <_sbrk_r>:
 800bbe4:	b538      	push	{r3, r4, r5, lr}
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	4d05      	ldr	r5, [pc, #20]	@ (800bc00 <_sbrk_r+0x1c>)
 800bbea:	4604      	mov	r4, r0
 800bbec:	4608      	mov	r0, r1
 800bbee:	602b      	str	r3, [r5, #0]
 800bbf0:	f7f6 f9aa 	bl	8001f48 <_sbrk>
 800bbf4:	1c43      	adds	r3, r0, #1
 800bbf6:	d102      	bne.n	800bbfe <_sbrk_r+0x1a>
 800bbf8:	682b      	ldr	r3, [r5, #0]
 800bbfa:	b103      	cbz	r3, 800bbfe <_sbrk_r+0x1a>
 800bbfc:	6023      	str	r3, [r4, #0]
 800bbfe:	bd38      	pop	{r3, r4, r5, pc}
 800bc00:	200005a4 	.word	0x200005a4

0800bc04 <memchr>:
 800bc04:	b2c9      	uxtb	r1, r1
 800bc06:	4603      	mov	r3, r0
 800bc08:	4402      	add	r2, r0
 800bc0a:	b510      	push	{r4, lr}
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	4618      	mov	r0, r3
 800bc10:	d101      	bne.n	800bc16 <memchr+0x12>
 800bc12:	2000      	movs	r0, #0
 800bc14:	e003      	b.n	800bc1e <memchr+0x1a>
 800bc16:	7804      	ldrb	r4, [r0, #0]
 800bc18:	3301      	adds	r3, #1
 800bc1a:	428c      	cmp	r4, r1
 800bc1c:	d1f6      	bne.n	800bc0c <memchr+0x8>
 800bc1e:	bd10      	pop	{r4, pc}

0800bc20 <_init>:
 800bc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc22:	bf00      	nop
 800bc24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc26:	bc08      	pop	{r3}
 800bc28:	469e      	mov	lr, r3
 800bc2a:	4770      	bx	lr

0800bc2c <_fini>:
 800bc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc2e:	bf00      	nop
 800bc30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc32:	bc08      	pop	{r3}
 800bc34:	469e      	mov	lr, r3
 800bc36:	4770      	bx	lr
