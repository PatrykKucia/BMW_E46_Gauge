
STM32H523CE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad74  08000254  08000254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  0800afc8  0800afc8  0000bfc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3e8  0800b3e8  0000d070  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3e8  0800b3e8  0000c3e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3f0  0800b3f0  0000d070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3f0  0800b3f0  0000c3f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b3f4  0800b3f4  0000c3f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800b3f8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  20000070  0800b468  0000d070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  0800b468  0000d4a8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000d070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aee1  00000000  00000000  0000d0a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c86  00000000  00000000  00027f87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d8  00000000  00000000  0002ac10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011e5  00000000  00000000  0002c2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cd05  00000000  00000000  0002d4cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c3dc  00000000  00000000  0005a1d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011fad3  00000000  00000000  000765ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00196081  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b9c  00000000  00000000  001960c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0019cc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000254 <__do_global_dtors_aux>:
 8000254:	b510      	push	{r4, lr}
 8000256:	4c05      	ldr	r4, [pc, #20]	@ (800026c <__do_global_dtors_aux+0x18>)
 8000258:	7823      	ldrb	r3, [r4, #0]
 800025a:	b933      	cbnz	r3, 800026a <__do_global_dtors_aux+0x16>
 800025c:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x1c>)
 800025e:	b113      	cbz	r3, 8000266 <__do_global_dtors_aux+0x12>
 8000260:	4804      	ldr	r0, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x20>)
 8000262:	f3af 8000 	nop.w
 8000266:	2301      	movs	r3, #1
 8000268:	7023      	strb	r3, [r4, #0]
 800026a:	bd10      	pop	{r4, pc}
 800026c:	20000070 	.word	0x20000070
 8000270:	00000000 	.word	0x00000000
 8000274:	0800afb0 	.word	0x0800afb0

08000278 <frame_dummy>:
 8000278:	b508      	push	{r3, lr}
 800027a:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <frame_dummy+0x10>)
 800027c:	b11b      	cbz	r3, 8000286 <frame_dummy+0xe>
 800027e:	4903      	ldr	r1, [pc, #12]	@ (800028c <frame_dummy+0x14>)
 8000280:	4803      	ldr	r0, [pc, #12]	@ (8000290 <frame_dummy+0x18>)
 8000282:	f3af 8000 	nop.w
 8000286:	bd08      	pop	{r3, pc}
 8000288:	00000000 	.word	0x00000000
 800028c:	20000074 	.word	0x20000074
 8000290:	0800afb0 	.word	0x0800afb0

08000294 <__aeabi_uldivmod>:
 8000294:	b953      	cbnz	r3, 80002ac <__aeabi_uldivmod+0x18>
 8000296:	b94a      	cbnz	r2, 80002ac <__aeabi_uldivmod+0x18>
 8000298:	2900      	cmp	r1, #0
 800029a:	bf08      	it	eq
 800029c:	2800      	cmpeq	r0, #0
 800029e:	bf1c      	itt	ne
 80002a0:	f04f 31ff 	movne.w	r1, #4294967295
 80002a4:	f04f 30ff 	movne.w	r0, #4294967295
 80002a8:	f000 b97e 	b.w	80005a8 <__aeabi_idiv0>
 80002ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b4:	f000 f806 	bl	80002c4 <__udivmoddi4>
 80002b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c0:	b004      	add	sp, #16
 80002c2:	4770      	bx	lr

080002c4 <__udivmoddi4>:
 80002c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ca:	460c      	mov	r4, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14d      	bne.n	800036c <__udivmoddi4+0xa8>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	460f      	mov	r7, r1
 80002d4:	4684      	mov	ip, r0
 80002d6:	4696      	mov	lr, r2
 80002d8:	fab2 f382 	clz	r3, r2
 80002dc:	d960      	bls.n	80003a0 <__udivmoddi4+0xdc>
 80002de:	b14b      	cbz	r3, 80002f4 <__udivmoddi4+0x30>
 80002e0:	fa02 fe03 	lsl.w	lr, r2, r3
 80002e4:	f1c3 0220 	rsb	r2, r3, #32
 80002e8:	409f      	lsls	r7, r3
 80002ea:	fa00 fc03 	lsl.w	ip, r0, r3
 80002ee:	fa20 f202 	lsr.w	r2, r0, r2
 80002f2:	4317      	orrs	r7, r2
 80002f4:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f8:	fa1f f48e 	uxth.w	r4, lr
 80002fc:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000300:	fbb7 f1f6 	udiv	r1, r7, r6
 8000304:	fb06 7711 	mls	r7, r6, r1, r7
 8000308:	fb01 f004 	mul.w	r0, r1, r4
 800030c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000310:	4290      	cmp	r0, r2
 8000312:	d908      	bls.n	8000326 <__udivmoddi4+0x62>
 8000314:	eb1e 0202 	adds.w	r2, lr, r2
 8000318:	f101 37ff 	add.w	r7, r1, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x60>
 800031e:	4290      	cmp	r0, r2
 8000320:	f200 812d 	bhi.w	800057e <__udivmoddi4+0x2ba>
 8000324:	4639      	mov	r1, r7
 8000326:	1a12      	subs	r2, r2, r0
 8000328:	fa1f fc8c 	uxth.w	ip, ip
 800032c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000330:	fb06 2210 	mls	r2, r6, r0, r2
 8000334:	fb00 f404 	mul.w	r4, r0, r4
 8000338:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800033c:	4564      	cmp	r4, ip
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x8e>
 8000340:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x8c>
 800034a:	4564      	cmp	r4, ip
 800034c:	f200 811a 	bhi.w	8000584 <__udivmoddi4+0x2c0>
 8000350:	4610      	mov	r0, r2
 8000352:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000356:	ebac 0c04 	sub.w	ip, ip, r4
 800035a:	2100      	movs	r1, #0
 800035c:	b125      	cbz	r5, 8000368 <__udivmoddi4+0xa4>
 800035e:	fa2c f303 	lsr.w	r3, ip, r3
 8000362:	2200      	movs	r2, #0
 8000364:	e9c5 3200 	strd	r3, r2, [r5]
 8000368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800036c:	428b      	cmp	r3, r1
 800036e:	d905      	bls.n	800037c <__udivmoddi4+0xb8>
 8000370:	b10d      	cbz	r5, 8000376 <__udivmoddi4+0xb2>
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	2100      	movs	r1, #0
 8000378:	4608      	mov	r0, r1
 800037a:	e7f5      	b.n	8000368 <__udivmoddi4+0xa4>
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d14d      	bne.n	8000420 <__udivmoddi4+0x15c>
 8000384:	42a3      	cmp	r3, r4
 8000386:	f0c0 80f2 	bcc.w	800056e <__udivmoddi4+0x2aa>
 800038a:	4290      	cmp	r0, r2
 800038c:	f080 80ef 	bcs.w	800056e <__udivmoddi4+0x2aa>
 8000390:	4606      	mov	r6, r0
 8000392:	4623      	mov	r3, r4
 8000394:	4608      	mov	r0, r1
 8000396:	2d00      	cmp	r5, #0
 8000398:	d0e6      	beq.n	8000368 <__udivmoddi4+0xa4>
 800039a:	e9c5 6300 	strd	r6, r3, [r5]
 800039e:	e7e3      	b.n	8000368 <__udivmoddi4+0xa4>
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	f040 80a2 	bne.w	80004ea <__udivmoddi4+0x226>
 80003a6:	1a8a      	subs	r2, r1, r2
 80003a8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003ac:	fa1f f68e 	uxth.w	r6, lr
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb2 f4f7 	udiv	r4, r2, r7
 80003b6:	fb07 2014 	mls	r0, r7, r4, r2
 80003ba:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003be:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003c2:	fb06 f004 	mul.w	r0, r6, r4
 80003c6:	4290      	cmp	r0, r2
 80003c8:	d90f      	bls.n	80003ea <__udivmoddi4+0x126>
 80003ca:	eb1e 0202 	adds.w	r2, lr, r2
 80003ce:	f104 38ff 	add.w	r8, r4, #4294967295
 80003d2:	bf2c      	ite	cs
 80003d4:	f04f 0901 	movcs.w	r9, #1
 80003d8:	f04f 0900 	movcc.w	r9, #0
 80003dc:	4290      	cmp	r0, r2
 80003de:	d903      	bls.n	80003e8 <__udivmoddi4+0x124>
 80003e0:	f1b9 0f00 	cmp.w	r9, #0
 80003e4:	f000 80c8 	beq.w	8000578 <__udivmoddi4+0x2b4>
 80003e8:	4644      	mov	r4, r8
 80003ea:	1a12      	subs	r2, r2, r0
 80003ec:	fa1f fc8c 	uxth.w	ip, ip
 80003f0:	fbb2 f0f7 	udiv	r0, r2, r7
 80003f4:	fb07 2210 	mls	r2, r7, r0, r2
 80003f8:	fb00 f606 	mul.w	r6, r0, r6
 80003fc:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000400:	4566      	cmp	r6, ip
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x152>
 8000404:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000408:	f100 32ff 	add.w	r2, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x150>
 800040e:	4566      	cmp	r6, ip
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2c6>
 8000414:	4610      	mov	r0, r2
 8000416:	ebac 0c06 	sub.w	ip, ip, r6
 800041a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800041e:	e79d      	b.n	800035c <__udivmoddi4+0x98>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa04 fe01 	lsl.w	lr, r4, r1
 800042a:	fa22 f706 	lsr.w	r7, r2, r6
 800042e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000432:	40f4      	lsrs	r4, r6
 8000434:	408a      	lsls	r2, r1
 8000436:	431f      	orrs	r7, r3
 8000438:	ea4e 030c 	orr.w	r3, lr, ip
 800043c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000440:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000444:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fbb4 f0f8 	udiv	r0, r4, r8
 8000450:	fb08 4410 	mls	r4, r8, r0, r4
 8000454:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000458:	fb00 f90c 	mul.w	r9, r0, ip
 800045c:	45a1      	cmp	r9, r4
 800045e:	d90e      	bls.n	800047e <__udivmoddi4+0x1ba>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f100 3aff 	add.w	sl, r0, #4294967295
 8000466:	bf2c      	ite	cs
 8000468:	f04f 0b01 	movcs.w	fp, #1
 800046c:	f04f 0b00 	movcc.w	fp, #0
 8000470:	45a1      	cmp	r9, r4
 8000472:	d903      	bls.n	800047c <__udivmoddi4+0x1b8>
 8000474:	f1bb 0f00 	cmp.w	fp, #0
 8000478:	f000 8093 	beq.w	80005a2 <__udivmoddi4+0x2de>
 800047c:	4650      	mov	r0, sl
 800047e:	eba4 0409 	sub.w	r4, r4, r9
 8000482:	fa1f f983 	uxth.w	r9, r3
 8000486:	fbb4 f3f8 	udiv	r3, r4, r8
 800048a:	fb08 4413 	mls	r4, r8, r3, r4
 800048e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000492:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000496:	45a4      	cmp	ip, r4
 8000498:	d906      	bls.n	80004a8 <__udivmoddi4+0x1e4>
 800049a:	193c      	adds	r4, r7, r4
 800049c:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a0:	d201      	bcs.n	80004a6 <__udivmoddi4+0x1e2>
 80004a2:	45a4      	cmp	ip, r4
 80004a4:	d87a      	bhi.n	800059c <__udivmoddi4+0x2d8>
 80004a6:	4643      	mov	r3, r8
 80004a8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004ac:	eba4 040c 	sub.w	r4, r4, ip
 80004b0:	fba0 9802 	umull	r9, r8, r0, r2
 80004b4:	4544      	cmp	r4, r8
 80004b6:	46cc      	mov	ip, r9
 80004b8:	4643      	mov	r3, r8
 80004ba:	d302      	bcc.n	80004c2 <__udivmoddi4+0x1fe>
 80004bc:	d106      	bne.n	80004cc <__udivmoddi4+0x208>
 80004be:	45ce      	cmp	lr, r9
 80004c0:	d204      	bcs.n	80004cc <__udivmoddi4+0x208>
 80004c2:	3801      	subs	r0, #1
 80004c4:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c8:	eb68 0307 	sbc.w	r3, r8, r7
 80004cc:	b15d      	cbz	r5, 80004e6 <__udivmoddi4+0x222>
 80004ce:	ebbe 020c 	subs.w	r2, lr, ip
 80004d2:	eb64 0403 	sbc.w	r4, r4, r3
 80004d6:	fa04 f606 	lsl.w	r6, r4, r6
 80004da:	fa22 f301 	lsr.w	r3, r2, r1
 80004de:	40cc      	lsrs	r4, r1
 80004e0:	431e      	orrs	r6, r3
 80004e2:	e9c5 6400 	strd	r6, r4, [r5]
 80004e6:	2100      	movs	r1, #0
 80004e8:	e73e      	b.n	8000368 <__udivmoddi4+0xa4>
 80004ea:	fa02 fe03 	lsl.w	lr, r2, r3
 80004ee:	f1c3 0120 	rsb	r1, r3, #32
 80004f2:	fa04 f203 	lsl.w	r2, r4, r3
 80004f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000500:	fa20 f101 	lsr.w	r1, r0, r1
 8000504:	fa1f f68e 	uxth.w	r6, lr
 8000508:	fbb4 f0f7 	udiv	r0, r4, r7
 800050c:	430a      	orrs	r2, r1
 800050e:	fb07 4410 	mls	r4, r7, r0, r4
 8000512:	0c11      	lsrs	r1, r2, #16
 8000514:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000518:	fb00 f406 	mul.w	r4, r0, r6
 800051c:	428c      	cmp	r4, r1
 800051e:	d90e      	bls.n	800053e <__udivmoddi4+0x27a>
 8000520:	eb1e 0101 	adds.w	r1, lr, r1
 8000524:	f100 38ff 	add.w	r8, r0, #4294967295
 8000528:	bf2c      	ite	cs
 800052a:	f04f 0901 	movcs.w	r9, #1
 800052e:	f04f 0900 	movcc.w	r9, #0
 8000532:	428c      	cmp	r4, r1
 8000534:	d902      	bls.n	800053c <__udivmoddi4+0x278>
 8000536:	f1b9 0f00 	cmp.w	r9, #0
 800053a:	d02c      	beq.n	8000596 <__udivmoddi4+0x2d2>
 800053c:	4640      	mov	r0, r8
 800053e:	1b09      	subs	r1, r1, r4
 8000540:	b292      	uxth	r2, r2
 8000542:	fbb1 f4f7 	udiv	r4, r1, r7
 8000546:	fb07 1114 	mls	r1, r7, r4, r1
 800054a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054e:	fb04 f106 	mul.w	r1, r4, r6
 8000552:	4291      	cmp	r1, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x2a2>
 8000556:	eb1e 0202 	adds.w	r2, lr, r2
 800055a:	f104 38ff 	add.w	r8, r4, #4294967295
 800055e:	d201      	bcs.n	8000564 <__udivmoddi4+0x2a0>
 8000560:	4291      	cmp	r1, r2
 8000562:	d815      	bhi.n	8000590 <__udivmoddi4+0x2cc>
 8000564:	4644      	mov	r4, r8
 8000566:	1a52      	subs	r2, r2, r1
 8000568:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800056c:	e721      	b.n	80003b2 <__udivmoddi4+0xee>
 800056e:	1a86      	subs	r6, r0, r2
 8000570:	eb64 0303 	sbc.w	r3, r4, r3
 8000574:	2001      	movs	r0, #1
 8000576:	e70e      	b.n	8000396 <__udivmoddi4+0xd2>
 8000578:	3c02      	subs	r4, #2
 800057a:	4472      	add	r2, lr
 800057c:	e735      	b.n	80003ea <__udivmoddi4+0x126>
 800057e:	3902      	subs	r1, #2
 8000580:	4472      	add	r2, lr
 8000582:	e6d0      	b.n	8000326 <__udivmoddi4+0x62>
 8000584:	44f4      	add	ip, lr
 8000586:	3802      	subs	r0, #2
 8000588:	e6e3      	b.n	8000352 <__udivmoddi4+0x8e>
 800058a:	44f4      	add	ip, lr
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x152>
 8000590:	3c02      	subs	r4, #2
 8000592:	4472      	add	r2, lr
 8000594:	e7e7      	b.n	8000566 <__udivmoddi4+0x2a2>
 8000596:	3802      	subs	r0, #2
 8000598:	4471      	add	r1, lr
 800059a:	e7d0      	b.n	800053e <__udivmoddi4+0x27a>
 800059c:	3b02      	subs	r3, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e782      	b.n	80004a8 <__udivmoddi4+0x1e4>
 80005a2:	3802      	subs	r0, #2
 80005a4:	443c      	add	r4, r7
 80005a6:	e76a      	b.n	800047e <__udivmoddi4+0x1ba>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) //function used to print() in usart
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2b0a      	cmp	r3, #10
 80005b8:	d102      	bne.n	80005c0 <__io_putchar+0x14>
    __io_putchar('\r');
 80005ba:	200d      	movs	r0, #13
 80005bc:	f7ff fff6 	bl	80005ac <__io_putchar>
  }

  HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80005c0:	1d39      	adds	r1, r7, #4
 80005c2:	f04f 33ff 	mov.w	r3, #4294967295
 80005c6:	2201      	movs	r2, #1
 80005c8:	4803      	ldr	r0, [pc, #12]	@ (80005d8 <__io_putchar+0x2c>)
 80005ca:	f008 ff0b 	bl	80093e4 <HAL_UART_Transmit>

  return 1;
 80005ce:	2301      	movs	r3, #1
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	200001dc 	.word	0x200001dc

080005dc <Set_PWM_Frequency>:

    // Przemiana liniowa prędkości na częstotliwość PWM
    uint32_t freq = MIN_FREQ + (uint32_t)((float)(speed - MIN_SPEED) / (MAX_SPEED - MIN_SPEED) * (MAX_FREQ - MIN_FREQ));
    return freq;
}
void Set_PWM_Frequency(uint16_t speed_kmh) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af02      	add	r7, sp, #8
 80005e2:	4603      	mov	r3, r0
 80005e4:	80fb      	strh	r3, [r7, #6]
    // Poprawiona interpolacja częstotliwości
    uint32_t freq = 100 + ((1700 - 100) * speed_kmh) / 250;
 80005e6:	88fb      	ldrh	r3, [r7, #6]
 80005e8:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80005ec:	fb02 f303 	mul.w	r3, r2, r3
 80005f0:	4a27      	ldr	r2, [pc, #156]	@ (8000690 <Set_PWM_Frequency+0xb4>)
 80005f2:	fb82 1203 	smull	r1, r2, r2, r3
 80005f6:	1112      	asrs	r2, r2, #4
 80005f8:	17db      	asrs	r3, r3, #31
 80005fa:	1ad3      	subs	r3, r2, r3
 80005fc:	3364      	adds	r3, #100	@ 0x64
 80005fe:	60fb      	str	r3, [r7, #12]

    uint32_t arr_value, psc_value;

    if (freq < 3800) {
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f640 62d7 	movw	r2, #3799	@ 0xed7
 8000606:	4293      	cmp	r3, r2
 8000608:	d817      	bhi.n	800063a <Set_PWM_Frequency+0x5e>
        psc_value = (250000000 / (65536 * freq));
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	041b      	lsls	r3, r3, #16
 800060e:	4a21      	ldr	r2, [pc, #132]	@ (8000694 <Set_PWM_Frequency+0xb8>)
 8000610:	fbb2 f3f3 	udiv	r3, r2, r3
 8000614:	613b      	str	r3, [r7, #16]
        if (psc_value > 65535) psc_value = 65535;  // PSC nie może przekroczyć 16 bitów
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800061c:	d302      	bcc.n	8000624 <Set_PWM_Frequency+0x48>
 800061e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000622:	613b      	str	r3, [r7, #16]
        arr_value = (250000000 / ((psc_value + 1) * freq)) - 1;
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	3301      	adds	r3, #1
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	fb02 f303 	mul.w	r3, r2, r3
 800062e:	4a19      	ldr	r2, [pc, #100]	@ (8000694 <Set_PWM_Frequency+0xb8>)
 8000630:	fbb2 f3f3 	udiv	r3, r2, r3
 8000634:	3b01      	subs	r3, #1
 8000636:	617b      	str	r3, [r7, #20]
 8000638:	e007      	b.n	800064a <Set_PWM_Frequency+0x6e>
    } else {
        psc_value = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
        arr_value = (250000000 / freq) - 1;
 800063e:	4a15      	ldr	r2, [pc, #84]	@ (8000694 <Set_PWM_Frequency+0xb8>)
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	fbb2 f3f3 	udiv	r3, r2, r3
 8000646:	3b01      	subs	r3, #1
 8000648:	617b      	str	r3, [r7, #20]
    }

    if (arr_value > 65535) arr_value = 65535;  // Ograniczenie ARR do 16 bitów
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000650:	d302      	bcc.n	8000658 <Set_PWM_Frequency+0x7c>
 8000652:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000656:	617b      	str	r3, [r7, #20]
    printf("Speed: %d km/h, Freq: %lu Hz, PSC: %lu, ARR: %lu\n", speed_kmh, freq, psc_value, arr_value);
 8000658:	88f9      	ldrh	r1, [r7, #6]
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	693b      	ldr	r3, [r7, #16]
 8000660:	68fa      	ldr	r2, [r7, #12]
 8000662:	480d      	ldr	r0, [pc, #52]	@ (8000698 <Set_PWM_Frequency+0xbc>)
 8000664:	f009 fdc6 	bl	800a1f4 <iprintf>

    __HAL_TIM_SET_PRESCALER(&htim1, psc_value);
 8000668:	4b0c      	ldr	r3, [pc, #48]	@ (800069c <Set_PWM_Frequency+0xc0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	693a      	ldr	r2, [r7, #16]
 800066e:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_TIM_SET_AUTORELOAD(&htim1, arr_value);
 8000670:	4b0a      	ldr	r3, [pc, #40]	@ (800069c <Set_PWM_Frequency+0xc0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	697a      	ldr	r2, [r7, #20]
 8000676:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000678:	4a08      	ldr	r2, [pc, #32]	@ (800069c <Set_PWM_Frequency+0xc0>)
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 800067e:	4b07      	ldr	r3, [pc, #28]	@ (800069c <Set_PWM_Frequency+0xc0>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2200      	movs	r2, #0
 8000684:	625a      	str	r2, [r3, #36]	@ 0x24

    // W niektórych przypadkach wymagane jest wygenerowanie zdarzenia aktualizacji
    //__HAL_TIM_GENERATE_EVENT(&htim1, TIM_EVENTSOURCE_UPDATE);
}
 8000686:	bf00      	nop
 8000688:	3718      	adds	r7, #24
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	10624dd3 	.word	0x10624dd3
 8000694:	0ee6b280 	.word	0x0ee6b280
 8000698:	0800afc8 	.word	0x0800afc8
 800069c:	20000144 	.word	0x20000144

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b5b0      	push	{r4, r5, r7, lr}
 80006a2:	b0c0      	sub	sp, #256	@ 0x100
 80006a4:	af00      	add	r7, sp, #0
int main(void)
 80006a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80006aa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ae:	f001 fa39 	bl	8001b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b2:	f000 f98f 	bl	80009d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b6:	f000 fc4b 	bl	8000f50 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80006ba:	f000 f9fd 	bl	8000ab8 <MX_FDCAN1_Init>
  MX_I2C1_Init();
 80006be:	f000 fa41 	bl	8000b44 <MX_I2C1_Init>
  MX_TIM1_Init();
 80006c2:	f000 fa93 	bl	8000bec <MX_TIM1_Init>
  MX_TIM2_Init();
 80006c6:	f000 fb4f 	bl	8000d68 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80006ca:	f000 fba7 	bl	8000e1c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80006ce:	f000 fbf1 	bl	8000eb4 <MX_USART2_UART_Init>
  MX_ICACHE_Init();
 80006d2:	f000 fa77 	bl	8000bc4 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80006d6:	2100      	movs	r1, #0
 80006d8:	48a5      	ldr	r0, [pc, #660]	@ (8000970 <main+0x2d0>)
 80006da:	f007 f8c9 	bl	8007870 <HAL_TIM_OC_Start_IT>

  //TIM1->CCR1 = 50;
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80006de:	2104      	movs	r1, #4
 80006e0:	48a3      	ldr	r0, [pc, #652]	@ (8000970 <main+0x2d0>)
 80006e2:	f007 faaf 	bl	8007c44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006e6:	2100      	movs	r1, #0
 80006e8:	48a1      	ldr	r0, [pc, #644]	@ (8000970 <main+0x2d0>)
 80006ea:	f007 faab 	bl	8007c44 <HAL_TIM_PWM_Start>

  // Konfiguracja wiadomości



	 TxData_DME1[0] = 0x19 ;                     // LV_SWI_IGK=1, LV_F_N_ENG=0, LV_ACK_TCS=0, LV_ERR_GC=1, SF_TQD=1
 80006ee:	4ba1      	ldr	r3, [pc, #644]	@ (8000974 <main+0x2d4>)
 80006f0:	2219      	movs	r2, #25
 80006f2:	701a      	strb	r2, [r3, #0]
	 TxData_DME1[1] = 0x4C;      // TQI_TQR_CAN = 75%
 80006f4:	4b9f      	ldr	r3, [pc, #636]	@ (8000974 <main+0x2d4>)
 80006f6:	224c      	movs	r2, #76	@ 0x4c
 80006f8:	705a      	strb	r2, [r3, #1]
	 uint16_t engineSpeed = (uint16_t)(3000 / 0.15625);
 80006fa:	f44f 4396 	mov.w	r3, #19200	@ 0x4b00
 80006fe:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
	 TxData_DME1[2] = 0xD0; // N_ENG LSB
 8000702:	4b9c      	ldr	r3, [pc, #624]	@ (8000974 <main+0x2d4>)
 8000704:	22d0      	movs	r2, #208	@ 0xd0
 8000706:	709a      	strb	r2, [r3, #2]
	 TxData_DME1[3] = (uint8_t)(engineSpeed >> 8);   // N_ENG MSB
 8000708:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	@ 0xfa
 800070c:	0a1b      	lsrs	r3, r3, #8
 800070e:	b29b      	uxth	r3, r3
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b98      	ldr	r3, [pc, #608]	@ (8000974 <main+0x2d4>)
 8000714:	70da      	strb	r2, [r3, #3]
	 TxData_DME1[4] = (uint8_t)(60 / 0.390625);      // TQI_CAN = 60%
 8000716:	4b97      	ldr	r3, [pc, #604]	@ (8000974 <main+0x2d4>)
 8000718:	2299      	movs	r2, #153	@ 0x99
 800071a:	711a      	strb	r2, [r3, #4]
	 TxData_DME1[5] = (uint8_t)(5 / 0.390625);       // TQ_LOSS_CAN = 5%
 800071c:	4b95      	ldr	r3, [pc, #596]	@ (8000974 <main+0x2d4>)
 800071e:	220c      	movs	r2, #12
 8000720:	715a      	strb	r2, [r3, #5]
	 TxData_DME1[6] = 0b11000000;                   // ERR_AMT_CAN bits
 8000722:	4b94      	ldr	r3, [pc, #592]	@ (8000974 <main+0x2d4>)
 8000724:	22c0      	movs	r2, #192	@ 0xc0
 8000726:	719a      	strb	r2, [r3, #6]
	 TxData_DME1[7] = (uint8_t)(80 / 0.390625);      // TQI_MAF_CAN = 80%
 8000728:	4b92      	ldr	r3, [pc, #584]	@ (8000974 <main+0x2d4>)
 800072a:	22cc      	movs	r2, #204	@ 0xcc
 800072c:	71da      	strb	r2, [r3, #7]

  TxHeader_DME1.Identifier = 0x316;  // ID ramki
 800072e:	4b92      	ldr	r3, [pc, #584]	@ (8000978 <main+0x2d8>)
 8000730:	f240 3216 	movw	r2, #790	@ 0x316
 8000734:	601a      	str	r2, [r3, #0]
  TxHeader_DME1.IdType = FDCAN_STANDARD_ID;
 8000736:	4b90      	ldr	r3, [pc, #576]	@ (8000978 <main+0x2d8>)
 8000738:	2200      	movs	r2, #0
 800073a:	605a      	str	r2, [r3, #4]
  TxHeader_DME1.TxFrameType = FDCAN_DATA_FRAME;
 800073c:	4b8e      	ldr	r3, [pc, #568]	@ (8000978 <main+0x2d8>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  TxHeader_DME1.DataLength = FDCAN_DLC_BYTES_8;
 8000742:	4b8d      	ldr	r3, [pc, #564]	@ (8000978 <main+0x2d8>)
 8000744:	2208      	movs	r2, #8
 8000746:	60da      	str	r2, [r3, #12]
  TxHeader_DME1.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000748:	4b8b      	ldr	r3, [pc, #556]	@ (8000978 <main+0x2d8>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  TxHeader_DME1.BitRateSwitch = FDCAN_BRS_OFF;
 800074e:	4b8a      	ldr	r3, [pc, #552]	@ (8000978 <main+0x2d8>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  TxHeader_DME1.FDFormat = FDCAN_CLASSIC_CAN;
 8000754:	4b88      	ldr	r3, [pc, #544]	@ (8000978 <main+0x2d8>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  TxHeader_DME1.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800075a:	4b87      	ldr	r3, [pc, #540]	@ (8000978 <main+0x2d8>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]



  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterIndex = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8000766:	2300      	movs	r3, #0
 8000768:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800076c:	2301      	movs	r3, #1
 800076e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  sFilterConfig.FilterID1 = 0x316;
 8000772:	f240 3316 	movw	r3, #790	@ 0x316
 8000776:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  sFilterConfig.FilterID2 = 0x1FFFFFFF;
 800077a:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 800077e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000782:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000786:	4619      	mov	r1, r3
 8000788:	487c      	ldr	r0, [pc, #496]	@ (800097c <main+0x2dc>)
 800078a:	f001 fd97 	bl	80022bc <HAL_FDCAN_ConfigFilter>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d002      	beq.n	800079a <main+0xfa>
      /* Filter configuration Error */
      printf("[CAN] Unable to configure!\n");
 8000794:	487a      	ldr	r0, [pc, #488]	@ (8000980 <main+0x2e0>)
 8000796:	f009 fd95 	bl	800a2c4 <puts>
  }
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 800079a:	4878      	ldr	r0, [pc, #480]	@ (800097c <main+0x2dc>)
 800079c:	f001 fde8 	bl	8002370 <HAL_FDCAN_Start>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <main+0x10a>
  {
   Error_Handler();
 80007a6:	f000 fd8b 	bl	80012c0 <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80007aa:	2200      	movs	r2, #0
 80007ac:	2101      	movs	r1, #1
 80007ae:	4873      	ldr	r0, [pc, #460]	@ (800097c <main+0x2dc>)
 80007b0:	f001 ff82 	bl	80026b8 <HAL_FDCAN_ActivateNotification>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <main+0x11e>
  {
    /* Notification Error */
    Error_Handler();
 80007ba:	f000 fd81 	bl	80012c0 <Error_Handler>
  }
  printf("starting\n");
 80007be:	4871      	ldr	r0, [pc, #452]	@ (8000984 <main+0x2e4>)
 80007c0:	f009 fd80 	bl	800a2c4 <puts>
  HAL_GPIO_TogglePin(D1_GPIO_Port, D1_Pin);
 80007c4:	2110      	movs	r1, #16
 80007c6:	4870      	ldr	r0, [pc, #448]	@ (8000988 <main+0x2e8>)
 80007c8:	f002 fc3e 	bl	8003048 <HAL_GPIO_TogglePin>
  //HAL_GPIO_WritePin(GPIO_PIN_3, GPIOB, GPIO_PIN_RESET);
  uint8_t piecpiec[]     = {0x55};
 80007cc:	2355      	movs	r3, #85	@ 0x55
 80007ce:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc

  uint8_t a[]     = {  0x3f, 0x0b, 0xBF ,0x0c, 0x00, 0x00, 0x00,0x00, 0x00 ,0x00, 0x01, 0x06 };
 80007d2:	4a6e      	ldr	r2, [pc, #440]	@ (800098c <main+0x2ec>)
 80007d4:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80007d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80007da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  uint8_t turnRight[]     = {0xD0, 0x07, 0xBF, 0x5B, 0x43, 0x83, 0x2E, 0x3F, 0xE2, '\n'};
 80007de:	4a6c      	ldr	r2, [pc, #432]	@ (8000990 <main+0x2f0>)
 80007e0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80007e6:	c303      	stmia	r3!, {r0, r1}
 80007e8:	801a      	strh	r2, [r3, #0]
  uint8_t turnLeft[]      = {0xD0, 0x07, 0xBF, 0x5B, 0x23, 0x83, 0x0E, 0x3F, 0xA2};
 80007ea:	4a6a      	ldr	r2, [pc, #424]	@ (8000994 <main+0x2f4>)
 80007ec:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80007f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80007f2:	c303      	stmia	r3!, {r0, r1}
 80007f4:	701a      	strb	r2, [r3, #0]
  uint8_t hazardLights[]  = {0xD0, 0x07, 0xBF, 0x5B, 0x63, 0x83, 0x0E, 0x3F, 0xE2};
 80007f6:	4a68      	ldr	r2, [pc, #416]	@ (8000998 <main+0x2f8>)
 80007f8:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80007fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80007fe:	c303      	stmia	r3!, {r0, r1}
 8000800:	701a      	strb	r2, [r3, #0]
  uint8_t highBeam1[] = {0xd0, 0x07, 0xbf, 0x5b, 0x07, 0x83, 0x0a, 0x3f, 0x82, '\n'};  // Zakończone LF (Line Feed)
 8000802:	4a66      	ldr	r2, [pc, #408]	@ (800099c <main+0x2fc>)
 8000804:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000808:	ca07      	ldmia	r2, {r0, r1, r2}
 800080a:	c303      	stmia	r3!, {r0, r1}
 800080c:	801a      	strh	r2, [r3, #0]
  uint8_t highBeam2[] = {0xd0, 0x07, 0xbf, 0x5b, 0x07, 0x83, 0x0a, 0x3f, 0x82, '\r'};  // Zakończone CR (Carriage Return)
 800080e:	4a64      	ldr	r2, [pc, #400]	@ (80009a0 <main+0x300>)
 8000810:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000814:	ca07      	ldmia	r2, {r0, r1, r2}
 8000816:	c303      	stmia	r3!, {r0, r1}
 8000818:	801a      	strh	r2, [r3, #0]
  uint8_t highBeam3[] = {0xd0, 0x07, 0xbf, 0x5b, 0x07, 0x83, 0x0a, 0x3f, 0x82, '\r', '\n'}; // Zakończone CRLF (Carriage Return + Line Feed)
 800081a:	4a62      	ldr	r2, [pc, #392]	@ (80009a4 <main+0x304>)
 800081c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000820:	ca07      	ldmia	r2, {r0, r1, r2}
 8000822:	c303      	stmia	r3!, {r0, r1}
 8000824:	801a      	strh	r2, [r3, #0]
 8000826:	3302      	adds	r3, #2
 8000828:	0c12      	lsrs	r2, r2, #16
 800082a:	701a      	strb	r2, [r3, #0]
  uint8_t highBeam4[] = {0xd0, 0x07, 0xbf, 0x5b, 0x07, 0x83, 0x0a, 0x3f, 0x82, '\r', '\n'};
 800082c:	4a5d      	ldr	r2, [pc, #372]	@ (80009a4 <main+0x304>)
 800082e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000832:	ca07      	ldmia	r2, {r0, r1, r2}
 8000834:	c303      	stmia	r3!, {r0, r1}
 8000836:	801a      	strh	r2, [r3, #0]
 8000838:	3302      	adds	r3, #2
 800083a:	0c12      	lsrs	r2, r2, #16
 800083c:	701a      	strb	r2, [r3, #0]
  uint8_t testing[] = {0xd0, 0x07, 0xbf, 0x5b, 0x01 , 0xC9 , 0x02 , 0x02 , 0xFB, '\n'}; // Zakończone NULL (znak końca ciągu w stylu C)
 800083e:	4a5a      	ldr	r2, [pc, #360]	@ (80009a8 <main+0x308>)
 8000840:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000844:	ca07      	ldmia	r2, {r0, r1, r2}
 8000846:	c303      	stmia	r3!, {r0, r1}
 8000848:	801a      	strh	r2, [r3, #0]
  uint8_t byte_before_newline = highBeam4[8];  // 0x82
 800084a:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 800084e:	f887 30f9 	strb.w	r3, [r7, #249]	@ 0xf9
  uint8_t new_byte = (byte_before_newline << 1); // Przesuwamy 0x82 w lewo o 1 bit, aby zrobić miejsce na bit LOW
 8000852:	f897 30f9 	ldrb.w	r3, [r7, #249]	@ 0xf9
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	f887 30f8 	strb.w	r3, [r7, #248]	@ 0xf8

  // Wstawiamy nowy bajt do tablicy
  highBeam4[8] = new_byte;  // Zaktualizowana wartość 0x82 -> 0x04
 800085c:	f897 30f8 	ldrb.w	r3, [r7, #248]	@ 0xf8
 8000860:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  uint8_t highBeam5[] = {0xd0, 0x07, 0xbf, 0x5b, 0x07, 0x83, 0x0a, 0x3f, 0x82, 0xFF}; // Zakończone 0xFF (często używane w niektórych protokołach)
 8000864:	4a51      	ldr	r2, [pc, #324]	@ (80009ac <main+0x30c>)
 8000866:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800086a:	ca07      	ldmia	r2, {r0, r1, r2}
 800086c:	c303      	stmia	r3!, {r0, r1}
 800086e:	801a      	strh	r2, [r3, #0]
  uint8_t stopTurning[]   = {0xD0, 0x07, 0xBF, 0x5B, 0x03, 0x83, 0x0A, 0x3F, 0x86};
 8000870:	4a4f      	ldr	r2, [pc, #316]	@ (80009b0 <main+0x310>)
 8000872:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000876:	ca07      	ldmia	r2, {r0, r1, r2}
 8000878:	c303      	stmia	r3!, {r0, r1}
 800087a:	701a      	strb	r2, [r3, #0]
  uint8_t lcdTurnOff[]    = {0x30, 0x19, 0x80, 0x1A, 0x30, 0x00, 0x20, 0x20, 0x20,
 800087c:	4b4d      	ldr	r3, [pc, #308]	@ (80009b4 <main+0x314>)
 800087e:	f107 0410 	add.w	r4, r7, #16
 8000882:	461d      	mov	r5, r3
 8000884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000888:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800088c:	c407      	stmia	r4!, {r0, r1, r2}
 800088e:	8023      	strh	r3, [r4, #0]
 8000890:	3402      	adds	r4, #2
 8000892:	0c1b      	lsrs	r3, r3, #16
 8000894:	7023      	strb	r3, [r4, #0]
                             0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                             0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x83, 0x80, 0x04,
                             0x30, 0x1B, 0x00, 0x8F};

  uint8_t turnRight_noChecksum[] = {0xD0, 0x07, 0xBF, 0x5B, 0x40, 0x40, 0x32, 0x40};
 8000896:	4b48      	ldr	r3, [pc, #288]	@ (80009b8 <main+0x318>)
 8000898:	f107 02de 	add.w	r2, r7, #222	@ 0xde
 800089c:	cb03      	ldmia	r3!, {r0, r1}
 800089e:	6010      	str	r0, [r2, #0]
 80008a0:	6051      	str	r1, [r2, #4]
  uint8_t turnLeft_noChecksum[]  = {0xD0, 0x07, 0xBF, 0x5B, 0x23, 0x83, 0x0E, 0x3F};
 80008a2:	4b46      	ldr	r3, [pc, #280]	@ (80009bc <main+0x31c>)
 80008a4:	f107 02cd 	add.w	r2, r7, #205	@ 0xcd
 80008a8:	cb03      	ldmia	r3!, {r0, r1}
 80008aa:	6010      	str	r0, [r2, #0]
 80008ac:	6051      	str	r1, [r2, #4]

 // HAL_UART_Transmit(&huart2, turnRight, sizeof(turnRight), 500);
  //HAL_UART_Transmit(&huart2, frame, sizeof(frame), HAL_MAX_DELAY);
  //HAL_UART_Transmit(&huart2, frame2, sizeof(frame), HAL_MAX_DELAY);
  uint8_t rxData[1]; // Bufor na 1 bajt danych
  uint16_t speed = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
	    int8_t direction = 1; // 1 = rośnie, -1 = maleje
 80008b4:	2301      	movs	r3, #1
 80008b6:	f887 30fd 	strb.w	r3, [r7, #253]	@ 0xfd
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	        Set_PWM_Frequency(speed);
 80008ba:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff fe8c 	bl	80005dc <Set_PWM_Frequency>
	        HAL_Delay(1);
 80008c4:	2001      	movs	r0, #1
 80008c6:	f001 f9eb 	bl	8001ca0 <HAL_Delay>

	        speed += direction;
 80008ca:	f997 30fd 	ldrsb.w	r3, [r7, #253]	@ 0xfd
 80008ce:	b29a      	uxth	r2, r3
 80008d0:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 80008d4:	4413      	add	r3, r2
 80008d6:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
	        if (speed >= 250) {
 80008da:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 80008de:	2bf9      	cmp	r3, #249	@ 0xf9
 80008e0:	d903      	bls.n	80008ea <main+0x24a>
	            direction = -1; // Odwracamy kierunek
 80008e2:	23ff      	movs	r3, #255	@ 0xff
 80008e4:	f887 30fd 	strb.w	r3, [r7, #253]	@ 0xfd
 80008e8:	e006      	b.n	80008f8 <main+0x258>
	        }
	        else if (speed <= 0) {
 80008ea:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d102      	bne.n	80008f8 <main+0x258>
	       	            direction = 1; // Odwracamy kierunek
 80008f2:	2301      	movs	r3, #1
 80008f4:	f887 30fd 	strb.w	r3, [r7, #253]	@ 0xfd
	       	        }

	  if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 80008f8:	4820      	ldr	r0, [pc, #128]	@ (800097c <main+0x2dc>)
 80008fa:	f001 fecb 	bl	8002694 <HAL_FDCAN_GetTxFifoFreeLevel>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d00d      	beq.n	8000920 <main+0x280>
	      if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_DME1, TxData_DME1) != HAL_OK) {
 8000904:	4a1b      	ldr	r2, [pc, #108]	@ (8000974 <main+0x2d4>)
 8000906:	491c      	ldr	r1, [pc, #112]	@ (8000978 <main+0x2d8>)
 8000908:	481c      	ldr	r0, [pc, #112]	@ (800097c <main+0x2dc>)
 800090a:	f001 fd59 	bl	80023c0 <HAL_FDCAN_AddMessageToTxFifoQ>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d00a      	beq.n	800092a <main+0x28a>
	          printf("Błąd wysyłania wiadomości\n");
 8000914:	482a      	ldr	r0, [pc, #168]	@ (80009c0 <main+0x320>)
 8000916:	f009 fcd5 	bl	800a2c4 <puts>
	          Error_Handler();
 800091a:	f000 fcd1 	bl	80012c0 <Error_Handler>
 800091e:	e004      	b.n	800092a <main+0x28a>
	      }
	  } else {
		  CheckCANErrors();
 8000920:	f000 fc0e 	bl	8001140 <CheckCANErrors>
	      printf("Bufor nadawczy pełny, nie można dodać wiadomości\n");
 8000924:	4827      	ldr	r0, [pc, #156]	@ (80009c4 <main+0x324>)
 8000926:	f009 fccd 	bl	800a2c4 <puts>
	  }
	   CheckCANErrors();
 800092a:	f000 fc09 	bl	8001140 <CheckCANErrors>
	  // HAL_UART_Transmit(&huart2, frame, sizeof(frame), HAL_MAX_DELAY);
	   if (HAL_UART_Receive(&huart2, rxData, 1, 100) == HAL_OK) {
 800092e:	f107 010c 	add.w	r1, r7, #12
 8000932:	2364      	movs	r3, #100	@ 0x64
 8000934:	2201      	movs	r2, #1
 8000936:	4824      	ldr	r0, [pc, #144]	@ (80009c8 <main+0x328>)
 8000938:	f008 fdf2 	bl	8009520 <HAL_UART_Receive>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d106      	bne.n	8000950 <main+0x2b0>
	              // Odebrano dane — wyślij je z powrotem przez USART
		   printf("Odebrano: 0x%02X (%c)\r\n", rxData[0], rxData[0]);
 8000942:	7b3b      	ldrb	r3, [r7, #12]
 8000944:	4619      	mov	r1, r3
 8000946:	7b3b      	ldrb	r3, [r7, #12]
 8000948:	461a      	mov	r2, r3
 800094a:	4820      	ldr	r0, [pc, #128]	@ (80009cc <main+0x32c>)
 800094c:	f009 fc52 	bl	800a1f4 <iprintf>
	  // HAL_UART_Transmit(&huart2, frame, sizeof(frame), 100);

	   //HAL_UART_Transmit(&huart2, frame2, sizeof(frame), HAL_MAX_DELAY);
	  // printf("working\n");
	   // HAL_UART_Transmit(&huart2, piecpiec		, sizeof(piecpiec), 100);
	   uint8_t lf = 0x0A;  // LF (Line Feed) w ASCII
 8000950:	230a      	movs	r3, #10
 8000952:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
		 //Set_PWM_Frequency(100);
		 // HAL_Delay(10);  // Poczekaj chwilę, aby USART mógł zakończyć transmisję

		  //HAL_UART_Transmit(&huart2, &lf, 1, HAL_MAX_DELAY);  // Wysyłanie LF

	      uint8_t turn_left_data[] = {0xD0 ,0x08 ,0xBF ,0x5B ,0x40 ,0x00 ,0x04 ,0x00 ,0x00 ,0x78};
 8000956:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800095a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800095e:	4a1c      	ldr	r2, [pc, #112]	@ (80009d0 <main+0x330>)
 8000960:	ca07      	ldmia	r2, {r0, r1, r2}
 8000962:	c303      	stmia	r3!, {r0, r1}
 8000964:	801a      	strh	r2, [r3, #0]
	      uint8_t identifier = 0x5A;  // Przykładowy identyfikator ramki
 8000966:	235a      	movs	r3, #90	@ 0x5a
 8000968:	f887 30f6 	strb.w	r3, [r7, #246]	@ 0xf6
  {
 800096c:	e7a5      	b.n	80008ba <main+0x21a>
 800096e:	bf00      	nop
 8000970:	20000144 	.word	0x20000144
 8000974:	20000000 	.word	0x20000000
 8000978:	20000304 	.word	0x20000304
 800097c:	2000008c 	.word	0x2000008c
 8000980:	0800affc 	.word	0x0800affc
 8000984:	0800b018 	.word	0x0800b018
 8000988:	42020400 	.word	0x42020400
 800098c:	0800b094 	.word	0x0800b094
 8000990:	0800b0a0 	.word	0x0800b0a0
 8000994:	0800b0ac 	.word	0x0800b0ac
 8000998:	0800b0b8 	.word	0x0800b0b8
 800099c:	0800b0c4 	.word	0x0800b0c4
 80009a0:	0800b0d0 	.word	0x0800b0d0
 80009a4:	0800b0dc 	.word	0x0800b0dc
 80009a8:	0800b0e8 	.word	0x0800b0e8
 80009ac:	0800b0f4 	.word	0x0800b0f4
 80009b0:	0800b100 	.word	0x0800b100
 80009b4:	0800b10c 	.word	0x0800b10c
 80009b8:	0800b12c 	.word	0x0800b12c
 80009bc:	0800b134 	.word	0x0800b134
 80009c0:	0800b024 	.word	0x0800b024
 80009c4:	0800b044 	.word	0x0800b044
 80009c8:	20000270 	.word	0x20000270
 80009cc:	0800b07c 	.word	0x0800b07c
 80009d0:	0800b13c 	.word	0x0800b13c

080009d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b09c      	sub	sp, #112	@ 0x70
 80009d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009da:	f107 0320 	add.w	r3, r7, #32
 80009de:	2250      	movs	r2, #80	@ 0x50
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f009 fd4e 	bl	800a484 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e8:	f107 0308 	add.w	r3, r7, #8
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
 80009f8:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009fa:	4b2d      	ldr	r3, [pc, #180]	@ (8000ab0 <SystemClock_Config+0xdc>)
 80009fc:	691b      	ldr	r3, [r3, #16]
 80009fe:	4a2c      	ldr	r2, [pc, #176]	@ (8000ab0 <SystemClock_Config+0xdc>)
 8000a00:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000a04:	6113      	str	r3, [r2, #16]
 8000a06:	4b2a      	ldr	r3, [pc, #168]	@ (8000ab0 <SystemClock_Config+0xdc>)
 8000a08:	691b      	ldr	r3, [r3, #16]
 8000a0a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a12:	bf00      	nop
 8000a14:	4b26      	ldr	r3, [pc, #152]	@ (8000ab0 <SystemClock_Config+0xdc>)
 8000a16:	695b      	ldr	r3, [r3, #20]
 8000a18:	f003 0308 	and.w	r3, r3, #8
 8000a1c:	2b08      	cmp	r3, #8
 8000a1e:	d1f9      	bne.n	8000a14 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a20:	2301      	movs	r3, #1
 8000a22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a28:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a32:	2301      	movs	r3, #1
 8000a34:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 62;
 8000a36:	233e      	movs	r3, #62	@ 0x3e
 8000a38:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a42:	2302      	movs	r3, #2
 8000a44:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8000a46:	230c      	movs	r3, #12
 8000a48:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000a4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a52:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a54:	f107 0320 	add.w	r3, r7, #32
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f002 fcb3 	bl	80033c4 <HAL_RCC_OscConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a64:	f000 fc2c 	bl	80012c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a68:	231f      	movs	r3, #31
 8000a6a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a80:	f107 0308 	add.w	r3, r7, #8
 8000a84:	2105      	movs	r1, #5
 8000a86:	4618      	mov	r0, r3
 8000a88:	f003 f8d4 	bl	8003c34 <HAL_RCC_ClockConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a92:	f000 fc15 	bl	80012c0 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000a96:	4b07      	ldr	r3, [pc, #28]	@ (8000ab4 <SystemClock_Config+0xe0>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000a9e:	4a05      	ldr	r2, [pc, #20]	@ (8000ab4 <SystemClock_Config+0xe0>)
 8000aa0:	f043 0320 	orr.w	r3, r3, #32
 8000aa4:	6013      	str	r3, [r2, #0]
}
 8000aa6:	bf00      	nop
 8000aa8:	3770      	adds	r7, #112	@ 0x70
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	44020800 	.word	0x44020800
 8000ab4:	40022000 	.word	0x40022000

08000ab8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000abc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b3c <MX_FDCAN1_Init+0x84>)
 8000abe:	4a20      	ldr	r2, [pc, #128]	@ (8000b40 <MX_FDCAN1_Init+0x88>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b3c <MX_FDCAN1_Init+0x84>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ac8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b3c <MX_FDCAN1_Init+0x84>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000ace:	4b1b      	ldr	r3, [pc, #108]	@ (8000b3c <MX_FDCAN1_Init+0x84>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000ad4:	4b19      	ldr	r3, [pc, #100]	@ (8000b3c <MX_FDCAN1_Init+0x84>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000ada:	4b18      	ldr	r3, [pc, #96]	@ (8000b3c <MX_FDCAN1_Init+0x84>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000ae0:	4b16      	ldr	r3, [pc, #88]	@ (8000b3c <MX_FDCAN1_Init+0x84>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000ae6:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <MX_FDCAN1_Init+0x84>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000aec:	4b13      	ldr	r3, [pc, #76]	@ (8000b3c <MX_FDCAN1_Init+0x84>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 11;
 8000af2:	4b12      	ldr	r3, [pc, #72]	@ (8000b3c <MX_FDCAN1_Init+0x84>)
 8000af4:	220b      	movs	r2, #11
 8000af6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 8000af8:	4b10      	ldr	r3, [pc, #64]	@ (8000b3c <MX_FDCAN1_Init+0x84>)
 8000afa:	2204      	movs	r2, #4
 8000afc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000afe:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <MX_FDCAN1_Init+0x84>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000b04:	4b0d      	ldr	r3, [pc, #52]	@ (8000b3c <MX_FDCAN1_Init+0x84>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <MX_FDCAN1_Init+0x84>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000b10:	4b0a      	ldr	r3, [pc, #40]	@ (8000b3c <MX_FDCAN1_Init+0x84>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000b16:	4b09      	ldr	r3, [pc, #36]	@ (8000b3c <MX_FDCAN1_Init+0x84>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000b1c:	4b07      	ldr	r3, [pc, #28]	@ (8000b3c <MX_FDCAN1_Init+0x84>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b22:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <MX_FDCAN1_Init+0x84>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000b28:	4804      	ldr	r0, [pc, #16]	@ (8000b3c <MX_FDCAN1_Init+0x84>)
 8000b2a:	f001 fa6d 	bl	8002008 <HAL_FDCAN_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000b34:	f000 fbc4 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	2000008c 	.word	0x2000008c
 8000b40:	4000a400 	.word	0x4000a400

08000b44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b48:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb8 <MX_I2C1_Init+0x74>)
 8000b4a:	4a1c      	ldr	r2, [pc, #112]	@ (8000bbc <MX_I2C1_Init+0x78>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60808CD3;
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb8 <MX_I2C1_Init+0x74>)
 8000b50:	4a1b      	ldr	r2, [pc, #108]	@ (8000bc0 <MX_I2C1_Init+0x7c>)
 8000b52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b54:	4b18      	ldr	r3, [pc, #96]	@ (8000bb8 <MX_I2C1_Init+0x74>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b5a:	4b17      	ldr	r3, [pc, #92]	@ (8000bb8 <MX_I2C1_Init+0x74>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b60:	4b15      	ldr	r3, [pc, #84]	@ (8000bb8 <MX_I2C1_Init+0x74>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b66:	4b14      	ldr	r3, [pc, #80]	@ (8000bb8 <MX_I2C1_Init+0x74>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b6c:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <MX_I2C1_Init+0x74>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b72:	4b11      	ldr	r3, [pc, #68]	@ (8000bb8 <MX_I2C1_Init+0x74>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b78:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <MX_I2C1_Init+0x74>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b7e:	480e      	ldr	r0, [pc, #56]	@ (8000bb8 <MX_I2C1_Init+0x74>)
 8000b80:	f002 fa7c 	bl	800307c <HAL_I2C_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b8a:	f000 fb99 	bl	80012c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4809      	ldr	r0, [pc, #36]	@ (8000bb8 <MX_I2C1_Init+0x74>)
 8000b92:	f002 fb0e 	bl	80031b2 <HAL_I2CEx_ConfigAnalogFilter>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b9c:	f000 fb90 	bl	80012c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4805      	ldr	r0, [pc, #20]	@ (8000bb8 <MX_I2C1_Init+0x74>)
 8000ba4:	f002 fb50 	bl	8003248 <HAL_I2CEx_ConfigDigitalFilter>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bae:	f000 fb87 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200000f0 	.word	0x200000f0
 8000bbc:	40005400 	.word	0x40005400
 8000bc0:	60808cd3 	.word	0x60808cd3

08000bc4 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f002 fb89 	bl	80032e0 <HAL_ICACHE_ConfigAssociativityMode>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000bd4:	f000 fb74 	bl	80012c0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000bd8:	f002 fba2 	bl	8003320 <HAL_ICACHE_Enable>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000be2:	f000 fb6d 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b09c      	sub	sp, #112	@ 0x70
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bf2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c00:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c0c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
 8000c1c:	615a      	str	r2, [r3, #20]
 8000c1e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	2234      	movs	r2, #52	@ 0x34
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f009 fc2c 	bl	800a484 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c2c:	4b4c      	ldr	r3, [pc, #304]	@ (8000d60 <MX_TIM1_Init+0x174>)
 8000c2e:	4a4d      	ldr	r2, [pc, #308]	@ (8000d64 <MX_TIM1_Init+0x178>)
 8000c30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 49;
 8000c32:	4b4b      	ldr	r3, [pc, #300]	@ (8000d60 <MX_TIM1_Init+0x174>)
 8000c34:	2231      	movs	r2, #49	@ 0x31
 8000c36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c38:	4b49      	ldr	r3, [pc, #292]	@ (8000d60 <MX_TIM1_Init+0x174>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c3e:	4b48      	ldr	r3, [pc, #288]	@ (8000d60 <MX_TIM1_Init+0x174>)
 8000c40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c44:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c46:	4b46      	ldr	r3, [pc, #280]	@ (8000d60 <MX_TIM1_Init+0x174>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c4c:	4b44      	ldr	r3, [pc, #272]	@ (8000d60 <MX_TIM1_Init+0x174>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c52:	4b43      	ldr	r3, [pc, #268]	@ (8000d60 <MX_TIM1_Init+0x174>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c58:	4841      	ldr	r0, [pc, #260]	@ (8000d60 <MX_TIM1_Init+0x174>)
 8000c5a:	f006 fdb1 	bl	80077c0 <HAL_TIM_Base_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000c64:	f000 fb2c 	bl	80012c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c6c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c6e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000c72:	4619      	mov	r1, r3
 8000c74:	483a      	ldr	r0, [pc, #232]	@ (8000d60 <MX_TIM1_Init+0x174>)
 8000c76:	f007 fb8d 	bl	8008394 <HAL_TIM_ConfigClockSource>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000c80:	f000 fb1e 	bl	80012c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c84:	4836      	ldr	r0, [pc, #216]	@ (8000d60 <MX_TIM1_Init+0x174>)
 8000c86:	f006 ff85 	bl	8007b94 <HAL_TIM_PWM_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000c90:	f000 fb16 	bl	80012c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c94:	2300      	movs	r3, #0
 8000c96:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ca0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	482e      	ldr	r0, [pc, #184]	@ (8000d60 <MX_TIM1_Init+0x174>)
 8000ca8:	f008 f99c 	bl	8008fe4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000cb2:	f000 fb05 	bl	80012c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cb6:	2360      	movs	r3, #96	@ 0x60
 8000cb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 5000;
 8000cba:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cd4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000cd8:	2200      	movs	r2, #0
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4820      	ldr	r0, [pc, #128]	@ (8000d60 <MX_TIM1_Init+0x174>)
 8000cde:	f007 fa45 	bl	800816c <HAL_TIM_PWM_ConfigChannel>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000ce8:	f000 faea 	bl	80012c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000cf0:	2204      	movs	r2, #4
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	481a      	ldr	r0, [pc, #104]	@ (8000d60 <MX_TIM1_Init+0x174>)
 8000cf6:	f007 fa39 	bl	800816c <HAL_TIM_PWM_ConfigChannel>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000d00:	f000 fade 	bl	80012c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d04:	2300      	movs	r3, #0
 8000d06:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d1c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000d22:	2300      	movs	r3, #0
 8000d24:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000d34:	2300      	movs	r3, #0
 8000d36:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4807      	ldr	r0, [pc, #28]	@ (8000d60 <MX_TIM1_Init+0x174>)
 8000d42:	f008 fa1f 	bl	8009184 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8000d4c:	f000 fab8 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d50:	4803      	ldr	r0, [pc, #12]	@ (8000d60 <MX_TIM1_Init+0x174>)
 8000d52:	f000 fc13 	bl	800157c <HAL_TIM_MspPostInit>

}
 8000d56:	bf00      	nop
 8000d58:	3770      	adds	r7, #112	@ 0x70
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000144 	.word	0x20000144
 8000d64:	40012c00 	.word	0x40012c00

08000d68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	@ 0x28
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
 8000d88:	615a      	str	r2, [r3, #20]
 8000d8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d8c:	4b22      	ldr	r3, [pc, #136]	@ (8000e18 <MX_TIM2_Init+0xb0>)
 8000d8e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d94:	4b20      	ldr	r3, [pc, #128]	@ (8000e18 <MX_TIM2_Init+0xb0>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000e18 <MX_TIM2_Init+0xb0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000da0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e18 <MX_TIM2_Init+0xb0>)
 8000da2:	f04f 32ff 	mov.w	r2, #4294967295
 8000da6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e18 <MX_TIM2_Init+0xb0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dae:	4b1a      	ldr	r3, [pc, #104]	@ (8000e18 <MX_TIM2_Init+0xb0>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000db4:	4818      	ldr	r0, [pc, #96]	@ (8000e18 <MX_TIM2_Init+0xb0>)
 8000db6:	f006 feed 	bl	8007b94 <HAL_TIM_PWM_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000dc0:	f000 fa7e 	bl	80012c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dcc:	f107 031c 	add.w	r3, r7, #28
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4811      	ldr	r0, [pc, #68]	@ (8000e18 <MX_TIM2_Init+0xb0>)
 8000dd4:	f008 f906 	bl	8008fe4 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000dde:	f000 fa6f 	bl	80012c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000de2:	2360      	movs	r3, #96	@ 0x60
 8000de4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000df2:	463b      	mov	r3, r7
 8000df4:	2200      	movs	r2, #0
 8000df6:	4619      	mov	r1, r3
 8000df8:	4807      	ldr	r0, [pc, #28]	@ (8000e18 <MX_TIM2_Init+0xb0>)
 8000dfa:	f007 f9b7 	bl	800816c <HAL_TIM_PWM_ConfigChannel>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000e04:	f000 fa5c 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e08:	4803      	ldr	r0, [pc, #12]	@ (8000e18 <MX_TIM2_Init+0xb0>)
 8000e0a:	f000 fbb7 	bl	800157c <HAL_TIM_MspPostInit>

}
 8000e0e:	bf00      	nop
 8000e10:	3728      	adds	r7, #40	@ 0x28
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000190 	.word	0x20000190

08000e1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e20:	4b22      	ldr	r3, [pc, #136]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e22:	4a23      	ldr	r2, [pc, #140]	@ (8000eb0 <MX_USART1_UART_Init+0x94>)
 8000e24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e26:	4b21      	ldr	r3, [pc, #132]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e34:	4b1d      	ldr	r3, [pc, #116]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e40:	4b1a      	ldr	r3, [pc, #104]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e42:	220c      	movs	r2, #12
 8000e44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e46:	4b19      	ldr	r3, [pc, #100]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e4c:	4b17      	ldr	r3, [pc, #92]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e52:	4b16      	ldr	r3, [pc, #88]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e58:	4b14      	ldr	r3, [pc, #80]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e5e:	4b13      	ldr	r3, [pc, #76]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e64:	4811      	ldr	r0, [pc, #68]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e66:	f008 fa6d 	bl	8009344 <HAL_UART_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e70:	f000 fa26 	bl	80012c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e74:	2100      	movs	r1, #0
 8000e76:	480d      	ldr	r0, [pc, #52]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e78:	f009 f830 	bl	8009edc <HAL_UARTEx_SetTxFifoThreshold>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e82:	f000 fa1d 	bl	80012c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e86:	2100      	movs	r1, #0
 8000e88:	4808      	ldr	r0, [pc, #32]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e8a:	f009 f865 	bl	8009f58 <HAL_UARTEx_SetRxFifoThreshold>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e94:	f000 fa14 	bl	80012c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e98:	4804      	ldr	r0, [pc, #16]	@ (8000eac <MX_USART1_UART_Init+0x90>)
 8000e9a:	f008 ffe6 	bl	8009e6a <HAL_UARTEx_DisableFifoMode>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ea4:	f000 fa0c 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	200001dc 	.word	0x200001dc
 8000eb0:	40013800 	.word	0x40013800

08000eb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eb8:	4b23      	ldr	r3, [pc, #140]	@ (8000f48 <MX_USART2_UART_Init+0x94>)
 8000eba:	4a24      	ldr	r2, [pc, #144]	@ (8000f4c <MX_USART2_UART_Init+0x98>)
 8000ebc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ebe:	4b22      	ldr	r3, [pc, #136]	@ (8000f48 <MX_USART2_UART_Init+0x94>)
 8000ec0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000ec4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000ec6:	4b20      	ldr	r3, [pc, #128]	@ (8000f48 <MX_USART2_UART_Init+0x94>)
 8000ec8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ecc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ece:	4b1e      	ldr	r3, [pc, #120]	@ (8000f48 <MX_USART2_UART_Init+0x94>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f48 <MX_USART2_UART_Init+0x94>)
 8000ed6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000eda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000edc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f48 <MX_USART2_UART_Init+0x94>)
 8000ede:	220c      	movs	r2, #12
 8000ee0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee2:	4b19      	ldr	r3, [pc, #100]	@ (8000f48 <MX_USART2_UART_Init+0x94>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee8:	4b17      	ldr	r3, [pc, #92]	@ (8000f48 <MX_USART2_UART_Init+0x94>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eee:	4b16      	ldr	r3, [pc, #88]	@ (8000f48 <MX_USART2_UART_Init+0x94>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ef4:	4b14      	ldr	r3, [pc, #80]	@ (8000f48 <MX_USART2_UART_Init+0x94>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000efa:	4b13      	ldr	r3, [pc, #76]	@ (8000f48 <MX_USART2_UART_Init+0x94>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f00:	4811      	ldr	r0, [pc, #68]	@ (8000f48 <MX_USART2_UART_Init+0x94>)
 8000f02:	f008 fa1f 	bl	8009344 <HAL_UART_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8000f0c:	f000 f9d8 	bl	80012c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f10:	2100      	movs	r1, #0
 8000f12:	480d      	ldr	r0, [pc, #52]	@ (8000f48 <MX_USART2_UART_Init+0x94>)
 8000f14:	f008 ffe2 	bl	8009edc <HAL_UARTEx_SetTxFifoThreshold>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8000f1e:	f000 f9cf 	bl	80012c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f22:	2100      	movs	r1, #0
 8000f24:	4808      	ldr	r0, [pc, #32]	@ (8000f48 <MX_USART2_UART_Init+0x94>)
 8000f26:	f009 f817 	bl	8009f58 <HAL_UARTEx_SetRxFifoThreshold>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8000f30:	f000 f9c6 	bl	80012c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f34:	4804      	ldr	r0, [pc, #16]	@ (8000f48 <MX_USART2_UART_Init+0x94>)
 8000f36:	f008 ff98 	bl	8009e6a <HAL_UARTEx_DisableFifoMode>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8000f40:	f000 f9be 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000270 	.word	0x20000270
 8000f4c:	40004400 	.word	0x40004400

08000f50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	@ 0x28
 8000f54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
 8000f64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f66:	4b5d      	ldr	r3, [pc, #372]	@ (80010dc <MX_GPIO_Init+0x18c>)
 8000f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f6c:	4a5b      	ldr	r2, [pc, #364]	@ (80010dc <MX_GPIO_Init+0x18c>)
 8000f6e:	f043 0304 	orr.w	r3, r3, #4
 8000f72:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f76:	4b59      	ldr	r3, [pc, #356]	@ (80010dc <MX_GPIO_Init+0x18c>)
 8000f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f7c:	f003 0304 	and.w	r3, r3, #4
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f84:	4b55      	ldr	r3, [pc, #340]	@ (80010dc <MX_GPIO_Init+0x18c>)
 8000f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f8a:	4a54      	ldr	r2, [pc, #336]	@ (80010dc <MX_GPIO_Init+0x18c>)
 8000f8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f90:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f94:	4b51      	ldr	r3, [pc, #324]	@ (80010dc <MX_GPIO_Init+0x18c>)
 8000f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	4b4e      	ldr	r3, [pc, #312]	@ (80010dc <MX_GPIO_Init+0x18c>)
 8000fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fa8:	4a4c      	ldr	r2, [pc, #304]	@ (80010dc <MX_GPIO_Init+0x18c>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fb2:	4b4a      	ldr	r3, [pc, #296]	@ (80010dc <MX_GPIO_Init+0x18c>)
 8000fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc0:	4b46      	ldr	r3, [pc, #280]	@ (80010dc <MX_GPIO_Init+0x18c>)
 8000fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fc6:	4a45      	ldr	r2, [pc, #276]	@ (80010dc <MX_GPIO_Init+0x18c>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fd0:	4b42      	ldr	r3, [pc, #264]	@ (80010dc <MX_GPIO_Init+0x18c>)
 8000fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fe4:	483e      	ldr	r0, [pc, #248]	@ (80010e0 <MX_GPIO_Init+0x190>)
 8000fe6:	f002 f817 	bl	8003018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(K_BUS_SLP_GPIO_Port, K_BUS_SLP_Pin, GPIO_PIN_SET);
 8000fea:	2201      	movs	r2, #1
 8000fec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ff0:	483b      	ldr	r0, [pc, #236]	@ (80010e0 <MX_GPIO_Init+0x190>)
 8000ff2:	f002 f811 	bl	8003018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Backlight_STM_Pin|Batt_Charge_Light_STM_Pin|Oil_Iight_STM_Pin, GPIO_PIN_SET);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2170      	movs	r1, #112	@ 0x70
 8000ffa:	483a      	ldr	r0, [pc, #232]	@ (80010e4 <MX_GPIO_Init+0x194>)
 8000ffc:	f002 f80c 	bl	8003018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Brake_fluid_light_STM_Pin|TRCVR_MODE_Pin|D3_Pin, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	f248 4180 	movw	r1, #33920	@ 0x8480
 8001006:	4837      	ldr	r0, [pc, #220]	@ (80010e4 <MX_GPIO_Init+0x194>)
 8001008:	f002 f806 	bl	8003018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ABS_STM_Pin|Parking_Brake_STM_Pin|Brake_Wear_Sens_STM_Pin|Coolant_level_Sens_STM_Pin
 800100c:	2200      	movs	r2, #0
 800100e:	f241 413e 	movw	r1, #5182	@ 0x143e
 8001012:	4835      	ldr	r0, [pc, #212]	@ (80010e8 <MX_GPIO_Init+0x198>)
 8001014:	f002 f800 	bl	8003018 <HAL_GPIO_WritePin>
                          |D2_Pin|D1_Pin|Fuel_HVC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Washer_Fluid_Lvl_STM_GPIO_Port, Washer_Fluid_Lvl_STM_Pin, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800101e:	4832      	ldr	r0, [pc, #200]	@ (80010e8 <MX_GPIO_Init+0x198>)
 8001020:	f001 fffa 	bl	8003018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001024:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001028:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102a:	2301      	movs	r3, #1
 800102c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2300      	movs	r3, #0
 8001034:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	4619      	mov	r1, r3
 800103c:	4828      	ldr	r0, [pc, #160]	@ (80010e0 <MX_GPIO_Init+0x190>)
 800103e:	f001 fe99 	bl	8002d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : K_BUS_SLP_Pin */
  GPIO_InitStruct.Pin = K_BUS_SLP_Pin;
 8001042:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001048:	2301      	movs	r3, #1
 800104a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800104c:	2301      	movs	r3, #1
 800104e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(K_BUS_SLP_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	4821      	ldr	r0, [pc, #132]	@ (80010e0 <MX_GPIO_Init+0x190>)
 800105c:	f001 fe8a 	bl	8002d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : Backlight_STM_Pin */
  GPIO_InitStruct.Pin = Backlight_STM_Pin;
 8001060:	2310      	movs	r3, #16
 8001062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001064:	2311      	movs	r3, #17
 8001066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001068:	2301      	movs	r3, #1
 800106a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Backlight_STM_GPIO_Port, &GPIO_InitStruct);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	481b      	ldr	r0, [pc, #108]	@ (80010e4 <MX_GPIO_Init+0x194>)
 8001078:	f001 fe7c 	bl	8002d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : Batt_Charge_Light_STM_Pin Oil_Iight_STM_Pin Brake_fluid_light_STM_Pin TRCVR_MODE_Pin
                           D3_Pin */
  GPIO_InitStruct.Pin = Batt_Charge_Light_STM_Pin|Oil_Iight_STM_Pin|Brake_fluid_light_STM_Pin|TRCVR_MODE_Pin
 800107c:	f248 43e0 	movw	r3, #34016	@ 0x84e0
 8001080:	617b      	str	r3, [r7, #20]
                          |D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001082:	2301      	movs	r3, #1
 8001084:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108a:	2300      	movs	r3, #0
 800108c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	4813      	ldr	r0, [pc, #76]	@ (80010e4 <MX_GPIO_Init+0x194>)
 8001096:	f001 fe6d 	bl	8002d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : ABS_STM_Pin Parking_Brake_STM_Pin Brake_Wear_Sens_STM_Pin Coolant_level_Sens_STM_Pin
                           Washer_Fluid_Lvl_STM_Pin D2_Pin D1_Pin Fuel_HVC_Pin */
  GPIO_InitStruct.Pin = ABS_STM_Pin|Parking_Brake_STM_Pin|Brake_Wear_Sens_STM_Pin|Coolant_level_Sens_STM_Pin
 800109a:	f243 433e 	movw	r3, #13374	@ 0x343e
 800109e:	617b      	str	r3, [r7, #20]
                          |Washer_Fluid_Lvl_STM_Pin|D2_Pin|D1_Pin|Fuel_HVC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4619      	mov	r1, r3
 80010b2:	480d      	ldr	r0, [pc, #52]	@ (80010e8 <MX_GPIO_Init+0x198>)
 80010b4:	f001 fe5e 	bl	8002d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	4806      	ldr	r0, [pc, #24]	@ (80010e8 <MX_GPIO_Init+0x198>)
 80010ce:	f001 fe51 	bl	8002d74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010d2:	bf00      	nop
 80010d4:	3728      	adds	r7, #40	@ 0x28
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	44020c00 	.word	0x44020c00
 80010e0:	42020800 	.word	0x42020800
 80010e4:	42020000 	.word	0x42020000
 80010e8:	42020400 	.word	0x42020400

080010ec <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
    void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
    {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
    	if (HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0) > 0) {
 80010f6:	2140      	movs	r1, #64	@ 0x40
 80010f8:	480e      	ldr	r0, [pc, #56]	@ (8001134 <HAL_FDCAN_RxFifo0Callback+0x48>)
 80010fa:	f001 faad 	bl	8002658 <HAL_FDCAN_GetRxFifoFillLevel>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d013      	beq.n	800112c <HAL_FDCAN_RxFifo0Callback+0x40>
    	    if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader2, RxData2) == HAL_OK) {
 8001104:	4b0c      	ldr	r3, [pc, #48]	@ (8001138 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8001106:	4a0d      	ldr	r2, [pc, #52]	@ (800113c <HAL_FDCAN_RxFifo0Callback+0x50>)
 8001108:	2140      	movs	r1, #64	@ 0x40
 800110a:	480a      	ldr	r0, [pc, #40]	@ (8001134 <HAL_FDCAN_RxFifo0Callback+0x48>)
 800110c:	f001 f99c 	bl	8002448 <HAL_FDCAN_GetRxMessage>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d10a      	bne.n	800112c <HAL_FDCAN_RxFifo0Callback+0x40>
    	       // printf("Odebrano ramkę: ID = 0x%03X, Dane = ", RxHeader2.Identifier);
    	        for (int i = 0; i < RxHeader2.DataLength; i++) {
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	e002      	b.n	8001122 <HAL_FDCAN_RxFifo0Callback+0x36>
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	3301      	adds	r3, #1
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	4b06      	ldr	r3, [pc, #24]	@ (800113c <HAL_FDCAN_RxFifo0Callback+0x50>)
 8001124:	68da      	ldr	r2, [r3, #12]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	429a      	cmp	r2, r3
 800112a:	d8f7      	bhi.n	800111c <HAL_FDCAN_RxFifo0Callback+0x30>
    	            //printf("%02X ", RxData2[i]);
    	        }
    	       // printf("\n");
    	    }
    	}
    }
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	2000008c 	.word	0x2000008c
 8001138:	2000034c 	.word	0x2000034c
 800113c:	20000328 	.word	0x20000328

08001140 <CheckCANErrors>:

void CheckCANErrors() {
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
    uint32_t error = HAL_FDCAN_GetError(&hfdcan1);
 8001146:	4843      	ldr	r0, [pc, #268]	@ (8001254 <CheckCANErrors+0x114>)
 8001148:	f001 fd2a 	bl	8002ba0 <HAL_FDCAN_GetError>
 800114c:	6078      	str	r0, [r7, #4]

    if (error == HAL_FDCAN_ERROR_NONE) {
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d103      	bne.n	800115c <CheckCANErrors+0x1c>
        printf("Brak błędów CAN\n");
 8001154:	4840      	ldr	r0, [pc, #256]	@ (8001258 <CheckCANErrors+0x118>)
 8001156:	f009 f8b5 	bl	800a2c4 <puts>
		   printf("  HAL_FDCAN_ERROR_LOG_OVERFLOW\n");
	   }
	   if (error & HAL_FDCAN_ERROR_RAM_WDG) {
		   printf(" HAL_FDCAN_ERROR_RAM_WDG\n");
    }
}}
 800115a:	e077      	b.n	800124c <CheckCANErrors+0x10c>
        if (error & HAL_FDCAN_ERROR_TIMEOUT) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	2b00      	cmp	r3, #0
 8001164:	d002      	beq.n	800116c <CheckCANErrors+0x2c>
            printf(" HAL_FDCAN_ERROR_TIMEOUT\n");
 8001166:	483d      	ldr	r0, [pc, #244]	@ (800125c <CheckCANErrors+0x11c>)
 8001168:	f009 f8ac 	bl	800a2c4 <puts>
        if (error & HAL_FDCAN_ERROR_NOT_INITIALIZED) {
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d002      	beq.n	800117c <CheckCANErrors+0x3c>
            printf(" HAL_FDCAN_ERROR_NOT_INITIALIZED\n");
 8001176:	483a      	ldr	r0, [pc, #232]	@ (8001260 <CheckCANErrors+0x120>)
 8001178:	f009 f8a4 	bl	800a2c4 <puts>
        if (error & HAL_FDCAN_ERROR_NOT_READY) {
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	2b00      	cmp	r3, #0
 8001184:	d002      	beq.n	800118c <CheckCANErrors+0x4c>
            printf(" HAL_FDCAN_ERROR_NOT_READY\n");
 8001186:	4837      	ldr	r0, [pc, #220]	@ (8001264 <CheckCANErrors+0x124>)
 8001188:	f009 f89c 	bl	800a2c4 <puts>
        if (error & HAL_FDCAN_ERROR_NOT_STARTED) {
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 0308 	and.w	r3, r3, #8
 8001192:	2b00      	cmp	r3, #0
 8001194:	d002      	beq.n	800119c <CheckCANErrors+0x5c>
            printf(" HAL_FDCAN_ERROR_NOT_STARTED\n");
 8001196:	4834      	ldr	r0, [pc, #208]	@ (8001268 <CheckCANErrors+0x128>)
 8001198:	f009 f894 	bl	800a2c4 <puts>
        if (error & HAL_FDCAN_ERROR_NOT_SUPPORTED) {
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f003 0310 	and.w	r3, r3, #16
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d002      	beq.n	80011ac <CheckCANErrors+0x6c>
            printf(" HAL_FDCAN_ERROR_NOT_SUPPORTED\n");
 80011a6:	4831      	ldr	r0, [pc, #196]	@ (800126c <CheckCANErrors+0x12c>)
 80011a8:	f009 f88c 	bl	800a2c4 <puts>
        if (error & HAL_FDCAN_ERROR_PARAM) {
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f003 0320 	and.w	r3, r3, #32
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d002      	beq.n	80011bc <CheckCANErrors+0x7c>
            printf("HAL_FDCAN_ERROR_PARAM\n");
 80011b6:	482e      	ldr	r0, [pc, #184]	@ (8001270 <CheckCANErrors+0x130>)
 80011b8:	f009 f884 	bl	800a2c4 <puts>
        if (error & HAL_FDCAN_ERROR_PENDING) {
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d002      	beq.n	80011cc <CheckCANErrors+0x8c>
            printf("  HAL_FDCAN_ERROR_PENDING\n");
 80011c6:	482b      	ldr	r0, [pc, #172]	@ (8001274 <CheckCANErrors+0x134>)
 80011c8:	f009 f87c 	bl	800a2c4 <puts>
        if (error & HAL_FDCAN_ERROR_RAM_ACCESS) {
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d002      	beq.n	80011dc <CheckCANErrors+0x9c>
            printf("  HAL_FDCAN_ERROR_RAM_ACCESS\n");
 80011d6:	4828      	ldr	r0, [pc, #160]	@ (8001278 <CheckCANErrors+0x138>)
 80011d8:	f009 f874 	bl	800a2c4 <puts>
        if (error & HAL_FDCAN_ERROR_PROTOCOL_ARBT) {
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d002      	beq.n	80011ec <CheckCANErrors+0xac>
            printf(" HAL_FDCAN_ERROR_PROTOCOL_ARBT\n");
 80011e6:	4825      	ldr	r0, [pc, #148]	@ (800127c <CheckCANErrors+0x13c>)
 80011e8:	f009 f86c 	bl	800a2c4 <puts>
        if (error & HAL_FDCAN_ERROR_PROTOCOL_DATA) {
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d002      	beq.n	80011fc <CheckCANErrors+0xbc>
                 printf(" HAL_FDCAN_ERROR_PROTOCOL_DATA\n");
 80011f6:	4822      	ldr	r0, [pc, #136]	@ (8001280 <CheckCANErrors+0x140>)
 80011f8:	f009 f864 	bl	800a2c4 <puts>
        if (error & HAL_FDCAN_ERROR_RESERVED_AREA) {
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d002      	beq.n	800120c <CheckCANErrors+0xcc>
                        printf(" HAL_FDCAN_ERROR_RESERVED_AREA\n");
 8001206:	481f      	ldr	r0, [pc, #124]	@ (8001284 <CheckCANErrors+0x144>)
 8001208:	f009 f85c 	bl	800a2c4 <puts>
	   if (error & HAL_FDCAN_ERROR_FIFO_EMPTY) {
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001212:	2b00      	cmp	r3, #0
 8001214:	d002      	beq.n	800121c <CheckCANErrors+0xdc>
		   printf("HAL_FDCAN_ERROR_FIFO_EMPTY\n");
 8001216:	481c      	ldr	r0, [pc, #112]	@ (8001288 <CheckCANErrors+0x148>)
 8001218:	f009 f854 	bl	800a2c4 <puts>
	   if (error & HAL_FDCAN_ERROR_FIFO_FULL) {
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001222:	2b00      	cmp	r3, #0
 8001224:	d002      	beq.n	800122c <CheckCANErrors+0xec>
		   printf("  HAL_FDCAN_ERROR_FIFO_FULL\n");
 8001226:	4819      	ldr	r0, [pc, #100]	@ (800128c <CheckCANErrors+0x14c>)
 8001228:	f009 f84c 	bl	800a2c4 <puts>
	   if (error & HAL_FDCAN_ERROR_LOG_OVERFLOW) {
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d002      	beq.n	800123c <CheckCANErrors+0xfc>
		   printf("  HAL_FDCAN_ERROR_LOG_OVERFLOW\n");
 8001236:	4816      	ldr	r0, [pc, #88]	@ (8001290 <CheckCANErrors+0x150>)
 8001238:	f009 f844 	bl	800a2c4 <puts>
	   if (error & HAL_FDCAN_ERROR_RAM_WDG) {
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d002      	beq.n	800124c <CheckCANErrors+0x10c>
		   printf(" HAL_FDCAN_ERROR_RAM_WDG\n");
 8001246:	4813      	ldr	r0, [pc, #76]	@ (8001294 <CheckCANErrors+0x154>)
 8001248:	f009 f83c 	bl	800a2c4 <puts>
}}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	2000008c 	.word	0x2000008c
 8001258:	0800b148 	.word	0x0800b148
 800125c:	0800b15c 	.word	0x0800b15c
 8001260:	0800b178 	.word	0x0800b178
 8001264:	0800b19c 	.word	0x0800b19c
 8001268:	0800b1b8 	.word	0x0800b1b8
 800126c:	0800b1d8 	.word	0x0800b1d8
 8001270:	0800b1f8 	.word	0x0800b1f8
 8001274:	0800b210 	.word	0x0800b210
 8001278:	0800b22c 	.word	0x0800b22c
 800127c:	0800b24c 	.word	0x0800b24c
 8001280:	0800b26c 	.word	0x0800b26c
 8001284:	0800b28c 	.word	0x0800b28c
 8001288:	0800b2ac 	.word	0x0800b2ac
 800128c:	0800b2c8 	.word	0x0800b2c8
 8001290:	0800b2e4 	.word	0x0800b2e4
 8001294:	0800b304 	.word	0x0800b304

08001298 <HAL_TIM_PeriodElapsedCallback>:
    } else {
        printf("Brak ramek do odebrania\n");
    }
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if (htim == &htim1) {
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a05      	ldr	r2, [pc, #20]	@ (80012b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d103      	bne.n	80012b0 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 80012a8:	2108      	movs	r1, #8
 80012aa:	4804      	ldr	r0, [pc, #16]	@ (80012bc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80012ac:	f001 fecc 	bl	8003048 <HAL_GPIO_TogglePin>
  }
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000144 	.word	0x20000144
 80012bc:	42020400 	.word	0x42020400

080012c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80012c4:	2201      	movs	r2, #1
 80012c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012ca:	4804      	ldr	r0, [pc, #16]	@ (80012dc <Error_Handler+0x1c>)
 80012cc:	f001 fea4 	bl	8003018 <HAL_GPIO_WritePin>
	CheckCANErrors();
 80012d0:	f7ff ff36 	bl	8001140 <CheckCANErrors>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d4:	b672      	cpsid	i
}
 80012d6:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <Error_Handler+0x18>
 80012dc:	42020000 	.word	0x42020000

080012e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* ICACHE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ICACHE_IRQn, 0, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2100      	movs	r1, #0
 80012e8:	2068      	movs	r0, #104	@ 0x68
 80012ea:	f000 fdb5 	bl	8001e58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ICACHE_IRQn);
 80012ee:	2068      	movs	r0, #104	@ 0x68
 80012f0:	f000 fdcc 	bl	8001e8c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b0be      	sub	sp, #248	@ 0xf8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001310:	f107 0310 	add.w	r3, r7, #16
 8001314:	22d0      	movs	r2, #208	@ 0xd0
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f009 f8b3 	bl	800a484 <memset>
  if(hfdcan->Instance==FDCAN1)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a2f      	ldr	r2, [pc, #188]	@ (80013e0 <HAL_FDCAN_MspInit+0xe8>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d157      	bne.n	80013d8 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	f04f 0304 	mov.w	r3, #4
 8001330:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL1Q;
 8001334:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001338:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800133c:	f107 0310 	add.w	r3, r7, #16
 8001340:	4618      	mov	r0, r3
 8001342:	f002 ffb9 	bl	80042b8 <HAL_RCCEx_PeriphCLKConfig>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 800134c:	f7ff ffb8 	bl	80012c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001350:	4b24      	ldr	r3, [pc, #144]	@ (80013e4 <HAL_FDCAN_MspInit+0xec>)
 8001352:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001356:	4a23      	ldr	r2, [pc, #140]	@ (80013e4 <HAL_FDCAN_MspInit+0xec>)
 8001358:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800135c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8001360:	4b20      	ldr	r3, [pc, #128]	@ (80013e4 <HAL_FDCAN_MspInit+0xec>)
 8001362:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001366:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	4b1d      	ldr	r3, [pc, #116]	@ (80013e4 <HAL_FDCAN_MspInit+0xec>)
 8001370:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001374:	4a1b      	ldr	r2, [pc, #108]	@ (80013e4 <HAL_FDCAN_MspInit+0xec>)
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800137e:	4b19      	ldr	r3, [pc, #100]	@ (80013e4 <HAL_FDCAN_MspInit+0xec>)
 8001380:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800138c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001390:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a0:	2303      	movs	r3, #3
 80013a2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80013a6:	2309      	movs	r3, #9
 80013a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ac:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80013b0:	4619      	mov	r1, r3
 80013b2:	480d      	ldr	r0, [pc, #52]	@ (80013e8 <HAL_FDCAN_MspInit+0xf0>)
 80013b4:	f001 fcde 	bl	8002d74 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2100      	movs	r1, #0
 80013bc:	2027      	movs	r0, #39	@ 0x27
 80013be:	f000 fd4b 	bl	8001e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80013c2:	2027      	movs	r0, #39	@ 0x27
 80013c4:	f000 fd62 	bl	8001e8c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2100      	movs	r1, #0
 80013cc:	2028      	movs	r0, #40	@ 0x28
 80013ce:	f000 fd43 	bl	8001e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80013d2:	2028      	movs	r0, #40	@ 0x28
 80013d4:	f000 fd5a 	bl	8001e8c <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80013d8:	bf00      	nop
 80013da:	37f8      	adds	r7, #248	@ 0xf8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	4000a400 	.word	0x4000a400
 80013e4:	44020c00 	.word	0x44020c00
 80013e8:	42020000 	.word	0x42020000

080013ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b0be      	sub	sp, #248	@ 0xf8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	22d0      	movs	r2, #208	@ 0xd0
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f009 f839 	bl	800a484 <memset>
  if(hi2c->Instance==I2C1)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a26      	ldr	r2, [pc, #152]	@ (80014b0 <HAL_I2C_MspInit+0xc4>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d145      	bne.n	80014a8 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800141c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001420:	f04f 0300 	mov.w	r3, #0
 8001424:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001428:	2300      	movs	r3, #0
 800142a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800142e:	f107 0310 	add.w	r3, r7, #16
 8001432:	4618      	mov	r0, r3
 8001434:	f002 ff40 	bl	80042b8 <HAL_RCCEx_PeriphCLKConfig>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800143e:	f7ff ff3f 	bl	80012c0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001442:	4b1c      	ldr	r3, [pc, #112]	@ (80014b4 <HAL_I2C_MspInit+0xc8>)
 8001444:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001448:	4a1a      	ldr	r2, [pc, #104]	@ (80014b4 <HAL_I2C_MspInit+0xc8>)
 800144a:	f043 0302 	orr.w	r3, r3, #2
 800144e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001452:	4b18      	ldr	r3, [pc, #96]	@ (80014b4 <HAL_I2C_MspInit+0xc8>)
 8001454:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001460:	23c0      	movs	r3, #192	@ 0xc0
 8001462:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001466:	2312      	movs	r3, #18
 8001468:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001478:	2304      	movs	r3, #4
 800147a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001482:	4619      	mov	r1, r3
 8001484:	480c      	ldr	r0, [pc, #48]	@ (80014b8 <HAL_I2C_MspInit+0xcc>)
 8001486:	f001 fc75 	bl	8002d74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800148a:	4b0a      	ldr	r3, [pc, #40]	@ (80014b4 <HAL_I2C_MspInit+0xc8>)
 800148c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001490:	4a08      	ldr	r2, [pc, #32]	@ (80014b4 <HAL_I2C_MspInit+0xc8>)
 8001492:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001496:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800149a:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <HAL_I2C_MspInit+0xc8>)
 800149c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80014a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80014a8:	bf00      	nop
 80014aa:	37f8      	adds	r7, #248	@ 0xf8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40005400 	.word	0x40005400
 80014b4:	44020c00 	.word	0x44020c00
 80014b8:	42020400 	.word	0x42020400

080014bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a1a      	ldr	r2, [pc, #104]	@ (8001534 <HAL_TIM_Base_MspInit+0x78>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d12e      	bne.n	800152c <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001538 <HAL_TIM_Base_MspInit+0x7c>)
 80014d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80014d4:	4a18      	ldr	r2, [pc, #96]	@ (8001538 <HAL_TIM_Base_MspInit+0x7c>)
 80014d6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014da:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80014de:	4b16      	ldr	r3, [pc, #88]	@ (8001538 <HAL_TIM_Base_MspInit+0x7c>)
 80014e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80014e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2100      	movs	r1, #0
 80014f0:	2029      	movs	r0, #41	@ 0x29
 80014f2:	f000 fcb1 	bl	8001e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80014f6:	2029      	movs	r0, #41	@ 0x29
 80014f8:	f000 fcc8 	bl	8001e8c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80014fc:	2200      	movs	r2, #0
 80014fe:	2100      	movs	r1, #0
 8001500:	202a      	movs	r0, #42	@ 0x2a
 8001502:	f000 fca9 	bl	8001e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001506:	202a      	movs	r0, #42	@ 0x2a
 8001508:	f000 fcc0 	bl	8001e8c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800150c:	2200      	movs	r2, #0
 800150e:	2100      	movs	r1, #0
 8001510:	202b      	movs	r0, #43	@ 0x2b
 8001512:	f000 fca1 	bl	8001e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001516:	202b      	movs	r0, #43	@ 0x2b
 8001518:	f000 fcb8 	bl	8001e8c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800151c:	2200      	movs	r2, #0
 800151e:	2100      	movs	r1, #0
 8001520:	202c      	movs	r0, #44	@ 0x2c
 8001522:	f000 fc99 	bl	8001e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001526:	202c      	movs	r0, #44	@ 0x2c
 8001528:	f000 fcb0 	bl	8001e8c <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800152c:	bf00      	nop
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40012c00 	.word	0x40012c00
 8001538:	44020c00 	.word	0x44020c00

0800153c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800154c:	d10e      	bne.n	800156c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800154e:	4b0a      	ldr	r3, [pc, #40]	@ (8001578 <HAL_TIM_PWM_MspInit+0x3c>)
 8001550:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001554:	4a08      	ldr	r2, [pc, #32]	@ (8001578 <HAL_TIM_PWM_MspInit+0x3c>)
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800155e:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <HAL_TIM_PWM_MspInit+0x3c>)
 8001560:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	44020c00 	.word	0x44020c00

0800157c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	@ 0x28
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a25      	ldr	r2, [pc, #148]	@ (8001630 <HAL_TIM_MspPostInit+0xb4>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d120      	bne.n	80015e0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159e:	4b25      	ldr	r3, [pc, #148]	@ (8001634 <HAL_TIM_MspPostInit+0xb8>)
 80015a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015a4:	4a23      	ldr	r2, [pc, #140]	@ (8001634 <HAL_TIM_MspPostInit+0xb8>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015ae:	4b21      	ldr	r3, [pc, #132]	@ (8001634 <HAL_TIM_MspPostInit+0xb8>)
 80015b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015bc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80015ce:	2301      	movs	r3, #1
 80015d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	4817      	ldr	r0, [pc, #92]	@ (8001638 <HAL_TIM_MspPostInit+0xbc>)
 80015da:	f001 fbcb 	bl	8002d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80015de:	e023      	b.n	8001628 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM2)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015e8:	d11e      	bne.n	8001628 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	4b12      	ldr	r3, [pc, #72]	@ (8001634 <HAL_TIM_MspPostInit+0xb8>)
 80015ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015f0:	4a10      	ldr	r2, [pc, #64]	@ (8001634 <HAL_TIM_MspPostInit+0xb8>)
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001634 <HAL_TIM_MspPostInit+0xb8>)
 80015fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001608:	2301      	movs	r3, #1
 800160a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160c:	2302      	movs	r3, #2
 800160e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	2300      	movs	r3, #0
 8001616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001618:	2301      	movs	r3, #1
 800161a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4619      	mov	r1, r3
 8001622:	4805      	ldr	r0, [pc, #20]	@ (8001638 <HAL_TIM_MspPostInit+0xbc>)
 8001624:	f001 fba6 	bl	8002d74 <HAL_GPIO_Init>
}
 8001628:	bf00      	nop
 800162a:	3728      	adds	r7, #40	@ 0x28
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40012c00 	.word	0x40012c00
 8001634:	44020c00 	.word	0x44020c00
 8001638:	42020000 	.word	0x42020000

0800163c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b0c0      	sub	sp, #256	@ 0x100
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001654:	f107 0318 	add.w	r3, r7, #24
 8001658:	22d0      	movs	r2, #208	@ 0xd0
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f008 ff11 	bl	800a484 <memset>
  if(huart->Instance==USART1)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a4c      	ldr	r2, [pc, #304]	@ (8001798 <HAL_UART_MspInit+0x15c>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d146      	bne.n	80016fa <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800166c:	f04f 0201 	mov.w	r2, #1
 8001670:	f04f 0300 	mov.w	r3, #0
 8001674:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001678:	2300      	movs	r3, #0
 800167a:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800167c:	f107 0318 	add.w	r3, r7, #24
 8001680:	4618      	mov	r0, r3
 8001682:	f002 fe19 	bl	80042b8 <HAL_RCCEx_PeriphCLKConfig>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 800168c:	f7ff fe18 	bl	80012c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001690:	4b42      	ldr	r3, [pc, #264]	@ (800179c <HAL_UART_MspInit+0x160>)
 8001692:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001696:	4a41      	ldr	r2, [pc, #260]	@ (800179c <HAL_UART_MspInit+0x160>)
 8001698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800169c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80016a0:	4b3e      	ldr	r3, [pc, #248]	@ (800179c <HAL_UART_MspInit+0x160>)
 80016a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80016a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ae:	4b3b      	ldr	r3, [pc, #236]	@ (800179c <HAL_UART_MspInit+0x160>)
 80016b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016b4:	4a39      	ldr	r2, [pc, #228]	@ (800179c <HAL_UART_MspInit+0x160>)
 80016b6:	f043 0302 	orr.w	r3, r3, #2
 80016ba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016be:	4b37      	ldr	r3, [pc, #220]	@ (800179c <HAL_UART_MspInit+0x160>)
 80016c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80016cc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80016d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80016e6:	2304      	movs	r3, #4
 80016e8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ec:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80016f0:	4619      	mov	r1, r3
 80016f2:	482b      	ldr	r0, [pc, #172]	@ (80017a0 <HAL_UART_MspInit+0x164>)
 80016f4:	f001 fb3e 	bl	8002d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016f8:	e049      	b.n	800178e <HAL_UART_MspInit+0x152>
  else if(huart->Instance==USART2)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a29      	ldr	r2, [pc, #164]	@ (80017a4 <HAL_UART_MspInit+0x168>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d144      	bne.n	800178e <HAL_UART_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001704:	f04f 0202 	mov.w	r2, #2
 8001708:	f04f 0300 	mov.w	r3, #0
 800170c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001710:	2300      	movs	r3, #0
 8001712:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001714:	f107 0318 	add.w	r3, r7, #24
 8001718:	4618      	mov	r0, r3
 800171a:	f002 fdcd 	bl	80042b8 <HAL_RCCEx_PeriphCLKConfig>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <HAL_UART_MspInit+0xec>
      Error_Handler();
 8001724:	f7ff fdcc 	bl	80012c0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001728:	4b1c      	ldr	r3, [pc, #112]	@ (800179c <HAL_UART_MspInit+0x160>)
 800172a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800172e:	4a1b      	ldr	r2, [pc, #108]	@ (800179c <HAL_UART_MspInit+0x160>)
 8001730:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001734:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001738:	4b18      	ldr	r3, [pc, #96]	@ (800179c <HAL_UART_MspInit+0x160>)
 800173a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800173e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001746:	4b15      	ldr	r3, [pc, #84]	@ (800179c <HAL_UART_MspInit+0x160>)
 8001748:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800174c:	4a13      	ldr	r2, [pc, #76]	@ (800179c <HAL_UART_MspInit+0x160>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001756:	4b11      	ldr	r3, [pc, #68]	@ (800179c <HAL_UART_MspInit+0x160>)
 8001758:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001764:	230c      	movs	r3, #12
 8001766:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	2300      	movs	r3, #0
 8001778:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800177c:	2307      	movs	r3, #7
 800177e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001786:	4619      	mov	r1, r3
 8001788:	4807      	ldr	r0, [pc, #28]	@ (80017a8 <HAL_UART_MspInit+0x16c>)
 800178a:	f001 faf3 	bl	8002d74 <HAL_GPIO_Init>
}
 800178e:	bf00      	nop
 8001790:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40013800 	.word	0x40013800
 800179c:	44020c00 	.word	0x44020c00
 80017a0:	42020400 	.word	0x42020400
 80017a4:	40004400 	.word	0x40004400
 80017a8:	42020000 	.word	0x42020000

080017ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <NMI_Handler+0x4>

080017b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <HardFault_Handler+0x4>

080017bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <MemManage_Handler+0x4>

080017c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <BusFault_Handler+0x4>

080017cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d0:	bf00      	nop
 80017d2:	e7fd      	b.n	80017d0 <UsageFault_Handler+0x4>

080017d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001802:	f000 fa2d 	bl	8001c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001810:	4802      	ldr	r0, [pc, #8]	@ (800181c <FDCAN1_IT0_IRQHandler+0x10>)
 8001812:	f001 f837 	bl	8002884 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	2000008c 	.word	0x2000008c

08001820 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001824:	4802      	ldr	r0, [pc, #8]	@ (8001830 <FDCAN1_IT1_IRQHandler+0x10>)
 8001826:	f001 f82d 	bl	8002884 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	2000008c 	.word	0x2000008c

08001834 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 Break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001838:	4802      	ldr	r0, [pc, #8]	@ (8001844 <TIM1_BRK_IRQHandler+0x10>)
 800183a:	f006 fb47 	bl	8007ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000144 	.word	0x20000144

08001848 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800184c:	4802      	ldr	r0, [pc, #8]	@ (8001858 <TIM1_UP_IRQHandler+0x10>)
 800184e:	f006 fb3d 	bl	8007ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000144 	.word	0x20000144

0800185c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 Trigger and Commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001860:	4802      	ldr	r0, [pc, #8]	@ (800186c <TIM1_TRG_COM_IRQHandler+0x10>)
 8001862:	f006 fb33 	bl	8007ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000144 	.word	0x20000144

08001870 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 Capture Compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001874:	4802      	ldr	r0, [pc, #8]	@ (8001880 <TIM1_CC_IRQHandler+0x10>)
 8001876:	f006 fb29 	bl	8007ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000144 	.word	0x20000144

08001884 <ICACHE_IRQHandler>:

/**
  * @brief This function handles Instruction cache global interrupt.
  */
void ICACHE_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ICACHE_IRQn 0 */

  /* USER CODE END ICACHE_IRQn 0 */
  HAL_ICACHE_IRQHandler();
 8001888:	f001 fd5a 	bl	8003340 <HAL_ICACHE_IRQHandler>
  /* USER CODE BEGIN ICACHE_IRQn 1 */

  /* USER CODE END ICACHE_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}

08001890 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	e00a      	b.n	80018b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018a2:	f3af 8000 	nop.w
 80018a6:	4601      	mov	r1, r0
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	1c5a      	adds	r2, r3, #1
 80018ac:	60ba      	str	r2, [r7, #8]
 80018ae:	b2ca      	uxtb	r2, r1
 80018b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	3301      	adds	r3, #1
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	429a      	cmp	r2, r3
 80018be:	dbf0      	blt.n	80018a2 <_read+0x12>
  }

  return len;
 80018c0:	687b      	ldr	r3, [r7, #4]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b086      	sub	sp, #24
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	e009      	b.n	80018f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	1c5a      	adds	r2, r3, #1
 80018e0:	60ba      	str	r2, [r7, #8]
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7fe fe61 	bl	80005ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	3301      	adds	r3, #1
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	dbf1      	blt.n	80018dc <_write+0x12>
  }
  return len;
 80018f8:	687b      	ldr	r3, [r7, #4]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <_close>:

int _close(int file)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800190a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800192a:	605a      	str	r2, [r3, #4]
  return 0;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <_isatty>:

int _isatty(int file)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001942:	2301      	movs	r3, #1
}
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001974:	4a14      	ldr	r2, [pc, #80]	@ (80019c8 <_sbrk+0x5c>)
 8001976:	4b15      	ldr	r3, [pc, #84]	@ (80019cc <_sbrk+0x60>)
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001980:	4b13      	ldr	r3, [pc, #76]	@ (80019d0 <_sbrk+0x64>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d102      	bne.n	800198e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001988:	4b11      	ldr	r3, [pc, #68]	@ (80019d0 <_sbrk+0x64>)
 800198a:	4a12      	ldr	r2, [pc, #72]	@ (80019d4 <_sbrk+0x68>)
 800198c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800198e:	4b10      	ldr	r3, [pc, #64]	@ (80019d0 <_sbrk+0x64>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	429a      	cmp	r2, r3
 800199a:	d207      	bcs.n	80019ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800199c:	f008 fdc0 	bl	800a520 <__errno>
 80019a0:	4603      	mov	r3, r0
 80019a2:	220c      	movs	r2, #12
 80019a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295
 80019aa:	e009      	b.n	80019c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019ac:	4b08      	ldr	r3, [pc, #32]	@ (80019d0 <_sbrk+0x64>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019b2:	4b07      	ldr	r3, [pc, #28]	@ (80019d0 <_sbrk+0x64>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	4a05      	ldr	r2, [pc, #20]	@ (80019d0 <_sbrk+0x64>)
 80019bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019be:	68fb      	ldr	r3, [r7, #12]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20044000 	.word	0x20044000
 80019cc:	00000400 	.word	0x00000400
 80019d0:	20000354 	.word	0x20000354
 80019d4:	200004a8 	.word	0x200004a8

080019d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019de:	4b35      	ldr	r3, [pc, #212]	@ (8001ab4 <SystemInit+0xdc>)
 80019e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019e4:	4a33      	ldr	r2, [pc, #204]	@ (8001ab4 <SystemInit+0xdc>)
 80019e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019ea:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80019ee:	4b32      	ldr	r3, [pc, #200]	@ (8001ab8 <SystemInit+0xe0>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80019f4:	4b30      	ldr	r3, [pc, #192]	@ (8001ab8 <SystemInit+0xe0>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80019fa:	4b2f      	ldr	r3, [pc, #188]	@ (8001ab8 <SystemInit+0xe0>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001a00:	4b2d      	ldr	r3, [pc, #180]	@ (8001ab8 <SystemInit+0xe0>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	492c      	ldr	r1, [pc, #176]	@ (8001ab8 <SystemInit+0xe0>)
 8001a06:	4b2d      	ldr	r3, [pc, #180]	@ (8001abc <SystemInit+0xe4>)
 8001a08:	4013      	ands	r3, r2
 8001a0a:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ab8 <SystemInit+0xe0>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001a12:	4b29      	ldr	r3, [pc, #164]	@ (8001ab8 <SystemInit+0xe0>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001a18:	4b27      	ldr	r3, [pc, #156]	@ (8001ab8 <SystemInit+0xe0>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001a1e:	4b26      	ldr	r3, [pc, #152]	@ (8001ab8 <SystemInit+0xe0>)
 8001a20:	4a27      	ldr	r2, [pc, #156]	@ (8001ac0 <SystemInit+0xe8>)
 8001a22:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001a24:	4b24      	ldr	r3, [pc, #144]	@ (8001ab8 <SystemInit+0xe0>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001a2a:	4b23      	ldr	r3, [pc, #140]	@ (8001ab8 <SystemInit+0xe0>)
 8001a2c:	4a24      	ldr	r2, [pc, #144]	@ (8001ac0 <SystemInit+0xe8>)
 8001a2e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001a30:	4b21      	ldr	r3, [pc, #132]	@ (8001ab8 <SystemInit+0xe0>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001a36:	4b20      	ldr	r3, [pc, #128]	@ (8001ab8 <SystemInit+0xe0>)
 8001a38:	4a21      	ldr	r2, [pc, #132]	@ (8001ac0 <SystemInit+0xe8>)
 8001a3a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab8 <SystemInit+0xe0>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001a42:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab8 <SystemInit+0xe0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a1c      	ldr	r2, [pc, #112]	@ (8001ab8 <SystemInit+0xe0>)
 8001a48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a4c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab8 <SystemInit+0xe0>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a54:	4b17      	ldr	r3, [pc, #92]	@ (8001ab4 <SystemInit+0xdc>)
 8001a56:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001a5a:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001a5c:	4b19      	ldr	r3, [pc, #100]	@ (8001ac4 <SystemInit+0xec>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001a64:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001a6c:	d003      	beq.n	8001a76 <SystemInit+0x9e>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001a74:	d117      	bne.n	8001aa6 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001a76:	4b13      	ldr	r3, [pc, #76]	@ (8001ac4 <SystemInit+0xec>)
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d005      	beq.n	8001a8e <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001a82:	4b10      	ldr	r3, [pc, #64]	@ (8001ac4 <SystemInit+0xec>)
 8001a84:	4a10      	ldr	r2, [pc, #64]	@ (8001ac8 <SystemInit+0xf0>)
 8001a86:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001a88:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac4 <SystemInit+0xec>)
 8001a8a:	4a10      	ldr	r2, [pc, #64]	@ (8001acc <SystemInit+0xf4>)
 8001a8c:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac4 <SystemInit+0xec>)
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	4a0c      	ldr	r2, [pc, #48]	@ (8001ac4 <SystemInit+0xec>)
 8001a94:	f043 0302 	orr.w	r3, r3, #2
 8001a98:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac4 <SystemInit+0xec>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	4a09      	ldr	r2, [pc, #36]	@ (8001ac4 <SystemInit+0xec>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	61d3      	str	r3, [r2, #28]
  }
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	e000ed00 	.word	0xe000ed00
 8001ab8:	44020c00 	.word	0x44020c00
 8001abc:	eae2eae3 	.word	0xeae2eae3
 8001ac0:	01010280 	.word	0x01010280
 8001ac4:	40022000 	.word	0x40022000
 8001ac8:	08192a3b 	.word	0x08192a3b
 8001acc:	4c5d6e7f 	.word	0x4c5d6e7f

08001ad0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ad0:	480d      	ldr	r0, [pc, #52]	@ (8001b08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ad2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ad4:	f7ff ff80 	bl	80019d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
	  ldr r0, =_sdata
 8001ad8:	480c      	ldr	r0, [pc, #48]	@ (8001b0c <LoopForever+0x6>)
  ldr r1, =_edata
 8001ada:	490d      	ldr	r1, [pc, #52]	@ (8001b10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001adc:	4a0d      	ldr	r2, [pc, #52]	@ (8001b14 <LoopForever+0xe>)
  movs r3, #0
 8001ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ae0:	e002      	b.n	8001ae8 <LoopCopyDataInit>

08001ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ae2:	58d4      	ldr	r4, [r2, r3]
	  str r4, [r0, r3]
 8001ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ae6:	3304      	adds	r3, #4

08001ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aec:	d3f9      	bcc.n	8001ae2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aee:	4a0a      	ldr	r2, [pc, #40]	@ (8001b18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001af0:	4c0a      	ldr	r4, [pc, #40]	@ (8001b1c <LoopForever+0x16>)
  movs r3, #0
 8001af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af4:	e001      	b.n	8001afa <LoopFillZerobss>

08001af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af8:	3204      	adds	r2, #4

08001afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001afc:	d3fb      	bcc.n	8001af6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001afe:	f008 fd15 	bl	800a52c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b02:	f7fe fdcd 	bl	80006a0 <main>

08001b06 <LoopForever>:

LoopForever:
    b LoopForever
 8001b06:	e7fe      	b.n	8001b06 <LoopForever>
  ldr   r0, =_estack
 8001b08:	20044000 	.word	0x20044000
	  ldr r0, =_sdata
 8001b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b10:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001b14:	0800b3f8 	.word	0x0800b3f8
  ldr r2, =_sbss
 8001b18:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001b1c:	200004a8 	.word	0x200004a8

08001b20 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b20:	e7fe      	b.n	8001b20 <ADC1_IRQHandler>
	...

08001b24 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b28:	2003      	movs	r0, #3
 8001b2a:	f000 f98a 	bl	8001e42 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001b2e:	f002 fa39 	bl	8003fa4 <HAL_RCC_GetSysClockFreq>
 8001b32:	4602      	mov	r2, r0
 8001b34:	4b0c      	ldr	r3, [pc, #48]	@ (8001b68 <HAL_Init+0x44>)
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	f003 030f 	and.w	r3, r3, #15
 8001b3c:	490b      	ldr	r1, [pc, #44]	@ (8001b6c <HAL_Init+0x48>)
 8001b3e:	5ccb      	ldrb	r3, [r1, r3]
 8001b40:	fa22 f303 	lsr.w	r3, r2, r3
 8001b44:	4a0a      	ldr	r2, [pc, #40]	@ (8001b70 <HAL_Init+0x4c>)
 8001b46:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001b48:	2004      	movs	r0, #4
 8001b4a:	f000 f9cf 	bl	8001eec <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b4e:	200f      	movs	r0, #15
 8001b50:	f000 f810 	bl	8001b74 <HAL_InitTick>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e002      	b.n	8001b64 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b5e:	f7ff fbbf 	bl	80012e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	44020c00 	.word	0x44020c00
 8001b6c:	0800b364 	.word	0x0800b364
 8001b70:	20000008 	.word	0x20000008

08001b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001b80:	4b33      	ldr	r3, [pc, #204]	@ (8001c50 <HAL_InitTick+0xdc>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e05c      	b.n	8001c46 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001b8c:	4b31      	ldr	r3, [pc, #196]	@ (8001c54 <HAL_InitTick+0xe0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	d10c      	bne.n	8001bb2 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001b98:	4b2f      	ldr	r3, [pc, #188]	@ (8001c58 <HAL_InitTick+0xe4>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4b2c      	ldr	r3, [pc, #176]	@ (8001c50 <HAL_InitTick+0xdc>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	e037      	b.n	8001c22 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001bb2:	f000 f9f3 	bl	8001f9c <HAL_SYSTICK_GetCLKSourceConfig>
 8001bb6:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d023      	beq.n	8001c06 <HAL_InitTick+0x92>
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d82d      	bhi.n	8001c20 <HAL_InitTick+0xac>
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_InitTick+0x5e>
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d00d      	beq.n	8001bec <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001bd0:	e026      	b.n	8001c20 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001bd2:	4b21      	ldr	r3, [pc, #132]	@ (8001c58 <HAL_InitTick+0xe4>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c50 <HAL_InitTick+0xdc>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	4619      	mov	r1, r3
 8001bdc:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001be0:	fbb3 f3f1 	udiv	r3, r3, r1
 8001be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be8:	60fb      	str	r3, [r7, #12]
        break;
 8001bea:	e01a      	b.n	8001c22 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001bec:	4b18      	ldr	r3, [pc, #96]	@ (8001c50 <HAL_InitTick+0xdc>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bf6:	fbb3 f3f2 	udiv	r3, r3, r2
 8001bfa:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c02:	60fb      	str	r3, [r7, #12]
        break;
 8001c04:	e00d      	b.n	8001c22 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001c06:	4b12      	ldr	r3, [pc, #72]	@ (8001c50 <HAL_InitTick+0xdc>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c10:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c14:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1c:	60fb      	str	r3, [r7, #12]
        break;
 8001c1e:	e000      	b.n	8001c22 <HAL_InitTick+0xae>
        break;
 8001c20:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f000 f940 	bl	8001ea8 <HAL_SYSTICK_Config>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e009      	b.n	8001c46 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c32:	2200      	movs	r2, #0
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3a:	f000 f90d 	bl	8001e58 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001c3e:	4a07      	ldr	r2, [pc, #28]	@ (8001c5c <HAL_InitTick+0xe8>)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000010 	.word	0x20000010
 8001c54:	e000e010 	.word	0xe000e010
 8001c58:	20000008 	.word	0x20000008
 8001c5c:	2000000c 	.word	0x2000000c

08001c60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c64:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <HAL_IncTick+0x20>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <HAL_IncTick+0x24>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4413      	add	r3, r2
 8001c70:	4a04      	ldr	r2, [pc, #16]	@ (8001c84 <HAL_IncTick+0x24>)
 8001c72:	6013      	str	r3, [r2, #0]
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	20000010 	.word	0x20000010
 8001c84:	20000358 	.word	0x20000358

08001c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c8c:	4b03      	ldr	r3, [pc, #12]	@ (8001c9c <HAL_GetTick+0x14>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	20000358 	.word	0x20000358

08001ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca8:	f7ff ffee 	bl	8001c88 <HAL_GetTick>
 8001cac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb8:	d005      	beq.n	8001cc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce4 <HAL_Delay+0x44>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cc6:	bf00      	nop
 8001cc8:	f7ff ffde 	bl	8001c88 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d8f7      	bhi.n	8001cc8 <HAL_Delay+0x28>
  {
  }
}
 8001cd8:	bf00      	nop
 8001cda:	bf00      	nop
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000010 	.word	0x20000010

08001ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d2c <__NVIC_SetPriorityGrouping+0x44>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d04:	4013      	ands	r3, r2
 8001d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d1a:	4a04      	ldr	r2, [pc, #16]	@ (8001d2c <__NVIC_SetPriorityGrouping+0x44>)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	60d3      	str	r3, [r2, #12]
}
 8001d20:	bf00      	nop
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d34:	4b04      	ldr	r3, [pc, #16]	@ (8001d48 <__NVIC_GetPriorityGrouping+0x18>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	0a1b      	lsrs	r3, r3, #8
 8001d3a:	f003 0307 	and.w	r3, r3, #7
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	db0b      	blt.n	8001d76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d5e:	88fb      	ldrh	r3, [r7, #6]
 8001d60:	f003 021f 	and.w	r2, r3, #31
 8001d64:	4907      	ldr	r1, [pc, #28]	@ (8001d84 <__NVIC_EnableIRQ+0x38>)
 8001d66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d6a:	095b      	lsrs	r3, r3, #5
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000e100 	.word	0xe000e100

08001d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	6039      	str	r1, [r7, #0]
 8001d92:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	db0a      	blt.n	8001db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	490c      	ldr	r1, [pc, #48]	@ (8001dd4 <__NVIC_SetPriority+0x4c>)
 8001da2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001da6:	0112      	lsls	r2, r2, #4
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	440b      	add	r3, r1
 8001dac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db0:	e00a      	b.n	8001dc8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	4908      	ldr	r1, [pc, #32]	@ (8001dd8 <__NVIC_SetPriority+0x50>)
 8001db8:	88fb      	ldrh	r3, [r7, #6]
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	3b04      	subs	r3, #4
 8001dc0:	0112      	lsls	r2, r2, #4
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	761a      	strb	r2, [r3, #24]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	e000e100 	.word	0xe000e100
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b089      	sub	sp, #36	@ 0x24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f1c3 0307 	rsb	r3, r3, #7
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	bf28      	it	cs
 8001dfa:	2304      	movcs	r3, #4
 8001dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3304      	adds	r3, #4
 8001e02:	2b06      	cmp	r3, #6
 8001e04:	d902      	bls.n	8001e0c <NVIC_EncodePriority+0x30>
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3b03      	subs	r3, #3
 8001e0a:	e000      	b.n	8001e0e <NVIC_EncodePriority+0x32>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e10:	f04f 32ff 	mov.w	r2, #4294967295
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43da      	mvns	r2, r3
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	401a      	ands	r2, r3
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e24:	f04f 31ff 	mov.w	r1, #4294967295
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2e:	43d9      	mvns	r1, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e34:	4313      	orrs	r3, r2
         );
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3724      	adds	r7, #36	@ 0x24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff ff4c 	bl	8001ce8 <__NVIC_SetPriorityGrouping>
}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
 8001e64:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e66:	f7ff ff63 	bl	8001d30 <__NVIC_GetPriorityGrouping>
 8001e6a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	68b9      	ldr	r1, [r7, #8]
 8001e70:	6978      	ldr	r0, [r7, #20]
 8001e72:	f7ff ffb3 	bl	8001ddc <NVIC_EncodePriority>
 8001e76:	4602      	mov	r2, r0
 8001e78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e7c:	4611      	mov	r1, r2
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff ff82 	bl	8001d88 <__NVIC_SetPriority>
}
 8001e84:	bf00      	nop
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff ff56 	bl	8001d4c <__NVIC_EnableIRQ>
}
 8001ea0:	bf00      	nop
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001eb8:	d301      	bcc.n	8001ebe <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00d      	b.n	8001eda <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee8 <HAL_SYSTICK_Config+0x40>)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001ec6:	4b08      	ldr	r3, [pc, #32]	@ (8001ee8 <HAL_SYSTICK_Config+0x40>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001ecc:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <HAL_SYSTICK_Config+0x40>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a05      	ldr	r2, [pc, #20]	@ (8001ee8 <HAL_SYSTICK_Config+0x40>)
 8001ed2:	f043 0303 	orr.w	r3, r3, #3
 8001ed6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000e010 	.word	0xe000e010

08001eec <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d844      	bhi.n	8001f84 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001efa:	a201      	add	r2, pc, #4	@ (adr r2, 8001f00 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f00:	08001f23 	.word	0x08001f23
 8001f04:	08001f41 	.word	0x08001f41
 8001f08:	08001f63 	.word	0x08001f63
 8001f0c:	08001f85 	.word	0x08001f85
 8001f10:	08001f15 	.word	0x08001f15
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001f14:	4b1f      	ldr	r3, [pc, #124]	@ (8001f94 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a1e      	ldr	r2, [pc, #120]	@ (8001f94 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f1a:	f043 0304 	orr.w	r3, r3, #4
 8001f1e:	6013      	str	r3, [r2, #0]
      break;
 8001f20:	e031      	b.n	8001f86 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001f22:	4b1c      	ldr	r3, [pc, #112]	@ (8001f94 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a1b      	ldr	r2, [pc, #108]	@ (8001f94 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f28:	f023 0304 	bic.w	r3, r3, #4
 8001f2c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001f98 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001f34:	4a18      	ldr	r2, [pc, #96]	@ (8001f98 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f36:	f023 030c 	bic.w	r3, r3, #12
 8001f3a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001f3e:	e022      	b.n	8001f86 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001f40:	4b14      	ldr	r3, [pc, #80]	@ (8001f94 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a13      	ldr	r2, [pc, #76]	@ (8001f94 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f46:	f023 0304 	bic.w	r3, r3, #4
 8001f4a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001f4c:	4b12      	ldr	r3, [pc, #72]	@ (8001f98 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001f52:	f023 030c 	bic.w	r3, r3, #12
 8001f56:	4a10      	ldr	r2, [pc, #64]	@ (8001f98 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f58:	f043 0304 	orr.w	r3, r3, #4
 8001f5c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001f60:	e011      	b.n	8001f86 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001f62:	4b0c      	ldr	r3, [pc, #48]	@ (8001f94 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a0b      	ldr	r2, [pc, #44]	@ (8001f94 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f68:	f023 0304 	bic.w	r3, r3, #4
 8001f6c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f98 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001f74:	f023 030c 	bic.w	r3, r3, #12
 8001f78:	4a07      	ldr	r2, [pc, #28]	@ (8001f98 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f7a:	f043 0308 	orr.w	r3, r3, #8
 8001f7e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001f82:	e000      	b.n	8001f86 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001f84:	bf00      	nop
  }
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	e000e010 	.word	0xe000e010
 8001f98:	44020c00 	.word	0x44020c00

08001f9c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001fa2:	4b17      	ldr	r3, [pc, #92]	@ (8002000 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d002      	beq.n	8001fb4 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001fae:	2304      	movs	r3, #4
 8001fb0:	607b      	str	r3, [r7, #4]
 8001fb2:	e01e      	b.n	8001ff2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001fb4:	4b13      	ldr	r3, [pc, #76]	@ (8002004 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8001fb6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001fba:	f003 030c 	and.w	r3, r3, #12
 8001fbe:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	2b08      	cmp	r3, #8
 8001fc4:	d00f      	beq.n	8001fe6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	2b08      	cmp	r3, #8
 8001fca:	d80f      	bhi.n	8001fec <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d003      	beq.n	8001fe0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001fd8:	e008      	b.n	8001fec <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	607b      	str	r3, [r7, #4]
        break;
 8001fde:	e008      	b.n	8001ff2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	607b      	str	r3, [r7, #4]
        break;
 8001fe4:	e005      	b.n	8001ff2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	607b      	str	r3, [r7, #4]
        break;
 8001fea:	e002      	b.n	8001ff2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001fec:	2300      	movs	r3, #0
 8001fee:	607b      	str	r3, [r7, #4]
        break;
 8001ff0:	bf00      	nop
    }
  }
  return systick_source;
 8001ff2:	687b      	ldr	r3, [r7, #4]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000e010 	.word	0xe000e010
 8002004:	44020c00 	.word	0x44020c00

08002008 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e147      	b.n	80022aa <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d106      	bne.n	8002034 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff f962 	bl	80012f8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	699a      	ldr	r2, [r3, #24]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0210 	bic.w	r2, r2, #16
 8002042:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002044:	f7ff fe20 	bl	8001c88 <HAL_GetTick>
 8002048:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800204a:	e012      	b.n	8002072 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800204c:	f7ff fe1c 	bl	8001c88 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b0a      	cmp	r3, #10
 8002058:	d90b      	bls.n	8002072 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800205e:	f043 0201 	orr.w	r2, r3, #1
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2203      	movs	r2, #3
 800206a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e11b      	b.n	80022aa <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	f003 0308 	and.w	r3, r3, #8
 800207c:	2b08      	cmp	r3, #8
 800207e:	d0e5      	beq.n	800204c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	699a      	ldr	r2, [r3, #24]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002090:	f7ff fdfa 	bl	8001c88 <HAL_GetTick>
 8002094:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002096:	e012      	b.n	80020be <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002098:	f7ff fdf6 	bl	8001c88 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b0a      	cmp	r3, #10
 80020a4:	d90b      	bls.n	80020be <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020aa:	f043 0201 	orr.w	r2, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2203      	movs	r2, #3
 80020b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e0f5      	b.n	80022aa <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0e5      	beq.n	8002098 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	699a      	ldr	r2, [r3, #24]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0202 	orr.w	r2, r2, #2
 80020da:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a74      	ldr	r2, [pc, #464]	@ (80022b4 <HAL_FDCAN_Init+0x2ac>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d103      	bne.n	80020ee <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80020e6:	4a74      	ldr	r2, [pc, #464]	@ (80022b8 <HAL_FDCAN_Init+0x2b0>)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	7c1b      	ldrb	r3, [r3, #16]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d108      	bne.n	8002108 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	699a      	ldr	r2, [r3, #24]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002104:	619a      	str	r2, [r3, #24]
 8002106:	e007      	b.n	8002118 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	699a      	ldr	r2, [r3, #24]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002116:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	7c5b      	ldrb	r3, [r3, #17]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d108      	bne.n	8002132 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	699a      	ldr	r2, [r3, #24]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800212e:	619a      	str	r2, [r3, #24]
 8002130:	e007      	b.n	8002142 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	699a      	ldr	r2, [r3, #24]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002140:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	7c9b      	ldrb	r3, [r3, #18]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d108      	bne.n	800215c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	699a      	ldr	r2, [r3, #24]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002158:	619a      	str	r2, [r3, #24]
 800215a:	e007      	b.n	800216c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	699a      	ldr	r2, [r3, #24]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800216a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	699a      	ldr	r2, [r3, #24]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002190:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	691a      	ldr	r2, [r3, #16]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0210 	bic.w	r2, r2, #16
 80021a0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d108      	bne.n	80021bc <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	699a      	ldr	r2, [r3, #24]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f042 0204 	orr.w	r2, r2, #4
 80021b8:	619a      	str	r2, [r3, #24]
 80021ba:	e02c      	b.n	8002216 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d028      	beq.n	8002216 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d01c      	beq.n	8002206 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	699a      	ldr	r2, [r3, #24]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80021da:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	691a      	ldr	r2, [r3, #16]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0210 	orr.w	r2, r2, #16
 80021ea:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d110      	bne.n	8002216 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	699a      	ldr	r2, [r3, #24]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 0220 	orr.w	r2, r2, #32
 8002202:	619a      	str	r2, [r3, #24]
 8002204:	e007      	b.n	8002216 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	699a      	ldr	r2, [r3, #24]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f042 0220 	orr.w	r2, r2, #32
 8002214:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	3b01      	subs	r3, #1
 800221c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	3b01      	subs	r3, #1
 8002224:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002226:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800222e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	3b01      	subs	r3, #1
 8002238:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800223e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002240:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800224a:	d115      	bne.n	8002278 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002250:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002256:	3b01      	subs	r3, #1
 8002258:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800225a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002260:	3b01      	subs	r3, #1
 8002262:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002264:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226c:	3b01      	subs	r3, #1
 800226e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002274:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002276:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 fc92 	bl	8002bb8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	4000a400 	.word	0x4000a400
 80022b8:	4000a500 	.word	0x4000a500

080022bc <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80022bc:	b480      	push	{r7}
 80022be:	b087      	sub	sp, #28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80022cc:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80022ce:	7dfb      	ldrb	r3, [r7, #23]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d002      	beq.n	80022da <HAL_FDCAN_ConfigFilter+0x1e>
 80022d4:	7dfb      	ldrb	r3, [r7, #23]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d13d      	bne.n	8002356 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d119      	bne.n	8002316 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80022ee:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80022f6:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	e01d      	b.n	8002352 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	075a      	lsls	r2, r3, #29
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	079a      	lsls	r2, r3, #30
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	4313      	orrs	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4413      	add	r3, r2
 800233e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	3304      	adds	r3, #4
 800234a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	e006      	b.n	8002364 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800235a:	f043 0202 	orr.w	r2, r3, #2
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
  }
}
 8002364:	4618      	mov	r0, r3
 8002366:	371c      	adds	r7, #28
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b01      	cmp	r3, #1
 8002382:	d110      	bne.n	80023a6 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2202      	movs	r2, #2
 8002388:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699a      	ldr	r2, [r3, #24]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0201 	bic.w	r2, r2, #1
 800239a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	e006      	b.n	80023b4 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023aa:	f043 0204 	orr.w	r2, r3, #4
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
  }
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d12c      	bne.n	8002432 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80023e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d007      	beq.n	80023f8 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e023      	b.n	8002440 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002400:	0c1b      	lsrs	r3, r3, #16
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 fc34 	bl	8002c7c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2101      	movs	r1, #1
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	fa01 f202 	lsl.w	r2, r1, r2
 8002420:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002424:	2201      	movs	r2, #1
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	409a      	lsls	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800242e:	2300      	movs	r3, #0
 8002430:	e006      	b.n	8002440 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002436:	f043 0208 	orr.w	r2, r3, #8
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
  }
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8002448:	b480      	push	{r7}
 800244a:	b08b      	sub	sp, #44	@ 0x2c
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002460:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8002462:	7efb      	ldrb	r3, [r7, #27]
 8002464:	2b02      	cmp	r3, #2
 8002466:	f040 80e8 	bne.w	800263a <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	2b40      	cmp	r3, #64	@ 0x40
 800246e:	d137      	bne.n	80024e0 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002478:	f003 030f 	and.w	r3, r3, #15
 800247c:	2b00      	cmp	r3, #0
 800247e:	d107      	bne.n	8002490 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002484:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e0db      	b.n	8002648 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002498:	0e1b      	lsrs	r3, r3, #24
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d10a      	bne.n	80024b8 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024aa:	0a5b      	lsrs	r3, r3, #9
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d101      	bne.n	80024b8 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80024b4:	2301      	movs	r3, #1
 80024b6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024c0:	0a1b      	lsrs	r3, r3, #8
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	69fa      	ldr	r2, [r7, #28]
 80024c8:	4413      	add	r3, r2
 80024ca:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80024d0:	69fa      	ldr	r2, [r7, #28]
 80024d2:	4613      	mov	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4413      	add	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	440b      	add	r3, r1
 80024dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80024de:	e036      	b.n	800254e <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024e8:	f003 030f 	and.w	r3, r3, #15
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d107      	bne.n	8002500 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024f4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e0a3      	b.n	8002648 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002508:	0e1b      	lsrs	r3, r3, #24
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b01      	cmp	r3, #1
 8002510:	d10a      	bne.n	8002528 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800251a:	0a1b      	lsrs	r3, r3, #8
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002524:	2301      	movs	r3, #1
 8002526:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002530:	0a1b      	lsrs	r3, r3, #8
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	69fa      	ldr	r2, [r7, #28]
 8002538:	4413      	add	r3, r2
 800253a:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002540:	69fa      	ldr	r2, [r7, #28]
 8002542:	4613      	mov	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4413      	add	r3, r2
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	440b      	add	r3, r1
 800254c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800254e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d107      	bne.n	8002572 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8002562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	0c9b      	lsrs	r3, r3, #18
 8002568:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	e005      	b.n	800257e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8002572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800257e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800258a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8002596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002598:	3304      	adds	r3, #4
 800259a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800259c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80025a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	0c1b      	lsrs	r3, r3, #16
 80025ac:	f003 020f 	and.w	r2, r3, #15
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80025b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80025c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80025cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	0e1b      	lsrs	r3, r3, #24
 80025d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80025da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	0fda      	lsrs	r2, r3, #31
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80025e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e6:	3304      	adds	r3, #4
 80025e8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80025ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ec:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80025ee:	2300      	movs	r3, #0
 80025f0:	623b      	str	r3, [r7, #32]
 80025f2:	e00a      	b.n	800260a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	441a      	add	r2, r3
 80025fa:	6839      	ldr	r1, [r7, #0]
 80025fc:	6a3b      	ldr	r3, [r7, #32]
 80025fe:	440b      	add	r3, r1
 8002600:	7812      	ldrb	r2, [r2, #0]
 8002602:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	3301      	adds	r3, #1
 8002608:	623b      	str	r3, [r7, #32]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	4a11      	ldr	r2, [pc, #68]	@ (8002654 <HAL_FDCAN_GetRxMessage+0x20c>)
 8002610:	5cd3      	ldrb	r3, [r2, r3]
 8002612:	461a      	mov	r2, r3
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	4293      	cmp	r3, r2
 8002618:	d3ec      	bcc.n	80025f4 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2b40      	cmp	r3, #64	@ 0x40
 800261e:	d105      	bne.n	800262c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	69fa      	ldr	r2, [r7, #28]
 8002626:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800262a:	e004      	b.n	8002636 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	69fa      	ldr	r2, [r7, #28]
 8002632:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8002636:	2300      	movs	r3, #0
 8002638:	e006      	b.n	8002648 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800263e:	f043 0208 	orr.w	r2, r3, #8
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
  }
}
 8002648:	4618      	mov	r0, r3
 800264a:	372c      	adds	r7, #44	@ 0x2c
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	0800b37c 	.word	0x0800b37c

08002658 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(const FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2b40      	cmp	r3, #64	@ 0x40
 8002666:	d107      	bne.n	8002678 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002670:	f003 030f 	and.w	r3, r3, #15
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	e006      	b.n	8002686 <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002680:	f003 030f 	and.w	r3, r3, #15
 8002684:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 8002686:	68fb      	ldr	r3, [r7, #12]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 80026aa:	68fb      	ldr	r3, [r7, #12]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80026ca:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80026cc:	7dfb      	ldrb	r3, [r7, #23]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d003      	beq.n	80026da <HAL_FDCAN_ActivateNotification+0x22>
 80026d2:	7dfb      	ldrb	r3, [r7, #23]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	f040 80c8 	bne.w	800286a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d004      	beq.n	80026f6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d03b      	beq.n	800276e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d004      	beq.n	800270a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d031      	beq.n	800276e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002710:	2b00      	cmp	r3, #0
 8002712:	d004      	beq.n	800271e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	2b00      	cmp	r3, #0
 800271c:	d027      	beq.n	800276e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002724:	2b00      	cmp	r3, #0
 8002726:	d004      	beq.n	8002732 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	f003 0308 	and.w	r3, r3, #8
 800272e:	2b00      	cmp	r3, #0
 8002730:	d01d      	beq.n	800276e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002738:	2b00      	cmp	r3, #0
 800273a:	d004      	beq.n	8002746 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	2b00      	cmp	r3, #0
 8002744:	d013      	beq.n	800276e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800274c:	2b00      	cmp	r3, #0
 800274e:	d004      	beq.n	800275a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	f003 0320 	and.w	r3, r3, #32
 8002756:	2b00      	cmp	r3, #0
 8002758:	d009      	beq.n	800276e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00c      	beq.n	800277e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800276a:	2b00      	cmp	r3, #0
 800276c:	d107      	bne.n	800277e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f042 0201 	orr.w	r2, r2, #1
 800277c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	2b00      	cmp	r3, #0
 8002786:	d004      	beq.n	8002792 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d13b      	bne.n	800280a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002798:	2b00      	cmp	r3, #0
 800279a:	d004      	beq.n	80027a6 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d131      	bne.n	800280a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d004      	beq.n	80027ba <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d127      	bne.n	800280a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d004      	beq.n	80027ce <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d11d      	bne.n	800280a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d004      	beq.n	80027e2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	f003 0310 	and.w	r3, r3, #16
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d113      	bne.n	800280a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d004      	beq.n	80027f6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	f003 0320 	and.w	r3, r3, #32
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d109      	bne.n	800280a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00c      	beq.n	800281a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002806:	2b00      	cmp	r3, #0
 8002808:	d007      	beq.n	800281a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 0202 	orr.w	r2, r2, #2
 8002818:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002820:	2b00      	cmp	r3, #0
 8002822:	d009      	beq.n	8002838 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	430a      	orrs	r2, r1
 8002834:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800283e:	2b00      	cmp	r3, #0
 8002840:	d009      	beq.n	8002856 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	430a      	orrs	r2, r1
 8002852:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	430a      	orrs	r2, r1
 8002864:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8002866:	2300      	movs	r3, #0
 8002868:	e006      	b.n	8002878 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800286e:	f043 0202 	orr.w	r2, r3, #2
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
  }
}
 8002878:	4618      	mov	r0, r3
 800287a:	371c      	adds	r7, #28
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08c      	sub	sp, #48	@ 0x30
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002892:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8002896:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800289e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028a0:	4013      	ands	r3, r2
 80028a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028b8:	4013      	ands	r3, r2
 80028ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028c6:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028d0:	4013      	ands	r3, r2
 80028d2:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028da:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80028de:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e6:	6a3a      	ldr	r2, [r7, #32]
 80028e8:	4013      	ands	r3, r2
 80028ea:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028f2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80028f6:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028fe:	69fa      	ldr	r2, [r7, #28]
 8002900:	4013      	ands	r3, r2
 8002902:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800290a:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002912:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00b      	beq.n	8002936 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002924:	2b00      	cmp	r3, #0
 8002926:	d006      	beq.n	8002936 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2240      	movs	r2, #64	@ 0x40
 800292e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f916 	bl	8002b62 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800293c:	2b00      	cmp	r3, #0
 800293e:	d019      	beq.n	8002974 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002946:	2b00      	cmp	r3, #0
 8002948:	d014      	beq.n	8002974 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002952:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	4013      	ands	r3, r2
 8002960:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800296a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800296c:	6939      	ldr	r1, [r7, #16]
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f8d8 	bl	8002b24 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002976:	2b00      	cmp	r3, #0
 8002978:	d007      	beq.n	800298a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002980:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002982:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f8a2 	bl	8002ace <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800298a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800298c:	2b00      	cmp	r3, #0
 800298e:	d007      	beq.n	80029a0 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002996:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002998:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7fe fba6 	bl	80010ec <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80029a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d007      	beq.n	80029b6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ac:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80029ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 f897 	bl	8002ae4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00c      	beq.n	80029da <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d007      	beq.n	80029da <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029d2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 f890 	bl	8002afa <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d018      	beq.n	8002a16 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d013      	beq.n	8002a16 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80029f6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4013      	ands	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2280      	movs	r2, #128	@ 0x80
 8002a0c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002a0e:	68f9      	ldr	r1, [r7, #12]
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 f87c 	bl	8002b0e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00c      	beq.n	8002a3a <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d007      	beq.n	8002a3a <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a32:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f880 	bl	8002b3a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00c      	beq.n	8002a5e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d007      	beq.n	8002a5e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002a56:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 f878 	bl	8002b4e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00f      	beq.n	8002a88 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00a      	beq.n	8002a88 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a7a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a80:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d007      	beq.n	8002a9e <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	69fa      	ldr	r2, [r7, #28]
 8002a94:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002a96:	69f9      	ldr	r1, [r7, #28]
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f876 	bl	8002b8a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d009      	beq.n	8002ab8 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6a3a      	ldr	r2, [r7, #32]
 8002aaa:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d002      	beq.n	8002ac6 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 f858 	bl	8002b76 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002ac6:	bf00      	nop
 8002ac8:	3730      	adds	r7, #48	@ 0x30
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
 8002ad6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_FDCAN_GetError>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval FDCAN Error Code
  */
uint32_t HAL_FDCAN_GetError(const FDCAN_HandleTypeDef *hfdcan)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Return FDCAN error code */
  return hfdcan->ErrorCode;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002bc0:	4b2c      	ldr	r3, [pc, #176]	@ (8002c74 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8002bc2:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a2b      	ldr	r2, [pc, #172]	@ (8002c78 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d103      	bne.n	8002bd6 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002bd4:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002be4:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bec:	041a      	lsls	r2, r3, #16
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c0a:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c12:	061a      	lsls	r2, r3, #24
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	e005      	b.n	8002c58 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	3304      	adds	r3, #4
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d3f3      	bcc.n	8002c4c <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8002c64:	bf00      	nop
 8002c66:	bf00      	nop
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	4000ac00 	.word	0x4000ac00
 8002c78:	4000a800 	.word	0x4000a800

08002c7c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b089      	sub	sp, #36	@ 0x24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
 8002c88:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10a      	bne.n	8002ca8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002c9a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61fb      	str	r3, [r7, #28]
 8002ca6:	e00a      	b.n	8002cbe <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002cb0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002cb6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002cb8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002cbc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002cc8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002cce:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002cd4:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	4413      	add	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	440b      	add	r3, r1
 8002cf0:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	69fa      	ldr	r2, [r7, #28]
 8002cf6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	3304      	adds	r3, #4
 8002cfc:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	3304      	adds	r3, #4
 8002d08:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	e020      	b.n	8002d52 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	3303      	adds	r3, #3
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	4413      	add	r3, r2
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	3302      	adds	r3, #2
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	440b      	add	r3, r1
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002d28:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	440b      	add	r3, r1
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002d36:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	440a      	add	r2, r1
 8002d3e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002d40:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	3304      	adds	r3, #4
 8002d4a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	3304      	adds	r3, #4
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	4a06      	ldr	r2, [pc, #24]	@ (8002d70 <FDCAN_CopyMessageToRAM+0xf4>)
 8002d58:	5cd3      	ldrb	r3, [r2, r3]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d3d6      	bcc.n	8002d10 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8002d62:	bf00      	nop
 8002d64:	bf00      	nop
 8002d66:	3724      	adds	r7, #36	@ 0x24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	0800b37c 	.word	0x0800b37c

08002d74 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002d82:	e136      	b.n	8002ff2 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	2101      	movs	r1, #1
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d90:	4013      	ands	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 8128 	beq.w	8002fec <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d003      	beq.n	8002dac <HAL_GPIO_Init+0x38>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b12      	cmp	r3, #18
 8002daa:	d125      	bne.n	8002df8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	08da      	lsrs	r2, r3, #3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3208      	adds	r2, #8
 8002db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002db8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	220f      	movs	r2, #15
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	f003 020f 	and.w	r2, r3, #15
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	08da      	lsrs	r2, r3, #3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	3208      	adds	r2, #8
 8002df2:	6979      	ldr	r1, [r7, #20]
 8002df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	2203      	movs	r2, #3
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 0203 	and.w	r2, r3, #3
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d00b      	beq.n	8002e4c <HAL_GPIO_Init+0xd8>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d007      	beq.n	8002e4c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e40:	2b11      	cmp	r3, #17
 8002e42:	d003      	beq.n	8002e4c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b12      	cmp	r3, #18
 8002e4a:	d130      	bne.n	8002eae <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	2203      	movs	r2, #3
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	4013      	ands	r3, r2
 8002e62:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e82:	2201      	movs	r2, #1
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	091b      	lsrs	r3, r3, #4
 8002e98:	f003 0201 	and.w	r2, r3, #1
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d017      	beq.n	8002ee6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	2203      	movs	r2, #3
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d07c      	beq.n	8002fec <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002ef2:	4a47      	ldr	r2, [pc, #284]	@ (8003010 <HAL_GPIO_Init+0x29c>)
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	089b      	lsrs	r3, r3, #2
 8002ef8:	3318      	adds	r3, #24
 8002efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002efe:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	220f      	movs	r2, #15
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	4013      	ands	r3, r2
 8002f14:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	0a9a      	lsrs	r2, r3, #10
 8002f1a:	4b3e      	ldr	r3, [pc, #248]	@ (8003014 <HAL_GPIO_Init+0x2a0>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	f002 0203 	and.w	r2, r2, #3
 8002f24:	00d2      	lsls	r2, r2, #3
 8002f26:	4093      	lsls	r3, r2
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002f2e:	4938      	ldr	r1, [pc, #224]	@ (8003010 <HAL_GPIO_Init+0x29c>)
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	089b      	lsrs	r3, r3, #2
 8002f34:	3318      	adds	r3, #24
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002f3c:	4b34      	ldr	r3, [pc, #208]	@ (8003010 <HAL_GPIO_Init+0x29c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	43db      	mvns	r3, r3
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002f60:	4a2b      	ldr	r2, [pc, #172]	@ (8003010 <HAL_GPIO_Init+0x29c>)
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002f66:	4b2a      	ldr	r3, [pc, #168]	@ (8003010 <HAL_GPIO_Init+0x29c>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	4013      	ands	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002f8a:	4a21      	ldr	r2, [pc, #132]	@ (8003010 <HAL_GPIO_Init+0x29c>)
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002f90:	4b1f      	ldr	r3, [pc, #124]	@ (8003010 <HAL_GPIO_Init+0x29c>)
 8002f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f96:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002fb6:	4a16      	ldr	r2, [pc, #88]	@ (8003010 <HAL_GPIO_Init+0x29c>)
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002fbe:	4b14      	ldr	r3, [pc, #80]	@ (8003010 <HAL_GPIO_Init+0x29c>)
 8002fc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fc4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002fe4:	4a0a      	ldr	r2, [pc, #40]	@ (8003010 <HAL_GPIO_Init+0x29c>)
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f47f aec1 	bne.w	8002d84 <HAL_GPIO_Init+0x10>
  }
}
 8003002:	bf00      	nop
 8003004:	bf00      	nop
 8003006:	371c      	adds	r7, #28
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	44022000 	.word	0x44022000
 8003014:	002f7f7f 	.word	0x002f7f7f

08003018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	460b      	mov	r3, r1
 8003022:	807b      	strh	r3, [r7, #2]
 8003024:	4613      	mov	r3, r2
 8003026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003028:	787b      	ldrb	r3, [r7, #1]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800302e:	887a      	ldrh	r2, [r7, #2]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003034:	e002      	b.n	800303c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003036:	887a      	ldrh	r2, [r7, #2]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800305a:	887a      	ldrh	r2, [r7, #2]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4013      	ands	r3, r2
 8003060:	041a      	lsls	r2, r3, #16
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	43d9      	mvns	r1, r3
 8003066:	887b      	ldrh	r3, [r7, #2]
 8003068:	400b      	ands	r3, r1
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	619a      	str	r2, [r3, #24]
}
 8003070:	bf00      	nop
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e08d      	b.n	80031aa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d106      	bne.n	80030a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7fe f9a2 	bl	80013ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2224      	movs	r2, #36	@ 0x24
 80030ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 0201 	bic.w	r2, r2, #1
 80030be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d107      	bne.n	80030f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030f2:	609a      	str	r2, [r3, #8]
 80030f4:	e006      	b.n	8003104 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003102:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d108      	bne.n	800311e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800311a:	605a      	str	r2, [r3, #4]
 800311c:	e007      	b.n	800312e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800312c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6812      	ldr	r2, [r2, #0]
 8003138:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800313c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003140:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68da      	ldr	r2, [r3, #12]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003150:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691a      	ldr	r2, [r3, #16]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	69d9      	ldr	r1, [r3, #28]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a1a      	ldr	r2, [r3, #32]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0201 	orr.w	r2, r2, #1
 800318a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2220      	movs	r2, #32
 8003196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b20      	cmp	r3, #32
 80031c6:	d138      	bne.n	800323a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e032      	b.n	800323c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2224      	movs	r2, #36	@ 0x24
 80031e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0201 	bic.w	r2, r2, #1
 80031f4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003204:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6819      	ldr	r1, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f042 0201 	orr.w	r2, r2, #1
 8003224:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2220      	movs	r2, #32
 800322a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003236:	2300      	movs	r3, #0
 8003238:	e000      	b.n	800323c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800323a:	2302      	movs	r3, #2
  }
}
 800323c:	4618      	mov	r0, r3
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b20      	cmp	r3, #32
 800325c:	d139      	bne.n	80032d2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003268:	2302      	movs	r3, #2
 800326a:	e033      	b.n	80032d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2224      	movs	r2, #36	@ 0x24
 8003278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0201 	bic.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800329a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	021b      	lsls	r3, r3, #8
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 0201 	orr.w	r2, r2, #1
 80032bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2220      	movs	r2, #32
 80032c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032ce:	2300      	movs	r3, #0
 80032d0:	e000      	b.n	80032d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032d2:	2302      	movs	r3, #2
  }
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032e8:	2300      	movs	r3, #0
 80032ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80032ec:	4b0b      	ldr	r3, [pc, #44]	@ (800331c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d002      	beq.n	80032fe <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	73fb      	strb	r3, [r7, #15]
 80032fc:	e007      	b.n	800330e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80032fe:	4b07      	ldr	r3, [pc, #28]	@ (800331c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f023 0204 	bic.w	r2, r3, #4
 8003306:	4905      	ldr	r1, [pc, #20]	@ (800331c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4313      	orrs	r3, r2
 800330c:	600b      	str	r3, [r1, #0]
  }

  return status;
 800330e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	40030400 	.word	0x40030400

08003320 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003324:	4b05      	ldr	r3, [pc, #20]	@ (800333c <HAL_ICACHE_Enable+0x1c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a04      	ldr	r2, [pc, #16]	@ (800333c <HAL_ICACHE_Enable+0x1c>)
 800332a:	f043 0301 	orr.w	r3, r3, #1
 800332e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	40030400 	.word	0x40030400

08003340 <HAL_ICACHE_IRQHandler>:
  * @note This function respectively disables the interrupt and clears the
  *       flag of any pending flag before calling the associated user callback.
  * @retval None
  */
void HAL_ICACHE_IRQHandler(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
  /* Get current interrupt flags and interrupt sources value */
  uint32_t itflags   = READ_REG(ICACHE->SR);
 8003346:	4b17      	ldr	r3, [pc, #92]	@ (80033a4 <HAL_ICACHE_IRQHandler+0x64>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	607b      	str	r3, [r7, #4]
  uint32_t itsources = READ_REG(ICACHE->IER);
 800334c:	4b15      	ldr	r3, [pc, #84]	@ (80033a4 <HAL_ICACHE_IRQHandler+0x64>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	603b      	str	r3, [r7, #0]

  /* Check Instruction cache Error interrupt flag */
  if (((itflags & itsources) & ICACHE_FLAG_ERROR) != 0U)
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	4013      	ands	r3, r2
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <HAL_ICACHE_IRQHandler+0x36>
  {
    /* Disable error interrupt */
    CLEAR_BIT(ICACHE->IER, ICACHE_IER_ERRIE);
 8003360:	4b10      	ldr	r3, [pc, #64]	@ (80033a4 <HAL_ICACHE_IRQHandler+0x64>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	4a0f      	ldr	r2, [pc, #60]	@ (80033a4 <HAL_ICACHE_IRQHandler+0x64>)
 8003366:	f023 0304 	bic.w	r3, r3, #4
 800336a:	6093      	str	r3, [r2, #8]

    /* Clear ERR pending flag */
    WRITE_REG(ICACHE->FCR, ICACHE_FCR_CERRF);
 800336c:	4b0d      	ldr	r3, [pc, #52]	@ (80033a4 <HAL_ICACHE_IRQHandler+0x64>)
 800336e:	2204      	movs	r2, #4
 8003370:	60da      	str	r2, [r3, #12]

    /* Instruction cache error interrupt user callback */
    HAL_ICACHE_ErrorCallback();
 8003372:	f000 f820 	bl	80033b6 <HAL_ICACHE_ErrorCallback>
  }

  /* Check Instruction cache BusyEnd interrupt flag */
  if (((itflags & itsources) & ICACHE_FLAG_BUSYEND) != 0U)
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	4013      	ands	r3, r2
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00a      	beq.n	800339a <HAL_ICACHE_IRQHandler+0x5a>
  {
    /* Disable end of cache invalidation interrupt */
    CLEAR_BIT(ICACHE->IER, ICACHE_IER_BSYENDIE);
 8003384:	4b07      	ldr	r3, [pc, #28]	@ (80033a4 <HAL_ICACHE_IRQHandler+0x64>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	4a06      	ldr	r2, [pc, #24]	@ (80033a4 <HAL_ICACHE_IRQHandler+0x64>)
 800338a:	f023 0302 	bic.w	r3, r3, #2
 800338e:	6093      	str	r3, [r2, #8]

    /* Clear BSYENDF pending flag */
    WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 8003390:	4b04      	ldr	r3, [pc, #16]	@ (80033a4 <HAL_ICACHE_IRQHandler+0x64>)
 8003392:	2202      	movs	r2, #2
 8003394:	60da      	str	r2, [r3, #12]

    /* Instruction cache busyend interrupt user callback */
    HAL_ICACHE_InvalidateCompleteCallback();
 8003396:	f000 f807 	bl	80033a8 <HAL_ICACHE_InvalidateCompleteCallback>
  }
}
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40030400 	.word	0x40030400

080033a8 <HAL_ICACHE_InvalidateCompleteCallback>:

/**
  * @brief  Cache invalidation complete callback.
  */
__weak void HAL_ICACHE_InvalidateCompleteCallback(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_ICACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 80033ac:	bf00      	nop
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <HAL_ICACHE_ErrorCallback>:

/**
  * @brief  Error callback.
  */
__weak void HAL_ICACHE_ErrorCallback(void)
{
 80033b6:	b480      	push	{r7}
 80033b8:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_ICACHE_ErrorCallback() should be implemented in the user file
   */
}
 80033ba:	bf00      	nop
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b088      	sub	sp, #32
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d102      	bne.n	80033d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	f000 bc28 	b.w	8003c28 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033d8:	4b94      	ldr	r3, [pc, #592]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	f003 0318 	and.w	r3, r3, #24
 80033e0:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80033e2:	4b92      	ldr	r3, [pc, #584]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 80033e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0310 	and.w	r3, r3, #16
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d05b      	beq.n	80034b0 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	2b08      	cmp	r3, #8
 80033fc:	d005      	beq.n	800340a <HAL_RCC_OscConfig+0x46>
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	2b18      	cmp	r3, #24
 8003402:	d114      	bne.n	800342e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	2b02      	cmp	r3, #2
 8003408:	d111      	bne.n	800342e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d102      	bne.n	8003418 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	f000 bc08 	b.w	8003c28 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003418:	4b84      	ldr	r3, [pc, #528]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	041b      	lsls	r3, r3, #16
 8003426:	4981      	ldr	r1, [pc, #516]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 8003428:	4313      	orrs	r3, r2
 800342a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800342c:	e040      	b.n	80034b0 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d023      	beq.n	800347e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003436:	4b7d      	ldr	r3, [pc, #500]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a7c      	ldr	r2, [pc, #496]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 800343c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003442:	f7fe fc21 	bl	8001c88 <HAL_GetTick>
 8003446:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800344a:	f7fe fc1d 	bl	8001c88 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e3e5      	b.n	8003c28 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800345c:	4b73      	ldr	r3, [pc, #460]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0f0      	beq.n	800344a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003468:	4b70      	ldr	r3, [pc, #448]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	041b      	lsls	r3, r3, #16
 8003476:	496d      	ldr	r1, [pc, #436]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 8003478:	4313      	orrs	r3, r2
 800347a:	618b      	str	r3, [r1, #24]
 800347c:	e018      	b.n	80034b0 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800347e:	4b6b      	ldr	r3, [pc, #428]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a6a      	ldr	r2, [pc, #424]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 8003484:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348a:	f7fe fbfd 	bl	8001c88 <HAL_GetTick>
 800348e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003490:	e008      	b.n	80034a4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003492:	f7fe fbf9 	bl	8001c88 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e3c1      	b.n	8003c28 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80034a4:	4b61      	ldr	r3, [pc, #388]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1f0      	bne.n	8003492 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 80a0 	beq.w	80035fe <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	2b10      	cmp	r3, #16
 80034c2:	d005      	beq.n	80034d0 <HAL_RCC_OscConfig+0x10c>
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	2b18      	cmp	r3, #24
 80034c8:	d109      	bne.n	80034de <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	2b03      	cmp	r3, #3
 80034ce:	d106      	bne.n	80034de <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f040 8092 	bne.w	80035fe <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e3a4      	b.n	8003c28 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034e6:	d106      	bne.n	80034f6 <HAL_RCC_OscConfig+0x132>
 80034e8:	4b50      	ldr	r3, [pc, #320]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a4f      	ldr	r2, [pc, #316]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 80034ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034f2:	6013      	str	r3, [r2, #0]
 80034f4:	e058      	b.n	80035a8 <HAL_RCC_OscConfig+0x1e4>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d112      	bne.n	8003524 <HAL_RCC_OscConfig+0x160>
 80034fe:	4b4b      	ldr	r3, [pc, #300]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a4a      	ldr	r2, [pc, #296]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 8003504:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	4b48      	ldr	r3, [pc, #288]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a47      	ldr	r2, [pc, #284]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 8003510:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	4b45      	ldr	r3, [pc, #276]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a44      	ldr	r2, [pc, #272]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 800351c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	e041      	b.n	80035a8 <HAL_RCC_OscConfig+0x1e4>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800352c:	d112      	bne.n	8003554 <HAL_RCC_OscConfig+0x190>
 800352e:	4b3f      	ldr	r3, [pc, #252]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a3e      	ldr	r2, [pc, #248]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 8003534:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	4b3c      	ldr	r3, [pc, #240]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a3b      	ldr	r2, [pc, #236]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 8003540:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	4b39      	ldr	r3, [pc, #228]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a38      	ldr	r2, [pc, #224]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 800354c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	e029      	b.n	80035a8 <HAL_RCC_OscConfig+0x1e4>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800355c:	d112      	bne.n	8003584 <HAL_RCC_OscConfig+0x1c0>
 800355e:	4b33      	ldr	r3, [pc, #204]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a32      	ldr	r2, [pc, #200]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 8003564:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	4b30      	ldr	r3, [pc, #192]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a2f      	ldr	r2, [pc, #188]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 8003570:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	4b2d      	ldr	r3, [pc, #180]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a2c      	ldr	r2, [pc, #176]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 800357c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	e011      	b.n	80035a8 <HAL_RCC_OscConfig+0x1e4>
 8003584:	4b29      	ldr	r3, [pc, #164]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a28      	ldr	r2, [pc, #160]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 800358a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800358e:	6013      	str	r3, [r2, #0]
 8003590:	4b26      	ldr	r3, [pc, #152]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a25      	ldr	r2, [pc, #148]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 8003596:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800359a:	6013      	str	r3, [r2, #0]
 800359c:	4b23      	ldr	r3, [pc, #140]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a22      	ldr	r2, [pc, #136]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 80035a2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80035a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d013      	beq.n	80035d8 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b0:	f7fe fb6a 	bl	8001c88 <HAL_GetTick>
 80035b4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80035b8:	f7fe fb66 	bl	8001c88 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b64      	cmp	r3, #100	@ 0x64
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e32e      	b.n	8003c28 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ca:	4b18      	ldr	r3, [pc, #96]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0f0      	beq.n	80035b8 <HAL_RCC_OscConfig+0x1f4>
 80035d6:	e012      	b.n	80035fe <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d8:	f7fe fb56 	bl	8001c88 <HAL_GetTick>
 80035dc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80035e0:	f7fe fb52 	bl	8001c88 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b64      	cmp	r3, #100	@ 0x64
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e31a      	b.n	8003c28 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035f2:	4b0e      	ldr	r3, [pc, #56]	@ (800362c <HAL_RCC_OscConfig+0x268>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1f0      	bne.n	80035e0 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 809a 	beq.w	8003740 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d005      	beq.n	800361e <HAL_RCC_OscConfig+0x25a>
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	2b18      	cmp	r3, #24
 8003616:	d149      	bne.n	80036ac <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d146      	bne.n	80036ac <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d104      	bne.n	8003630 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e2fe      	b.n	8003c28 <HAL_RCC_OscConfig+0x864>
 800362a:	bf00      	nop
 800362c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d11c      	bne.n	8003670 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8003636:	4b9a      	ldr	r3, [pc, #616]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0218 	and.w	r2, r3, #24
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	429a      	cmp	r2, r3
 8003644:	d014      	beq.n	8003670 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003646:	4b96      	ldr	r3, [pc, #600]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f023 0218 	bic.w	r2, r3, #24
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	4993      	ldr	r1, [pc, #588]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 8003654:	4313      	orrs	r3, r2
 8003656:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003658:	f000 fdd0 	bl	80041fc <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800365c:	4b91      	ldr	r3, [pc, #580]	@ (80038a4 <HAL_RCC_OscConfig+0x4e0>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f7fe fa87 	bl	8001b74 <HAL_InitTick>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e2db      	b.n	8003c28 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003670:	f7fe fb0a 	bl	8001c88 <HAL_GetTick>
 8003674:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003678:	f7fe fb06 	bl	8001c88 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e2ce      	b.n	8003c28 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800368a:	4b85      	ldr	r3, [pc, #532]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0f0      	beq.n	8003678 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003696:	4b82      	ldr	r3, [pc, #520]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	041b      	lsls	r3, r3, #16
 80036a4:	497e      	ldr	r1, [pc, #504]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80036aa:	e049      	b.n	8003740 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d02c      	beq.n	800370e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80036b4:	4b7a      	ldr	r3, [pc, #488]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f023 0218 	bic.w	r2, r3, #24
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	4977      	ldr	r1, [pc, #476]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80036c6:	4b76      	ldr	r3, [pc, #472]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a75      	ldr	r2, [pc, #468]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 80036cc:	f043 0301 	orr.w	r3, r3, #1
 80036d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d2:	f7fe fad9 	bl	8001c88 <HAL_GetTick>
 80036d6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80036da:	f7fe fad5 	bl	8001c88 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e29d      	b.n	8003c28 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036ec:	4b6c      	ldr	r3, [pc, #432]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0f0      	beq.n	80036da <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80036f8:	4b69      	ldr	r3, [pc, #420]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	041b      	lsls	r3, r3, #16
 8003706:	4966      	ldr	r1, [pc, #408]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 8003708:	4313      	orrs	r3, r2
 800370a:	610b      	str	r3, [r1, #16]
 800370c:	e018      	b.n	8003740 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800370e:	4b64      	ldr	r3, [pc, #400]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a63      	ldr	r2, [pc, #396]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 8003714:	f023 0301 	bic.w	r3, r3, #1
 8003718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371a:	f7fe fab5 	bl	8001c88 <HAL_GetTick>
 800371e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003722:	f7fe fab1 	bl	8001c88 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e279      	b.n	8003c28 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003734:	4b5a      	ldr	r3, [pc, #360]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1f0      	bne.n	8003722 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0308 	and.w	r3, r3, #8
 8003748:	2b00      	cmp	r3, #0
 800374a:	d03c      	beq.n	80037c6 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d01c      	beq.n	800378e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003754:	4b52      	ldr	r3, [pc, #328]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 8003756:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800375a:	4a51      	ldr	r2, [pc, #324]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 800375c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003760:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003764:	f7fe fa90 	bl	8001c88 <HAL_GetTick>
 8003768:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800376c:	f7fe fa8c 	bl	8001c88 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e254      	b.n	8003c28 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800377e:	4b48      	ldr	r3, [pc, #288]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 8003780:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003784:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0ef      	beq.n	800376c <HAL_RCC_OscConfig+0x3a8>
 800378c:	e01b      	b.n	80037c6 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800378e:	4b44      	ldr	r3, [pc, #272]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 8003790:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003794:	4a42      	ldr	r2, [pc, #264]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 8003796:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800379a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800379e:	f7fe fa73 	bl	8001c88 <HAL_GetTick>
 80037a2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80037a6:	f7fe fa6f 	bl	8001c88 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e237      	b.n	8003c28 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80037b8:	4b39      	ldr	r3, [pc, #228]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 80037ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1ef      	bne.n	80037a6 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 80d2 	beq.w	8003978 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80037d4:	4b34      	ldr	r3, [pc, #208]	@ (80038a8 <HAL_RCC_OscConfig+0x4e4>)
 80037d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d118      	bne.n	8003812 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80037e0:	4b31      	ldr	r3, [pc, #196]	@ (80038a8 <HAL_RCC_OscConfig+0x4e4>)
 80037e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e4:	4a30      	ldr	r2, [pc, #192]	@ (80038a8 <HAL_RCC_OscConfig+0x4e4>)
 80037e6:	f043 0301 	orr.w	r3, r3, #1
 80037ea:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ec:	f7fe fa4c 	bl	8001c88 <HAL_GetTick>
 80037f0:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f4:	f7fe fa48 	bl	8001c88 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e210      	b.n	8003c28 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003806:	4b28      	ldr	r3, [pc, #160]	@ (80038a8 <HAL_RCC_OscConfig+0x4e4>)
 8003808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0f0      	beq.n	80037f4 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d108      	bne.n	800382c <HAL_RCC_OscConfig+0x468>
 800381a:	4b21      	ldr	r3, [pc, #132]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 800381c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003820:	4a1f      	ldr	r2, [pc, #124]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 8003822:	f043 0301 	orr.w	r3, r3, #1
 8003826:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800382a:	e074      	b.n	8003916 <HAL_RCC_OscConfig+0x552>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d118      	bne.n	8003866 <HAL_RCC_OscConfig+0x4a2>
 8003834:	4b1a      	ldr	r3, [pc, #104]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 8003836:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800383a:	4a19      	ldr	r2, [pc, #100]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 800383c:	f023 0301 	bic.w	r3, r3, #1
 8003840:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003844:	4b16      	ldr	r3, [pc, #88]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 8003846:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800384a:	4a15      	ldr	r2, [pc, #84]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 800384c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003850:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003854:	4b12      	ldr	r3, [pc, #72]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 8003856:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800385a:	4a11      	ldr	r2, [pc, #68]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 800385c:	f023 0304 	bic.w	r3, r3, #4
 8003860:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003864:	e057      	b.n	8003916 <HAL_RCC_OscConfig+0x552>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2b05      	cmp	r3, #5
 800386c:	d11e      	bne.n	80038ac <HAL_RCC_OscConfig+0x4e8>
 800386e:	4b0c      	ldr	r3, [pc, #48]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 8003870:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003874:	4a0a      	ldr	r2, [pc, #40]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 8003876:	f043 0304 	orr.w	r3, r3, #4
 800387a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800387e:	4b08      	ldr	r3, [pc, #32]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 8003880:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003884:	4a06      	ldr	r2, [pc, #24]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 8003886:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800388a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800388e:	4b04      	ldr	r3, [pc, #16]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 8003890:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003894:	4a02      	ldr	r2, [pc, #8]	@ (80038a0 <HAL_RCC_OscConfig+0x4dc>)
 8003896:	f043 0301 	orr.w	r3, r3, #1
 800389a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800389e:	e03a      	b.n	8003916 <HAL_RCC_OscConfig+0x552>
 80038a0:	44020c00 	.word	0x44020c00
 80038a4:	2000000c 	.word	0x2000000c
 80038a8:	44020800 	.word	0x44020800
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	2b85      	cmp	r3, #133	@ 0x85
 80038b2:	d118      	bne.n	80038e6 <HAL_RCC_OscConfig+0x522>
 80038b4:	4ba2      	ldr	r3, [pc, #648]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 80038b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038ba:	4aa1      	ldr	r2, [pc, #644]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 80038bc:	f043 0304 	orr.w	r3, r3, #4
 80038c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80038c4:	4b9e      	ldr	r3, [pc, #632]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 80038c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038ca:	4a9d      	ldr	r2, [pc, #628]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 80038cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80038d4:	4b9a      	ldr	r3, [pc, #616]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 80038d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038da:	4a99      	ldr	r2, [pc, #612]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 80038dc:	f043 0301 	orr.w	r3, r3, #1
 80038e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80038e4:	e017      	b.n	8003916 <HAL_RCC_OscConfig+0x552>
 80038e6:	4b96      	ldr	r3, [pc, #600]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 80038e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038ec:	4a94      	ldr	r2, [pc, #592]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 80038ee:	f023 0301 	bic.w	r3, r3, #1
 80038f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80038f6:	4b92      	ldr	r3, [pc, #584]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 80038f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038fc:	4a90      	ldr	r2, [pc, #576]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 80038fe:	f023 0304 	bic.w	r3, r3, #4
 8003902:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003906:	4b8e      	ldr	r3, [pc, #568]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 8003908:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800390c:	4a8c      	ldr	r2, [pc, #560]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 800390e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003912:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d016      	beq.n	800394c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800391e:	f7fe f9b3 	bl	8001c88 <HAL_GetTick>
 8003922:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003924:	e00a      	b.n	800393c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003926:	f7fe f9af 	bl	8001c88 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003934:	4293      	cmp	r3, r2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e175      	b.n	8003c28 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800393c:	4b80      	ldr	r3, [pc, #512]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 800393e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0ed      	beq.n	8003926 <HAL_RCC_OscConfig+0x562>
 800394a:	e015      	b.n	8003978 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394c:	f7fe f99c 	bl	8001c88 <HAL_GetTick>
 8003950:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003952:	e00a      	b.n	800396a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003954:	f7fe f998 	bl	8001c88 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003962:	4293      	cmp	r3, r2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e15e      	b.n	8003c28 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800396a:	4b75      	ldr	r3, [pc, #468]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 800396c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1ed      	bne.n	8003954 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0320 	and.w	r3, r3, #32
 8003980:	2b00      	cmp	r3, #0
 8003982:	d036      	beq.n	80039f2 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003988:	2b00      	cmp	r3, #0
 800398a:	d019      	beq.n	80039c0 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800398c:	4b6c      	ldr	r3, [pc, #432]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a6b      	ldr	r2, [pc, #428]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 8003992:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003996:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003998:	f7fe f976 	bl	8001c88 <HAL_GetTick>
 800399c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80039a0:	f7fe f972 	bl	8001c88 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e13a      	b.n	8003c28 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80039b2:	4b63      	ldr	r3, [pc, #396]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0f0      	beq.n	80039a0 <HAL_RCC_OscConfig+0x5dc>
 80039be:	e018      	b.n	80039f2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039c0:	4b5f      	ldr	r3, [pc, #380]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a5e      	ldr	r2, [pc, #376]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 80039c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80039ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039cc:	f7fe f95c 	bl	8001c88 <HAL_GetTick>
 80039d0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80039d4:	f7fe f958 	bl	8001c88 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e120      	b.n	8003c28 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80039e6:	4b56      	ldr	r3, [pc, #344]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1f0      	bne.n	80039d4 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 8115 	beq.w	8003c26 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	2b18      	cmp	r3, #24
 8003a00:	f000 80af 	beq.w	8003b62 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	f040 8086 	bne.w	8003b1a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003a0e:	4b4c      	ldr	r3, [pc, #304]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a4b      	ldr	r2, [pc, #300]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 8003a14:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1a:	f7fe f935 	bl	8001c88 <HAL_GetTick>
 8003a1e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003a20:	e008      	b.n	8003a34 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003a22:	f7fe f931 	bl	8001c88 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e0f9      	b.n	8003c28 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003a34:	4b42      	ldr	r3, [pc, #264]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1f0      	bne.n	8003a22 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003a40:	4b3f      	ldr	r3, [pc, #252]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 8003a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a44:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003a48:	f023 0303 	bic.w	r3, r3, #3
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003a54:	0212      	lsls	r2, r2, #8
 8003a56:	430a      	orrs	r2, r1
 8003a58:	4939      	ldr	r1, [pc, #228]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	628b      	str	r3, [r1, #40]	@ 0x28
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a62:	3b01      	subs	r3, #1
 8003a64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	025b      	lsls	r3, r3, #9
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	041b      	lsls	r3, r3, #16
 8003a7c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003a80:	431a      	orrs	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a86:	3b01      	subs	r3, #1
 8003a88:	061b      	lsls	r3, r3, #24
 8003a8a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003a8e:	492c      	ldr	r1, [pc, #176]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003a94:	4b2a      	ldr	r3, [pc, #168]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 8003a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a98:	4a29      	ldr	r2, [pc, #164]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 8003a9a:	f023 0310 	bic.w	r3, r3, #16
 8003a9e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aa4:	4a26      	ldr	r2, [pc, #152]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003aaa:	4b25      	ldr	r3, [pc, #148]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 8003aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aae:	4a24      	ldr	r2, [pc, #144]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 8003ab0:	f043 0310 	orr.w	r3, r3, #16
 8003ab4:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8003ab6:	4b22      	ldr	r3, [pc, #136]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 8003ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aba:	f023 020c 	bic.w	r2, r3, #12
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac2:	491f      	ldr	r1, [pc, #124]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 8003aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003acc:	f023 0220 	bic.w	r2, r3, #32
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ad4:	491a      	ldr	r1, [pc, #104]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ada:	4b19      	ldr	r3, [pc, #100]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 8003adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ade:	4a18      	ldr	r2, [pc, #96]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 8003ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ae4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8003ae6:	4b16      	ldr	r3, [pc, #88]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a15      	ldr	r2, [pc, #84]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 8003aec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003af0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af2:	f7fe f8c9 	bl	8001c88 <HAL_GetTick>
 8003af6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003afa:	f7fe f8c5 	bl	8001c88 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e08d      	b.n	8003c28 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0f0      	beq.n	8003afa <HAL_RCC_OscConfig+0x736>
 8003b18:	e085      	b.n	8003c26 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003b1a:	4b09      	ldr	r3, [pc, #36]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a08      	ldr	r2, [pc, #32]	@ (8003b40 <HAL_RCC_OscConfig+0x77c>)
 8003b20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b26:	f7fe f8af 	bl	8001c88 <HAL_GetTick>
 8003b2a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003b2c:	e00a      	b.n	8003b44 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003b2e:	f7fe f8ab 	bl	8001c88 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d903      	bls.n	8003b44 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e073      	b.n	8003c28 <HAL_RCC_OscConfig+0x864>
 8003b40:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003b44:	4b3a      	ldr	r3, [pc, #232]	@ (8003c30 <HAL_RCC_OscConfig+0x86c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1ee      	bne.n	8003b2e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003b50:	4b37      	ldr	r3, [pc, #220]	@ (8003c30 <HAL_RCC_OscConfig+0x86c>)
 8003b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b54:	4a36      	ldr	r2, [pc, #216]	@ (8003c30 <HAL_RCC_OscConfig+0x86c>)
 8003b56:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003b5a:	f023 0303 	bic.w	r3, r3, #3
 8003b5e:	6293      	str	r3, [r2, #40]	@ 0x28
 8003b60:	e061      	b.n	8003c26 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003b62:	4b33      	ldr	r3, [pc, #204]	@ (8003c30 <HAL_RCC_OscConfig+0x86c>)
 8003b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b66:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003b68:	4b31      	ldr	r3, [pc, #196]	@ (8003c30 <HAL_RCC_OscConfig+0x86c>)
 8003b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b6c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d031      	beq.n	8003bda <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	f003 0203 	and.w	r2, r3, #3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d12a      	bne.n	8003bda <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	0a1b      	lsrs	r3, r3, #8
 8003b88:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d122      	bne.n	8003bda <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b9e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d11a      	bne.n	8003bda <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	0a5b      	lsrs	r3, r3, #9
 8003ba8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d111      	bne.n	8003bda <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	0c1b      	lsrs	r3, r3, #16
 8003bba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d108      	bne.n	8003bda <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	0e1b      	lsrs	r3, r3, #24
 8003bcc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d001      	beq.n	8003bde <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e024      	b.n	8003c28 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003bde:	4b14      	ldr	r3, [pc, #80]	@ (8003c30 <HAL_RCC_OscConfig+0x86c>)
 8003be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be2:	08db      	lsrs	r3, r3, #3
 8003be4:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d01a      	beq.n	8003c26 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8003c30 <HAL_RCC_OscConfig+0x86c>)
 8003bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf4:	4a0e      	ldr	r2, [pc, #56]	@ (8003c30 <HAL_RCC_OscConfig+0x86c>)
 8003bf6:	f023 0310 	bic.w	r3, r3, #16
 8003bfa:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfc:	f7fe f844 	bl	8001c88 <HAL_GetTick>
 8003c00:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8003c02:	bf00      	nop
 8003c04:	f7fe f840 	bl	8001c88 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d0f9      	beq.n	8003c04 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c14:	4a06      	ldr	r2, [pc, #24]	@ (8003c30 <HAL_RCC_OscConfig+0x86c>)
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003c1a:	4b05      	ldr	r3, [pc, #20]	@ (8003c30 <HAL_RCC_OscConfig+0x86c>)
 8003c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1e:	4a04      	ldr	r2, [pc, #16]	@ (8003c30 <HAL_RCC_OscConfig+0x86c>)
 8003c20:	f043 0310 	orr.w	r3, r3, #16
 8003c24:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3720      	adds	r7, #32
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	44020c00 	.word	0x44020c00

08003c34 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e19e      	b.n	8003f86 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c48:	4b83      	ldr	r3, [pc, #524]	@ (8003e58 <HAL_RCC_ClockConfig+0x224>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 030f 	and.w	r3, r3, #15
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d910      	bls.n	8003c78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c56:	4b80      	ldr	r3, [pc, #512]	@ (8003e58 <HAL_RCC_ClockConfig+0x224>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f023 020f 	bic.w	r2, r3, #15
 8003c5e:	497e      	ldr	r1, [pc, #504]	@ (8003e58 <HAL_RCC_ClockConfig+0x224>)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c66:	4b7c      	ldr	r3, [pc, #496]	@ (8003e58 <HAL_RCC_ClockConfig+0x224>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d001      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e186      	b.n	8003f86 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0310 	and.w	r3, r3, #16
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d012      	beq.n	8003caa <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	695a      	ldr	r2, [r3, #20]
 8003c88:	4b74      	ldr	r3, [pc, #464]	@ (8003e5c <HAL_RCC_ClockConfig+0x228>)
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	0a1b      	lsrs	r3, r3, #8
 8003c8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d909      	bls.n	8003caa <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003c96:	4b71      	ldr	r3, [pc, #452]	@ (8003e5c <HAL_RCC_ClockConfig+0x228>)
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	021b      	lsls	r3, r3, #8
 8003ca4:	496d      	ldr	r1, [pc, #436]	@ (8003e5c <HAL_RCC_ClockConfig+0x228>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d012      	beq.n	8003cdc <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	691a      	ldr	r2, [r3, #16]
 8003cba:	4b68      	ldr	r3, [pc, #416]	@ (8003e5c <HAL_RCC_ClockConfig+0x228>)
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	091b      	lsrs	r3, r3, #4
 8003cc0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d909      	bls.n	8003cdc <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003cc8:	4b64      	ldr	r3, [pc, #400]	@ (8003e5c <HAL_RCC_ClockConfig+0x228>)
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	4961      	ldr	r1, [pc, #388]	@ (8003e5c <HAL_RCC_ClockConfig+0x228>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d010      	beq.n	8003d0a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68da      	ldr	r2, [r3, #12]
 8003cec:	4b5b      	ldr	r3, [pc, #364]	@ (8003e5c <HAL_RCC_ClockConfig+0x228>)
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d908      	bls.n	8003d0a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003cf8:	4b58      	ldr	r3, [pc, #352]	@ (8003e5c <HAL_RCC_ClockConfig+0x228>)
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	4955      	ldr	r1, [pc, #340]	@ (8003e5c <HAL_RCC_ClockConfig+0x228>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d010      	beq.n	8003d38 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689a      	ldr	r2, [r3, #8]
 8003d1a:	4b50      	ldr	r3, [pc, #320]	@ (8003e5c <HAL_RCC_ClockConfig+0x228>)
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	f003 030f 	and.w	r3, r3, #15
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d908      	bls.n	8003d38 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003d26:	4b4d      	ldr	r3, [pc, #308]	@ (8003e5c <HAL_RCC_ClockConfig+0x228>)
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	f023 020f 	bic.w	r2, r3, #15
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	494a      	ldr	r1, [pc, #296]	@ (8003e5c <HAL_RCC_ClockConfig+0x228>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 8093 	beq.w	8003e6c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b03      	cmp	r3, #3
 8003d4c:	d107      	bne.n	8003d5e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003d4e:	4b43      	ldr	r3, [pc, #268]	@ (8003e5c <HAL_RCC_ClockConfig+0x228>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d121      	bne.n	8003d9e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e113      	b.n	8003f86 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d107      	bne.n	8003d76 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d66:	4b3d      	ldr	r3, [pc, #244]	@ (8003e5c <HAL_RCC_ClockConfig+0x228>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d115      	bne.n	8003d9e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e107      	b.n	8003f86 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d107      	bne.n	8003d8e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003d7e:	4b37      	ldr	r3, [pc, #220]	@ (8003e5c <HAL_RCC_ClockConfig+0x228>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d109      	bne.n	8003d9e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e0fb      	b.n	8003f86 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d8e:	4b33      	ldr	r3, [pc, #204]	@ (8003e5c <HAL_RCC_ClockConfig+0x228>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e0f3      	b.n	8003f86 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8003d9e:	4b2f      	ldr	r3, [pc, #188]	@ (8003e5c <HAL_RCC_ClockConfig+0x228>)
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	f023 0203 	bic.w	r2, r3, #3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	492c      	ldr	r1, [pc, #176]	@ (8003e5c <HAL_RCC_ClockConfig+0x228>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003db0:	f7fd ff6a 	bl	8001c88 <HAL_GetTick>
 8003db4:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b03      	cmp	r3, #3
 8003dbc:	d112      	bne.n	8003de4 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dbe:	e00a      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc0:	f7fd ff62 	bl	8001c88 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e0d7      	b.n	8003f86 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dd6:	4b21      	ldr	r3, [pc, #132]	@ (8003e5c <HAL_RCC_ClockConfig+0x228>)
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	f003 0318 	and.w	r3, r3, #24
 8003dde:	2b18      	cmp	r3, #24
 8003de0:	d1ee      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x18c>
 8003de2:	e043      	b.n	8003e6c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d112      	bne.n	8003e12 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dec:	e00a      	b.n	8003e04 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003dee:	f7fd ff4b 	bl	8001c88 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e0c0      	b.n	8003f86 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e04:	4b15      	ldr	r3, [pc, #84]	@ (8003e5c <HAL_RCC_ClockConfig+0x228>)
 8003e06:	69db      	ldr	r3, [r3, #28]
 8003e08:	f003 0318 	and.w	r3, r3, #24
 8003e0c:	2b10      	cmp	r3, #16
 8003e0e:	d1ee      	bne.n	8003dee <HAL_RCC_ClockConfig+0x1ba>
 8003e10:	e02c      	b.n	8003e6c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d122      	bne.n	8003e60 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003e1a:	e00a      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003e1c:	f7fd ff34 	bl	8001c88 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e0a9      	b.n	8003f86 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003e32:	4b0a      	ldr	r3, [pc, #40]	@ (8003e5c <HAL_RCC_ClockConfig+0x228>)
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	f003 0318 	and.w	r3, r3, #24
 8003e3a:	2b08      	cmp	r3, #8
 8003e3c:	d1ee      	bne.n	8003e1c <HAL_RCC_ClockConfig+0x1e8>
 8003e3e:	e015      	b.n	8003e6c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003e40:	f7fd ff22 	bl	8001c88 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d906      	bls.n	8003e60 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e097      	b.n	8003f86 <HAL_RCC_ClockConfig+0x352>
 8003e56:	bf00      	nop
 8003e58:	40022000 	.word	0x40022000
 8003e5c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e60:	4b4b      	ldr	r3, [pc, #300]	@ (8003f90 <HAL_RCC_ClockConfig+0x35c>)
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	f003 0318 	and.w	r3, r3, #24
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1e9      	bne.n	8003e40 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d010      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	4b44      	ldr	r3, [pc, #272]	@ (8003f90 <HAL_RCC_ClockConfig+0x35c>)
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	f003 030f 	and.w	r3, r3, #15
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d208      	bcs.n	8003e9a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003e88:	4b41      	ldr	r3, [pc, #260]	@ (8003f90 <HAL_RCC_ClockConfig+0x35c>)
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	f023 020f 	bic.w	r2, r3, #15
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	493e      	ldr	r1, [pc, #248]	@ (8003f90 <HAL_RCC_ClockConfig+0x35c>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e9a:	4b3e      	ldr	r3, [pc, #248]	@ (8003f94 <HAL_RCC_ClockConfig+0x360>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 030f 	and.w	r3, r3, #15
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d210      	bcs.n	8003eca <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea8:	4b3a      	ldr	r3, [pc, #232]	@ (8003f94 <HAL_RCC_ClockConfig+0x360>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f023 020f 	bic.w	r2, r3, #15
 8003eb0:	4938      	ldr	r1, [pc, #224]	@ (8003f94 <HAL_RCC_ClockConfig+0x360>)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eb8:	4b36      	ldr	r3, [pc, #216]	@ (8003f94 <HAL_RCC_ClockConfig+0x360>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 030f 	and.w	r3, r3, #15
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d001      	beq.n	8003eca <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e05d      	b.n	8003f86 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0304 	and.w	r3, r3, #4
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d010      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	4b2d      	ldr	r3, [pc, #180]	@ (8003f90 <HAL_RCC_ClockConfig+0x35c>)
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d208      	bcs.n	8003ef8 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8003f90 <HAL_RCC_ClockConfig+0x35c>)
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	4927      	ldr	r1, [pc, #156]	@ (8003f90 <HAL_RCC_ClockConfig+0x35c>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0308 	and.w	r3, r3, #8
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d012      	beq.n	8003f2a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691a      	ldr	r2, [r3, #16]
 8003f08:	4b21      	ldr	r3, [pc, #132]	@ (8003f90 <HAL_RCC_ClockConfig+0x35c>)
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	091b      	lsrs	r3, r3, #4
 8003f0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d209      	bcs.n	8003f2a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003f16:	4b1e      	ldr	r3, [pc, #120]	@ (8003f90 <HAL_RCC_ClockConfig+0x35c>)
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	011b      	lsls	r3, r3, #4
 8003f24:	491a      	ldr	r1, [pc, #104]	@ (8003f90 <HAL_RCC_ClockConfig+0x35c>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0310 	and.w	r3, r3, #16
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d012      	beq.n	8003f5c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	695a      	ldr	r2, [r3, #20]
 8003f3a:	4b15      	ldr	r3, [pc, #84]	@ (8003f90 <HAL_RCC_ClockConfig+0x35c>)
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	0a1b      	lsrs	r3, r3, #8
 8003f40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d209      	bcs.n	8003f5c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003f48:	4b11      	ldr	r3, [pc, #68]	@ (8003f90 <HAL_RCC_ClockConfig+0x35c>)
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	021b      	lsls	r3, r3, #8
 8003f56:	490e      	ldr	r1, [pc, #56]	@ (8003f90 <HAL_RCC_ClockConfig+0x35c>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003f5c:	f000 f822 	bl	8003fa4 <HAL_RCC_GetSysClockFreq>
 8003f60:	4602      	mov	r2, r0
 8003f62:	4b0b      	ldr	r3, [pc, #44]	@ (8003f90 <HAL_RCC_ClockConfig+0x35c>)
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	490b      	ldr	r1, [pc, #44]	@ (8003f98 <HAL_RCC_ClockConfig+0x364>)
 8003f6c:	5ccb      	ldrb	r3, [r1, r3]
 8003f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f72:	4a0a      	ldr	r2, [pc, #40]	@ (8003f9c <HAL_RCC_ClockConfig+0x368>)
 8003f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003f76:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa0 <HAL_RCC_ClockConfig+0x36c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fd fdfa 	bl	8001b74 <HAL_InitTick>
 8003f80:	4603      	mov	r3, r0
 8003f82:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003f84:	7afb      	ldrb	r3, [r7, #11]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	44020c00 	.word	0x44020c00
 8003f94:	40022000 	.word	0x40022000
 8003f98:	0800b364 	.word	0x0800b364
 8003f9c:	20000008 	.word	0x20000008
 8003fa0:	2000000c 	.word	0x2000000c

08003fa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b089      	sub	sp, #36	@ 0x24
 8003fa8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003faa:	4b8c      	ldr	r3, [pc, #560]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x238>)
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	f003 0318 	and.w	r3, r3, #24
 8003fb2:	2b08      	cmp	r3, #8
 8003fb4:	d102      	bne.n	8003fbc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003fb6:	4b8a      	ldr	r3, [pc, #552]	@ (80041e0 <HAL_RCC_GetSysClockFreq+0x23c>)
 8003fb8:	61fb      	str	r3, [r7, #28]
 8003fba:	e107      	b.n	80041cc <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fbc:	4b87      	ldr	r3, [pc, #540]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x238>)
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	f003 0318 	and.w	r3, r3, #24
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d112      	bne.n	8003fee <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003fc8:	4b84      	ldr	r3, [pc, #528]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x238>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0320 	and.w	r3, r3, #32
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d009      	beq.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003fd4:	4b81      	ldr	r3, [pc, #516]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x238>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	08db      	lsrs	r3, r3, #3
 8003fda:	f003 0303 	and.w	r3, r3, #3
 8003fde:	4a81      	ldr	r2, [pc, #516]	@ (80041e4 <HAL_RCC_GetSysClockFreq+0x240>)
 8003fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe4:	61fb      	str	r3, [r7, #28]
 8003fe6:	e0f1      	b.n	80041cc <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003fe8:	4b7e      	ldr	r3, [pc, #504]	@ (80041e4 <HAL_RCC_GetSysClockFreq+0x240>)
 8003fea:	61fb      	str	r3, [r7, #28]
 8003fec:	e0ee      	b.n	80041cc <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fee:	4b7b      	ldr	r3, [pc, #492]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x238>)
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	f003 0318 	and.w	r3, r3, #24
 8003ff6:	2b10      	cmp	r3, #16
 8003ff8:	d102      	bne.n	8004000 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ffa:	4b7b      	ldr	r3, [pc, #492]	@ (80041e8 <HAL_RCC_GetSysClockFreq+0x244>)
 8003ffc:	61fb      	str	r3, [r7, #28]
 8003ffe:	e0e5      	b.n	80041cc <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004000:	4b76      	ldr	r3, [pc, #472]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x238>)
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	f003 0318 	and.w	r3, r3, #24
 8004008:	2b18      	cmp	r3, #24
 800400a:	f040 80dd 	bne.w	80041c8 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800400e:	4b73      	ldr	r3, [pc, #460]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x238>)
 8004010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004018:	4b70      	ldr	r3, [pc, #448]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x238>)
 800401a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401c:	0a1b      	lsrs	r3, r3, #8
 800401e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004022:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004024:	4b6d      	ldr	r3, [pc, #436]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x238>)
 8004026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004028:	091b      	lsrs	r3, r3, #4
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004030:	4b6a      	ldr	r3, [pc, #424]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x238>)
 8004032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004034:	08db      	lsrs	r3, r3, #3
 8004036:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	fb02 f303 	mul.w	r3, r2, r3
 8004040:	ee07 3a90 	vmov	s15, r3
 8004044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004048:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 80b7 	beq.w	80041c2 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d003      	beq.n	8004062 <HAL_RCC_GetSysClockFreq+0xbe>
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	2b03      	cmp	r3, #3
 800405e:	d056      	beq.n	800410e <HAL_RCC_GetSysClockFreq+0x16a>
 8004060:	e077      	b.n	8004152 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004062:	4b5e      	ldr	r3, [pc, #376]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x238>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0320 	and.w	r3, r3, #32
 800406a:	2b00      	cmp	r3, #0
 800406c:	d02d      	beq.n	80040ca <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800406e:	4b5b      	ldr	r3, [pc, #364]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x238>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	08db      	lsrs	r3, r3, #3
 8004074:	f003 0303 	and.w	r3, r3, #3
 8004078:	4a5a      	ldr	r2, [pc, #360]	@ (80041e4 <HAL_RCC_GetSysClockFreq+0x240>)
 800407a:	fa22 f303 	lsr.w	r3, r2, r3
 800407e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	ee07 3a90 	vmov	s15, r3
 8004086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	ee07 3a90 	vmov	s15, r3
 8004090:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004094:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004098:	4b50      	ldr	r3, [pc, #320]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x238>)
 800409a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800409c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040a0:	ee07 3a90 	vmov	s15, r3
 80040a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80040a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80040ac:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80041ec <HAL_RCC_GetSysClockFreq+0x248>
 80040b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80040b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80040b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80040c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040c4:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80040c8:	e065      	b.n	8004196 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	ee07 3a90 	vmov	s15, r3
 80040d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040d4:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80041f0 <HAL_RCC_GetSysClockFreq+0x24c>
 80040d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040dc:	4b3f      	ldr	r3, [pc, #252]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x238>)
 80040de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040e4:	ee07 3a90 	vmov	s15, r3
 80040e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80040ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80040f0:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80041ec <HAL_RCC_GetSysClockFreq+0x248>
 80040f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80040f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80040fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004100:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004104:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004108:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800410c:	e043      	b.n	8004196 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	ee07 3a90 	vmov	s15, r3
 8004114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004118:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80041f4 <HAL_RCC_GetSysClockFreq+0x250>
 800411c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004120:	4b2e      	ldr	r3, [pc, #184]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x238>)
 8004122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004128:	ee07 3a90 	vmov	s15, r3
 800412c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004130:	ed97 6a02 	vldr	s12, [r7, #8]
 8004134:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80041ec <HAL_RCC_GetSysClockFreq+0x248>
 8004138:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800413c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004140:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004144:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004148:	ee67 7a27 	vmul.f32	s15, s14, s15
 800414c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8004150:	e021      	b.n	8004196 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	ee07 3a90 	vmov	s15, r3
 8004158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800415c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80041f8 <HAL_RCC_GetSysClockFreq+0x254>
 8004160:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004164:	4b1d      	ldr	r3, [pc, #116]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x238>)
 8004166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800416c:	ee07 3a90 	vmov	s15, r3
 8004170:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004174:	ed97 6a02 	vldr	s12, [r7, #8]
 8004178:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80041ec <HAL_RCC_GetSysClockFreq+0x248>
 800417c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004180:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004184:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004188:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800418c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004190:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004194:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8004196:	4b11      	ldr	r3, [pc, #68]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x238>)
 8004198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800419a:	0a5b      	lsrs	r3, r3, #9
 800419c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041a0:	3301      	adds	r3, #1
 80041a2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	ee07 3a90 	vmov	s15, r3
 80041aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041ae:	edd7 6a06 	vldr	s13, [r7, #24]
 80041b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041ba:	ee17 3a90 	vmov	r3, s15
 80041be:	61fb      	str	r3, [r7, #28]
 80041c0:	e004      	b.n	80041cc <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80041c2:	2300      	movs	r3, #0
 80041c4:	61fb      	str	r3, [r7, #28]
 80041c6:	e001      	b.n	80041cc <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80041c8:	4b06      	ldr	r3, [pc, #24]	@ (80041e4 <HAL_RCC_GetSysClockFreq+0x240>)
 80041ca:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80041cc:	69fb      	ldr	r3, [r7, #28]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3724      	adds	r7, #36	@ 0x24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	44020c00 	.word	0x44020c00
 80041e0:	003d0900 	.word	0x003d0900
 80041e4:	03d09000 	.word	0x03d09000
 80041e8:	007a1200 	.word	0x007a1200
 80041ec:	46000000 	.word	0x46000000
 80041f0:	4c742400 	.word	0x4c742400
 80041f4:	4af42400 	.word	0x4af42400
 80041f8:	4a742400 	.word	0x4a742400

080041fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004200:	f7ff fed0 	bl	8003fa4 <HAL_RCC_GetSysClockFreq>
 8004204:	4602      	mov	r2, r0
 8004206:	4b08      	ldr	r3, [pc, #32]	@ (8004228 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004208:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800420a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800420e:	4907      	ldr	r1, [pc, #28]	@ (800422c <HAL_RCC_GetHCLKFreq+0x30>)
 8004210:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004212:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004216:	fa22 f303 	lsr.w	r3, r2, r3
 800421a:	4a05      	ldr	r2, [pc, #20]	@ (8004230 <HAL_RCC_GetHCLKFreq+0x34>)
 800421c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800421e:	4b04      	ldr	r3, [pc, #16]	@ (8004230 <HAL_RCC_GetHCLKFreq+0x34>)
 8004220:	681b      	ldr	r3, [r3, #0]
}
 8004222:	4618      	mov	r0, r3
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	44020c00 	.word	0x44020c00
 800422c:	0800b364 	.word	0x0800b364
 8004230:	20000008 	.word	0x20000008

08004234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004238:	f7ff ffe0 	bl	80041fc <HAL_RCC_GetHCLKFreq>
 800423c:	4602      	mov	r2, r0
 800423e:	4b06      	ldr	r3, [pc, #24]	@ (8004258 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	091b      	lsrs	r3, r3, #4
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	4904      	ldr	r1, [pc, #16]	@ (800425c <HAL_RCC_GetPCLK1Freq+0x28>)
 800424a:	5ccb      	ldrb	r3, [r1, r3]
 800424c:	f003 031f 	and.w	r3, r3, #31
 8004250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004254:	4618      	mov	r0, r3
 8004256:	bd80      	pop	{r7, pc}
 8004258:	44020c00 	.word	0x44020c00
 800425c:	0800b374 	.word	0x0800b374

08004260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8004264:	f7ff ffca 	bl	80041fc <HAL_RCC_GetHCLKFreq>
 8004268:	4602      	mov	r2, r0
 800426a:	4b06      	ldr	r3, [pc, #24]	@ (8004284 <HAL_RCC_GetPCLK2Freq+0x24>)
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	0a1b      	lsrs	r3, r3, #8
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	4904      	ldr	r1, [pc, #16]	@ (8004288 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004276:	5ccb      	ldrb	r3, [r1, r3]
 8004278:	f003 031f 	and.w	r3, r3, #31
 800427c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004280:	4618      	mov	r0, r3
 8004282:	bd80      	pop	{r7, pc}
 8004284:	44020c00 	.word	0x44020c00
 8004288:	0800b374 	.word	0x0800b374

0800428c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8004290:	f7ff ffb4 	bl	80041fc <HAL_RCC_GetHCLKFreq>
 8004294:	4602      	mov	r2, r0
 8004296:	4b06      	ldr	r3, [pc, #24]	@ (80042b0 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	0b1b      	lsrs	r3, r3, #12
 800429c:	f003 0307 	and.w	r3, r3, #7
 80042a0:	4904      	ldr	r1, [pc, #16]	@ (80042b4 <HAL_RCC_GetPCLK3Freq+0x28>)
 80042a2:	5ccb      	ldrb	r3, [r1, r3]
 80042a4:	f003 031f 	and.w	r3, r3, #31
 80042a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	44020c00 	.word	0x44020c00
 80042b4:	0800b374 	.word	0x0800b374

080042b8 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80042b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042bc:	b0ba      	sub	sp, #232	@ 0xe8
 80042be:	af00      	add	r7, sp, #0
 80042c0:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042c4:	2300      	movs	r3, #0
 80042c6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042ca:	2300      	movs	r3, #0
 80042cc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80042d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d8:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80042dc:	2500      	movs	r5, #0
 80042de:	ea54 0305 	orrs.w	r3, r4, r5
 80042e2:	d00b      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80042e4:	4bcd      	ldr	r3, [pc, #820]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80042e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80042ea:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80042ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042f4:	4ac9      	ldr	r2, [pc, #804]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80042f6:	430b      	orrs	r3, r1
 80042f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004304:	f002 0801 	and.w	r8, r2, #1
 8004308:	f04f 0900 	mov.w	r9, #0
 800430c:	ea58 0309 	orrs.w	r3, r8, r9
 8004310:	d042      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8004312:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004318:	2b05      	cmp	r3, #5
 800431a:	d823      	bhi.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800431c:	a201      	add	r2, pc, #4	@ (adr r2, 8004324 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800431e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004322:	bf00      	nop
 8004324:	0800436d 	.word	0x0800436d
 8004328:	0800433d 	.word	0x0800433d
 800432c:	08004351 	.word	0x08004351
 8004330:	0800436d 	.word	0x0800436d
 8004334:	0800436d 	.word	0x0800436d
 8004338:	0800436d 	.word	0x0800436d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800433c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004340:	3308      	adds	r3, #8
 8004342:	4618      	mov	r0, r3
 8004344:	f003 f90c 	bl	8007560 <RCCEx_PLL2_Config>
 8004348:	4603      	mov	r3, r0
 800434a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 800434e:	e00e      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004350:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004354:	3330      	adds	r3, #48	@ 0x30
 8004356:	4618      	mov	r0, r3
 8004358:	f003 f99a 	bl	8007690 <RCCEx_PLL3_Config>
 800435c:	4603      	mov	r3, r0
 800435e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8004362:	e004      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800436a:	e000      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 800436c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800436e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10c      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004376:	4ba9      	ldr	r3, [pc, #676]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004378:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800437c:	f023 0107 	bic.w	r1, r3, #7
 8004380:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004386:	4aa5      	ldr	r2, [pc, #660]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004388:	430b      	orrs	r3, r1
 800438a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800438e:	e003      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004390:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004394:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004398:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800439c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a0:	f002 0a02 	and.w	sl, r2, #2
 80043a4:	f04f 0b00 	mov.w	fp, #0
 80043a8:	ea5a 030b 	orrs.w	r3, sl, fp
 80043ac:	f000 8088 	beq.w	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80043b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043b6:	2b28      	cmp	r3, #40	@ 0x28
 80043b8:	d868      	bhi.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80043ba:	a201      	add	r2, pc, #4	@ (adr r2, 80043c0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80043bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c0:	08004495 	.word	0x08004495
 80043c4:	0800448d 	.word	0x0800448d
 80043c8:	0800448d 	.word	0x0800448d
 80043cc:	0800448d 	.word	0x0800448d
 80043d0:	0800448d 	.word	0x0800448d
 80043d4:	0800448d 	.word	0x0800448d
 80043d8:	0800448d 	.word	0x0800448d
 80043dc:	0800448d 	.word	0x0800448d
 80043e0:	08004465 	.word	0x08004465
 80043e4:	0800448d 	.word	0x0800448d
 80043e8:	0800448d 	.word	0x0800448d
 80043ec:	0800448d 	.word	0x0800448d
 80043f0:	0800448d 	.word	0x0800448d
 80043f4:	0800448d 	.word	0x0800448d
 80043f8:	0800448d 	.word	0x0800448d
 80043fc:	0800448d 	.word	0x0800448d
 8004400:	08004479 	.word	0x08004479
 8004404:	0800448d 	.word	0x0800448d
 8004408:	0800448d 	.word	0x0800448d
 800440c:	0800448d 	.word	0x0800448d
 8004410:	0800448d 	.word	0x0800448d
 8004414:	0800448d 	.word	0x0800448d
 8004418:	0800448d 	.word	0x0800448d
 800441c:	0800448d 	.word	0x0800448d
 8004420:	08004495 	.word	0x08004495
 8004424:	0800448d 	.word	0x0800448d
 8004428:	0800448d 	.word	0x0800448d
 800442c:	0800448d 	.word	0x0800448d
 8004430:	0800448d 	.word	0x0800448d
 8004434:	0800448d 	.word	0x0800448d
 8004438:	0800448d 	.word	0x0800448d
 800443c:	0800448d 	.word	0x0800448d
 8004440:	08004495 	.word	0x08004495
 8004444:	0800448d 	.word	0x0800448d
 8004448:	0800448d 	.word	0x0800448d
 800444c:	0800448d 	.word	0x0800448d
 8004450:	0800448d 	.word	0x0800448d
 8004454:	0800448d 	.word	0x0800448d
 8004458:	0800448d 	.word	0x0800448d
 800445c:	0800448d 	.word	0x0800448d
 8004460:	08004495 	.word	0x08004495
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004464:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004468:	3308      	adds	r3, #8
 800446a:	4618      	mov	r0, r3
 800446c:	f003 f878 	bl	8007560 <RCCEx_PLL2_Config>
 8004470:	4603      	mov	r3, r0
 8004472:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8004476:	e00e      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004478:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800447c:	3330      	adds	r3, #48	@ 0x30
 800447e:	4618      	mov	r0, r3
 8004480:	f003 f906 	bl	8007690 <RCCEx_PLL3_Config>
 8004484:	4603      	mov	r3, r0
 8004486:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 800448a:	e004      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004492:	e000      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8004494:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004496:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10c      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800449e:	4b5f      	ldr	r3, [pc, #380]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80044a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80044a4:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80044a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ae:	4a5b      	ldr	r2, [pc, #364]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80044b0:	430b      	orrs	r3, r1
 80044b2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80044b6:	e003      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80044bc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c8:	f002 0304 	and.w	r3, r2, #4
 80044cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044d0:	2300      	movs	r3, #0
 80044d2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80044d6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80044da:	460b      	mov	r3, r1
 80044dc:	4313      	orrs	r3, r2
 80044de:	d04e      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80044e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044e6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80044ea:	d02c      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80044ec:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80044f0:	d825      	bhi.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x286>
 80044f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044f6:	d028      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80044f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044fc:	d81f      	bhi.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x286>
 80044fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8004500:	d025      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004502:	2bc0      	cmp	r3, #192	@ 0xc0
 8004504:	d81b      	bhi.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004506:	2b80      	cmp	r3, #128	@ 0x80
 8004508:	d00f      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x272>
 800450a:	2b80      	cmp	r3, #128	@ 0x80
 800450c:	d817      	bhi.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x286>
 800450e:	2b00      	cmp	r3, #0
 8004510:	d01f      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8004512:	2b40      	cmp	r3, #64	@ 0x40
 8004514:	d113      	bne.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004516:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800451a:	3308      	adds	r3, #8
 800451c:	4618      	mov	r0, r3
 800451e:	f003 f81f 	bl	8007560 <RCCEx_PLL2_Config>
 8004522:	4603      	mov	r3, r0
 8004524:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8004528:	e014      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800452a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800452e:	3330      	adds	r3, #48	@ 0x30
 8004530:	4618      	mov	r0, r3
 8004532:	f003 f8ad 	bl	8007690 <RCCEx_PLL3_Config>
 8004536:	4603      	mov	r3, r0
 8004538:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 800453c:	e00a      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004544:	e006      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004546:	bf00      	nop
 8004548:	e004      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800454a:	bf00      	nop
 800454c:	e002      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800454e:	bf00      	nop
 8004550:	e000      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004552:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004554:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10c      	bne.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800455c:	4b2f      	ldr	r3, [pc, #188]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800455e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004562:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004566:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800456a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800456c:	4a2b      	ldr	r2, [pc, #172]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800456e:	430b      	orrs	r3, r1
 8004570:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004574:	e003      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004576:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800457a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800457e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004586:	f002 0308 	and.w	r3, r2, #8
 800458a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800458e:	2300      	movs	r3, #0
 8004590:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004594:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004598:	460b      	mov	r3, r1
 800459a:	4313      	orrs	r3, r2
 800459c:	d056      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800459e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045a4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80045a8:	d031      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x356>
 80045aa:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80045ae:	d82a      	bhi.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80045b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045b4:	d02d      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80045b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045ba:	d824      	bhi.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80045bc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80045c0:	d029      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80045c2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80045c6:	d81e      	bhi.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80045c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045cc:	d011      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80045ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045d2:	d818      	bhi.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d023      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80045d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045dc:	d113      	bne.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80045de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045e2:	3308      	adds	r3, #8
 80045e4:	4618      	mov	r0, r3
 80045e6:	f002 ffbb 	bl	8007560 <RCCEx_PLL2_Config>
 80045ea:	4603      	mov	r3, r0
 80045ec:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 80045f0:	e017      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80045f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045f6:	3330      	adds	r3, #48	@ 0x30
 80045f8:	4618      	mov	r0, r3
 80045fa:	f003 f849 	bl	8007690 <RCCEx_PLL3_Config>
 80045fe:	4603      	mov	r3, r0
 8004600:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8004604:	e00d      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800460c:	e009      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800460e:	bf00      	nop
 8004610:	e007      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004612:	bf00      	nop
 8004614:	e005      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004616:	bf00      	nop
 8004618:	e003      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800461a:	bf00      	nop
 800461c:	44020c00 	.word	0x44020c00
        break;
 8004620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004622:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10c      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800462a:	4bb9      	ldr	r3, [pc, #740]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800462c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004630:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004634:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004638:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800463a:	4ab5      	ldr	r2, [pc, #724]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800463c:	430b      	orrs	r3, r1
 800463e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004642:	e003      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004644:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004648:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800464c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004654:	f002 0310 	and.w	r3, r2, #16
 8004658:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800465c:	2300      	movs	r3, #0
 800465e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004662:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004666:	460b      	mov	r3, r1
 8004668:	4313      	orrs	r3, r2
 800466a:	d053      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 800466c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004670:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004672:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004676:	d031      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004678:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800467c:	d82a      	bhi.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800467e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004682:	d02d      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004684:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004688:	d824      	bhi.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800468a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800468e:	d029      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004690:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004694:	d81e      	bhi.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004696:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800469a:	d011      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800469c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046a0:	d818      	bhi.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d020      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x430>
 80046a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046aa:	d113      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80046ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046b0:	3308      	adds	r3, #8
 80046b2:	4618      	mov	r0, r3
 80046b4:	f002 ff54 	bl	8007560 <RCCEx_PLL2_Config>
 80046b8:	4603      	mov	r3, r0
 80046ba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 80046be:	e014      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80046c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046c4:	3330      	adds	r3, #48	@ 0x30
 80046c6:	4618      	mov	r0, r3
 80046c8:	f002 ffe2 	bl	8007690 <RCCEx_PLL3_Config>
 80046cc:	4603      	mov	r3, r0
 80046ce:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 80046d2:	e00a      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80046da:	e006      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80046dc:	bf00      	nop
 80046de:	e004      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80046e0:	bf00      	nop
 80046e2:	e002      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80046e4:	bf00      	nop
 80046e6:	e000      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80046e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ea:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10c      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80046f2:	4b87      	ldr	r3, [pc, #540]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80046f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80046f8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80046fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004700:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004702:	4a83      	ldr	r2, [pc, #524]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004704:	430b      	orrs	r3, r1
 8004706:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800470a:	e003      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800470c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004710:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004714:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471c:	f002 0320 	and.w	r3, r2, #32
 8004720:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004724:	2300      	movs	r3, #0
 8004726:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800472a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800472e:	460b      	mov	r3, r1
 8004730:	4313      	orrs	r3, r2
 8004732:	d053      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8004734:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800473a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800473e:	d031      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8004740:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004744:	d82a      	bhi.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004746:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800474a:	d02d      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800474c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004750:	d824      	bhi.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004752:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004756:	d029      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004758:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800475c:	d81e      	bhi.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800475e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004762:	d011      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004768:	d818      	bhi.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800476a:	2b00      	cmp	r3, #0
 800476c:	d020      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800476e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004772:	d113      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004774:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004778:	3308      	adds	r3, #8
 800477a:	4618      	mov	r0, r3
 800477c:	f002 fef0 	bl	8007560 <RCCEx_PLL2_Config>
 8004780:	4603      	mov	r3, r0
 8004782:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8004786:	e014      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004788:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800478c:	3330      	adds	r3, #48	@ 0x30
 800478e:	4618      	mov	r0, r3
 8004790:	f002 ff7e 	bl	8007690 <RCCEx_PLL3_Config>
 8004794:	4603      	mov	r3, r0
 8004796:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 800479a:	e00a      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80047a2:	e006      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80047a4:	bf00      	nop
 80047a6:	e004      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80047a8:	bf00      	nop
 80047aa:	e002      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80047ac:	bf00      	nop
 80047ae:	e000      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80047b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047b2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10c      	bne.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80047ba:	4b55      	ldr	r3, [pc, #340]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80047bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80047c0:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 80047c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ca:	4a51      	ldr	r2, [pc, #324]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80047cc:	430b      	orrs	r3, r1
 80047ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80047d2:	e003      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80047d8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e4:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80047e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80047ec:	2300      	movs	r3, #0
 80047ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80047f2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80047f6:	460b      	mov	r3, r1
 80047f8:	4313      	orrs	r3, r2
 80047fa:	d053      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80047fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004802:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004806:	d031      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8004808:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800480c:	d82a      	bhi.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800480e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004812:	d02d      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8004814:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004818:	d824      	bhi.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800481a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800481e:	d029      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004820:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004824:	d81e      	bhi.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004826:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800482a:	d011      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800482c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004830:	d818      	bhi.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004832:	2b00      	cmp	r3, #0
 8004834:	d020      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004836:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800483a:	d113      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800483c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004840:	3308      	adds	r3, #8
 8004842:	4618      	mov	r0, r3
 8004844:	f002 fe8c 	bl	8007560 <RCCEx_PLL2_Config>
 8004848:	4603      	mov	r3, r0
 800484a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800484e:	e014      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004850:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004854:	3330      	adds	r3, #48	@ 0x30
 8004856:	4618      	mov	r0, r3
 8004858:	f002 ff1a 	bl	8007690 <RCCEx_PLL3_Config>
 800485c:	4603      	mov	r3, r0
 800485e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004862:	e00a      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800486a:	e006      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800486c:	bf00      	nop
 800486e:	e004      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004870:	bf00      	nop
 8004872:	e002      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004874:	bf00      	nop
 8004876:	e000      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004878:	bf00      	nop
    }

    if (ret == HAL_OK)
 800487a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10c      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004882:	4b23      	ldr	r3, [pc, #140]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004888:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800488c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004890:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004892:	4a1f      	ldr	r2, [pc, #124]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004894:	430b      	orrs	r3, r1
 8004896:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800489a:	e003      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800489c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80048a0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ac:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80048b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80048b4:	2300      	movs	r3, #0
 80048b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80048ba:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80048be:	460b      	mov	r3, r1
 80048c0:	4313      	orrs	r3, r2
 80048c2:	d03d      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80048c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80048ce:	d01b      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x650>
 80048d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80048d4:	d814      	bhi.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x648>
 80048d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048da:	d017      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x654>
 80048dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048e0:	d80e      	bhi.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x648>
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d016      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 80048e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048ea:	d109      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80048ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048f0:	3330      	adds	r3, #48	@ 0x30
 80048f2:	4618      	mov	r0, r3
 80048f4:	f002 fecc 	bl	8007690 <RCCEx_PLL3_Config>
 80048f8:	4603      	mov	r3, r0
 80048fa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80048fe:	e00a      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004906:	e006      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8004908:	bf00      	nop
 800490a:	e004      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 800490c:	bf00      	nop
 800490e:	e002      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8004910:	44020c00 	.word	0x44020c00
        break;
 8004914:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004916:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10c      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800491e:	4b99      	ldr	r3, [pc, #612]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004920:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004924:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004928:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800492c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800492e:	4a95      	ldr	r2, [pc, #596]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004930:	430b      	orrs	r3, r1
 8004932:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004936:	e003      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004938:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800493c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004940:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004948:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800494c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004950:	2300      	movs	r3, #0
 8004952:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004956:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800495a:	460b      	mov	r3, r1
 800495c:	4313      	orrs	r3, r2
 800495e:	d03b      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8004960:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004964:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004966:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800496a:	d01b      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 800496c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004970:	d814      	bhi.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8004972:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004976:	d017      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8004978:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800497c:	d80e      	bhi.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 800497e:	2b00      	cmp	r3, #0
 8004980:	d014      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8004982:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004986:	d109      	bne.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004988:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800498c:	3330      	adds	r3, #48	@ 0x30
 800498e:	4618      	mov	r0, r3
 8004990:	f002 fe7e 	bl	8007690 <RCCEx_PLL3_Config>
 8004994:	4603      	mov	r3, r0
 8004996:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800499a:	e008      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80049a2:	e004      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 80049a4:	bf00      	nop
 80049a6:	e002      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 80049a8:	bf00      	nop
 80049aa:	e000      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 80049ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049ae:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10c      	bne.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80049b6:	4b73      	ldr	r3, [pc, #460]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80049b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80049bc:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80049c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049c6:	4a6f      	ldr	r2, [pc, #444]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80049c8:	430b      	orrs	r3, r1
 80049ca:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80049ce:	e003      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80049d4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80049e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80049e8:	2300      	movs	r3, #0
 80049ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80049ee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80049f2:	460b      	mov	r3, r1
 80049f4:	4313      	orrs	r3, r2
 80049f6:	d03d      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 80049f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a00:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a04:	d01b      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x786>
 8004a06:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a0a:	d814      	bhi.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8004a0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a10:	d017      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8004a12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a16:	d80e      	bhi.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d014      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8004a1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a20:	d109      	bne.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a26:	3330      	adds	r3, #48	@ 0x30
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f002 fe31 	bl	8007690 <RCCEx_PLL3_Config>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 8004a34:	e008      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004a3c:	e004      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8004a3e:	bf00      	nop
 8004a40:	e002      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8004a42:	bf00      	nop
 8004a44:	e000      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8004a46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a48:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10d      	bne.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004a50:	4b4c      	ldr	r3, [pc, #304]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004a52:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a56:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004a5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a62:	4a48      	ldr	r2, [pc, #288]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004a64:	430b      	orrs	r3, r1
 8004a66:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004a6a:	e003      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a6c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004a70:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8004a74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004a80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a84:	2300      	movs	r3, #0
 8004a86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004a8a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4313      	orrs	r3, r2
 8004a92:	d035      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8004a94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004aa0:	d015      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x816>
 8004aa2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004aa6:	d80e      	bhi.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d012      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8004aac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ab0:	d109      	bne.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ab2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ab6:	3330      	adds	r3, #48	@ 0x30
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f002 fde9 	bl	8007690 <RCCEx_PLL3_Config>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8004ac4:	e006      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004acc:	e002      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8004ace:	bf00      	nop
 8004ad0:	e000      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8004ad2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ad4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10d      	bne.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8004adc:	4b29      	ldr	r3, [pc, #164]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ade:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ae2:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8004ae6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004aee:	4a25      	ldr	r2, [pc, #148]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004af0:	430b      	orrs	r3, r1
 8004af2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004af6:	e003      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004afc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8004b00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b08:	2100      	movs	r1, #0
 8004b0a:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8004b0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b16:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	d037      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8004b20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b2c:	d015      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8004b2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b32:	d80e      	bhi.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d012      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8004b38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b3c:	d109      	bne.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b42:	3330      	adds	r3, #48	@ 0x30
 8004b44:	4618      	mov	r0, r3
 8004b46:	f002 fda3 	bl	8007690 <RCCEx_PLL3_Config>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8004b50:	e006      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004b58:	e002      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8004b5a:	bf00      	nop
 8004b5c:	e000      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8004b5e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004b60:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10f      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8004b68:	4b06      	ldr	r3, [pc, #24]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b6a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b6e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004b72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b7a:	4a02      	ldr	r2, [pc, #8]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b7c:	430b      	orrs	r3, r1
 8004b7e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004b82:	e005      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 8004b84:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b88:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b8c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004b90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b98:	2100      	movs	r1, #0
 8004b9a:	67b9      	str	r1, [r7, #120]	@ 0x78
 8004b9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ba0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ba2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	d00e      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8004bac:	4bb8      	ldr	r3, [pc, #736]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004bae:	69db      	ldr	r3, [r3, #28]
 8004bb0:	4ab7      	ldr	r2, [pc, #732]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004bb2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004bb6:	61d3      	str	r3, [r2, #28]
 8004bb8:	4bb5      	ldr	r3, [pc, #724]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004bba:	69d9      	ldr	r1, [r3, #28]
 8004bbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bc0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004bc4:	4ab2      	ldr	r2, [pc, #712]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004bc6:	430b      	orrs	r3, r1
 8004bc8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004bca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004bd6:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bd8:	2300      	movs	r3, #0
 8004bda:	677b      	str	r3, [r7, #116]	@ 0x74
 8004bdc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004be0:	460b      	mov	r3, r1
 8004be2:	4313      	orrs	r3, r2
 8004be4:	d055      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8004be6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bee:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004bf2:	d031      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8004bf4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004bf8:	d82a      	bhi.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004bfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bfe:	d02d      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8004c00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c04:	d824      	bhi.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004c06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c0a:	d029      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8004c0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c10:	d81e      	bhi.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004c12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c16:	d011      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004c18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c1c:	d818      	bhi.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d020      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 8004c22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c26:	d113      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c2c:	3308      	adds	r3, #8
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f002 fc96 	bl	8007560 <RCCEx_PLL2_Config>
 8004c34:	4603      	mov	r3, r0
 8004c36:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004c3a:	e014      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c40:	3330      	adds	r3, #48	@ 0x30
 8004c42:	4618      	mov	r0, r3
 8004c44:	f002 fd24 	bl	8007690 <RCCEx_PLL3_Config>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004c4e:	e00a      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004c56:	e006      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004c58:	bf00      	nop
 8004c5a:	e004      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004c5c:	bf00      	nop
 8004c5e:	e002      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004c60:	bf00      	nop
 8004c62:	e000      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004c64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c66:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10d      	bne.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004c6e:	4b88      	ldr	r3, [pc, #544]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004c70:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004c74:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004c78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c80:	4a83      	ldr	r2, [pc, #524]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004c82:	430b      	orrs	r3, r1
 8004c84:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004c88:	e003      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c8a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c8e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004c92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004c9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ca4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4313      	orrs	r3, r2
 8004cac:	d055      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8004cae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cb6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004cba:	d031      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8004cbc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004cc0:	d82a      	bhi.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004cc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cc6:	d02d      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8004cc8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ccc:	d824      	bhi.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004cce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004cd2:	d029      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004cd4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004cd8:	d81e      	bhi.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004cda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cde:	d011      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8004ce0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ce4:	d818      	bhi.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d020      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004cea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cee:	d113      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cf0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cf4:	3308      	adds	r3, #8
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f002 fc32 	bl	8007560 <RCCEx_PLL2_Config>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004d02:	e014      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d08:	3330      	adds	r3, #48	@ 0x30
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f002 fcc0 	bl	8007690 <RCCEx_PLL3_Config>
 8004d10:	4603      	mov	r3, r0
 8004d12:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004d16:	e00a      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004d1e:	e006      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004d20:	bf00      	nop
 8004d22:	e004      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004d24:	bf00      	nop
 8004d26:	e002      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004d28:	bf00      	nop
 8004d2a:	e000      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004d2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d2e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10d      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004d36:	4b56      	ldr	r3, [pc, #344]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004d38:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004d3c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004d40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d48:	4a51      	ldr	r2, [pc, #324]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004d4a:	430b      	orrs	r3, r1
 8004d4c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004d50:	e003      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d52:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d56:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004d5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d62:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004d66:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d68:	2300      	movs	r3, #0
 8004d6a:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d6c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004d70:	460b      	mov	r3, r1
 8004d72:	4313      	orrs	r3, r2
 8004d74:	d032      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004d76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004d7e:	2b05      	cmp	r3, #5
 8004d80:	d80f      	bhi.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8004d82:	2b03      	cmp	r3, #3
 8004d84:	d211      	bcs.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d911      	bls.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d109      	bne.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d92:	3308      	adds	r3, #8
 8004d94:	4618      	mov	r0, r3
 8004d96:	f002 fbe3 	bl	8007560 <RCCEx_PLL2_Config>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004da0:	e006      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004da8:	e002      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8004daa:	bf00      	nop
 8004dac:	e000      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8004dae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004db0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10d      	bne.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004db8:	4b35      	ldr	r3, [pc, #212]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004dba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004dbe:	f023 0107 	bic.w	r1, r3, #7
 8004dc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dc6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004dca:	4a31      	ldr	r2, [pc, #196]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004dcc:	430b      	orrs	r3, r1
 8004dce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004dd2:	e003      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004dd8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8004ddc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de4:	2100      	movs	r1, #0
 8004de6:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004de8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004dee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004df2:	460b      	mov	r3, r1
 8004df4:	4313      	orrs	r3, r2
 8004df6:	d024      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8004df8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dfc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d005      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d005      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004e0e:	e002      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8004e10:	bf00      	nop
 8004e12:	e000      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8004e14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e16:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10d      	bne.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8004e1e:	4b1c      	ldr	r3, [pc, #112]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004e20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e24:	f023 0108 	bic.w	r1, r3, #8
 8004e28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004e30:	4a17      	ldr	r2, [pc, #92]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004e32:	430b      	orrs	r3, r1
 8004e34:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004e38:	e003      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e3a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e3e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004e4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e50:	2300      	movs	r3, #0
 8004e52:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e54:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004e58:	460b      	mov	r3, r1
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	f000 80b9 	beq.w	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004e60:	4b0c      	ldr	r3, [pc, #48]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8004e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e64:	4a0b      	ldr	r2, [pc, #44]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8004e66:	f043 0301 	orr.w	r3, r3, #1
 8004e6a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e6c:	f7fc ff0c 	bl	8001c88 <HAL_GetTick>
 8004e70:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004e74:	e010      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e76:	f7fc ff07 	bl	8001c88 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d908      	bls.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004e8c:	e00a      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8004e8e:	bf00      	nop
 8004e90:	44020c00 	.word	0x44020c00
 8004e94:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004e98:	4bba      	ldr	r3, [pc, #744]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d0e8      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 8004ea4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f040 808e 	bne.w	8004fca <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004eae:	4bb6      	ldr	r3, [pc, #728]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004eb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004eb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eb8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d023      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8004ec4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ec8:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8004ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d01b      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ed4:	4bac      	ldr	r3, [pc, #688]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004ed6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004eda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ede:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ee2:	4ba9      	ldr	r3, [pc, #676]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004ee4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ee8:	4aa7      	ldr	r2, [pc, #668]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004eea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ef2:	4ba5      	ldr	r3, [pc, #660]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004ef4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ef8:	4aa3      	ldr	r2, [pc, #652]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004efa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004efe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f02:	4aa1      	ldr	r2, [pc, #644]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f08:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d019      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f18:	f7fc feb6 	bl	8001c88 <HAL_GetTick>
 8004f1c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f20:	e00d      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f22:	f7fc feb1 	bl	8001c88 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f2c:	1ad2      	subs	r2, r2, r3
 8004f2e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d903      	bls.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8004f3c:	e006      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f3e:	4b92      	ldr	r3, [pc, #584]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004f40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d0ea      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8004f4c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d135      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004f54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f58:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004f5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f64:	d110      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 8004f66:	4b88      	ldr	r3, [pc, #544]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004f6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f72:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004f76:	091b      	lsrs	r3, r3, #4
 8004f78:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004f7c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004f80:	4a81      	ldr	r2, [pc, #516]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004f82:	430b      	orrs	r3, r1
 8004f84:	61d3      	str	r3, [r2, #28]
 8004f86:	e005      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8004f88:	4b7f      	ldr	r3, [pc, #508]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	4a7e      	ldr	r2, [pc, #504]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004f8e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004f92:	61d3      	str	r3, [r2, #28]
 8004f94:	4b7c      	ldr	r3, [pc, #496]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004f96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f9a:	4a7b      	ldr	r2, [pc, #492]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004f9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fa0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004fa4:	4b78      	ldr	r3, [pc, #480]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004fa6:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8004faa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004fb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fb6:	4a74      	ldr	r2, [pc, #464]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004fb8:	430b      	orrs	r3, r1
 8004fba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004fbe:	e008      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fc0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004fc4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8004fc8:	e003      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fca:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004fce:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004fd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fda:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004fde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fe4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004fe8:	460b      	mov	r3, r1
 8004fea:	4313      	orrs	r3, r2
 8004fec:	d035      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004fee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ff2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ff6:	2b30      	cmp	r3, #48	@ 0x30
 8004ff8:	d014      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 8004ffa:	2b30      	cmp	r3, #48	@ 0x30
 8004ffc:	d80e      	bhi.n	800501c <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8004ffe:	2b20      	cmp	r3, #32
 8005000:	d012      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8005002:	2b20      	cmp	r3, #32
 8005004:	d80a      	bhi.n	800501c <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8005006:	2b00      	cmp	r3, #0
 8005008:	d010      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0xd74>
 800500a:	2b10      	cmp	r3, #16
 800500c:	d106      	bne.n	800501c <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800500e:	4b5e      	ldr	r3, [pc, #376]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005012:	4a5d      	ldr	r2, [pc, #372]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005014:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005018:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800501a:	e008      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005022:	e004      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8005024:	bf00      	nop
 8005026:	e002      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8005028:	bf00      	nop
 800502a:	e000      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 800502c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800502e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10d      	bne.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005036:	4b54      	ldr	r3, [pc, #336]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005038:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800503c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005040:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005044:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005048:	4a4f      	ldr	r2, [pc, #316]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800504a:	430b      	orrs	r3, r1
 800504c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005050:	e003      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005052:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005056:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800505a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800505e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005062:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005066:	643b      	str	r3, [r7, #64]	@ 0x40
 8005068:	2300      	movs	r3, #0
 800506a:	647b      	str	r3, [r7, #68]	@ 0x44
 800506c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005070:	460b      	mov	r3, r1
 8005072:	4313      	orrs	r3, r2
 8005074:	d033      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8005076:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800507a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800507e:	2b00      	cmp	r3, #0
 8005080:	d002      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 8005082:	2b40      	cmp	r3, #64	@ 0x40
 8005084:	d007      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005086:	e010      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005088:	4b3f      	ldr	r3, [pc, #252]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800508a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508c:	4a3e      	ldr	r2, [pc, #248]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800508e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005092:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005094:	e00d      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005096:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800509a:	3308      	adds	r3, #8
 800509c:	4618      	mov	r0, r3
 800509e:	f002 fa5f 	bl	8007560 <RCCEx_PLL2_Config>
 80050a2:	4603      	mov	r3, r0
 80050a4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80050a8:	e003      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80050b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050b2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10d      	bne.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80050ba:	4b33      	ldr	r3, [pc, #204]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80050bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80050c0:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80050c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050cc:	4a2e      	ldr	r2, [pc, #184]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80050ce:	430b      	orrs	r3, r1
 80050d0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80050d4:	e003      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80050da:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80050de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e6:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80050ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050ec:	2300      	movs	r3, #0
 80050ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050f0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80050f4:	460b      	mov	r3, r1
 80050f6:	4313      	orrs	r3, r2
 80050f8:	d04c      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80050fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005102:	2b04      	cmp	r3, #4
 8005104:	d827      	bhi.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8005106:	a201      	add	r2, pc, #4	@ (adr r2, 800510c <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 8005108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510c:	08005121 	.word	0x08005121
 8005110:	0800512f 	.word	0x0800512f
 8005114:	08005143 	.word	0x08005143
 8005118:	0800515f 	.word	0x0800515f
 800511c:	0800515f 	.word	0x0800515f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005120:	4b19      	ldr	r3, [pc, #100]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005124:	4a18      	ldr	r2, [pc, #96]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005126:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800512a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800512c:	e018      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800512e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005132:	3308      	adds	r3, #8
 8005134:	4618      	mov	r0, r3
 8005136:	f002 fa13 	bl	8007560 <RCCEx_PLL2_Config>
 800513a:	4603      	mov	r3, r0
 800513c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005140:	e00e      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005142:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005146:	3330      	adds	r3, #48	@ 0x30
 8005148:	4618      	mov	r0, r3
 800514a:	f002 faa1 	bl	8007690 <RCCEx_PLL3_Config>
 800514e:	4603      	mov	r3, r0
 8005150:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005154:	e004      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800515c:	e000      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 800515e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005160:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005164:	2b00      	cmp	r3, #0
 8005166:	d111      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005168:	4b07      	ldr	r3, [pc, #28]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800516a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800516e:	f023 0107 	bic.w	r1, r3, #7
 8005172:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005176:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800517a:	4a03      	ldr	r2, [pc, #12]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800517c:	430b      	orrs	r3, r1
 800517e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005182:	e007      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8005184:	44020800 	.word	0x44020800
 8005188:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800518c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005190:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005194:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80051a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80051a2:	2300      	movs	r3, #0
 80051a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80051a6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80051aa:	460b      	mov	r3, r1
 80051ac:	4313      	orrs	r3, r2
 80051ae:	f000 8081 	beq.w	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80051b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80051ba:	2b20      	cmp	r3, #32
 80051bc:	d85f      	bhi.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 80051be:	a201      	add	r2, pc, #4	@ (adr r2, 80051c4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 80051c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c4:	08005249 	.word	0x08005249
 80051c8:	0800527f 	.word	0x0800527f
 80051cc:	0800527f 	.word	0x0800527f
 80051d0:	0800527f 	.word	0x0800527f
 80051d4:	0800527f 	.word	0x0800527f
 80051d8:	0800527f 	.word	0x0800527f
 80051dc:	0800527f 	.word	0x0800527f
 80051e0:	0800527f 	.word	0x0800527f
 80051e4:	08005257 	.word	0x08005257
 80051e8:	0800527f 	.word	0x0800527f
 80051ec:	0800527f 	.word	0x0800527f
 80051f0:	0800527f 	.word	0x0800527f
 80051f4:	0800527f 	.word	0x0800527f
 80051f8:	0800527f 	.word	0x0800527f
 80051fc:	0800527f 	.word	0x0800527f
 8005200:	0800527f 	.word	0x0800527f
 8005204:	0800526b 	.word	0x0800526b
 8005208:	0800527f 	.word	0x0800527f
 800520c:	0800527f 	.word	0x0800527f
 8005210:	0800527f 	.word	0x0800527f
 8005214:	0800527f 	.word	0x0800527f
 8005218:	0800527f 	.word	0x0800527f
 800521c:	0800527f 	.word	0x0800527f
 8005220:	0800527f 	.word	0x0800527f
 8005224:	08005287 	.word	0x08005287
 8005228:	0800527f 	.word	0x0800527f
 800522c:	0800527f 	.word	0x0800527f
 8005230:	0800527f 	.word	0x0800527f
 8005234:	0800527f 	.word	0x0800527f
 8005238:	0800527f 	.word	0x0800527f
 800523c:	0800527f 	.word	0x0800527f
 8005240:	0800527f 	.word	0x0800527f
 8005244:	08005287 	.word	0x08005287
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005248:	4bb9      	ldr	r3, [pc, #740]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800524a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800524c:	4ab8      	ldr	r2, [pc, #736]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800524e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005252:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005254:	e018      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005256:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800525a:	3308      	adds	r3, #8
 800525c:	4618      	mov	r0, r3
 800525e:	f002 f97f 	bl	8007560 <RCCEx_PLL2_Config>
 8005262:	4603      	mov	r3, r0
 8005264:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005268:	e00e      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800526a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800526e:	3330      	adds	r3, #48	@ 0x30
 8005270:	4618      	mov	r0, r3
 8005272:	f002 fa0d 	bl	8007690 <RCCEx_PLL3_Config>
 8005276:	4603      	mov	r3, r0
 8005278:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800527c:	e004      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005284:	e000      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 8005286:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005288:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10d      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005290:	4ba7      	ldr	r3, [pc, #668]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005296:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800529a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800529e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80052a2:	4aa3      	ldr	r2, [pc, #652]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80052a4:	430b      	orrs	r3, r1
 80052a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80052aa:	e003      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80052b0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80052b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052bc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80052c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052c2:	2300      	movs	r3, #0
 80052c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052c6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80052ca:	460b      	mov	r3, r1
 80052cc:	4313      	orrs	r3, r2
 80052ce:	d04e      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80052d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80052d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052dc:	d02e      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80052de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052e2:	d827      	bhi.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80052e4:	2bc0      	cmp	r3, #192	@ 0xc0
 80052e6:	d02b      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 80052e8:	2bc0      	cmp	r3, #192	@ 0xc0
 80052ea:	d823      	bhi.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80052ec:	2b80      	cmp	r3, #128	@ 0x80
 80052ee:	d017      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 80052f0:	2b80      	cmp	r3, #128	@ 0x80
 80052f2:	d81f      	bhi.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d002      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x1046>
 80052f8:	2b40      	cmp	r3, #64	@ 0x40
 80052fa:	d007      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x1054>
 80052fc:	e01a      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052fe:	4b8c      	ldr	r3, [pc, #560]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005302:	4a8b      	ldr	r2, [pc, #556]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005304:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005308:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800530a:	e01a      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800530c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005310:	3308      	adds	r3, #8
 8005312:	4618      	mov	r0, r3
 8005314:	f002 f924 	bl	8007560 <RCCEx_PLL2_Config>
 8005318:	4603      	mov	r3, r0
 800531a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800531e:	e010      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005320:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005324:	3330      	adds	r3, #48	@ 0x30
 8005326:	4618      	mov	r0, r3
 8005328:	f002 f9b2 	bl	8007690 <RCCEx_PLL3_Config>
 800532c:	4603      	mov	r3, r0
 800532e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005332:	e006      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800533a:	e002      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 800533c:	bf00      	nop
 800533e:	e000      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8005340:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005342:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10d      	bne.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800534a:	4b79      	ldr	r3, [pc, #484]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800534c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005350:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8005354:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005358:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800535c:	4974      	ldr	r1, [pc, #464]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800535e:	4313      	orrs	r3, r2
 8005360:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005364:	e003      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005366:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800536a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800536e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005376:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800537a:	623b      	str	r3, [r7, #32]
 800537c:	2300      	movs	r3, #0
 800537e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005380:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005384:	460b      	mov	r3, r1
 8005386:	4313      	orrs	r3, r2
 8005388:	d055      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800538a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800538e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005392:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005396:	d031      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8005398:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800539c:	d82a      	bhi.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800539e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053a2:	d02d      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 80053a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053a8:	d824      	bhi.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 80053aa:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80053ae:	d029      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x114c>
 80053b0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80053b4:	d81e      	bhi.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 80053b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053ba:	d011      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 80053bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053c0:	d818      	bhi.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d020      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 80053c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053ca:	d113      	bne.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80053cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053d0:	3308      	adds	r3, #8
 80053d2:	4618      	mov	r0, r3
 80053d4:	f002 f8c4 	bl	8007560 <RCCEx_PLL2_Config>
 80053d8:	4603      	mov	r3, r0
 80053da:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80053de:	e014      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80053e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053e4:	3330      	adds	r3, #48	@ 0x30
 80053e6:	4618      	mov	r0, r3
 80053e8:	f002 f952 	bl	8007690 <RCCEx_PLL3_Config>
 80053ec:	4603      	mov	r3, r0
 80053ee:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80053f2:	e00a      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80053fa:	e006      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80053fc:	bf00      	nop
 80053fe:	e004      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005400:	bf00      	nop
 8005402:	e002      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005404:	bf00      	nop
 8005406:	e000      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800540a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10d      	bne.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8005412:	4b47      	ldr	r3, [pc, #284]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005418:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 800541c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005420:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005424:	4942      	ldr	r1, [pc, #264]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005426:	4313      	orrs	r3, r2
 8005428:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800542c:	e003      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800542e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005432:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005436:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800543a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543e:	2100      	movs	r1, #0
 8005440:	61b9      	str	r1, [r7, #24]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	61fb      	str	r3, [r7, #28]
 8005448:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800544c:	460b      	mov	r3, r1
 800544e:	4313      	orrs	r3, r2
 8005450:	d03c      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8005452:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005456:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800545a:	2b03      	cmp	r3, #3
 800545c:	d81b      	bhi.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x11de>
 800545e:	a201      	add	r2, pc, #4	@ (adr r2, 8005464 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 8005460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005464:	0800549f 	.word	0x0800549f
 8005468:	08005475 	.word	0x08005475
 800546c:	08005483 	.word	0x08005483
 8005470:	0800549f 	.word	0x0800549f
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005474:	4b2e      	ldr	r3, [pc, #184]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005478:	4a2d      	ldr	r2, [pc, #180]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800547a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800547e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005480:	e00e      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005482:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005486:	3308      	adds	r3, #8
 8005488:	4618      	mov	r0, r3
 800548a:	f002 f869 	bl	8007560 <RCCEx_PLL2_Config>
 800548e:	4603      	mov	r3, r0
 8005490:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8005494:	e004      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800549c:	e000      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 800549e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054a0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10d      	bne.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80054a8:	4b21      	ldr	r3, [pc, #132]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80054aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80054ae:	f023 0203 	bic.w	r2, r3, #3
 80054b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80054ba:	491d      	ldr	r1, [pc, #116]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80054c2:	e003      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80054c8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80054cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d4:	2100      	movs	r1, #0
 80054d6:	6139      	str	r1, [r7, #16]
 80054d8:	f003 0304 	and.w	r3, r3, #4
 80054dc:	617b      	str	r3, [r7, #20]
 80054de:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80054e2:	460b      	mov	r3, r1
 80054e4:	4313      	orrs	r3, r2
 80054e6:	d03c      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80054e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054f4:	d00e      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80054f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054fa:	d815      	bhi.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d019      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x127c>
 8005500:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005504:	d110      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005506:	4b0a      	ldr	r3, [pc, #40]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800550a:	4a09      	ldr	r2, [pc, #36]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800550c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005510:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005512:	e010      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005514:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005518:	3308      	adds	r3, #8
 800551a:	4618      	mov	r0, r3
 800551c:	f002 f820 	bl	8007560 <RCCEx_PLL2_Config>
 8005520:	4603      	mov	r3, r0
 8005522:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005526:	e006      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800552e:	e002      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x127e>
 8005530:	44020c00 	.word	0x44020c00
        break;
 8005534:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005536:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10d      	bne.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800553e:	4b3d      	ldr	r3, [pc, #244]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005540:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005544:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005548:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800554c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005550:	4938      	ldr	r1, [pc, #224]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005552:	4313      	orrs	r3, r2
 8005554:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8005558:	e003      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800555a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800555e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005562:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556a:	2100      	movs	r1, #0
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	f003 0310 	and.w	r3, r3, #16
 8005572:	60fb      	str	r3, [r7, #12]
 8005574:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005578:	460b      	mov	r3, r1
 800557a:	4313      	orrs	r3, r2
 800557c:	d038      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800557e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005582:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005586:	2b30      	cmp	r3, #48	@ 0x30
 8005588:	d01b      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x130a>
 800558a:	2b30      	cmp	r3, #48	@ 0x30
 800558c:	d815      	bhi.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x1302>
 800558e:	2b10      	cmp	r3, #16
 8005590:	d002      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 8005592:	2b20      	cmp	r3, #32
 8005594:	d007      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 8005596:	e010      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005598:	4b26      	ldr	r3, [pc, #152]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800559a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559c:	4a25      	ldr	r2, [pc, #148]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800559e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055a2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80055a4:	e00e      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80055a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055aa:	3330      	adds	r3, #48	@ 0x30
 80055ac:	4618      	mov	r0, r3
 80055ae:	f002 f86f 	bl	8007690 <RCCEx_PLL3_Config>
 80055b2:	4603      	mov	r3, r0
 80055b4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80055b8:	e004      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80055c0:	e000      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 80055c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055c4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10d      	bne.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80055cc:	4b19      	ldr	r3, [pc, #100]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80055ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80055d2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80055d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055da:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80055de:	4915      	ldr	r1, [pc, #84]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80055e6:	e003      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80055ec:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80055f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f8:	2100      	movs	r1, #0
 80055fa:	6039      	str	r1, [r7, #0]
 80055fc:	f003 0308 	and.w	r3, r3, #8
 8005600:	607b      	str	r3, [r7, #4]
 8005602:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005606:	460b      	mov	r3, r1
 8005608:	4313      	orrs	r3, r2
 800560a:	d00c      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 800560c:	4b09      	ldr	r3, [pc, #36]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800560e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005612:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005616:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800561a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800561e:	4905      	ldr	r1, [pc, #20]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005620:	4313      	orrs	r3, r2
 8005622:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8005626:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 800562a:	4618      	mov	r0, r3
 800562c:	37e8      	adds	r7, #232	@ 0xe8
 800562e:	46bd      	mov	sp, r7
 8005630:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005634:	44020c00 	.word	0x44020c00

08005638 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8005638:	b480      	push	{r7}
 800563a:	b08b      	sub	sp, #44	@ 0x2c
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005640:	4bae      	ldr	r3, [pc, #696]	@ (80058fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005648:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800564a:	4bac      	ldr	r3, [pc, #688]	@ (80058fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800564c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800564e:	f003 0303 	and.w	r3, r3, #3
 8005652:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005654:	4ba9      	ldr	r3, [pc, #676]	@ (80058fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005658:	0a1b      	lsrs	r3, r3, #8
 800565a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800565e:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005660:	4ba6      	ldr	r3, [pc, #664]	@ (80058fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005664:	091b      	lsrs	r3, r3, #4
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800566c:	4ba3      	ldr	r3, [pc, #652]	@ (80058fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800566e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005670:	08db      	lsrs	r3, r3, #3
 8005672:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	fb02 f303 	mul.w	r3, r2, r3
 800567c:	ee07 3a90 	vmov	s15, r3
 8005680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005684:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 8126 	beq.w	80058dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	2b03      	cmp	r3, #3
 8005694:	d053      	beq.n	800573e <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	2b03      	cmp	r3, #3
 800569a:	d86f      	bhi.n	800577c <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d003      	beq.n	80056aa <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d02b      	beq.n	8005700 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80056a8:	e068      	b.n	800577c <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80056aa:	4b94      	ldr	r3, [pc, #592]	@ (80058fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	08db      	lsrs	r3, r3, #3
 80056b0:	f003 0303 	and.w	r3, r3, #3
 80056b4:	4a92      	ldr	r2, [pc, #584]	@ (8005900 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80056b6:	fa22 f303 	lsr.w	r3, r2, r3
 80056ba:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	ee07 3a90 	vmov	s15, r3
 80056c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	ee07 3a90 	vmov	s15, r3
 80056cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056d4:	6a3b      	ldr	r3, [r7, #32]
 80056d6:	ee07 3a90 	vmov	s15, r3
 80056da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056de:	ed97 6a04 	vldr	s12, [r7, #16]
 80056e2:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8005904 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80056e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056fa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80056fe:	e068      	b.n	80057d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	ee07 3a90 	vmov	s15, r3
 8005706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800570a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8005908 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800570e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005712:	6a3b      	ldr	r3, [r7, #32]
 8005714:	ee07 3a90 	vmov	s15, r3
 8005718:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800571c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005720:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005904 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005724:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005728:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800572c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005730:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005738:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800573c:	e049      	b.n	80057d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	ee07 3a90 	vmov	s15, r3
 8005744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005748:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800590c <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 800574c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005750:	6a3b      	ldr	r3, [r7, #32]
 8005752:	ee07 3a90 	vmov	s15, r3
 8005756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800575a:	ed97 6a04 	vldr	s12, [r7, #16]
 800575e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8005904 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800576a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800576e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005776:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800577a:	e02a      	b.n	80057d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800577c:	4b5f      	ldr	r3, [pc, #380]	@ (80058fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	08db      	lsrs	r3, r3, #3
 8005782:	f003 0303 	and.w	r3, r3, #3
 8005786:	4a5e      	ldr	r2, [pc, #376]	@ (8005900 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8005788:	fa22 f303 	lsr.w	r3, r2, r3
 800578c:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	ee07 3a90 	vmov	s15, r3
 8005794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	ee07 3a90 	vmov	s15, r3
 800579e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	ee07 3a90 	vmov	s15, r3
 80057ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057b0:	ed97 6a04 	vldr	s12, [r7, #16]
 80057b4:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005904 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80057b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057cc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80057d0:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80057d2:	4b4a      	ldr	r3, [pc, #296]	@ (80058fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057de:	d121      	bne.n	8005824 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80057e0:	4b46      	ldr	r3, [pc, #280]	@ (80058fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80057e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d017      	beq.n	800581c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80057ec:	4b43      	ldr	r3, [pc, #268]	@ (80058fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80057ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057f0:	0a5b      	lsrs	r3, r3, #9
 80057f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057f6:	ee07 3a90 	vmov	s15, r3
 80057fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80057fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005802:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005806:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800580a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800580e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005812:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	e006      	b.n	800582a <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	601a      	str	r2, [r3, #0]
 8005822:	e002      	b.n	800582a <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800582a:	4b34      	ldr	r3, [pc, #208]	@ (80058fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005832:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005836:	d121      	bne.n	800587c <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005838:	4b30      	ldr	r3, [pc, #192]	@ (80058fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800583a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800583c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d017      	beq.n	8005874 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005844:	4b2d      	ldr	r3, [pc, #180]	@ (80058fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005848:	0c1b      	lsrs	r3, r3, #16
 800584a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800584e:	ee07 3a90 	vmov	s15, r3
 8005852:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005856:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800585a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800585e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005862:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005866:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800586a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	605a      	str	r2, [r3, #4]
 8005872:	e006      	b.n	8005882 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	605a      	str	r2, [r3, #4]
 800587a:	e002      	b.n	8005882 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005882:	4b1e      	ldr	r3, [pc, #120]	@ (80058fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800588a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800588e:	d121      	bne.n	80058d4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005890:	4b1a      	ldr	r3, [pc, #104]	@ (80058fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005894:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d017      	beq.n	80058cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800589c:	4b17      	ldr	r3, [pc, #92]	@ (80058fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800589e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058a0:	0e1b      	lsrs	r3, r3, #24
 80058a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058a6:	ee07 3a90 	vmov	s15, r3
 80058aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80058ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058b2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80058b6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80058ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058c2:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80058ca:	e010      	b.n	80058ee <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	609a      	str	r2, [r3, #8]
}
 80058d2:	e00c      	b.n	80058ee <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	609a      	str	r2, [r3, #8]
}
 80058da:	e008      	b.n	80058ee <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	609a      	str	r2, [r3, #8]
}
 80058ee:	bf00      	nop
 80058f0:	372c      	adds	r7, #44	@ 0x2c
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	44020c00 	.word	0x44020c00
 8005900:	03d09000 	.word	0x03d09000
 8005904:	46000000 	.word	0x46000000
 8005908:	4a742400 	.word	0x4a742400
 800590c:	4af42400 	.word	0x4af42400

08005910 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8005910:	b480      	push	{r7}
 8005912:	b08b      	sub	sp, #44	@ 0x2c
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005918:	4bae      	ldr	r3, [pc, #696]	@ (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800591a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800591c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005920:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005922:	4bac      	ldr	r3, [pc, #688]	@ (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005926:	f003 0303 	and.w	r3, r3, #3
 800592a:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 800592c:	4ba9      	ldr	r3, [pc, #676]	@ (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800592e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005930:	0a1b      	lsrs	r3, r3, #8
 8005932:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005936:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005938:	4ba6      	ldr	r3, [pc, #664]	@ (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800593a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800593c:	091b      	lsrs	r3, r3, #4
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005944:	4ba3      	ldr	r3, [pc, #652]	@ (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005948:	08db      	lsrs	r3, r3, #3
 800594a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	fb02 f303 	mul.w	r3, r2, r3
 8005954:	ee07 3a90 	vmov	s15, r3
 8005958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800595c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	2b00      	cmp	r3, #0
 8005964:	f000 8126 	beq.w	8005bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	2b03      	cmp	r3, #3
 800596c:	d053      	beq.n	8005a16 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	2b03      	cmp	r3, #3
 8005972:	d86f      	bhi.n	8005a54 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d003      	beq.n	8005982 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	2b02      	cmp	r3, #2
 800597e:	d02b      	beq.n	80059d8 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8005980:	e068      	b.n	8005a54 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005982:	4b94      	ldr	r3, [pc, #592]	@ (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	08db      	lsrs	r3, r3, #3
 8005988:	f003 0303 	and.w	r3, r3, #3
 800598c:	4a92      	ldr	r2, [pc, #584]	@ (8005bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800598e:	fa22 f303 	lsr.w	r3, r2, r3
 8005992:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	ee07 3a90 	vmov	s15, r3
 800599a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	ee07 3a90 	vmov	s15, r3
 80059a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ac:	6a3b      	ldr	r3, [r7, #32]
 80059ae:	ee07 3a90 	vmov	s15, r3
 80059b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059b6:	ed97 6a04 	vldr	s12, [r7, #16]
 80059ba:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8005bdc <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80059be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059d2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80059d6:	e068      	b.n	8005aaa <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	ee07 3a90 	vmov	s15, r3
 80059de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e2:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8005be0 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80059e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ea:	6a3b      	ldr	r3, [r7, #32]
 80059ec:	ee07 3a90 	vmov	s15, r3
 80059f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059f4:	ed97 6a04 	vldr	s12, [r7, #16]
 80059f8:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005bdc <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80059fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a10:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005a14:	e049      	b.n	8005aaa <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	ee07 3a90 	vmov	s15, r3
 8005a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a20:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005be4 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8005a24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a28:	6a3b      	ldr	r3, [r7, #32]
 8005a2a:	ee07 3a90 	vmov	s15, r3
 8005a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a32:	ed97 6a04 	vldr	s12, [r7, #16]
 8005a36:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8005bdc <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a4e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005a52:	e02a      	b.n	8005aaa <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005a54:	4b5f      	ldr	r3, [pc, #380]	@ (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	08db      	lsrs	r3, r3, #3
 8005a5a:	f003 0303 	and.w	r3, r3, #3
 8005a5e:	4a5e      	ldr	r2, [pc, #376]	@ (8005bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8005a60:	fa22 f303 	lsr.w	r3, r2, r3
 8005a64:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	ee07 3a90 	vmov	s15, r3
 8005a6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	ee07 3a90 	vmov	s15, r3
 8005a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a7e:	6a3b      	ldr	r3, [r7, #32]
 8005a80:	ee07 3a90 	vmov	s15, r3
 8005a84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a88:	ed97 6a04 	vldr	s12, [r7, #16]
 8005a8c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005bdc <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005a90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aa4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005aa8:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005aaa:	4b4a      	ldr	r3, [pc, #296]	@ (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ab2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ab6:	d121      	bne.n	8005afc <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005ab8:	4b46      	ldr	r3, [pc, #280]	@ (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005abc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d017      	beq.n	8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005ac4:	4b43      	ldr	r3, [pc, #268]	@ (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ac8:	0a5b      	lsrs	r3, r3, #9
 8005aca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ace:	ee07 3a90 	vmov	s15, r3
 8005ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8005ad6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ada:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005ade:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005ae2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ae6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aea:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	e006      	b.n	8005b02 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	601a      	str	r2, [r3, #0]
 8005afa:	e002      	b.n	8005b02 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b02:	4b34      	ldr	r3, [pc, #208]	@ (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b0e:	d121      	bne.n	8005b54 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005b10:	4b30      	ldr	r3, [pc, #192]	@ (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d017      	beq.n	8005b4c <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005b1c:	4b2d      	ldr	r3, [pc, #180]	@ (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b20:	0c1b      	lsrs	r3, r3, #16
 8005b22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b26:	ee07 3a90 	vmov	s15, r3
 8005b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005b2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b32:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005b36:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005b3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b42:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	605a      	str	r2, [r3, #4]
 8005b4a:	e006      	b.n	8005b5a <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	605a      	str	r2, [r3, #4]
 8005b52:	e002      	b.n	8005b5a <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b66:	d121      	bne.n	8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005b68:	4b1a      	ldr	r3, [pc, #104]	@ (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d017      	beq.n	8005ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005b74:	4b17      	ldr	r3, [pc, #92]	@ (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b78:	0e1b      	lsrs	r3, r3, #24
 8005b7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b7e:	ee07 3a90 	vmov	s15, r3
 8005b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8005b86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b8a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005b8e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005b92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b9a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005ba2:	e010      	b.n	8005bc6 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	609a      	str	r2, [r3, #8]
}
 8005baa:	e00c      	b.n	8005bc6 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	609a      	str	r2, [r3, #8]
}
 8005bb2:	e008      	b.n	8005bc6 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	609a      	str	r2, [r3, #8]
}
 8005bc6:	bf00      	nop
 8005bc8:	372c      	adds	r7, #44	@ 0x2c
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	44020c00 	.word	0x44020c00
 8005bd8:	03d09000 	.word	0x03d09000
 8005bdc:	46000000 	.word	0x46000000
 8005be0:	4a742400 	.word	0x4a742400
 8005be4:	4af42400 	.word	0x4af42400

08005be8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b08b      	sub	sp, #44	@ 0x2c
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005bf0:	4bae      	ldr	r3, [pc, #696]	@ (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bf8:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005bfa:	4bac      	ldr	r3, [pc, #688]	@ (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bfe:	f003 0303 	and.w	r3, r3, #3
 8005c02:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8005c04:	4ba9      	ldr	r3, [pc, #676]	@ (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c08:	0a1b      	lsrs	r3, r3, #8
 8005c0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c0e:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005c10:	4ba6      	ldr	r3, [pc, #664]	@ (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c14:	091b      	lsrs	r3, r3, #4
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005c1c:	4ba3      	ldr	r3, [pc, #652]	@ (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005c1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c20:	08db      	lsrs	r3, r3, #3
 8005c22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	fb02 f303 	mul.w	r3, r2, r3
 8005c2c:	ee07 3a90 	vmov	s15, r3
 8005c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c34:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 8126 	beq.w	8005e8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	2b03      	cmp	r3, #3
 8005c44:	d053      	beq.n	8005cee <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	2b03      	cmp	r3, #3
 8005c4a:	d86f      	bhi.n	8005d2c <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d003      	beq.n	8005c5a <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d02b      	beq.n	8005cb0 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005c58:	e068      	b.n	8005d2c <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005c5a:	4b94      	ldr	r3, [pc, #592]	@ (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	08db      	lsrs	r3, r3, #3
 8005c60:	f003 0303 	and.w	r3, r3, #3
 8005c64:	4a92      	ldr	r2, [pc, #584]	@ (8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8005c66:	fa22 f303 	lsr.w	r3, r2, r3
 8005c6a:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	ee07 3a90 	vmov	s15, r3
 8005c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	ee07 3a90 	vmov	s15, r3
 8005c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c84:	6a3b      	ldr	r3, [r7, #32]
 8005c86:	ee07 3a90 	vmov	s15, r3
 8005c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c8e:	ed97 6a04 	vldr	s12, [r7, #16]
 8005c92:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8005eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8005c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005caa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005cae:	e068      	b.n	8005d82 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	ee07 3a90 	vmov	s15, r3
 8005cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cba:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8005eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8005cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cc2:	6a3b      	ldr	r3, [r7, #32]
 8005cc4:	ee07 3a90 	vmov	s15, r3
 8005cc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ccc:	ed97 6a04 	vldr	s12, [r7, #16]
 8005cd0:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8005cd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cdc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ce0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ce8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005cec:	e049      	b.n	8005d82 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	ee07 3a90 	vmov	s15, r3
 8005cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cf8:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005ebc <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8005cfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d00:	6a3b      	ldr	r3, [r7, #32]
 8005d02:	ee07 3a90 	vmov	s15, r3
 8005d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d0a:	ed97 6a04 	vldr	s12, [r7, #16]
 8005d0e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8005eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8005d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d26:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005d2a:	e02a      	b.n	8005d82 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005d2c:	4b5f      	ldr	r3, [pc, #380]	@ (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	08db      	lsrs	r3, r3, #3
 8005d32:	f003 0303 	and.w	r3, r3, #3
 8005d36:	4a5e      	ldr	r2, [pc, #376]	@ (8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8005d38:	fa22 f303 	lsr.w	r3, r2, r3
 8005d3c:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	ee07 3a90 	vmov	s15, r3
 8005d44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	ee07 3a90 	vmov	s15, r3
 8005d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d56:	6a3b      	ldr	r3, [r7, #32]
 8005d58:	ee07 3a90 	vmov	s15, r3
 8005d5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d60:	ed97 6a04 	vldr	s12, [r7, #16]
 8005d64:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8005d68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d7c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005d80:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d82:	4b4a      	ldr	r3, [pc, #296]	@ (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d8e:	d121      	bne.n	8005dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005d90:	4b46      	ldr	r3, [pc, #280]	@ (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d017      	beq.n	8005dcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005d9c:	4b43      	ldr	r3, [pc, #268]	@ (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005da0:	0a5b      	lsrs	r3, r3, #9
 8005da2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005da6:	ee07 3a90 	vmov	s15, r3
 8005daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8005dae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005db2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005db6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dc2:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	601a      	str	r2, [r3, #0]
 8005dca:	e006      	b.n	8005dda <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	e002      	b.n	8005dda <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005dda:	4b34      	ldr	r3, [pc, #208]	@ (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005de2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005de6:	d121      	bne.n	8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005de8:	4b30      	ldr	r3, [pc, #192]	@ (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d017      	beq.n	8005e24 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005df4:	4b2d      	ldr	r3, [pc, #180]	@ (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005df8:	0c1b      	lsrs	r3, r3, #16
 8005dfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dfe:	ee07 3a90 	vmov	s15, r3
 8005e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005e06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e0a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005e0e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005e12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e1a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	605a      	str	r2, [r3, #4]
 8005e22:	e006      	b.n	8005e32 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	605a      	str	r2, [r3, #4]
 8005e2a:	e002      	b.n	8005e32 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e32:	4b1e      	ldr	r3, [pc, #120]	@ (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e3e:	d121      	bne.n	8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005e40:	4b1a      	ldr	r3, [pc, #104]	@ (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d017      	beq.n	8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005e4c:	4b17      	ldr	r3, [pc, #92]	@ (8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e50:	0e1b      	lsrs	r3, r3, #24
 8005e52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e56:	ee07 3a90 	vmov	s15, r3
 8005e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8005e5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e62:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005e66:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005e6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e72:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8005e7a:	e010      	b.n	8005e9e <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	609a      	str	r2, [r3, #8]
}
 8005e82:	e00c      	b.n	8005e9e <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	609a      	str	r2, [r3, #8]
}
 8005e8a:	e008      	b.n	8005e9e <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	609a      	str	r2, [r3, #8]
}
 8005e9e:	bf00      	nop
 8005ea0:	372c      	adds	r7, #44	@ 0x2c
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	44020c00 	.word	0x44020c00
 8005eb0:	03d09000 	.word	0x03d09000
 8005eb4:	46000000 	.word	0x46000000
 8005eb8:	4a742400 	.word	0x4a742400
 8005ebc:	4af42400 	.word	0x4af42400

08005ec0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005ec0:	b590      	push	{r4, r7, lr}
 8005ec2:	b08f      	sub	sp, #60	@ 0x3c
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005eca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ece:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8005ed2:	4321      	orrs	r1, r4
 8005ed4:	d150      	bne.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005ed6:	4b26      	ldr	r3, [pc, #152]	@ (8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005ed8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005edc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ee0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005ee2:	4b23      	ldr	r3, [pc, #140]	@ (8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005ee4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ee8:	f003 0302 	and.w	r3, r3, #2
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d108      	bne.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ef6:	d104      	bne.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005ef8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005efc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005efe:	f001 bb20 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005f02:	4b1b      	ldr	r3, [pc, #108]	@ (8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f10:	d108      	bne.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8005f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f18:	d104      	bne.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8005f1a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005f1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f20:	f001 bb0f 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8005f24:	4b12      	ldr	r3, [pc, #72]	@ (8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f30:	d119      	bne.n	8005f66 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8005f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f38:	d115      	bne.n	8005f66 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8005f42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f46:	d30a      	bcc.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8005f48:	4b09      	ldr	r3, [pc, #36]	@ (8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f4a:	69db      	ldr	r3, [r3, #28]
 8005f4c:	0a1b      	lsrs	r3, r3, #8
 8005f4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f52:	4a08      	ldr	r2, [pc, #32]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f58:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005f5a:	f001 baf2 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005f62:	f001 baee 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005f66:	2300      	movs	r3, #0
 8005f68:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f6a:	f001 baea 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005f6e:	bf00      	nop
 8005f70:	44020c00 	.word	0x44020c00
 8005f74:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8005f78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f7c:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 8005f80:	ea50 0104 	orrs.w	r1, r0, r4
 8005f84:	f000 8615 	beq.w	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 8005f88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f8c:	2801      	cmp	r0, #1
 8005f8e:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 8005f92:	f081 82d3 	bcs.w	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005f96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f9a:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8005f9e:	ea50 0104 	orrs.w	r1, r0, r4
 8005fa2:	f000 84d8 	beq.w	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8005fa6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005faa:	2801      	cmp	r0, #1
 8005fac:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8005fb0:	f081 82c4 	bcs.w	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005fb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fb8:	f1a1 0410 	sub.w	r4, r1, #16
 8005fbc:	ea50 0104 	orrs.w	r1, r0, r4
 8005fc0:	f001 8288 	beq.w	80074d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 8005fc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fc8:	2801      	cmp	r0, #1
 8005fca:	f171 0110 	sbcs.w	r1, r1, #16
 8005fce:	f081 82b5 	bcs.w	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005fd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fd6:	f1a1 0408 	sub.w	r4, r1, #8
 8005fda:	ea50 0104 	orrs.w	r1, r0, r4
 8005fde:	f001 81fe 	beq.w	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 8005fe2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fe6:	2801      	cmp	r0, #1
 8005fe8:	f171 0108 	sbcs.w	r1, r1, #8
 8005fec:	f081 82a6 	bcs.w	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005ff0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ff4:	1f0c      	subs	r4, r1, #4
 8005ff6:	ea50 0104 	orrs.w	r1, r0, r4
 8005ffa:	f000 8753 	beq.w	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 8005ffe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006002:	2801      	cmp	r0, #1
 8006004:	f171 0104 	sbcs.w	r1, r1, #4
 8006008:	f081 8298 	bcs.w	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800600c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006010:	1e8c      	subs	r4, r1, #2
 8006012:	ea50 0104 	orrs.w	r1, r0, r4
 8006016:	f001 8173 	beq.w	8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 800601a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800601e:	2801      	cmp	r0, #1
 8006020:	f171 0102 	sbcs.w	r1, r1, #2
 8006024:	f081 828a 	bcs.w	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006028:	e9d7 0100 	ldrd	r0, r1, [r7]
 800602c:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8006030:	4321      	orrs	r1, r4
 8006032:	f001 80fe 	beq.w	8007232 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8006036:	e9d7 0100 	ldrd	r0, r1, [r7]
 800603a:	4ccb      	ldr	r4, [pc, #812]	@ (8006368 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 800603c:	42a0      	cmp	r0, r4
 800603e:	f171 0100 	sbcs.w	r1, r1, #0
 8006042:	f081 827b 	bcs.w	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006046:	e9d7 0100 	ldrd	r0, r1, [r7]
 800604a:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 800604e:	4321      	orrs	r1, r4
 8006050:	f001 8076 	beq.w	8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 8006054:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006058:	4cc4      	ldr	r4, [pc, #784]	@ (800636c <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 800605a:	42a0      	cmp	r0, r4
 800605c:	f171 0100 	sbcs.w	r1, r1, #0
 8006060:	f081 826c 	bcs.w	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006064:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006068:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 800606c:	4321      	orrs	r1, r4
 800606e:	f000 87b5 	beq.w	8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 8006072:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006076:	4cbe      	ldr	r4, [pc, #760]	@ (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 8006078:	42a0      	cmp	r0, r4
 800607a:	f171 0100 	sbcs.w	r1, r1, #0
 800607e:	f081 825d 	bcs.w	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006082:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006086:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 800608a:	4321      	orrs	r1, r4
 800608c:	f000 8738 	beq.w	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8006090:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006094:	4cb7      	ldr	r4, [pc, #732]	@ (8006374 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 8006096:	42a0      	cmp	r0, r4
 8006098:	f171 0100 	sbcs.w	r1, r1, #0
 800609c:	f081 824e 	bcs.w	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80060a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060a4:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 80060a8:	4321      	orrs	r1, r4
 80060aa:	f001 81cd 	beq.w	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 80060ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060b2:	4cb1      	ldr	r4, [pc, #708]	@ (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 80060b4:	42a0      	cmp	r0, r4
 80060b6:	f171 0100 	sbcs.w	r1, r1, #0
 80060ba:	f081 823f 	bcs.w	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80060be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060c2:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 80060c6:	4321      	orrs	r1, r4
 80060c8:	f000 80d9 	beq.w	800627e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80060cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060d0:	4caa      	ldr	r4, [pc, #680]	@ (800637c <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 80060d2:	42a0      	cmp	r0, r4
 80060d4:	f171 0100 	sbcs.w	r1, r1, #0
 80060d8:	f081 8230 	bcs.w	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80060dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060e0:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 80060e4:	4321      	orrs	r1, r4
 80060e6:	f000 83da 	beq.w	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 80060ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060ee:	4ca4      	ldr	r4, [pc, #656]	@ (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 80060f0:	42a0      	cmp	r0, r4
 80060f2:	f171 0100 	sbcs.w	r1, r1, #0
 80060f6:	f081 8221 	bcs.w	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80060fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060fe:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8006102:	4321      	orrs	r1, r4
 8006104:	f000 8627 	beq.w	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 8006108:	e9d7 0100 	ldrd	r0, r1, [r7]
 800610c:	4c9d      	ldr	r4, [pc, #628]	@ (8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 800610e:	42a0      	cmp	r0, r4
 8006110:	f171 0100 	sbcs.w	r1, r1, #0
 8006114:	f081 8212 	bcs.w	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006118:	e9d7 0100 	ldrd	r0, r1, [r7]
 800611c:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8006120:	4321      	orrs	r1, r4
 8006122:	f000 857a 	beq.w	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8006126:	e9d7 0100 	ldrd	r0, r1, [r7]
 800612a:	4c97      	ldr	r4, [pc, #604]	@ (8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 800612c:	42a0      	cmp	r0, r4
 800612e:	f171 0100 	sbcs.w	r1, r1, #0
 8006132:	f081 8203 	bcs.w	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006136:	e9d7 0100 	ldrd	r0, r1, [r7]
 800613a:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 800613e:	4321      	orrs	r1, r4
 8006140:	f000 84fb 	beq.w	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8006144:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006148:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 800614c:	f171 0100 	sbcs.w	r1, r1, #0
 8006150:	f081 81f4 	bcs.w	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006154:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006158:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 800615c:	4321      	orrs	r1, r4
 800615e:	f000 84a9 	beq.w	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8006162:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006166:	f248 0401 	movw	r4, #32769	@ 0x8001
 800616a:	42a0      	cmp	r0, r4
 800616c:	f171 0100 	sbcs.w	r1, r1, #0
 8006170:	f081 81e4 	bcs.w	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006174:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006178:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 800617c:	4321      	orrs	r1, r4
 800617e:	f000 8456 	beq.w	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 8006182:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006186:	f244 0401 	movw	r4, #16385	@ 0x4001
 800618a:	42a0      	cmp	r0, r4
 800618c:	f171 0100 	sbcs.w	r1, r1, #0
 8006190:	f081 81d4 	bcs.w	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006194:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006198:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 800619c:	4321      	orrs	r1, r4
 800619e:	f000 8403 	beq.w	80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 80061a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061a6:	f242 0401 	movw	r4, #8193	@ 0x2001
 80061aa:	42a0      	cmp	r0, r4
 80061ac:	f171 0100 	sbcs.w	r1, r1, #0
 80061b0:	f081 81c4 	bcs.w	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80061b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061b8:	2821      	cmp	r0, #33	@ 0x21
 80061ba:	f171 0100 	sbcs.w	r1, r1, #0
 80061be:	d255      	bcs.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 80061c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061c4:	4301      	orrs	r1, r0
 80061c6:	f001 81b9 	beq.w	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80061ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061ce:	1e42      	subs	r2, r0, #1
 80061d0:	f141 33ff 	adc.w	r3, r1, #4294967295
 80061d4:	2a20      	cmp	r2, #32
 80061d6:	f173 0100 	sbcs.w	r1, r3, #0
 80061da:	f081 81af 	bcs.w	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80061de:	2a1f      	cmp	r2, #31
 80061e0:	f201 81ac 	bhi.w	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80061e4:	a101      	add	r1, pc, #4	@ (adr r1, 80061ec <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 80061e6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80061ea:	bf00      	nop
 80061ec:	080062c3 	.word	0x080062c3
 80061f0:	080063c1 	.word	0x080063c1
 80061f4:	0800753d 	.word	0x0800753d
 80061f8:	08006481 	.word	0x08006481
 80061fc:	0800753d 	.word	0x0800753d
 8006200:	0800753d 	.word	0x0800753d
 8006204:	0800753d 	.word	0x0800753d
 8006208:	08006551 	.word	0x08006551
 800620c:	0800753d 	.word	0x0800753d
 8006210:	0800753d 	.word	0x0800753d
 8006214:	0800753d 	.word	0x0800753d
 8006218:	0800753d 	.word	0x0800753d
 800621c:	0800753d 	.word	0x0800753d
 8006220:	0800753d 	.word	0x0800753d
 8006224:	0800753d 	.word	0x0800753d
 8006228:	08006635 	.word	0x08006635
 800622c:	0800753d 	.word	0x0800753d
 8006230:	0800753d 	.word	0x0800753d
 8006234:	0800753d 	.word	0x0800753d
 8006238:	0800753d 	.word	0x0800753d
 800623c:	0800753d 	.word	0x0800753d
 8006240:	0800753d 	.word	0x0800753d
 8006244:	0800753d 	.word	0x0800753d
 8006248:	0800753d 	.word	0x0800753d
 800624c:	0800753d 	.word	0x0800753d
 8006250:	0800753d 	.word	0x0800753d
 8006254:	0800753d 	.word	0x0800753d
 8006258:	0800753d 	.word	0x0800753d
 800625c:	0800753d 	.word	0x0800753d
 8006260:	0800753d 	.word	0x0800753d
 8006264:	0800753d 	.word	0x0800753d
 8006268:	0800670b 	.word	0x0800670b
 800626c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006270:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006274:	430b      	orrs	r3, r1
 8006276:	f000 82b3 	beq.w	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 800627a:	f001 b95f 	b.w	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800627e:	4b43      	ldr	r3, [pc, #268]	@ (800638c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006280:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006288:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800628a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628c:	2b00      	cmp	r3, #0
 800628e:	d108      	bne.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006290:	f107 0320 	add.w	r3, r7, #32
 8006294:	4618      	mov	r0, r3
 8006296:	f7ff f9cf 	bl	8005638 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800629a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800629e:	f001 b950 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 80062a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a4:	2b40      	cmp	r3, #64	@ 0x40
 80062a6:	d108      	bne.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062a8:	f107 0314 	add.w	r3, r7, #20
 80062ac:	4618      	mov	r0, r3
 80062ae:	f7ff fb2f 	bl	8005910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062b6:	f001 b944 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80062ba:	2300      	movs	r3, #0
 80062bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062be:	f001 b940 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80062c2:	4b32      	ldr	r3, [pc, #200]	@ (800638c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80062c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80062c8:	f003 0307 	and.w	r3, r3, #7
 80062cc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80062ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d104      	bne.n	80062de <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80062d4:	f7fd ffc4 	bl	8004260 <HAL_RCC_GetPCLK2Freq>
 80062d8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80062da:	f001 b932 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80062de:	4b2b      	ldr	r3, [pc, #172]	@ (800638c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062ea:	d10a      	bne.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80062ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d107      	bne.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062f2:	f107 0314 	add.w	r3, r7, #20
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7ff fb0a 	bl	8005910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006300:	e05c      	b.n	80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8006302:	4b22      	ldr	r3, [pc, #136]	@ (800638c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800630a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800630e:	d10a      	bne.n	8006326 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8006310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006312:	2b02      	cmp	r3, #2
 8006314:	d107      	bne.n	8006326 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006316:	f107 0308 	add.w	r3, r7, #8
 800631a:	4618      	mov	r0, r3
 800631c:	f7ff fc64 	bl	8005be8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	637b      	str	r3, [r7, #52]	@ 0x34
 8006324:	e04a      	b.n	80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006326:	4b19      	ldr	r3, [pc, #100]	@ (800638c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b02      	cmp	r3, #2
 8006330:	d10c      	bne.n	800634c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 8006332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006334:	2b03      	cmp	r3, #3
 8006336:	d109      	bne.n	800634c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006338:	4b14      	ldr	r3, [pc, #80]	@ (800638c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	08db      	lsrs	r3, r3, #3
 800633e:	f003 0303 	and.w	r3, r3, #3
 8006342:	4a13      	ldr	r2, [pc, #76]	@ (8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 8006344:	fa22 f303 	lsr.w	r3, r2, r3
 8006348:	637b      	str	r3, [r7, #52]	@ 0x34
 800634a:	e037      	b.n	80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800634c:	4b0f      	ldr	r3, [pc, #60]	@ (800638c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006354:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006358:	d11e      	bne.n	8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 800635a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800635c:	2b04      	cmp	r3, #4
 800635e:	d11b      	bne.n	8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 8006360:	4b0c      	ldr	r3, [pc, #48]	@ (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 8006362:	637b      	str	r3, [r7, #52]	@ 0x34
 8006364:	e02a      	b.n	80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 8006366:	bf00      	nop
 8006368:	40000001 	.word	0x40000001
 800636c:	20000001 	.word	0x20000001
 8006370:	10000001 	.word	0x10000001
 8006374:	08000001 	.word	0x08000001
 8006378:	04000001 	.word	0x04000001
 800637c:	00400001 	.word	0x00400001
 8006380:	00200001 	.word	0x00200001
 8006384:	00040001 	.word	0x00040001
 8006388:	00020001 	.word	0x00020001
 800638c:	44020c00 	.word	0x44020c00
 8006390:	03d09000 	.word	0x03d09000
 8006394:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006398:	4ba3      	ldr	r3, [pc, #652]	@ (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800639a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800639e:	f003 0302 	and.w	r3, r3, #2
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d106      	bne.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 80063a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a8:	2b05      	cmp	r3, #5
 80063aa:	d103      	bne.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 80063ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80063b2:	e003      	b.n	80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 80063b4:	2300      	movs	r3, #0
 80063b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80063b8:	f001 b8c3 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80063bc:	f001 b8c1 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80063c0:	4b99      	ldr	r3, [pc, #612]	@ (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80063c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80063c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063ca:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80063cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d104      	bne.n	80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80063d2:	f7fd ff2f 	bl	8004234 <HAL_RCC_GetPCLK1Freq>
 80063d6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80063d8:	f001 b8b3 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80063dc:	4b92      	ldr	r3, [pc, #584]	@ (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063e8:	d10a      	bne.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 80063ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ec:	2b08      	cmp	r3, #8
 80063ee:	d107      	bne.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063f0:	f107 0314 	add.w	r3, r7, #20
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7ff fa8b 	bl	8005910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80063fe:	e03d      	b.n	800647c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8006400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006402:	2b10      	cmp	r3, #16
 8006404:	d108      	bne.n	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006406:	f107 0308 	add.w	r3, r7, #8
 800640a:	4618      	mov	r0, r3
 800640c:	f7ff fbec 	bl	8005be8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006414:	f001 b895 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006418:	4b83      	ldr	r3, [pc, #524]	@ (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0302 	and.w	r3, r3, #2
 8006420:	2b02      	cmp	r3, #2
 8006422:	d10c      	bne.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8006424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006426:	2b18      	cmp	r3, #24
 8006428:	d109      	bne.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800642a:	4b7f      	ldr	r3, [pc, #508]	@ (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	08db      	lsrs	r3, r3, #3
 8006430:	f003 0303 	and.w	r3, r3, #3
 8006434:	4a7d      	ldr	r2, [pc, #500]	@ (800662c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8006436:	fa22 f303 	lsr.w	r3, r2, r3
 800643a:	637b      	str	r3, [r7, #52]	@ 0x34
 800643c:	e01e      	b.n	800647c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800643e:	4b7a      	ldr	r3, [pc, #488]	@ (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006446:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800644a:	d105      	bne.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 800644c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644e:	2b20      	cmp	r3, #32
 8006450:	d102      	bne.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 8006452:	4b77      	ldr	r3, [pc, #476]	@ (8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8006454:	637b      	str	r3, [r7, #52]	@ 0x34
 8006456:	e011      	b.n	800647c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006458:	4b73      	ldr	r3, [pc, #460]	@ (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800645a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800645e:	f003 0302 	and.w	r3, r3, #2
 8006462:	2b02      	cmp	r3, #2
 8006464:	d106      	bne.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8006466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006468:	2b28      	cmp	r3, #40	@ 0x28
 800646a:	d103      	bne.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 800646c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006470:	637b      	str	r3, [r7, #52]	@ 0x34
 8006472:	e003      	b.n	800647c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 8006474:	2300      	movs	r3, #0
 8006476:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006478:	f001 b863 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800647c:	f001 b861 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006480:	4b69      	ldr	r3, [pc, #420]	@ (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006482:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006486:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800648a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800648c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800648e:	2b00      	cmp	r3, #0
 8006490:	d104      	bne.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006492:	f7fd fecf 	bl	8004234 <HAL_RCC_GetPCLK1Freq>
 8006496:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006498:	f001 b853 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800649c:	4b62      	ldr	r3, [pc, #392]	@ (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064a8:	d10a      	bne.n	80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 80064aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ac:	2b40      	cmp	r3, #64	@ 0x40
 80064ae:	d107      	bne.n	80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064b0:	f107 0314 	add.w	r3, r7, #20
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7ff fa2b 	bl	8005910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80064be:	e045      	b.n	800654c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 80064c0:	4b59      	ldr	r3, [pc, #356]	@ (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064cc:	d10a      	bne.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 80064ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d0:	2b80      	cmp	r3, #128	@ 0x80
 80064d2:	d107      	bne.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064d4:	f107 0308 	add.w	r3, r7, #8
 80064d8:	4618      	mov	r0, r3
 80064da:	f7ff fb85 	bl	8005be8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80064e2:	e033      	b.n	800654c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80064e4:	4b50      	ldr	r3, [pc, #320]	@ (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0302 	and.w	r3, r3, #2
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d10c      	bne.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 80064f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80064f4:	d109      	bne.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80064f6:	4b4c      	ldr	r3, [pc, #304]	@ (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	08db      	lsrs	r3, r3, #3
 80064fc:	f003 0303 	and.w	r3, r3, #3
 8006500:	4a4a      	ldr	r2, [pc, #296]	@ (800662c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8006502:	fa22 f303 	lsr.w	r3, r2, r3
 8006506:	637b      	str	r3, [r7, #52]	@ 0x34
 8006508:	e020      	b.n	800654c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800650a:	4b47      	ldr	r3, [pc, #284]	@ (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006512:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006516:	d106      	bne.n	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 8006518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800651a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800651e:	d102      	bne.n	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 8006520:	4b43      	ldr	r3, [pc, #268]	@ (8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8006522:	637b      	str	r3, [r7, #52]	@ 0x34
 8006524:	e012      	b.n	800654c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006526:	4b40      	ldr	r3, [pc, #256]	@ (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006528:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800652c:	f003 0302 	and.w	r3, r3, #2
 8006530:	2b02      	cmp	r3, #2
 8006532:	d107      	bne.n	8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006536:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800653a:	d103      	bne.n	8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 800653c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006540:	637b      	str	r3, [r7, #52]	@ 0x34
 8006542:	e003      	b.n	800654c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 8006544:	2300      	movs	r3, #0
 8006546:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006548:	f000 bffb 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800654c:	f000 bff9 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006550:	4b35      	ldr	r3, [pc, #212]	@ (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006552:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006556:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800655a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800655c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800655e:	2b00      	cmp	r3, #0
 8006560:	d104      	bne.n	800656c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006562:	f7fd fe67 	bl	8004234 <HAL_RCC_GetPCLK1Freq>
 8006566:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006568:	f000 bfeb 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 800656c:	4b2e      	ldr	r3, [pc, #184]	@ (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006574:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006578:	d10b      	bne.n	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 800657a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800657c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006580:	d107      	bne.n	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006582:	f107 0314 	add.w	r3, r7, #20
 8006586:	4618      	mov	r0, r3
 8006588:	f7ff f9c2 	bl	8005910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006590:	e047      	b.n	8006622 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8006592:	4b25      	ldr	r3, [pc, #148]	@ (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800659a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800659e:	d10b      	bne.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80065a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065a6:	d107      	bne.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065a8:	f107 0308 	add.w	r3, r7, #8
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7ff fb1b 	bl	8005be8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80065b6:	e034      	b.n	8006622 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80065b8:	4b1b      	ldr	r3, [pc, #108]	@ (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0302 	and.w	r3, r3, #2
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d10d      	bne.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80065c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80065ca:	d109      	bne.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80065cc:	4b16      	ldr	r3, [pc, #88]	@ (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	08db      	lsrs	r3, r3, #3
 80065d2:	f003 0303 	and.w	r3, r3, #3
 80065d6:	4a15      	ldr	r2, [pc, #84]	@ (800662c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80065d8:	fa22 f303 	lsr.w	r3, r2, r3
 80065dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80065de:	e020      	b.n	8006622 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 80065e0:	4b11      	ldr	r3, [pc, #68]	@ (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065ec:	d106      	bne.n	80065fc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80065ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065f4:	d102      	bne.n	80065fc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 80065f6:	4b0e      	ldr	r3, [pc, #56]	@ (8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80065f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80065fa:	e012      	b.n	8006622 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80065fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80065fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	2b02      	cmp	r3, #2
 8006608:	d107      	bne.n	800661a <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 800660a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800660c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006610:	d103      	bne.n	800661a <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 8006612:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006616:	637b      	str	r3, [r7, #52]	@ 0x34
 8006618:	e003      	b.n	8006622 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 800661a:	2300      	movs	r3, #0
 800661c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800661e:	f000 bf90 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006622:	f000 bf8e 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006626:	bf00      	nop
 8006628:	44020c00 	.word	0x44020c00
 800662c:	03d09000 	.word	0x03d09000
 8006630:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006634:	4ba5      	ldr	r3, [pc, #660]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006636:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800663a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800663e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006642:	2b00      	cmp	r3, #0
 8006644:	d104      	bne.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006646:	f7fd fdf5 	bl	8004234 <HAL_RCC_GetPCLK1Freq>
 800664a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800664c:	f000 bf79 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8006650:	4b9e      	ldr	r3, [pc, #632]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006658:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800665c:	d10b      	bne.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800665e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006660:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006664:	d107      	bne.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006666:	f107 0314 	add.w	r3, r7, #20
 800666a:	4618      	mov	r0, r3
 800666c:	f7ff f950 	bl	8005910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	637b      	str	r3, [r7, #52]	@ 0x34
 8006674:	e047      	b.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8006676:	4b95      	ldr	r3, [pc, #596]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800667e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006682:	d10b      	bne.n	800669c <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8006684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006686:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800668a:	d107      	bne.n	800669c <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800668c:	f107 0308 	add.w	r3, r7, #8
 8006690:	4618      	mov	r0, r3
 8006692:	f7ff faa9 	bl	8005be8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	637b      	str	r3, [r7, #52]	@ 0x34
 800669a:	e034      	b.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800669c:	4b8b      	ldr	r3, [pc, #556]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0302 	and.w	r3, r3, #2
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d10d      	bne.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 80066a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80066ae:	d109      	bne.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80066b0:	4b86      	ldr	r3, [pc, #536]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	08db      	lsrs	r3, r3, #3
 80066b6:	f003 0303 	and.w	r3, r3, #3
 80066ba:	4a85      	ldr	r2, [pc, #532]	@ (80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 80066bc:	fa22 f303 	lsr.w	r3, r2, r3
 80066c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80066c2:	e020      	b.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 80066c4:	4b81      	ldr	r3, [pc, #516]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066d0:	d106      	bne.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80066d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066d8:	d102      	bne.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 80066da:	4b7e      	ldr	r3, [pc, #504]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 80066dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80066de:	e012      	b.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80066e0:	4b7a      	ldr	r3, [pc, #488]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80066e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d107      	bne.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 80066ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80066f4:	d103      	bne.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 80066f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80066fc:	e003      	b.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 80066fe:	2300      	movs	r3, #0
 8006700:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006702:	f000 bf1e 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006706:	f000 bf1c 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800670a:	4b70      	ldr	r3, [pc, #448]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800670c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006710:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8006714:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8006716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006718:	2b00      	cmp	r3, #0
 800671a:	d104      	bne.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800671c:	f7fd fd8a 	bl	8004234 <HAL_RCC_GetPCLK1Freq>
 8006720:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8006722:	f000 bf0e 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8006726:	4b69      	ldr	r3, [pc, #420]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800672e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006732:	d10b      	bne.n	800674c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8006734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006736:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800673a:	d107      	bne.n	800674c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800673c:	f107 0314 	add.w	r3, r7, #20
 8006740:	4618      	mov	r0, r3
 8006742:	f7ff f8e5 	bl	8005910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	637b      	str	r3, [r7, #52]	@ 0x34
 800674a:	e047      	b.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800674c:	4b5f      	ldr	r3, [pc, #380]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006754:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006758:	d10b      	bne.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800675a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800675c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006760:	d107      	bne.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006762:	f107 0308 	add.w	r3, r7, #8
 8006766:	4618      	mov	r0, r3
 8006768:	f7ff fa3e 	bl	8005be8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006770:	e034      	b.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8006772:	4b56      	ldr	r3, [pc, #344]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b02      	cmp	r3, #2
 800677c:	d10d      	bne.n	800679a <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 800677e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006780:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006784:	d109      	bne.n	800679a <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006786:	4b51      	ldr	r3, [pc, #324]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	08db      	lsrs	r3, r3, #3
 800678c:	f003 0303 	and.w	r3, r3, #3
 8006790:	4a4f      	ldr	r2, [pc, #316]	@ (80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8006792:	fa22 f303 	lsr.w	r3, r2, r3
 8006796:	637b      	str	r3, [r7, #52]	@ 0x34
 8006798:	e020      	b.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800679a:	4b4c      	ldr	r3, [pc, #304]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067a6:	d106      	bne.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 80067a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067ae:	d102      	bne.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 80067b0:	4b48      	ldr	r3, [pc, #288]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 80067b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80067b4:	e012      	b.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 80067b6:	4b45      	ldr	r3, [pc, #276]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80067b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d107      	bne.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 80067c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c6:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80067ca:	d103      	bne.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 80067cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80067d2:	e003      	b.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 80067d4:	2300      	movs	r3, #0
 80067d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067d8:	f000 beb3 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80067dc:	f000 beb1 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80067e0:	4b3a      	ldr	r3, [pc, #232]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80067e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067e6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80067ea:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80067ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d104      	bne.n	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80067f2:	f7fd fd4b 	bl	800428c <HAL_RCC_GetPCLK3Freq>
 80067f6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80067f8:	f000 bea3 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80067fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006802:	d108      	bne.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006804:	f107 0314 	add.w	r3, r7, #20
 8006808:	4618      	mov	r0, r3
 800680a:	f7ff f881 	bl	8005910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006812:	f000 be96 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8006816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006818:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800681c:	d108      	bne.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800681e:	f107 0308 	add.w	r3, r7, #8
 8006822:	4618      	mov	r0, r3
 8006824:	f7ff f9e0 	bl	8005be8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800682c:	f000 be89 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006830:	4b26      	ldr	r3, [pc, #152]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 0302 	and.w	r3, r3, #2
 8006838:	2b02      	cmp	r3, #2
 800683a:	d10d      	bne.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800683c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800683e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006842:	d109      	bne.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006844:	4b21      	ldr	r3, [pc, #132]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	08db      	lsrs	r3, r3, #3
 800684a:	f003 0303 	and.w	r3, r3, #3
 800684e:	4a20      	ldr	r2, [pc, #128]	@ (80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8006850:	fa22 f303 	lsr.w	r3, r2, r3
 8006854:	637b      	str	r3, [r7, #52]	@ 0x34
 8006856:	e020      	b.n	800689a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8006858:	4b1c      	ldr	r3, [pc, #112]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006860:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006864:	d106      	bne.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8006866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006868:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800686c:	d102      	bne.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 800686e:	4b19      	ldr	r3, [pc, #100]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8006870:	637b      	str	r3, [r7, #52]	@ 0x34
 8006872:	e012      	b.n	800689a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006874:	4b15      	ldr	r3, [pc, #84]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006876:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	2b02      	cmp	r3, #2
 8006880:	d107      	bne.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8006882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006884:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006888:	d103      	bne.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 800688a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800688e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006890:	e003      	b.n	800689a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006896:	f000 be54 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800689a:	f000 be52 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800689e:	4b0b      	ldr	r3, [pc, #44]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80068a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80068a4:	f003 0307 	and.w	r3, r3, #7
 80068a8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80068aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d104      	bne.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 80068b0:	f7fd fca4 	bl	80041fc <HAL_RCC_GetHCLKFreq>
 80068b4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80068b6:	f000 be44 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80068ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d10b      	bne.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 80068c0:	f7fd fb70 	bl	8003fa4 <HAL_RCC_GetSysClockFreq>
 80068c4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80068c6:	f000 be3c 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80068ca:	bf00      	nop
 80068cc:	44020c00 	.word	0x44020c00
 80068d0:	03d09000 	.word	0x03d09000
 80068d4:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80068d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d108      	bne.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068de:	f107 0314 	add.w	r3, r7, #20
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7ff f814 	bl	8005910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068ec:	f000 be29 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80068f0:	4b9f      	ldr	r3, [pc, #636]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068fc:	d105      	bne.n	800690a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 80068fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006900:	2b03      	cmp	r3, #3
 8006902:	d102      	bne.n	800690a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 8006904:	4b9b      	ldr	r3, [pc, #620]	@ (8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 8006906:	637b      	str	r3, [r7, #52]	@ 0x34
 8006908:	e023      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800690a:	4b99      	ldr	r3, [pc, #612]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0302 	and.w	r3, r3, #2
 8006912:	2b02      	cmp	r3, #2
 8006914:	d10c      	bne.n	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8006916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006918:	2b04      	cmp	r3, #4
 800691a:	d109      	bne.n	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800691c:	4b94      	ldr	r3, [pc, #592]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	08db      	lsrs	r3, r3, #3
 8006922:	f003 0303 	and.w	r3, r3, #3
 8006926:	4a94      	ldr	r2, [pc, #592]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8006928:	fa22 f303 	lsr.w	r3, r2, r3
 800692c:	637b      	str	r3, [r7, #52]	@ 0x34
 800692e:	e010      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8006930:	4b8f      	ldr	r3, [pc, #572]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006938:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800693c:	d105      	bne.n	800694a <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 800693e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006940:	2b05      	cmp	r3, #5
 8006942:	d102      	bne.n	800694a <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 8006944:	4b8d      	ldr	r3, [pc, #564]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8006946:	637b      	str	r3, [r7, #52]	@ 0x34
 8006948:	e003      	b.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 800694a:	2300      	movs	r3, #0
 800694c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800694e:	f000 bdf8 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006952:	f000 bdf6 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8006956:	4b86      	ldr	r3, [pc, #536]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006958:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800695c:	f003 0308 	and.w	r3, r3, #8
 8006960:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8006962:	4b83      	ldr	r3, [pc, #524]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006964:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006968:	f003 0302 	and.w	r3, r3, #2
 800696c:	2b02      	cmp	r3, #2
 800696e:	d106      	bne.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8006970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006972:	2b00      	cmp	r3, #0
 8006974:	d103      	bne.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 8006976:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800697a:	637b      	str	r3, [r7, #52]	@ 0x34
 800697c:	e012      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800697e:	4b7c      	ldr	r3, [pc, #496]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006980:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006984:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006988:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800698c:	d106      	bne.n	800699c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 800698e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006990:	2b08      	cmp	r3, #8
 8006992:	d103      	bne.n	800699c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 8006994:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006998:	637b      	str	r3, [r7, #52]	@ 0x34
 800699a:	e003      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800699c:	2300      	movs	r3, #0
 800699e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80069a0:	f000 bdcf 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80069a4:	f000 bdcd 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80069a8:	4b71      	ldr	r3, [pc, #452]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80069aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80069ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80069b2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80069b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d104      	bne.n	80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80069ba:	f7fd fc3b 	bl	8004234 <HAL_RCC_GetPCLK1Freq>
 80069be:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80069c0:	f000 bdbf 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 80069c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069ca:	d108      	bne.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069cc:	f107 0308 	add.w	r3, r7, #8
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7ff f909 	bl	8005be8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069da:	f000 bdb2 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80069de:	4b64      	ldr	r3, [pc, #400]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d10d      	bne.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 80069ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069f0:	d109      	bne.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80069f2:	4b5f      	ldr	r3, [pc, #380]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	08db      	lsrs	r3, r3, #3
 80069f8:	f003 0303 	and.w	r3, r3, #3
 80069fc:	4a5e      	ldr	r2, [pc, #376]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80069fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006a02:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a04:	e011      	b.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8006a06:	4b5a      	ldr	r3, [pc, #360]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a12:	d106      	bne.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 8006a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a16:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006a1a:	d102      	bne.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 8006a1c:	4b57      	ldr	r3, [pc, #348]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8006a1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a20:	e003      	b.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 8006a22:	2300      	movs	r3, #0
 8006a24:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a26:	f000 bd8c 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006a2a:	f000 bd8a 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006a2e:	4b50      	ldr	r3, [pc, #320]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006a30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a34:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006a38:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d104      	bne.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a40:	f7fd fbf8 	bl	8004234 <HAL_RCC_GetPCLK1Freq>
 8006a44:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006a46:	f000 bd7c 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8006a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a4c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a50:	d108      	bne.n	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a52:	f107 0308 	add.w	r3, r7, #8
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7ff f8c6 	bl	8005be8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a60:	f000 bd6f 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006a64:	4b42      	ldr	r3, [pc, #264]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0302 	and.w	r3, r3, #2
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d10d      	bne.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 8006a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a72:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006a76:	d109      	bne.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a78:	4b3d      	ldr	r3, [pc, #244]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	08db      	lsrs	r3, r3, #3
 8006a7e:	f003 0303 	and.w	r3, r3, #3
 8006a82:	4a3d      	ldr	r2, [pc, #244]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8006a84:	fa22 f303 	lsr.w	r3, r2, r3
 8006a88:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a8a:	e011      	b.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8006a8c:	4b38      	ldr	r3, [pc, #224]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a98:	d106      	bne.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a9c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006aa0:	d102      	bne.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 8006aa2:	4b36      	ldr	r3, [pc, #216]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8006aa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aa6:	e003      	b.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006aac:	f000 bd49 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006ab0:	f000 bd47 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006ab4:	4b2e      	ldr	r3, [pc, #184]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006ab6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006aba:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006abe:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8006ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d104      	bne.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006ac6:	f7fd fbe1 	bl	800428c <HAL_RCC_GetPCLK3Freq>
 8006aca:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006acc:	f000 bd39 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8006ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ad6:	d108      	bne.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ad8:	f107 0308 	add.w	r3, r7, #8
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7ff f883 	bl	8005be8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ae6:	f000 bd2c 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8006aea:	4b21      	ldr	r3, [pc, #132]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d10d      	bne.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8006af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006afc:	d109      	bne.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006afe:	4b1c      	ldr	r3, [pc, #112]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	08db      	lsrs	r3, r3, #3
 8006b04:	f003 0303 	and.w	r3, r3, #3
 8006b08:	4a1b      	ldr	r2, [pc, #108]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8006b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b10:	e011      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8006b12:	4b17      	ldr	r3, [pc, #92]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b1e:	d106      	bne.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 8006b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b26:	d102      	bne.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 8006b28:	4b14      	ldr	r3, [pc, #80]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8006b2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b2c:	e003      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b32:	f000 bd06 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006b36:	f000 bd04 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8006b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006b3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006b40:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006b44:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8006b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d104      	bne.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006b4c:	f7fd fb72 	bl	8004234 <HAL_RCC_GetPCLK1Freq>
 8006b50:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006b52:	f000 bcf6 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8006b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b5c:	d110      	bne.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b5e:	f107 0308 	add.w	r3, r7, #8
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7ff f840 	bl	8005be8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b6c:	f000 bce9 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006b70:	44020c00 	.word	0x44020c00
 8006b74:	007a1200 	.word	0x007a1200
 8006b78:	03d09000 	.word	0x03d09000
 8006b7c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8006b80:	4ba4      	ldr	r3, [pc, #656]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d10e      	bne.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 8006b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b92:	d10a      	bne.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b94:	4b9f      	ldr	r3, [pc, #636]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	08db      	lsrs	r3, r3, #3
 8006b9a:	f003 0303 	and.w	r3, r3, #3
 8006b9e:	4a9e      	ldr	r2, [pc, #632]	@ (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8006ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ba6:	f000 bccc 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8006baa:	2300      	movs	r3, #0
 8006bac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bae:	f000 bcc8 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8006bb2:	4b98      	ldr	r3, [pc, #608]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006bb4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006bb8:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006bbc:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d104      	bne.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006bc4:	f7fd fb62 	bl	800428c <HAL_RCC_GetPCLK3Freq>
 8006bc8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006bca:	f000 bcba 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 8006bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006bd4:	d108      	bne.n	8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bd6:	f107 0308 	add.w	r3, r7, #8
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7ff f804 	bl	8005be8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006be4:	f000 bcad 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8006be8:	4b8a      	ldr	r3, [pc, #552]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0302 	and.w	r3, r3, #2
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d10e      	bne.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8006bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bfa:	d10a      	bne.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006bfc:	4b85      	ldr	r3, [pc, #532]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	08db      	lsrs	r3, r3, #3
 8006c02:	f003 0303 	and.w	r3, r3, #3
 8006c06:	4a84      	ldr	r2, [pc, #528]	@ (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8006c08:	fa22 f303 	lsr.w	r3, r2, r3
 8006c0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c0e:	f000 bc98 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c16:	f000 bc94 	b.w	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006c1a:	4b7e      	ldr	r3, [pc, #504]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006c1c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006c20:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006c24:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c28:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006c2c:	d056      	beq.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c30:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006c34:	f200 808b 	bhi.w	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c3e:	d03e      	beq.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 8006c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c46:	f200 8082 	bhi.w	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c50:	d027      	beq.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8006c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c58:	d879      	bhi.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c60:	d017      	beq.n	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 8006c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c68:	d871      	bhi.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d004      	beq.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8006c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c76:	d004      	beq.n	8006c82 <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 8006c78:	e069      	b.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006c7a:	f7fd fb07 	bl	800428c <HAL_RCC_GetPCLK3Freq>
 8006c7e:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006c80:	e068      	b.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c82:	f107 0314 	add.w	r3, r7, #20
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7fe fe42 	bl	8005910 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006c90:	e060      	b.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c92:	f107 0308 	add.w	r3, r7, #8
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7fe ffa6 	bl	8005be8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006ca0:	e058      	b.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006ca2:	4b5c      	ldr	r3, [pc, #368]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006ca4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ca8:	f003 0302 	and.w	r3, r3, #2
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d103      	bne.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 8006cb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cb4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006cb6:	e04d      	b.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006cbc:	e04a      	b.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006cbe:	4b55      	ldr	r3, [pc, #340]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006cc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ccc:	d103      	bne.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 8006cce:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006cd2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006cd4:	e03e      	b.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006cda:	e03b      	b.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006cdc:	4b4d      	ldr	r3, [pc, #308]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006cde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006ce2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ce8:	4b4a      	ldr	r3, [pc, #296]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0302 	and.w	r3, r3, #2
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d10c      	bne.n	8006d0e <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 8006cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d109      	bne.n	8006d0e <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006cfa:	4b46      	ldr	r3, [pc, #280]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	08db      	lsrs	r3, r3, #3
 8006d00:	f003 0303 	and.w	r3, r3, #3
 8006d04:	4a44      	ldr	r2, [pc, #272]	@ (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8006d06:	fa22 f303 	lsr.w	r3, r2, r3
 8006d0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d0c:	e01e      	b.n	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d0e:	4b41      	ldr	r3, [pc, #260]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d1a:	d106      	bne.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d22:	d102      	bne.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006d24:	4b3d      	ldr	r3, [pc, #244]	@ (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8006d26:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d28:	e010      	b.n	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d2a:	4b3a      	ldr	r3, [pc, #232]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d36:	d106      	bne.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 8006d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d3e:	d102      	bne.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006d40:	4b37      	ldr	r3, [pc, #220]	@ (8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 8006d42:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d44:	e002      	b.n	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006d46:	2300      	movs	r3, #0
 8006d48:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006d4a:	e003      	b.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8006d4c:	e002      	b.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006d52:	bf00      	nop
          }
        }
        break;
 8006d54:	e3f5      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006d56:	4b2f      	ldr	r3, [pc, #188]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006d58:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006d5c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006d60:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d64:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006d68:	d05f      	beq.n	8006e2a <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d6c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006d70:	f200 8094 	bhi.w	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d7a:	d03f      	beq.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 8006d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d82:	f200 808b 	bhi.w	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d88:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006d8c:	d028      	beq.n	8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d90:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006d94:	f200 8082 	bhi.w	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d9e:	d017      	beq.n	8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 8006da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006da6:	d879      	bhi.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d004      	beq.n	8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8006dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006db4:	d004      	beq.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 8006db6:	e071      	b.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8006db8:	f7fd fa3c 	bl	8004234 <HAL_RCC_GetPCLK1Freq>
 8006dbc:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006dbe:	e070      	b.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dc0:	f107 0314 	add.w	r3, r7, #20
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7fe fda3 	bl	8005910 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006dce:	e068      	b.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dd0:	f107 0308 	add.w	r3, r7, #8
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7fe ff07 	bl	8005be8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006dde:	e060      	b.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006de0:	4b0c      	ldr	r3, [pc, #48]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006de2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006de6:	f003 0302 	and.w	r3, r3, #2
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d103      	bne.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 8006dee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006df2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006df4:	e055      	b.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 8006df6:	2300      	movs	r3, #0
 8006df8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006dfa:	e052      	b.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006dfc:	4b05      	ldr	r3, [pc, #20]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006dfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e0a:	d10b      	bne.n	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 8006e0c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006e10:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006e12:	e046      	b.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8006e14:	44020c00 	.word	0x44020c00
 8006e18:	03d09000 	.word	0x03d09000
 8006e1c:	003d0900 	.word	0x003d0900
 8006e20:	007a1200 	.word	0x007a1200
              frequency = 0;
 8006e24:	2300      	movs	r3, #0
 8006e26:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006e28:	e03b      	b.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e2a:	4bae      	ldr	r3, [pc, #696]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006e2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e30:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006e34:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e36:	4bab      	ldr	r3, [pc, #684]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d10c      	bne.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 8006e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d109      	bne.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e48:	4ba6      	ldr	r3, [pc, #664]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	08db      	lsrs	r3, r3, #3
 8006e4e:	f003 0303 	and.w	r3, r3, #3
 8006e52:	4aa5      	ldr	r2, [pc, #660]	@ (80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8006e54:	fa22 f303 	lsr.w	r3, r2, r3
 8006e58:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e5a:	e01e      	b.n	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e5c:	4ba1      	ldr	r3, [pc, #644]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e68:	d106      	bne.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 8006e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e70:	d102      	bne.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006e72:	4b9e      	ldr	r3, [pc, #632]	@ (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8006e74:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e76:	e010      	b.n	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e78:	4b9a      	ldr	r3, [pc, #616]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e84:	d106      	bne.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 8006e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e8c:	d102      	bne.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006e8e:	4b98      	ldr	r3, [pc, #608]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8006e90:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e92:	e002      	b.n	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006e94:	2300      	movs	r3, #0
 8006e96:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006e98:	e003      	b.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8006e9a:	e002      	b.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006ea0:	bf00      	nop
          }
        }
        break;
 8006ea2:	e34e      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006ea4:	4b8f      	ldr	r3, [pc, #572]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006ea6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006eaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006eae:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8006eb0:	4b8c      	ldr	r3, [pc, #560]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ebc:	d105      	bne.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 8006ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d102      	bne.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 8006ec4:	4b8a      	ldr	r3, [pc, #552]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8006ec6:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8006ec8:	e33b      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8006eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ecc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ed0:	d107      	bne.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ed2:	f107 0320 	add.w	r3, r7, #32
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7fe fbae 	bl	8005638 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ede:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ee0:	e32f      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8006ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ee8:	d107      	bne.n	8006efa <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006eea:	f107 0314 	add.w	r3, r7, #20
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fe fd0e 	bl	8005910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ef8:	e323      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8006efa:	2300      	movs	r3, #0
 8006efc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006efe:	e320      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006f00:	4b78      	ldr	r3, [pc, #480]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f06:	f003 0307 	and.w	r3, r3, #7
 8006f0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f0e:	2b04      	cmp	r3, #4
 8006f10:	d860      	bhi.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 8006f12:	a201      	add	r2, pc, #4	@ (adr r2, 8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8006f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f18:	08006f2d 	.word	0x08006f2d
 8006f1c:	08006f3d 	.word	0x08006f3d
 8006f20:	08006f4d 	.word	0x08006f4d
 8006f24:	08006f5d 	.word	0x08006f5d
 8006f28:	08006f63 	.word	0x08006f63
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f2c:	f107 0320 	add.w	r3, r7, #32
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7fe fb81 	bl	8005638 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f38:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f3a:	e04e      	b.n	8006fda <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f3c:	f107 0314 	add.w	r3, r7, #20
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7fe fce5 	bl	8005910 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f4a:	e046      	b.n	8006fda <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f4c:	f107 0308 	add.w	r3, r7, #8
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7fe fe49 	bl	8005be8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f5a:	e03e      	b.n	8006fda <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006f5c:	4b65      	ldr	r3, [pc, #404]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8006f5e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f60:	e03b      	b.n	8006fda <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f62:	4b60      	ldr	r3, [pc, #384]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006f64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f68:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f6e:	4b5d      	ldr	r3, [pc, #372]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0302 	and.w	r3, r3, #2
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d10c      	bne.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 8006f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d109      	bne.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f80:	4b58      	ldr	r3, [pc, #352]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	08db      	lsrs	r3, r3, #3
 8006f86:	f003 0303 	and.w	r3, r3, #3
 8006f8a:	4a57      	ldr	r2, [pc, #348]	@ (80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8006f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f90:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f92:	e01e      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f94:	4b53      	ldr	r3, [pc, #332]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fa0:	d106      	bne.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 8006fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fa8:	d102      	bne.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006faa:	4b50      	ldr	r3, [pc, #320]	@ (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8006fac:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fae:	e010      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006fb0:	4b4c      	ldr	r3, [pc, #304]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fbc:	d106      	bne.n	8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 8006fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006fc4:	d102      	bne.n	8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006fc6:	4b4a      	ldr	r3, [pc, #296]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8006fc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fca:	e002      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006fd0:	e003      	b.n	8006fda <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8006fd2:	e002      	b.n	8006fda <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006fd8:	bf00      	nop
          }
        }
        break;
 8006fda:	e2b2      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006fdc:	4b41      	ldr	r3, [pc, #260]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006fe2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006fe6:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fea:	2b20      	cmp	r3, #32
 8006fec:	f200 80a4 	bhi.w	8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 8006ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 8006ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff6:	bf00      	nop
 8006ff8:	0800707d 	.word	0x0800707d
 8006ffc:	08007139 	.word	0x08007139
 8007000:	08007139 	.word	0x08007139
 8007004:	08007139 	.word	0x08007139
 8007008:	08007139 	.word	0x08007139
 800700c:	08007139 	.word	0x08007139
 8007010:	08007139 	.word	0x08007139
 8007014:	08007139 	.word	0x08007139
 8007018:	0800708d 	.word	0x0800708d
 800701c:	08007139 	.word	0x08007139
 8007020:	08007139 	.word	0x08007139
 8007024:	08007139 	.word	0x08007139
 8007028:	08007139 	.word	0x08007139
 800702c:	08007139 	.word	0x08007139
 8007030:	08007139 	.word	0x08007139
 8007034:	08007139 	.word	0x08007139
 8007038:	0800709d 	.word	0x0800709d
 800703c:	08007139 	.word	0x08007139
 8007040:	08007139 	.word	0x08007139
 8007044:	08007139 	.word	0x08007139
 8007048:	08007139 	.word	0x08007139
 800704c:	08007139 	.word	0x08007139
 8007050:	08007139 	.word	0x08007139
 8007054:	08007139 	.word	0x08007139
 8007058:	080070ad 	.word	0x080070ad
 800705c:	08007139 	.word	0x08007139
 8007060:	08007139 	.word	0x08007139
 8007064:	08007139 	.word	0x08007139
 8007068:	08007139 	.word	0x08007139
 800706c:	08007139 	.word	0x08007139
 8007070:	08007139 	.word	0x08007139
 8007074:	08007139 	.word	0x08007139
 8007078:	080070b3 	.word	0x080070b3
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800707c:	f107 0320 	add.w	r3, r7, #32
 8007080:	4618      	mov	r0, r3
 8007082:	f7fe fad9 	bl	8005638 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007088:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800708a:	e058      	b.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800708c:	f107 0314 	add.w	r3, r7, #20
 8007090:	4618      	mov	r0, r3
 8007092:	f7fe fc3d 	bl	8005910 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800709a:	e050      	b.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800709c:	f107 0308 	add.w	r3, r7, #8
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7fe fda1 	bl	8005be8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80070aa:	e048      	b.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80070ac:	4b11      	ldr	r3, [pc, #68]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 80070ae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80070b0:	e045      	b.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80070b2:	4b0c      	ldr	r3, [pc, #48]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80070b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80070b8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80070bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80070be:	4b09      	ldr	r3, [pc, #36]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0302 	and.w	r3, r3, #2
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d116      	bne.n	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 80070ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d113      	bne.n	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80070d0:	4b04      	ldr	r3, [pc, #16]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	08db      	lsrs	r3, r3, #3
 80070d6:	f003 0303 	and.w	r3, r3, #3
 80070da:	4a03      	ldr	r2, [pc, #12]	@ (80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 80070dc:	fa22 f303 	lsr.w	r3, r2, r3
 80070e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80070e2:	e028      	b.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 80070e4:	44020c00 	.word	0x44020c00
 80070e8:	03d09000 	.word	0x03d09000
 80070ec:	003d0900 	.word	0x003d0900
 80070f0:	007a1200 	.word	0x007a1200
 80070f4:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80070f8:	4b95      	ldr	r3, [pc, #596]	@ (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007100:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007104:	d106      	bne.n	8007114 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 8007106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007108:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800710c:	d102      	bne.n	8007114 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800710e:	4b91      	ldr	r3, [pc, #580]	@ (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8007110:	637b      	str	r3, [r7, #52]	@ 0x34
 8007112:	e010      	b.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007114:	4b8e      	ldr	r3, [pc, #568]	@ (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800711c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007120:	d106      	bne.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 8007122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007124:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007128:	d102      	bne.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800712a:	4b8b      	ldr	r3, [pc, #556]	@ (8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 800712c:	637b      	str	r3, [r7, #52]	@ 0x34
 800712e:	e002      	b.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007130:	2300      	movs	r3, #0
 8007132:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007134:	e003      	b.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8007136:	e002      	b.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 8007138:	2300      	movs	r3, #0
 800713a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800713c:	bf00      	nop
          }
        }
        break;
 800713e:	e200      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007140:	4b83      	ldr	r3, [pc, #524]	@ (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007146:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800714a:	633b      	str	r3, [r7, #48]	@ 0x30
 800714c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007152:	d031      	beq.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8007154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007156:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800715a:	d866      	bhi.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 800715c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007160:	d027      	beq.n	80071b2 <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 8007162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007164:	2bc0      	cmp	r3, #192	@ 0xc0
 8007166:	d860      	bhi.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8007168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800716a:	2b80      	cmp	r3, #128	@ 0x80
 800716c:	d019      	beq.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 800716e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007170:	2b80      	cmp	r3, #128	@ 0x80
 8007172:	d85a      	bhi.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8007174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007176:	2b00      	cmp	r3, #0
 8007178:	d003      	beq.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 800717a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800717c:	2b40      	cmp	r3, #64	@ 0x40
 800717e:	d008      	beq.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 8007180:	e053      	b.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007182:	f107 0320 	add.w	r3, r7, #32
 8007186:	4618      	mov	r0, r3
 8007188:	f7fe fa56 	bl	8005638 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800718c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007190:	e04e      	b.n	8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007192:	f107 0314 	add.w	r3, r7, #20
 8007196:	4618      	mov	r0, r3
 8007198:	f7fe fbba 	bl	8005910 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80071a0:	e046      	b.n	8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071a2:	f107 0308 	add.w	r3, r7, #8
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7fe fd1e 	bl	8005be8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80071b0:	e03e      	b.n	8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80071b2:	4b6a      	ldr	r3, [pc, #424]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 80071b4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80071b6:	e03b      	b.n	8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80071b8:	4b65      	ldr	r3, [pc, #404]	@ (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80071ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80071be:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80071c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80071c4:	4b62      	ldr	r3, [pc, #392]	@ (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 0302 	and.w	r3, r3, #2
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d10c      	bne.n	80071ea <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 80071d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d109      	bne.n	80071ea <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80071d6:	4b5e      	ldr	r3, [pc, #376]	@ (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	08db      	lsrs	r3, r3, #3
 80071dc:	f003 0303 	and.w	r3, r3, #3
 80071e0:	4a5f      	ldr	r2, [pc, #380]	@ (8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 80071e2:	fa22 f303 	lsr.w	r3, r2, r3
 80071e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80071e8:	e01e      	b.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80071ea:	4b59      	ldr	r3, [pc, #356]	@ (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80071f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071f6:	d106      	bne.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 80071f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071fe:	d102      	bne.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007200:	4b54      	ldr	r3, [pc, #336]	@ (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8007202:	637b      	str	r3, [r7, #52]	@ 0x34
 8007204:	e010      	b.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007206:	4b52      	ldr	r3, [pc, #328]	@ (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800720e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007212:	d106      	bne.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 8007214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007216:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800721a:	d102      	bne.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800721c:	4b4e      	ldr	r3, [pc, #312]	@ (8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 800721e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007220:	e002      	b.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007222:	2300      	movs	r3, #0
 8007224:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007226:	e003      	b.n	8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 8007228:	e002      	b.n	8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 800722a:	2300      	movs	r3, #0
 800722c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800722e:	bf00      	nop
          }
        }
        break;
 8007230:	e187      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8007232:	4b47      	ldr	r3, [pc, #284]	@ (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007238:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800723c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800723e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007240:	2b00      	cmp	r3, #0
 8007242:	d103      	bne.n	800724c <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007244:	f7fd f80c 	bl	8004260 <HAL_RCC_GetPCLK2Freq>
 8007248:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800724a:	e17a      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800724c:	4b40      	ldr	r3, [pc, #256]	@ (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007254:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007258:	d10b      	bne.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800725a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800725c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007260:	d107      	bne.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007262:	f107 0314 	add.w	r3, r7, #20
 8007266:	4618      	mov	r0, r3
 8007268:	f7fe fb52 	bl	8005910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007270:	e045      	b.n	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8007272:	4b37      	ldr	r3, [pc, #220]	@ (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800727a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800727e:	d10b      	bne.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 8007280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007282:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007286:	d107      	bne.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007288:	f107 0308 	add.w	r3, r7, #8
 800728c:	4618      	mov	r0, r3
 800728e:	f7fe fcab 	bl	8005be8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	637b      	str	r3, [r7, #52]	@ 0x34
 8007296:	e032      	b.n	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8007298:	4b2d      	ldr	r3, [pc, #180]	@ (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 0302 	and.w	r3, r3, #2
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d10d      	bne.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 80072a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80072aa:	d109      	bne.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80072ac:	4b28      	ldr	r3, [pc, #160]	@ (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	08db      	lsrs	r3, r3, #3
 80072b2:	f003 0303 	and.w	r3, r3, #3
 80072b6:	4a2a      	ldr	r2, [pc, #168]	@ (8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 80072b8:	fa22 f303 	lsr.w	r3, r2, r3
 80072bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80072be:	e01e      	b.n	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 80072c0:	4b23      	ldr	r3, [pc, #140]	@ (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072cc:	d106      	bne.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 80072ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072d4:	d102      	bne.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 80072d6:	4b1f      	ldr	r3, [pc, #124]	@ (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80072d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80072da:	e010      	b.n	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 80072dc:	4b1c      	ldr	r3, [pc, #112]	@ (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072e8:	d106      	bne.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 80072ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ec:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80072f0:	d102      	bne.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 80072f2:	4b19      	ldr	r3, [pc, #100]	@ (8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80072f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80072f6:	e002      	b.n	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 80072f8:	2300      	movs	r3, #0
 80072fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072fc:	e121      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80072fe:	e120      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007300:	4b13      	ldr	r3, [pc, #76]	@ (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007302:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007306:	f003 0303 	and.w	r3, r3, #3
 800730a:	633b      	str	r3, [r7, #48]	@ 0x30
 800730c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730e:	2b03      	cmp	r3, #3
 8007310:	d861      	bhi.n	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 8007312:	a201      	add	r2, pc, #4	@ (adr r2, 8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 8007314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007318:	08007329 	.word	0x08007329
 800731c:	08007331 	.word	0x08007331
 8007320:	08007341 	.word	0x08007341
 8007324:	08007365 	.word	0x08007365

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8007328:	f7fc ff68 	bl	80041fc <HAL_RCC_GetHCLKFreq>
 800732c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800732e:	e055      	b.n	80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007330:	f107 0320 	add.w	r3, r7, #32
 8007334:	4618      	mov	r0, r3
 8007336:	f7fe f97f 	bl	8005638 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800733a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800733e:	e04d      	b.n	80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007340:	f107 0314 	add.w	r3, r7, #20
 8007344:	4618      	mov	r0, r3
 8007346:	f7fe fae3 	bl	8005910 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800734e:	e045      	b.n	80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8007350:	44020c00 	.word	0x44020c00
 8007354:	003d0900 	.word	0x003d0900
 8007358:	007a1200 	.word	0x007a1200
 800735c:	00bb8000 	.word	0x00bb8000
 8007360:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007364:	4b79      	ldr	r3, [pc, #484]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007366:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800736a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800736e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007370:	4b76      	ldr	r3, [pc, #472]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 0302 	and.w	r3, r3, #2
 8007378:	2b02      	cmp	r3, #2
 800737a:	d10c      	bne.n	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 800737c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800737e:	2b00      	cmp	r3, #0
 8007380:	d109      	bne.n	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007382:	4b72      	ldr	r3, [pc, #456]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	08db      	lsrs	r3, r3, #3
 8007388:	f003 0303 	and.w	r3, r3, #3
 800738c:	4a70      	ldr	r2, [pc, #448]	@ (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 800738e:	fa22 f303 	lsr.w	r3, r2, r3
 8007392:	637b      	str	r3, [r7, #52]	@ 0x34
 8007394:	e01e      	b.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007396:	4b6d      	ldr	r3, [pc, #436]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800739e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073a2:	d106      	bne.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 80073a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073aa:	d102      	bne.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80073ac:	4b69      	ldr	r3, [pc, #420]	@ (8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 80073ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80073b0:	e010      	b.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80073b2:	4b66      	ldr	r3, [pc, #408]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073be:	d106      	bne.n	80073ce <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 80073c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073c6:	d102      	bne.n	80073ce <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80073c8:	4b63      	ldr	r3, [pc, #396]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 80073ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80073cc:	e002      	b.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80073d2:	e003      	b.n	80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 80073d4:	e002      	b.n	80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 80073d6:	2300      	movs	r3, #0
 80073d8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80073da:	bf00      	nop
          }
        }
        break;
 80073dc:	e0b1      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80073de:	4b5b      	ldr	r3, [pc, #364]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80073e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80073e4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80073e8:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80073ea:	4b58      	ldr	r3, [pc, #352]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80073ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073f0:	f003 0302 	and.w	r3, r3, #2
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d106      	bne.n	8007406 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 80073f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d103      	bne.n	8007406 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 80073fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007402:	637b      	str	r3, [r7, #52]	@ 0x34
 8007404:	e01f      	b.n	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8007406:	4b51      	ldr	r3, [pc, #324]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007408:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800740c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007410:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007414:	d106      	bne.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 8007416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007418:	2b40      	cmp	r3, #64	@ 0x40
 800741a:	d103      	bne.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 800741c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007420:	637b      	str	r3, [r7, #52]	@ 0x34
 8007422:	e010      	b.n	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8007424:	4b49      	ldr	r3, [pc, #292]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800742c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007430:	d106      	bne.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 8007432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007434:	2b80      	cmp	r3, #128	@ 0x80
 8007436:	d103      	bne.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 8007438:	f248 0312 	movw	r3, #32786	@ 0x8012
 800743c:	637b      	str	r3, [r7, #52]	@ 0x34
 800743e:	e002      	b.n	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8007440:	2300      	movs	r3, #0
 8007442:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8007444:	e07d      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007446:	e07c      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007448:	4b40      	ldr	r3, [pc, #256]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800744a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800744e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007452:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007454:	4b3d      	ldr	r3, [pc, #244]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800745c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007460:	d105      	bne.n	800746e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 8007462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007464:	2b00      	cmp	r3, #0
 8007466:	d102      	bne.n	800746e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 8007468:	4b3c      	ldr	r3, [pc, #240]	@ (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 800746a:	637b      	str	r3, [r7, #52]	@ 0x34
 800746c:	e031      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800746e:	4b37      	ldr	r3, [pc, #220]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007476:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800747a:	d10a      	bne.n	8007492 <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 800747c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800747e:	2b10      	cmp	r3, #16
 8007480:	d107      	bne.n	8007492 <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007482:	f107 0320 	add.w	r3, r7, #32
 8007486:	4618      	mov	r0, r3
 8007488:	f7fe f8d6 	bl	8005638 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800748c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800748e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007490:	e01f      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8007492:	4b2e      	ldr	r3, [pc, #184]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007494:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007498:	f003 0302 	and.w	r3, r3, #2
 800749c:	2b02      	cmp	r3, #2
 800749e:	d106      	bne.n	80074ae <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 80074a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a2:	2b20      	cmp	r3, #32
 80074a4:	d103      	bne.n	80074ae <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 80074a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80074ac:	e011      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 80074ae:	4b27      	ldr	r3, [pc, #156]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80074b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074bc:	d106      	bne.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 80074be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c0:	2b30      	cmp	r3, #48	@ 0x30
 80074c2:	d103      	bne.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 80074c4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80074c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80074ca:	e002      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 80074cc:	2300      	movs	r3, #0
 80074ce:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80074d0:	e037      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80074d2:	e036      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80074d4:	4b1d      	ldr	r3, [pc, #116]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80074d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80074da:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80074de:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 80074e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e2:	2b10      	cmp	r3, #16
 80074e4:	d107      	bne.n	80074f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074e6:	f107 0320 	add.w	r3, r7, #32
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7fe f8a4 	bl	8005638 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80074f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80074f4:	e025      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 80074f6:	4b15      	ldr	r3, [pc, #84]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007502:	d10a      	bne.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 8007504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007506:	2b20      	cmp	r3, #32
 8007508:	d107      	bne.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800750a:	f107 0308 	add.w	r3, r7, #8
 800750e:	4618      	mov	r0, r3
 8007510:	f7fe fb6a 	bl	8005be8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	637b      	str	r3, [r7, #52]	@ 0x34
 8007518:	e00f      	b.n	800753a <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800751a:	4b0c      	ldr	r3, [pc, #48]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007522:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007526:	d105      	bne.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 8007528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800752a:	2b30      	cmp	r3, #48	@ 0x30
 800752c:	d102      	bne.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 800752e:	4b0b      	ldr	r3, [pc, #44]	@ (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8007530:	637b      	str	r3, [r7, #52]	@ 0x34
 8007532:	e002      	b.n	800753a <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8007534:	2300      	movs	r3, #0
 8007536:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8007538:	e003      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800753a:	e002      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 800753c:	2300      	movs	r3, #0
 800753e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007540:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 8007542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007544:	4618      	mov	r0, r3
 8007546:	373c      	adds	r7, #60	@ 0x3c
 8007548:	46bd      	mov	sp, r7
 800754a:	bd90      	pop	{r4, r7, pc}
 800754c:	44020c00 	.word	0x44020c00
 8007550:	03d09000 	.word	0x03d09000
 8007554:	003d0900 	.word	0x003d0900
 8007558:	007a1200 	.word	0x007a1200
 800755c:	02dc6c00 	.word	0x02dc6c00

08007560 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8007568:	4b48      	ldr	r3, [pc, #288]	@ (800768c <RCCEx_PLL2_Config+0x12c>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a47      	ldr	r2, [pc, #284]	@ (800768c <RCCEx_PLL2_Config+0x12c>)
 800756e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007572:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007574:	f7fa fb88 	bl	8001c88 <HAL_GetTick>
 8007578:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800757a:	e008      	b.n	800758e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800757c:	f7fa fb84 	bl	8001c88 <HAL_GetTick>
 8007580:	4602      	mov	r2, r0
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	2b02      	cmp	r3, #2
 8007588:	d901      	bls.n	800758e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	e07a      	b.n	8007684 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800758e:	4b3f      	ldr	r3, [pc, #252]	@ (800768c <RCCEx_PLL2_Config+0x12c>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1f0      	bne.n	800757c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800759a:	4b3c      	ldr	r3, [pc, #240]	@ (800768c <RCCEx_PLL2_Config+0x12c>)
 800759c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80075a2:	f023 0303 	bic.w	r3, r3, #3
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	6811      	ldr	r1, [r2, #0]
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	6852      	ldr	r2, [r2, #4]
 80075ae:	0212      	lsls	r2, r2, #8
 80075b0:	430a      	orrs	r2, r1
 80075b2:	4936      	ldr	r1, [pc, #216]	@ (800768c <RCCEx_PLL2_Config+0x12c>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	3b01      	subs	r3, #1
 80075be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	3b01      	subs	r3, #1
 80075c8:	025b      	lsls	r3, r3, #9
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	431a      	orrs	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	3b01      	subs	r3, #1
 80075d4:	041b      	lsls	r3, r3, #16
 80075d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80075da:	431a      	orrs	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	695b      	ldr	r3, [r3, #20]
 80075e0:	3b01      	subs	r3, #1
 80075e2:	061b      	lsls	r3, r3, #24
 80075e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80075e8:	4928      	ldr	r1, [pc, #160]	@ (800768c <RCCEx_PLL2_Config+0x12c>)
 80075ea:	4313      	orrs	r3, r2
 80075ec:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80075ee:	4b27      	ldr	r3, [pc, #156]	@ (800768c <RCCEx_PLL2_Config+0x12c>)
 80075f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f2:	f023 020c 	bic.w	r2, r3, #12
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	699b      	ldr	r3, [r3, #24]
 80075fa:	4924      	ldr	r1, [pc, #144]	@ (800768c <RCCEx_PLL2_Config+0x12c>)
 80075fc:	4313      	orrs	r3, r2
 80075fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8007600:	4b22      	ldr	r3, [pc, #136]	@ (800768c <RCCEx_PLL2_Config+0x12c>)
 8007602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007604:	f023 0220 	bic.w	r2, r3, #32
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	69db      	ldr	r3, [r3, #28]
 800760c:	491f      	ldr	r1, [pc, #124]	@ (800768c <RCCEx_PLL2_Config+0x12c>)
 800760e:	4313      	orrs	r3, r2
 8007610:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007612:	4b1e      	ldr	r3, [pc, #120]	@ (800768c <RCCEx_PLL2_Config+0x12c>)
 8007614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800761a:	491c      	ldr	r1, [pc, #112]	@ (800768c <RCCEx_PLL2_Config+0x12c>)
 800761c:	4313      	orrs	r3, r2
 800761e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8007620:	4b1a      	ldr	r3, [pc, #104]	@ (800768c <RCCEx_PLL2_Config+0x12c>)
 8007622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007624:	4a19      	ldr	r2, [pc, #100]	@ (800768c <RCCEx_PLL2_Config+0x12c>)
 8007626:	f023 0310 	bic.w	r3, r3, #16
 800762a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800762c:	4b17      	ldr	r3, [pc, #92]	@ (800768c <RCCEx_PLL2_Config+0x12c>)
 800762e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007630:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007634:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	6a12      	ldr	r2, [r2, #32]
 800763c:	00d2      	lsls	r2, r2, #3
 800763e:	4913      	ldr	r1, [pc, #76]	@ (800768c <RCCEx_PLL2_Config+0x12c>)
 8007640:	4313      	orrs	r3, r2
 8007642:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8007644:	4b11      	ldr	r3, [pc, #68]	@ (800768c <RCCEx_PLL2_Config+0x12c>)
 8007646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007648:	4a10      	ldr	r2, [pc, #64]	@ (800768c <RCCEx_PLL2_Config+0x12c>)
 800764a:	f043 0310 	orr.w	r3, r3, #16
 800764e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8007650:	4b0e      	ldr	r3, [pc, #56]	@ (800768c <RCCEx_PLL2_Config+0x12c>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a0d      	ldr	r2, [pc, #52]	@ (800768c <RCCEx_PLL2_Config+0x12c>)
 8007656:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800765a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800765c:	f7fa fb14 	bl	8001c88 <HAL_GetTick>
 8007660:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007662:	e008      	b.n	8007676 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007664:	f7fa fb10 	bl	8001c88 <HAL_GetTick>
 8007668:	4602      	mov	r2, r0
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	2b02      	cmp	r3, #2
 8007670:	d901      	bls.n	8007676 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e006      	b.n	8007684 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007676:	4b05      	ldr	r3, [pc, #20]	@ (800768c <RCCEx_PLL2_Config+0x12c>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800767e:	2b00      	cmp	r3, #0
 8007680:	d0f0      	beq.n	8007664 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8007682:	2300      	movs	r3, #0

}
 8007684:	4618      	mov	r0, r3
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	44020c00 	.word	0x44020c00

08007690 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8007698:	4b48      	ldr	r3, [pc, #288]	@ (80077bc <RCCEx_PLL3_Config+0x12c>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a47      	ldr	r2, [pc, #284]	@ (80077bc <RCCEx_PLL3_Config+0x12c>)
 800769e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076a2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80076a4:	f7fa faf0 	bl	8001c88 <HAL_GetTick>
 80076a8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80076aa:	e008      	b.n	80076be <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80076ac:	f7fa faec 	bl	8001c88 <HAL_GetTick>
 80076b0:	4602      	mov	r2, r0
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d901      	bls.n	80076be <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e07a      	b.n	80077b4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80076be:	4b3f      	ldr	r3, [pc, #252]	@ (80077bc <RCCEx_PLL3_Config+0x12c>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1f0      	bne.n	80076ac <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80076ca:	4b3c      	ldr	r3, [pc, #240]	@ (80077bc <RCCEx_PLL3_Config+0x12c>)
 80076cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ce:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80076d2:	f023 0303 	bic.w	r3, r3, #3
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	6811      	ldr	r1, [r2, #0]
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	6852      	ldr	r2, [r2, #4]
 80076de:	0212      	lsls	r2, r2, #8
 80076e0:	430a      	orrs	r2, r1
 80076e2:	4936      	ldr	r1, [pc, #216]	@ (80077bc <RCCEx_PLL3_Config+0x12c>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	630b      	str	r3, [r1, #48]	@ 0x30
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	3b01      	subs	r3, #1
 80076ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	3b01      	subs	r3, #1
 80076f8:	025b      	lsls	r3, r3, #9
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	431a      	orrs	r2, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	3b01      	subs	r3, #1
 8007704:	041b      	lsls	r3, r3, #16
 8007706:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800770a:	431a      	orrs	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	695b      	ldr	r3, [r3, #20]
 8007710:	3b01      	subs	r3, #1
 8007712:	061b      	lsls	r3, r3, #24
 8007714:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007718:	4928      	ldr	r1, [pc, #160]	@ (80077bc <RCCEx_PLL3_Config+0x12c>)
 800771a:	4313      	orrs	r3, r2
 800771c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800771e:	4b27      	ldr	r3, [pc, #156]	@ (80077bc <RCCEx_PLL3_Config+0x12c>)
 8007720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007722:	f023 020c 	bic.w	r2, r3, #12
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	4924      	ldr	r1, [pc, #144]	@ (80077bc <RCCEx_PLL3_Config+0x12c>)
 800772c:	4313      	orrs	r3, r2
 800772e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8007730:	4b22      	ldr	r3, [pc, #136]	@ (80077bc <RCCEx_PLL3_Config+0x12c>)
 8007732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007734:	f023 0220 	bic.w	r2, r3, #32
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	69db      	ldr	r3, [r3, #28]
 800773c:	491f      	ldr	r1, [pc, #124]	@ (80077bc <RCCEx_PLL3_Config+0x12c>)
 800773e:	4313      	orrs	r3, r2
 8007740:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007742:	4b1e      	ldr	r3, [pc, #120]	@ (80077bc <RCCEx_PLL3_Config+0x12c>)
 8007744:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800774a:	491c      	ldr	r1, [pc, #112]	@ (80077bc <RCCEx_PLL3_Config+0x12c>)
 800774c:	4313      	orrs	r3, r2
 800774e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8007750:	4b1a      	ldr	r3, [pc, #104]	@ (80077bc <RCCEx_PLL3_Config+0x12c>)
 8007752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007754:	4a19      	ldr	r2, [pc, #100]	@ (80077bc <RCCEx_PLL3_Config+0x12c>)
 8007756:	f023 0310 	bic.w	r3, r3, #16
 800775a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800775c:	4b17      	ldr	r3, [pc, #92]	@ (80077bc <RCCEx_PLL3_Config+0x12c>)
 800775e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007760:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007764:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	6a12      	ldr	r2, [r2, #32]
 800776c:	00d2      	lsls	r2, r2, #3
 800776e:	4913      	ldr	r1, [pc, #76]	@ (80077bc <RCCEx_PLL3_Config+0x12c>)
 8007770:	4313      	orrs	r3, r2
 8007772:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8007774:	4b11      	ldr	r3, [pc, #68]	@ (80077bc <RCCEx_PLL3_Config+0x12c>)
 8007776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007778:	4a10      	ldr	r2, [pc, #64]	@ (80077bc <RCCEx_PLL3_Config+0x12c>)
 800777a:	f043 0310 	orr.w	r3, r3, #16
 800777e:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8007780:	4b0e      	ldr	r3, [pc, #56]	@ (80077bc <RCCEx_PLL3_Config+0x12c>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a0d      	ldr	r2, [pc, #52]	@ (80077bc <RCCEx_PLL3_Config+0x12c>)
 8007786:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800778a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800778c:	f7fa fa7c 	bl	8001c88 <HAL_GetTick>
 8007790:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007792:	e008      	b.n	80077a6 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007794:	f7fa fa78 	bl	8001c88 <HAL_GetTick>
 8007798:	4602      	mov	r2, r0
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d901      	bls.n	80077a6 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 80077a2:	2303      	movs	r3, #3
 80077a4:	e006      	b.n	80077b4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80077a6:	4b05      	ldr	r3, [pc, #20]	@ (80077bc <RCCEx_PLL3_Config+0x12c>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d0f0      	beq.n	8007794 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	44020c00 	.word	0x44020c00

080077c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d101      	bne.n	80077d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e049      	b.n	8007866 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d106      	bne.n	80077ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f7f9 fe68 	bl	80014bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2202      	movs	r2, #2
 80077f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	3304      	adds	r3, #4
 80077fc:	4619      	mov	r1, r3
 80077fe:	4610      	mov	r0, r2
 8007800:	f000 ff0e 	bl	8008620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3708      	adds	r7, #8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
	...

08007870 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d109      	bne.n	8007898 <HAL_TIM_OC_Start_IT+0x28>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800788a:	b2db      	uxtb	r3, r3
 800788c:	2b01      	cmp	r3, #1
 800788e:	bf14      	ite	ne
 8007890:	2301      	movne	r3, #1
 8007892:	2300      	moveq	r3, #0
 8007894:	b2db      	uxtb	r3, r3
 8007896:	e03c      	b.n	8007912 <HAL_TIM_OC_Start_IT+0xa2>
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	2b04      	cmp	r3, #4
 800789c:	d109      	bne.n	80078b2 <HAL_TIM_OC_Start_IT+0x42>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	bf14      	ite	ne
 80078aa:	2301      	movne	r3, #1
 80078ac:	2300      	moveq	r3, #0
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	e02f      	b.n	8007912 <HAL_TIM_OC_Start_IT+0xa2>
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	2b08      	cmp	r3, #8
 80078b6:	d109      	bne.n	80078cc <HAL_TIM_OC_Start_IT+0x5c>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	bf14      	ite	ne
 80078c4:	2301      	movne	r3, #1
 80078c6:	2300      	moveq	r3, #0
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	e022      	b.n	8007912 <HAL_TIM_OC_Start_IT+0xa2>
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	2b0c      	cmp	r3, #12
 80078d0:	d109      	bne.n	80078e6 <HAL_TIM_OC_Start_IT+0x76>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b01      	cmp	r3, #1
 80078dc:	bf14      	ite	ne
 80078de:	2301      	movne	r3, #1
 80078e0:	2300      	moveq	r3, #0
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	e015      	b.n	8007912 <HAL_TIM_OC_Start_IT+0xa2>
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	2b10      	cmp	r3, #16
 80078ea:	d109      	bne.n	8007900 <HAL_TIM_OC_Start_IT+0x90>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	bf14      	ite	ne
 80078f8:	2301      	movne	r3, #1
 80078fa:	2300      	moveq	r3, #0
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	e008      	b.n	8007912 <HAL_TIM_OC_Start_IT+0xa2>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007906:	b2db      	uxtb	r3, r3
 8007908:	2b01      	cmp	r3, #1
 800790a:	bf14      	ite	ne
 800790c:	2301      	movne	r3, #1
 800790e:	2300      	moveq	r3, #0
 8007910:	b2db      	uxtb	r3, r3
 8007912:	2b00      	cmp	r3, #0
 8007914:	d001      	beq.n	800791a <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e11a      	b.n	8007b50 <HAL_TIM_OC_Start_IT+0x2e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d104      	bne.n	800792a <HAL_TIM_OC_Start_IT+0xba>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2202      	movs	r2, #2
 8007924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007928:	e023      	b.n	8007972 <HAL_TIM_OC_Start_IT+0x102>
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	2b04      	cmp	r3, #4
 800792e:	d104      	bne.n	800793a <HAL_TIM_OC_Start_IT+0xca>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2202      	movs	r2, #2
 8007934:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007938:	e01b      	b.n	8007972 <HAL_TIM_OC_Start_IT+0x102>
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	2b08      	cmp	r3, #8
 800793e:	d104      	bne.n	800794a <HAL_TIM_OC_Start_IT+0xda>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2202      	movs	r2, #2
 8007944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007948:	e013      	b.n	8007972 <HAL_TIM_OC_Start_IT+0x102>
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	2b0c      	cmp	r3, #12
 800794e:	d104      	bne.n	800795a <HAL_TIM_OC_Start_IT+0xea>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2202      	movs	r2, #2
 8007954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007958:	e00b      	b.n	8007972 <HAL_TIM_OC_Start_IT+0x102>
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	2b10      	cmp	r3, #16
 800795e:	d104      	bne.n	800796a <HAL_TIM_OC_Start_IT+0xfa>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2202      	movs	r2, #2
 8007964:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007968:	e003      	b.n	8007972 <HAL_TIM_OC_Start_IT+0x102>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2202      	movs	r2, #2
 800796e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	2b0c      	cmp	r3, #12
 8007976:	d841      	bhi.n	80079fc <HAL_TIM_OC_Start_IT+0x18c>
 8007978:	a201      	add	r2, pc, #4	@ (adr r2, 8007980 <HAL_TIM_OC_Start_IT+0x110>)
 800797a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800797e:	bf00      	nop
 8007980:	080079b5 	.word	0x080079b5
 8007984:	080079fd 	.word	0x080079fd
 8007988:	080079fd 	.word	0x080079fd
 800798c:	080079fd 	.word	0x080079fd
 8007990:	080079c7 	.word	0x080079c7
 8007994:	080079fd 	.word	0x080079fd
 8007998:	080079fd 	.word	0x080079fd
 800799c:	080079fd 	.word	0x080079fd
 80079a0:	080079d9 	.word	0x080079d9
 80079a4:	080079fd 	.word	0x080079fd
 80079a8:	080079fd 	.word	0x080079fd
 80079ac:	080079fd 	.word	0x080079fd
 80079b0:	080079eb 	.word	0x080079eb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	68da      	ldr	r2, [r3, #12]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f042 0202 	orr.w	r2, r2, #2
 80079c2:	60da      	str	r2, [r3, #12]
      break;
 80079c4:	e01d      	b.n	8007a02 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68da      	ldr	r2, [r3, #12]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f042 0204 	orr.w	r2, r2, #4
 80079d4:	60da      	str	r2, [r3, #12]
      break;
 80079d6:	e014      	b.n	8007a02 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	68da      	ldr	r2, [r3, #12]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f042 0208 	orr.w	r2, r2, #8
 80079e6:	60da      	str	r2, [r3, #12]
      break;
 80079e8:	e00b      	b.n	8007a02 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68da      	ldr	r2, [r3, #12]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f042 0210 	orr.w	r2, r2, #16
 80079f8:	60da      	str	r2, [r3, #12]
      break;
 80079fa:	e002      	b.n	8007a02 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007a00:	bf00      	nop
  }

  if (status == HAL_OK)
 8007a02:	7bfb      	ldrb	r3, [r7, #15]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f040 80a2 	bne.w	8007b4e <HAL_TIM_OC_Start_IT+0x2de>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	6839      	ldr	r1, [r7, #0]
 8007a12:	4618      	mov	r0, r3
 8007a14:	f001 fac0 	bl	8008f98 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a4e      	ldr	r2, [pc, #312]	@ (8007b58 <HAL_TIM_OC_Start_IT+0x2e8>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d018      	beq.n	8007a54 <HAL_TIM_OC_Start_IT+0x1e4>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a4d      	ldr	r2, [pc, #308]	@ (8007b5c <HAL_TIM_OC_Start_IT+0x2ec>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d013      	beq.n	8007a54 <HAL_TIM_OC_Start_IT+0x1e4>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a4b      	ldr	r2, [pc, #300]	@ (8007b60 <HAL_TIM_OC_Start_IT+0x2f0>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d00e      	beq.n	8007a54 <HAL_TIM_OC_Start_IT+0x1e4>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a4a      	ldr	r2, [pc, #296]	@ (8007b64 <HAL_TIM_OC_Start_IT+0x2f4>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d009      	beq.n	8007a54 <HAL_TIM_OC_Start_IT+0x1e4>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a48      	ldr	r2, [pc, #288]	@ (8007b68 <HAL_TIM_OC_Start_IT+0x2f8>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d004      	beq.n	8007a54 <HAL_TIM_OC_Start_IT+0x1e4>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a47      	ldr	r2, [pc, #284]	@ (8007b6c <HAL_TIM_OC_Start_IT+0x2fc>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d101      	bne.n	8007a58 <HAL_TIM_OC_Start_IT+0x1e8>
 8007a54:	2301      	movs	r3, #1
 8007a56:	e000      	b.n	8007a5a <HAL_TIM_OC_Start_IT+0x1ea>
 8007a58:	2300      	movs	r3, #0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d007      	beq.n	8007a6e <HAL_TIM_OC_Start_IT+0x1fe>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a39      	ldr	r2, [pc, #228]	@ (8007b58 <HAL_TIM_OC_Start_IT+0x2e8>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d04a      	beq.n	8007b0e <HAL_TIM_OC_Start_IT+0x29e>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a37      	ldr	r2, [pc, #220]	@ (8007b5c <HAL_TIM_OC_Start_IT+0x2ec>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d045      	beq.n	8007b0e <HAL_TIM_OC_Start_IT+0x29e>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a8a:	d040      	beq.n	8007b0e <HAL_TIM_OC_Start_IT+0x29e>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a94:	d03b      	beq.n	8007b0e <HAL_TIM_OC_Start_IT+0x29e>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a35      	ldr	r2, [pc, #212]	@ (8007b70 <HAL_TIM_OC_Start_IT+0x300>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d036      	beq.n	8007b0e <HAL_TIM_OC_Start_IT+0x29e>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a33      	ldr	r2, [pc, #204]	@ (8007b74 <HAL_TIM_OC_Start_IT+0x304>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d031      	beq.n	8007b0e <HAL_TIM_OC_Start_IT+0x29e>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a32      	ldr	r2, [pc, #200]	@ (8007b78 <HAL_TIM_OC_Start_IT+0x308>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d02c      	beq.n	8007b0e <HAL_TIM_OC_Start_IT+0x29e>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a30      	ldr	r2, [pc, #192]	@ (8007b7c <HAL_TIM_OC_Start_IT+0x30c>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d027      	beq.n	8007b0e <HAL_TIM_OC_Start_IT+0x29e>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a2f      	ldr	r2, [pc, #188]	@ (8007b80 <HAL_TIM_OC_Start_IT+0x310>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d022      	beq.n	8007b0e <HAL_TIM_OC_Start_IT+0x29e>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a2d      	ldr	r2, [pc, #180]	@ (8007b84 <HAL_TIM_OC_Start_IT+0x314>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d01d      	beq.n	8007b0e <HAL_TIM_OC_Start_IT+0x29e>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a22      	ldr	r2, [pc, #136]	@ (8007b60 <HAL_TIM_OC_Start_IT+0x2f0>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d018      	beq.n	8007b0e <HAL_TIM_OC_Start_IT+0x29e>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a20      	ldr	r2, [pc, #128]	@ (8007b64 <HAL_TIM_OC_Start_IT+0x2f4>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d013      	beq.n	8007b0e <HAL_TIM_OC_Start_IT+0x29e>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a27      	ldr	r2, [pc, #156]	@ (8007b88 <HAL_TIM_OC_Start_IT+0x318>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d00e      	beq.n	8007b0e <HAL_TIM_OC_Start_IT+0x29e>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a25      	ldr	r2, [pc, #148]	@ (8007b8c <HAL_TIM_OC_Start_IT+0x31c>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d009      	beq.n	8007b0e <HAL_TIM_OC_Start_IT+0x29e>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a1a      	ldr	r2, [pc, #104]	@ (8007b68 <HAL_TIM_OC_Start_IT+0x2f8>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d004      	beq.n	8007b0e <HAL_TIM_OC_Start_IT+0x29e>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a18      	ldr	r2, [pc, #96]	@ (8007b6c <HAL_TIM_OC_Start_IT+0x2fc>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d115      	bne.n	8007b3a <HAL_TIM_OC_Start_IT+0x2ca>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	689a      	ldr	r2, [r3, #8]
 8007b14:	4b1e      	ldr	r3, [pc, #120]	@ (8007b90 <HAL_TIM_OC_Start_IT+0x320>)
 8007b16:	4013      	ands	r3, r2
 8007b18:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	2b06      	cmp	r3, #6
 8007b1e:	d015      	beq.n	8007b4c <HAL_TIM_OC_Start_IT+0x2dc>
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b26:	d011      	beq.n	8007b4c <HAL_TIM_OC_Start_IT+0x2dc>
      {
        __HAL_TIM_ENABLE(htim);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f042 0201 	orr.w	r2, r2, #1
 8007b36:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b38:	e008      	b.n	8007b4c <HAL_TIM_OC_Start_IT+0x2dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f042 0201 	orr.w	r2, r2, #1
 8007b48:	601a      	str	r2, [r3, #0]
 8007b4a:	e000      	b.n	8007b4e <HAL_TIM_OC_Start_IT+0x2de>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b4c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	40012c00 	.word	0x40012c00
 8007b5c:	50012c00 	.word	0x50012c00
 8007b60:	40013400 	.word	0x40013400
 8007b64:	50013400 	.word	0x50013400
 8007b68:	40014000 	.word	0x40014000
 8007b6c:	50014000 	.word	0x50014000
 8007b70:	40000400 	.word	0x40000400
 8007b74:	50000400 	.word	0x50000400
 8007b78:	40000800 	.word	0x40000800
 8007b7c:	50000800 	.word	0x50000800
 8007b80:	40000c00 	.word	0x40000c00
 8007b84:	50000c00 	.word	0x50000c00
 8007b88:	40001800 	.word	0x40001800
 8007b8c:	50001800 	.word	0x50001800
 8007b90:	00010007 	.word	0x00010007

08007b94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d101      	bne.n	8007ba6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e049      	b.n	8007c3a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d106      	bne.n	8007bc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f7f9 fcbe 	bl	800153c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2202      	movs	r2, #2
 8007bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	3304      	adds	r3, #4
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	4610      	mov	r0, r2
 8007bd4:	f000 fd24 	bl	8008620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3708      	adds	r7, #8
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
	...

08007c44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d109      	bne.n	8007c68 <HAL_TIM_PWM_Start+0x24>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	bf14      	ite	ne
 8007c60:	2301      	movne	r3, #1
 8007c62:	2300      	moveq	r3, #0
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	e03c      	b.n	8007ce2 <HAL_TIM_PWM_Start+0x9e>
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	2b04      	cmp	r3, #4
 8007c6c:	d109      	bne.n	8007c82 <HAL_TIM_PWM_Start+0x3e>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	bf14      	ite	ne
 8007c7a:	2301      	movne	r3, #1
 8007c7c:	2300      	moveq	r3, #0
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	e02f      	b.n	8007ce2 <HAL_TIM_PWM_Start+0x9e>
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	2b08      	cmp	r3, #8
 8007c86:	d109      	bne.n	8007c9c <HAL_TIM_PWM_Start+0x58>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	bf14      	ite	ne
 8007c94:	2301      	movne	r3, #1
 8007c96:	2300      	moveq	r3, #0
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	e022      	b.n	8007ce2 <HAL_TIM_PWM_Start+0x9e>
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	2b0c      	cmp	r3, #12
 8007ca0:	d109      	bne.n	8007cb6 <HAL_TIM_PWM_Start+0x72>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	bf14      	ite	ne
 8007cae:	2301      	movne	r3, #1
 8007cb0:	2300      	moveq	r3, #0
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	e015      	b.n	8007ce2 <HAL_TIM_PWM_Start+0x9e>
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	2b10      	cmp	r3, #16
 8007cba:	d109      	bne.n	8007cd0 <HAL_TIM_PWM_Start+0x8c>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	bf14      	ite	ne
 8007cc8:	2301      	movne	r3, #1
 8007cca:	2300      	moveq	r3, #0
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	e008      	b.n	8007ce2 <HAL_TIM_PWM_Start+0x9e>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	bf14      	ite	ne
 8007cdc:	2301      	movne	r3, #1
 8007cde:	2300      	moveq	r3, #0
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d001      	beq.n	8007cea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e0ce      	b.n	8007e88 <HAL_TIM_PWM_Start+0x244>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d104      	bne.n	8007cfa <HAL_TIM_PWM_Start+0xb6>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007cf8:	e023      	b.n	8007d42 <HAL_TIM_PWM_Start+0xfe>
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	2b04      	cmp	r3, #4
 8007cfe:	d104      	bne.n	8007d0a <HAL_TIM_PWM_Start+0xc6>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2202      	movs	r2, #2
 8007d04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d08:	e01b      	b.n	8007d42 <HAL_TIM_PWM_Start+0xfe>
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	2b08      	cmp	r3, #8
 8007d0e:	d104      	bne.n	8007d1a <HAL_TIM_PWM_Start+0xd6>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2202      	movs	r2, #2
 8007d14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d18:	e013      	b.n	8007d42 <HAL_TIM_PWM_Start+0xfe>
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	2b0c      	cmp	r3, #12
 8007d1e:	d104      	bne.n	8007d2a <HAL_TIM_PWM_Start+0xe6>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2202      	movs	r2, #2
 8007d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d28:	e00b      	b.n	8007d42 <HAL_TIM_PWM_Start+0xfe>
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	2b10      	cmp	r3, #16
 8007d2e:	d104      	bne.n	8007d3a <HAL_TIM_PWM_Start+0xf6>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2202      	movs	r2, #2
 8007d34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d38:	e003      	b.n	8007d42 <HAL_TIM_PWM_Start+0xfe>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2202      	movs	r2, #2
 8007d3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2201      	movs	r2, #1
 8007d48:	6839      	ldr	r1, [r7, #0]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f001 f924 	bl	8008f98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a4e      	ldr	r2, [pc, #312]	@ (8007e90 <HAL_TIM_PWM_Start+0x24c>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d018      	beq.n	8007d8c <HAL_TIM_PWM_Start+0x148>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a4d      	ldr	r2, [pc, #308]	@ (8007e94 <HAL_TIM_PWM_Start+0x250>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d013      	beq.n	8007d8c <HAL_TIM_PWM_Start+0x148>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a4b      	ldr	r2, [pc, #300]	@ (8007e98 <HAL_TIM_PWM_Start+0x254>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d00e      	beq.n	8007d8c <HAL_TIM_PWM_Start+0x148>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a4a      	ldr	r2, [pc, #296]	@ (8007e9c <HAL_TIM_PWM_Start+0x258>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d009      	beq.n	8007d8c <HAL_TIM_PWM_Start+0x148>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a48      	ldr	r2, [pc, #288]	@ (8007ea0 <HAL_TIM_PWM_Start+0x25c>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d004      	beq.n	8007d8c <HAL_TIM_PWM_Start+0x148>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a47      	ldr	r2, [pc, #284]	@ (8007ea4 <HAL_TIM_PWM_Start+0x260>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d101      	bne.n	8007d90 <HAL_TIM_PWM_Start+0x14c>
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e000      	b.n	8007d92 <HAL_TIM_PWM_Start+0x14e>
 8007d90:	2300      	movs	r3, #0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d007      	beq.n	8007da6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007da4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a39      	ldr	r2, [pc, #228]	@ (8007e90 <HAL_TIM_PWM_Start+0x24c>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d04a      	beq.n	8007e46 <HAL_TIM_PWM_Start+0x202>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a37      	ldr	r2, [pc, #220]	@ (8007e94 <HAL_TIM_PWM_Start+0x250>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d045      	beq.n	8007e46 <HAL_TIM_PWM_Start+0x202>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dc2:	d040      	beq.n	8007e46 <HAL_TIM_PWM_Start+0x202>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007dcc:	d03b      	beq.n	8007e46 <HAL_TIM_PWM_Start+0x202>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a35      	ldr	r2, [pc, #212]	@ (8007ea8 <HAL_TIM_PWM_Start+0x264>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d036      	beq.n	8007e46 <HAL_TIM_PWM_Start+0x202>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a33      	ldr	r2, [pc, #204]	@ (8007eac <HAL_TIM_PWM_Start+0x268>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d031      	beq.n	8007e46 <HAL_TIM_PWM_Start+0x202>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a32      	ldr	r2, [pc, #200]	@ (8007eb0 <HAL_TIM_PWM_Start+0x26c>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d02c      	beq.n	8007e46 <HAL_TIM_PWM_Start+0x202>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a30      	ldr	r2, [pc, #192]	@ (8007eb4 <HAL_TIM_PWM_Start+0x270>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d027      	beq.n	8007e46 <HAL_TIM_PWM_Start+0x202>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a2f      	ldr	r2, [pc, #188]	@ (8007eb8 <HAL_TIM_PWM_Start+0x274>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d022      	beq.n	8007e46 <HAL_TIM_PWM_Start+0x202>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a2d      	ldr	r2, [pc, #180]	@ (8007ebc <HAL_TIM_PWM_Start+0x278>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d01d      	beq.n	8007e46 <HAL_TIM_PWM_Start+0x202>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a22      	ldr	r2, [pc, #136]	@ (8007e98 <HAL_TIM_PWM_Start+0x254>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d018      	beq.n	8007e46 <HAL_TIM_PWM_Start+0x202>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a20      	ldr	r2, [pc, #128]	@ (8007e9c <HAL_TIM_PWM_Start+0x258>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d013      	beq.n	8007e46 <HAL_TIM_PWM_Start+0x202>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a27      	ldr	r2, [pc, #156]	@ (8007ec0 <HAL_TIM_PWM_Start+0x27c>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d00e      	beq.n	8007e46 <HAL_TIM_PWM_Start+0x202>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a25      	ldr	r2, [pc, #148]	@ (8007ec4 <HAL_TIM_PWM_Start+0x280>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d009      	beq.n	8007e46 <HAL_TIM_PWM_Start+0x202>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a1a      	ldr	r2, [pc, #104]	@ (8007ea0 <HAL_TIM_PWM_Start+0x25c>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d004      	beq.n	8007e46 <HAL_TIM_PWM_Start+0x202>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a18      	ldr	r2, [pc, #96]	@ (8007ea4 <HAL_TIM_PWM_Start+0x260>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d115      	bne.n	8007e72 <HAL_TIM_PWM_Start+0x22e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	689a      	ldr	r2, [r3, #8]
 8007e4c:	4b1e      	ldr	r3, [pc, #120]	@ (8007ec8 <HAL_TIM_PWM_Start+0x284>)
 8007e4e:	4013      	ands	r3, r2
 8007e50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2b06      	cmp	r3, #6
 8007e56:	d015      	beq.n	8007e84 <HAL_TIM_PWM_Start+0x240>
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e5e:	d011      	beq.n	8007e84 <HAL_TIM_PWM_Start+0x240>
    {
      __HAL_TIM_ENABLE(htim);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f042 0201 	orr.w	r2, r2, #1
 8007e6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e70:	e008      	b.n	8007e84 <HAL_TIM_PWM_Start+0x240>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f042 0201 	orr.w	r2, r2, #1
 8007e80:	601a      	str	r2, [r3, #0]
 8007e82:	e000      	b.n	8007e86 <HAL_TIM_PWM_Start+0x242>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e84:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	40012c00 	.word	0x40012c00
 8007e94:	50012c00 	.word	0x50012c00
 8007e98:	40013400 	.word	0x40013400
 8007e9c:	50013400 	.word	0x50013400
 8007ea0:	40014000 	.word	0x40014000
 8007ea4:	50014000 	.word	0x50014000
 8007ea8:	40000400 	.word	0x40000400
 8007eac:	50000400 	.word	0x50000400
 8007eb0:	40000800 	.word	0x40000800
 8007eb4:	50000800 	.word	0x50000800
 8007eb8:	40000c00 	.word	0x40000c00
 8007ebc:	50000c00 	.word	0x50000c00
 8007ec0:	40001800 	.word	0x40001800
 8007ec4:	50001800 	.word	0x50001800
 8007ec8:	00010007 	.word	0x00010007

08007ecc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	f003 0302 	and.w	r3, r3, #2
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d020      	beq.n	8007f30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f003 0302 	and.w	r3, r3, #2
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d01b      	beq.n	8007f30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f06f 0202 	mvn.w	r2, #2
 8007f00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2201      	movs	r2, #1
 8007f06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	f003 0303 	and.w	r3, r3, #3
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d003      	beq.n	8007f1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 fb64 	bl	80085e4 <HAL_TIM_IC_CaptureCallback>
 8007f1c:	e005      	b.n	8007f2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fb56 	bl	80085d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 fb67 	bl	80085f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	f003 0304 	and.w	r3, r3, #4
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d020      	beq.n	8007f7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f003 0304 	and.w	r3, r3, #4
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d01b      	beq.n	8007f7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f06f 0204 	mvn.w	r2, #4
 8007f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2202      	movs	r2, #2
 8007f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d003      	beq.n	8007f6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fb3e 	bl	80085e4 <HAL_TIM_IC_CaptureCallback>
 8007f68:	e005      	b.n	8007f76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 fb30 	bl	80085d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fb41 	bl	80085f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	f003 0308 	and.w	r3, r3, #8
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d020      	beq.n	8007fc8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f003 0308 	and.w	r3, r3, #8
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d01b      	beq.n	8007fc8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f06f 0208 	mvn.w	r2, #8
 8007f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2204      	movs	r2, #4
 8007f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	69db      	ldr	r3, [r3, #28]
 8007fa6:	f003 0303 	and.w	r3, r3, #3
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d003      	beq.n	8007fb6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 fb18 	bl	80085e4 <HAL_TIM_IC_CaptureCallback>
 8007fb4:	e005      	b.n	8007fc2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 fb0a 	bl	80085d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 fb1b 	bl	80085f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	f003 0310 	and.w	r3, r3, #16
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d020      	beq.n	8008014 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f003 0310 	and.w	r3, r3, #16
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d01b      	beq.n	8008014 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f06f 0210 	mvn.w	r2, #16
 8007fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2208      	movs	r2, #8
 8007fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	69db      	ldr	r3, [r3, #28]
 8007ff2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d003      	beq.n	8008002 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 faf2 	bl	80085e4 <HAL_TIM_IC_CaptureCallback>
 8008000:	e005      	b.n	800800e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 fae4 	bl	80085d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 faf5 	bl	80085f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	f003 0301 	and.w	r3, r3, #1
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00c      	beq.n	8008038 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f003 0301 	and.w	r3, r3, #1
 8008024:	2b00      	cmp	r3, #0
 8008026:	d007      	beq.n	8008038 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f06f 0201 	mvn.w	r2, #1
 8008030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f7f9 f930 	bl	8001298 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800803e:	2b00      	cmp	r3, #0
 8008040:	d104      	bne.n	800804c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00c      	beq.n	8008066 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008052:	2b00      	cmp	r3, #0
 8008054:	d007      	beq.n	8008066 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800805e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f001 f933 	bl	80092cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00c      	beq.n	800808a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008076:	2b00      	cmp	r3, #0
 8008078:	d007      	beq.n	800808a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f001 f92b 	bl	80092e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008090:	2b00      	cmp	r3, #0
 8008092:	d00c      	beq.n	80080ae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800809a:	2b00      	cmp	r3, #0
 800809c:	d007      	beq.n	80080ae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80080a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 faaf 	bl	800860c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	f003 0320 	and.w	r3, r3, #32
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00c      	beq.n	80080d2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f003 0320 	and.w	r3, r3, #32
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d007      	beq.n	80080d2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f06f 0220 	mvn.w	r2, #32
 80080ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f001 f8f3 	bl	80092b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00c      	beq.n	80080f6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d007      	beq.n	80080f6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80080ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f001 f8ff 	bl	80092f4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00c      	beq.n	800811a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008106:	2b00      	cmp	r3, #0
 8008108:	d007      	beq.n	800811a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f001 f8f7 	bl	8009308 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00c      	beq.n	800813e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800812a:	2b00      	cmp	r3, #0
 800812c:	d007      	beq.n	800813e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f001 f8ef 	bl	800931c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008144:	2b00      	cmp	r3, #0
 8008146:	d00c      	beq.n	8008162 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800814e:	2b00      	cmp	r3, #0
 8008150:	d007      	beq.n	8008162 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800815a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f001 f8e7 	bl	8009330 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008162:	bf00      	nop
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
	...

0800816c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b086      	sub	sp, #24
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008178:	2300      	movs	r3, #0
 800817a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008182:	2b01      	cmp	r3, #1
 8008184:	d101      	bne.n	800818a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008186:	2302      	movs	r3, #2
 8008188:	e0ff      	b.n	800838a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2201      	movs	r2, #1
 800818e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2b14      	cmp	r3, #20
 8008196:	f200 80f0 	bhi.w	800837a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800819a:	a201      	add	r2, pc, #4	@ (adr r2, 80081a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800819c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a0:	080081f5 	.word	0x080081f5
 80081a4:	0800837b 	.word	0x0800837b
 80081a8:	0800837b 	.word	0x0800837b
 80081ac:	0800837b 	.word	0x0800837b
 80081b0:	08008235 	.word	0x08008235
 80081b4:	0800837b 	.word	0x0800837b
 80081b8:	0800837b 	.word	0x0800837b
 80081bc:	0800837b 	.word	0x0800837b
 80081c0:	08008277 	.word	0x08008277
 80081c4:	0800837b 	.word	0x0800837b
 80081c8:	0800837b 	.word	0x0800837b
 80081cc:	0800837b 	.word	0x0800837b
 80081d0:	080082b7 	.word	0x080082b7
 80081d4:	0800837b 	.word	0x0800837b
 80081d8:	0800837b 	.word	0x0800837b
 80081dc:	0800837b 	.word	0x0800837b
 80081e0:	080082f9 	.word	0x080082f9
 80081e4:	0800837b 	.word	0x0800837b
 80081e8:	0800837b 	.word	0x0800837b
 80081ec:	0800837b 	.word	0x0800837b
 80081f0:	08008339 	.word	0x08008339
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68b9      	ldr	r1, [r7, #8]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f000 fafa 	bl	80087f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	699a      	ldr	r2, [r3, #24]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f042 0208 	orr.w	r2, r2, #8
 800820e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	699a      	ldr	r2, [r3, #24]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f022 0204 	bic.w	r2, r2, #4
 800821e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	6999      	ldr	r1, [r3, #24]
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	691a      	ldr	r2, [r3, #16]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	430a      	orrs	r2, r1
 8008230:	619a      	str	r2, [r3, #24]
      break;
 8008232:	e0a5      	b.n	8008380 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	68b9      	ldr	r1, [r7, #8]
 800823a:	4618      	mov	r0, r3
 800823c:	f000 fb74 	bl	8008928 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	699a      	ldr	r2, [r3, #24]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800824e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	699a      	ldr	r2, [r3, #24]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800825e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6999      	ldr	r1, [r3, #24]
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	691b      	ldr	r3, [r3, #16]
 800826a:	021a      	lsls	r2, r3, #8
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	430a      	orrs	r2, r1
 8008272:	619a      	str	r2, [r3, #24]
      break;
 8008274:	e084      	b.n	8008380 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	68b9      	ldr	r1, [r7, #8]
 800827c:	4618      	mov	r0, r3
 800827e:	f000 fbeb 	bl	8008a58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	69da      	ldr	r2, [r3, #28]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f042 0208 	orr.w	r2, r2, #8
 8008290:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	69da      	ldr	r2, [r3, #28]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f022 0204 	bic.w	r2, r2, #4
 80082a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	69d9      	ldr	r1, [r3, #28]
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	691a      	ldr	r2, [r3, #16]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	430a      	orrs	r2, r1
 80082b2:	61da      	str	r2, [r3, #28]
      break;
 80082b4:	e064      	b.n	8008380 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68b9      	ldr	r1, [r7, #8]
 80082bc:	4618      	mov	r0, r3
 80082be:	f000 fc61 	bl	8008b84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	69da      	ldr	r2, [r3, #28]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80082d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	69da      	ldr	r2, [r3, #28]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	69d9      	ldr	r1, [r3, #28]
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	021a      	lsls	r2, r3, #8
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	430a      	orrs	r2, r1
 80082f4:	61da      	str	r2, [r3, #28]
      break;
 80082f6:	e043      	b.n	8008380 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	68b9      	ldr	r1, [r7, #8]
 80082fe:	4618      	mov	r0, r3
 8008300:	f000 fcd8 	bl	8008cb4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f042 0208 	orr.w	r2, r2, #8
 8008312:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f022 0204 	bic.w	r2, r2, #4
 8008322:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	691a      	ldr	r2, [r3, #16]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	430a      	orrs	r2, r1
 8008334:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008336:	e023      	b.n	8008380 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68b9      	ldr	r1, [r7, #8]
 800833e:	4618      	mov	r0, r3
 8008340:	f000 fd22 	bl	8008d88 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008352:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008362:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	021a      	lsls	r2, r3, #8
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	430a      	orrs	r2, r1
 8008376:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008378:	e002      	b.n	8008380 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	75fb      	strb	r3, [r7, #23]
      break;
 800837e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2200      	movs	r2, #0
 8008384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008388:	7dfb      	ldrb	r3, [r7, #23]
}
 800838a:	4618      	mov	r0, r3
 800838c:	3718      	adds	r7, #24
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop

08008394 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800839e:	2300      	movs	r3, #0
 80083a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d101      	bne.n	80083b0 <HAL_TIM_ConfigClockSource+0x1c>
 80083ac:	2302      	movs	r3, #2
 80083ae:	e0fe      	b.n	80085ae <HAL_TIM_ConfigClockSource+0x21a>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2202      	movs	r2, #2
 80083bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80083ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80083d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80083da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	68ba      	ldr	r2, [r7, #8]
 80083e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80083ec:	f000 80c9 	beq.w	8008582 <HAL_TIM_ConfigClockSource+0x1ee>
 80083f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80083f4:	f200 80ce 	bhi.w	8008594 <HAL_TIM_ConfigClockSource+0x200>
 80083f8:	4a6f      	ldr	r2, [pc, #444]	@ (80085b8 <HAL_TIM_ConfigClockSource+0x224>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	f000 80c1 	beq.w	8008582 <HAL_TIM_ConfigClockSource+0x1ee>
 8008400:	4a6d      	ldr	r2, [pc, #436]	@ (80085b8 <HAL_TIM_ConfigClockSource+0x224>)
 8008402:	4293      	cmp	r3, r2
 8008404:	f200 80c6 	bhi.w	8008594 <HAL_TIM_ConfigClockSource+0x200>
 8008408:	4a6c      	ldr	r2, [pc, #432]	@ (80085bc <HAL_TIM_ConfigClockSource+0x228>)
 800840a:	4293      	cmp	r3, r2
 800840c:	f000 80b9 	beq.w	8008582 <HAL_TIM_ConfigClockSource+0x1ee>
 8008410:	4a6a      	ldr	r2, [pc, #424]	@ (80085bc <HAL_TIM_ConfigClockSource+0x228>)
 8008412:	4293      	cmp	r3, r2
 8008414:	f200 80be 	bhi.w	8008594 <HAL_TIM_ConfigClockSource+0x200>
 8008418:	4a69      	ldr	r2, [pc, #420]	@ (80085c0 <HAL_TIM_ConfigClockSource+0x22c>)
 800841a:	4293      	cmp	r3, r2
 800841c:	f000 80b1 	beq.w	8008582 <HAL_TIM_ConfigClockSource+0x1ee>
 8008420:	4a67      	ldr	r2, [pc, #412]	@ (80085c0 <HAL_TIM_ConfigClockSource+0x22c>)
 8008422:	4293      	cmp	r3, r2
 8008424:	f200 80b6 	bhi.w	8008594 <HAL_TIM_ConfigClockSource+0x200>
 8008428:	4a66      	ldr	r2, [pc, #408]	@ (80085c4 <HAL_TIM_ConfigClockSource+0x230>)
 800842a:	4293      	cmp	r3, r2
 800842c:	f000 80a9 	beq.w	8008582 <HAL_TIM_ConfigClockSource+0x1ee>
 8008430:	4a64      	ldr	r2, [pc, #400]	@ (80085c4 <HAL_TIM_ConfigClockSource+0x230>)
 8008432:	4293      	cmp	r3, r2
 8008434:	f200 80ae 	bhi.w	8008594 <HAL_TIM_ConfigClockSource+0x200>
 8008438:	4a63      	ldr	r2, [pc, #396]	@ (80085c8 <HAL_TIM_ConfigClockSource+0x234>)
 800843a:	4293      	cmp	r3, r2
 800843c:	f000 80a1 	beq.w	8008582 <HAL_TIM_ConfigClockSource+0x1ee>
 8008440:	4a61      	ldr	r2, [pc, #388]	@ (80085c8 <HAL_TIM_ConfigClockSource+0x234>)
 8008442:	4293      	cmp	r3, r2
 8008444:	f200 80a6 	bhi.w	8008594 <HAL_TIM_ConfigClockSource+0x200>
 8008448:	4a60      	ldr	r2, [pc, #384]	@ (80085cc <HAL_TIM_ConfigClockSource+0x238>)
 800844a:	4293      	cmp	r3, r2
 800844c:	f000 8099 	beq.w	8008582 <HAL_TIM_ConfigClockSource+0x1ee>
 8008450:	4a5e      	ldr	r2, [pc, #376]	@ (80085cc <HAL_TIM_ConfigClockSource+0x238>)
 8008452:	4293      	cmp	r3, r2
 8008454:	f200 809e 	bhi.w	8008594 <HAL_TIM_ConfigClockSource+0x200>
 8008458:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800845c:	f000 8091 	beq.w	8008582 <HAL_TIM_ConfigClockSource+0x1ee>
 8008460:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008464:	f200 8096 	bhi.w	8008594 <HAL_TIM_ConfigClockSource+0x200>
 8008468:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800846c:	f000 8089 	beq.w	8008582 <HAL_TIM_ConfigClockSource+0x1ee>
 8008470:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008474:	f200 808e 	bhi.w	8008594 <HAL_TIM_ConfigClockSource+0x200>
 8008478:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800847c:	d03e      	beq.n	80084fc <HAL_TIM_ConfigClockSource+0x168>
 800847e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008482:	f200 8087 	bhi.w	8008594 <HAL_TIM_ConfigClockSource+0x200>
 8008486:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800848a:	f000 8086 	beq.w	800859a <HAL_TIM_ConfigClockSource+0x206>
 800848e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008492:	d87f      	bhi.n	8008594 <HAL_TIM_ConfigClockSource+0x200>
 8008494:	2b70      	cmp	r3, #112	@ 0x70
 8008496:	d01a      	beq.n	80084ce <HAL_TIM_ConfigClockSource+0x13a>
 8008498:	2b70      	cmp	r3, #112	@ 0x70
 800849a:	d87b      	bhi.n	8008594 <HAL_TIM_ConfigClockSource+0x200>
 800849c:	2b60      	cmp	r3, #96	@ 0x60
 800849e:	d050      	beq.n	8008542 <HAL_TIM_ConfigClockSource+0x1ae>
 80084a0:	2b60      	cmp	r3, #96	@ 0x60
 80084a2:	d877      	bhi.n	8008594 <HAL_TIM_ConfigClockSource+0x200>
 80084a4:	2b50      	cmp	r3, #80	@ 0x50
 80084a6:	d03c      	beq.n	8008522 <HAL_TIM_ConfigClockSource+0x18e>
 80084a8:	2b50      	cmp	r3, #80	@ 0x50
 80084aa:	d873      	bhi.n	8008594 <HAL_TIM_ConfigClockSource+0x200>
 80084ac:	2b40      	cmp	r3, #64	@ 0x40
 80084ae:	d058      	beq.n	8008562 <HAL_TIM_ConfigClockSource+0x1ce>
 80084b0:	2b40      	cmp	r3, #64	@ 0x40
 80084b2:	d86f      	bhi.n	8008594 <HAL_TIM_ConfigClockSource+0x200>
 80084b4:	2b30      	cmp	r3, #48	@ 0x30
 80084b6:	d064      	beq.n	8008582 <HAL_TIM_ConfigClockSource+0x1ee>
 80084b8:	2b30      	cmp	r3, #48	@ 0x30
 80084ba:	d86b      	bhi.n	8008594 <HAL_TIM_ConfigClockSource+0x200>
 80084bc:	2b20      	cmp	r3, #32
 80084be:	d060      	beq.n	8008582 <HAL_TIM_ConfigClockSource+0x1ee>
 80084c0:	2b20      	cmp	r3, #32
 80084c2:	d867      	bhi.n	8008594 <HAL_TIM_ConfigClockSource+0x200>
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d05c      	beq.n	8008582 <HAL_TIM_ConfigClockSource+0x1ee>
 80084c8:	2b10      	cmp	r3, #16
 80084ca:	d05a      	beq.n	8008582 <HAL_TIM_ConfigClockSource+0x1ee>
 80084cc:	e062      	b.n	8008594 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80084de:	f000 fd3b 	bl	8008f58 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80084f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	609a      	str	r2, [r3, #8]
      break;
 80084fa:	e04f      	b.n	800859c <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800850c:	f000 fd24 	bl	8008f58 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	689a      	ldr	r2, [r3, #8]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800851e:	609a      	str	r2, [r3, #8]
      break;
 8008520:	e03c      	b.n	800859c <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800852e:	461a      	mov	r2, r3
 8008530:	f000 fc96 	bl	8008e60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2150      	movs	r1, #80	@ 0x50
 800853a:	4618      	mov	r0, r3
 800853c:	f000 fcef 	bl	8008f1e <TIM_ITRx_SetConfig>
      break;
 8008540:	e02c      	b.n	800859c <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800854e:	461a      	mov	r2, r3
 8008550:	f000 fcb5 	bl	8008ebe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2160      	movs	r1, #96	@ 0x60
 800855a:	4618      	mov	r0, r3
 800855c:	f000 fcdf 	bl	8008f1e <TIM_ITRx_SetConfig>
      break;
 8008560:	e01c      	b.n	800859c <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800856e:	461a      	mov	r2, r3
 8008570:	f000 fc76 	bl	8008e60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2140      	movs	r1, #64	@ 0x40
 800857a:	4618      	mov	r0, r3
 800857c:	f000 fccf 	bl	8008f1e <TIM_ITRx_SetConfig>
      break;
 8008580:	e00c      	b.n	800859c <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4619      	mov	r1, r3
 800858c:	4610      	mov	r0, r2
 800858e:	f000 fcc6 	bl	8008f1e <TIM_ITRx_SetConfig>
      break;
 8008592:	e003      	b.n	800859c <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	73fb      	strb	r3, [r7, #15]
      break;
 8008598:	e000      	b.n	800859c <HAL_TIM_ConfigClockSource+0x208>
      break;
 800859a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	00100070 	.word	0x00100070
 80085bc:	00100060 	.word	0x00100060
 80085c0:	00100050 	.word	0x00100050
 80085c4:	00100040 	.word	0x00100040
 80085c8:	00100030 	.word	0x00100030
 80085cc:	00100020 	.word	0x00100020

080085d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085d8:	bf00      	nop
 80085da:	370c      	adds	r7, #12
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085ec:	bf00      	nop
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008600:	bf00      	nop
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008614:	bf00      	nop
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a62      	ldr	r2, [pc, #392]	@ (80087bc <TIM_Base_SetConfig+0x19c>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d02b      	beq.n	8008690 <TIM_Base_SetConfig+0x70>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a61      	ldr	r2, [pc, #388]	@ (80087c0 <TIM_Base_SetConfig+0x1a0>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d027      	beq.n	8008690 <TIM_Base_SetConfig+0x70>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008646:	d023      	beq.n	8008690 <TIM_Base_SetConfig+0x70>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800864e:	d01f      	beq.n	8008690 <TIM_Base_SetConfig+0x70>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a5c      	ldr	r2, [pc, #368]	@ (80087c4 <TIM_Base_SetConfig+0x1a4>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d01b      	beq.n	8008690 <TIM_Base_SetConfig+0x70>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a5b      	ldr	r2, [pc, #364]	@ (80087c8 <TIM_Base_SetConfig+0x1a8>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d017      	beq.n	8008690 <TIM_Base_SetConfig+0x70>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a5a      	ldr	r2, [pc, #360]	@ (80087cc <TIM_Base_SetConfig+0x1ac>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d013      	beq.n	8008690 <TIM_Base_SetConfig+0x70>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4a59      	ldr	r2, [pc, #356]	@ (80087d0 <TIM_Base_SetConfig+0x1b0>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d00f      	beq.n	8008690 <TIM_Base_SetConfig+0x70>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	4a58      	ldr	r2, [pc, #352]	@ (80087d4 <TIM_Base_SetConfig+0x1b4>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d00b      	beq.n	8008690 <TIM_Base_SetConfig+0x70>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a57      	ldr	r2, [pc, #348]	@ (80087d8 <TIM_Base_SetConfig+0x1b8>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d007      	beq.n	8008690 <TIM_Base_SetConfig+0x70>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4a56      	ldr	r2, [pc, #344]	@ (80087dc <TIM_Base_SetConfig+0x1bc>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d003      	beq.n	8008690 <TIM_Base_SetConfig+0x70>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a55      	ldr	r2, [pc, #340]	@ (80087e0 <TIM_Base_SetConfig+0x1c0>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d108      	bne.n	80086a2 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008696:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	4313      	orrs	r3, r2
 80086a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a45      	ldr	r2, [pc, #276]	@ (80087bc <TIM_Base_SetConfig+0x19c>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d03b      	beq.n	8008722 <TIM_Base_SetConfig+0x102>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a44      	ldr	r2, [pc, #272]	@ (80087c0 <TIM_Base_SetConfig+0x1a0>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d037      	beq.n	8008722 <TIM_Base_SetConfig+0x102>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086b8:	d033      	beq.n	8008722 <TIM_Base_SetConfig+0x102>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80086c0:	d02f      	beq.n	8008722 <TIM_Base_SetConfig+0x102>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4a3f      	ldr	r2, [pc, #252]	@ (80087c4 <TIM_Base_SetConfig+0x1a4>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d02b      	beq.n	8008722 <TIM_Base_SetConfig+0x102>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4a3e      	ldr	r2, [pc, #248]	@ (80087c8 <TIM_Base_SetConfig+0x1a8>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d027      	beq.n	8008722 <TIM_Base_SetConfig+0x102>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4a3d      	ldr	r2, [pc, #244]	@ (80087cc <TIM_Base_SetConfig+0x1ac>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d023      	beq.n	8008722 <TIM_Base_SetConfig+0x102>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a3c      	ldr	r2, [pc, #240]	@ (80087d0 <TIM_Base_SetConfig+0x1b0>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d01f      	beq.n	8008722 <TIM_Base_SetConfig+0x102>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a3b      	ldr	r2, [pc, #236]	@ (80087d4 <TIM_Base_SetConfig+0x1b4>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d01b      	beq.n	8008722 <TIM_Base_SetConfig+0x102>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4a3a      	ldr	r2, [pc, #232]	@ (80087d8 <TIM_Base_SetConfig+0x1b8>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d017      	beq.n	8008722 <TIM_Base_SetConfig+0x102>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a39      	ldr	r2, [pc, #228]	@ (80087dc <TIM_Base_SetConfig+0x1bc>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d013      	beq.n	8008722 <TIM_Base_SetConfig+0x102>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a38      	ldr	r2, [pc, #224]	@ (80087e0 <TIM_Base_SetConfig+0x1c0>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d00f      	beq.n	8008722 <TIM_Base_SetConfig+0x102>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a37      	ldr	r2, [pc, #220]	@ (80087e4 <TIM_Base_SetConfig+0x1c4>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d00b      	beq.n	8008722 <TIM_Base_SetConfig+0x102>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a36      	ldr	r2, [pc, #216]	@ (80087e8 <TIM_Base_SetConfig+0x1c8>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d007      	beq.n	8008722 <TIM_Base_SetConfig+0x102>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a35      	ldr	r2, [pc, #212]	@ (80087ec <TIM_Base_SetConfig+0x1cc>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d003      	beq.n	8008722 <TIM_Base_SetConfig+0x102>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a34      	ldr	r2, [pc, #208]	@ (80087f0 <TIM_Base_SetConfig+0x1d0>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d108      	bne.n	8008734 <TIM_Base_SetConfig+0x114>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	4313      	orrs	r3, r2
 8008732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	695b      	ldr	r3, [r3, #20]
 800873e:	4313      	orrs	r3, r2
 8008740:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	689a      	ldr	r2, [r3, #8]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a18      	ldr	r2, [pc, #96]	@ (80087bc <TIM_Base_SetConfig+0x19c>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d013      	beq.n	8008788 <TIM_Base_SetConfig+0x168>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a17      	ldr	r2, [pc, #92]	@ (80087c0 <TIM_Base_SetConfig+0x1a0>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d00f      	beq.n	8008788 <TIM_Base_SetConfig+0x168>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a1c      	ldr	r2, [pc, #112]	@ (80087dc <TIM_Base_SetConfig+0x1bc>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d00b      	beq.n	8008788 <TIM_Base_SetConfig+0x168>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a1b      	ldr	r2, [pc, #108]	@ (80087e0 <TIM_Base_SetConfig+0x1c0>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d007      	beq.n	8008788 <TIM_Base_SetConfig+0x168>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a1c      	ldr	r2, [pc, #112]	@ (80087ec <TIM_Base_SetConfig+0x1cc>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d003      	beq.n	8008788 <TIM_Base_SetConfig+0x168>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a1b      	ldr	r2, [pc, #108]	@ (80087f0 <TIM_Base_SetConfig+0x1d0>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d103      	bne.n	8008790 <TIM_Base_SetConfig+0x170>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	691a      	ldr	r2, [r3, #16]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	f003 0301 	and.w	r3, r3, #1
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d105      	bne.n	80087ae <TIM_Base_SetConfig+0x18e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	691b      	ldr	r3, [r3, #16]
 80087a6:	f023 0201 	bic.w	r2, r3, #1
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	611a      	str	r2, [r3, #16]
  }
}
 80087ae:	bf00      	nop
 80087b0:	3714      	adds	r7, #20
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr
 80087ba:	bf00      	nop
 80087bc:	40012c00 	.word	0x40012c00
 80087c0:	50012c00 	.word	0x50012c00
 80087c4:	40000400 	.word	0x40000400
 80087c8:	50000400 	.word	0x50000400
 80087cc:	40000800 	.word	0x40000800
 80087d0:	50000800 	.word	0x50000800
 80087d4:	40000c00 	.word	0x40000c00
 80087d8:	50000c00 	.word	0x50000c00
 80087dc:	40013400 	.word	0x40013400
 80087e0:	50013400 	.word	0x50013400
 80087e4:	40001800 	.word	0x40001800
 80087e8:	50001800 	.word	0x50001800
 80087ec:	40014000 	.word	0x40014000
 80087f0:	50014000 	.word	0x50014000

080087f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b087      	sub	sp, #28
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6a1b      	ldr	r3, [r3, #32]
 8008802:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6a1b      	ldr	r3, [r3, #32]
 8008808:	f023 0201 	bic.w	r2, r3, #1
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	699b      	ldr	r3, [r3, #24]
 800881a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f023 0303 	bic.w	r3, r3, #3
 800882e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	4313      	orrs	r3, r2
 8008838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	f023 0302 	bic.w	r3, r3, #2
 8008840:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	697a      	ldr	r2, [r7, #20]
 8008848:	4313      	orrs	r3, r2
 800884a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4a30      	ldr	r2, [pc, #192]	@ (8008910 <TIM_OC1_SetConfig+0x11c>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d013      	beq.n	800887c <TIM_OC1_SetConfig+0x88>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a2f      	ldr	r2, [pc, #188]	@ (8008914 <TIM_OC1_SetConfig+0x120>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d00f      	beq.n	800887c <TIM_OC1_SetConfig+0x88>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a2e      	ldr	r2, [pc, #184]	@ (8008918 <TIM_OC1_SetConfig+0x124>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d00b      	beq.n	800887c <TIM_OC1_SetConfig+0x88>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a2d      	ldr	r2, [pc, #180]	@ (800891c <TIM_OC1_SetConfig+0x128>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d007      	beq.n	800887c <TIM_OC1_SetConfig+0x88>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a2c      	ldr	r2, [pc, #176]	@ (8008920 <TIM_OC1_SetConfig+0x12c>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d003      	beq.n	800887c <TIM_OC1_SetConfig+0x88>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a2b      	ldr	r2, [pc, #172]	@ (8008924 <TIM_OC1_SetConfig+0x130>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d10c      	bne.n	8008896 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	f023 0308 	bic.w	r3, r3, #8
 8008882:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	697a      	ldr	r2, [r7, #20]
 800888a:	4313      	orrs	r3, r2
 800888c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	f023 0304 	bic.w	r3, r3, #4
 8008894:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4a1d      	ldr	r2, [pc, #116]	@ (8008910 <TIM_OC1_SetConfig+0x11c>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d013      	beq.n	80088c6 <TIM_OC1_SetConfig+0xd2>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4a1c      	ldr	r2, [pc, #112]	@ (8008914 <TIM_OC1_SetConfig+0x120>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d00f      	beq.n	80088c6 <TIM_OC1_SetConfig+0xd2>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4a1b      	ldr	r2, [pc, #108]	@ (8008918 <TIM_OC1_SetConfig+0x124>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d00b      	beq.n	80088c6 <TIM_OC1_SetConfig+0xd2>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4a1a      	ldr	r2, [pc, #104]	@ (800891c <TIM_OC1_SetConfig+0x128>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d007      	beq.n	80088c6 <TIM_OC1_SetConfig+0xd2>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	4a19      	ldr	r2, [pc, #100]	@ (8008920 <TIM_OC1_SetConfig+0x12c>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d003      	beq.n	80088c6 <TIM_OC1_SetConfig+0xd2>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4a18      	ldr	r2, [pc, #96]	@ (8008924 <TIM_OC1_SetConfig+0x130>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d111      	bne.n	80088ea <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80088cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80088d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	695b      	ldr	r3, [r3, #20]
 80088da:	693a      	ldr	r2, [r7, #16]
 80088dc:	4313      	orrs	r3, r2
 80088de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	699b      	ldr	r3, [r3, #24]
 80088e4:	693a      	ldr	r2, [r7, #16]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	693a      	ldr	r2, [r7, #16]
 80088ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	68fa      	ldr	r2, [r7, #12]
 80088f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	685a      	ldr	r2, [r3, #4]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	697a      	ldr	r2, [r7, #20]
 8008902:	621a      	str	r2, [r3, #32]
}
 8008904:	bf00      	nop
 8008906:	371c      	adds	r7, #28
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr
 8008910:	40012c00 	.word	0x40012c00
 8008914:	50012c00 	.word	0x50012c00
 8008918:	40013400 	.word	0x40013400
 800891c:	50013400 	.word	0x50013400
 8008920:	40014000 	.word	0x40014000
 8008924:	50014000 	.word	0x50014000

08008928 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008928:	b480      	push	{r7}
 800892a:	b087      	sub	sp, #28
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a1b      	ldr	r3, [r3, #32]
 8008936:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6a1b      	ldr	r3, [r3, #32]
 800893c:	f023 0210 	bic.w	r2, r3, #16
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	699b      	ldr	r3, [r3, #24]
 800894e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008956:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800895a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	021b      	lsls	r3, r3, #8
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	4313      	orrs	r3, r2
 800896e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	f023 0320 	bic.w	r3, r3, #32
 8008976:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	011b      	lsls	r3, r3, #4
 800897e:	697a      	ldr	r2, [r7, #20]
 8008980:	4313      	orrs	r3, r2
 8008982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a2e      	ldr	r2, [pc, #184]	@ (8008a40 <TIM_OC2_SetConfig+0x118>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d00b      	beq.n	80089a4 <TIM_OC2_SetConfig+0x7c>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a2d      	ldr	r2, [pc, #180]	@ (8008a44 <TIM_OC2_SetConfig+0x11c>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d007      	beq.n	80089a4 <TIM_OC2_SetConfig+0x7c>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a2c      	ldr	r2, [pc, #176]	@ (8008a48 <TIM_OC2_SetConfig+0x120>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d003      	beq.n	80089a4 <TIM_OC2_SetConfig+0x7c>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a2b      	ldr	r2, [pc, #172]	@ (8008a4c <TIM_OC2_SetConfig+0x124>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d10d      	bne.n	80089c0 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	011b      	lsls	r3, r3, #4
 80089b2:	697a      	ldr	r2, [r7, #20]
 80089b4:	4313      	orrs	r3, r2
 80089b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	4a1f      	ldr	r2, [pc, #124]	@ (8008a40 <TIM_OC2_SetConfig+0x118>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d013      	beq.n	80089f0 <TIM_OC2_SetConfig+0xc8>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4a1e      	ldr	r2, [pc, #120]	@ (8008a44 <TIM_OC2_SetConfig+0x11c>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d00f      	beq.n	80089f0 <TIM_OC2_SetConfig+0xc8>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a1d      	ldr	r2, [pc, #116]	@ (8008a48 <TIM_OC2_SetConfig+0x120>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d00b      	beq.n	80089f0 <TIM_OC2_SetConfig+0xc8>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	4a1c      	ldr	r2, [pc, #112]	@ (8008a4c <TIM_OC2_SetConfig+0x124>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d007      	beq.n	80089f0 <TIM_OC2_SetConfig+0xc8>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	4a1b      	ldr	r2, [pc, #108]	@ (8008a50 <TIM_OC2_SetConfig+0x128>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d003      	beq.n	80089f0 <TIM_OC2_SetConfig+0xc8>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	4a1a      	ldr	r2, [pc, #104]	@ (8008a54 <TIM_OC2_SetConfig+0x12c>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d113      	bne.n	8008a18 <TIM_OC2_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80089f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80089fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	695b      	ldr	r3, [r3, #20]
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	693a      	ldr	r2, [r7, #16]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	699b      	ldr	r3, [r3, #24]
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	693a      	ldr	r2, [r7, #16]
 8008a14:	4313      	orrs	r3, r2
 8008a16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	693a      	ldr	r2, [r7, #16]
 8008a1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	68fa      	ldr	r2, [r7, #12]
 8008a22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	685a      	ldr	r2, [r3, #4]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	621a      	str	r2, [r3, #32]
}
 8008a32:	bf00      	nop
 8008a34:	371c      	adds	r7, #28
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	40012c00 	.word	0x40012c00
 8008a44:	50012c00 	.word	0x50012c00
 8008a48:	40013400 	.word	0x40013400
 8008a4c:	50013400 	.word	0x50013400
 8008a50:	40014000 	.word	0x40014000
 8008a54:	50014000 	.word	0x50014000

08008a58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b087      	sub	sp, #28
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a1b      	ldr	r3, [r3, #32]
 8008a66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6a1b      	ldr	r3, [r3, #32]
 8008a6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	69db      	ldr	r3, [r3, #28]
 8008a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f023 0303 	bic.w	r3, r3, #3
 8008a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008aa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	021b      	lsls	r3, r3, #8
 8008aac:	697a      	ldr	r2, [r7, #20]
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a2d      	ldr	r2, [pc, #180]	@ (8008b6c <TIM_OC3_SetConfig+0x114>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d00b      	beq.n	8008ad2 <TIM_OC3_SetConfig+0x7a>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4a2c      	ldr	r2, [pc, #176]	@ (8008b70 <TIM_OC3_SetConfig+0x118>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d007      	beq.n	8008ad2 <TIM_OC3_SetConfig+0x7a>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4a2b      	ldr	r2, [pc, #172]	@ (8008b74 <TIM_OC3_SetConfig+0x11c>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d003      	beq.n	8008ad2 <TIM_OC3_SetConfig+0x7a>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4a2a      	ldr	r2, [pc, #168]	@ (8008b78 <TIM_OC3_SetConfig+0x120>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d10d      	bne.n	8008aee <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	021b      	lsls	r3, r3, #8
 8008ae0:	697a      	ldr	r2, [r7, #20]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008aec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4a1e      	ldr	r2, [pc, #120]	@ (8008b6c <TIM_OC3_SetConfig+0x114>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d013      	beq.n	8008b1e <TIM_OC3_SetConfig+0xc6>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4a1d      	ldr	r2, [pc, #116]	@ (8008b70 <TIM_OC3_SetConfig+0x118>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d00f      	beq.n	8008b1e <TIM_OC3_SetConfig+0xc6>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4a1c      	ldr	r2, [pc, #112]	@ (8008b74 <TIM_OC3_SetConfig+0x11c>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d00b      	beq.n	8008b1e <TIM_OC3_SetConfig+0xc6>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4a1b      	ldr	r2, [pc, #108]	@ (8008b78 <TIM_OC3_SetConfig+0x120>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d007      	beq.n	8008b1e <TIM_OC3_SetConfig+0xc6>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	4a1a      	ldr	r2, [pc, #104]	@ (8008b7c <TIM_OC3_SetConfig+0x124>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d003      	beq.n	8008b1e <TIM_OC3_SetConfig+0xc6>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	4a19      	ldr	r2, [pc, #100]	@ (8008b80 <TIM_OC3_SetConfig+0x128>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d113      	bne.n	8008b46 <TIM_OC3_SetConfig+0xee>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	695b      	ldr	r3, [r3, #20]
 8008b32:	011b      	lsls	r3, r3, #4
 8008b34:	693a      	ldr	r2, [r7, #16]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	699b      	ldr	r3, [r3, #24]
 8008b3e:	011b      	lsls	r3, r3, #4
 8008b40:	693a      	ldr	r2, [r7, #16]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	693a      	ldr	r2, [r7, #16]
 8008b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	685a      	ldr	r2, [r3, #4]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	697a      	ldr	r2, [r7, #20]
 8008b5e:	621a      	str	r2, [r3, #32]
}
 8008b60:	bf00      	nop
 8008b62:	371c      	adds	r7, #28
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr
 8008b6c:	40012c00 	.word	0x40012c00
 8008b70:	50012c00 	.word	0x50012c00
 8008b74:	40013400 	.word	0x40013400
 8008b78:	50013400 	.word	0x50013400
 8008b7c:	40014000 	.word	0x40014000
 8008b80:	50014000 	.word	0x50014000

08008b84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b087      	sub	sp, #28
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a1b      	ldr	r3, [r3, #32]
 8008b92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a1b      	ldr	r3, [r3, #32]
 8008b98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	69db      	ldr	r3, [r3, #28]
 8008baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008bb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	021b      	lsls	r3, r3, #8
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008bd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	031b      	lsls	r3, r3, #12
 8008bda:	697a      	ldr	r2, [r7, #20]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a2e      	ldr	r2, [pc, #184]	@ (8008c9c <TIM_OC4_SetConfig+0x118>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d00b      	beq.n	8008c00 <TIM_OC4_SetConfig+0x7c>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a2d      	ldr	r2, [pc, #180]	@ (8008ca0 <TIM_OC4_SetConfig+0x11c>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d007      	beq.n	8008c00 <TIM_OC4_SetConfig+0x7c>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4a2c      	ldr	r2, [pc, #176]	@ (8008ca4 <TIM_OC4_SetConfig+0x120>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d003      	beq.n	8008c00 <TIM_OC4_SetConfig+0x7c>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	4a2b      	ldr	r2, [pc, #172]	@ (8008ca8 <TIM_OC4_SetConfig+0x124>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d10d      	bne.n	8008c1c <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008c06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	031b      	lsls	r3, r3, #12
 8008c0e:	697a      	ldr	r2, [r7, #20]
 8008c10:	4313      	orrs	r3, r2
 8008c12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4a1f      	ldr	r2, [pc, #124]	@ (8008c9c <TIM_OC4_SetConfig+0x118>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d013      	beq.n	8008c4c <TIM_OC4_SetConfig+0xc8>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	4a1e      	ldr	r2, [pc, #120]	@ (8008ca0 <TIM_OC4_SetConfig+0x11c>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d00f      	beq.n	8008c4c <TIM_OC4_SetConfig+0xc8>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	4a1d      	ldr	r2, [pc, #116]	@ (8008ca4 <TIM_OC4_SetConfig+0x120>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d00b      	beq.n	8008c4c <TIM_OC4_SetConfig+0xc8>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a1c      	ldr	r2, [pc, #112]	@ (8008ca8 <TIM_OC4_SetConfig+0x124>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d007      	beq.n	8008c4c <TIM_OC4_SetConfig+0xc8>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4a1b      	ldr	r2, [pc, #108]	@ (8008cac <TIM_OC4_SetConfig+0x128>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d003      	beq.n	8008c4c <TIM_OC4_SetConfig+0xc8>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4a1a      	ldr	r2, [pc, #104]	@ (8008cb0 <TIM_OC4_SetConfig+0x12c>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d113      	bne.n	8008c74 <TIM_OC4_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c52:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008c5a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	695b      	ldr	r3, [r3, #20]
 8008c60:	019b      	lsls	r3, r3, #6
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	699b      	ldr	r3, [r3, #24]
 8008c6c:	019b      	lsls	r3, r3, #6
 8008c6e:	693a      	ldr	r2, [r7, #16]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	693a      	ldr	r2, [r7, #16]
 8008c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	685a      	ldr	r2, [r3, #4]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	697a      	ldr	r2, [r7, #20]
 8008c8c:	621a      	str	r2, [r3, #32]
}
 8008c8e:	bf00      	nop
 8008c90:	371c      	adds	r7, #28
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	40012c00 	.word	0x40012c00
 8008ca0:	50012c00 	.word	0x50012c00
 8008ca4:	40013400 	.word	0x40013400
 8008ca8:	50013400 	.word	0x50013400
 8008cac:	40014000 	.word	0x40014000
 8008cb0:	50014000 	.word	0x50014000

08008cb4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b087      	sub	sp, #28
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a1b      	ldr	r3, [r3, #32]
 8008cc2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6a1b      	ldr	r3, [r3, #32]
 8008cc8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ce6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008cf8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	041b      	lsls	r3, r3, #16
 8008d00:	693a      	ldr	r2, [r7, #16]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a19      	ldr	r2, [pc, #100]	@ (8008d70 <TIM_OC5_SetConfig+0xbc>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d013      	beq.n	8008d36 <TIM_OC5_SetConfig+0x82>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4a18      	ldr	r2, [pc, #96]	@ (8008d74 <TIM_OC5_SetConfig+0xc0>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d00f      	beq.n	8008d36 <TIM_OC5_SetConfig+0x82>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4a17      	ldr	r2, [pc, #92]	@ (8008d78 <TIM_OC5_SetConfig+0xc4>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d00b      	beq.n	8008d36 <TIM_OC5_SetConfig+0x82>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a16      	ldr	r2, [pc, #88]	@ (8008d7c <TIM_OC5_SetConfig+0xc8>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d007      	beq.n	8008d36 <TIM_OC5_SetConfig+0x82>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a15      	ldr	r2, [pc, #84]	@ (8008d80 <TIM_OC5_SetConfig+0xcc>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d003      	beq.n	8008d36 <TIM_OC5_SetConfig+0x82>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a14      	ldr	r2, [pc, #80]	@ (8008d84 <TIM_OC5_SetConfig+0xd0>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d109      	bne.n	8008d4a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	695b      	ldr	r3, [r3, #20]
 8008d42:	021b      	lsls	r3, r3, #8
 8008d44:	697a      	ldr	r2, [r7, #20]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	697a      	ldr	r2, [r7, #20]
 8008d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	685a      	ldr	r2, [r3, #4]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	693a      	ldr	r2, [r7, #16]
 8008d62:	621a      	str	r2, [r3, #32]
}
 8008d64:	bf00      	nop
 8008d66:	371c      	adds	r7, #28
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr
 8008d70:	40012c00 	.word	0x40012c00
 8008d74:	50012c00 	.word	0x50012c00
 8008d78:	40013400 	.word	0x40013400
 8008d7c:	50013400 	.word	0x50013400
 8008d80:	40014000 	.word	0x40014000
 8008d84:	50014000 	.word	0x50014000

08008d88 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b087      	sub	sp, #28
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a1b      	ldr	r3, [r3, #32]
 8008d96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6a1b      	ldr	r3, [r3, #32]
 8008d9c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008db6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008dba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	021b      	lsls	r3, r3, #8
 8008dc2:	68fa      	ldr	r2, [r7, #12]
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008dce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	051b      	lsls	r3, r3, #20
 8008dd6:	693a      	ldr	r2, [r7, #16]
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4a1a      	ldr	r2, [pc, #104]	@ (8008e48 <TIM_OC6_SetConfig+0xc0>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d013      	beq.n	8008e0c <TIM_OC6_SetConfig+0x84>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a19      	ldr	r2, [pc, #100]	@ (8008e4c <TIM_OC6_SetConfig+0xc4>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d00f      	beq.n	8008e0c <TIM_OC6_SetConfig+0x84>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a18      	ldr	r2, [pc, #96]	@ (8008e50 <TIM_OC6_SetConfig+0xc8>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d00b      	beq.n	8008e0c <TIM_OC6_SetConfig+0x84>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a17      	ldr	r2, [pc, #92]	@ (8008e54 <TIM_OC6_SetConfig+0xcc>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d007      	beq.n	8008e0c <TIM_OC6_SetConfig+0x84>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a16      	ldr	r2, [pc, #88]	@ (8008e58 <TIM_OC6_SetConfig+0xd0>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d003      	beq.n	8008e0c <TIM_OC6_SetConfig+0x84>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4a15      	ldr	r2, [pc, #84]	@ (8008e5c <TIM_OC6_SetConfig+0xd4>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d109      	bne.n	8008e20 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008e12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	695b      	ldr	r3, [r3, #20]
 8008e18:	029b      	lsls	r3, r3, #10
 8008e1a:	697a      	ldr	r2, [r7, #20]
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	697a      	ldr	r2, [r7, #20]
 8008e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	685a      	ldr	r2, [r3, #4]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	693a      	ldr	r2, [r7, #16]
 8008e38:	621a      	str	r2, [r3, #32]
}
 8008e3a:	bf00      	nop
 8008e3c:	371c      	adds	r7, #28
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop
 8008e48:	40012c00 	.word	0x40012c00
 8008e4c:	50012c00 	.word	0x50012c00
 8008e50:	40013400 	.word	0x40013400
 8008e54:	50013400 	.word	0x50013400
 8008e58:	40014000 	.word	0x40014000
 8008e5c:	50014000 	.word	0x50014000

08008e60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b087      	sub	sp, #28
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	60b9      	str	r1, [r7, #8]
 8008e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6a1b      	ldr	r3, [r3, #32]
 8008e70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6a1b      	ldr	r3, [r3, #32]
 8008e76:	f023 0201 	bic.w	r2, r3, #1
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	699b      	ldr	r3, [r3, #24]
 8008e82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008e8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	011b      	lsls	r3, r3, #4
 8008e90:	693a      	ldr	r2, [r7, #16]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	f023 030a 	bic.w	r3, r3, #10
 8008e9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e9e:	697a      	ldr	r2, [r7, #20]
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	693a      	ldr	r2, [r7, #16]
 8008eaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	697a      	ldr	r2, [r7, #20]
 8008eb0:	621a      	str	r2, [r3, #32]
}
 8008eb2:	bf00      	nop
 8008eb4:	371c      	adds	r7, #28
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr

08008ebe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ebe:	b480      	push	{r7}
 8008ec0:	b087      	sub	sp, #28
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	60f8      	str	r0, [r7, #12]
 8008ec6:	60b9      	str	r1, [r7, #8]
 8008ec8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6a1b      	ldr	r3, [r3, #32]
 8008ece:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6a1b      	ldr	r3, [r3, #32]
 8008ed4:	f023 0210 	bic.w	r2, r3, #16
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	699b      	ldr	r3, [r3, #24]
 8008ee0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008ee8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	031b      	lsls	r3, r3, #12
 8008eee:	693a      	ldr	r2, [r7, #16]
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008efa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	011b      	lsls	r3, r3, #4
 8008f00:	697a      	ldr	r2, [r7, #20]
 8008f02:	4313      	orrs	r3, r2
 8008f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	693a      	ldr	r2, [r7, #16]
 8008f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	697a      	ldr	r2, [r7, #20]
 8008f10:	621a      	str	r2, [r3, #32]
}
 8008f12:	bf00      	nop
 8008f14:	371c      	adds	r7, #28
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr

08008f1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f1e:	b480      	push	{r7}
 8008f20:	b085      	sub	sp, #20
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
 8008f26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008f34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f3a:	683a      	ldr	r2, [r7, #0]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	f043 0307 	orr.w	r3, r3, #7
 8008f44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	68fa      	ldr	r2, [r7, #12]
 8008f4a:	609a      	str	r2, [r3, #8]
}
 8008f4c:	bf00      	nop
 8008f4e:	3714      	adds	r7, #20
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b087      	sub	sp, #28
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	607a      	str	r2, [r7, #4]
 8008f64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008f72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	021a      	lsls	r2, r3, #8
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	431a      	orrs	r2, r3
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	697a      	ldr	r2, [r7, #20]
 8008f82:	4313      	orrs	r3, r2
 8008f84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	697a      	ldr	r2, [r7, #20]
 8008f8a:	609a      	str	r2, [r3, #8]
}
 8008f8c:	bf00      	nop
 8008f8e:	371c      	adds	r7, #28
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b087      	sub	sp, #28
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	f003 031f 	and.w	r3, r3, #31
 8008faa:	2201      	movs	r2, #1
 8008fac:	fa02 f303 	lsl.w	r3, r2, r3
 8008fb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6a1a      	ldr	r2, [r3, #32]
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	43db      	mvns	r3, r3
 8008fba:	401a      	ands	r2, r3
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6a1a      	ldr	r2, [r3, #32]
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	f003 031f 	and.w	r3, r3, #31
 8008fca:	6879      	ldr	r1, [r7, #4]
 8008fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8008fd0:	431a      	orrs	r2, r3
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	621a      	str	r2, [r3, #32]
}
 8008fd6:	bf00      	nop
 8008fd8:	371c      	adds	r7, #28
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
	...

08008fe4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d101      	bne.n	8008ffc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ff8:	2302      	movs	r3, #2
 8008ffa:	e0a1      	b.n	8009140 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2202      	movs	r2, #2
 8009008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a4a      	ldr	r2, [pc, #296]	@ (800914c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d00e      	beq.n	8009044 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a49      	ldr	r2, [pc, #292]	@ (8009150 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d009      	beq.n	8009044 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a47      	ldr	r2, [pc, #284]	@ (8009154 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d004      	beq.n	8009044 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a46      	ldr	r2, [pc, #280]	@ (8009158 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d108      	bne.n	8009056 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800904a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	4313      	orrs	r3, r2
 8009054:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800905c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009060:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	4313      	orrs	r3, r2
 800906a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	68fa      	ldr	r2, [r7, #12]
 8009072:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a34      	ldr	r2, [pc, #208]	@ (800914c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d04a      	beq.n	8009114 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a33      	ldr	r2, [pc, #204]	@ (8009150 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d045      	beq.n	8009114 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009090:	d040      	beq.n	8009114 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800909a:	d03b      	beq.n	8009114 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a2e      	ldr	r2, [pc, #184]	@ (800915c <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d036      	beq.n	8009114 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a2d      	ldr	r2, [pc, #180]	@ (8009160 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d031      	beq.n	8009114 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a2b      	ldr	r2, [pc, #172]	@ (8009164 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d02c      	beq.n	8009114 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a2a      	ldr	r2, [pc, #168]	@ (8009168 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d027      	beq.n	8009114 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a28      	ldr	r2, [pc, #160]	@ (800916c <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d022      	beq.n	8009114 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a27      	ldr	r2, [pc, #156]	@ (8009170 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d01d      	beq.n	8009114 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a1d      	ldr	r2, [pc, #116]	@ (8009154 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d018      	beq.n	8009114 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a1c      	ldr	r2, [pc, #112]	@ (8009158 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d013      	beq.n	8009114 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a20      	ldr	r2, [pc, #128]	@ (8009174 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d00e      	beq.n	8009114 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a1f      	ldr	r2, [pc, #124]	@ (8009178 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d009      	beq.n	8009114 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a1d      	ldr	r2, [pc, #116]	@ (800917c <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d004      	beq.n	8009114 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a1c      	ldr	r2, [pc, #112]	@ (8009180 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d10c      	bne.n	800912e <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800911a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	68ba      	ldr	r2, [r7, #8]
 8009122:	4313      	orrs	r3, r2
 8009124:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	68ba      	ldr	r2, [r7, #8]
 800912c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2201      	movs	r2, #1
 8009132:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800913e:	2300      	movs	r3, #0
}
 8009140:	4618      	mov	r0, r3
 8009142:	3714      	adds	r7, #20
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr
 800914c:	40012c00 	.word	0x40012c00
 8009150:	50012c00 	.word	0x50012c00
 8009154:	40013400 	.word	0x40013400
 8009158:	50013400 	.word	0x50013400
 800915c:	40000400 	.word	0x40000400
 8009160:	50000400 	.word	0x50000400
 8009164:	40000800 	.word	0x40000800
 8009168:	50000800 	.word	0x50000800
 800916c:	40000c00 	.word	0x40000c00
 8009170:	50000c00 	.word	0x50000c00
 8009174:	40001800 	.word	0x40001800
 8009178:	50001800 	.word	0x50001800
 800917c:	40014000 	.word	0x40014000
 8009180:	50014000 	.word	0x50014000

08009184 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009184:	b480      	push	{r7}
 8009186:	b085      	sub	sp, #20
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800918e:	2300      	movs	r3, #0
 8009190:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009198:	2b01      	cmp	r3, #1
 800919a:	d101      	bne.n	80091a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800919c:	2302      	movs	r3, #2
 800919e:	e07d      	b.n	800929c <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	4313      	orrs	r3, r2
 80091c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4313      	orrs	r3, r2
 80091de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	691b      	ldr	r3, [r3, #16]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	695b      	ldr	r3, [r3, #20]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009206:	4313      	orrs	r3, r2
 8009208:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	699b      	ldr	r3, [r3, #24]
 8009214:	041b      	lsls	r3, r3, #16
 8009216:	4313      	orrs	r3, r2
 8009218:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	69db      	ldr	r3, [r3, #28]
 8009224:	4313      	orrs	r3, r2
 8009226:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a1e      	ldr	r2, [pc, #120]	@ (80092a8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d00e      	beq.n	8009250 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a1d      	ldr	r2, [pc, #116]	@ (80092ac <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d009      	beq.n	8009250 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a1b      	ldr	r2, [pc, #108]	@ (80092b0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d004      	beq.n	8009250 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a1a      	ldr	r2, [pc, #104]	@ (80092b4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d11c      	bne.n	800928a <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800925a:	051b      	lsls	r3, r3, #20
 800925c:	4313      	orrs	r3, r2
 800925e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	6a1b      	ldr	r3, [r3, #32]
 800926a:	4313      	orrs	r3, r2
 800926c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009278:	4313      	orrs	r3, r2
 800927a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009286:	4313      	orrs	r3, r2
 8009288:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	68fa      	ldr	r2, [r7, #12]
 8009290:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800929a:	2300      	movs	r3, #0
}
 800929c:	4618      	mov	r0, r3
 800929e:	3714      	adds	r7, #20
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr
 80092a8:	40012c00 	.word	0x40012c00
 80092ac:	50012c00 	.word	0x50012c00
 80092b0:	40013400 	.word	0x40013400
 80092b4:	50013400 	.word	0x50013400

080092b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80092c0:	bf00      	nop
 80092c2:	370c      	adds	r7, #12
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80092d4:	bf00      	nop
 80092d6:	370c      	adds	r7, #12
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr

080092e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b083      	sub	sp, #12
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80092e8:	bf00      	nop
 80092ea:	370c      	adds	r7, #12
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr

080092f4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80092fc:	bf00      	nop
 80092fe:	370c      	adds	r7, #12
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr

08009308 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009310:	bf00      	nop
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009324:	bf00      	nop
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009338:	bf00      	nop
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d101      	bne.n	8009356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	e042      	b.n	80093dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800935c:	2b00      	cmp	r3, #0
 800935e:	d106      	bne.n	800936e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f7f8 f967 	bl	800163c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2224      	movs	r2, #36	@ 0x24
 8009372:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f022 0201 	bic.w	r2, r2, #1
 8009384:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800938a:	2b00      	cmp	r3, #0
 800938c:	d002      	beq.n	8009394 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 fb4c 	bl	8009a2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 f99b 	bl	80096d0 <UART_SetConfig>
 800939a:	4603      	mov	r3, r0
 800939c:	2b01      	cmp	r3, #1
 800939e:	d101      	bne.n	80093a4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80093a0:	2301      	movs	r3, #1
 80093a2:	e01b      	b.n	80093dc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	685a      	ldr	r2, [r3, #4]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80093b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	689a      	ldr	r2, [r3, #8]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80093c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f042 0201 	orr.w	r2, r2, #1
 80093d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 fbcb 	bl	8009b70 <UART_CheckIdleState>
 80093da:	4603      	mov	r3, r0
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3708      	adds	r7, #8
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b08a      	sub	sp, #40	@ 0x28
 80093e8:	af02      	add	r7, sp, #8
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	603b      	str	r3, [r7, #0]
 80093f0:	4613      	mov	r3, r2
 80093f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093fa:	2b20      	cmp	r3, #32
 80093fc:	f040 808b 	bne.w	8009516 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d002      	beq.n	800940c <HAL_UART_Transmit+0x28>
 8009406:	88fb      	ldrh	r3, [r7, #6]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d101      	bne.n	8009410 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800940c:	2301      	movs	r3, #1
 800940e:	e083      	b.n	8009518 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800941a:	2b80      	cmp	r3, #128	@ 0x80
 800941c:	d107      	bne.n	800942e <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	689a      	ldr	r2, [r3, #8]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800942c:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2200      	movs	r2, #0
 8009432:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2221      	movs	r2, #33	@ 0x21
 800943a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800943e:	f7f8 fc23 	bl	8001c88 <HAL_GetTick>
 8009442:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	88fa      	ldrh	r2, [r7, #6]
 8009448:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	88fa      	ldrh	r2, [r7, #6]
 8009450:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800945c:	d108      	bne.n	8009470 <HAL_UART_Transmit+0x8c>
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d104      	bne.n	8009470 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8009466:	2300      	movs	r3, #0
 8009468:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	61bb      	str	r3, [r7, #24]
 800946e:	e003      	b.n	8009478 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009474:	2300      	movs	r3, #0
 8009476:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009478:	e030      	b.n	80094dc <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	9300      	str	r3, [sp, #0]
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	2200      	movs	r2, #0
 8009482:	2180      	movs	r1, #128	@ 0x80
 8009484:	68f8      	ldr	r0, [r7, #12]
 8009486:	f000 fc1d 	bl	8009cc4 <UART_WaitOnFlagUntilTimeout>
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d005      	beq.n	800949c <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2220      	movs	r2, #32
 8009494:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009498:	2303      	movs	r3, #3
 800949a:	e03d      	b.n	8009518 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d10b      	bne.n	80094ba <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80094a2:	69bb      	ldr	r3, [r7, #24]
 80094a4:	881b      	ldrh	r3, [r3, #0]
 80094a6:	461a      	mov	r2, r3
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80094b0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80094b2:	69bb      	ldr	r3, [r7, #24]
 80094b4:	3302      	adds	r3, #2
 80094b6:	61bb      	str	r3, [r7, #24]
 80094b8:	e007      	b.n	80094ca <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80094ba:	69fb      	ldr	r3, [r7, #28]
 80094bc:	781a      	ldrb	r2, [r3, #0]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	3301      	adds	r3, #1
 80094c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	3b01      	subs	r3, #1
 80094d4:	b29a      	uxth	r2, r3
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d1c8      	bne.n	800947a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	9300      	str	r3, [sp, #0]
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	2200      	movs	r2, #0
 80094f0:	2140      	movs	r1, #64	@ 0x40
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	f000 fbe6 	bl	8009cc4 <UART_WaitOnFlagUntilTimeout>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d005      	beq.n	800950a <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2220      	movs	r2, #32
 8009502:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009506:	2303      	movs	r3, #3
 8009508:	e006      	b.n	8009518 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2220      	movs	r2, #32
 800950e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009512:	2300      	movs	r3, #0
 8009514:	e000      	b.n	8009518 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8009516:	2302      	movs	r3, #2
  }
}
 8009518:	4618      	mov	r0, r3
 800951a:	3720      	adds	r7, #32
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b08a      	sub	sp, #40	@ 0x28
 8009524:	af02      	add	r7, sp, #8
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	60b9      	str	r1, [r7, #8]
 800952a:	603b      	str	r3, [r7, #0]
 800952c:	4613      	mov	r3, r2
 800952e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009536:	2b20      	cmp	r3, #32
 8009538:	f040 80c4 	bne.w	80096c4 <HAL_UART_Receive+0x1a4>
  {
    if ((pData == NULL) || (Size == 0U))
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d002      	beq.n	8009548 <HAL_UART_Receive+0x28>
 8009542:	88fb      	ldrh	r3, [r7, #6]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d101      	bne.n	800954c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8009548:	2301      	movs	r3, #1
 800954a:	e0bc      	b.n	80096c6 <HAL_UART_Receive+0x1a6>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009556:	2b40      	cmp	r3, #64	@ 0x40
 8009558:	d107      	bne.n	800956a <HAL_UART_Receive+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	689a      	ldr	r2, [r3, #8]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009568:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2200      	movs	r2, #0
 800956e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2222      	movs	r2, #34	@ 0x22
 8009576:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2200      	movs	r2, #0
 800957e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009580:	f7f8 fb82 	bl	8001c88 <HAL_GetTick>
 8009584:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	88fa      	ldrh	r2, [r7, #6]
 800958a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	88fa      	ldrh	r2, [r7, #6]
 8009592:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800959e:	d10e      	bne.n	80095be <HAL_UART_Receive+0x9e>
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	691b      	ldr	r3, [r3, #16]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d105      	bne.n	80095b4 <HAL_UART_Receive+0x94>
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80095ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80095b2:	e02d      	b.n	8009610 <HAL_UART_Receive+0xf0>
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	22ff      	movs	r2, #255	@ 0xff
 80095b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80095bc:	e028      	b.n	8009610 <HAL_UART_Receive+0xf0>
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d10d      	bne.n	80095e2 <HAL_UART_Receive+0xc2>
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d104      	bne.n	80095d8 <HAL_UART_Receive+0xb8>
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	22ff      	movs	r2, #255	@ 0xff
 80095d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80095d6:	e01b      	b.n	8009610 <HAL_UART_Receive+0xf0>
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	227f      	movs	r2, #127	@ 0x7f
 80095dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80095e0:	e016      	b.n	8009610 <HAL_UART_Receive+0xf0>
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80095ea:	d10d      	bne.n	8009608 <HAL_UART_Receive+0xe8>
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	691b      	ldr	r3, [r3, #16]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d104      	bne.n	80095fe <HAL_UART_Receive+0xde>
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	227f      	movs	r2, #127	@ 0x7f
 80095f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80095fc:	e008      	b.n	8009610 <HAL_UART_Receive+0xf0>
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	223f      	movs	r2, #63	@ 0x3f
 8009602:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009606:	e003      	b.n	8009610 <HAL_UART_Receive+0xf0>
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2200      	movs	r2, #0
 800960c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009616:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009620:	d108      	bne.n	8009634 <HAL_UART_Receive+0x114>
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d104      	bne.n	8009634 <HAL_UART_Receive+0x114>
    {
      pdata8bits  = NULL;
 800962a:	2300      	movs	r3, #0
 800962c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	61bb      	str	r3, [r7, #24]
 8009632:	e003      	b.n	800963c <HAL_UART_Receive+0x11c>
    }
    else
    {
      pdata8bits  = pData;
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009638:	2300      	movs	r3, #0
 800963a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800963c:	e036      	b.n	80096ac <HAL_UART_Receive+0x18c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	9300      	str	r3, [sp, #0]
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	2200      	movs	r2, #0
 8009646:	2120      	movs	r1, #32
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f000 fb3b 	bl	8009cc4 <UART_WaitOnFlagUntilTimeout>
 800964e:	4603      	mov	r3, r0
 8009650:	2b00      	cmp	r3, #0
 8009652:	d005      	beq.n	8009660 <HAL_UART_Receive+0x140>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2220      	movs	r2, #32
 8009658:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800965c:	2303      	movs	r3, #3
 800965e:	e032      	b.n	80096c6 <HAL_UART_Receive+0x1a6>
      }
      if (pdata8bits == NULL)
 8009660:	69fb      	ldr	r3, [r7, #28]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d10c      	bne.n	8009680 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800966c:	b29a      	uxth	r2, r3
 800966e:	8a7b      	ldrh	r3, [r7, #18]
 8009670:	4013      	ands	r3, r2
 8009672:	b29a      	uxth	r2, r3
 8009674:	69bb      	ldr	r3, [r7, #24]
 8009676:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009678:	69bb      	ldr	r3, [r7, #24]
 800967a:	3302      	adds	r3, #2
 800967c:	61bb      	str	r3, [r7, #24]
 800967e:	e00c      	b.n	800969a <HAL_UART_Receive+0x17a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009686:	b2da      	uxtb	r2, r3
 8009688:	8a7b      	ldrh	r3, [r7, #18]
 800968a:	b2db      	uxtb	r3, r3
 800968c:	4013      	ands	r3, r2
 800968e:	b2da      	uxtb	r2, r3
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009694:	69fb      	ldr	r3, [r7, #28]
 8009696:	3301      	adds	r3, #1
 8009698:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	3b01      	subs	r3, #1
 80096a4:	b29a      	uxth	r2, r3
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d1c2      	bne.n	800963e <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2220      	movs	r2, #32
 80096bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80096c0:	2300      	movs	r3, #0
 80096c2:	e000      	b.n	80096c6 <HAL_UART_Receive+0x1a6>
  }
  else
  {
    return HAL_BUSY;
 80096c4:	2302      	movs	r3, #2
  }
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3720      	adds	r7, #32
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
	...

080096d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80096d4:	b094      	sub	sp, #80	@ 0x50
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80096da:	2300      	movs	r3, #0
 80096dc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80096e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	4b83      	ldr	r3, [pc, #524]	@ (80098f4 <UART_SetConfig+0x224>)
 80096e6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80096e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096ea:	689a      	ldr	r2, [r3, #8]
 80096ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096ee:	691b      	ldr	r3, [r3, #16]
 80096f0:	431a      	orrs	r2, r3
 80096f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096f4:	695b      	ldr	r3, [r3, #20]
 80096f6:	431a      	orrs	r2, r3
 80096f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096fa:	69db      	ldr	r3, [r3, #28]
 80096fc:	4313      	orrs	r3, r2
 80096fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	497c      	ldr	r1, [pc, #496]	@ (80098f8 <UART_SetConfig+0x228>)
 8009708:	4019      	ands	r1, r3
 800970a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009710:	430b      	orrs	r3, r1
 8009712:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800971e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009720:	68d9      	ldr	r1, [r3, #12]
 8009722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	ea40 0301 	orr.w	r3, r0, r1
 800972a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800972c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800972e:	699b      	ldr	r3, [r3, #24]
 8009730:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	4b6f      	ldr	r3, [pc, #444]	@ (80098f4 <UART_SetConfig+0x224>)
 8009738:	429a      	cmp	r2, r3
 800973a:	d009      	beq.n	8009750 <UART_SetConfig+0x80>
 800973c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	4b6e      	ldr	r3, [pc, #440]	@ (80098fc <UART_SetConfig+0x22c>)
 8009742:	429a      	cmp	r2, r3
 8009744:	d004      	beq.n	8009750 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009748:	6a1a      	ldr	r2, [r3, #32]
 800974a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800974c:	4313      	orrs	r3, r2
 800974e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800975a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800975e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009764:	430b      	orrs	r3, r1
 8009766:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800976e:	f023 000f 	bic.w	r0, r3, #15
 8009772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009774:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	ea40 0301 	orr.w	r3, r0, r1
 800977e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	4b5e      	ldr	r3, [pc, #376]	@ (8009900 <UART_SetConfig+0x230>)
 8009786:	429a      	cmp	r2, r3
 8009788:	d102      	bne.n	8009790 <UART_SetConfig+0xc0>
 800978a:	2301      	movs	r3, #1
 800978c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800978e:	e032      	b.n	80097f6 <UART_SetConfig+0x126>
 8009790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	4b5b      	ldr	r3, [pc, #364]	@ (8009904 <UART_SetConfig+0x234>)
 8009796:	429a      	cmp	r2, r3
 8009798:	d102      	bne.n	80097a0 <UART_SetConfig+0xd0>
 800979a:	2302      	movs	r3, #2
 800979c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800979e:	e02a      	b.n	80097f6 <UART_SetConfig+0x126>
 80097a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	4b58      	ldr	r3, [pc, #352]	@ (8009908 <UART_SetConfig+0x238>)
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d102      	bne.n	80097b0 <UART_SetConfig+0xe0>
 80097aa:	2304      	movs	r3, #4
 80097ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097ae:	e022      	b.n	80097f6 <UART_SetConfig+0x126>
 80097b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	4b55      	ldr	r3, [pc, #340]	@ (800990c <UART_SetConfig+0x23c>)
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d102      	bne.n	80097c0 <UART_SetConfig+0xf0>
 80097ba:	2308      	movs	r3, #8
 80097bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097be:	e01a      	b.n	80097f6 <UART_SetConfig+0x126>
 80097c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	4b52      	ldr	r3, [pc, #328]	@ (8009910 <UART_SetConfig+0x240>)
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d102      	bne.n	80097d0 <UART_SetConfig+0x100>
 80097ca:	2310      	movs	r3, #16
 80097cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097ce:	e012      	b.n	80097f6 <UART_SetConfig+0x126>
 80097d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	4b4f      	ldr	r3, [pc, #316]	@ (8009914 <UART_SetConfig+0x244>)
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d102      	bne.n	80097e0 <UART_SetConfig+0x110>
 80097da:	2320      	movs	r3, #32
 80097dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097de:	e00a      	b.n	80097f6 <UART_SetConfig+0x126>
 80097e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	4b43      	ldr	r3, [pc, #268]	@ (80098f4 <UART_SetConfig+0x224>)
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d103      	bne.n	80097f2 <UART_SetConfig+0x122>
 80097ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80097ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097f0:	e001      	b.n	80097f6 <UART_SetConfig+0x126>
 80097f2:	2300      	movs	r3, #0
 80097f4:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80097f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	4b3e      	ldr	r3, [pc, #248]	@ (80098f4 <UART_SetConfig+0x224>)
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d005      	beq.n	800980c <UART_SetConfig+0x13c>
 8009800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	4b3d      	ldr	r3, [pc, #244]	@ (80098fc <UART_SetConfig+0x22c>)
 8009806:	429a      	cmp	r2, r3
 8009808:	f040 8088 	bne.w	800991c <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800980c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800980e:	2200      	movs	r2, #0
 8009810:	623b      	str	r3, [r7, #32]
 8009812:	627a      	str	r2, [r7, #36]	@ 0x24
 8009814:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009818:	f7fc fb52 	bl	8005ec0 <HAL_RCCEx_GetPeriphCLKFreq>
 800981c:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800981e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009820:	2b00      	cmp	r3, #0
 8009822:	f000 80eb 	beq.w	80099fc <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800982a:	4a3b      	ldr	r2, [pc, #236]	@ (8009918 <UART_SetConfig+0x248>)
 800982c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009830:	461a      	mov	r2, r3
 8009832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009834:	fbb3 f3f2 	udiv	r3, r3, r2
 8009838:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800983a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800983c:	685a      	ldr	r2, [r3, #4]
 800983e:	4613      	mov	r3, r2
 8009840:	005b      	lsls	r3, r3, #1
 8009842:	4413      	add	r3, r2
 8009844:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009846:	429a      	cmp	r2, r3
 8009848:	d305      	bcc.n	8009856 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800984a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009850:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009852:	429a      	cmp	r2, r3
 8009854:	d903      	bls.n	800985e <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800985c:	e048      	b.n	80098f0 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800985e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009860:	2200      	movs	r2, #0
 8009862:	61bb      	str	r3, [r7, #24]
 8009864:	61fa      	str	r2, [r7, #28]
 8009866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800986a:	4a2b      	ldr	r2, [pc, #172]	@ (8009918 <UART_SetConfig+0x248>)
 800986c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009870:	b29b      	uxth	r3, r3
 8009872:	2200      	movs	r2, #0
 8009874:	613b      	str	r3, [r7, #16]
 8009876:	617a      	str	r2, [r7, #20]
 8009878:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800987c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009880:	f7f6 fd08 	bl	8000294 <__aeabi_uldivmod>
 8009884:	4602      	mov	r2, r0
 8009886:	460b      	mov	r3, r1
 8009888:	4610      	mov	r0, r2
 800988a:	4619      	mov	r1, r3
 800988c:	f04f 0200 	mov.w	r2, #0
 8009890:	f04f 0300 	mov.w	r3, #0
 8009894:	020b      	lsls	r3, r1, #8
 8009896:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800989a:	0202      	lsls	r2, r0, #8
 800989c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800989e:	6849      	ldr	r1, [r1, #4]
 80098a0:	0849      	lsrs	r1, r1, #1
 80098a2:	2000      	movs	r0, #0
 80098a4:	460c      	mov	r4, r1
 80098a6:	4605      	mov	r5, r0
 80098a8:	eb12 0804 	adds.w	r8, r2, r4
 80098ac:	eb43 0905 	adc.w	r9, r3, r5
 80098b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	2200      	movs	r2, #0
 80098b6:	60bb      	str	r3, [r7, #8]
 80098b8:	60fa      	str	r2, [r7, #12]
 80098ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80098be:	4640      	mov	r0, r8
 80098c0:	4649      	mov	r1, r9
 80098c2:	f7f6 fce7 	bl	8000294 <__aeabi_uldivmod>
 80098c6:	4602      	mov	r2, r0
 80098c8:	460b      	mov	r3, r1
 80098ca:	4613      	mov	r3, r2
 80098cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80098ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80098d4:	d308      	bcc.n	80098e8 <UART_SetConfig+0x218>
 80098d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098dc:	d204      	bcs.n	80098e8 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 80098de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80098e4:	60da      	str	r2, [r3, #12]
 80098e6:	e003      	b.n	80098f0 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 80098e8:	2301      	movs	r3, #1
 80098ea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80098ee:	e085      	b.n	80099fc <UART_SetConfig+0x32c>
 80098f0:	e084      	b.n	80099fc <UART_SetConfig+0x32c>
 80098f2:	bf00      	nop
 80098f4:	44002400 	.word	0x44002400
 80098f8:	cfff69f3 	.word	0xcfff69f3
 80098fc:	54002400 	.word	0x54002400
 8009900:	40013800 	.word	0x40013800
 8009904:	40004400 	.word	0x40004400
 8009908:	40004800 	.word	0x40004800
 800990c:	40004c00 	.word	0x40004c00
 8009910:	40005000 	.word	0x40005000
 8009914:	40006400 	.word	0x40006400
 8009918:	0800b38c 	.word	0x0800b38c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800991c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800991e:	69db      	ldr	r3, [r3, #28]
 8009920:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009924:	d13c      	bne.n	80099a0 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009926:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009928:	2200      	movs	r2, #0
 800992a:	603b      	str	r3, [r7, #0]
 800992c:	607a      	str	r2, [r7, #4]
 800992e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009932:	f7fc fac5 	bl	8005ec0 <HAL_RCCEx_GetPeriphCLKFreq>
 8009936:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009938:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800993a:	2b00      	cmp	r3, #0
 800993c:	d05e      	beq.n	80099fc <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800993e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009942:	4a39      	ldr	r2, [pc, #228]	@ (8009a28 <UART_SetConfig+0x358>)
 8009944:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009948:	461a      	mov	r2, r3
 800994a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800994c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009950:	005a      	lsls	r2, r3, #1
 8009952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	085b      	lsrs	r3, r3, #1
 8009958:	441a      	add	r2, r3
 800995a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009962:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009966:	2b0f      	cmp	r3, #15
 8009968:	d916      	bls.n	8009998 <UART_SetConfig+0x2c8>
 800996a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800996c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009970:	d212      	bcs.n	8009998 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009974:	b29b      	uxth	r3, r3
 8009976:	f023 030f 	bic.w	r3, r3, #15
 800997a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800997c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800997e:	085b      	lsrs	r3, r3, #1
 8009980:	b29b      	uxth	r3, r3
 8009982:	f003 0307 	and.w	r3, r3, #7
 8009986:	b29a      	uxth	r2, r3
 8009988:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800998a:	4313      	orrs	r3, r2
 800998c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800998e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009994:	60da      	str	r2, [r3, #12]
 8009996:	e031      	b.n	80099fc <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8009998:	2301      	movs	r3, #1
 800999a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800999e:	e02d      	b.n	80099fc <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80099a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099a2:	2200      	movs	r2, #0
 80099a4:	469a      	mov	sl, r3
 80099a6:	4693      	mov	fp, r2
 80099a8:	4650      	mov	r0, sl
 80099aa:	4659      	mov	r1, fp
 80099ac:	f7fc fa88 	bl	8005ec0 <HAL_RCCEx_GetPeriphCLKFreq>
 80099b0:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80099b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d021      	beq.n	80099fc <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099bc:	4a1a      	ldr	r2, [pc, #104]	@ (8009a28 <UART_SetConfig+0x358>)
 80099be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099c2:	461a      	mov	r2, r3
 80099c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80099ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	085b      	lsrs	r3, r3, #1
 80099d0:	441a      	add	r2, r3
 80099d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80099da:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099de:	2b0f      	cmp	r3, #15
 80099e0:	d909      	bls.n	80099f6 <UART_SetConfig+0x326>
 80099e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099e8:	d205      	bcs.n	80099f6 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80099ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099ec:	b29a      	uxth	r2, r3
 80099ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	60da      	str	r2, [r3, #12]
 80099f4:	e002      	b.n	80099fc <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80099f6:	2301      	movs	r3, #1
 80099f8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80099fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099fe:	2201      	movs	r2, #1
 8009a00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a06:	2201      	movs	r2, #1
 8009a08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a0e:	2200      	movs	r2, #0
 8009a10:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a14:	2200      	movs	r2, #0
 8009a16:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009a18:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3750      	adds	r7, #80	@ 0x50
 8009a20:	46bd      	mov	sp, r7
 8009a22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a26:	bf00      	nop
 8009a28:	0800b38c 	.word	0x0800b38c

08009a2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a38:	f003 0308 	and.w	r3, r3, #8
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d00a      	beq.n	8009a56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	430a      	orrs	r2, r1
 8009a54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a5a:	f003 0301 	and.w	r3, r3, #1
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d00a      	beq.n	8009a78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	430a      	orrs	r2, r1
 8009a76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a7c:	f003 0302 	and.w	r3, r3, #2
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d00a      	beq.n	8009a9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	430a      	orrs	r2, r1
 8009a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a9e:	f003 0304 	and.w	r3, r3, #4
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d00a      	beq.n	8009abc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	430a      	orrs	r2, r1
 8009aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ac0:	f003 0310 	and.w	r3, r3, #16
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d00a      	beq.n	8009ade <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	430a      	orrs	r2, r1
 8009adc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ae2:	f003 0320 	and.w	r3, r3, #32
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d00a      	beq.n	8009b00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	430a      	orrs	r2, r1
 8009afe:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d01a      	beq.n	8009b42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	430a      	orrs	r2, r1
 8009b20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b2a:	d10a      	bne.n	8009b42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	430a      	orrs	r2, r1
 8009b40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00a      	beq.n	8009b64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	430a      	orrs	r2, r1
 8009b62:	605a      	str	r2, [r3, #4]
  }
}
 8009b64:	bf00      	nop
 8009b66:	370c      	adds	r7, #12
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr

08009b70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b098      	sub	sp, #96	@ 0x60
 8009b74:	af02      	add	r7, sp, #8
 8009b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b80:	f7f8 f882 	bl	8001c88 <HAL_GetTick>
 8009b84:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f003 0308 	and.w	r3, r3, #8
 8009b90:	2b08      	cmp	r3, #8
 8009b92:	d12f      	bne.n	8009bf4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009b98:	9300      	str	r3, [sp, #0]
 8009b9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 f88e 	bl	8009cc4 <UART_WaitOnFlagUntilTimeout>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d022      	beq.n	8009bf4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bb6:	e853 3f00 	ldrex	r3, [r3]
 8009bba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009bc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	461a      	mov	r2, r3
 8009bca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8009bce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009bd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009bd4:	e841 2300 	strex	r3, r2, [r1]
 8009bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009bda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d1e6      	bne.n	8009bae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2220      	movs	r2, #32
 8009be4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009bf0:	2303      	movs	r3, #3
 8009bf2:	e063      	b.n	8009cbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f003 0304 	and.w	r3, r3, #4
 8009bfe:	2b04      	cmp	r3, #4
 8009c00:	d149      	bne.n	8009c96 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c02:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009c06:	9300      	str	r3, [sp, #0]
 8009c08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 f857 	bl	8009cc4 <UART_WaitOnFlagUntilTimeout>
 8009c16:	4603      	mov	r3, r0
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d03c      	beq.n	8009c96 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c24:	e853 3f00 	ldrex	r3, [r3]
 8009c28:	623b      	str	r3, [r7, #32]
   return(result);
 8009c2a:	6a3b      	ldr	r3, [r7, #32]
 8009c2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	461a      	mov	r2, r3
 8009c38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c42:	e841 2300 	strex	r3, r2, [r1]
 8009c46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d1e6      	bne.n	8009c1c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	3308      	adds	r3, #8
 8009c54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	e853 3f00 	ldrex	r3, [r3]
 8009c5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f023 0301 	bic.w	r3, r3, #1
 8009c64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	3308      	adds	r3, #8
 8009c6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c6e:	61fa      	str	r2, [r7, #28]
 8009c70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c72:	69b9      	ldr	r1, [r7, #24]
 8009c74:	69fa      	ldr	r2, [r7, #28]
 8009c76:	e841 2300 	strex	r3, r2, [r1]
 8009c7a:	617b      	str	r3, [r7, #20]
   return(result);
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d1e5      	bne.n	8009c4e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2220      	movs	r2, #32
 8009c86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c92:	2303      	movs	r3, #3
 8009c94:	e012      	b.n	8009cbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2220      	movs	r2, #32
 8009c9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2220      	movs	r2, #32
 8009ca2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009cba:	2300      	movs	r3, #0
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3758      	adds	r7, #88	@ 0x58
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	603b      	str	r3, [r7, #0]
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cd4:	e04f      	b.n	8009d76 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cdc:	d04b      	beq.n	8009d76 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cde:	f7f7 ffd3 	bl	8001c88 <HAL_GetTick>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	1ad3      	subs	r3, r2, r3
 8009ce8:	69ba      	ldr	r2, [r7, #24]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d302      	bcc.n	8009cf4 <UART_WaitOnFlagUntilTimeout+0x30>
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d101      	bne.n	8009cf8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009cf4:	2303      	movs	r3, #3
 8009cf6:	e04e      	b.n	8009d96 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f003 0304 	and.w	r3, r3, #4
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d037      	beq.n	8009d76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	2b80      	cmp	r3, #128	@ 0x80
 8009d0a:	d034      	beq.n	8009d76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	2b40      	cmp	r3, #64	@ 0x40
 8009d10:	d031      	beq.n	8009d76 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	69db      	ldr	r3, [r3, #28]
 8009d18:	f003 0308 	and.w	r3, r3, #8
 8009d1c:	2b08      	cmp	r3, #8
 8009d1e:	d110      	bne.n	8009d42 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2208      	movs	r2, #8
 8009d26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d28:	68f8      	ldr	r0, [r7, #12]
 8009d2a:	f000 f838 	bl	8009d9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2208      	movs	r2, #8
 8009d32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	e029      	b.n	8009d96 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	69db      	ldr	r3, [r3, #28]
 8009d48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d50:	d111      	bne.n	8009d76 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009d5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d5c:	68f8      	ldr	r0, [r7, #12]
 8009d5e:	f000 f81e 	bl	8009d9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2220      	movs	r2, #32
 8009d66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009d72:	2303      	movs	r3, #3
 8009d74:	e00f      	b.n	8009d96 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	69da      	ldr	r2, [r3, #28]
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	4013      	ands	r3, r2
 8009d80:	68ba      	ldr	r2, [r7, #8]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	bf0c      	ite	eq
 8009d86:	2301      	moveq	r3, #1
 8009d88:	2300      	movne	r3, #0
 8009d8a:	b2db      	uxtb	r3, r3
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	79fb      	ldrb	r3, [r7, #7]
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d0a0      	beq.n	8009cd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d9e:	b480      	push	{r7}
 8009da0:	b095      	sub	sp, #84	@ 0x54
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dae:	e853 3f00 	ldrex	r3, [r3]
 8009db2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009dba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009dc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8009dc6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009dca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009dcc:	e841 2300 	strex	r3, r2, [r1]
 8009dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d1e6      	bne.n	8009da6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	3308      	adds	r3, #8
 8009dde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de0:	6a3b      	ldr	r3, [r7, #32]
 8009de2:	e853 3f00 	ldrex	r3, [r3]
 8009de6:	61fb      	str	r3, [r7, #28]
   return(result);
 8009de8:	69fb      	ldr	r3, [r7, #28]
 8009dea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009dee:	f023 0301 	bic.w	r3, r3, #1
 8009df2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	3308      	adds	r3, #8
 8009dfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009dfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e04:	e841 2300 	strex	r3, r2, [r1]
 8009e08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d1e3      	bne.n	8009dd8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d118      	bne.n	8009e4a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	e853 3f00 	ldrex	r3, [r3]
 8009e24:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	f023 0310 	bic.w	r3, r3, #16
 8009e2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	461a      	mov	r2, r3
 8009e34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e36:	61bb      	str	r3, [r7, #24]
 8009e38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3a:	6979      	ldr	r1, [r7, #20]
 8009e3c:	69ba      	ldr	r2, [r7, #24]
 8009e3e:	e841 2300 	strex	r3, r2, [r1]
 8009e42:	613b      	str	r3, [r7, #16]
   return(result);
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d1e6      	bne.n	8009e18 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2220      	movs	r2, #32
 8009e4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2200      	movs	r2, #0
 8009e56:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009e5e:	bf00      	nop
 8009e60:	3754      	adds	r7, #84	@ 0x54
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr

08009e6a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009e6a:	b480      	push	{r7}
 8009e6c:	b085      	sub	sp, #20
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d101      	bne.n	8009e80 <HAL_UARTEx_DisableFifoMode+0x16>
 8009e7c:	2302      	movs	r3, #2
 8009e7e:	e027      	b.n	8009ed0 <HAL_UARTEx_DisableFifoMode+0x66>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2224      	movs	r2, #36	@ 0x24
 8009e8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f022 0201 	bic.w	r2, r2, #1
 8009ea6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009eae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	68fa      	ldr	r2, [r7, #12]
 8009ebc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2220      	movs	r2, #32
 8009ec2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ece:	2300      	movs	r3, #0
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3714      	adds	r7, #20
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d101      	bne.n	8009ef4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009ef0:	2302      	movs	r3, #2
 8009ef2:	e02d      	b.n	8009f50 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2224      	movs	r2, #36	@ 0x24
 8009f00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	681a      	ldr	r2, [r3, #0]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f022 0201 	bic.w	r2, r2, #1
 8009f1a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	683a      	ldr	r2, [r7, #0]
 8009f2c:	430a      	orrs	r2, r1
 8009f2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 f84f 	bl	8009fd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	68fa      	ldr	r2, [r7, #12]
 8009f3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2220      	movs	r2, #32
 8009f42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3710      	adds	r7, #16
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d101      	bne.n	8009f70 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009f6c:	2302      	movs	r3, #2
 8009f6e:	e02d      	b.n	8009fcc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2201      	movs	r2, #1
 8009f74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2224      	movs	r2, #36	@ 0x24
 8009f7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f022 0201 	bic.w	r2, r2, #1
 8009f96:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	683a      	ldr	r2, [r7, #0]
 8009fa8:	430a      	orrs	r2, r1
 8009faa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 f811 	bl	8009fd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	68fa      	ldr	r2, [r7, #12]
 8009fb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2220      	movs	r2, #32
 8009fbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009fca:	2300      	movs	r3, #0
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3710      	adds	r7, #16
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b085      	sub	sp, #20
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d108      	bne.n	8009ff6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009ff4:	e031      	b.n	800a05a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009ff6:	2308      	movs	r3, #8
 8009ff8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009ffa:	2308      	movs	r3, #8
 8009ffc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	0e5b      	lsrs	r3, r3, #25
 800a006:	b2db      	uxtb	r3, r3
 800a008:	f003 0307 	and.w	r3, r3, #7
 800a00c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	689b      	ldr	r3, [r3, #8]
 800a014:	0f5b      	lsrs	r3, r3, #29
 800a016:	b2db      	uxtb	r3, r3
 800a018:	f003 0307 	and.w	r3, r3, #7
 800a01c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a01e:	7bbb      	ldrb	r3, [r7, #14]
 800a020:	7b3a      	ldrb	r2, [r7, #12]
 800a022:	4911      	ldr	r1, [pc, #68]	@ (800a068 <UARTEx_SetNbDataToProcess+0x94>)
 800a024:	5c8a      	ldrb	r2, [r1, r2]
 800a026:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a02a:	7b3a      	ldrb	r2, [r7, #12]
 800a02c:	490f      	ldr	r1, [pc, #60]	@ (800a06c <UARTEx_SetNbDataToProcess+0x98>)
 800a02e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a030:	fb93 f3f2 	sdiv	r3, r3, r2
 800a034:	b29a      	uxth	r2, r3
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a03c:	7bfb      	ldrb	r3, [r7, #15]
 800a03e:	7b7a      	ldrb	r2, [r7, #13]
 800a040:	4909      	ldr	r1, [pc, #36]	@ (800a068 <UARTEx_SetNbDataToProcess+0x94>)
 800a042:	5c8a      	ldrb	r2, [r1, r2]
 800a044:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a048:	7b7a      	ldrb	r2, [r7, #13]
 800a04a:	4908      	ldr	r1, [pc, #32]	@ (800a06c <UARTEx_SetNbDataToProcess+0x98>)
 800a04c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a04e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a052:	b29a      	uxth	r2, r3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a05a:	bf00      	nop
 800a05c:	3714      	adds	r7, #20
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr
 800a066:	bf00      	nop
 800a068:	0800b3a4 	.word	0x0800b3a4
 800a06c:	0800b3ac 	.word	0x0800b3ac

0800a070 <std>:
 800a070:	2300      	movs	r3, #0
 800a072:	b510      	push	{r4, lr}
 800a074:	4604      	mov	r4, r0
 800a076:	6083      	str	r3, [r0, #8]
 800a078:	8181      	strh	r1, [r0, #12]
 800a07a:	4619      	mov	r1, r3
 800a07c:	6643      	str	r3, [r0, #100]	@ 0x64
 800a07e:	81c2      	strh	r2, [r0, #14]
 800a080:	2208      	movs	r2, #8
 800a082:	6183      	str	r3, [r0, #24]
 800a084:	e9c0 3300 	strd	r3, r3, [r0]
 800a088:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a08c:	305c      	adds	r0, #92	@ 0x5c
 800a08e:	f000 f9f9 	bl	800a484 <memset>
 800a092:	4b0d      	ldr	r3, [pc, #52]	@ (800a0c8 <std+0x58>)
 800a094:	6224      	str	r4, [r4, #32]
 800a096:	6263      	str	r3, [r4, #36]	@ 0x24
 800a098:	4b0c      	ldr	r3, [pc, #48]	@ (800a0cc <std+0x5c>)
 800a09a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a09c:	4b0c      	ldr	r3, [pc, #48]	@ (800a0d0 <std+0x60>)
 800a09e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a0a0:	4b0c      	ldr	r3, [pc, #48]	@ (800a0d4 <std+0x64>)
 800a0a2:	6323      	str	r3, [r4, #48]	@ 0x30
 800a0a4:	4b0c      	ldr	r3, [pc, #48]	@ (800a0d8 <std+0x68>)
 800a0a6:	429c      	cmp	r4, r3
 800a0a8:	d006      	beq.n	800a0b8 <std+0x48>
 800a0aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a0ae:	4294      	cmp	r4, r2
 800a0b0:	d002      	beq.n	800a0b8 <std+0x48>
 800a0b2:	33d0      	adds	r3, #208	@ 0xd0
 800a0b4:	429c      	cmp	r4, r3
 800a0b6:	d105      	bne.n	800a0c4 <std+0x54>
 800a0b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a0bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0c0:	f000 ba58 	b.w	800a574 <__retarget_lock_init_recursive>
 800a0c4:	bd10      	pop	{r4, pc}
 800a0c6:	bf00      	nop
 800a0c8:	0800a2d5 	.word	0x0800a2d5
 800a0cc:	0800a2f7 	.word	0x0800a2f7
 800a0d0:	0800a32f 	.word	0x0800a32f
 800a0d4:	0800a353 	.word	0x0800a353
 800a0d8:	2000035c 	.word	0x2000035c

0800a0dc <stdio_exit_handler>:
 800a0dc:	4a02      	ldr	r2, [pc, #8]	@ (800a0e8 <stdio_exit_handler+0xc>)
 800a0de:	4903      	ldr	r1, [pc, #12]	@ (800a0ec <stdio_exit_handler+0x10>)
 800a0e0:	4803      	ldr	r0, [pc, #12]	@ (800a0f0 <stdio_exit_handler+0x14>)
 800a0e2:	f000 b869 	b.w	800a1b8 <_fwalk_sglue>
 800a0e6:	bf00      	nop
 800a0e8:	20000014 	.word	0x20000014
 800a0ec:	0800ae1d 	.word	0x0800ae1d
 800a0f0:	20000024 	.word	0x20000024

0800a0f4 <cleanup_stdio>:
 800a0f4:	6841      	ldr	r1, [r0, #4]
 800a0f6:	4b0c      	ldr	r3, [pc, #48]	@ (800a128 <cleanup_stdio+0x34>)
 800a0f8:	4299      	cmp	r1, r3
 800a0fa:	b510      	push	{r4, lr}
 800a0fc:	4604      	mov	r4, r0
 800a0fe:	d001      	beq.n	800a104 <cleanup_stdio+0x10>
 800a100:	f000 fe8c 	bl	800ae1c <_fflush_r>
 800a104:	68a1      	ldr	r1, [r4, #8]
 800a106:	4b09      	ldr	r3, [pc, #36]	@ (800a12c <cleanup_stdio+0x38>)
 800a108:	4299      	cmp	r1, r3
 800a10a:	d002      	beq.n	800a112 <cleanup_stdio+0x1e>
 800a10c:	4620      	mov	r0, r4
 800a10e:	f000 fe85 	bl	800ae1c <_fflush_r>
 800a112:	68e1      	ldr	r1, [r4, #12]
 800a114:	4b06      	ldr	r3, [pc, #24]	@ (800a130 <cleanup_stdio+0x3c>)
 800a116:	4299      	cmp	r1, r3
 800a118:	d004      	beq.n	800a124 <cleanup_stdio+0x30>
 800a11a:	4620      	mov	r0, r4
 800a11c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a120:	f000 be7c 	b.w	800ae1c <_fflush_r>
 800a124:	bd10      	pop	{r4, pc}
 800a126:	bf00      	nop
 800a128:	2000035c 	.word	0x2000035c
 800a12c:	200003c4 	.word	0x200003c4
 800a130:	2000042c 	.word	0x2000042c

0800a134 <global_stdio_init.part.0>:
 800a134:	b510      	push	{r4, lr}
 800a136:	4b0b      	ldr	r3, [pc, #44]	@ (800a164 <global_stdio_init.part.0+0x30>)
 800a138:	2104      	movs	r1, #4
 800a13a:	4c0b      	ldr	r4, [pc, #44]	@ (800a168 <global_stdio_init.part.0+0x34>)
 800a13c:	4a0b      	ldr	r2, [pc, #44]	@ (800a16c <global_stdio_init.part.0+0x38>)
 800a13e:	4620      	mov	r0, r4
 800a140:	601a      	str	r2, [r3, #0]
 800a142:	2200      	movs	r2, #0
 800a144:	f7ff ff94 	bl	800a070 <std>
 800a148:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a14c:	2201      	movs	r2, #1
 800a14e:	2109      	movs	r1, #9
 800a150:	f7ff ff8e 	bl	800a070 <std>
 800a154:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a158:	2202      	movs	r2, #2
 800a15a:	2112      	movs	r1, #18
 800a15c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a160:	f7ff bf86 	b.w	800a070 <std>
 800a164:	20000494 	.word	0x20000494
 800a168:	2000035c 	.word	0x2000035c
 800a16c:	0800a0dd 	.word	0x0800a0dd

0800a170 <__sfp_lock_acquire>:
 800a170:	4801      	ldr	r0, [pc, #4]	@ (800a178 <__sfp_lock_acquire+0x8>)
 800a172:	f000 ba00 	b.w	800a576 <__retarget_lock_acquire_recursive>
 800a176:	bf00      	nop
 800a178:	2000049d 	.word	0x2000049d

0800a17c <__sfp_lock_release>:
 800a17c:	4801      	ldr	r0, [pc, #4]	@ (800a184 <__sfp_lock_release+0x8>)
 800a17e:	f000 b9fb 	b.w	800a578 <__retarget_lock_release_recursive>
 800a182:	bf00      	nop
 800a184:	2000049d 	.word	0x2000049d

0800a188 <__sinit>:
 800a188:	b510      	push	{r4, lr}
 800a18a:	4604      	mov	r4, r0
 800a18c:	f7ff fff0 	bl	800a170 <__sfp_lock_acquire>
 800a190:	6a23      	ldr	r3, [r4, #32]
 800a192:	b11b      	cbz	r3, 800a19c <__sinit+0x14>
 800a194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a198:	f7ff bff0 	b.w	800a17c <__sfp_lock_release>
 800a19c:	4b04      	ldr	r3, [pc, #16]	@ (800a1b0 <__sinit+0x28>)
 800a19e:	6223      	str	r3, [r4, #32]
 800a1a0:	4b04      	ldr	r3, [pc, #16]	@ (800a1b4 <__sinit+0x2c>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d1f5      	bne.n	800a194 <__sinit+0xc>
 800a1a8:	f7ff ffc4 	bl	800a134 <global_stdio_init.part.0>
 800a1ac:	e7f2      	b.n	800a194 <__sinit+0xc>
 800a1ae:	bf00      	nop
 800a1b0:	0800a0f5 	.word	0x0800a0f5
 800a1b4:	20000494 	.word	0x20000494

0800a1b8 <_fwalk_sglue>:
 800a1b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1bc:	4607      	mov	r7, r0
 800a1be:	4688      	mov	r8, r1
 800a1c0:	4614      	mov	r4, r2
 800a1c2:	2600      	movs	r6, #0
 800a1c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a1c8:	f1b9 0901 	subs.w	r9, r9, #1
 800a1cc:	d505      	bpl.n	800a1da <_fwalk_sglue+0x22>
 800a1ce:	6824      	ldr	r4, [r4, #0]
 800a1d0:	2c00      	cmp	r4, #0
 800a1d2:	d1f7      	bne.n	800a1c4 <_fwalk_sglue+0xc>
 800a1d4:	4630      	mov	r0, r6
 800a1d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1da:	89ab      	ldrh	r3, [r5, #12]
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d907      	bls.n	800a1f0 <_fwalk_sglue+0x38>
 800a1e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	d003      	beq.n	800a1f0 <_fwalk_sglue+0x38>
 800a1e8:	4629      	mov	r1, r5
 800a1ea:	4638      	mov	r0, r7
 800a1ec:	47c0      	blx	r8
 800a1ee:	4306      	orrs	r6, r0
 800a1f0:	3568      	adds	r5, #104	@ 0x68
 800a1f2:	e7e9      	b.n	800a1c8 <_fwalk_sglue+0x10>

0800a1f4 <iprintf>:
 800a1f4:	b40f      	push	{r0, r1, r2, r3}
 800a1f6:	b507      	push	{r0, r1, r2, lr}
 800a1f8:	4906      	ldr	r1, [pc, #24]	@ (800a214 <iprintf+0x20>)
 800a1fa:	ab04      	add	r3, sp, #16
 800a1fc:	6808      	ldr	r0, [r1, #0]
 800a1fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800a202:	6881      	ldr	r1, [r0, #8]
 800a204:	9301      	str	r3, [sp, #4]
 800a206:	f000 fadb 	bl	800a7c0 <_vfiprintf_r>
 800a20a:	b003      	add	sp, #12
 800a20c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a210:	b004      	add	sp, #16
 800a212:	4770      	bx	lr
 800a214:	20000020 	.word	0x20000020

0800a218 <_puts_r>:
 800a218:	6a03      	ldr	r3, [r0, #32]
 800a21a:	b570      	push	{r4, r5, r6, lr}
 800a21c:	4605      	mov	r5, r0
 800a21e:	460e      	mov	r6, r1
 800a220:	6884      	ldr	r4, [r0, #8]
 800a222:	b90b      	cbnz	r3, 800a228 <_puts_r+0x10>
 800a224:	f7ff ffb0 	bl	800a188 <__sinit>
 800a228:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a22a:	07db      	lsls	r3, r3, #31
 800a22c:	d405      	bmi.n	800a23a <_puts_r+0x22>
 800a22e:	89a3      	ldrh	r3, [r4, #12]
 800a230:	0598      	lsls	r0, r3, #22
 800a232:	d402      	bmi.n	800a23a <_puts_r+0x22>
 800a234:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a236:	f000 f99e 	bl	800a576 <__retarget_lock_acquire_recursive>
 800a23a:	89a3      	ldrh	r3, [r4, #12]
 800a23c:	0719      	lsls	r1, r3, #28
 800a23e:	d502      	bpl.n	800a246 <_puts_r+0x2e>
 800a240:	6923      	ldr	r3, [r4, #16]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d135      	bne.n	800a2b2 <_puts_r+0x9a>
 800a246:	4621      	mov	r1, r4
 800a248:	4628      	mov	r0, r5
 800a24a:	f000 f8c5 	bl	800a3d8 <__swsetup_r>
 800a24e:	b380      	cbz	r0, 800a2b2 <_puts_r+0x9a>
 800a250:	f04f 35ff 	mov.w	r5, #4294967295
 800a254:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a256:	07da      	lsls	r2, r3, #31
 800a258:	d405      	bmi.n	800a266 <_puts_r+0x4e>
 800a25a:	89a3      	ldrh	r3, [r4, #12]
 800a25c:	059b      	lsls	r3, r3, #22
 800a25e:	d402      	bmi.n	800a266 <_puts_r+0x4e>
 800a260:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a262:	f000 f989 	bl	800a578 <__retarget_lock_release_recursive>
 800a266:	4628      	mov	r0, r5
 800a268:	bd70      	pop	{r4, r5, r6, pc}
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	da04      	bge.n	800a278 <_puts_r+0x60>
 800a26e:	69a2      	ldr	r2, [r4, #24]
 800a270:	429a      	cmp	r2, r3
 800a272:	dc17      	bgt.n	800a2a4 <_puts_r+0x8c>
 800a274:	290a      	cmp	r1, #10
 800a276:	d015      	beq.n	800a2a4 <_puts_r+0x8c>
 800a278:	6823      	ldr	r3, [r4, #0]
 800a27a:	1c5a      	adds	r2, r3, #1
 800a27c:	6022      	str	r2, [r4, #0]
 800a27e:	7019      	strb	r1, [r3, #0]
 800a280:	68a3      	ldr	r3, [r4, #8]
 800a282:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a286:	3b01      	subs	r3, #1
 800a288:	60a3      	str	r3, [r4, #8]
 800a28a:	2900      	cmp	r1, #0
 800a28c:	d1ed      	bne.n	800a26a <_puts_r+0x52>
 800a28e:	2b00      	cmp	r3, #0
 800a290:	da11      	bge.n	800a2b6 <_puts_r+0x9e>
 800a292:	4622      	mov	r2, r4
 800a294:	210a      	movs	r1, #10
 800a296:	4628      	mov	r0, r5
 800a298:	f000 f85f 	bl	800a35a <__swbuf_r>
 800a29c:	3001      	adds	r0, #1
 800a29e:	d0d7      	beq.n	800a250 <_puts_r+0x38>
 800a2a0:	250a      	movs	r5, #10
 800a2a2:	e7d7      	b.n	800a254 <_puts_r+0x3c>
 800a2a4:	4622      	mov	r2, r4
 800a2a6:	4628      	mov	r0, r5
 800a2a8:	f000 f857 	bl	800a35a <__swbuf_r>
 800a2ac:	3001      	adds	r0, #1
 800a2ae:	d1e7      	bne.n	800a280 <_puts_r+0x68>
 800a2b0:	e7ce      	b.n	800a250 <_puts_r+0x38>
 800a2b2:	3e01      	subs	r6, #1
 800a2b4:	e7e4      	b.n	800a280 <_puts_r+0x68>
 800a2b6:	6823      	ldr	r3, [r4, #0]
 800a2b8:	1c5a      	adds	r2, r3, #1
 800a2ba:	6022      	str	r2, [r4, #0]
 800a2bc:	220a      	movs	r2, #10
 800a2be:	701a      	strb	r2, [r3, #0]
 800a2c0:	e7ee      	b.n	800a2a0 <_puts_r+0x88>
	...

0800a2c4 <puts>:
 800a2c4:	4b02      	ldr	r3, [pc, #8]	@ (800a2d0 <puts+0xc>)
 800a2c6:	4601      	mov	r1, r0
 800a2c8:	6818      	ldr	r0, [r3, #0]
 800a2ca:	f7ff bfa5 	b.w	800a218 <_puts_r>
 800a2ce:	bf00      	nop
 800a2d0:	20000020 	.word	0x20000020

0800a2d4 <__sread>:
 800a2d4:	b510      	push	{r4, lr}
 800a2d6:	460c      	mov	r4, r1
 800a2d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2dc:	f000 f8fc 	bl	800a4d8 <_read_r>
 800a2e0:	2800      	cmp	r0, #0
 800a2e2:	bfab      	itete	ge
 800a2e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a2e6:	89a3      	ldrhlt	r3, [r4, #12]
 800a2e8:	181b      	addge	r3, r3, r0
 800a2ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a2ee:	bfac      	ite	ge
 800a2f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a2f2:	81a3      	strhlt	r3, [r4, #12]
 800a2f4:	bd10      	pop	{r4, pc}

0800a2f6 <__swrite>:
 800a2f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2fa:	461f      	mov	r7, r3
 800a2fc:	898b      	ldrh	r3, [r1, #12]
 800a2fe:	4605      	mov	r5, r0
 800a300:	460c      	mov	r4, r1
 800a302:	05db      	lsls	r3, r3, #23
 800a304:	4616      	mov	r6, r2
 800a306:	d505      	bpl.n	800a314 <__swrite+0x1e>
 800a308:	2302      	movs	r3, #2
 800a30a:	2200      	movs	r2, #0
 800a30c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a310:	f000 f8d0 	bl	800a4b4 <_lseek_r>
 800a314:	89a3      	ldrh	r3, [r4, #12]
 800a316:	4632      	mov	r2, r6
 800a318:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a31c:	4628      	mov	r0, r5
 800a31e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a322:	81a3      	strh	r3, [r4, #12]
 800a324:	463b      	mov	r3, r7
 800a326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a32a:	f000 b8e7 	b.w	800a4fc <_write_r>

0800a32e <__sseek>:
 800a32e:	b510      	push	{r4, lr}
 800a330:	460c      	mov	r4, r1
 800a332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a336:	f000 f8bd 	bl	800a4b4 <_lseek_r>
 800a33a:	1c43      	adds	r3, r0, #1
 800a33c:	89a3      	ldrh	r3, [r4, #12]
 800a33e:	bf15      	itete	ne
 800a340:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a342:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a346:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a34a:	81a3      	strheq	r3, [r4, #12]
 800a34c:	bf18      	it	ne
 800a34e:	81a3      	strhne	r3, [r4, #12]
 800a350:	bd10      	pop	{r4, pc}

0800a352 <__sclose>:
 800a352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a356:	f000 b89d 	b.w	800a494 <_close_r>

0800a35a <__swbuf_r>:
 800a35a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a35c:	460e      	mov	r6, r1
 800a35e:	4614      	mov	r4, r2
 800a360:	4605      	mov	r5, r0
 800a362:	b118      	cbz	r0, 800a36c <__swbuf_r+0x12>
 800a364:	6a03      	ldr	r3, [r0, #32]
 800a366:	b90b      	cbnz	r3, 800a36c <__swbuf_r+0x12>
 800a368:	f7ff ff0e 	bl	800a188 <__sinit>
 800a36c:	69a3      	ldr	r3, [r4, #24]
 800a36e:	60a3      	str	r3, [r4, #8]
 800a370:	89a3      	ldrh	r3, [r4, #12]
 800a372:	071a      	lsls	r2, r3, #28
 800a374:	d501      	bpl.n	800a37a <__swbuf_r+0x20>
 800a376:	6923      	ldr	r3, [r4, #16]
 800a378:	b943      	cbnz	r3, 800a38c <__swbuf_r+0x32>
 800a37a:	4621      	mov	r1, r4
 800a37c:	4628      	mov	r0, r5
 800a37e:	f000 f82b 	bl	800a3d8 <__swsetup_r>
 800a382:	b118      	cbz	r0, 800a38c <__swbuf_r+0x32>
 800a384:	f04f 37ff 	mov.w	r7, #4294967295
 800a388:	4638      	mov	r0, r7
 800a38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a38c:	6823      	ldr	r3, [r4, #0]
 800a38e:	b2f6      	uxtb	r6, r6
 800a390:	6922      	ldr	r2, [r4, #16]
 800a392:	4637      	mov	r7, r6
 800a394:	1a98      	subs	r0, r3, r2
 800a396:	6963      	ldr	r3, [r4, #20]
 800a398:	4283      	cmp	r3, r0
 800a39a:	dc05      	bgt.n	800a3a8 <__swbuf_r+0x4e>
 800a39c:	4621      	mov	r1, r4
 800a39e:	4628      	mov	r0, r5
 800a3a0:	f000 fd3c 	bl	800ae1c <_fflush_r>
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	d1ed      	bne.n	800a384 <__swbuf_r+0x2a>
 800a3a8:	68a3      	ldr	r3, [r4, #8]
 800a3aa:	3b01      	subs	r3, #1
 800a3ac:	60a3      	str	r3, [r4, #8]
 800a3ae:	6823      	ldr	r3, [r4, #0]
 800a3b0:	1c5a      	adds	r2, r3, #1
 800a3b2:	6022      	str	r2, [r4, #0]
 800a3b4:	701e      	strb	r6, [r3, #0]
 800a3b6:	1c43      	adds	r3, r0, #1
 800a3b8:	6962      	ldr	r2, [r4, #20]
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d004      	beq.n	800a3c8 <__swbuf_r+0x6e>
 800a3be:	89a3      	ldrh	r3, [r4, #12]
 800a3c0:	07db      	lsls	r3, r3, #31
 800a3c2:	d5e1      	bpl.n	800a388 <__swbuf_r+0x2e>
 800a3c4:	2e0a      	cmp	r6, #10
 800a3c6:	d1df      	bne.n	800a388 <__swbuf_r+0x2e>
 800a3c8:	4621      	mov	r1, r4
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	f000 fd26 	bl	800ae1c <_fflush_r>
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	d0d9      	beq.n	800a388 <__swbuf_r+0x2e>
 800a3d4:	e7d6      	b.n	800a384 <__swbuf_r+0x2a>
	...

0800a3d8 <__swsetup_r>:
 800a3d8:	b538      	push	{r3, r4, r5, lr}
 800a3da:	4b29      	ldr	r3, [pc, #164]	@ (800a480 <__swsetup_r+0xa8>)
 800a3dc:	4605      	mov	r5, r0
 800a3de:	460c      	mov	r4, r1
 800a3e0:	6818      	ldr	r0, [r3, #0]
 800a3e2:	b118      	cbz	r0, 800a3ec <__swsetup_r+0x14>
 800a3e4:	6a03      	ldr	r3, [r0, #32]
 800a3e6:	b90b      	cbnz	r3, 800a3ec <__swsetup_r+0x14>
 800a3e8:	f7ff fece 	bl	800a188 <__sinit>
 800a3ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3f0:	0719      	lsls	r1, r3, #28
 800a3f2:	d422      	bmi.n	800a43a <__swsetup_r+0x62>
 800a3f4:	06da      	lsls	r2, r3, #27
 800a3f6:	d407      	bmi.n	800a408 <__swsetup_r+0x30>
 800a3f8:	2209      	movs	r2, #9
 800a3fa:	602a      	str	r2, [r5, #0]
 800a3fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a400:	f04f 30ff 	mov.w	r0, #4294967295
 800a404:	81a3      	strh	r3, [r4, #12]
 800a406:	e033      	b.n	800a470 <__swsetup_r+0x98>
 800a408:	0758      	lsls	r0, r3, #29
 800a40a:	d512      	bpl.n	800a432 <__swsetup_r+0x5a>
 800a40c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a40e:	b141      	cbz	r1, 800a422 <__swsetup_r+0x4a>
 800a410:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a414:	4299      	cmp	r1, r3
 800a416:	d002      	beq.n	800a41e <__swsetup_r+0x46>
 800a418:	4628      	mov	r0, r5
 800a41a:	f000 f8af 	bl	800a57c <_free_r>
 800a41e:	2300      	movs	r3, #0
 800a420:	6363      	str	r3, [r4, #52]	@ 0x34
 800a422:	89a3      	ldrh	r3, [r4, #12]
 800a424:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a428:	81a3      	strh	r3, [r4, #12]
 800a42a:	2300      	movs	r3, #0
 800a42c:	6063      	str	r3, [r4, #4]
 800a42e:	6923      	ldr	r3, [r4, #16]
 800a430:	6023      	str	r3, [r4, #0]
 800a432:	89a3      	ldrh	r3, [r4, #12]
 800a434:	f043 0308 	orr.w	r3, r3, #8
 800a438:	81a3      	strh	r3, [r4, #12]
 800a43a:	6923      	ldr	r3, [r4, #16]
 800a43c:	b94b      	cbnz	r3, 800a452 <__swsetup_r+0x7a>
 800a43e:	89a3      	ldrh	r3, [r4, #12]
 800a440:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a444:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a448:	d003      	beq.n	800a452 <__swsetup_r+0x7a>
 800a44a:	4621      	mov	r1, r4
 800a44c:	4628      	mov	r0, r5
 800a44e:	f000 fd32 	bl	800aeb6 <__smakebuf_r>
 800a452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a456:	f013 0201 	ands.w	r2, r3, #1
 800a45a:	d00a      	beq.n	800a472 <__swsetup_r+0x9a>
 800a45c:	2200      	movs	r2, #0
 800a45e:	60a2      	str	r2, [r4, #8]
 800a460:	6962      	ldr	r2, [r4, #20]
 800a462:	4252      	negs	r2, r2
 800a464:	61a2      	str	r2, [r4, #24]
 800a466:	6922      	ldr	r2, [r4, #16]
 800a468:	b942      	cbnz	r2, 800a47c <__swsetup_r+0xa4>
 800a46a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a46e:	d1c5      	bne.n	800a3fc <__swsetup_r+0x24>
 800a470:	bd38      	pop	{r3, r4, r5, pc}
 800a472:	0799      	lsls	r1, r3, #30
 800a474:	bf58      	it	pl
 800a476:	6962      	ldrpl	r2, [r4, #20]
 800a478:	60a2      	str	r2, [r4, #8]
 800a47a:	e7f4      	b.n	800a466 <__swsetup_r+0x8e>
 800a47c:	2000      	movs	r0, #0
 800a47e:	e7f7      	b.n	800a470 <__swsetup_r+0x98>
 800a480:	20000020 	.word	0x20000020

0800a484 <memset>:
 800a484:	4402      	add	r2, r0
 800a486:	4603      	mov	r3, r0
 800a488:	4293      	cmp	r3, r2
 800a48a:	d100      	bne.n	800a48e <memset+0xa>
 800a48c:	4770      	bx	lr
 800a48e:	f803 1b01 	strb.w	r1, [r3], #1
 800a492:	e7f9      	b.n	800a488 <memset+0x4>

0800a494 <_close_r>:
 800a494:	b538      	push	{r3, r4, r5, lr}
 800a496:	2300      	movs	r3, #0
 800a498:	4d05      	ldr	r5, [pc, #20]	@ (800a4b0 <_close_r+0x1c>)
 800a49a:	4604      	mov	r4, r0
 800a49c:	4608      	mov	r0, r1
 800a49e:	602b      	str	r3, [r5, #0]
 800a4a0:	f7f7 fa2f 	bl	8001902 <_close>
 800a4a4:	1c43      	adds	r3, r0, #1
 800a4a6:	d102      	bne.n	800a4ae <_close_r+0x1a>
 800a4a8:	682b      	ldr	r3, [r5, #0]
 800a4aa:	b103      	cbz	r3, 800a4ae <_close_r+0x1a>
 800a4ac:	6023      	str	r3, [r4, #0]
 800a4ae:	bd38      	pop	{r3, r4, r5, pc}
 800a4b0:	20000498 	.word	0x20000498

0800a4b4 <_lseek_r>:
 800a4b4:	b538      	push	{r3, r4, r5, lr}
 800a4b6:	4604      	mov	r4, r0
 800a4b8:	4d06      	ldr	r5, [pc, #24]	@ (800a4d4 <_lseek_r+0x20>)
 800a4ba:	4608      	mov	r0, r1
 800a4bc:	4611      	mov	r1, r2
 800a4be:	2200      	movs	r2, #0
 800a4c0:	602a      	str	r2, [r5, #0]
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	f7f7 fa44 	bl	8001950 <_lseek>
 800a4c8:	1c43      	adds	r3, r0, #1
 800a4ca:	d102      	bne.n	800a4d2 <_lseek_r+0x1e>
 800a4cc:	682b      	ldr	r3, [r5, #0]
 800a4ce:	b103      	cbz	r3, 800a4d2 <_lseek_r+0x1e>
 800a4d0:	6023      	str	r3, [r4, #0]
 800a4d2:	bd38      	pop	{r3, r4, r5, pc}
 800a4d4:	20000498 	.word	0x20000498

0800a4d8 <_read_r>:
 800a4d8:	b538      	push	{r3, r4, r5, lr}
 800a4da:	4604      	mov	r4, r0
 800a4dc:	4d06      	ldr	r5, [pc, #24]	@ (800a4f8 <_read_r+0x20>)
 800a4de:	4608      	mov	r0, r1
 800a4e0:	4611      	mov	r1, r2
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	602a      	str	r2, [r5, #0]
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	f7f7 f9d2 	bl	8001890 <_read>
 800a4ec:	1c43      	adds	r3, r0, #1
 800a4ee:	d102      	bne.n	800a4f6 <_read_r+0x1e>
 800a4f0:	682b      	ldr	r3, [r5, #0]
 800a4f2:	b103      	cbz	r3, 800a4f6 <_read_r+0x1e>
 800a4f4:	6023      	str	r3, [r4, #0]
 800a4f6:	bd38      	pop	{r3, r4, r5, pc}
 800a4f8:	20000498 	.word	0x20000498

0800a4fc <_write_r>:
 800a4fc:	b538      	push	{r3, r4, r5, lr}
 800a4fe:	4604      	mov	r4, r0
 800a500:	4d06      	ldr	r5, [pc, #24]	@ (800a51c <_write_r+0x20>)
 800a502:	4608      	mov	r0, r1
 800a504:	4611      	mov	r1, r2
 800a506:	2200      	movs	r2, #0
 800a508:	602a      	str	r2, [r5, #0]
 800a50a:	461a      	mov	r2, r3
 800a50c:	f7f7 f9dd 	bl	80018ca <_write>
 800a510:	1c43      	adds	r3, r0, #1
 800a512:	d102      	bne.n	800a51a <_write_r+0x1e>
 800a514:	682b      	ldr	r3, [r5, #0]
 800a516:	b103      	cbz	r3, 800a51a <_write_r+0x1e>
 800a518:	6023      	str	r3, [r4, #0]
 800a51a:	bd38      	pop	{r3, r4, r5, pc}
 800a51c:	20000498 	.word	0x20000498

0800a520 <__errno>:
 800a520:	4b01      	ldr	r3, [pc, #4]	@ (800a528 <__errno+0x8>)
 800a522:	6818      	ldr	r0, [r3, #0]
 800a524:	4770      	bx	lr
 800a526:	bf00      	nop
 800a528:	20000020 	.word	0x20000020

0800a52c <__libc_init_array>:
 800a52c:	b570      	push	{r4, r5, r6, lr}
 800a52e:	4d0d      	ldr	r5, [pc, #52]	@ (800a564 <__libc_init_array+0x38>)
 800a530:	2600      	movs	r6, #0
 800a532:	4c0d      	ldr	r4, [pc, #52]	@ (800a568 <__libc_init_array+0x3c>)
 800a534:	1b64      	subs	r4, r4, r5
 800a536:	10a4      	asrs	r4, r4, #2
 800a538:	42a6      	cmp	r6, r4
 800a53a:	d109      	bne.n	800a550 <__libc_init_array+0x24>
 800a53c:	4d0b      	ldr	r5, [pc, #44]	@ (800a56c <__libc_init_array+0x40>)
 800a53e:	2600      	movs	r6, #0
 800a540:	4c0b      	ldr	r4, [pc, #44]	@ (800a570 <__libc_init_array+0x44>)
 800a542:	f000 fd35 	bl	800afb0 <_init>
 800a546:	1b64      	subs	r4, r4, r5
 800a548:	10a4      	asrs	r4, r4, #2
 800a54a:	42a6      	cmp	r6, r4
 800a54c:	d105      	bne.n	800a55a <__libc_init_array+0x2e>
 800a54e:	bd70      	pop	{r4, r5, r6, pc}
 800a550:	f855 3b04 	ldr.w	r3, [r5], #4
 800a554:	3601      	adds	r6, #1
 800a556:	4798      	blx	r3
 800a558:	e7ee      	b.n	800a538 <__libc_init_array+0xc>
 800a55a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a55e:	3601      	adds	r6, #1
 800a560:	4798      	blx	r3
 800a562:	e7f2      	b.n	800a54a <__libc_init_array+0x1e>
 800a564:	0800b3f0 	.word	0x0800b3f0
 800a568:	0800b3f0 	.word	0x0800b3f0
 800a56c:	0800b3f0 	.word	0x0800b3f0
 800a570:	0800b3f4 	.word	0x0800b3f4

0800a574 <__retarget_lock_init_recursive>:
 800a574:	4770      	bx	lr

0800a576 <__retarget_lock_acquire_recursive>:
 800a576:	4770      	bx	lr

0800a578 <__retarget_lock_release_recursive>:
 800a578:	4770      	bx	lr
	...

0800a57c <_free_r>:
 800a57c:	b538      	push	{r3, r4, r5, lr}
 800a57e:	4605      	mov	r5, r0
 800a580:	2900      	cmp	r1, #0
 800a582:	d041      	beq.n	800a608 <_free_r+0x8c>
 800a584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a588:	1f0c      	subs	r4, r1, #4
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	bfb8      	it	lt
 800a58e:	18e4      	addlt	r4, r4, r3
 800a590:	f000 f8e0 	bl	800a754 <__malloc_lock>
 800a594:	4a1d      	ldr	r2, [pc, #116]	@ (800a60c <_free_r+0x90>)
 800a596:	6813      	ldr	r3, [r2, #0]
 800a598:	b933      	cbnz	r3, 800a5a8 <_free_r+0x2c>
 800a59a:	6063      	str	r3, [r4, #4]
 800a59c:	6014      	str	r4, [r2, #0]
 800a59e:	4628      	mov	r0, r5
 800a5a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5a4:	f000 b8dc 	b.w	800a760 <__malloc_unlock>
 800a5a8:	42a3      	cmp	r3, r4
 800a5aa:	d908      	bls.n	800a5be <_free_r+0x42>
 800a5ac:	6820      	ldr	r0, [r4, #0]
 800a5ae:	1821      	adds	r1, r4, r0
 800a5b0:	428b      	cmp	r3, r1
 800a5b2:	bf01      	itttt	eq
 800a5b4:	6819      	ldreq	r1, [r3, #0]
 800a5b6:	685b      	ldreq	r3, [r3, #4]
 800a5b8:	1809      	addeq	r1, r1, r0
 800a5ba:	6021      	streq	r1, [r4, #0]
 800a5bc:	e7ed      	b.n	800a59a <_free_r+0x1e>
 800a5be:	461a      	mov	r2, r3
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	b10b      	cbz	r3, 800a5c8 <_free_r+0x4c>
 800a5c4:	42a3      	cmp	r3, r4
 800a5c6:	d9fa      	bls.n	800a5be <_free_r+0x42>
 800a5c8:	6811      	ldr	r1, [r2, #0]
 800a5ca:	1850      	adds	r0, r2, r1
 800a5cc:	42a0      	cmp	r0, r4
 800a5ce:	d10b      	bne.n	800a5e8 <_free_r+0x6c>
 800a5d0:	6820      	ldr	r0, [r4, #0]
 800a5d2:	4401      	add	r1, r0
 800a5d4:	1850      	adds	r0, r2, r1
 800a5d6:	6011      	str	r1, [r2, #0]
 800a5d8:	4283      	cmp	r3, r0
 800a5da:	d1e0      	bne.n	800a59e <_free_r+0x22>
 800a5dc:	6818      	ldr	r0, [r3, #0]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	4408      	add	r0, r1
 800a5e2:	6053      	str	r3, [r2, #4]
 800a5e4:	6010      	str	r0, [r2, #0]
 800a5e6:	e7da      	b.n	800a59e <_free_r+0x22>
 800a5e8:	d902      	bls.n	800a5f0 <_free_r+0x74>
 800a5ea:	230c      	movs	r3, #12
 800a5ec:	602b      	str	r3, [r5, #0]
 800a5ee:	e7d6      	b.n	800a59e <_free_r+0x22>
 800a5f0:	6820      	ldr	r0, [r4, #0]
 800a5f2:	1821      	adds	r1, r4, r0
 800a5f4:	428b      	cmp	r3, r1
 800a5f6:	bf02      	ittt	eq
 800a5f8:	6819      	ldreq	r1, [r3, #0]
 800a5fa:	685b      	ldreq	r3, [r3, #4]
 800a5fc:	1809      	addeq	r1, r1, r0
 800a5fe:	6063      	str	r3, [r4, #4]
 800a600:	bf08      	it	eq
 800a602:	6021      	streq	r1, [r4, #0]
 800a604:	6054      	str	r4, [r2, #4]
 800a606:	e7ca      	b.n	800a59e <_free_r+0x22>
 800a608:	bd38      	pop	{r3, r4, r5, pc}
 800a60a:	bf00      	nop
 800a60c:	200004a4 	.word	0x200004a4

0800a610 <sbrk_aligned>:
 800a610:	b570      	push	{r4, r5, r6, lr}
 800a612:	4e0f      	ldr	r6, [pc, #60]	@ (800a650 <sbrk_aligned+0x40>)
 800a614:	460c      	mov	r4, r1
 800a616:	4605      	mov	r5, r0
 800a618:	6831      	ldr	r1, [r6, #0]
 800a61a:	b911      	cbnz	r1, 800a622 <sbrk_aligned+0x12>
 800a61c:	f000 fcaa 	bl	800af74 <_sbrk_r>
 800a620:	6030      	str	r0, [r6, #0]
 800a622:	4621      	mov	r1, r4
 800a624:	4628      	mov	r0, r5
 800a626:	f000 fca5 	bl	800af74 <_sbrk_r>
 800a62a:	1c43      	adds	r3, r0, #1
 800a62c:	d103      	bne.n	800a636 <sbrk_aligned+0x26>
 800a62e:	f04f 34ff 	mov.w	r4, #4294967295
 800a632:	4620      	mov	r0, r4
 800a634:	bd70      	pop	{r4, r5, r6, pc}
 800a636:	1cc4      	adds	r4, r0, #3
 800a638:	f024 0403 	bic.w	r4, r4, #3
 800a63c:	42a0      	cmp	r0, r4
 800a63e:	d0f8      	beq.n	800a632 <sbrk_aligned+0x22>
 800a640:	1a21      	subs	r1, r4, r0
 800a642:	4628      	mov	r0, r5
 800a644:	f000 fc96 	bl	800af74 <_sbrk_r>
 800a648:	3001      	adds	r0, #1
 800a64a:	d1f2      	bne.n	800a632 <sbrk_aligned+0x22>
 800a64c:	e7ef      	b.n	800a62e <sbrk_aligned+0x1e>
 800a64e:	bf00      	nop
 800a650:	200004a0 	.word	0x200004a0

0800a654 <_malloc_r>:
 800a654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a658:	1ccd      	adds	r5, r1, #3
 800a65a:	4606      	mov	r6, r0
 800a65c:	f025 0503 	bic.w	r5, r5, #3
 800a660:	3508      	adds	r5, #8
 800a662:	2d0c      	cmp	r5, #12
 800a664:	bf38      	it	cc
 800a666:	250c      	movcc	r5, #12
 800a668:	2d00      	cmp	r5, #0
 800a66a:	db01      	blt.n	800a670 <_malloc_r+0x1c>
 800a66c:	42a9      	cmp	r1, r5
 800a66e:	d904      	bls.n	800a67a <_malloc_r+0x26>
 800a670:	230c      	movs	r3, #12
 800a672:	6033      	str	r3, [r6, #0]
 800a674:	2000      	movs	r0, #0
 800a676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a67a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a750 <_malloc_r+0xfc>
 800a67e:	f000 f869 	bl	800a754 <__malloc_lock>
 800a682:	f8d8 3000 	ldr.w	r3, [r8]
 800a686:	461c      	mov	r4, r3
 800a688:	bb44      	cbnz	r4, 800a6dc <_malloc_r+0x88>
 800a68a:	4629      	mov	r1, r5
 800a68c:	4630      	mov	r0, r6
 800a68e:	f7ff ffbf 	bl	800a610 <sbrk_aligned>
 800a692:	1c43      	adds	r3, r0, #1
 800a694:	4604      	mov	r4, r0
 800a696:	d158      	bne.n	800a74a <_malloc_r+0xf6>
 800a698:	f8d8 4000 	ldr.w	r4, [r8]
 800a69c:	4627      	mov	r7, r4
 800a69e:	2f00      	cmp	r7, #0
 800a6a0:	d143      	bne.n	800a72a <_malloc_r+0xd6>
 800a6a2:	2c00      	cmp	r4, #0
 800a6a4:	d04b      	beq.n	800a73e <_malloc_r+0xea>
 800a6a6:	6823      	ldr	r3, [r4, #0]
 800a6a8:	4639      	mov	r1, r7
 800a6aa:	4630      	mov	r0, r6
 800a6ac:	eb04 0903 	add.w	r9, r4, r3
 800a6b0:	f000 fc60 	bl	800af74 <_sbrk_r>
 800a6b4:	4581      	cmp	r9, r0
 800a6b6:	d142      	bne.n	800a73e <_malloc_r+0xea>
 800a6b8:	6821      	ldr	r1, [r4, #0]
 800a6ba:	4630      	mov	r0, r6
 800a6bc:	1a6d      	subs	r5, r5, r1
 800a6be:	4629      	mov	r1, r5
 800a6c0:	f7ff ffa6 	bl	800a610 <sbrk_aligned>
 800a6c4:	3001      	adds	r0, #1
 800a6c6:	d03a      	beq.n	800a73e <_malloc_r+0xea>
 800a6c8:	6823      	ldr	r3, [r4, #0]
 800a6ca:	442b      	add	r3, r5
 800a6cc:	6023      	str	r3, [r4, #0]
 800a6ce:	f8d8 3000 	ldr.w	r3, [r8]
 800a6d2:	685a      	ldr	r2, [r3, #4]
 800a6d4:	bb62      	cbnz	r2, 800a730 <_malloc_r+0xdc>
 800a6d6:	f8c8 7000 	str.w	r7, [r8]
 800a6da:	e00f      	b.n	800a6fc <_malloc_r+0xa8>
 800a6dc:	6822      	ldr	r2, [r4, #0]
 800a6de:	1b52      	subs	r2, r2, r5
 800a6e0:	d420      	bmi.n	800a724 <_malloc_r+0xd0>
 800a6e2:	2a0b      	cmp	r2, #11
 800a6e4:	d917      	bls.n	800a716 <_malloc_r+0xc2>
 800a6e6:	1961      	adds	r1, r4, r5
 800a6e8:	42a3      	cmp	r3, r4
 800a6ea:	6025      	str	r5, [r4, #0]
 800a6ec:	bf18      	it	ne
 800a6ee:	6059      	strne	r1, [r3, #4]
 800a6f0:	6863      	ldr	r3, [r4, #4]
 800a6f2:	bf08      	it	eq
 800a6f4:	f8c8 1000 	streq.w	r1, [r8]
 800a6f8:	5162      	str	r2, [r4, r5]
 800a6fa:	604b      	str	r3, [r1, #4]
 800a6fc:	4630      	mov	r0, r6
 800a6fe:	f000 f82f 	bl	800a760 <__malloc_unlock>
 800a702:	f104 000b 	add.w	r0, r4, #11
 800a706:	1d23      	adds	r3, r4, #4
 800a708:	f020 0007 	bic.w	r0, r0, #7
 800a70c:	1ac2      	subs	r2, r0, r3
 800a70e:	bf1c      	itt	ne
 800a710:	1a1b      	subne	r3, r3, r0
 800a712:	50a3      	strne	r3, [r4, r2]
 800a714:	e7af      	b.n	800a676 <_malloc_r+0x22>
 800a716:	6862      	ldr	r2, [r4, #4]
 800a718:	42a3      	cmp	r3, r4
 800a71a:	bf0c      	ite	eq
 800a71c:	f8c8 2000 	streq.w	r2, [r8]
 800a720:	605a      	strne	r2, [r3, #4]
 800a722:	e7eb      	b.n	800a6fc <_malloc_r+0xa8>
 800a724:	4623      	mov	r3, r4
 800a726:	6864      	ldr	r4, [r4, #4]
 800a728:	e7ae      	b.n	800a688 <_malloc_r+0x34>
 800a72a:	463c      	mov	r4, r7
 800a72c:	687f      	ldr	r7, [r7, #4]
 800a72e:	e7b6      	b.n	800a69e <_malloc_r+0x4a>
 800a730:	461a      	mov	r2, r3
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	42a3      	cmp	r3, r4
 800a736:	d1fb      	bne.n	800a730 <_malloc_r+0xdc>
 800a738:	2300      	movs	r3, #0
 800a73a:	6053      	str	r3, [r2, #4]
 800a73c:	e7de      	b.n	800a6fc <_malloc_r+0xa8>
 800a73e:	230c      	movs	r3, #12
 800a740:	4630      	mov	r0, r6
 800a742:	6033      	str	r3, [r6, #0]
 800a744:	f000 f80c 	bl	800a760 <__malloc_unlock>
 800a748:	e794      	b.n	800a674 <_malloc_r+0x20>
 800a74a:	6005      	str	r5, [r0, #0]
 800a74c:	e7d6      	b.n	800a6fc <_malloc_r+0xa8>
 800a74e:	bf00      	nop
 800a750:	200004a4 	.word	0x200004a4

0800a754 <__malloc_lock>:
 800a754:	4801      	ldr	r0, [pc, #4]	@ (800a75c <__malloc_lock+0x8>)
 800a756:	f7ff bf0e 	b.w	800a576 <__retarget_lock_acquire_recursive>
 800a75a:	bf00      	nop
 800a75c:	2000049c 	.word	0x2000049c

0800a760 <__malloc_unlock>:
 800a760:	4801      	ldr	r0, [pc, #4]	@ (800a768 <__malloc_unlock+0x8>)
 800a762:	f7ff bf09 	b.w	800a578 <__retarget_lock_release_recursive>
 800a766:	bf00      	nop
 800a768:	2000049c 	.word	0x2000049c

0800a76c <__sfputc_r>:
 800a76c:	6893      	ldr	r3, [r2, #8]
 800a76e:	3b01      	subs	r3, #1
 800a770:	2b00      	cmp	r3, #0
 800a772:	6093      	str	r3, [r2, #8]
 800a774:	b410      	push	{r4}
 800a776:	da08      	bge.n	800a78a <__sfputc_r+0x1e>
 800a778:	6994      	ldr	r4, [r2, #24]
 800a77a:	42a3      	cmp	r3, r4
 800a77c:	db01      	blt.n	800a782 <__sfputc_r+0x16>
 800a77e:	290a      	cmp	r1, #10
 800a780:	d103      	bne.n	800a78a <__sfputc_r+0x1e>
 800a782:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a786:	f7ff bde8 	b.w	800a35a <__swbuf_r>
 800a78a:	6813      	ldr	r3, [r2, #0]
 800a78c:	1c58      	adds	r0, r3, #1
 800a78e:	6010      	str	r0, [r2, #0]
 800a790:	4608      	mov	r0, r1
 800a792:	7019      	strb	r1, [r3, #0]
 800a794:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a798:	4770      	bx	lr

0800a79a <__sfputs_r>:
 800a79a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a79c:	4606      	mov	r6, r0
 800a79e:	460f      	mov	r7, r1
 800a7a0:	4614      	mov	r4, r2
 800a7a2:	18d5      	adds	r5, r2, r3
 800a7a4:	42ac      	cmp	r4, r5
 800a7a6:	d101      	bne.n	800a7ac <__sfputs_r+0x12>
 800a7a8:	2000      	movs	r0, #0
 800a7aa:	e007      	b.n	800a7bc <__sfputs_r+0x22>
 800a7ac:	463a      	mov	r2, r7
 800a7ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	f7ff ffda 	bl	800a76c <__sfputc_r>
 800a7b8:	1c43      	adds	r3, r0, #1
 800a7ba:	d1f3      	bne.n	800a7a4 <__sfputs_r+0xa>
 800a7bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a7c0 <_vfiprintf_r>:
 800a7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7c4:	460d      	mov	r5, r1
 800a7c6:	b09d      	sub	sp, #116	@ 0x74
 800a7c8:	4614      	mov	r4, r2
 800a7ca:	4698      	mov	r8, r3
 800a7cc:	4606      	mov	r6, r0
 800a7ce:	b118      	cbz	r0, 800a7d8 <_vfiprintf_r+0x18>
 800a7d0:	6a03      	ldr	r3, [r0, #32]
 800a7d2:	b90b      	cbnz	r3, 800a7d8 <_vfiprintf_r+0x18>
 800a7d4:	f7ff fcd8 	bl	800a188 <__sinit>
 800a7d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a7da:	07d9      	lsls	r1, r3, #31
 800a7dc:	d405      	bmi.n	800a7ea <_vfiprintf_r+0x2a>
 800a7de:	89ab      	ldrh	r3, [r5, #12]
 800a7e0:	059a      	lsls	r2, r3, #22
 800a7e2:	d402      	bmi.n	800a7ea <_vfiprintf_r+0x2a>
 800a7e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a7e6:	f7ff fec6 	bl	800a576 <__retarget_lock_acquire_recursive>
 800a7ea:	89ab      	ldrh	r3, [r5, #12]
 800a7ec:	071b      	lsls	r3, r3, #28
 800a7ee:	d501      	bpl.n	800a7f4 <_vfiprintf_r+0x34>
 800a7f0:	692b      	ldr	r3, [r5, #16]
 800a7f2:	b99b      	cbnz	r3, 800a81c <_vfiprintf_r+0x5c>
 800a7f4:	4629      	mov	r1, r5
 800a7f6:	4630      	mov	r0, r6
 800a7f8:	f7ff fdee 	bl	800a3d8 <__swsetup_r>
 800a7fc:	b170      	cbz	r0, 800a81c <_vfiprintf_r+0x5c>
 800a7fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a800:	07dc      	lsls	r4, r3, #31
 800a802:	d504      	bpl.n	800a80e <_vfiprintf_r+0x4e>
 800a804:	f04f 30ff 	mov.w	r0, #4294967295
 800a808:	b01d      	add	sp, #116	@ 0x74
 800a80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a80e:	89ab      	ldrh	r3, [r5, #12]
 800a810:	0598      	lsls	r0, r3, #22
 800a812:	d4f7      	bmi.n	800a804 <_vfiprintf_r+0x44>
 800a814:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a816:	f7ff feaf 	bl	800a578 <__retarget_lock_release_recursive>
 800a81a:	e7f3      	b.n	800a804 <_vfiprintf_r+0x44>
 800a81c:	2300      	movs	r3, #0
 800a81e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a822:	f04f 0901 	mov.w	r9, #1
 800a826:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800a9dc <_vfiprintf_r+0x21c>
 800a82a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a82c:	2320      	movs	r3, #32
 800a82e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a832:	2330      	movs	r3, #48	@ 0x30
 800a834:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a838:	4623      	mov	r3, r4
 800a83a:	469a      	mov	sl, r3
 800a83c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a840:	b10a      	cbz	r2, 800a846 <_vfiprintf_r+0x86>
 800a842:	2a25      	cmp	r2, #37	@ 0x25
 800a844:	d1f9      	bne.n	800a83a <_vfiprintf_r+0x7a>
 800a846:	ebba 0b04 	subs.w	fp, sl, r4
 800a84a:	d00b      	beq.n	800a864 <_vfiprintf_r+0xa4>
 800a84c:	465b      	mov	r3, fp
 800a84e:	4622      	mov	r2, r4
 800a850:	4629      	mov	r1, r5
 800a852:	4630      	mov	r0, r6
 800a854:	f7ff ffa1 	bl	800a79a <__sfputs_r>
 800a858:	3001      	adds	r0, #1
 800a85a:	f000 80a7 	beq.w	800a9ac <_vfiprintf_r+0x1ec>
 800a85e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a860:	445a      	add	r2, fp
 800a862:	9209      	str	r2, [sp, #36]	@ 0x24
 800a864:	f89a 3000 	ldrb.w	r3, [sl]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	f000 809f 	beq.w	800a9ac <_vfiprintf_r+0x1ec>
 800a86e:	2300      	movs	r3, #0
 800a870:	f04f 32ff 	mov.w	r2, #4294967295
 800a874:	f10a 0a01 	add.w	sl, sl, #1
 800a878:	9304      	str	r3, [sp, #16]
 800a87a:	9307      	str	r3, [sp, #28]
 800a87c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a880:	931a      	str	r3, [sp, #104]	@ 0x68
 800a882:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a886:	4654      	mov	r4, sl
 800a888:	2205      	movs	r2, #5
 800a88a:	4854      	ldr	r0, [pc, #336]	@ (800a9dc <_vfiprintf_r+0x21c>)
 800a88c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a890:	f000 fb80 	bl	800af94 <memchr>
 800a894:	9a04      	ldr	r2, [sp, #16]
 800a896:	b9d8      	cbnz	r0, 800a8d0 <_vfiprintf_r+0x110>
 800a898:	06d1      	lsls	r1, r2, #27
 800a89a:	bf44      	itt	mi
 800a89c:	2320      	movmi	r3, #32
 800a89e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8a2:	0713      	lsls	r3, r2, #28
 800a8a4:	bf44      	itt	mi
 800a8a6:	232b      	movmi	r3, #43	@ 0x2b
 800a8a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8ac:	f89a 3000 	ldrb.w	r3, [sl]
 800a8b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8b2:	d015      	beq.n	800a8e0 <_vfiprintf_r+0x120>
 800a8b4:	9a07      	ldr	r2, [sp, #28]
 800a8b6:	4654      	mov	r4, sl
 800a8b8:	2000      	movs	r0, #0
 800a8ba:	f04f 0c0a 	mov.w	ip, #10
 800a8be:	4621      	mov	r1, r4
 800a8c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8c4:	3b30      	subs	r3, #48	@ 0x30
 800a8c6:	2b09      	cmp	r3, #9
 800a8c8:	d94b      	bls.n	800a962 <_vfiprintf_r+0x1a2>
 800a8ca:	b1b0      	cbz	r0, 800a8fa <_vfiprintf_r+0x13a>
 800a8cc:	9207      	str	r2, [sp, #28]
 800a8ce:	e014      	b.n	800a8fa <_vfiprintf_r+0x13a>
 800a8d0:	eba0 0308 	sub.w	r3, r0, r8
 800a8d4:	46a2      	mov	sl, r4
 800a8d6:	fa09 f303 	lsl.w	r3, r9, r3
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	9304      	str	r3, [sp, #16]
 800a8de:	e7d2      	b.n	800a886 <_vfiprintf_r+0xc6>
 800a8e0:	9b03      	ldr	r3, [sp, #12]
 800a8e2:	1d19      	adds	r1, r3, #4
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	9103      	str	r1, [sp, #12]
 800a8ea:	bfbb      	ittet	lt
 800a8ec:	425b      	neglt	r3, r3
 800a8ee:	f042 0202 	orrlt.w	r2, r2, #2
 800a8f2:	9307      	strge	r3, [sp, #28]
 800a8f4:	9307      	strlt	r3, [sp, #28]
 800a8f6:	bfb8      	it	lt
 800a8f8:	9204      	strlt	r2, [sp, #16]
 800a8fa:	7823      	ldrb	r3, [r4, #0]
 800a8fc:	2b2e      	cmp	r3, #46	@ 0x2e
 800a8fe:	d10a      	bne.n	800a916 <_vfiprintf_r+0x156>
 800a900:	7863      	ldrb	r3, [r4, #1]
 800a902:	2b2a      	cmp	r3, #42	@ 0x2a
 800a904:	d132      	bne.n	800a96c <_vfiprintf_r+0x1ac>
 800a906:	9b03      	ldr	r3, [sp, #12]
 800a908:	3402      	adds	r4, #2
 800a90a:	1d1a      	adds	r2, r3, #4
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a912:	9203      	str	r2, [sp, #12]
 800a914:	9305      	str	r3, [sp, #20]
 800a916:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a9ec <_vfiprintf_r+0x22c>
 800a91a:	2203      	movs	r2, #3
 800a91c:	7821      	ldrb	r1, [r4, #0]
 800a91e:	4650      	mov	r0, sl
 800a920:	f000 fb38 	bl	800af94 <memchr>
 800a924:	b138      	cbz	r0, 800a936 <_vfiprintf_r+0x176>
 800a926:	eba0 000a 	sub.w	r0, r0, sl
 800a92a:	2240      	movs	r2, #64	@ 0x40
 800a92c:	9b04      	ldr	r3, [sp, #16]
 800a92e:	3401      	adds	r4, #1
 800a930:	4082      	lsls	r2, r0
 800a932:	4313      	orrs	r3, r2
 800a934:	9304      	str	r3, [sp, #16]
 800a936:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a93a:	2206      	movs	r2, #6
 800a93c:	4828      	ldr	r0, [pc, #160]	@ (800a9e0 <_vfiprintf_r+0x220>)
 800a93e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a942:	f000 fb27 	bl	800af94 <memchr>
 800a946:	2800      	cmp	r0, #0
 800a948:	d03f      	beq.n	800a9ca <_vfiprintf_r+0x20a>
 800a94a:	4b26      	ldr	r3, [pc, #152]	@ (800a9e4 <_vfiprintf_r+0x224>)
 800a94c:	bb1b      	cbnz	r3, 800a996 <_vfiprintf_r+0x1d6>
 800a94e:	9b03      	ldr	r3, [sp, #12]
 800a950:	3307      	adds	r3, #7
 800a952:	f023 0307 	bic.w	r3, r3, #7
 800a956:	3308      	adds	r3, #8
 800a958:	9303      	str	r3, [sp, #12]
 800a95a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a95c:	443b      	add	r3, r7
 800a95e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a960:	e76a      	b.n	800a838 <_vfiprintf_r+0x78>
 800a962:	fb0c 3202 	mla	r2, ip, r2, r3
 800a966:	460c      	mov	r4, r1
 800a968:	2001      	movs	r0, #1
 800a96a:	e7a8      	b.n	800a8be <_vfiprintf_r+0xfe>
 800a96c:	2300      	movs	r3, #0
 800a96e:	3401      	adds	r4, #1
 800a970:	f04f 0c0a 	mov.w	ip, #10
 800a974:	4619      	mov	r1, r3
 800a976:	9305      	str	r3, [sp, #20]
 800a978:	4620      	mov	r0, r4
 800a97a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a97e:	3a30      	subs	r2, #48	@ 0x30
 800a980:	2a09      	cmp	r2, #9
 800a982:	d903      	bls.n	800a98c <_vfiprintf_r+0x1cc>
 800a984:	2b00      	cmp	r3, #0
 800a986:	d0c6      	beq.n	800a916 <_vfiprintf_r+0x156>
 800a988:	9105      	str	r1, [sp, #20]
 800a98a:	e7c4      	b.n	800a916 <_vfiprintf_r+0x156>
 800a98c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a990:	4604      	mov	r4, r0
 800a992:	2301      	movs	r3, #1
 800a994:	e7f0      	b.n	800a978 <_vfiprintf_r+0x1b8>
 800a996:	ab03      	add	r3, sp, #12
 800a998:	462a      	mov	r2, r5
 800a99a:	a904      	add	r1, sp, #16
 800a99c:	4630      	mov	r0, r6
 800a99e:	9300      	str	r3, [sp, #0]
 800a9a0:	4b11      	ldr	r3, [pc, #68]	@ (800a9e8 <_vfiprintf_r+0x228>)
 800a9a2:	f3af 8000 	nop.w
 800a9a6:	4607      	mov	r7, r0
 800a9a8:	1c78      	adds	r0, r7, #1
 800a9aa:	d1d6      	bne.n	800a95a <_vfiprintf_r+0x19a>
 800a9ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9ae:	07d9      	lsls	r1, r3, #31
 800a9b0:	d405      	bmi.n	800a9be <_vfiprintf_r+0x1fe>
 800a9b2:	89ab      	ldrh	r3, [r5, #12]
 800a9b4:	059a      	lsls	r2, r3, #22
 800a9b6:	d402      	bmi.n	800a9be <_vfiprintf_r+0x1fe>
 800a9b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9ba:	f7ff fddd 	bl	800a578 <__retarget_lock_release_recursive>
 800a9be:	89ab      	ldrh	r3, [r5, #12]
 800a9c0:	065b      	lsls	r3, r3, #25
 800a9c2:	f53f af1f 	bmi.w	800a804 <_vfiprintf_r+0x44>
 800a9c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a9c8:	e71e      	b.n	800a808 <_vfiprintf_r+0x48>
 800a9ca:	ab03      	add	r3, sp, #12
 800a9cc:	462a      	mov	r2, r5
 800a9ce:	a904      	add	r1, sp, #16
 800a9d0:	4630      	mov	r0, r6
 800a9d2:	9300      	str	r3, [sp, #0]
 800a9d4:	4b04      	ldr	r3, [pc, #16]	@ (800a9e8 <_vfiprintf_r+0x228>)
 800a9d6:	f000 f87d 	bl	800aad4 <_printf_i>
 800a9da:	e7e4      	b.n	800a9a6 <_vfiprintf_r+0x1e6>
 800a9dc:	0800b3b4 	.word	0x0800b3b4
 800a9e0:	0800b3be 	.word	0x0800b3be
 800a9e4:	00000000 	.word	0x00000000
 800a9e8:	0800a79b 	.word	0x0800a79b
 800a9ec:	0800b3ba 	.word	0x0800b3ba

0800a9f0 <_printf_common>:
 800a9f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9f4:	4616      	mov	r6, r2
 800a9f6:	4698      	mov	r8, r3
 800a9f8:	688a      	ldr	r2, [r1, #8]
 800a9fa:	4607      	mov	r7, r0
 800a9fc:	690b      	ldr	r3, [r1, #16]
 800a9fe:	460c      	mov	r4, r1
 800aa00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aa04:	4293      	cmp	r3, r2
 800aa06:	bfb8      	it	lt
 800aa08:	4613      	movlt	r3, r2
 800aa0a:	6033      	str	r3, [r6, #0]
 800aa0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aa10:	b10a      	cbz	r2, 800aa16 <_printf_common+0x26>
 800aa12:	3301      	adds	r3, #1
 800aa14:	6033      	str	r3, [r6, #0]
 800aa16:	6823      	ldr	r3, [r4, #0]
 800aa18:	0699      	lsls	r1, r3, #26
 800aa1a:	bf42      	ittt	mi
 800aa1c:	6833      	ldrmi	r3, [r6, #0]
 800aa1e:	3302      	addmi	r3, #2
 800aa20:	6033      	strmi	r3, [r6, #0]
 800aa22:	6825      	ldr	r5, [r4, #0]
 800aa24:	f015 0506 	ands.w	r5, r5, #6
 800aa28:	d106      	bne.n	800aa38 <_printf_common+0x48>
 800aa2a:	f104 0a19 	add.w	sl, r4, #25
 800aa2e:	68e3      	ldr	r3, [r4, #12]
 800aa30:	6832      	ldr	r2, [r6, #0]
 800aa32:	1a9b      	subs	r3, r3, r2
 800aa34:	42ab      	cmp	r3, r5
 800aa36:	dc2b      	bgt.n	800aa90 <_printf_common+0xa0>
 800aa38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aa3c:	6822      	ldr	r2, [r4, #0]
 800aa3e:	3b00      	subs	r3, #0
 800aa40:	bf18      	it	ne
 800aa42:	2301      	movne	r3, #1
 800aa44:	0692      	lsls	r2, r2, #26
 800aa46:	d430      	bmi.n	800aaaa <_printf_common+0xba>
 800aa48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aa4c:	4641      	mov	r1, r8
 800aa4e:	4638      	mov	r0, r7
 800aa50:	47c8      	blx	r9
 800aa52:	3001      	adds	r0, #1
 800aa54:	d023      	beq.n	800aa9e <_printf_common+0xae>
 800aa56:	6823      	ldr	r3, [r4, #0]
 800aa58:	341a      	adds	r4, #26
 800aa5a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800aa5e:	f003 0306 	and.w	r3, r3, #6
 800aa62:	2b04      	cmp	r3, #4
 800aa64:	bf0a      	itet	eq
 800aa66:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800aa6a:	2500      	movne	r5, #0
 800aa6c:	6833      	ldreq	r3, [r6, #0]
 800aa6e:	f04f 0600 	mov.w	r6, #0
 800aa72:	bf08      	it	eq
 800aa74:	1aed      	subeq	r5, r5, r3
 800aa76:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800aa7a:	bf08      	it	eq
 800aa7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa80:	4293      	cmp	r3, r2
 800aa82:	bfc4      	itt	gt
 800aa84:	1a9b      	subgt	r3, r3, r2
 800aa86:	18ed      	addgt	r5, r5, r3
 800aa88:	42b5      	cmp	r5, r6
 800aa8a:	d11a      	bne.n	800aac2 <_printf_common+0xd2>
 800aa8c:	2000      	movs	r0, #0
 800aa8e:	e008      	b.n	800aaa2 <_printf_common+0xb2>
 800aa90:	2301      	movs	r3, #1
 800aa92:	4652      	mov	r2, sl
 800aa94:	4641      	mov	r1, r8
 800aa96:	4638      	mov	r0, r7
 800aa98:	47c8      	blx	r9
 800aa9a:	3001      	adds	r0, #1
 800aa9c:	d103      	bne.n	800aaa6 <_printf_common+0xb6>
 800aa9e:	f04f 30ff 	mov.w	r0, #4294967295
 800aaa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaa6:	3501      	adds	r5, #1
 800aaa8:	e7c1      	b.n	800aa2e <_printf_common+0x3e>
 800aaaa:	18e1      	adds	r1, r4, r3
 800aaac:	1c5a      	adds	r2, r3, #1
 800aaae:	2030      	movs	r0, #48	@ 0x30
 800aab0:	3302      	adds	r3, #2
 800aab2:	4422      	add	r2, r4
 800aab4:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aab8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aabc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aac0:	e7c2      	b.n	800aa48 <_printf_common+0x58>
 800aac2:	2301      	movs	r3, #1
 800aac4:	4622      	mov	r2, r4
 800aac6:	4641      	mov	r1, r8
 800aac8:	4638      	mov	r0, r7
 800aaca:	47c8      	blx	r9
 800aacc:	3001      	adds	r0, #1
 800aace:	d0e6      	beq.n	800aa9e <_printf_common+0xae>
 800aad0:	3601      	adds	r6, #1
 800aad2:	e7d9      	b.n	800aa88 <_printf_common+0x98>

0800aad4 <_printf_i>:
 800aad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aad8:	7e0f      	ldrb	r7, [r1, #24]
 800aada:	4691      	mov	r9, r2
 800aadc:	4680      	mov	r8, r0
 800aade:	460c      	mov	r4, r1
 800aae0:	2f78      	cmp	r7, #120	@ 0x78
 800aae2:	469a      	mov	sl, r3
 800aae4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aae6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aaea:	d807      	bhi.n	800aafc <_printf_i+0x28>
 800aaec:	2f62      	cmp	r7, #98	@ 0x62
 800aaee:	d80a      	bhi.n	800ab06 <_printf_i+0x32>
 800aaf0:	2f00      	cmp	r7, #0
 800aaf2:	f000 80d2 	beq.w	800ac9a <_printf_i+0x1c6>
 800aaf6:	2f58      	cmp	r7, #88	@ 0x58
 800aaf8:	f000 80b9 	beq.w	800ac6e <_printf_i+0x19a>
 800aafc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ab04:	e03a      	b.n	800ab7c <_printf_i+0xa8>
 800ab06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ab0a:	2b15      	cmp	r3, #21
 800ab0c:	d8f6      	bhi.n	800aafc <_printf_i+0x28>
 800ab0e:	a101      	add	r1, pc, #4	@ (adr r1, 800ab14 <_printf_i+0x40>)
 800ab10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab14:	0800ab6d 	.word	0x0800ab6d
 800ab18:	0800ab81 	.word	0x0800ab81
 800ab1c:	0800aafd 	.word	0x0800aafd
 800ab20:	0800aafd 	.word	0x0800aafd
 800ab24:	0800aafd 	.word	0x0800aafd
 800ab28:	0800aafd 	.word	0x0800aafd
 800ab2c:	0800ab81 	.word	0x0800ab81
 800ab30:	0800aafd 	.word	0x0800aafd
 800ab34:	0800aafd 	.word	0x0800aafd
 800ab38:	0800aafd 	.word	0x0800aafd
 800ab3c:	0800aafd 	.word	0x0800aafd
 800ab40:	0800ac81 	.word	0x0800ac81
 800ab44:	0800abab 	.word	0x0800abab
 800ab48:	0800ac3b 	.word	0x0800ac3b
 800ab4c:	0800aafd 	.word	0x0800aafd
 800ab50:	0800aafd 	.word	0x0800aafd
 800ab54:	0800aca3 	.word	0x0800aca3
 800ab58:	0800aafd 	.word	0x0800aafd
 800ab5c:	0800abab 	.word	0x0800abab
 800ab60:	0800aafd 	.word	0x0800aafd
 800ab64:	0800aafd 	.word	0x0800aafd
 800ab68:	0800ac43 	.word	0x0800ac43
 800ab6c:	6833      	ldr	r3, [r6, #0]
 800ab6e:	1d1a      	adds	r2, r3, #4
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	6032      	str	r2, [r6, #0]
 800ab74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	e09d      	b.n	800acbc <_printf_i+0x1e8>
 800ab80:	6833      	ldr	r3, [r6, #0]
 800ab82:	6820      	ldr	r0, [r4, #0]
 800ab84:	1d19      	adds	r1, r3, #4
 800ab86:	6031      	str	r1, [r6, #0]
 800ab88:	0606      	lsls	r6, r0, #24
 800ab8a:	d501      	bpl.n	800ab90 <_printf_i+0xbc>
 800ab8c:	681d      	ldr	r5, [r3, #0]
 800ab8e:	e003      	b.n	800ab98 <_printf_i+0xc4>
 800ab90:	0645      	lsls	r5, r0, #25
 800ab92:	d5fb      	bpl.n	800ab8c <_printf_i+0xb8>
 800ab94:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ab98:	2d00      	cmp	r5, #0
 800ab9a:	da03      	bge.n	800aba4 <_printf_i+0xd0>
 800ab9c:	232d      	movs	r3, #45	@ 0x2d
 800ab9e:	426d      	negs	r5, r5
 800aba0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aba4:	4859      	ldr	r0, [pc, #356]	@ (800ad0c <_printf_i+0x238>)
 800aba6:	230a      	movs	r3, #10
 800aba8:	e011      	b.n	800abce <_printf_i+0xfa>
 800abaa:	6821      	ldr	r1, [r4, #0]
 800abac:	6833      	ldr	r3, [r6, #0]
 800abae:	0608      	lsls	r0, r1, #24
 800abb0:	f853 5b04 	ldr.w	r5, [r3], #4
 800abb4:	d402      	bmi.n	800abbc <_printf_i+0xe8>
 800abb6:	0649      	lsls	r1, r1, #25
 800abb8:	bf48      	it	mi
 800abba:	b2ad      	uxthmi	r5, r5
 800abbc:	2f6f      	cmp	r7, #111	@ 0x6f
 800abbe:	6033      	str	r3, [r6, #0]
 800abc0:	4852      	ldr	r0, [pc, #328]	@ (800ad0c <_printf_i+0x238>)
 800abc2:	bf14      	ite	ne
 800abc4:	230a      	movne	r3, #10
 800abc6:	2308      	moveq	r3, #8
 800abc8:	2100      	movs	r1, #0
 800abca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800abce:	6866      	ldr	r6, [r4, #4]
 800abd0:	2e00      	cmp	r6, #0
 800abd2:	60a6      	str	r6, [r4, #8]
 800abd4:	bfa2      	ittt	ge
 800abd6:	6821      	ldrge	r1, [r4, #0]
 800abd8:	f021 0104 	bicge.w	r1, r1, #4
 800abdc:	6021      	strge	r1, [r4, #0]
 800abde:	b90d      	cbnz	r5, 800abe4 <_printf_i+0x110>
 800abe0:	2e00      	cmp	r6, #0
 800abe2:	d04b      	beq.n	800ac7c <_printf_i+0x1a8>
 800abe4:	4616      	mov	r6, r2
 800abe6:	fbb5 f1f3 	udiv	r1, r5, r3
 800abea:	fb03 5711 	mls	r7, r3, r1, r5
 800abee:	5dc7      	ldrb	r7, [r0, r7]
 800abf0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800abf4:	462f      	mov	r7, r5
 800abf6:	460d      	mov	r5, r1
 800abf8:	42bb      	cmp	r3, r7
 800abfa:	d9f4      	bls.n	800abe6 <_printf_i+0x112>
 800abfc:	2b08      	cmp	r3, #8
 800abfe:	d10b      	bne.n	800ac18 <_printf_i+0x144>
 800ac00:	6823      	ldr	r3, [r4, #0]
 800ac02:	07df      	lsls	r7, r3, #31
 800ac04:	d508      	bpl.n	800ac18 <_printf_i+0x144>
 800ac06:	6923      	ldr	r3, [r4, #16]
 800ac08:	6861      	ldr	r1, [r4, #4]
 800ac0a:	4299      	cmp	r1, r3
 800ac0c:	bfde      	ittt	le
 800ac0e:	2330      	movle	r3, #48	@ 0x30
 800ac10:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ac14:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ac18:	1b92      	subs	r2, r2, r6
 800ac1a:	6122      	str	r2, [r4, #16]
 800ac1c:	464b      	mov	r3, r9
 800ac1e:	aa03      	add	r2, sp, #12
 800ac20:	4621      	mov	r1, r4
 800ac22:	4640      	mov	r0, r8
 800ac24:	f8cd a000 	str.w	sl, [sp]
 800ac28:	f7ff fee2 	bl	800a9f0 <_printf_common>
 800ac2c:	3001      	adds	r0, #1
 800ac2e:	d14a      	bne.n	800acc6 <_printf_i+0x1f2>
 800ac30:	f04f 30ff 	mov.w	r0, #4294967295
 800ac34:	b004      	add	sp, #16
 800ac36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac3a:	6823      	ldr	r3, [r4, #0]
 800ac3c:	f043 0320 	orr.w	r3, r3, #32
 800ac40:	6023      	str	r3, [r4, #0]
 800ac42:	2778      	movs	r7, #120	@ 0x78
 800ac44:	4832      	ldr	r0, [pc, #200]	@ (800ad10 <_printf_i+0x23c>)
 800ac46:	6823      	ldr	r3, [r4, #0]
 800ac48:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ac4c:	061f      	lsls	r7, r3, #24
 800ac4e:	6831      	ldr	r1, [r6, #0]
 800ac50:	f851 5b04 	ldr.w	r5, [r1], #4
 800ac54:	d402      	bmi.n	800ac5c <_printf_i+0x188>
 800ac56:	065f      	lsls	r7, r3, #25
 800ac58:	bf48      	it	mi
 800ac5a:	b2ad      	uxthmi	r5, r5
 800ac5c:	6031      	str	r1, [r6, #0]
 800ac5e:	07d9      	lsls	r1, r3, #31
 800ac60:	bf44      	itt	mi
 800ac62:	f043 0320 	orrmi.w	r3, r3, #32
 800ac66:	6023      	strmi	r3, [r4, #0]
 800ac68:	b11d      	cbz	r5, 800ac72 <_printf_i+0x19e>
 800ac6a:	2310      	movs	r3, #16
 800ac6c:	e7ac      	b.n	800abc8 <_printf_i+0xf4>
 800ac6e:	4827      	ldr	r0, [pc, #156]	@ (800ad0c <_printf_i+0x238>)
 800ac70:	e7e9      	b.n	800ac46 <_printf_i+0x172>
 800ac72:	6823      	ldr	r3, [r4, #0]
 800ac74:	f023 0320 	bic.w	r3, r3, #32
 800ac78:	6023      	str	r3, [r4, #0]
 800ac7a:	e7f6      	b.n	800ac6a <_printf_i+0x196>
 800ac7c:	4616      	mov	r6, r2
 800ac7e:	e7bd      	b.n	800abfc <_printf_i+0x128>
 800ac80:	6833      	ldr	r3, [r6, #0]
 800ac82:	6825      	ldr	r5, [r4, #0]
 800ac84:	1d18      	adds	r0, r3, #4
 800ac86:	6961      	ldr	r1, [r4, #20]
 800ac88:	6030      	str	r0, [r6, #0]
 800ac8a:	062e      	lsls	r6, r5, #24
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	d501      	bpl.n	800ac94 <_printf_i+0x1c0>
 800ac90:	6019      	str	r1, [r3, #0]
 800ac92:	e002      	b.n	800ac9a <_printf_i+0x1c6>
 800ac94:	0668      	lsls	r0, r5, #25
 800ac96:	d5fb      	bpl.n	800ac90 <_printf_i+0x1bc>
 800ac98:	8019      	strh	r1, [r3, #0]
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	4616      	mov	r6, r2
 800ac9e:	6123      	str	r3, [r4, #16]
 800aca0:	e7bc      	b.n	800ac1c <_printf_i+0x148>
 800aca2:	6833      	ldr	r3, [r6, #0]
 800aca4:	2100      	movs	r1, #0
 800aca6:	1d1a      	adds	r2, r3, #4
 800aca8:	6032      	str	r2, [r6, #0]
 800acaa:	681e      	ldr	r6, [r3, #0]
 800acac:	6862      	ldr	r2, [r4, #4]
 800acae:	4630      	mov	r0, r6
 800acb0:	f000 f970 	bl	800af94 <memchr>
 800acb4:	b108      	cbz	r0, 800acba <_printf_i+0x1e6>
 800acb6:	1b80      	subs	r0, r0, r6
 800acb8:	6060      	str	r0, [r4, #4]
 800acba:	6863      	ldr	r3, [r4, #4]
 800acbc:	6123      	str	r3, [r4, #16]
 800acbe:	2300      	movs	r3, #0
 800acc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800acc4:	e7aa      	b.n	800ac1c <_printf_i+0x148>
 800acc6:	6923      	ldr	r3, [r4, #16]
 800acc8:	4632      	mov	r2, r6
 800acca:	4649      	mov	r1, r9
 800accc:	4640      	mov	r0, r8
 800acce:	47d0      	blx	sl
 800acd0:	3001      	adds	r0, #1
 800acd2:	d0ad      	beq.n	800ac30 <_printf_i+0x15c>
 800acd4:	6823      	ldr	r3, [r4, #0]
 800acd6:	079b      	lsls	r3, r3, #30
 800acd8:	d413      	bmi.n	800ad02 <_printf_i+0x22e>
 800acda:	68e0      	ldr	r0, [r4, #12]
 800acdc:	9b03      	ldr	r3, [sp, #12]
 800acde:	4298      	cmp	r0, r3
 800ace0:	bfb8      	it	lt
 800ace2:	4618      	movlt	r0, r3
 800ace4:	e7a6      	b.n	800ac34 <_printf_i+0x160>
 800ace6:	2301      	movs	r3, #1
 800ace8:	4632      	mov	r2, r6
 800acea:	4649      	mov	r1, r9
 800acec:	4640      	mov	r0, r8
 800acee:	47d0      	blx	sl
 800acf0:	3001      	adds	r0, #1
 800acf2:	d09d      	beq.n	800ac30 <_printf_i+0x15c>
 800acf4:	3501      	adds	r5, #1
 800acf6:	68e3      	ldr	r3, [r4, #12]
 800acf8:	9903      	ldr	r1, [sp, #12]
 800acfa:	1a5b      	subs	r3, r3, r1
 800acfc:	42ab      	cmp	r3, r5
 800acfe:	dcf2      	bgt.n	800ace6 <_printf_i+0x212>
 800ad00:	e7eb      	b.n	800acda <_printf_i+0x206>
 800ad02:	2500      	movs	r5, #0
 800ad04:	f104 0619 	add.w	r6, r4, #25
 800ad08:	e7f5      	b.n	800acf6 <_printf_i+0x222>
 800ad0a:	bf00      	nop
 800ad0c:	0800b3c5 	.word	0x0800b3c5
 800ad10:	0800b3d6 	.word	0x0800b3d6

0800ad14 <__sflush_r>:
 800ad14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad1c:	0716      	lsls	r6, r2, #28
 800ad1e:	4605      	mov	r5, r0
 800ad20:	460c      	mov	r4, r1
 800ad22:	d454      	bmi.n	800adce <__sflush_r+0xba>
 800ad24:	684b      	ldr	r3, [r1, #4]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	dc02      	bgt.n	800ad30 <__sflush_r+0x1c>
 800ad2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	dd48      	ble.n	800adc2 <__sflush_r+0xae>
 800ad30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad32:	2e00      	cmp	r6, #0
 800ad34:	d045      	beq.n	800adc2 <__sflush_r+0xae>
 800ad36:	2300      	movs	r3, #0
 800ad38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ad3c:	682f      	ldr	r7, [r5, #0]
 800ad3e:	6a21      	ldr	r1, [r4, #32]
 800ad40:	602b      	str	r3, [r5, #0]
 800ad42:	d030      	beq.n	800ada6 <__sflush_r+0x92>
 800ad44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ad46:	89a3      	ldrh	r3, [r4, #12]
 800ad48:	0759      	lsls	r1, r3, #29
 800ad4a:	d505      	bpl.n	800ad58 <__sflush_r+0x44>
 800ad4c:	6863      	ldr	r3, [r4, #4]
 800ad4e:	1ad2      	subs	r2, r2, r3
 800ad50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ad52:	b10b      	cbz	r3, 800ad58 <__sflush_r+0x44>
 800ad54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ad56:	1ad2      	subs	r2, r2, r3
 800ad58:	2300      	movs	r3, #0
 800ad5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad5c:	6a21      	ldr	r1, [r4, #32]
 800ad5e:	4628      	mov	r0, r5
 800ad60:	47b0      	blx	r6
 800ad62:	1c43      	adds	r3, r0, #1
 800ad64:	89a3      	ldrh	r3, [r4, #12]
 800ad66:	d106      	bne.n	800ad76 <__sflush_r+0x62>
 800ad68:	6829      	ldr	r1, [r5, #0]
 800ad6a:	291d      	cmp	r1, #29
 800ad6c:	d82b      	bhi.n	800adc6 <__sflush_r+0xb2>
 800ad6e:	4a2a      	ldr	r2, [pc, #168]	@ (800ae18 <__sflush_r+0x104>)
 800ad70:	410a      	asrs	r2, r1
 800ad72:	07d6      	lsls	r6, r2, #31
 800ad74:	d427      	bmi.n	800adc6 <__sflush_r+0xb2>
 800ad76:	2200      	movs	r2, #0
 800ad78:	04d9      	lsls	r1, r3, #19
 800ad7a:	6062      	str	r2, [r4, #4]
 800ad7c:	6922      	ldr	r2, [r4, #16]
 800ad7e:	6022      	str	r2, [r4, #0]
 800ad80:	d504      	bpl.n	800ad8c <__sflush_r+0x78>
 800ad82:	1c42      	adds	r2, r0, #1
 800ad84:	d101      	bne.n	800ad8a <__sflush_r+0x76>
 800ad86:	682b      	ldr	r3, [r5, #0]
 800ad88:	b903      	cbnz	r3, 800ad8c <__sflush_r+0x78>
 800ad8a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ad8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad8e:	602f      	str	r7, [r5, #0]
 800ad90:	b1b9      	cbz	r1, 800adc2 <__sflush_r+0xae>
 800ad92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad96:	4299      	cmp	r1, r3
 800ad98:	d002      	beq.n	800ada0 <__sflush_r+0x8c>
 800ad9a:	4628      	mov	r0, r5
 800ad9c:	f7ff fbee 	bl	800a57c <_free_r>
 800ada0:	2300      	movs	r3, #0
 800ada2:	6363      	str	r3, [r4, #52]	@ 0x34
 800ada4:	e00d      	b.n	800adc2 <__sflush_r+0xae>
 800ada6:	2301      	movs	r3, #1
 800ada8:	4628      	mov	r0, r5
 800adaa:	47b0      	blx	r6
 800adac:	4602      	mov	r2, r0
 800adae:	1c50      	adds	r0, r2, #1
 800adb0:	d1c9      	bne.n	800ad46 <__sflush_r+0x32>
 800adb2:	682b      	ldr	r3, [r5, #0]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d0c6      	beq.n	800ad46 <__sflush_r+0x32>
 800adb8:	2b1d      	cmp	r3, #29
 800adba:	d001      	beq.n	800adc0 <__sflush_r+0xac>
 800adbc:	2b16      	cmp	r3, #22
 800adbe:	d11d      	bne.n	800adfc <__sflush_r+0xe8>
 800adc0:	602f      	str	r7, [r5, #0]
 800adc2:	2000      	movs	r0, #0
 800adc4:	e021      	b.n	800ae0a <__sflush_r+0xf6>
 800adc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adca:	b21b      	sxth	r3, r3
 800adcc:	e01a      	b.n	800ae04 <__sflush_r+0xf0>
 800adce:	690f      	ldr	r7, [r1, #16]
 800add0:	2f00      	cmp	r7, #0
 800add2:	d0f6      	beq.n	800adc2 <__sflush_r+0xae>
 800add4:	0793      	lsls	r3, r2, #30
 800add6:	680e      	ldr	r6, [r1, #0]
 800add8:	600f      	str	r7, [r1, #0]
 800adda:	bf0c      	ite	eq
 800addc:	694b      	ldreq	r3, [r1, #20]
 800adde:	2300      	movne	r3, #0
 800ade0:	eba6 0807 	sub.w	r8, r6, r7
 800ade4:	608b      	str	r3, [r1, #8]
 800ade6:	f1b8 0f00 	cmp.w	r8, #0
 800adea:	ddea      	ble.n	800adc2 <__sflush_r+0xae>
 800adec:	4643      	mov	r3, r8
 800adee:	463a      	mov	r2, r7
 800adf0:	6a21      	ldr	r1, [r4, #32]
 800adf2:	4628      	mov	r0, r5
 800adf4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800adf6:	47b0      	blx	r6
 800adf8:	2800      	cmp	r0, #0
 800adfa:	dc08      	bgt.n	800ae0e <__sflush_r+0xfa>
 800adfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae04:	f04f 30ff 	mov.w	r0, #4294967295
 800ae08:	81a3      	strh	r3, [r4, #12]
 800ae0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae0e:	4407      	add	r7, r0
 800ae10:	eba8 0800 	sub.w	r8, r8, r0
 800ae14:	e7e7      	b.n	800ade6 <__sflush_r+0xd2>
 800ae16:	bf00      	nop
 800ae18:	dfbffffe 	.word	0xdfbffffe

0800ae1c <_fflush_r>:
 800ae1c:	b538      	push	{r3, r4, r5, lr}
 800ae1e:	690b      	ldr	r3, [r1, #16]
 800ae20:	4605      	mov	r5, r0
 800ae22:	460c      	mov	r4, r1
 800ae24:	b913      	cbnz	r3, 800ae2c <_fflush_r+0x10>
 800ae26:	2500      	movs	r5, #0
 800ae28:	4628      	mov	r0, r5
 800ae2a:	bd38      	pop	{r3, r4, r5, pc}
 800ae2c:	b118      	cbz	r0, 800ae36 <_fflush_r+0x1a>
 800ae2e:	6a03      	ldr	r3, [r0, #32]
 800ae30:	b90b      	cbnz	r3, 800ae36 <_fflush_r+0x1a>
 800ae32:	f7ff f9a9 	bl	800a188 <__sinit>
 800ae36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d0f3      	beq.n	800ae26 <_fflush_r+0xa>
 800ae3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ae40:	07d0      	lsls	r0, r2, #31
 800ae42:	d404      	bmi.n	800ae4e <_fflush_r+0x32>
 800ae44:	0599      	lsls	r1, r3, #22
 800ae46:	d402      	bmi.n	800ae4e <_fflush_r+0x32>
 800ae48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae4a:	f7ff fb94 	bl	800a576 <__retarget_lock_acquire_recursive>
 800ae4e:	4628      	mov	r0, r5
 800ae50:	4621      	mov	r1, r4
 800ae52:	f7ff ff5f 	bl	800ad14 <__sflush_r>
 800ae56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae58:	4605      	mov	r5, r0
 800ae5a:	07da      	lsls	r2, r3, #31
 800ae5c:	d4e4      	bmi.n	800ae28 <_fflush_r+0xc>
 800ae5e:	89a3      	ldrh	r3, [r4, #12]
 800ae60:	059b      	lsls	r3, r3, #22
 800ae62:	d4e1      	bmi.n	800ae28 <_fflush_r+0xc>
 800ae64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae66:	f7ff fb87 	bl	800a578 <__retarget_lock_release_recursive>
 800ae6a:	e7dd      	b.n	800ae28 <_fflush_r+0xc>

0800ae6c <__swhatbuf_r>:
 800ae6c:	b570      	push	{r4, r5, r6, lr}
 800ae6e:	460c      	mov	r4, r1
 800ae70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae74:	b096      	sub	sp, #88	@ 0x58
 800ae76:	4615      	mov	r5, r2
 800ae78:	2900      	cmp	r1, #0
 800ae7a:	461e      	mov	r6, r3
 800ae7c:	da0c      	bge.n	800ae98 <__swhatbuf_r+0x2c>
 800ae7e:	89a3      	ldrh	r3, [r4, #12]
 800ae80:	2100      	movs	r1, #0
 800ae82:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ae86:	bf14      	ite	ne
 800ae88:	2340      	movne	r3, #64	@ 0x40
 800ae8a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ae8e:	2000      	movs	r0, #0
 800ae90:	6031      	str	r1, [r6, #0]
 800ae92:	602b      	str	r3, [r5, #0]
 800ae94:	b016      	add	sp, #88	@ 0x58
 800ae96:	bd70      	pop	{r4, r5, r6, pc}
 800ae98:	466a      	mov	r2, sp
 800ae9a:	f000 f849 	bl	800af30 <_fstat_r>
 800ae9e:	2800      	cmp	r0, #0
 800aea0:	dbed      	blt.n	800ae7e <__swhatbuf_r+0x12>
 800aea2:	9901      	ldr	r1, [sp, #4]
 800aea4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aea8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aeac:	4259      	negs	r1, r3
 800aeae:	4159      	adcs	r1, r3
 800aeb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aeb4:	e7eb      	b.n	800ae8e <__swhatbuf_r+0x22>

0800aeb6 <__smakebuf_r>:
 800aeb6:	898b      	ldrh	r3, [r1, #12]
 800aeb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aeba:	079d      	lsls	r5, r3, #30
 800aebc:	4606      	mov	r6, r0
 800aebe:	460c      	mov	r4, r1
 800aec0:	d507      	bpl.n	800aed2 <__smakebuf_r+0x1c>
 800aec2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aec6:	6023      	str	r3, [r4, #0]
 800aec8:	6123      	str	r3, [r4, #16]
 800aeca:	2301      	movs	r3, #1
 800aecc:	6163      	str	r3, [r4, #20]
 800aece:	b003      	add	sp, #12
 800aed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aed2:	ab01      	add	r3, sp, #4
 800aed4:	466a      	mov	r2, sp
 800aed6:	f7ff ffc9 	bl	800ae6c <__swhatbuf_r>
 800aeda:	9f00      	ldr	r7, [sp, #0]
 800aedc:	4605      	mov	r5, r0
 800aede:	4630      	mov	r0, r6
 800aee0:	4639      	mov	r1, r7
 800aee2:	f7ff fbb7 	bl	800a654 <_malloc_r>
 800aee6:	b948      	cbnz	r0, 800aefc <__smakebuf_r+0x46>
 800aee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aeec:	059a      	lsls	r2, r3, #22
 800aeee:	d4ee      	bmi.n	800aece <__smakebuf_r+0x18>
 800aef0:	f023 0303 	bic.w	r3, r3, #3
 800aef4:	f043 0302 	orr.w	r3, r3, #2
 800aef8:	81a3      	strh	r3, [r4, #12]
 800aefa:	e7e2      	b.n	800aec2 <__smakebuf_r+0xc>
 800aefc:	89a3      	ldrh	r3, [r4, #12]
 800aefe:	6020      	str	r0, [r4, #0]
 800af00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af04:	81a3      	strh	r3, [r4, #12]
 800af06:	9b01      	ldr	r3, [sp, #4]
 800af08:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800af0c:	b15b      	cbz	r3, 800af26 <__smakebuf_r+0x70>
 800af0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af12:	4630      	mov	r0, r6
 800af14:	f000 f81e 	bl	800af54 <_isatty_r>
 800af18:	b128      	cbz	r0, 800af26 <__smakebuf_r+0x70>
 800af1a:	89a3      	ldrh	r3, [r4, #12]
 800af1c:	f023 0303 	bic.w	r3, r3, #3
 800af20:	f043 0301 	orr.w	r3, r3, #1
 800af24:	81a3      	strh	r3, [r4, #12]
 800af26:	89a3      	ldrh	r3, [r4, #12]
 800af28:	431d      	orrs	r5, r3
 800af2a:	81a5      	strh	r5, [r4, #12]
 800af2c:	e7cf      	b.n	800aece <__smakebuf_r+0x18>
	...

0800af30 <_fstat_r>:
 800af30:	b538      	push	{r3, r4, r5, lr}
 800af32:	2300      	movs	r3, #0
 800af34:	4d06      	ldr	r5, [pc, #24]	@ (800af50 <_fstat_r+0x20>)
 800af36:	4604      	mov	r4, r0
 800af38:	4608      	mov	r0, r1
 800af3a:	4611      	mov	r1, r2
 800af3c:	602b      	str	r3, [r5, #0]
 800af3e:	f7f6 fcec 	bl	800191a <_fstat>
 800af42:	1c43      	adds	r3, r0, #1
 800af44:	d102      	bne.n	800af4c <_fstat_r+0x1c>
 800af46:	682b      	ldr	r3, [r5, #0]
 800af48:	b103      	cbz	r3, 800af4c <_fstat_r+0x1c>
 800af4a:	6023      	str	r3, [r4, #0]
 800af4c:	bd38      	pop	{r3, r4, r5, pc}
 800af4e:	bf00      	nop
 800af50:	20000498 	.word	0x20000498

0800af54 <_isatty_r>:
 800af54:	b538      	push	{r3, r4, r5, lr}
 800af56:	2300      	movs	r3, #0
 800af58:	4d05      	ldr	r5, [pc, #20]	@ (800af70 <_isatty_r+0x1c>)
 800af5a:	4604      	mov	r4, r0
 800af5c:	4608      	mov	r0, r1
 800af5e:	602b      	str	r3, [r5, #0]
 800af60:	f7f6 fceb 	bl	800193a <_isatty>
 800af64:	1c43      	adds	r3, r0, #1
 800af66:	d102      	bne.n	800af6e <_isatty_r+0x1a>
 800af68:	682b      	ldr	r3, [r5, #0]
 800af6a:	b103      	cbz	r3, 800af6e <_isatty_r+0x1a>
 800af6c:	6023      	str	r3, [r4, #0]
 800af6e:	bd38      	pop	{r3, r4, r5, pc}
 800af70:	20000498 	.word	0x20000498

0800af74 <_sbrk_r>:
 800af74:	b538      	push	{r3, r4, r5, lr}
 800af76:	2300      	movs	r3, #0
 800af78:	4d05      	ldr	r5, [pc, #20]	@ (800af90 <_sbrk_r+0x1c>)
 800af7a:	4604      	mov	r4, r0
 800af7c:	4608      	mov	r0, r1
 800af7e:	602b      	str	r3, [r5, #0]
 800af80:	f7f6 fcf4 	bl	800196c <_sbrk>
 800af84:	1c43      	adds	r3, r0, #1
 800af86:	d102      	bne.n	800af8e <_sbrk_r+0x1a>
 800af88:	682b      	ldr	r3, [r5, #0]
 800af8a:	b103      	cbz	r3, 800af8e <_sbrk_r+0x1a>
 800af8c:	6023      	str	r3, [r4, #0]
 800af8e:	bd38      	pop	{r3, r4, r5, pc}
 800af90:	20000498 	.word	0x20000498

0800af94 <memchr>:
 800af94:	b2c9      	uxtb	r1, r1
 800af96:	4603      	mov	r3, r0
 800af98:	4402      	add	r2, r0
 800af9a:	b510      	push	{r4, lr}
 800af9c:	4293      	cmp	r3, r2
 800af9e:	4618      	mov	r0, r3
 800afa0:	d101      	bne.n	800afa6 <memchr+0x12>
 800afa2:	2000      	movs	r0, #0
 800afa4:	e003      	b.n	800afae <memchr+0x1a>
 800afa6:	7804      	ldrb	r4, [r0, #0]
 800afa8:	3301      	adds	r3, #1
 800afaa:	428c      	cmp	r4, r1
 800afac:	d1f6      	bne.n	800af9c <memchr+0x8>
 800afae:	bd10      	pop	{r4, pc}

0800afb0 <_init>:
 800afb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afb2:	bf00      	nop
 800afb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afb6:	bc08      	pop	{r3}
 800afb8:	469e      	mov	lr, r3
 800afba:	4770      	bx	lr

0800afbc <_fini>:
 800afbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afbe:	bf00      	nop
 800afc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afc2:	bc08      	pop	{r3}
 800afc4:	469e      	mov	lr, r3
 800afc6:	4770      	bx	lr
