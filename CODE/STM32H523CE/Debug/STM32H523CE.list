
STM32H523CE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000104cc  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000848  08010728  08010728  00011728  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010f70  08010f70  000121dc  2**0
                  CONTENTS
  4 .ARM          00000008  08010f70  08010f70  00011f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010f78  08010f78  000121dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010f78  08010f78  00011f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010f7c  08010f7c  00011f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08010f80  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000624  200001dc  0801115c  000121dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000800  0801115c  00012800  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000121dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c2a3  00000000  00000000  00012212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002eea  00000000  00000000  0002e4b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b0  00000000  00000000  000313a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000128f  00000000  00000000  00032b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cff5  00000000  00000000  00033ddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d966  00000000  00000000  00060dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012009b  00000000  00000000  0007e73a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019e7d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d48  00000000  00000000  0019e818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001a6560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	200001dc 	.word	0x200001dc
 8000274:	00000000 	.word	0x00000000
 8000278:	0801070c 	.word	0x0801070c

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	200001e0 	.word	0x200001e0
 8000294:	0801070c 	.word	0x0801070c

08000298 <strlen>:
 8000298:	4603      	mov	r3, r0
 800029a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029e:	2a00      	cmp	r2, #0
 80002a0:	d1fb      	bne.n	800029a <strlen+0x2>
 80002a2:	1a18      	subs	r0, r3, r0
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr

080002a8 <__aeabi_drsub>:
 80002a8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002ac:	e002      	b.n	80002b4 <__adddf3>
 80002ae:	bf00      	nop

080002b0 <__aeabi_dsub>:
 80002b0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002b4 <__adddf3>:
 80002b4:	b530      	push	{r4, r5, lr}
 80002b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002be:	ea94 0f05 	teq	r4, r5
 80002c2:	bf08      	it	eq
 80002c4:	ea90 0f02 	teqeq	r0, r2
 80002c8:	bf1f      	itttt	ne
 80002ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002da:	f000 80e2 	beq.w	80004a2 <__adddf3+0x1ee>
 80002de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e6:	bfb8      	it	lt
 80002e8:	426d      	neglt	r5, r5
 80002ea:	dd0c      	ble.n	8000306 <__adddf3+0x52>
 80002ec:	442c      	add	r4, r5
 80002ee:	ea80 0202 	eor.w	r2, r0, r2
 80002f2:	ea81 0303 	eor.w	r3, r1, r3
 80002f6:	ea82 0000 	eor.w	r0, r2, r0
 80002fa:	ea83 0101 	eor.w	r1, r3, r1
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	2d36      	cmp	r5, #54	@ 0x36
 8000308:	bf88      	it	hi
 800030a:	bd30      	pophi	{r4, r5, pc}
 800030c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000310:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000314:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000318:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x70>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000328:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800032c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000330:	d002      	beq.n	8000338 <__adddf3+0x84>
 8000332:	4252      	negs	r2, r2
 8000334:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000338:	ea94 0f05 	teq	r4, r5
 800033c:	f000 80a7 	beq.w	800048e <__adddf3+0x1da>
 8000340:	f1a4 0401 	sub.w	r4, r4, #1
 8000344:	f1d5 0e20 	rsbs	lr, r5, #32
 8000348:	db0d      	blt.n	8000366 <__adddf3+0xb2>
 800034a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034e:	fa22 f205 	lsr.w	r2, r2, r5
 8000352:	1880      	adds	r0, r0, r2
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	fa03 f20e 	lsl.w	r2, r3, lr
 800035c:	1880      	adds	r0, r0, r2
 800035e:	fa43 f305 	asr.w	r3, r3, r5
 8000362:	4159      	adcs	r1, r3
 8000364:	e00e      	b.n	8000384 <__adddf3+0xd0>
 8000366:	f1a5 0520 	sub.w	r5, r5, #32
 800036a:	f10e 0e20 	add.w	lr, lr, #32
 800036e:	2a01      	cmp	r2, #1
 8000370:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000374:	bf28      	it	cs
 8000376:	f04c 0c02 	orrcs.w	ip, ip, #2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	18c0      	adds	r0, r0, r3
 8000380:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000384:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000388:	d507      	bpl.n	800039a <__adddf3+0xe6>
 800038a:	f04f 0e00 	mov.w	lr, #0
 800038e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000392:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000396:	eb6e 0101 	sbc.w	r1, lr, r1
 800039a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800039e:	d31b      	bcc.n	80003d8 <__adddf3+0x124>
 80003a0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003a4:	d30c      	bcc.n	80003c0 <__adddf3+0x10c>
 80003a6:	0849      	lsrs	r1, r1, #1
 80003a8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b0:	f104 0401 	add.w	r4, r4, #1
 80003b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003bc:	f080 809a 	bcs.w	80004f4 <__adddf3+0x240>
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003c4:	bf08      	it	eq
 80003c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ca:	f150 0000 	adcs.w	r0, r0, #0
 80003ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003d2:	ea41 0105 	orr.w	r1, r1, r5
 80003d6:	bd30      	pop	{r4, r5, pc}
 80003d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003dc:	4140      	adcs	r0, r0
 80003de:	eb41 0101 	adc.w	r1, r1, r1
 80003e2:	3c01      	subs	r4, #1
 80003e4:	bf28      	it	cs
 80003e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ea:	d2e9      	bcs.n	80003c0 <__adddf3+0x10c>
 80003ec:	f091 0f00 	teq	r1, #0
 80003f0:	bf04      	itt	eq
 80003f2:	4601      	moveq	r1, r0
 80003f4:	2000      	moveq	r0, #0
 80003f6:	fab1 f381 	clz	r3, r1
 80003fa:	bf08      	it	eq
 80003fc:	3320      	addeq	r3, #32
 80003fe:	f1a3 030b 	sub.w	r3, r3, #11
 8000402:	f1b3 0220 	subs.w	r2, r3, #32
 8000406:	da0c      	bge.n	8000422 <__adddf3+0x16e>
 8000408:	320c      	adds	r2, #12
 800040a:	dd08      	ble.n	800041e <__adddf3+0x16a>
 800040c:	f102 0c14 	add.w	ip, r2, #20
 8000410:	f1c2 020c 	rsb	r2, r2, #12
 8000414:	fa01 f00c 	lsl.w	r0, r1, ip
 8000418:	fa21 f102 	lsr.w	r1, r1, r2
 800041c:	e00c      	b.n	8000438 <__adddf3+0x184>
 800041e:	f102 0214 	add.w	r2, r2, #20
 8000422:	bfd8      	it	le
 8000424:	f1c2 0c20 	rsble	ip, r2, #32
 8000428:	fa01 f102 	lsl.w	r1, r1, r2
 800042c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000430:	bfdc      	itt	le
 8000432:	ea41 010c 	orrle.w	r1, r1, ip
 8000436:	4090      	lslle	r0, r2
 8000438:	1ae4      	subs	r4, r4, r3
 800043a:	bfa2      	ittt	ge
 800043c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000440:	4329      	orrge	r1, r5
 8000442:	bd30      	popge	{r4, r5, pc}
 8000444:	ea6f 0404 	mvn.w	r4, r4
 8000448:	3c1f      	subs	r4, #31
 800044a:	da1c      	bge.n	8000486 <__adddf3+0x1d2>
 800044c:	340c      	adds	r4, #12
 800044e:	dc0e      	bgt.n	800046e <__adddf3+0x1ba>
 8000450:	f104 0414 	add.w	r4, r4, #20
 8000454:	f1c4 0220 	rsb	r2, r4, #32
 8000458:	fa20 f004 	lsr.w	r0, r0, r4
 800045c:	fa01 f302 	lsl.w	r3, r1, r2
 8000460:	ea40 0003 	orr.w	r0, r0, r3
 8000464:	fa21 f304 	lsr.w	r3, r1, r4
 8000468:	ea45 0103 	orr.w	r1, r5, r3
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f1c4 040c 	rsb	r4, r4, #12
 8000472:	f1c4 0220 	rsb	r2, r4, #32
 8000476:	fa20 f002 	lsr.w	r0, r0, r2
 800047a:	fa01 f304 	lsl.w	r3, r1, r4
 800047e:	ea40 0003 	orr.w	r0, r0, r3
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	fa21 f004 	lsr.w	r0, r1, r4
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f094 0f00 	teq	r4, #0
 8000492:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000496:	bf06      	itte	eq
 8000498:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800049c:	3401      	addeq	r4, #1
 800049e:	3d01      	subne	r5, #1
 80004a0:	e74e      	b.n	8000340 <__adddf3+0x8c>
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf18      	it	ne
 80004a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ac:	d029      	beq.n	8000502 <__adddf3+0x24e>
 80004ae:	ea94 0f05 	teq	r4, r5
 80004b2:	bf08      	it	eq
 80004b4:	ea90 0f02 	teqeq	r0, r2
 80004b8:	d005      	beq.n	80004c6 <__adddf3+0x212>
 80004ba:	ea54 0c00 	orrs.w	ip, r4, r0
 80004be:	bf04      	itt	eq
 80004c0:	4619      	moveq	r1, r3
 80004c2:	4610      	moveq	r0, r2
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	ea91 0f03 	teq	r1, r3
 80004ca:	bf1e      	ittt	ne
 80004cc:	2100      	movne	r1, #0
 80004ce:	2000      	movne	r0, #0
 80004d0:	bd30      	popne	{r4, r5, pc}
 80004d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d6:	d105      	bne.n	80004e4 <__adddf3+0x230>
 80004d8:	0040      	lsls	r0, r0, #1
 80004da:	4149      	adcs	r1, r1
 80004dc:	bf28      	it	cs
 80004de:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e8:	bf3c      	itt	cc
 80004ea:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ee:	bd30      	popcc	{r4, r5, pc}
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004fc:	f04f 0000 	mov.w	r0, #0
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000506:	bf1a      	itte	ne
 8000508:	4619      	movne	r1, r3
 800050a:	4610      	movne	r0, r2
 800050c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000510:	bf1c      	itt	ne
 8000512:	460b      	movne	r3, r1
 8000514:	4602      	movne	r2, r0
 8000516:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800051a:	bf06      	itte	eq
 800051c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000520:	ea91 0f03 	teqeq	r1, r3
 8000524:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	bf00      	nop

0800052c <__aeabi_ui2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f04f 0500 	mov.w	r5, #0
 8000544:	f04f 0100 	mov.w	r1, #0
 8000548:	e750      	b.n	80003ec <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_i2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000564:	bf48      	it	mi
 8000566:	4240      	negmi	r0, r0
 8000568:	f04f 0100 	mov.w	r1, #0
 800056c:	e73e      	b.n	80003ec <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_f2d>:
 8000570:	0042      	lsls	r2, r0, #1
 8000572:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000576:	ea4f 0131 	mov.w	r1, r1, rrx
 800057a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057e:	bf1f      	itttt	ne
 8000580:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000584:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000588:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800058c:	4770      	bxne	lr
 800058e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000592:	bf08      	it	eq
 8000594:	4770      	bxeq	lr
 8000596:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800059a:	bf04      	itt	eq
 800059c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ac:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b0:	e71c      	b.n	80003ec <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_ul2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	e00a      	b.n	80005da <__aeabi_l2d+0x16>

080005c4 <__aeabi_l2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005d2:	d502      	bpl.n	80005da <__aeabi_l2d+0x16>
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005de:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e6:	f43f aed8 	beq.w	800039a <__adddf3+0xe6>
 80005ea:	f04f 0203 	mov.w	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	fa00 fc03 	lsl.w	ip, r0, r3
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000612:	ea40 000e 	orr.w	r0, r0, lr
 8000616:	fa21 f102 	lsr.w	r1, r1, r2
 800061a:	4414      	add	r4, r2
 800061c:	e6bd      	b.n	800039a <__adddf3+0xe6>
 800061e:	bf00      	nop

08000620 <__aeabi_dmul>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000626:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062e:	bf1d      	ittte	ne
 8000630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000634:	ea94 0f0c 	teqne	r4, ip
 8000638:	ea95 0f0c 	teqne	r5, ip
 800063c:	f000 f8de 	bleq	80007fc <__aeabi_dmul+0x1dc>
 8000640:	442c      	add	r4, r5
 8000642:	ea81 0603 	eor.w	r6, r1, r3
 8000646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000652:	bf18      	it	ne
 8000654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000660:	d038      	beq.n	80006d4 <__aeabi_dmul+0xb4>
 8000662:	fba0 ce02 	umull	ip, lr, r0, r2
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000676:	f04f 0600 	mov.w	r6, #0
 800067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067e:	f09c 0f00 	teq	ip, #0
 8000682:	bf18      	it	ne
 8000684:	f04e 0e01 	orrne.w	lr, lr, #1
 8000688:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800068c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000690:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000694:	d204      	bcs.n	80006a0 <__aeabi_dmul+0x80>
 8000696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800069a:	416d      	adcs	r5, r5
 800069c:	eb46 0606 	adc.w	r6, r6, r6
 80006a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b8:	bf88      	it	hi
 80006ba:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006be:	d81e      	bhi.n	80006fe <__aeabi_dmul+0xde>
 80006c0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006c4:	bf08      	it	eq
 80006c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ca:	f150 0000 	adcs.w	r0, r0, #0
 80006ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d8:	ea46 0101 	orr.w	r1, r6, r1
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e8:	bfc2      	ittt	gt
 80006ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	popgt	{r4, r5, r6, pc}
 80006f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f8:	f04f 0e00 	mov.w	lr, #0
 80006fc:	3c01      	subs	r4, #1
 80006fe:	f300 80ab 	bgt.w	8000858 <__aeabi_dmul+0x238>
 8000702:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000706:	bfde      	ittt	le
 8000708:	2000      	movle	r0, #0
 800070a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd70      	pople	{r4, r5, r6, pc}
 8000710:	f1c4 0400 	rsb	r4, r4, #0
 8000714:	3c20      	subs	r4, #32
 8000716:	da35      	bge.n	8000784 <__aeabi_dmul+0x164>
 8000718:	340c      	adds	r4, #12
 800071a:	dc1b      	bgt.n	8000754 <__aeabi_dmul+0x134>
 800071c:	f104 0414 	add.w	r4, r4, #20
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f305 	lsl.w	r3, r0, r5
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	fa21 f604 	lsr.w	r6, r1, r4
 8000744:	eb42 0106 	adc.w	r1, r2, r6
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 040c 	rsb	r4, r4, #12
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f304 	lsl.w	r3, r0, r4
 8000760:	fa20 f005 	lsr.w	r0, r0, r5
 8000764:	fa01 f204 	lsl.w	r2, r1, r4
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	f141 0100 	adc.w	r1, r1, #0
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f205 	lsl.w	r2, r0, r5
 800078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000790:	fa20 f304 	lsr.w	r3, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea43 0302 	orr.w	r3, r3, r2
 800079c:	fa21 f004 	lsr.w	r0, r1, r4
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	fa21 f204 	lsr.w	r2, r1, r4
 80007a8:	ea20 0002 	bic.w	r0, r0, r2
 80007ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f094 0f00 	teq	r4, #0
 80007c0:	d10f      	bne.n	80007e2 <__aeabi_dmul+0x1c2>
 80007c2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007c6:	0040      	lsls	r0, r0, #1
 80007c8:	eb41 0101 	adc.w	r1, r1, r1
 80007cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3c01      	subeq	r4, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1a6>
 80007d6:	ea41 0106 	orr.w	r1, r1, r6
 80007da:	f095 0f00 	teq	r5, #0
 80007de:	bf18      	it	ne
 80007e0:	4770      	bxne	lr
 80007e2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	eb43 0303 	adc.w	r3, r3, r3
 80007ec:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3d01      	subeq	r5, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1c6>
 80007f6:	ea43 0306 	orr.w	r3, r3, r6
 80007fa:	4770      	bx	lr
 80007fc:	ea94 0f0c 	teq	r4, ip
 8000800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000804:	bf18      	it	ne
 8000806:	ea95 0f0c 	teqne	r5, ip
 800080a:	d00c      	beq.n	8000826 <__aeabi_dmul+0x206>
 800080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000816:	d1d1      	bne.n	80007bc <__aeabi_dmul+0x19c>
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082a:	bf06      	itte	eq
 800082c:	4610      	moveq	r0, r2
 800082e:	4619      	moveq	r1, r3
 8000830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000834:	d019      	beq.n	800086a <__aeabi_dmul+0x24a>
 8000836:	ea94 0f0c 	teq	r4, ip
 800083a:	d102      	bne.n	8000842 <__aeabi_dmul+0x222>
 800083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000840:	d113      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000842:	ea95 0f0c 	teq	r5, ip
 8000846:	d105      	bne.n	8000854 <__aeabi_dmul+0x234>
 8000848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800084c:	bf1c      	itt	ne
 800084e:	4610      	movne	r0, r2
 8000850:	4619      	movne	r1, r3
 8000852:	d10a      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800085c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000860:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800086e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000872:	bd70      	pop	{r4, r5, r6, pc}

08000874 <__aeabi_ddiv>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800087a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000882:	bf1d      	ittte	ne
 8000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000888:	ea94 0f0c 	teqne	r4, ip
 800088c:	ea95 0f0c 	teqne	r5, ip
 8000890:	f000 f8a7 	bleq	80009e2 <__aeabi_ddiv+0x16e>
 8000894:	eba4 0405 	sub.w	r4, r4, r5
 8000898:	ea81 0e03 	eor.w	lr, r1, r3
 800089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a4:	f000 8088 	beq.w	80009b8 <__aeabi_ddiv+0x144>
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf08      	it	eq
 80008d0:	4296      	cmpeq	r6, r2
 80008d2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008d6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008da:	d202      	bcs.n	80008e2 <__aeabi_ddiv+0x6e>
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	1ab6      	subs	r6, r6, r2
 80008e4:	eb65 0503 	sbc.w	r5, r5, r3
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008f2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 000c 	orrcs.w	r0, r0, ip
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000950:	ea55 0e06 	orrs.w	lr, r5, r6
 8000954:	d018      	beq.n	8000988 <__aeabi_ddiv+0x114>
 8000956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000972:	d1c0      	bne.n	80008f6 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000978:	d10b      	bne.n	8000992 <__aeabi_ddiv+0x11e>
 800097a:	ea41 0100 	orr.w	r1, r1, r0
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000986:	e7b6      	b.n	80008f6 <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800098c:	bf04      	itt	eq
 800098e:	4301      	orreq	r1, r0
 8000990:	2000      	moveq	r0, #0
 8000992:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000996:	bf88      	it	hi
 8000998:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800099c:	f63f aeaf 	bhi.w	80006fe <__aeabi_dmul+0xde>
 80009a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a4:	bf04      	itt	eq
 80009a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ae:	f150 0000 	adcs.w	r0, r0, #0
 80009b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c4:	bfc2      	ittt	gt
 80009c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	popgt	{r4, r5, r6, pc}
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009d4:	f04f 0e00 	mov.w	lr, #0
 80009d8:	3c01      	subs	r4, #1
 80009da:	e690      	b.n	80006fe <__aeabi_dmul+0xde>
 80009dc:	ea45 0e06 	orr.w	lr, r5, r6
 80009e0:	e68d      	b.n	80006fe <__aeabi_dmul+0xde>
 80009e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	bf08      	it	eq
 80009ec:	ea95 0f0c 	teqeq	r5, ip
 80009f0:	f43f af3b 	beq.w	800086a <__aeabi_dmul+0x24a>
 80009f4:	ea94 0f0c 	teq	r4, ip
 80009f8:	d10a      	bne.n	8000a10 <__aeabi_ddiv+0x19c>
 80009fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fe:	f47f af34 	bne.w	800086a <__aeabi_dmul+0x24a>
 8000a02:	ea95 0f0c 	teq	r5, ip
 8000a06:	f47f af25 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e72c      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a10:	ea95 0f0c 	teq	r5, ip
 8000a14:	d106      	bne.n	8000a24 <__aeabi_ddiv+0x1b0>
 8000a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a1a:	f43f aefd 	beq.w	8000818 <__aeabi_dmul+0x1f8>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e722      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	f47f aec5 	bne.w	80007bc <__aeabi_dmul+0x19c>
 8000a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a36:	f47f af0d 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3e:	f47f aeeb 	bne.w	8000818 <__aeabi_dmul+0x1f8>
 8000a42:	e712      	b.n	800086a <__aeabi_dmul+0x24a>

08000a44 <__gedf2>:
 8000a44:	f04f 3cff 	mov.w	ip, #4294967295
 8000a48:	e006      	b.n	8000a58 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__ledf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	e002      	b.n	8000a58 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__cmpdf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a6e:	d01b      	beq.n	8000aa8 <__cmpdf2+0x54>
 8000a70:	b001      	add	sp, #4
 8000a72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a76:	bf0c      	ite	eq
 8000a78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a7c:	ea91 0f03 	teqne	r1, r3
 8000a80:	bf02      	ittt	eq
 8000a82:	ea90 0f02 	teqeq	r0, r2
 8000a86:	2000      	moveq	r0, #0
 8000a88:	4770      	bxeq	lr
 8000a8a:	f110 0f00 	cmn.w	r0, #0
 8000a8e:	ea91 0f03 	teq	r1, r3
 8000a92:	bf58      	it	pl
 8000a94:	4299      	cmppl	r1, r3
 8000a96:	bf08      	it	eq
 8000a98:	4290      	cmpeq	r0, r2
 8000a9a:	bf2c      	ite	cs
 8000a9c:	17d8      	asrcs	r0, r3, #31
 8000a9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aa2:	f040 0001 	orr.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__cmpdf2+0x64>
 8000ab2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab6:	d107      	bne.n	8000ac8 <__cmpdf2+0x74>
 8000ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d1d6      	bne.n	8000a70 <__cmpdf2+0x1c>
 8000ac2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac6:	d0d3      	beq.n	8000a70 <__cmpdf2+0x1c>
 8000ac8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdrcmple>:
 8000ad0:	4684      	mov	ip, r0
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4662      	mov	r2, ip
 8000ad6:	468c      	mov	ip, r1
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4663      	mov	r3, ip
 8000adc:	e000      	b.n	8000ae0 <__aeabi_cdcmpeq>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdcmpeq>:
 8000ae0:	b501      	push	{r0, lr}
 8000ae2:	f7ff ffb7 	bl	8000a54 <__cmpdf2>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	bf48      	it	mi
 8000aea:	f110 0f00 	cmnmi.w	r0, #0
 8000aee:	bd01      	pop	{r0, pc}

08000af0 <__aeabi_dcmpeq>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff fff4 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000af8:	bf0c      	ite	eq
 8000afa:	2001      	moveq	r0, #1
 8000afc:	2000      	movne	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmplt>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffea 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b0c:	bf34      	ite	cc
 8000b0e:	2001      	movcc	r0, #1
 8000b10:	2000      	movcs	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmple>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffe0 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpge>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffce 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b34:	bf94      	ite	ls
 8000b36:	2001      	movls	r0, #1
 8000b38:	2000      	movhi	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpgt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffc4 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpun>:
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x10>
 8000b5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b62:	d10a      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x20>
 8000b6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0001 	mov.w	r0, #1
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2iz>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b88:	d215      	bcs.n	8000bb6 <__aeabi_d2iz+0x36>
 8000b8a:	d511      	bpl.n	8000bb0 <__aeabi_d2iz+0x30>
 8000b8c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b94:	d912      	bls.n	8000bbc <__aeabi_d2iz+0x3c>
 8000b96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ba2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ba6:	fa23 f002 	lsr.w	r0, r3, r2
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d105      	bne.n	8000bc8 <__aeabi_d2iz+0x48>
 8000bbc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc0:	bf08      	it	eq
 8000bc2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_d2uiz>:
 8000bd0:	004a      	lsls	r2, r1, #1
 8000bd2:	d211      	bcs.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bd4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd8:	d211      	bcs.n	8000bfe <__aeabi_d2uiz+0x2e>
 8000bda:	d50d      	bpl.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bdc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be4:	d40e      	bmi.n	8000c04 <__aeabi_d2uiz+0x34>
 8000be6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bf2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d102      	bne.n	8000c0a <__aeabi_d2uiz+0x3a>
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	4770      	bx	lr
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_d2f>:
 8000c10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c18:	bf24      	itt	cs
 8000c1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c22:	d90d      	bls.n	8000c40 <__aeabi_d2f+0x30>
 8000c24:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c30:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c38:	bf08      	it	eq
 8000c3a:	f020 0001 	biceq.w	r0, r0, #1
 8000c3e:	4770      	bx	lr
 8000c40:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c44:	d121      	bne.n	8000c8a <__aeabi_d2f+0x7a>
 8000c46:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c4a:	bfbc      	itt	lt
 8000c4c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	4770      	bxlt	lr
 8000c52:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c5a:	f1c2 0218 	rsb	r2, r2, #24
 8000c5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c66:	fa20 f002 	lsr.w	r0, r0, r2
 8000c6a:	bf18      	it	ne
 8000c6c:	f040 0001 	orrne.w	r0, r0, #1
 8000c70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c7c:	ea40 000c 	orr.w	r0, r0, ip
 8000c80:	fa23 f302 	lsr.w	r3, r3, r2
 8000c84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c88:	e7cc      	b.n	8000c24 <__aeabi_d2f+0x14>
 8000c8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c8e:	d107      	bne.n	8000ca0 <__aeabi_d2f+0x90>
 8000c90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c94:	bf1e      	ittt	ne
 8000c96:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c9a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c9e:	4770      	bxne	lr
 8000ca0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ca4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__aeabi_uldivmod>:
 8000cb0:	b953      	cbnz	r3, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb2:	b94a      	cbnz	r2, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	2800      	cmpeq	r0, #0
 8000cba:	bf1c      	itt	ne
 8000cbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc4:	f000 b9b4 	b.w	8001030 <__aeabi_idiv0>
 8000cc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ccc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd0:	f000 f83c 	bl	8000d4c <__udivmoddi4>
 8000cd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cdc:	b004      	add	sp, #16
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_d2lz>:
 8000ce0:	b538      	push	{r3, r4, r5, lr}
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	4604      	mov	r4, r0
 8000ce8:	460d      	mov	r5, r1
 8000cea:	f7ff ff0b 	bl	8000b04 <__aeabi_dcmplt>
 8000cee:	b928      	cbnz	r0, 8000cfc <__aeabi_d2lz+0x1c>
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	4629      	mov	r1, r5
 8000cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf8:	f000 b80a 	b.w	8000d10 <__aeabi_d2ulz>
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d02:	f000 f805 	bl	8000d10 <__aeabi_d2ulz>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	bd38      	pop	{r3, r4, r5, pc}
 8000d0e:	bf00      	nop

08000d10 <__aeabi_d2ulz>:
 8000d10:	b5d0      	push	{r4, r6, r7, lr}
 8000d12:	2200      	movs	r2, #0
 8000d14:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <__aeabi_d2ulz+0x34>)
 8000d16:	4606      	mov	r6, r0
 8000d18:	460f      	mov	r7, r1
 8000d1a:	f7ff fc81 	bl	8000620 <__aeabi_dmul>
 8000d1e:	f7ff ff57 	bl	8000bd0 <__aeabi_d2uiz>
 8000d22:	4604      	mov	r4, r0
 8000d24:	f7ff fc02 	bl	800052c <__aeabi_ui2d>
 8000d28:	2200      	movs	r2, #0
 8000d2a:	4b07      	ldr	r3, [pc, #28]	@ (8000d48 <__aeabi_d2ulz+0x38>)
 8000d2c:	f7ff fc78 	bl	8000620 <__aeabi_dmul>
 8000d30:	4602      	mov	r2, r0
 8000d32:	460b      	mov	r3, r1
 8000d34:	4630      	mov	r0, r6
 8000d36:	4639      	mov	r1, r7
 8000d38:	f7ff faba 	bl	80002b0 <__aeabi_dsub>
 8000d3c:	f7ff ff48 	bl	8000bd0 <__aeabi_d2uiz>
 8000d40:	4621      	mov	r1, r4
 8000d42:	bdd0      	pop	{r4, r6, r7, pc}
 8000d44:	3df00000 	.word	0x3df00000
 8000d48:	41f00000 	.word	0x41f00000

08000d4c <__udivmoddi4>:
 8000d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d50:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d52:	460c      	mov	r4, r1
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d14d      	bne.n	8000df4 <__udivmoddi4+0xa8>
 8000d58:	428a      	cmp	r2, r1
 8000d5a:	460f      	mov	r7, r1
 8000d5c:	4684      	mov	ip, r0
 8000d5e:	4696      	mov	lr, r2
 8000d60:	fab2 f382 	clz	r3, r2
 8000d64:	d960      	bls.n	8000e28 <__udivmoddi4+0xdc>
 8000d66:	b14b      	cbz	r3, 8000d7c <__udivmoddi4+0x30>
 8000d68:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d6c:	f1c3 0220 	rsb	r2, r3, #32
 8000d70:	409f      	lsls	r7, r3
 8000d72:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d76:	fa20 f202 	lsr.w	r2, r0, r2
 8000d7a:	4317      	orrs	r7, r2
 8000d7c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d80:	fa1f f48e 	uxth.w	r4, lr
 8000d84:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d88:	fbb7 f1f6 	udiv	r1, r7, r6
 8000d8c:	fb06 7711 	mls	r7, r6, r1, r7
 8000d90:	fb01 f004 	mul.w	r0, r1, r4
 8000d94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d98:	4290      	cmp	r0, r2
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x62>
 8000d9c:	eb1e 0202 	adds.w	r2, lr, r2
 8000da0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000da4:	d202      	bcs.n	8000dac <__udivmoddi4+0x60>
 8000da6:	4290      	cmp	r0, r2
 8000da8:	f200 812d 	bhi.w	8001006 <__udivmoddi4+0x2ba>
 8000dac:	4639      	mov	r1, r7
 8000dae:	1a12      	subs	r2, r2, r0
 8000db0:	fa1f fc8c 	uxth.w	ip, ip
 8000db4:	fbb2 f0f6 	udiv	r0, r2, r6
 8000db8:	fb06 2210 	mls	r2, r6, r0, r2
 8000dbc:	fb00 f404 	mul.w	r4, r0, r4
 8000dc0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000dc4:	4564      	cmp	r4, ip
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x8e>
 8000dc8:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000dcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd0:	d202      	bcs.n	8000dd8 <__udivmoddi4+0x8c>
 8000dd2:	4564      	cmp	r4, ip
 8000dd4:	f200 811a 	bhi.w	800100c <__udivmoddi4+0x2c0>
 8000dd8:	4610      	mov	r0, r2
 8000dda:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dde:	ebac 0c04 	sub.w	ip, ip, r4
 8000de2:	2100      	movs	r1, #0
 8000de4:	b125      	cbz	r5, 8000df0 <__udivmoddi4+0xa4>
 8000de6:	fa2c f303 	lsr.w	r3, ip, r3
 8000dea:	2200      	movs	r2, #0
 8000dec:	e9c5 3200 	strd	r3, r2, [r5]
 8000df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d905      	bls.n	8000e04 <__udivmoddi4+0xb8>
 8000df8:	b10d      	cbz	r5, 8000dfe <__udivmoddi4+0xb2>
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4608      	mov	r0, r1
 8000e02:	e7f5      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000e04:	fab3 f183 	clz	r1, r3
 8000e08:	2900      	cmp	r1, #0
 8000e0a:	d14d      	bne.n	8000ea8 <__udivmoddi4+0x15c>
 8000e0c:	42a3      	cmp	r3, r4
 8000e0e:	f0c0 80f2 	bcc.w	8000ff6 <__udivmoddi4+0x2aa>
 8000e12:	4290      	cmp	r0, r2
 8000e14:	f080 80ef 	bcs.w	8000ff6 <__udivmoddi4+0x2aa>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	2d00      	cmp	r5, #0
 8000e20:	d0e6      	beq.n	8000df0 <__udivmoddi4+0xa4>
 8000e22:	e9c5 6300 	strd	r6, r3, [r5]
 8000e26:	e7e3      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	f040 80a2 	bne.w	8000f72 <__udivmoddi4+0x226>
 8000e2e:	1a8a      	subs	r2, r1, r2
 8000e30:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e34:	fa1f f68e 	uxth.w	r6, lr
 8000e38:	2101      	movs	r1, #1
 8000e3a:	fbb2 f4f7 	udiv	r4, r2, r7
 8000e3e:	fb07 2014 	mls	r0, r7, r4, r2
 8000e42:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000e46:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4a:	fb06 f004 	mul.w	r0, r6, r4
 8000e4e:	4290      	cmp	r0, r2
 8000e50:	d90f      	bls.n	8000e72 <__udivmoddi4+0x126>
 8000e52:	eb1e 0202 	adds.w	r2, lr, r2
 8000e56:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e5a:	bf2c      	ite	cs
 8000e5c:	f04f 0901 	movcs.w	r9, #1
 8000e60:	f04f 0900 	movcc.w	r9, #0
 8000e64:	4290      	cmp	r0, r2
 8000e66:	d903      	bls.n	8000e70 <__udivmoddi4+0x124>
 8000e68:	f1b9 0f00 	cmp.w	r9, #0
 8000e6c:	f000 80c8 	beq.w	8001000 <__udivmoddi4+0x2b4>
 8000e70:	4644      	mov	r4, r8
 8000e72:	1a12      	subs	r2, r2, r0
 8000e74:	fa1f fc8c 	uxth.w	ip, ip
 8000e78:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e7c:	fb07 2210 	mls	r2, r7, r0, r2
 8000e80:	fb00 f606 	mul.w	r6, r0, r6
 8000e84:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e88:	4566      	cmp	r6, ip
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x152>
 8000e8c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000e90:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e94:	d202      	bcs.n	8000e9c <__udivmoddi4+0x150>
 8000e96:	4566      	cmp	r6, ip
 8000e98:	f200 80bb 	bhi.w	8001012 <__udivmoddi4+0x2c6>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	ebac 0c06 	sub.w	ip, ip, r6
 8000ea2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ea6:	e79d      	b.n	8000de4 <__udivmoddi4+0x98>
 8000ea8:	f1c1 0620 	rsb	r6, r1, #32
 8000eac:	408b      	lsls	r3, r1
 8000eae:	fa04 fe01 	lsl.w	lr, r4, r1
 8000eb2:	fa22 f706 	lsr.w	r7, r2, r6
 8000eb6:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eba:	40f4      	lsrs	r4, r6
 8000ebc:	408a      	lsls	r2, r1
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	ea4e 030c 	orr.w	r3, lr, ip
 8000ec4:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ec8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ecc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed0:	fa1f fc87 	uxth.w	ip, r7
 8000ed4:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ed8:	fb08 4410 	mls	r4, r8, r0, r4
 8000edc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee0:	fb00 f90c 	mul.w	r9, r0, ip
 8000ee4:	45a1      	cmp	r9, r4
 8000ee6:	d90e      	bls.n	8000f06 <__udivmoddi4+0x1ba>
 8000ee8:	193c      	adds	r4, r7, r4
 8000eea:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eee:	bf2c      	ite	cs
 8000ef0:	f04f 0b01 	movcs.w	fp, #1
 8000ef4:	f04f 0b00 	movcc.w	fp, #0
 8000ef8:	45a1      	cmp	r9, r4
 8000efa:	d903      	bls.n	8000f04 <__udivmoddi4+0x1b8>
 8000efc:	f1bb 0f00 	cmp.w	fp, #0
 8000f00:	f000 8093 	beq.w	800102a <__udivmoddi4+0x2de>
 8000f04:	4650      	mov	r0, sl
 8000f06:	eba4 0409 	sub.w	r4, r4, r9
 8000f0a:	fa1f f983 	uxth.w	r9, r3
 8000f0e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000f12:	fb08 4413 	mls	r4, r8, r3, r4
 8000f16:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d906      	bls.n	8000f30 <__udivmoddi4+0x1e4>
 8000f22:	193c      	adds	r4, r7, r4
 8000f24:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x1e2>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d87a      	bhi.n	8001024 <__udivmoddi4+0x2d8>
 8000f2e:	4643      	mov	r3, r8
 8000f30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f34:	eba4 040c 	sub.w	r4, r4, ip
 8000f38:	fba0 9802 	umull	r9, r8, r0, r2
 8000f3c:	4544      	cmp	r4, r8
 8000f3e:	46cc      	mov	ip, r9
 8000f40:	4643      	mov	r3, r8
 8000f42:	d302      	bcc.n	8000f4a <__udivmoddi4+0x1fe>
 8000f44:	d106      	bne.n	8000f54 <__udivmoddi4+0x208>
 8000f46:	45ce      	cmp	lr, r9
 8000f48:	d204      	bcs.n	8000f54 <__udivmoddi4+0x208>
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	ebb9 0c02 	subs.w	ip, r9, r2
 8000f50:	eb68 0307 	sbc.w	r3, r8, r7
 8000f54:	b15d      	cbz	r5, 8000f6e <__udivmoddi4+0x222>
 8000f56:	ebbe 020c 	subs.w	r2, lr, ip
 8000f5a:	eb64 0403 	sbc.w	r4, r4, r3
 8000f5e:	fa04 f606 	lsl.w	r6, r4, r6
 8000f62:	fa22 f301 	lsr.w	r3, r2, r1
 8000f66:	40cc      	lsrs	r4, r1
 8000f68:	431e      	orrs	r6, r3
 8000f6a:	e9c5 6400 	strd	r6, r4, [r5]
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e73e      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000f72:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f76:	f1c3 0120 	rsb	r1, r3, #32
 8000f7a:	fa04 f203 	lsl.w	r2, r4, r3
 8000f7e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f82:	40cc      	lsrs	r4, r1
 8000f84:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f88:	fa20 f101 	lsr.w	r1, r0, r1
 8000f8c:	fa1f f68e 	uxth.w	r6, lr
 8000f90:	fbb4 f0f7 	udiv	r0, r4, r7
 8000f94:	430a      	orrs	r2, r1
 8000f96:	fb07 4410 	mls	r4, r7, r0, r4
 8000f9a:	0c11      	lsrs	r1, r2, #16
 8000f9c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000fa0:	fb00 f406 	mul.w	r4, r0, r6
 8000fa4:	428c      	cmp	r4, r1
 8000fa6:	d90e      	bls.n	8000fc6 <__udivmoddi4+0x27a>
 8000fa8:	eb1e 0101 	adds.w	r1, lr, r1
 8000fac:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb0:	bf2c      	ite	cs
 8000fb2:	f04f 0901 	movcs.w	r9, #1
 8000fb6:	f04f 0900 	movcc.w	r9, #0
 8000fba:	428c      	cmp	r4, r1
 8000fbc:	d902      	bls.n	8000fc4 <__udivmoddi4+0x278>
 8000fbe:	f1b9 0f00 	cmp.w	r9, #0
 8000fc2:	d02c      	beq.n	800101e <__udivmoddi4+0x2d2>
 8000fc4:	4640      	mov	r0, r8
 8000fc6:	1b09      	subs	r1, r1, r4
 8000fc8:	b292      	uxth	r2, r2
 8000fca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fce:	fb07 1114 	mls	r1, r7, r4, r1
 8000fd2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd6:	fb04 f106 	mul.w	r1, r4, r6
 8000fda:	4291      	cmp	r1, r2
 8000fdc:	d907      	bls.n	8000fee <__udivmoddi4+0x2a2>
 8000fde:	eb1e 0202 	adds.w	r2, lr, r2
 8000fe2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000fe6:	d201      	bcs.n	8000fec <__udivmoddi4+0x2a0>
 8000fe8:	4291      	cmp	r1, r2
 8000fea:	d815      	bhi.n	8001018 <__udivmoddi4+0x2cc>
 8000fec:	4644      	mov	r4, r8
 8000fee:	1a52      	subs	r2, r2, r1
 8000ff0:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000ff4:	e721      	b.n	8000e3a <__udivmoddi4+0xee>
 8000ff6:	1a86      	subs	r6, r0, r2
 8000ff8:	eb64 0303 	sbc.w	r3, r4, r3
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	e70e      	b.n	8000e1e <__udivmoddi4+0xd2>
 8001000:	3c02      	subs	r4, #2
 8001002:	4472      	add	r2, lr
 8001004:	e735      	b.n	8000e72 <__udivmoddi4+0x126>
 8001006:	3902      	subs	r1, #2
 8001008:	4472      	add	r2, lr
 800100a:	e6d0      	b.n	8000dae <__udivmoddi4+0x62>
 800100c:	44f4      	add	ip, lr
 800100e:	3802      	subs	r0, #2
 8001010:	e6e3      	b.n	8000dda <__udivmoddi4+0x8e>
 8001012:	44f4      	add	ip, lr
 8001014:	3802      	subs	r0, #2
 8001016:	e742      	b.n	8000e9e <__udivmoddi4+0x152>
 8001018:	3c02      	subs	r4, #2
 800101a:	4472      	add	r2, lr
 800101c:	e7e7      	b.n	8000fee <__udivmoddi4+0x2a2>
 800101e:	3802      	subs	r0, #2
 8001020:	4471      	add	r1, lr
 8001022:	e7d0      	b.n	8000fc6 <__udivmoddi4+0x27a>
 8001024:	3b02      	subs	r3, #2
 8001026:	443c      	add	r4, r7
 8001028:	e782      	b.n	8000f30 <__udivmoddi4+0x1e4>
 800102a:	3802      	subs	r0, #2
 800102c:	443c      	add	r4, r7
 800102e:	e76a      	b.n	8000f06 <__udivmoddi4+0x1ba>

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <ESP32_SendCommand>:
            }
            break;
    }
}

void ESP32_SendCommand(const char* command) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff f92b 	bl	8000298 <strlen>
 8001042:	4603      	mov	r3, r0
 8001044:	b29a      	uxth	r2, r3
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	4808      	ldr	r0, [pc, #32]	@ (8001070 <ESP32_SendCommand+0x3c>)
 800104e:	f008 ffb5 	bl	8009fbc <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);  // Końcówka komendy AT
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	2202      	movs	r2, #2
 8001058:	4906      	ldr	r1, [pc, #24]	@ (8001074 <ESP32_SendCommand+0x40>)
 800105a:	4805      	ldr	r0, [pc, #20]	@ (8001070 <ESP32_SendCommand+0x3c>)
 800105c:	f008 ffae 	bl	8009fbc <HAL_UART_Transmit>
    HAL_Delay(100);  // Czekaj na odpowiedź
 8001060:	2064      	movs	r0, #100	@ 0x64
 8001062:	f001 fc35 	bl	80028d0 <HAL_Delay>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000348 	.word	0x20000348
 8001074:	080107b0 	.word	0x080107b0

08001078 <Set_PWM_Frequency>:

    // Przemiana liniowa prędkości na częstotliwość PWM
    uint32_t freq = MIN_FREQ + (uint32_t)((float)(speed - MIN_SPEED) / (MAX_SPEED - MIN_SPEED) * (MAX_FREQ - MIN_FREQ));
    return freq;
}
void Set_PWM_Frequency(uint16_t speed_kmh) {
 8001078:	b480      	push	{r7}
 800107a:	b087      	sub	sp, #28
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	80fb      	strh	r3, [r7, #6]
    // Poprawiona interpolacja częstotliwości
    uint32_t freq = 100 + ((1700 - 100) * speed_kmh) / 250;
 8001082:	88fb      	ldrh	r3, [r7, #6]
 8001084:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8001088:	fb02 f303 	mul.w	r3, r2, r3
 800108c:	4a24      	ldr	r2, [pc, #144]	@ (8001120 <Set_PWM_Frequency+0xa8>)
 800108e:	fb82 1203 	smull	r1, r2, r2, r3
 8001092:	1112      	asrs	r2, r2, #4
 8001094:	17db      	asrs	r3, r3, #31
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	3364      	adds	r3, #100	@ 0x64
 800109a:	60fb      	str	r3, [r7, #12]

    uint32_t arr_value, psc_value;

    if (freq < 3800) {
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f640 62d7 	movw	r2, #3799	@ 0xed7
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d817      	bhi.n	80010d6 <Set_PWM_Frequency+0x5e>
        psc_value = (250000000 / (65536 * freq));
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	041b      	lsls	r3, r3, #16
 80010aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001124 <Set_PWM_Frequency+0xac>)
 80010ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b0:	613b      	str	r3, [r7, #16]
        if (psc_value > 65535) psc_value = 65535;  // PSC nie może przekroczyć 16 bitów
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010b8:	d302      	bcc.n	80010c0 <Set_PWM_Frequency+0x48>
 80010ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010be:	613b      	str	r3, [r7, #16]
        arr_value = (250000000 / ((psc_value + 1) * freq)) - 1;
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	3301      	adds	r3, #1
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	fb02 f303 	mul.w	r3, r2, r3
 80010ca:	4a16      	ldr	r2, [pc, #88]	@ (8001124 <Set_PWM_Frequency+0xac>)
 80010cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d0:	3b01      	subs	r3, #1
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	e007      	b.n	80010e6 <Set_PWM_Frequency+0x6e>
    } else {
        psc_value = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
        arr_value = (250000000 / freq) - 1;
 80010da:	4a12      	ldr	r2, [pc, #72]	@ (8001124 <Set_PWM_Frequency+0xac>)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e2:	3b01      	subs	r3, #1
 80010e4:	617b      	str	r3, [r7, #20]
    }

    if (arr_value > 65535) arr_value = 65535;  // Ograniczenie ARR do 16 bitów
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010ec:	d302      	bcc.n	80010f4 <Set_PWM_Frequency+0x7c>
 80010ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010f2:	617b      	str	r3, [r7, #20]
    //printf("Speed: %d km/h, Freq: %lu Hz, PSC: %lu, ARR: %lu\n", speed_kmh, freq, psc_value, arr_value);

    __HAL_TIM_SET_PRESCALER(&htim1, psc_value);
 80010f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001128 <Set_PWM_Frequency+0xb0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_TIM_SET_AUTORELOAD(&htim1, arr_value);
 80010fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001128 <Set_PWM_Frequency+0xb0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001104:	4a08      	ldr	r2, [pc, #32]	@ (8001128 <Set_PWM_Frequency+0xb0>)
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 800110a:	4b07      	ldr	r3, [pc, #28]	@ (8001128 <Set_PWM_Frequency+0xb0>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2200      	movs	r2, #0
 8001110:	625a      	str	r2, [r3, #36]	@ 0x24

    // W niektórych przypadkach wymagane jest wygenerowanie zdarzenia aktualizacji
    //__HAL_TIM_GENERATE_EVENT(&htim1, TIM_EVENTSOURCE_UPDATE);
}
 8001112:	bf00      	nop
 8001114:	371c      	adds	r7, #28
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	10624dd3 	.word	0x10624dd3
 8001124:	0ee6b280 	.word	0x0ee6b280
 8001128:	200002b0 	.word	0x200002b0
 800112c:	00000000 	.word	0x00000000

08001130 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001130:	b5b0      	push	{r4, r5, r7, lr}
 8001132:	b0ea      	sub	sp, #424	@ 0x1a8
 8001134:	af00      	add	r7, sp, #0
int main(void)
 8001136:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800113a:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800113e:	f001 fb09 	bl	8002754 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001142:	f000 f98f 	bl	8001464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001146:	f000 fc4b 	bl	80019e0 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800114a:	f000 f9fd 	bl	8001548 <MX_FDCAN1_Init>
  MX_I2C1_Init();
 800114e:	f000 fa41 	bl	80015d4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001152:	f000 fa93 	bl	800167c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001156:	f000 fb4f 	bl	80017f8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800115a:	f000 fba7 	bl	80018ac <MX_USART1_UART_Init>
 // HAL_UART_Receive_IT(&huart1, &rxDatar, 1);
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&rxBuffer[rxIndex], 1);
 800115e:	4ba6      	ldr	r3, [pc, #664]	@ (80013f8 <main+0x2c8>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4aa6      	ldr	r2, [pc, #664]	@ (80013fc <main+0x2cc>)
 8001164:	4413      	add	r3, r2
 8001166:	2201      	movs	r2, #1
 8001168:	4619      	mov	r1, r3
 800116a:	48a5      	ldr	r0, [pc, #660]	@ (8001400 <main+0x2d0>)
 800116c:	f008 ffc4 	bl	800a0f8 <HAL_UART_Receive_IT>
  MX_USART2_UART_Init();
 8001170:	f000 fbe8 	bl	8001944 <MX_USART2_UART_Init>
  MX_ICACHE_Init();
 8001174:	f000 fa6e 	bl	8001654 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001178:	2100      	movs	r1, #0
 800117a:	48a2      	ldr	r0, [pc, #648]	@ (8001404 <main+0x2d4>)
 800117c:	f007 f964 	bl	8008448 <HAL_TIM_OC_Start_IT>
  //initESP();
  //TIM1->CCR1 = 50;
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001180:	2104      	movs	r1, #4
 8001182:	48a0      	ldr	r0, [pc, #640]	@ (8001404 <main+0x2d4>)
 8001184:	f007 fb4a 	bl	800881c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001188:	2100      	movs	r1, #0
 800118a:	489e      	ldr	r0, [pc, #632]	@ (8001404 <main+0x2d4>)
 800118c:	f007 fb46 	bl	800881c <HAL_TIM_PWM_Start>

  // Konfiguracja ESP32 za pomocą komend AT
     ESP32_SendCommand("AT+RST");  // Resetuj ESP32
 8001190:	489d      	ldr	r0, [pc, #628]	@ (8001408 <main+0x2d8>)
 8001192:	f7ff ff4f 	bl	8001034 <ESP32_SendCommand>
    // HAL_Delay(1000);
    // ESP32_SendCommand("AT+CWMODE=1");  // Ustaw tryb stacji (klient Wi-Fi)
    // HAL_Delay(1000);
    // ESP32_SendCommand("AT+CWJAP=\"PLAY_Swiatlowod_19A1\",\"t8Xv9auf7Z#D\"");  // Połącz z Wi-Fi
     HAL_Delay(5000);
 8001196:	f241 3088 	movw	r0, #5000	@ 0x1388
 800119a:	f001 fb99 	bl	80028d0 <HAL_Delay>
     ESP32_SendCommand("AT+CIPSTART=\"UDP\",\"0.0.0.0\",12345,12345,2");  // Ustaw tryb UDP
 800119e:	489b      	ldr	r0, [pc, #620]	@ (800140c <main+0x2dc>)
 80011a0:	f7ff ff48 	bl	8001034 <ESP32_SendCommand>
     HAL_Delay(1000);
 80011a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011a8:	f001 fb92 	bl	80028d0 <HAL_Delay>

  // Konfiguracja wiadomości



	 TxData_DME1[0] = 0x19 ;                     // LV_SWI_IGK=1, LV_F_N_ENG=0, LV_ACK_TCS=0, LV_ERR_GC=1, SF_TQD=1
 80011ac:	4b98      	ldr	r3, [pc, #608]	@ (8001410 <main+0x2e0>)
 80011ae:	2219      	movs	r2, #25
 80011b0:	701a      	strb	r2, [r3, #0]
	 TxData_DME1[1] = 0x4C;      // TQI_TQR_CAN = 75%
 80011b2:	4b97      	ldr	r3, [pc, #604]	@ (8001410 <main+0x2e0>)
 80011b4:	224c      	movs	r2, #76	@ 0x4c
 80011b6:	705a      	strb	r2, [r3, #1]
	 uint16_t engineSpeed = (uint16_t)(3000 / 0.15625);
 80011b8:	f44f 4396 	mov.w	r3, #19200	@ 0x4b00
 80011bc:	f8a7 31a6 	strh.w	r3, [r7, #422]	@ 0x1a6
	 TxData_DME1[2] = 0xD0; // N_ENG LSB
 80011c0:	4b93      	ldr	r3, [pc, #588]	@ (8001410 <main+0x2e0>)
 80011c2:	22d0      	movs	r2, #208	@ 0xd0
 80011c4:	709a      	strb	r2, [r3, #2]
	 TxData_DME1[3] = (uint8_t)(engineSpeed >> 8);   // N_ENG MSB
 80011c6:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	@ 0x1a6
 80011ca:	0a1b      	lsrs	r3, r3, #8
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b8f      	ldr	r3, [pc, #572]	@ (8001410 <main+0x2e0>)
 80011d2:	70da      	strb	r2, [r3, #3]
	 TxData_DME1[4] = (uint8_t)(60 / 0.390625);      // TQI_CAN = 60%
 80011d4:	4b8e      	ldr	r3, [pc, #568]	@ (8001410 <main+0x2e0>)
 80011d6:	2299      	movs	r2, #153	@ 0x99
 80011d8:	711a      	strb	r2, [r3, #4]
	 TxData_DME1[5] = (uint8_t)(5 / 0.390625);       // TQ_LOSS_CAN = 5%
 80011da:	4b8d      	ldr	r3, [pc, #564]	@ (8001410 <main+0x2e0>)
 80011dc:	220c      	movs	r2, #12
 80011de:	715a      	strb	r2, [r3, #5]
	 TxData_DME1[6] = 0b11000000;                   // ERR_AMT_CAN bits
 80011e0:	4b8b      	ldr	r3, [pc, #556]	@ (8001410 <main+0x2e0>)
 80011e2:	22c0      	movs	r2, #192	@ 0xc0
 80011e4:	719a      	strb	r2, [r3, #6]
	 TxData_DME1[7] = (uint8_t)(80 / 0.390625);      // TQI_MAF_CAN = 80%
 80011e6:	4b8a      	ldr	r3, [pc, #552]	@ (8001410 <main+0x2e0>)
 80011e8:	22cc      	movs	r2, #204	@ 0xcc
 80011ea:	71da      	strb	r2, [r3, #7]

  TxHeader_DME1.Identifier = 0x316;  // ID ramki
 80011ec:	4b89      	ldr	r3, [pc, #548]	@ (8001414 <main+0x2e4>)
 80011ee:	f240 3216 	movw	r2, #790	@ 0x316
 80011f2:	601a      	str	r2, [r3, #0]
  TxHeader_DME1.IdType = FDCAN_STANDARD_ID;
 80011f4:	4b87      	ldr	r3, [pc, #540]	@ (8001414 <main+0x2e4>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	605a      	str	r2, [r3, #4]
  TxHeader_DME1.TxFrameType = FDCAN_DATA_FRAME;
 80011fa:	4b86      	ldr	r3, [pc, #536]	@ (8001414 <main+0x2e4>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  TxHeader_DME1.DataLength = FDCAN_DLC_BYTES_8;
 8001200:	4b84      	ldr	r3, [pc, #528]	@ (8001414 <main+0x2e4>)
 8001202:	2208      	movs	r2, #8
 8001204:	60da      	str	r2, [r3, #12]
  TxHeader_DME1.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001206:	4b83      	ldr	r3, [pc, #524]	@ (8001414 <main+0x2e4>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  TxHeader_DME1.BitRateSwitch = FDCAN_BRS_OFF;
 800120c:	4b81      	ldr	r3, [pc, #516]	@ (8001414 <main+0x2e4>)
 800120e:	2200      	movs	r2, #0
 8001210:	615a      	str	r2, [r3, #20]
  TxHeader_DME1.FDFormat = FDCAN_CLASSIC_CAN;
 8001212:	4b80      	ldr	r3, [pc, #512]	@ (8001414 <main+0x2e4>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  TxHeader_DME1.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001218:	4b7e      	ldr	r3, [pc, #504]	@ (8001414 <main+0x2e4>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]



  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterIndex = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8001224:	2300      	movs	r3, #0
 8001226:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800122a:	2301      	movs	r3, #1
 800122c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  sFilterConfig.FilterID1 = 0x316;
 8001230:	f240 3316 	movw	r3, #790	@ 0x316
 8001234:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
  sFilterConfig.FilterID2 = 0x1FFFFFFF;
 8001238:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 800123c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8001240:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8001244:	4619      	mov	r1, r3
 8001246:	4874      	ldr	r0, [pc, #464]	@ (8001418 <main+0x2e8>)
 8001248:	f001 fef6 	bl	8003038 <HAL_FDCAN_ConfigFilter>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d002      	beq.n	8001258 <main+0x128>
      /* Filter configuration Error */
      printf("[CAN] Unable to configure!\n");
 8001252:	4872      	ldr	r0, [pc, #456]	@ (800141c <main+0x2ec>)
 8001254:	f00b fe56 	bl	800cf04 <puts>
  }
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 8001258:	486f      	ldr	r0, [pc, #444]	@ (8001418 <main+0x2e8>)
 800125a:	f001 ff47 	bl	80030ec <HAL_FDCAN_Start>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <main+0x138>
  {
   Error_Handler();
 8001264:	f000 fe10 	bl	8001e88 <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8001268:	2200      	movs	r2, #0
 800126a:	2101      	movs	r1, #1
 800126c:	486a      	ldr	r0, [pc, #424]	@ (8001418 <main+0x2e8>)
 800126e:	f002 f88b 	bl	8003388 <HAL_FDCAN_ActivateNotification>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <main+0x14c>
  {
    /* Notification Error */
    Error_Handler();
 8001278:	f000 fe06 	bl	8001e88 <Error_Handler>
  }
  printf("starting\n");
 800127c:	4868      	ldr	r0, [pc, #416]	@ (8001420 <main+0x2f0>)
 800127e:	f00b fe41 	bl	800cf04 <puts>
  HAL_GPIO_TogglePin(D1_GPIO_Port, D1_Pin);
 8001282:	2110      	movs	r1, #16
 8001284:	4867      	ldr	r0, [pc, #412]	@ (8001424 <main+0x2f4>)
 8001286:	f002 fccb 	bl	8003c20 <HAL_GPIO_TogglePin>
  //HAL_GPIO_WritePin(GPIO_PIN_3, GPIOB, GPIO_PIN_RESET);
  uint8_t piecpiec[]     = {0x55};
 800128a:	2355      	movs	r3, #85	@ 0x55
 800128c:	f887 3170 	strb.w	r3, [r7, #368]	@ 0x170

  uint8_t a[]     = {  0x3f, 0x0b, 0xBF ,0x0c, 0x00, 0x00, 0x00,0x00, 0x00 ,0x00, 0x01, 0x06 };
 8001290:	4a65      	ldr	r2, [pc, #404]	@ (8001428 <main+0x2f8>)
 8001292:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001296:	ca07      	ldmia	r2, {r0, r1, r2}
 8001298:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  uint8_t turnRight[]     = {0xD0, 0x07, 0xBF, 0x5B, 0x43, 0x83, 0x2E, 0x3F, 0xE2, '\n'};
 800129c:	4a63      	ldr	r2, [pc, #396]	@ (800142c <main+0x2fc>)
 800129e:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80012a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80012a4:	c303      	stmia	r3!, {r0, r1}
 80012a6:	801a      	strh	r2, [r3, #0]
  uint8_t turnLeft[]      = {0xD0, 0x07, 0xBF, 0x5B, 0x23, 0x83, 0x0E, 0x3F, 0xA2};
 80012a8:	4a61      	ldr	r2, [pc, #388]	@ (8001430 <main+0x300>)
 80012aa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80012b0:	c303      	stmia	r3!, {r0, r1}
 80012b2:	701a      	strb	r2, [r3, #0]
  uint8_t hazardLights[]  = {0xD0, 0x07, 0xBF, 0x5B, 0x63, 0x83, 0x0E, 0x3F, 0xE2};
 80012b4:	4a5f      	ldr	r2, [pc, #380]	@ (8001434 <main+0x304>)
 80012b6:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80012ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80012bc:	c303      	stmia	r3!, {r0, r1}
 80012be:	701a      	strb	r2, [r3, #0]
  uint8_t highBeam1[] = {0xd0, 0x07, 0xbf, 0x5b, 0x07, 0x83, 0x0a, 0x3f, 0x82, '\n'};  // Zakończone LF (Line Feed)
 80012c0:	4a5d      	ldr	r2, [pc, #372]	@ (8001438 <main+0x308>)
 80012c2:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80012c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80012c8:	c303      	stmia	r3!, {r0, r1}
 80012ca:	801a      	strh	r2, [r3, #0]
  uint8_t highBeam2[] = {0xd0, 0x07, 0xbf, 0x5b, 0x07, 0x83, 0x0a, 0x3f, 0x82, '\r'};  // Zakończone CR (Carriage Return)
 80012cc:	4a5b      	ldr	r2, [pc, #364]	@ (800143c <main+0x30c>)
 80012ce:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80012d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80012d4:	c303      	stmia	r3!, {r0, r1}
 80012d6:	801a      	strh	r2, [r3, #0]
  uint8_t highBeam3[] = {0xd0, 0x07, 0xbf, 0x5b, 0x07, 0x83, 0x0a, 0x3f, 0x82, '\r', '\n'}; // Zakończone CRLF (Carriage Return + Line Feed)
 80012d8:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80012dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80012e0:	4a57      	ldr	r2, [pc, #348]	@ (8001440 <main+0x310>)
 80012e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80012e4:	c303      	stmia	r3!, {r0, r1}
 80012e6:	801a      	strh	r2, [r3, #0]
 80012e8:	3302      	adds	r3, #2
 80012ea:	0c12      	lsrs	r2, r2, #16
 80012ec:	701a      	strb	r2, [r3, #0]
  uint8_t highBeam4[] = {0xd0, 0x07, 0xbf, 0x5b, 0x07, 0x83, 0x0a, 0x3f, 0x82, '\r', '\n'};
 80012ee:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80012f2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80012f6:	4a52      	ldr	r2, [pc, #328]	@ (8001440 <main+0x310>)
 80012f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80012fa:	c303      	stmia	r3!, {r0, r1}
 80012fc:	801a      	strh	r2, [r3, #0]
 80012fe:	3302      	adds	r3, #2
 8001300:	0c12      	lsrs	r2, r2, #16
 8001302:	701a      	strb	r2, [r3, #0]
  uint8_t testing[] = {0xd0, 0x07, 0xbf, 0x5b, 0x01 , 0xC9 , 0x02 , 0x02 , 0xFB, '\n'}; // Zakończone NULL (znak końca ciągu w stylu C)
 8001304:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001308:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800130c:	4a4d      	ldr	r2, [pc, #308]	@ (8001444 <main+0x314>)
 800130e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001310:	c303      	stmia	r3!, {r0, r1}
 8001312:	801a      	strh	r2, [r3, #0]
  uint8_t byte_before_newline = highBeam4[8];  // 0x82
 8001314:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001318:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800131c:	7a1b      	ldrb	r3, [r3, #8]
 800131e:	f887 31a5 	strb.w	r3, [r7, #421]	@ 0x1a5
  uint8_t new_byte = (byte_before_newline << 1); // Przesuwamy 0x82 w lewo o 1 bit, aby zrobić miejsce na bit LOW
 8001322:	f897 31a5 	ldrb.w	r3, [r7, #421]	@ 0x1a5
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	f887 31a4 	strb.w	r3, [r7, #420]	@ 0x1a4

  // Wstawiamy nowy bajt do tablicy
  highBeam4[8] = new_byte;  // Zaktualizowana wartość 0x82 -> 0x04
 800132c:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001330:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001334:	f897 21a4 	ldrb.w	r2, [r7, #420]	@ 0x1a4
 8001338:	721a      	strb	r2, [r3, #8]
  uint8_t highBeam5[] = {0xd0, 0x07, 0xbf, 0x5b, 0x07, 0x83, 0x0a, 0x3f, 0x82, 0xFF}; // Zakończone 0xFF (często używane w niektórych protokołach)
 800133a:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800133e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001342:	4a41      	ldr	r2, [pc, #260]	@ (8001448 <main+0x318>)
 8001344:	ca07      	ldmia	r2, {r0, r1, r2}
 8001346:	c303      	stmia	r3!, {r0, r1}
 8001348:	801a      	strh	r2, [r3, #0]
  uint8_t stopTurning[]   = {0xD0, 0x07, 0xBF, 0x5B, 0x03, 0x83, 0x0A, 0x3F, 0x86};
 800134a:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800134e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001352:	4a3e      	ldr	r2, [pc, #248]	@ (800144c <main+0x31c>)
 8001354:	ca07      	ldmia	r2, {r0, r1, r2}
 8001356:	c303      	stmia	r3!, {r0, r1}
 8001358:	701a      	strb	r2, [r3, #0]
  uint8_t lcdTurnOff[]    = {0x30, 0x19, 0x80, 0x1A, 0x30, 0x00, 0x20, 0x20, 0x20,
 800135a:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800135e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001362:	4a3b      	ldr	r2, [pc, #236]	@ (8001450 <main+0x320>)
 8001364:	461c      	mov	r4, r3
 8001366:	4615      	mov	r5, r2
 8001368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800136a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800136c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001370:	c407      	stmia	r4!, {r0, r1, r2}
 8001372:	8023      	strh	r3, [r4, #0]
 8001374:	3402      	adds	r4, #2
 8001376:	0c1b      	lsrs	r3, r3, #16
 8001378:	7023      	strb	r3, [r4, #0]
                             0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                             0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x83, 0x80, 0x04,
                             0x30, 0x1B, 0x00, 0x8F};

  uint8_t turnRight_noChecksum[] = {0xD0, 0x07, 0xBF, 0x5B, 0x40, 0x40, 0x32, 0x40};
 800137a:	4b36      	ldr	r3, [pc, #216]	@ (8001454 <main+0x324>)
 800137c:	f507 72c1 	add.w	r2, r7, #386	@ 0x182
 8001380:	cb03      	ldmia	r3!, {r0, r1}
 8001382:	6010      	str	r0, [r2, #0]
 8001384:	6051      	str	r1, [r2, #4]
  uint8_t turnLeft_noChecksum[]  = {0xD0, 0x07, 0xBF, 0x5B, 0x23, 0x83, 0x0E, 0x3F};
 8001386:	4b34      	ldr	r3, [pc, #208]	@ (8001458 <main+0x328>)
 8001388:	f207 1271 	addw	r2, r7, #369	@ 0x171
 800138c:	cb03      	ldmia	r3!, {r0, r1}
 800138e:	6010      	str	r0, [r2, #0]
 8001390:	6051      	str	r1, [r2, #4]

 // HAL_UART_Transmit(&huart2, turnRight, sizeof(turnRight), 500);
  //HAL_UART_Transmit(&huart2, frame, sizeof(frame), HAL_MAX_DELAY);
  //HAL_UART_Transmit(&huart2, frame2, sizeof(frame), HAL_MAX_DELAY);
  uint8_t rxData[1]; // Bufor na 1 bajt danych
  uint16_t speed = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	f8a7 31a2 	strh.w	r3, [r7, #418]	@ 0x1a2
	    int8_t direction = 1; // 1 = rośnie, -1 = maleje
 8001398:	2301      	movs	r3, #1
 800139a:	f887 31a1 	strb.w	r3, [r7, #417]	@ 0x1a1
//	              printf("Dash Lights: %u\n", received_packet.dashLights);
//	              printf("Show Lights: %u\n", received_packet.showLights);
//	          }
//
//	          HAL_Delay(100);  // Czekaj przed kolejnym odczytem
	         int speed_kph = packet.speed * 3.6;
 800139e:	4b2f      	ldr	r3, [pc, #188]	@ (800145c <main+0x32c>)
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff f8e4 	bl	8000570 <__aeabi_f2d>
 80013a8:	a311      	add	r3, pc, #68	@ (adr r3, 80013f0 <main+0x2c0>)
 80013aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ae:	f7ff f937 	bl	8000620 <__aeabi_dmul>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4610      	mov	r0, r2
 80013b8:	4619      	mov	r1, r3
 80013ba:	f7ff fbe1 	bl	8000b80 <__aeabi_d2iz>
 80013be:	4603      	mov	r3, r0
 80013c0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c

	        Set_PWM_Frequency(speed_kph);
 80013c4:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fe54 	bl	8001078 <Set_PWM_Frequency>
	  // HAL_UART_Transmit(&huart2, frame, sizeof(frame), 100);

	   //HAL_UART_Transmit(&huart2, frame2, sizeof(frame), HAL_MAX_DELAY);
	  // printf("working\n");
	   // HAL_UART_Transmit(&huart2, piecpiec		, sizeof(piecpiec), 100);
	   uint8_t lf = 0x0A;  // LF (Line Feed) w ASCII
 80013d0:	230a      	movs	r3, #10
 80013d2:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		 //Set_PWM_Frequency(100);
		 // HAL_Delay(10);  // Poczekaj chwilę, aby USART mógł zakończyć transmisję

		  //HAL_UART_Transmit(&huart2, &lf, 1, HAL_MAX_DELAY);  // Wysyłanie LF

	      uint8_t turn_left_data[] = {0xD0 ,0x08 ,0xBF ,0x5B ,0x40 ,0x00 ,0x04 ,0x00 ,0x00 ,0x78};
 80013d6:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80013da:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80013de:	4a20      	ldr	r2, [pc, #128]	@ (8001460 <main+0x330>)
 80013e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80013e2:	c303      	stmia	r3!, {r0, r1}
 80013e4:	801a      	strh	r2, [r3, #0]
	      uint8_t identifier = 0x5A;  // Przykładowy identyfikator ramki
 80013e6:	235a      	movs	r3, #90	@ 0x5a
 80013e8:	f887 319a 	strb.w	r3, [r7, #410]	@ 0x19a
  {
 80013ec:	bf00      	nop
 80013ee:	e7d6      	b.n	800139e <main+0x26e>
 80013f0:	cccccccd 	.word	0xcccccccd
 80013f4:	400ccccc 	.word	0x400ccccc
 80013f8:	20000640 	.word	0x20000640
 80013fc:	200004c0 	.word	0x200004c0
 8001400:	20000348 	.word	0x20000348
 8001404:	200002b0 	.word	0x200002b0
 8001408:	080107b4 	.word	0x080107b4
 800140c:	080107bc 	.word	0x080107bc
 8001410:	20000000 	.word	0x20000000
 8001414:	20000470 	.word	0x20000470
 8001418:	200001f8 	.word	0x200001f8
 800141c:	080107e8 	.word	0x080107e8
 8001420:	08010804 	.word	0x08010804
 8001424:	42020400 	.word	0x42020400
 8001428:	08010810 	.word	0x08010810
 800142c:	0801081c 	.word	0x0801081c
 8001430:	08010828 	.word	0x08010828
 8001434:	08010834 	.word	0x08010834
 8001438:	08010840 	.word	0x08010840
 800143c:	0801084c 	.word	0x0801084c
 8001440:	08010858 	.word	0x08010858
 8001444:	08010864 	.word	0x08010864
 8001448:	08010870 	.word	0x08010870
 800144c:	0801087c 	.word	0x0801087c
 8001450:	08010888 	.word	0x08010888
 8001454:	080108a8 	.word	0x080108a8
 8001458:	080108b0 	.word	0x080108b0
 800145c:	2000064c 	.word	0x2000064c
 8001460:	080108b8 	.word	0x080108b8

08001464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b09c      	sub	sp, #112	@ 0x70
 8001468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800146a:	f107 0320 	add.w	r3, r7, #32
 800146e:	2250      	movs	r2, #80	@ 0x50
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f00b fe46 	bl	800d104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
 8001488:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800148a:	4b2d      	ldr	r3, [pc, #180]	@ (8001540 <SystemClock_Config+0xdc>)
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	4a2c      	ldr	r2, [pc, #176]	@ (8001540 <SystemClock_Config+0xdc>)
 8001490:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001494:	6113      	str	r3, [r2, #16]
 8001496:	4b2a      	ldr	r3, [pc, #168]	@ (8001540 <SystemClock_Config+0xdc>)
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80014a2:	bf00      	nop
 80014a4:	4b26      	ldr	r3, [pc, #152]	@ (8001540 <SystemClock_Config+0xdc>)
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	f003 0308 	and.w	r3, r3, #8
 80014ac:	2b08      	cmp	r3, #8
 80014ae:	d1f9      	bne.n	80014a4 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014b0:	2301      	movs	r3, #1
 80014b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ba:	2302      	movs	r3, #2
 80014bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80014be:	2303      	movs	r3, #3
 80014c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014c2:	2301      	movs	r3, #1
 80014c4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 62;
 80014c6:	233e      	movs	r3, #62	@ 0x3e
 80014c8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80014ca:	2302      	movs	r3, #2
 80014cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014ce:	2302      	movs	r3, #2
 80014d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014d2:	2302      	movs	r3, #2
 80014d4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 80014d6:	230c      	movs	r3, #12
 80014d8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80014da:	2300      	movs	r3, #0
 80014dc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 80014de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e4:	f107 0320 	add.w	r3, r7, #32
 80014e8:	4618      	mov	r0, r3
 80014ea:	f002 fd57 	bl	8003f9c <HAL_RCC_OscConfig>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014f4:	f000 fcc8 	bl	8001e88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f8:	231f      	movs	r3, #31
 80014fa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014fc:	2303      	movs	r3, #3
 80014fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001508:	2300      	movs	r3, #0
 800150a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800150c:	2300      	movs	r3, #0
 800150e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001510:	f107 0308 	add.w	r3, r7, #8
 8001514:	2105      	movs	r1, #5
 8001516:	4618      	mov	r0, r3
 8001518:	f003 f978 	bl	800480c <HAL_RCC_ClockConfig>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001522:	f000 fcb1 	bl	8001e88 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8001526:	4b07      	ldr	r3, [pc, #28]	@ (8001544 <SystemClock_Config+0xe0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800152e:	4a05      	ldr	r2, [pc, #20]	@ (8001544 <SystemClock_Config+0xe0>)
 8001530:	f043 0320 	orr.w	r3, r3, #32
 8001534:	6013      	str	r3, [r2, #0]
}
 8001536:	bf00      	nop
 8001538:	3770      	adds	r7, #112	@ 0x70
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	44020800 	.word	0x44020800
 8001544:	40022000 	.word	0x40022000

08001548 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800154c:	4b1f      	ldr	r3, [pc, #124]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 800154e:	4a20      	ldr	r2, [pc, #128]	@ (80015d0 <MX_FDCAN1_Init+0x88>)
 8001550:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001552:	4b1e      	ldr	r3, [pc, #120]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 8001554:	2200      	movs	r2, #0
 8001556:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001558:	4b1c      	ldr	r3, [pc, #112]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800155e:	4b1b      	ldr	r3, [pc, #108]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 8001560:	2200      	movs	r2, #0
 8001562:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001564:	4b19      	ldr	r3, [pc, #100]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 8001566:	2200      	movs	r2, #0
 8001568:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800156a:	4b18      	ldr	r3, [pc, #96]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 800156c:	2200      	movs	r2, #0
 800156e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001570:	4b16      	ldr	r3, [pc, #88]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 8001572:	2200      	movs	r2, #0
 8001574:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001576:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 8001578:	2201      	movs	r2, #1
 800157a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800157c:	4b13      	ldr	r3, [pc, #76]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 800157e:	2201      	movs	r2, #1
 8001580:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 11;
 8001582:	4b12      	ldr	r3, [pc, #72]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 8001584:	220b      	movs	r2, #11
 8001586:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 8001588:	4b10      	ldr	r3, [pc, #64]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 800158a:	2204      	movs	r2, #4
 800158c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800158e:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 8001590:	2201      	movs	r2, #1
 8001592:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001594:	4b0d      	ldr	r3, [pc, #52]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 8001596:	2201      	movs	r2, #1
 8001598:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800159a:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 800159c:	2201      	movs	r2, #1
 800159e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80015a0:	4b0a      	ldr	r3, [pc, #40]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80015a6:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80015ac:	4b07      	ldr	r3, [pc, #28]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80015b2:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80015b8:	4804      	ldr	r0, [pc, #16]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 80015ba:	f001 fbe3 	bl	8002d84 <HAL_FDCAN_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80015c4:	f000 fc60 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	200001f8 	.word	0x200001f8
 80015d0:	4000a400 	.word	0x4000a400

080015d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001648 <MX_I2C1_Init+0x74>)
 80015da:	4a1c      	ldr	r2, [pc, #112]	@ (800164c <MX_I2C1_Init+0x78>)
 80015dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60808CD3;
 80015de:	4b1a      	ldr	r3, [pc, #104]	@ (8001648 <MX_I2C1_Init+0x74>)
 80015e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001650 <MX_I2C1_Init+0x7c>)
 80015e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015e4:	4b18      	ldr	r3, [pc, #96]	@ (8001648 <MX_I2C1_Init+0x74>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015ea:	4b17      	ldr	r3, [pc, #92]	@ (8001648 <MX_I2C1_Init+0x74>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015f0:	4b15      	ldr	r3, [pc, #84]	@ (8001648 <MX_I2C1_Init+0x74>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015f6:	4b14      	ldr	r3, [pc, #80]	@ (8001648 <MX_I2C1_Init+0x74>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015fc:	4b12      	ldr	r3, [pc, #72]	@ (8001648 <MX_I2C1_Init+0x74>)
 80015fe:	2200      	movs	r2, #0
 8001600:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001602:	4b11      	ldr	r3, [pc, #68]	@ (8001648 <MX_I2C1_Init+0x74>)
 8001604:	2200      	movs	r2, #0
 8001606:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001608:	4b0f      	ldr	r3, [pc, #60]	@ (8001648 <MX_I2C1_Init+0x74>)
 800160a:	2200      	movs	r2, #0
 800160c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800160e:	480e      	ldr	r0, [pc, #56]	@ (8001648 <MX_I2C1_Init+0x74>)
 8001610:	f002 fb20 	bl	8003c54 <HAL_I2C_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800161a:	f000 fc35 	bl	8001e88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800161e:	2100      	movs	r1, #0
 8001620:	4809      	ldr	r0, [pc, #36]	@ (8001648 <MX_I2C1_Init+0x74>)
 8001622:	f002 fbb2 	bl	8003d8a <HAL_I2CEx_ConfigAnalogFilter>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800162c:	f000 fc2c 	bl	8001e88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001630:	2100      	movs	r1, #0
 8001632:	4805      	ldr	r0, [pc, #20]	@ (8001648 <MX_I2C1_Init+0x74>)
 8001634:	f002 fbf4 	bl	8003e20 <HAL_I2CEx_ConfigDigitalFilter>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800163e:	f000 fc23 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	2000025c 	.word	0x2000025c
 800164c:	40005400 	.word	0x40005400
 8001650:	60808cd3 	.word	0x60808cd3

08001654 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001658:	2000      	movs	r0, #0
 800165a:	f002 fc2d 	bl	8003eb8 <HAL_ICACHE_ConfigAssociativityMode>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001664:	f000 fc10 	bl	8001e88 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001668:	f002 fc46 	bl	8003ef8 <HAL_ICACHE_Enable>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001672:	f000 fc09 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b09c      	sub	sp, #112	@ 0x70
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001682:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001690:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800169c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
 80016ac:	615a      	str	r2, [r3, #20]
 80016ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	2234      	movs	r2, #52	@ 0x34
 80016b4:	2100      	movs	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f00b fd24 	bl	800d104 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016bc:	4b4c      	ldr	r3, [pc, #304]	@ (80017f0 <MX_TIM1_Init+0x174>)
 80016be:	4a4d      	ldr	r2, [pc, #308]	@ (80017f4 <MX_TIM1_Init+0x178>)
 80016c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 49;
 80016c2:	4b4b      	ldr	r3, [pc, #300]	@ (80017f0 <MX_TIM1_Init+0x174>)
 80016c4:	2231      	movs	r2, #49	@ 0x31
 80016c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c8:	4b49      	ldr	r3, [pc, #292]	@ (80017f0 <MX_TIM1_Init+0x174>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80016ce:	4b48      	ldr	r3, [pc, #288]	@ (80017f0 <MX_TIM1_Init+0x174>)
 80016d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d6:	4b46      	ldr	r3, [pc, #280]	@ (80017f0 <MX_TIM1_Init+0x174>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016dc:	4b44      	ldr	r3, [pc, #272]	@ (80017f0 <MX_TIM1_Init+0x174>)
 80016de:	2200      	movs	r2, #0
 80016e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e2:	4b43      	ldr	r3, [pc, #268]	@ (80017f0 <MX_TIM1_Init+0x174>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016e8:	4841      	ldr	r0, [pc, #260]	@ (80017f0 <MX_TIM1_Init+0x174>)
 80016ea:	f006 fe55 	bl	8008398 <HAL_TIM_Base_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80016f4:	f000 fbc8 	bl	8001e88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016fc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016fe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001702:	4619      	mov	r1, r3
 8001704:	483a      	ldr	r0, [pc, #232]	@ (80017f0 <MX_TIM1_Init+0x174>)
 8001706:	f007 fc31 	bl	8008f6c <HAL_TIM_ConfigClockSource>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001710:	f000 fbba 	bl	8001e88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001714:	4836      	ldr	r0, [pc, #216]	@ (80017f0 <MX_TIM1_Init+0x174>)
 8001716:	f007 f829 	bl	800876c <HAL_TIM_PWM_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001720:	f000 fbb2 	bl	8001e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001724:	2300      	movs	r3, #0
 8001726:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001728:	2300      	movs	r3, #0
 800172a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172c:	2300      	movs	r3, #0
 800172e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001730:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001734:	4619      	mov	r1, r3
 8001736:	482e      	ldr	r0, [pc, #184]	@ (80017f0 <MX_TIM1_Init+0x174>)
 8001738:	f008 fa40 	bl	8009bbc <HAL_TIMEx_MasterConfigSynchronization>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001742:	f000 fba1 	bl	8001e88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001746:	2360      	movs	r3, #96	@ 0x60
 8001748:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 5000;
 800174a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800174e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001750:	2300      	movs	r3, #0
 8001752:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001754:	2300      	movs	r3, #0
 8001756:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001758:	2300      	movs	r3, #0
 800175a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800175c:	2300      	movs	r3, #0
 800175e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001760:	2300      	movs	r3, #0
 8001762:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001764:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001768:	2200      	movs	r2, #0
 800176a:	4619      	mov	r1, r3
 800176c:	4820      	ldr	r0, [pc, #128]	@ (80017f0 <MX_TIM1_Init+0x174>)
 800176e:	f007 fae9 	bl	8008d44 <HAL_TIM_PWM_ConfigChannel>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001778:	f000 fb86 	bl	8001e88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800177c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001780:	2204      	movs	r2, #4
 8001782:	4619      	mov	r1, r3
 8001784:	481a      	ldr	r0, [pc, #104]	@ (80017f0 <MX_TIM1_Init+0x174>)
 8001786:	f007 fadd 	bl	8008d44 <HAL_TIM_PWM_ConfigChannel>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001790:	f000 fb7a 	bl	8001e88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001794:	2300      	movs	r3, #0
 8001796:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001798:	2300      	movs	r3, #0
 800179a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800179c:	2300      	movs	r3, #0
 800179e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80017b2:	2300      	movs	r3, #0
 80017b4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017be:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80017c4:	2300      	movs	r3, #0
 80017c6:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	4619      	mov	r1, r3
 80017d0:	4807      	ldr	r0, [pc, #28]	@ (80017f0 <MX_TIM1_Init+0x174>)
 80017d2:	f008 fac3 	bl	8009d5c <HAL_TIMEx_ConfigBreakDeadTime>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 80017dc:	f000 fb54 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017e0:	4803      	ldr	r0, [pc, #12]	@ (80017f0 <MX_TIM1_Init+0x174>)
 80017e2:	f000 fcaf 	bl	8002144 <HAL_TIM_MspPostInit>

}
 80017e6:	bf00      	nop
 80017e8:	3770      	adds	r7, #112	@ 0x70
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	200002b0 	.word	0x200002b0
 80017f4:	40012c00 	.word	0x40012c00

080017f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	@ 0x28
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017fe:	f107 031c 	add.w	r3, r7, #28
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800180a:	463b      	mov	r3, r7
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
 8001818:	615a      	str	r2, [r3, #20]
 800181a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800181c:	4b22      	ldr	r3, [pc, #136]	@ (80018a8 <MX_TIM2_Init+0xb0>)
 800181e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001822:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001824:	4b20      	ldr	r3, [pc, #128]	@ (80018a8 <MX_TIM2_Init+0xb0>)
 8001826:	2200      	movs	r2, #0
 8001828:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182a:	4b1f      	ldr	r3, [pc, #124]	@ (80018a8 <MX_TIM2_Init+0xb0>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001830:	4b1d      	ldr	r3, [pc, #116]	@ (80018a8 <MX_TIM2_Init+0xb0>)
 8001832:	f04f 32ff 	mov.w	r2, #4294967295
 8001836:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001838:	4b1b      	ldr	r3, [pc, #108]	@ (80018a8 <MX_TIM2_Init+0xb0>)
 800183a:	2200      	movs	r2, #0
 800183c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800183e:	4b1a      	ldr	r3, [pc, #104]	@ (80018a8 <MX_TIM2_Init+0xb0>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001844:	4818      	ldr	r0, [pc, #96]	@ (80018a8 <MX_TIM2_Init+0xb0>)
 8001846:	f006 ff91 	bl	800876c <HAL_TIM_PWM_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001850:	f000 fb1a 	bl	8001e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001854:	2300      	movs	r3, #0
 8001856:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001858:	2300      	movs	r3, #0
 800185a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800185c:	f107 031c 	add.w	r3, r7, #28
 8001860:	4619      	mov	r1, r3
 8001862:	4811      	ldr	r0, [pc, #68]	@ (80018a8 <MX_TIM2_Init+0xb0>)
 8001864:	f008 f9aa 	bl	8009bbc <HAL_TIMEx_MasterConfigSynchronization>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800186e:	f000 fb0b 	bl	8001e88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001872:	2360      	movs	r3, #96	@ 0x60
 8001874:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800187a:	2300      	movs	r3, #0
 800187c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001882:	463b      	mov	r3, r7
 8001884:	2200      	movs	r2, #0
 8001886:	4619      	mov	r1, r3
 8001888:	4807      	ldr	r0, [pc, #28]	@ (80018a8 <MX_TIM2_Init+0xb0>)
 800188a:	f007 fa5b 	bl	8008d44 <HAL_TIM_PWM_ConfigChannel>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001894:	f000 faf8 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001898:	4803      	ldr	r0, [pc, #12]	@ (80018a8 <MX_TIM2_Init+0xb0>)
 800189a:	f000 fc53 	bl	8002144 <HAL_TIM_MspPostInit>

}
 800189e:	bf00      	nop
 80018a0:	3728      	adds	r7, #40	@ 0x28
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200002fc 	.word	0x200002fc

080018ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018b0:	4b22      	ldr	r3, [pc, #136]	@ (800193c <MX_USART1_UART_Init+0x90>)
 80018b2:	4a23      	ldr	r2, [pc, #140]	@ (8001940 <MX_USART1_UART_Init+0x94>)
 80018b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018b6:	4b21      	ldr	r3, [pc, #132]	@ (800193c <MX_USART1_UART_Init+0x90>)
 80018b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018be:	4b1f      	ldr	r3, [pc, #124]	@ (800193c <MX_USART1_UART_Init+0x90>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018c4:	4b1d      	ldr	r3, [pc, #116]	@ (800193c <MX_USART1_UART_Init+0x90>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018ca:	4b1c      	ldr	r3, [pc, #112]	@ (800193c <MX_USART1_UART_Init+0x90>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018d0:	4b1a      	ldr	r3, [pc, #104]	@ (800193c <MX_USART1_UART_Init+0x90>)
 80018d2:	220c      	movs	r2, #12
 80018d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d6:	4b19      	ldr	r3, [pc, #100]	@ (800193c <MX_USART1_UART_Init+0x90>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018dc:	4b17      	ldr	r3, [pc, #92]	@ (800193c <MX_USART1_UART_Init+0x90>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018e2:	4b16      	ldr	r3, [pc, #88]	@ (800193c <MX_USART1_UART_Init+0x90>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018e8:	4b14      	ldr	r3, [pc, #80]	@ (800193c <MX_USART1_UART_Init+0x90>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018ee:	4b13      	ldr	r3, [pc, #76]	@ (800193c <MX_USART1_UART_Init+0x90>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018f4:	4811      	ldr	r0, [pc, #68]	@ (800193c <MX_USART1_UART_Init+0x90>)
 80018f6:	f008 fb11 	bl	8009f1c <HAL_UART_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001900:	f000 fac2 	bl	8001e88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001904:	2100      	movs	r1, #0
 8001906:	480d      	ldr	r0, [pc, #52]	@ (800193c <MX_USART1_UART_Init+0x90>)
 8001908:	f00a fa23 	bl	800bd52 <HAL_UARTEx_SetTxFifoThreshold>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001912:	f000 fab9 	bl	8001e88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001916:	2100      	movs	r1, #0
 8001918:	4808      	ldr	r0, [pc, #32]	@ (800193c <MX_USART1_UART_Init+0x90>)
 800191a:	f00a fa58 	bl	800bdce <HAL_UARTEx_SetRxFifoThreshold>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001924:	f000 fab0 	bl	8001e88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001928:	4804      	ldr	r0, [pc, #16]	@ (800193c <MX_USART1_UART_Init+0x90>)
 800192a:	f00a f9d9 	bl	800bce0 <HAL_UARTEx_DisableFifoMode>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001934:	f000 faa8 	bl	8001e88 <Error_Handler>
  }
}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000348 	.word	0x20000348
 8001940:	40013800 	.word	0x40013800

08001944 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001948:	4b23      	ldr	r3, [pc, #140]	@ (80019d8 <MX_USART2_UART_Init+0x94>)
 800194a:	4a24      	ldr	r2, [pc, #144]	@ (80019dc <MX_USART2_UART_Init+0x98>)
 800194c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800194e:	4b22      	ldr	r3, [pc, #136]	@ (80019d8 <MX_USART2_UART_Init+0x94>)
 8001950:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001954:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001956:	4b20      	ldr	r3, [pc, #128]	@ (80019d8 <MX_USART2_UART_Init+0x94>)
 8001958:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800195c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800195e:	4b1e      	ldr	r3, [pc, #120]	@ (80019d8 <MX_USART2_UART_Init+0x94>)
 8001960:	2200      	movs	r2, #0
 8001962:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001964:	4b1c      	ldr	r3, [pc, #112]	@ (80019d8 <MX_USART2_UART_Init+0x94>)
 8001966:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800196a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800196c:	4b1a      	ldr	r3, [pc, #104]	@ (80019d8 <MX_USART2_UART_Init+0x94>)
 800196e:	220c      	movs	r2, #12
 8001970:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001972:	4b19      	ldr	r3, [pc, #100]	@ (80019d8 <MX_USART2_UART_Init+0x94>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001978:	4b17      	ldr	r3, [pc, #92]	@ (80019d8 <MX_USART2_UART_Init+0x94>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800197e:	4b16      	ldr	r3, [pc, #88]	@ (80019d8 <MX_USART2_UART_Init+0x94>)
 8001980:	2200      	movs	r2, #0
 8001982:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001984:	4b14      	ldr	r3, [pc, #80]	@ (80019d8 <MX_USART2_UART_Init+0x94>)
 8001986:	2200      	movs	r2, #0
 8001988:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800198a:	4b13      	ldr	r3, [pc, #76]	@ (80019d8 <MX_USART2_UART_Init+0x94>)
 800198c:	2200      	movs	r2, #0
 800198e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001990:	4811      	ldr	r0, [pc, #68]	@ (80019d8 <MX_USART2_UART_Init+0x94>)
 8001992:	f008 fac3 	bl	8009f1c <HAL_UART_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 800199c:	f000 fa74 	bl	8001e88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019a0:	2100      	movs	r1, #0
 80019a2:	480d      	ldr	r0, [pc, #52]	@ (80019d8 <MX_USART2_UART_Init+0x94>)
 80019a4:	f00a f9d5 	bl	800bd52 <HAL_UARTEx_SetTxFifoThreshold>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80019ae:	f000 fa6b 	bl	8001e88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019b2:	2100      	movs	r1, #0
 80019b4:	4808      	ldr	r0, [pc, #32]	@ (80019d8 <MX_USART2_UART_Init+0x94>)
 80019b6:	f00a fa0a 	bl	800bdce <HAL_UARTEx_SetRxFifoThreshold>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80019c0:	f000 fa62 	bl	8001e88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80019c4:	4804      	ldr	r0, [pc, #16]	@ (80019d8 <MX_USART2_UART_Init+0x94>)
 80019c6:	f00a f98b 	bl	800bce0 <HAL_UARTEx_DisableFifoMode>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80019d0:	f000 fa5a 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	200003dc 	.word	0x200003dc
 80019dc:	40004400 	.word	0x40004400

080019e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	@ 0x28
 80019e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e6:	f107 0314 	add.w	r3, r7, #20
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	60da      	str	r2, [r3, #12]
 80019f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f6:	4b5d      	ldr	r3, [pc, #372]	@ (8001b6c <MX_GPIO_Init+0x18c>)
 80019f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019fc:	4a5b      	ldr	r2, [pc, #364]	@ (8001b6c <MX_GPIO_Init+0x18c>)
 80019fe:	f043 0304 	orr.w	r3, r3, #4
 8001a02:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a06:	4b59      	ldr	r3, [pc, #356]	@ (8001b6c <MX_GPIO_Init+0x18c>)
 8001a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a14:	4b55      	ldr	r3, [pc, #340]	@ (8001b6c <MX_GPIO_Init+0x18c>)
 8001a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a1a:	4a54      	ldr	r2, [pc, #336]	@ (8001b6c <MX_GPIO_Init+0x18c>)
 8001a1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a20:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a24:	4b51      	ldr	r3, [pc, #324]	@ (8001b6c <MX_GPIO_Init+0x18c>)
 8001a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	4b4e      	ldr	r3, [pc, #312]	@ (8001b6c <MX_GPIO_Init+0x18c>)
 8001a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a38:	4a4c      	ldr	r2, [pc, #304]	@ (8001b6c <MX_GPIO_Init+0x18c>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a42:	4b4a      	ldr	r3, [pc, #296]	@ (8001b6c <MX_GPIO_Init+0x18c>)
 8001a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a50:	4b46      	ldr	r3, [pc, #280]	@ (8001b6c <MX_GPIO_Init+0x18c>)
 8001a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a56:	4a45      	ldr	r2, [pc, #276]	@ (8001b6c <MX_GPIO_Init+0x18c>)
 8001a58:	f043 0302 	orr.w	r3, r3, #2
 8001a5c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a60:	4b42      	ldr	r3, [pc, #264]	@ (8001b6c <MX_GPIO_Init+0x18c>)
 8001a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a74:	483e      	ldr	r0, [pc, #248]	@ (8001b70 <MX_GPIO_Init+0x190>)
 8001a76:	f002 f8bb 	bl	8003bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(K_BUS_SLP_GPIO_Port, K_BUS_SLP_Pin, GPIO_PIN_SET);
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a80:	483b      	ldr	r0, [pc, #236]	@ (8001b70 <MX_GPIO_Init+0x190>)
 8001a82:	f002 f8b5 	bl	8003bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Backlight_STM_Pin|Batt_Charge_Light_STM_Pin|Oil_Iight_STM_Pin, GPIO_PIN_SET);
 8001a86:	2201      	movs	r2, #1
 8001a88:	2170      	movs	r1, #112	@ 0x70
 8001a8a:	483a      	ldr	r0, [pc, #232]	@ (8001b74 <MX_GPIO_Init+0x194>)
 8001a8c:	f002 f8b0 	bl	8003bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Brake_fluid_light_STM_Pin|TRCVR_MODE_Pin|D3_Pin, GPIO_PIN_RESET);
 8001a90:	2200      	movs	r2, #0
 8001a92:	f248 4180 	movw	r1, #33920	@ 0x8480
 8001a96:	4837      	ldr	r0, [pc, #220]	@ (8001b74 <MX_GPIO_Init+0x194>)
 8001a98:	f002 f8aa 	bl	8003bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ABS_STM_Pin|Parking_Brake_STM_Pin|Brake_Wear_Sens_STM_Pin|Coolant_level_Sens_STM_Pin
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f241 413e 	movw	r1, #5182	@ 0x143e
 8001aa2:	4835      	ldr	r0, [pc, #212]	@ (8001b78 <MX_GPIO_Init+0x198>)
 8001aa4:	f002 f8a4 	bl	8003bf0 <HAL_GPIO_WritePin>
                          |D2_Pin|D1_Pin|Fuel_HVC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Washer_Fluid_Lvl_STM_GPIO_Port, Washer_Fluid_Lvl_STM_Pin, GPIO_PIN_SET);
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001aae:	4832      	ldr	r0, [pc, #200]	@ (8001b78 <MX_GPIO_Init+0x198>)
 8001ab0:	f002 f89e 	bl	8003bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ab4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aba:	2301      	movs	r3, #1
 8001abc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac6:	f107 0314 	add.w	r3, r7, #20
 8001aca:	4619      	mov	r1, r3
 8001acc:	4828      	ldr	r0, [pc, #160]	@ (8001b70 <MX_GPIO_Init+0x190>)
 8001ace:	f001 ff3d 	bl	800394c <HAL_GPIO_Init>

  /*Configure GPIO pin : K_BUS_SLP_Pin */
  GPIO_InitStruct.Pin = K_BUS_SLP_Pin;
 8001ad2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001adc:	2301      	movs	r3, #1
 8001ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(K_BUS_SLP_GPIO_Port, &GPIO_InitStruct);
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4821      	ldr	r0, [pc, #132]	@ (8001b70 <MX_GPIO_Init+0x190>)
 8001aec:	f001 ff2e 	bl	800394c <HAL_GPIO_Init>

  /*Configure GPIO pin : Backlight_STM_Pin */
  GPIO_InitStruct.Pin = Backlight_STM_Pin;
 8001af0:	2310      	movs	r3, #16
 8001af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001af4:	2311      	movs	r3, #17
 8001af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001af8:	2301      	movs	r3, #1
 8001afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afc:	2300      	movs	r3, #0
 8001afe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Backlight_STM_GPIO_Port, &GPIO_InitStruct);
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	4619      	mov	r1, r3
 8001b06:	481b      	ldr	r0, [pc, #108]	@ (8001b74 <MX_GPIO_Init+0x194>)
 8001b08:	f001 ff20 	bl	800394c <HAL_GPIO_Init>

  /*Configure GPIO pins : Batt_Charge_Light_STM_Pin Oil_Iight_STM_Pin Brake_fluid_light_STM_Pin TRCVR_MODE_Pin
                           D3_Pin */
  GPIO_InitStruct.Pin = Batt_Charge_Light_STM_Pin|Oil_Iight_STM_Pin|Brake_fluid_light_STM_Pin|TRCVR_MODE_Pin
 8001b0c:	f248 43e0 	movw	r3, #34016	@ 0x84e0
 8001b10:	617b      	str	r3, [r7, #20]
                          |D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b12:	2301      	movs	r3, #1
 8001b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	4813      	ldr	r0, [pc, #76]	@ (8001b74 <MX_GPIO_Init+0x194>)
 8001b26:	f001 ff11 	bl	800394c <HAL_GPIO_Init>

  /*Configure GPIO pins : ABS_STM_Pin Parking_Brake_STM_Pin Brake_Wear_Sens_STM_Pin Coolant_level_Sens_STM_Pin
                           Washer_Fluid_Lvl_STM_Pin D2_Pin D1_Pin Fuel_HVC_Pin */
  GPIO_InitStruct.Pin = ABS_STM_Pin|Parking_Brake_STM_Pin|Brake_Wear_Sens_STM_Pin|Coolant_level_Sens_STM_Pin
 8001b2a:	f243 433e 	movw	r3, #13374	@ 0x343e
 8001b2e:	617b      	str	r3, [r7, #20]
                          |Washer_Fluid_Lvl_STM_Pin|D2_Pin|D1_Pin|Fuel_HVC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b30:	2301      	movs	r3, #1
 8001b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	4619      	mov	r1, r3
 8001b42:	480d      	ldr	r0, [pc, #52]	@ (8001b78 <MX_GPIO_Init+0x198>)
 8001b44:	f001 ff02 	bl	800394c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4806      	ldr	r0, [pc, #24]	@ (8001b78 <MX_GPIO_Init+0x198>)
 8001b5e:	f001 fef5 	bl	800394c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b62:	bf00      	nop
 8001b64:	3728      	adds	r7, #40	@ 0x28
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	44020c00 	.word	0x44020c00
 8001b70:	42020800 	.word	0x42020800
 8001b74:	42020000 	.word	0x42020000
 8001b78:	42020400 	.word	0x42020400

08001b7c <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
    void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
    {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
    	if (HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0) > 0) {
 8001b86:	2140      	movs	r1, #64	@ 0x40
 8001b88:	480e      	ldr	r0, [pc, #56]	@ (8001bc4 <HAL_FDCAN_RxFifo0Callback+0x48>)
 8001b8a:	f001 fbdf 	bl	800334c <HAL_FDCAN_GetRxFifoFillLevel>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d013      	beq.n	8001bbc <HAL_FDCAN_RxFifo0Callback+0x40>
    	    if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader2, RxData2) == HAL_OK) {
 8001b94:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc8 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8001b96:	4a0d      	ldr	r2, [pc, #52]	@ (8001bcc <HAL_FDCAN_RxFifo0Callback+0x50>)
 8001b98:	2140      	movs	r1, #64	@ 0x40
 8001b9a:	480a      	ldr	r0, [pc, #40]	@ (8001bc4 <HAL_FDCAN_RxFifo0Callback+0x48>)
 8001b9c:	f001 face 	bl	800313c <HAL_FDCAN_GetRxMessage>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10a      	bne.n	8001bbc <HAL_FDCAN_RxFifo0Callback+0x40>
    	       // printf("Odebrano ramkę: ID = 0x%03X, Dane = ", RxHeader2.Identifier);
    	        for (int i = 0; i < RxHeader2.DataLength; i++) {
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	e002      	b.n	8001bb2 <HAL_FDCAN_RxFifo0Callback+0x36>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <HAL_FDCAN_RxFifo0Callback+0x50>)
 8001bb4:	68da      	ldr	r2, [r3, #12]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d8f7      	bhi.n	8001bac <HAL_FDCAN_RxFifo0Callback+0x30>
    	            //printf("%02X ", RxData2[i]);
    	        }
    	       // printf("\n");
    	    }
    	}
    }
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	200001f8 	.word	0x200001f8
 8001bc8:	200004b8 	.word	0x200004b8
 8001bcc:	20000494 	.word	0x20000494

08001bd0 <CheckCANErrors>:

void CheckCANErrors() {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
    uint32_t error = HAL_FDCAN_GetError(&hfdcan1);
 8001bd6:	4841      	ldr	r0, [pc, #260]	@ (8001cdc <CheckCANErrors+0x10c>)
 8001bd8:	f001 fe4a 	bl	8003870 <HAL_FDCAN_GetError>
 8001bdc:	6078      	str	r0, [r7, #4]

    if (error == HAL_FDCAN_ERROR_NONE) {
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d077      	beq.n	8001cd4 <CheckCANErrors+0x104>
      //  printf("Brak błędów CAN\n");
    } else {
        if (error & HAL_FDCAN_ERROR_TIMEOUT) {
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d002      	beq.n	8001bf4 <CheckCANErrors+0x24>
            printf(" HAL_FDCAN_ERROR_TIMEOUT\n");
 8001bee:	483c      	ldr	r0, [pc, #240]	@ (8001ce0 <CheckCANErrors+0x110>)
 8001bf0:	f00b f988 	bl	800cf04 <puts>
        }
        if (error & HAL_FDCAN_ERROR_NOT_INITIALIZED) {
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d002      	beq.n	8001c04 <CheckCANErrors+0x34>
            printf(" HAL_FDCAN_ERROR_NOT_INITIALIZED\n");
 8001bfe:	4839      	ldr	r0, [pc, #228]	@ (8001ce4 <CheckCANErrors+0x114>)
 8001c00:	f00b f980 	bl	800cf04 <puts>
        }
        if (error & HAL_FDCAN_ERROR_NOT_READY) {
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f003 0304 	and.w	r3, r3, #4
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d002      	beq.n	8001c14 <CheckCANErrors+0x44>
            printf(" HAL_FDCAN_ERROR_NOT_READY\n");
 8001c0e:	4836      	ldr	r0, [pc, #216]	@ (8001ce8 <CheckCANErrors+0x118>)
 8001c10:	f00b f978 	bl	800cf04 <puts>
        }
        if (error & HAL_FDCAN_ERROR_NOT_STARTED) {
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d002      	beq.n	8001c24 <CheckCANErrors+0x54>
            printf(" HAL_FDCAN_ERROR_NOT_STARTED\n");
 8001c1e:	4833      	ldr	r0, [pc, #204]	@ (8001cec <CheckCANErrors+0x11c>)
 8001c20:	f00b f970 	bl	800cf04 <puts>
        }
        if (error & HAL_FDCAN_ERROR_NOT_SUPPORTED) {
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f003 0310 	and.w	r3, r3, #16
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d002      	beq.n	8001c34 <CheckCANErrors+0x64>
            printf(" HAL_FDCAN_ERROR_NOT_SUPPORTED\n");
 8001c2e:	4830      	ldr	r0, [pc, #192]	@ (8001cf0 <CheckCANErrors+0x120>)
 8001c30:	f00b f968 	bl	800cf04 <puts>
        }
        if (error & HAL_FDCAN_ERROR_PARAM) {
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f003 0320 	and.w	r3, r3, #32
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d002      	beq.n	8001c44 <CheckCANErrors+0x74>
            printf("HAL_FDCAN_ERROR_PARAM\n");
 8001c3e:	482d      	ldr	r0, [pc, #180]	@ (8001cf4 <CheckCANErrors+0x124>)
 8001c40:	f00b f960 	bl	800cf04 <puts>
        }
        if (error & HAL_FDCAN_ERROR_PENDING) {
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d002      	beq.n	8001c54 <CheckCANErrors+0x84>
            printf("  HAL_FDCAN_ERROR_PENDING\n");
 8001c4e:	482a      	ldr	r0, [pc, #168]	@ (8001cf8 <CheckCANErrors+0x128>)
 8001c50:	f00b f958 	bl	800cf04 <puts>
        }
        if (error & HAL_FDCAN_ERROR_RAM_ACCESS) {
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d002      	beq.n	8001c64 <CheckCANErrors+0x94>
            printf("  HAL_FDCAN_ERROR_RAM_ACCESS\n");
 8001c5e:	4827      	ldr	r0, [pc, #156]	@ (8001cfc <CheckCANErrors+0x12c>)
 8001c60:	f00b f950 	bl	800cf04 <puts>
        }
        if (error & HAL_FDCAN_ERROR_PROTOCOL_ARBT) {
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d002      	beq.n	8001c74 <CheckCANErrors+0xa4>
            printf(" HAL_FDCAN_ERROR_PROTOCOL_ARBT\n");
 8001c6e:	4824      	ldr	r0, [pc, #144]	@ (8001d00 <CheckCANErrors+0x130>)
 8001c70:	f00b f948 	bl	800cf04 <puts>
        }
        if (error & HAL_FDCAN_ERROR_PROTOCOL_DATA) {
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d002      	beq.n	8001c84 <CheckCANErrors+0xb4>
                 printf(" HAL_FDCAN_ERROR_PROTOCOL_DATA\n");
 8001c7e:	4821      	ldr	r0, [pc, #132]	@ (8001d04 <CheckCANErrors+0x134>)
 8001c80:	f00b f940 	bl	800cf04 <puts>
          }
        if (error & HAL_FDCAN_ERROR_RESERVED_AREA) {
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d002      	beq.n	8001c94 <CheckCANErrors+0xc4>
                        printf(" HAL_FDCAN_ERROR_RESERVED_AREA\n");
 8001c8e:	481e      	ldr	r0, [pc, #120]	@ (8001d08 <CheckCANErrors+0x138>)
 8001c90:	f00b f938 	bl	800cf04 <puts>
                 }
	   if (error & HAL_FDCAN_ERROR_FIFO_EMPTY) {
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d002      	beq.n	8001ca4 <CheckCANErrors+0xd4>
		   printf("HAL_FDCAN_ERROR_FIFO_EMPTY\n");
 8001c9e:	481b      	ldr	r0, [pc, #108]	@ (8001d0c <CheckCANErrors+0x13c>)
 8001ca0:	f00b f930 	bl	800cf04 <puts>
	   }
	   if (error & HAL_FDCAN_ERROR_FIFO_FULL) {
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d002      	beq.n	8001cb4 <CheckCANErrors+0xe4>
		   printf("  HAL_FDCAN_ERROR_FIFO_FULL\n");
 8001cae:	4818      	ldr	r0, [pc, #96]	@ (8001d10 <CheckCANErrors+0x140>)
 8001cb0:	f00b f928 	bl	800cf04 <puts>
	   }
	   if (error & HAL_FDCAN_ERROR_LOG_OVERFLOW) {
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <CheckCANErrors+0xf4>
		   printf("  HAL_FDCAN_ERROR_LOG_OVERFLOW\n");
 8001cbe:	4815      	ldr	r0, [pc, #84]	@ (8001d14 <CheckCANErrors+0x144>)
 8001cc0:	f00b f920 	bl	800cf04 <puts>
	   }
	   if (error & HAL_FDCAN_ERROR_RAM_WDG) {
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d002      	beq.n	8001cd4 <CheckCANErrors+0x104>
		   printf(" HAL_FDCAN_ERROR_RAM_WDG\n");
 8001cce:	4812      	ldr	r0, [pc, #72]	@ (8001d18 <CheckCANErrors+0x148>)
 8001cd0:	f00b f918 	bl	800cf04 <puts>
    }
}}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	200001f8 	.word	0x200001f8
 8001ce0:	080108c4 	.word	0x080108c4
 8001ce4:	080108e0 	.word	0x080108e0
 8001ce8:	08010904 	.word	0x08010904
 8001cec:	08010920 	.word	0x08010920
 8001cf0:	08010940 	.word	0x08010940
 8001cf4:	08010960 	.word	0x08010960
 8001cf8:	08010978 	.word	0x08010978
 8001cfc:	08010994 	.word	0x08010994
 8001d00:	080109b4 	.word	0x080109b4
 8001d04:	080109d4 	.word	0x080109d4
 8001d08:	080109f4 	.word	0x080109f4
 8001d0c:	08010a14 	.word	0x08010a14
 8001d10:	08010a30 	.word	0x08010a30
 8001d14:	08010a4c 	.word	0x08010a4c
 8001d18:	08010a6c 	.word	0x08010a6c

08001d1c <HAL_TIM_PeriodElapsedCallback>:
    } else {
        printf("Brak ramek do odebrania\n");
    }
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  if (htim == &htim1) {
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a05      	ldr	r2, [pc, #20]	@ (8001d3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d103      	bne.n	8001d34 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 8001d2c:	2108      	movs	r1, #8
 8001d2e:	4804      	ldr	r0, [pc, #16]	@ (8001d40 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001d30:	f001 ff76 	bl	8003c20 <HAL_GPIO_TogglePin>
  }
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	200002b0 	.word	0x200002b0
 8001d40:	42020400 	.word	0x42020400

08001d44 <HAL_UART_RxCpltCallback>:
//    printf("Car: %s\n", packet.car);
//    printf("Speed: %.2f m/s\n", packet.speed);
//    printf("RPM: %.2f\n", packet.rpm);
//    printf("Throttle: %.2f\n", packet.throttle);
//}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a34      	ldr	r2, [pc, #208]	@ (8001e24 <HAL_UART_RxCpltCallback+0xe0>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d161      	bne.n	8001e1a <HAL_UART_RxCpltCallback+0xd6>
    	 HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 8001d56:	2108      	movs	r1, #8
 8001d58:	4833      	ldr	r0, [pc, #204]	@ (8001e28 <HAL_UART_RxCpltCallback+0xe4>)
 8001d5a:	f001 ff61 	bl	8003c20 <HAL_GPIO_TogglePin>
        if (rxIndex < BUFFER_SIZE - 1) {
 8001d5e:	4b33      	ldr	r3, [pc, #204]	@ (8001e2c <HAL_UART_RxCpltCallback+0xe8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2bfe      	cmp	r3, #254	@ 0xfe
 8001d64:	dc0b      	bgt.n	8001d7e <HAL_UART_RxCpltCallback+0x3a>
            rxBuffer[rxIndex++] = huart->Instance->RDR;  // Odczytaj dane z rejestru danych UART
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001d6c:	4b2f      	ldr	r3, [pc, #188]	@ (8001e2c <HAL_UART_RxCpltCallback+0xe8>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	492e      	ldr	r1, [pc, #184]	@ (8001e2c <HAL_UART_RxCpltCallback+0xe8>)
 8001d74:	600a      	str	r2, [r1, #0]
 8001d76:	b2c1      	uxtb	r1, r0
 8001d78:	4a2d      	ldr	r2, [pc, #180]	@ (8001e30 <HAL_UART_RxCpltCallback+0xec>)
 8001d7a:	54d1      	strb	r1, [r2, r3]
 8001d7c:	e007      	b.n	8001d8e <HAL_UART_RxCpltCallback+0x4a>
        } else {
            rxBuffer[rxIndex] = '\0';  // Zakończenie stringa
 8001d7e:	4b2b      	ldr	r3, [pc, #172]	@ (8001e2c <HAL_UART_RxCpltCallback+0xe8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a2b      	ldr	r2, [pc, #172]	@ (8001e30 <HAL_UART_RxCpltCallback+0xec>)
 8001d84:	2100      	movs	r1, #0
 8001d86:	54d1      	strb	r1, [r2, r3]
            rxIndex = 0;  // Reset bufora po przetworzeniu
 8001d88:	4b28      	ldr	r3, [pc, #160]	@ (8001e2c <HAL_UART_RxCpltCallback+0xe8>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
        }

        char* start = strstr((char*)rxBuffer, "+IPD,");  // Sprawdź, czy w buforze znajduje się ciąg +IPD,
 8001d8e:	4929      	ldr	r1, [pc, #164]	@ (8001e34 <HAL_UART_RxCpltCallback+0xf0>)
 8001d90:	4827      	ldr	r0, [pc, #156]	@ (8001e30 <HAL_UART_RxCpltCallback+0xec>)
 8001d92:	f00b f9cc 	bl	800d12e <strstr>
 8001d96:	60f8      	str	r0, [r7, #12]

        if (start) {
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d027      	beq.n	8001dee <HAL_UART_RxCpltCallback+0xaa>
            packetLength = atoi(start + 5);  // Pobranie długości pakietu (za IPD)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	3305      	adds	r3, #5
 8001da2:	4618      	mov	r0, r3
 8001da4:	f00a f8a0 	bl	800bee8 <atoi>
 8001da8:	4603      	mov	r3, r0
 8001daa:	4a23      	ldr	r2, [pc, #140]	@ (8001e38 <HAL_UART_RxCpltCallback+0xf4>)
 8001dac:	6013      	str	r3, [r2, #0]
            char* dataStart = strchr(start, ':');  // Szuka pierwszego : po +IPD,
 8001dae:	213a      	movs	r1, #58	@ 0x3a
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f00b f9af 	bl	800d114 <strchr>
 8001db6:	60b8      	str	r0, [r7, #8]

            if (dataStart && packetLength > 0) {
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d017      	beq.n	8001dee <HAL_UART_RxCpltCallback+0xaa>
 8001dbe:	4b1e      	ldr	r3, [pc, #120]	@ (8001e38 <HAL_UART_RxCpltCallback+0xf4>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	dd13      	ble.n	8001dee <HAL_UART_RxCpltCallback+0xaa>
                dataStart++;
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	60bb      	str	r3, [r7, #8]
                if (packetLength <= MAX_PACKET_SIZE) {
 8001dcc:	4b1a      	ldr	r3, [pc, #104]	@ (8001e38 <HAL_UART_RxCpltCallback+0xf4>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b80      	cmp	r3, #128	@ 0x80
 8001dd2:	dc09      	bgt.n	8001de8 <HAL_UART_RxCpltCallback+0xa4>
                    memcpy(packetBuffer, dataStart, packetLength);  // Kopiuj dane do packetBuffer
 8001dd4:	4b18      	ldr	r3, [pc, #96]	@ (8001e38 <HAL_UART_RxCpltCallback+0xf4>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	68b9      	ldr	r1, [r7, #8]
 8001ddc:	4817      	ldr	r0, [pc, #92]	@ (8001e3c <HAL_UART_RxCpltCallback+0xf8>)
 8001dde:	f00b fa42 	bl	800d266 <memcpy>
                    packetReady = true;  // Ustaw flagę, że pakiet jest gotowy do przetworzenia
 8001de2:	4b17      	ldr	r3, [pc, #92]	@ (8001e40 <HAL_UART_RxCpltCallback+0xfc>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	701a      	strb	r2, [r3, #0]
                }
                rxIndex = 0;  // Reset bufora po przetworzeniu
 8001de8:	4b10      	ldr	r3, [pc, #64]	@ (8001e2c <HAL_UART_RxCpltCallback+0xe8>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
            }
        }

        if (packetReady) {
 8001dee:	4b14      	ldr	r3, [pc, #80]	@ (8001e40 <HAL_UART_RxCpltCallback+0xfc>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d008      	beq.n	8001e08 <HAL_UART_RxCpltCallback+0xc4>
            parseData((char*)packetBuffer, packetLength);  // Parsuj dane
 8001df6:	4b10      	ldr	r3, [pc, #64]	@ (8001e38 <HAL_UART_RxCpltCallback+0xf4>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	480f      	ldr	r0, [pc, #60]	@ (8001e3c <HAL_UART_RxCpltCallback+0xf8>)
 8001dfe:	f000 f823 	bl	8001e48 <parseData>
            packetReady = false;  // Zresetuj flagę
 8001e02:	4b0f      	ldr	r3, [pc, #60]	@ (8001e40 <HAL_UART_RxCpltCallback+0xfc>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	701a      	strb	r2, [r3, #0]
        }

        HAL_UART_Receive_IT(&huart1, (uint8_t*)&rxBuffer[rxIndex], 1);  // Restart odbioru
 8001e08:	4b08      	ldr	r3, [pc, #32]	@ (8001e2c <HAL_UART_RxCpltCallback+0xe8>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a08      	ldr	r2, [pc, #32]	@ (8001e30 <HAL_UART_RxCpltCallback+0xec>)
 8001e0e:	4413      	add	r3, r2
 8001e10:	2201      	movs	r2, #1
 8001e12:	4619      	mov	r1, r3
 8001e14:	480b      	ldr	r0, [pc, #44]	@ (8001e44 <HAL_UART_RxCpltCallback+0x100>)
 8001e16:	f008 f96f 	bl	800a0f8 <HAL_UART_Receive_IT>
    }
}
 8001e1a:	bf00      	nop
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40013800 	.word	0x40013800
 8001e28:	42020400 	.word	0x42020400
 8001e2c:	20000640 	.word	0x20000640
 8001e30:	200004c0 	.word	0x200004c0
 8001e34:	08010acc 	.word	0x08010acc
 8001e38:	20000644 	.word	0x20000644
 8001e3c:	200005c0 	.word	0x200005c0
 8001e40:	20000648 	.word	0x20000648
 8001e44:	20000348 	.word	0x20000348

08001e48 <parseData>:

void parseData(const char* data, int length) {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
    if (length < sizeof(xxx)) {
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	2b5f      	cmp	r3, #95	@ 0x5f
 8001e56:	d803      	bhi.n	8001e60 <parseData+0x18>
        printf("Błąd: Zbyt mało danych\n");
 8001e58:	4808      	ldr	r0, [pc, #32]	@ (8001e7c <parseData+0x34>)
 8001e5a:	f00b f853 	bl	800cf04 <puts>
        return;
 8001e5e:	e009      	b.n	8001e74 <parseData+0x2c>
    }

    memcpy(&packet, data, sizeof(xxx));  // Kopiuj dane do struktury
 8001e60:	2260      	movs	r2, #96	@ 0x60
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	4806      	ldr	r0, [pc, #24]	@ (8001e80 <parseData+0x38>)
 8001e66:	f00b f9fe 	bl	800d266 <memcpy>
    HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8001e6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e6e:	4805      	ldr	r0, [pc, #20]	@ (8001e84 <parseData+0x3c>)
 8001e70:	f001 fed6 	bl	8003c20 <HAL_GPIO_TogglePin>
//    printf("Car: %s\n", packet.car);
//    printf("Speed: %.2f m/s\n", packet.speed);
//    printf("RPM: %.2f\n", packet.rpm);
//    printf("Throttle: %.2f\n", packet.throttle);
}
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	08010ad4 	.word	0x08010ad4
 8001e80:	2000064c 	.word	0x2000064c
 8001e84:	42020000 	.word	0x42020000

08001e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e92:	4804      	ldr	r0, [pc, #16]	@ (8001ea4 <Error_Handler+0x1c>)
 8001e94:	f001 feac 	bl	8003bf0 <HAL_GPIO_WritePin>
	CheckCANErrors();
 8001e98:	f7ff fe9a 	bl	8001bd0 <CheckCANErrors>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e9c:	b672      	cpsid	i
}
 8001e9e:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ea0:	bf00      	nop
 8001ea2:	e7fd      	b.n	8001ea0 <Error_Handler+0x18>
 8001ea4:	42020000 	.word	0x42020000

08001ea8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* ICACHE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ICACHE_IRQn, 0, 0);
 8001eac:	2200      	movs	r2, #0
 8001eae:	2100      	movs	r1, #0
 8001eb0:	2068      	movs	r0, #104	@ 0x68
 8001eb2:	f000 fde9 	bl	8002a88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ICACHE_IRQn);
 8001eb6:	2068      	movs	r0, #104	@ 0x68
 8001eb8:	f000 fe00 	bl	8002abc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ebc:	bf00      	nop
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b0be      	sub	sp, #248	@ 0xf8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ed8:	f107 0310 	add.w	r3, r7, #16
 8001edc:	22d0      	movs	r2, #208	@ 0xd0
 8001ede:	2100      	movs	r1, #0
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f00b f90f 	bl	800d104 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a2f      	ldr	r2, [pc, #188]	@ (8001fa8 <HAL_FDCAN_MspInit+0xe8>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d157      	bne.n	8001fa0 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	f04f 0304 	mov.w	r3, #4
 8001ef8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL1Q;
 8001efc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f04:	f107 0310 	add.w	r3, r7, #16
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f002 ffc1 	bl	8004e90 <HAL_RCCEx_PeriphCLKConfig>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001f14:	f7ff ffb8 	bl	8001e88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001f18:	4b24      	ldr	r3, [pc, #144]	@ (8001fac <HAL_FDCAN_MspInit+0xec>)
 8001f1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001f1e:	4a23      	ldr	r2, [pc, #140]	@ (8001fac <HAL_FDCAN_MspInit+0xec>)
 8001f20:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f24:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8001f28:	4b20      	ldr	r3, [pc, #128]	@ (8001fac <HAL_FDCAN_MspInit+0xec>)
 8001f2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001f2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f36:	4b1d      	ldr	r3, [pc, #116]	@ (8001fac <HAL_FDCAN_MspInit+0xec>)
 8001f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f3c:	4a1b      	ldr	r2, [pc, #108]	@ (8001fac <HAL_FDCAN_MspInit+0xec>)
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f46:	4b19      	ldr	r3, [pc, #100]	@ (8001fac <HAL_FDCAN_MspInit+0xec>)
 8001f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f54:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001f58:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001f6e:	2309      	movs	r3, #9
 8001f70:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f74:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001f78:	4619      	mov	r1, r3
 8001f7a:	480d      	ldr	r0, [pc, #52]	@ (8001fb0 <HAL_FDCAN_MspInit+0xf0>)
 8001f7c:	f001 fce6 	bl	800394c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001f80:	2200      	movs	r2, #0
 8001f82:	2100      	movs	r1, #0
 8001f84:	2027      	movs	r0, #39	@ 0x27
 8001f86:	f000 fd7f 	bl	8002a88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001f8a:	2027      	movs	r0, #39	@ 0x27
 8001f8c:	f000 fd96 	bl	8002abc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8001f90:	2200      	movs	r2, #0
 8001f92:	2100      	movs	r1, #0
 8001f94:	2028      	movs	r0, #40	@ 0x28
 8001f96:	f000 fd77 	bl	8002a88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8001f9a:	2028      	movs	r0, #40	@ 0x28
 8001f9c:	f000 fd8e 	bl	8002abc <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8001fa0:	bf00      	nop
 8001fa2:	37f8      	adds	r7, #248	@ 0xf8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	4000a400 	.word	0x4000a400
 8001fac:	44020c00 	.word	0x44020c00
 8001fb0:	42020000 	.word	0x42020000

08001fb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b0be      	sub	sp, #248	@ 0xf8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fcc:	f107 0310 	add.w	r3, r7, #16
 8001fd0:	22d0      	movs	r2, #208	@ 0xd0
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f00b f895 	bl	800d104 <memset>
  if(hi2c->Instance==I2C1)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a26      	ldr	r2, [pc, #152]	@ (8002078 <HAL_I2C_MspInit+0xc4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d145      	bne.n	8002070 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001fe4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fe8:	f04f 0300 	mov.w	r3, #0
 8001fec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ff6:	f107 0310 	add.w	r3, r7, #16
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f002 ff48 	bl	8004e90 <HAL_RCCEx_PeriphCLKConfig>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002006:	f7ff ff3f 	bl	8001e88 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200a:	4b1c      	ldr	r3, [pc, #112]	@ (800207c <HAL_I2C_MspInit+0xc8>)
 800200c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002010:	4a1a      	ldr	r2, [pc, #104]	@ (800207c <HAL_I2C_MspInit+0xc8>)
 8002012:	f043 0302 	orr.w	r3, r3, #2
 8002016:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800201a:	4b18      	ldr	r3, [pc, #96]	@ (800207c <HAL_I2C_MspInit+0xc8>)
 800201c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002028:	23c0      	movs	r3, #192	@ 0xc0
 800202a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800202e:	2312      	movs	r3, #18
 8002030:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203a:	2300      	movs	r3, #0
 800203c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002040:	2304      	movs	r3, #4
 8002042:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002046:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800204a:	4619      	mov	r1, r3
 800204c:	480c      	ldr	r0, [pc, #48]	@ (8002080 <HAL_I2C_MspInit+0xcc>)
 800204e:	f001 fc7d 	bl	800394c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002052:	4b0a      	ldr	r3, [pc, #40]	@ (800207c <HAL_I2C_MspInit+0xc8>)
 8002054:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002058:	4a08      	ldr	r2, [pc, #32]	@ (800207c <HAL_I2C_MspInit+0xc8>)
 800205a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800205e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002062:	4b06      	ldr	r3, [pc, #24]	@ (800207c <HAL_I2C_MspInit+0xc8>)
 8002064:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002068:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800206c:	60bb      	str	r3, [r7, #8]
 800206e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002070:	bf00      	nop
 8002072:	37f8      	adds	r7, #248	@ 0xf8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40005400 	.word	0x40005400
 800207c:	44020c00 	.word	0x44020c00
 8002080:	42020400 	.word	0x42020400

08002084 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a1a      	ldr	r2, [pc, #104]	@ (80020fc <HAL_TIM_Base_MspInit+0x78>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d12e      	bne.n	80020f4 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002096:	4b1a      	ldr	r3, [pc, #104]	@ (8002100 <HAL_TIM_Base_MspInit+0x7c>)
 8002098:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800209c:	4a18      	ldr	r2, [pc, #96]	@ (8002100 <HAL_TIM_Base_MspInit+0x7c>)
 800209e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80020a2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80020a6:	4b16      	ldr	r3, [pc, #88]	@ (8002100 <HAL_TIM_Base_MspInit+0x7c>)
 80020a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80020ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80020b4:	2200      	movs	r2, #0
 80020b6:	2100      	movs	r1, #0
 80020b8:	2029      	movs	r0, #41	@ 0x29
 80020ba:	f000 fce5 	bl	8002a88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80020be:	2029      	movs	r0, #41	@ 0x29
 80020c0:	f000 fcfc 	bl	8002abc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80020c4:	2200      	movs	r2, #0
 80020c6:	2100      	movs	r1, #0
 80020c8:	202a      	movs	r0, #42	@ 0x2a
 80020ca:	f000 fcdd 	bl	8002a88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80020ce:	202a      	movs	r0, #42	@ 0x2a
 80020d0:	f000 fcf4 	bl	8002abc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80020d4:	2200      	movs	r2, #0
 80020d6:	2100      	movs	r1, #0
 80020d8:	202b      	movs	r0, #43	@ 0x2b
 80020da:	f000 fcd5 	bl	8002a88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80020de:	202b      	movs	r0, #43	@ 0x2b
 80020e0:	f000 fcec 	bl	8002abc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80020e4:	2200      	movs	r2, #0
 80020e6:	2100      	movs	r1, #0
 80020e8:	202c      	movs	r0, #44	@ 0x2c
 80020ea:	f000 fccd 	bl	8002a88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80020ee:	202c      	movs	r0, #44	@ 0x2c
 80020f0:	f000 fce4 	bl	8002abc <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80020f4:	bf00      	nop
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40012c00 	.word	0x40012c00
 8002100:	44020c00 	.word	0x44020c00

08002104 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002114:	d10e      	bne.n	8002134 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002116:	4b0a      	ldr	r3, [pc, #40]	@ (8002140 <HAL_TIM_PWM_MspInit+0x3c>)
 8002118:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800211c:	4a08      	ldr	r2, [pc, #32]	@ (8002140 <HAL_TIM_PWM_MspInit+0x3c>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002126:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <HAL_TIM_PWM_MspInit+0x3c>)
 8002128:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002134:	bf00      	nop
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	44020c00 	.word	0x44020c00

08002144 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08a      	sub	sp, #40	@ 0x28
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214c:	f107 0314 	add.w	r3, r7, #20
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a25      	ldr	r2, [pc, #148]	@ (80021f8 <HAL_TIM_MspPostInit+0xb4>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d120      	bne.n	80021a8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002166:	4b25      	ldr	r3, [pc, #148]	@ (80021fc <HAL_TIM_MspPostInit+0xb8>)
 8002168:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800216c:	4a23      	ldr	r2, [pc, #140]	@ (80021fc <HAL_TIM_MspPostInit+0xb8>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002176:	4b21      	ldr	r3, [pc, #132]	@ (80021fc <HAL_TIM_MspPostInit+0xb8>)
 8002178:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002184:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218a:	2302      	movs	r3, #2
 800218c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002192:	2300      	movs	r3, #0
 8002194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002196:	2301      	movs	r3, #1
 8002198:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219a:	f107 0314 	add.w	r3, r7, #20
 800219e:	4619      	mov	r1, r3
 80021a0:	4817      	ldr	r0, [pc, #92]	@ (8002200 <HAL_TIM_MspPostInit+0xbc>)
 80021a2:	f001 fbd3 	bl	800394c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80021a6:	e023      	b.n	80021f0 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021b0:	d11e      	bne.n	80021f0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b2:	4b12      	ldr	r3, [pc, #72]	@ (80021fc <HAL_TIM_MspPostInit+0xb8>)
 80021b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021b8:	4a10      	ldr	r2, [pc, #64]	@ (80021fc <HAL_TIM_MspPostInit+0xb8>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80021c2:	4b0e      	ldr	r3, [pc, #56]	@ (80021fc <HAL_TIM_MspPostInit+0xb8>)
 80021c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021d0:	2301      	movs	r3, #1
 80021d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	2300      	movs	r3, #0
 80021de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021e0:	2301      	movs	r3, #1
 80021e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	4619      	mov	r1, r3
 80021ea:	4805      	ldr	r0, [pc, #20]	@ (8002200 <HAL_TIM_MspPostInit+0xbc>)
 80021ec:	f001 fbae 	bl	800394c <HAL_GPIO_Init>
}
 80021f0:	bf00      	nop
 80021f2:	3728      	adds	r7, #40	@ 0x28
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40012c00 	.word	0x40012c00
 80021fc:	44020c00 	.word	0x44020c00
 8002200:	42020000 	.word	0x42020000

08002204 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b0c0      	sub	sp, #256	@ 0x100
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800221c:	f107 0318 	add.w	r3, r7, #24
 8002220:	22d0      	movs	r2, #208	@ 0xd0
 8002222:	2100      	movs	r1, #0
 8002224:	4618      	mov	r0, r3
 8002226:	f00a ff6d 	bl	800d104 <memset>
  if(huart->Instance==USART1)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a50      	ldr	r2, [pc, #320]	@ (8002370 <HAL_UART_MspInit+0x16c>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d14e      	bne.n	80022d2 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002234:	f04f 0201 	mov.w	r2, #1
 8002238:	f04f 0300 	mov.w	r3, #0
 800223c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002240:	2300      	movs	r3, #0
 8002242:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002244:	f107 0318 	add.w	r3, r7, #24
 8002248:	4618      	mov	r0, r3
 800224a:	f002 fe21 	bl	8004e90 <HAL_RCCEx_PeriphCLKConfig>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8002254:	f7ff fe18 	bl	8001e88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002258:	4b46      	ldr	r3, [pc, #280]	@ (8002374 <HAL_UART_MspInit+0x170>)
 800225a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800225e:	4a45      	ldr	r2, [pc, #276]	@ (8002374 <HAL_UART_MspInit+0x170>)
 8002260:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002264:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002268:	4b42      	ldr	r3, [pc, #264]	@ (8002374 <HAL_UART_MspInit+0x170>)
 800226a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800226e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002276:	4b3f      	ldr	r3, [pc, #252]	@ (8002374 <HAL_UART_MspInit+0x170>)
 8002278:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800227c:	4a3d      	ldr	r2, [pc, #244]	@ (8002374 <HAL_UART_MspInit+0x170>)
 800227e:	f043 0302 	orr.w	r3, r3, #2
 8002282:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002286:	4b3b      	ldr	r3, [pc, #236]	@ (8002374 <HAL_UART_MspInit+0x170>)
 8002288:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	613b      	str	r3, [r7, #16]
 8002292:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002294:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002298:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229c:	2302      	movs	r3, #2
 800229e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a8:	2300      	movs	r3, #0
 80022aa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80022ae:	2304      	movs	r3, #4
 80022b0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80022b8:	4619      	mov	r1, r3
 80022ba:	482f      	ldr	r0, [pc, #188]	@ (8002378 <HAL_UART_MspInit+0x174>)
 80022bc:	f001 fb46 	bl	800394c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022c0:	2200      	movs	r2, #0
 80022c2:	2100      	movs	r1, #0
 80022c4:	203a      	movs	r0, #58	@ 0x3a
 80022c6:	f000 fbdf 	bl	8002a88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022ca:	203a      	movs	r0, #58	@ 0x3a
 80022cc:	f000 fbf6 	bl	8002abc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80022d0:	e049      	b.n	8002366 <HAL_UART_MspInit+0x162>
  else if(huart->Instance==USART2)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a29      	ldr	r2, [pc, #164]	@ (800237c <HAL_UART_MspInit+0x178>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d144      	bne.n	8002366 <HAL_UART_MspInit+0x162>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80022dc:	f04f 0202 	mov.w	r2, #2
 80022e0:	f04f 0300 	mov.w	r3, #0
 80022e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80022e8:	2300      	movs	r3, #0
 80022ea:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022ec:	f107 0318 	add.w	r3, r7, #24
 80022f0:	4618      	mov	r0, r3
 80022f2:	f002 fdcd 	bl	8004e90 <HAL_RCCEx_PeriphCLKConfig>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <HAL_UART_MspInit+0xfc>
      Error_Handler();
 80022fc:	f7ff fdc4 	bl	8001e88 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002300:	4b1c      	ldr	r3, [pc, #112]	@ (8002374 <HAL_UART_MspInit+0x170>)
 8002302:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002306:	4a1b      	ldr	r2, [pc, #108]	@ (8002374 <HAL_UART_MspInit+0x170>)
 8002308:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800230c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002310:	4b18      	ldr	r3, [pc, #96]	@ (8002374 <HAL_UART_MspInit+0x170>)
 8002312:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231e:	4b15      	ldr	r3, [pc, #84]	@ (8002374 <HAL_UART_MspInit+0x170>)
 8002320:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002324:	4a13      	ldr	r2, [pc, #76]	@ (8002374 <HAL_UART_MspInit+0x170>)
 8002326:	f043 0301 	orr.w	r3, r3, #1
 800232a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800232e:	4b11      	ldr	r3, [pc, #68]	@ (8002374 <HAL_UART_MspInit+0x170>)
 8002330:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800233c:	230c      	movs	r3, #12
 800233e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002342:	2302      	movs	r3, #2
 8002344:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234e:	2300      	movs	r3, #0
 8002350:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002354:	2307      	movs	r3, #7
 8002356:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800235a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800235e:	4619      	mov	r1, r3
 8002360:	4807      	ldr	r0, [pc, #28]	@ (8002380 <HAL_UART_MspInit+0x17c>)
 8002362:	f001 faf3 	bl	800394c <HAL_GPIO_Init>
}
 8002366:	bf00      	nop
 8002368:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40013800 	.word	0x40013800
 8002374:	44020c00 	.word	0x44020c00
 8002378:	42020400 	.word	0x42020400
 800237c:	40004400 	.word	0x40004400
 8002380:	42020000 	.word	0x42020000

08002384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002388:	bf00      	nop
 800238a:	e7fd      	b.n	8002388 <NMI_Handler+0x4>

0800238c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002390:	bf00      	nop
 8002392:	e7fd      	b.n	8002390 <HardFault_Handler+0x4>

08002394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002398:	bf00      	nop
 800239a:	e7fd      	b.n	8002398 <MemManage_Handler+0x4>

0800239c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023a0:	bf00      	nop
 80023a2:	e7fd      	b.n	80023a0 <BusFault_Handler+0x4>

080023a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023a8:	bf00      	nop
 80023aa:	e7fd      	b.n	80023a8 <UsageFault_Handler+0x4>

080023ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023da:	f000 fa59 	bl	8002890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80023e8:	4802      	ldr	r0, [pc, #8]	@ (80023f4 <FDCAN1_IT0_IRQHandler+0x10>)
 80023ea:	f001 f8b3 	bl	8003554 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	200001f8 	.word	0x200001f8

080023f8 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80023fc:	4802      	ldr	r0, [pc, #8]	@ (8002408 <FDCAN1_IT1_IRQHandler+0x10>)
 80023fe:	f001 f8a9 	bl	8003554 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	200001f8 	.word	0x200001f8

0800240c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 Break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002410:	4802      	ldr	r0, [pc, #8]	@ (800241c <TIM1_BRK_IRQHandler+0x10>)
 8002412:	f006 fb47 	bl	8008aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200002b0 	.word	0x200002b0

08002420 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002424:	4802      	ldr	r0, [pc, #8]	@ (8002430 <TIM1_UP_IRQHandler+0x10>)
 8002426:	f006 fb3d 	bl	8008aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	200002b0 	.word	0x200002b0

08002434 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 Trigger and Commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002438:	4802      	ldr	r0, [pc, #8]	@ (8002444 <TIM1_TRG_COM_IRQHandler+0x10>)
 800243a:	f006 fb33 	bl	8008aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	200002b0 	.word	0x200002b0

08002448 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 Capture Compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800244c:	4802      	ldr	r0, [pc, #8]	@ (8002458 <TIM1_CC_IRQHandler+0x10>)
 800244e:	f006 fb29 	bl	8008aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	200002b0 	.word	0x200002b0

0800245c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002460:	4802      	ldr	r0, [pc, #8]	@ (800246c <USART1_IRQHandler+0x10>)
 8002462:	f007 feab 	bl	800a1bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000348 	.word	0x20000348

08002470 <ICACHE_IRQHandler>:

/**
  * @brief This function handles Instruction cache global interrupt.
  */
void ICACHE_IRQHandler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ICACHE_IRQn 0 */

  /* USER CODE END ICACHE_IRQn 0 */
  HAL_ICACHE_IRQHandler();
 8002474:	f001 fd50 	bl	8003f18 <HAL_ICACHE_IRQHandler>
  /* USER CODE BEGIN ICACHE_IRQn 1 */

  /* USER CODE END ICACHE_IRQn 1 */
}
 8002478:	bf00      	nop
 800247a:	bd80      	pop	{r7, pc}

0800247c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return 1;
 8002480:	2301      	movs	r3, #1
}
 8002482:	4618      	mov	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <_kill>:

int _kill(int pid, int sig)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002496:	f00a feab 	bl	800d1f0 <__errno>
 800249a:	4603      	mov	r3, r0
 800249c:	2216      	movs	r2, #22
 800249e:	601a      	str	r2, [r3, #0]
  return -1;
 80024a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <_exit>:

void _exit (int status)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024b4:	f04f 31ff 	mov.w	r1, #4294967295
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7ff ffe7 	bl	800248c <_kill>
  while (1) {}    /* Make sure we hang here */
 80024be:	bf00      	nop
 80024c0:	e7fd      	b.n	80024be <_exit+0x12>

080024c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b086      	sub	sp, #24
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	60f8      	str	r0, [r7, #12]
 80024ca:	60b9      	str	r1, [r7, #8]
 80024cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	e00a      	b.n	80024ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024d4:	f3af 8000 	nop.w
 80024d8:	4601      	mov	r1, r0
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	1c5a      	adds	r2, r3, #1
 80024de:	60ba      	str	r2, [r7, #8]
 80024e0:	b2ca      	uxtb	r2, r1
 80024e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	3301      	adds	r3, #1
 80024e8:	617b      	str	r3, [r7, #20]
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	dbf0      	blt.n	80024d4 <_read+0x12>
  }

  return len;
 80024f2:	687b      	ldr	r3, [r7, #4]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]
 800250c:	e009      	b.n	8002522 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	1c5a      	adds	r2, r3, #1
 8002512:	60ba      	str	r2, [r7, #8]
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	3301      	adds	r3, #1
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	429a      	cmp	r2, r3
 8002528:	dbf1      	blt.n	800250e <_write+0x12>
  }
  return len;
 800252a:	687b      	ldr	r3, [r7, #4]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <_close>:

int _close(int file)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800253c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002540:	4618      	mov	r0, r3
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800255c:	605a      	str	r2, [r3, #4]
  return 0;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <_isatty>:

int _isatty(int file)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002574:	2301      	movs	r3, #1
}
 8002576:	4618      	mov	r0, r3
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002582:	b480      	push	{r7}
 8002584:	b085      	sub	sp, #20
 8002586:	af00      	add	r7, sp, #0
 8002588:	60f8      	str	r0, [r7, #12]
 800258a:	60b9      	str	r1, [r7, #8]
 800258c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3714      	adds	r7, #20
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025a4:	4a14      	ldr	r2, [pc, #80]	@ (80025f8 <_sbrk+0x5c>)
 80025a6:	4b15      	ldr	r3, [pc, #84]	@ (80025fc <_sbrk+0x60>)
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025b0:	4b13      	ldr	r3, [pc, #76]	@ (8002600 <_sbrk+0x64>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d102      	bne.n	80025be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025b8:	4b11      	ldr	r3, [pc, #68]	@ (8002600 <_sbrk+0x64>)
 80025ba:	4a12      	ldr	r2, [pc, #72]	@ (8002604 <_sbrk+0x68>)
 80025bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025be:	4b10      	ldr	r3, [pc, #64]	@ (8002600 <_sbrk+0x64>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d207      	bcs.n	80025dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025cc:	f00a fe10 	bl	800d1f0 <__errno>
 80025d0:	4603      	mov	r3, r0
 80025d2:	220c      	movs	r2, #12
 80025d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025d6:	f04f 33ff 	mov.w	r3, #4294967295
 80025da:	e009      	b.n	80025f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025dc:	4b08      	ldr	r3, [pc, #32]	@ (8002600 <_sbrk+0x64>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025e2:	4b07      	ldr	r3, [pc, #28]	@ (8002600 <_sbrk+0x64>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	4a05      	ldr	r2, [pc, #20]	@ (8002600 <_sbrk+0x64>)
 80025ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ee:	68fb      	ldr	r3, [r7, #12]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20044000 	.word	0x20044000
 80025fc:	00000400 	.word	0x00000400
 8002600:	200006ac 	.word	0x200006ac
 8002604:	20000800 	.word	0x20000800

08002608 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800260e:	4b35      	ldr	r3, [pc, #212]	@ (80026e4 <SystemInit+0xdc>)
 8002610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002614:	4a33      	ldr	r2, [pc, #204]	@ (80026e4 <SystemInit+0xdc>)
 8002616:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800261a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800261e:	4b32      	ldr	r3, [pc, #200]	@ (80026e8 <SystemInit+0xe0>)
 8002620:	2201      	movs	r2, #1
 8002622:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002624:	4b30      	ldr	r3, [pc, #192]	@ (80026e8 <SystemInit+0xe0>)
 8002626:	2200      	movs	r2, #0
 8002628:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800262a:	4b2f      	ldr	r3, [pc, #188]	@ (80026e8 <SystemInit+0xe0>)
 800262c:	2200      	movs	r2, #0
 800262e:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8002630:	4b2d      	ldr	r3, [pc, #180]	@ (80026e8 <SystemInit+0xe0>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	492c      	ldr	r1, [pc, #176]	@ (80026e8 <SystemInit+0xe0>)
 8002636:	4b2d      	ldr	r3, [pc, #180]	@ (80026ec <SystemInit+0xe4>)
 8002638:	4013      	ands	r3, r2
 800263a:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 800263c:	4b2a      	ldr	r3, [pc, #168]	@ (80026e8 <SystemInit+0xe0>)
 800263e:	2200      	movs	r2, #0
 8002640:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8002642:	4b29      	ldr	r3, [pc, #164]	@ (80026e8 <SystemInit+0xe0>)
 8002644:	2200      	movs	r2, #0
 8002646:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8002648:	4b27      	ldr	r3, [pc, #156]	@ (80026e8 <SystemInit+0xe0>)
 800264a:	2200      	movs	r2, #0
 800264c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800264e:	4b26      	ldr	r3, [pc, #152]	@ (80026e8 <SystemInit+0xe0>)
 8002650:	4a27      	ldr	r2, [pc, #156]	@ (80026f0 <SystemInit+0xe8>)
 8002652:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8002654:	4b24      	ldr	r3, [pc, #144]	@ (80026e8 <SystemInit+0xe0>)
 8002656:	2200      	movs	r2, #0
 8002658:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800265a:	4b23      	ldr	r3, [pc, #140]	@ (80026e8 <SystemInit+0xe0>)
 800265c:	4a24      	ldr	r2, [pc, #144]	@ (80026f0 <SystemInit+0xe8>)
 800265e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8002660:	4b21      	ldr	r3, [pc, #132]	@ (80026e8 <SystemInit+0xe0>)
 8002662:	2200      	movs	r2, #0
 8002664:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8002666:	4b20      	ldr	r3, [pc, #128]	@ (80026e8 <SystemInit+0xe0>)
 8002668:	4a21      	ldr	r2, [pc, #132]	@ (80026f0 <SystemInit+0xe8>)
 800266a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 800266c:	4b1e      	ldr	r3, [pc, #120]	@ (80026e8 <SystemInit+0xe0>)
 800266e:	2200      	movs	r2, #0
 8002670:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002672:	4b1d      	ldr	r3, [pc, #116]	@ (80026e8 <SystemInit+0xe0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a1c      	ldr	r2, [pc, #112]	@ (80026e8 <SystemInit+0xe0>)
 8002678:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800267c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800267e:	4b1a      	ldr	r3, [pc, #104]	@ (80026e8 <SystemInit+0xe0>)
 8002680:	2200      	movs	r2, #0
 8002682:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002684:	4b17      	ldr	r3, [pc, #92]	@ (80026e4 <SystemInit+0xdc>)
 8002686:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800268a:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800268c:	4b19      	ldr	r3, [pc, #100]	@ (80026f4 <SystemInit+0xec>)
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8002694:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800269c:	d003      	beq.n	80026a6 <SystemInit+0x9e>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80026a4:	d117      	bne.n	80026d6 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80026a6:	4b13      	ldr	r3, [pc, #76]	@ (80026f4 <SystemInit+0xec>)
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d005      	beq.n	80026be <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80026b2:	4b10      	ldr	r3, [pc, #64]	@ (80026f4 <SystemInit+0xec>)
 80026b4:	4a10      	ldr	r2, [pc, #64]	@ (80026f8 <SystemInit+0xf0>)
 80026b6:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80026b8:	4b0e      	ldr	r3, [pc, #56]	@ (80026f4 <SystemInit+0xec>)
 80026ba:	4a10      	ldr	r2, [pc, #64]	@ (80026fc <SystemInit+0xf4>)
 80026bc:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80026be:	4b0d      	ldr	r3, [pc, #52]	@ (80026f4 <SystemInit+0xec>)
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	4a0c      	ldr	r2, [pc, #48]	@ (80026f4 <SystemInit+0xec>)
 80026c4:	f043 0302 	orr.w	r3, r3, #2
 80026c8:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80026ca:	4b0a      	ldr	r3, [pc, #40]	@ (80026f4 <SystemInit+0xec>)
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	4a09      	ldr	r2, [pc, #36]	@ (80026f4 <SystemInit+0xec>)
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	61d3      	str	r3, [r2, #28]
  }
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	e000ed00 	.word	0xe000ed00
 80026e8:	44020c00 	.word	0x44020c00
 80026ec:	eae2eae3 	.word	0xeae2eae3
 80026f0:	01010280 	.word	0x01010280
 80026f4:	40022000 	.word	0x40022000
 80026f8:	08192a3b 	.word	0x08192a3b
 80026fc:	4c5d6e7f 	.word	0x4c5d6e7f

08002700 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002700:	480d      	ldr	r0, [pc, #52]	@ (8002738 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002702:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002704:	f7ff ff80 	bl	8002608 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
	  ldr r0, =_sdata
 8002708:	480c      	ldr	r0, [pc, #48]	@ (800273c <LoopForever+0x6>)
  ldr r1, =_edata
 800270a:	490d      	ldr	r1, [pc, #52]	@ (8002740 <LoopForever+0xa>)
  ldr r2, =_sidata
 800270c:	4a0d      	ldr	r2, [pc, #52]	@ (8002744 <LoopForever+0xe>)
  movs r3, #0
 800270e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002710:	e002      	b.n	8002718 <LoopCopyDataInit>

08002712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002712:	58d4      	ldr	r4, [r2, r3]
	  str r4, [r0, r3]
 8002714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002716:	3304      	adds	r3, #4

08002718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800271a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800271c:	d3f9      	bcc.n	8002712 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800271e:	4a0a      	ldr	r2, [pc, #40]	@ (8002748 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002720:	4c0a      	ldr	r4, [pc, #40]	@ (800274c <LoopForever+0x16>)
  movs r3, #0
 8002722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002724:	e001      	b.n	800272a <LoopFillZerobss>

08002726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002728:	3204      	adds	r2, #4

0800272a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800272a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800272c:	d3fb      	bcc.n	8002726 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800272e:	f00a fd65 	bl	800d1fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002732:	f7fe fcfd 	bl	8001130 <main>

08002736 <LoopForever>:

LoopForever:
    b LoopForever
 8002736:	e7fe      	b.n	8002736 <LoopForever>
  ldr   r0, =_estack
 8002738:	20044000 	.word	0x20044000
	  ldr r0, =_sdata
 800273c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002740:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002744:	08010f80 	.word	0x08010f80
  ldr r2, =_sbss
 8002748:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800274c:	20000800 	.word	0x20000800

08002750 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002750:	e7fe      	b.n	8002750 <ADC1_IRQHandler>
	...

08002754 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002758:	2003      	movs	r0, #3
 800275a:	f000 f98a 	bl	8002a72 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800275e:	f002 fa0d 	bl	8004b7c <HAL_RCC_GetSysClockFreq>
 8002762:	4602      	mov	r2, r0
 8002764:	4b0c      	ldr	r3, [pc, #48]	@ (8002798 <HAL_Init+0x44>)
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	f003 030f 	and.w	r3, r3, #15
 800276c:	490b      	ldr	r1, [pc, #44]	@ (800279c <HAL_Init+0x48>)
 800276e:	5ccb      	ldrb	r3, [r1, r3]
 8002770:	fa22 f303 	lsr.w	r3, r2, r3
 8002774:	4a0a      	ldr	r2, [pc, #40]	@ (80027a0 <HAL_Init+0x4c>)
 8002776:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002778:	2004      	movs	r0, #4
 800277a:	f000 f9cf 	bl	8002b1c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800277e:	200f      	movs	r0, #15
 8002780:	f000 f810 	bl	80027a4 <HAL_InitTick>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e002      	b.n	8002794 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800278e:	f7ff fb8b 	bl	8001ea8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	bd80      	pop	{r7, pc}
 8002798:	44020c00 	.word	0x44020c00
 800279c:	08010af0 	.word	0x08010af0
 80027a0:	20000008 	.word	0x20000008

080027a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80027b0:	4b33      	ldr	r3, [pc, #204]	@ (8002880 <HAL_InitTick+0xdc>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e05c      	b.n	8002876 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80027bc:	4b31      	ldr	r3, [pc, #196]	@ (8002884 <HAL_InitTick+0xe0>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d10c      	bne.n	80027e2 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80027c8:	4b2f      	ldr	r3, [pc, #188]	@ (8002888 <HAL_InitTick+0xe4>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	4b2c      	ldr	r3, [pc, #176]	@ (8002880 <HAL_InitTick+0xdc>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	4619      	mov	r1, r3
 80027d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027da:	fbb2 f3f3 	udiv	r3, r2, r3
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	e037      	b.n	8002852 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80027e2:	f000 f9f3 	bl	8002bcc <HAL_SYSTICK_GetCLKSourceConfig>
 80027e6:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d023      	beq.n	8002836 <HAL_InitTick+0x92>
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d82d      	bhi.n	8002850 <HAL_InitTick+0xac>
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_InitTick+0x5e>
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d00d      	beq.n	800281c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002800:	e026      	b.n	8002850 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002802:	4b21      	ldr	r3, [pc, #132]	@ (8002888 <HAL_InitTick+0xe4>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	4b1e      	ldr	r3, [pc, #120]	@ (8002880 <HAL_InitTick+0xdc>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	4619      	mov	r1, r3
 800280c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002810:	fbb3 f3f1 	udiv	r3, r3, r1
 8002814:	fbb2 f3f3 	udiv	r3, r2, r3
 8002818:	60fb      	str	r3, [r7, #12]
        break;
 800281a:	e01a      	b.n	8002852 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800281c:	4b18      	ldr	r3, [pc, #96]	@ (8002880 <HAL_InitTick+0xdc>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	461a      	mov	r2, r3
 8002822:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002826:	fbb3 f3f2 	udiv	r3, r3, r2
 800282a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800282e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002832:	60fb      	str	r3, [r7, #12]
        break;
 8002834:	e00d      	b.n	8002852 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002836:	4b12      	ldr	r3, [pc, #72]	@ (8002880 <HAL_InitTick+0xdc>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	461a      	mov	r2, r3
 800283c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002840:	fbb3 f3f2 	udiv	r3, r3, r2
 8002844:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002848:	fbb2 f3f3 	udiv	r3, r2, r3
 800284c:	60fb      	str	r3, [r7, #12]
        break;
 800284e:	e000      	b.n	8002852 <HAL_InitTick+0xae>
        break;
 8002850:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 f940 	bl	8002ad8 <HAL_SYSTICK_Config>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e009      	b.n	8002876 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002862:	2200      	movs	r2, #0
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	f04f 30ff 	mov.w	r0, #4294967295
 800286a:	f000 f90d 	bl	8002a88 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800286e:	4a07      	ldr	r2, [pc, #28]	@ (800288c <HAL_InitTick+0xe8>)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000010 	.word	0x20000010
 8002884:	e000e010 	.word	0xe000e010
 8002888:	20000008 	.word	0x20000008
 800288c:	2000000c 	.word	0x2000000c

08002890 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002894:	4b06      	ldr	r3, [pc, #24]	@ (80028b0 <HAL_IncTick+0x20>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	4b06      	ldr	r3, [pc, #24]	@ (80028b4 <HAL_IncTick+0x24>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4413      	add	r3, r2
 80028a0:	4a04      	ldr	r2, [pc, #16]	@ (80028b4 <HAL_IncTick+0x24>)
 80028a2:	6013      	str	r3, [r2, #0]
}
 80028a4:	bf00      	nop
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	20000010 	.word	0x20000010
 80028b4:	200006b0 	.word	0x200006b0

080028b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return uwTick;
 80028bc:	4b03      	ldr	r3, [pc, #12]	@ (80028cc <HAL_GetTick+0x14>)
 80028be:	681b      	ldr	r3, [r3, #0]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	200006b0 	.word	0x200006b0

080028d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028d8:	f7ff ffee 	bl	80028b8 <HAL_GetTick>
 80028dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e8:	d005      	beq.n	80028f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002914 <HAL_Delay+0x44>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4413      	add	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028f6:	bf00      	nop
 80028f8:	f7ff ffde 	bl	80028b8 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	429a      	cmp	r2, r3
 8002906:	d8f7      	bhi.n	80028f8 <HAL_Delay+0x28>
  {
  }
}
 8002908:	bf00      	nop
 800290a:	bf00      	nop
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20000010 	.word	0x20000010

08002918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002928:	4b0c      	ldr	r3, [pc, #48]	@ (800295c <__NVIC_SetPriorityGrouping+0x44>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002934:	4013      	ands	r3, r2
 8002936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002940:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002944:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002948:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800294a:	4a04      	ldr	r2, [pc, #16]	@ (800295c <__NVIC_SetPriorityGrouping+0x44>)
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	60d3      	str	r3, [r2, #12]
}
 8002950:	bf00      	nop
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002964:	4b04      	ldr	r3, [pc, #16]	@ (8002978 <__NVIC_GetPriorityGrouping+0x18>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	0a1b      	lsrs	r3, r3, #8
 800296a:	f003 0307 	and.w	r3, r3, #7
}
 800296e:	4618      	mov	r0, r3
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	e000ed00 	.word	0xe000ed00

0800297c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002986:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800298a:	2b00      	cmp	r3, #0
 800298c:	db0b      	blt.n	80029a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800298e:	88fb      	ldrh	r3, [r7, #6]
 8002990:	f003 021f 	and.w	r2, r3, #31
 8002994:	4907      	ldr	r1, [pc, #28]	@ (80029b4 <__NVIC_EnableIRQ+0x38>)
 8002996:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	2001      	movs	r0, #1
 800299e:	fa00 f202 	lsl.w	r2, r0, r2
 80029a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	e000e100 	.word	0xe000e100

080029b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	6039      	str	r1, [r7, #0]
 80029c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80029c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	db0a      	blt.n	80029e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	490c      	ldr	r1, [pc, #48]	@ (8002a04 <__NVIC_SetPriority+0x4c>)
 80029d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029d6:	0112      	lsls	r2, r2, #4
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	440b      	add	r3, r1
 80029dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029e0:	e00a      	b.n	80029f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	4908      	ldr	r1, [pc, #32]	@ (8002a08 <__NVIC_SetPriority+0x50>)
 80029e8:	88fb      	ldrh	r3, [r7, #6]
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	3b04      	subs	r3, #4
 80029f0:	0112      	lsls	r2, r2, #4
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	440b      	add	r3, r1
 80029f6:	761a      	strb	r2, [r3, #24]
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	e000e100 	.word	0xe000e100
 8002a08:	e000ed00 	.word	0xe000ed00

08002a0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b089      	sub	sp, #36	@ 0x24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f1c3 0307 	rsb	r3, r3, #7
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	bf28      	it	cs
 8002a2a:	2304      	movcs	r3, #4
 8002a2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	3304      	adds	r3, #4
 8002a32:	2b06      	cmp	r3, #6
 8002a34:	d902      	bls.n	8002a3c <NVIC_EncodePriority+0x30>
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	3b03      	subs	r3, #3
 8002a3a:	e000      	b.n	8002a3e <NVIC_EncodePriority+0x32>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a40:	f04f 32ff 	mov.w	r2, #4294967295
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43da      	mvns	r2, r3
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	401a      	ands	r2, r3
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a54:	f04f 31ff 	mov.w	r1, #4294967295
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5e:	43d9      	mvns	r1, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a64:	4313      	orrs	r3, r2
         );
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3724      	adds	r7, #36	@ 0x24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b082      	sub	sp, #8
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7ff ff4c 	bl	8002918 <__NVIC_SetPriorityGrouping>
}
 8002a80:	bf00      	nop
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
 8002a94:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a96:	f7ff ff63 	bl	8002960 <__NVIC_GetPriorityGrouping>
 8002a9a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	68b9      	ldr	r1, [r7, #8]
 8002aa0:	6978      	ldr	r0, [r7, #20]
 8002aa2:	f7ff ffb3 	bl	8002a0c <NVIC_EncodePriority>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002aac:	4611      	mov	r1, r2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff ff82 	bl	80029b8 <__NVIC_SetPriority>
}
 8002ab4:	bf00      	nop
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ac6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff ff56 	bl	800297c <__NVIC_EnableIRQ>
}
 8002ad0:	bf00      	nop
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ae8:	d301      	bcc.n	8002aee <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002aea:	2301      	movs	r3, #1
 8002aec:	e00d      	b.n	8002b0a <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002aee:	4a0a      	ldr	r2, [pc, #40]	@ (8002b18 <HAL_SYSTICK_Config+0x40>)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002af6:	4b08      	ldr	r3, [pc, #32]	@ (8002b18 <HAL_SYSTICK_Config+0x40>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002afc:	4b06      	ldr	r3, [pc, #24]	@ (8002b18 <HAL_SYSTICK_Config+0x40>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a05      	ldr	r2, [pc, #20]	@ (8002b18 <HAL_SYSTICK_Config+0x40>)
 8002b02:	f043 0303 	orr.w	r3, r3, #3
 8002b06:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	e000e010 	.word	0xe000e010

08002b1c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d844      	bhi.n	8002bb4 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8002b30 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b30:	08002b53 	.word	0x08002b53
 8002b34:	08002b71 	.word	0x08002b71
 8002b38:	08002b93 	.word	0x08002b93
 8002b3c:	08002bb5 	.word	0x08002bb5
 8002b40:	08002b45 	.word	0x08002b45
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002b44:	4b1f      	ldr	r3, [pc, #124]	@ (8002bc4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a1e      	ldr	r2, [pc, #120]	@ (8002bc4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b4a:	f043 0304 	orr.w	r3, r3, #4
 8002b4e:	6013      	str	r3, [r2, #0]
      break;
 8002b50:	e031      	b.n	8002bb6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002b52:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a1b      	ldr	r2, [pc, #108]	@ (8002bc4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b58:	f023 0304 	bic.w	r3, r3, #4
 8002b5c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8002b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8002bc8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002b60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002b64:	4a18      	ldr	r2, [pc, #96]	@ (8002bc8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002b66:	f023 030c 	bic.w	r3, r3, #12
 8002b6a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002b6e:	e022      	b.n	8002bb6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002b70:	4b14      	ldr	r3, [pc, #80]	@ (8002bc4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a13      	ldr	r2, [pc, #76]	@ (8002bc4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b76:	f023 0304 	bic.w	r3, r3, #4
 8002b7a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8002b7c:	4b12      	ldr	r3, [pc, #72]	@ (8002bc8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002b7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002b82:	f023 030c 	bic.w	r3, r3, #12
 8002b86:	4a10      	ldr	r2, [pc, #64]	@ (8002bc8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002b88:	f043 0304 	orr.w	r3, r3, #4
 8002b8c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002b90:	e011      	b.n	8002bb6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002b92:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a0b      	ldr	r2, [pc, #44]	@ (8002bc4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b98:	f023 0304 	bic.w	r3, r3, #4
 8002b9c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8002b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002ba0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002ba4:	f023 030c 	bic.w	r3, r3, #12
 8002ba8:	4a07      	ldr	r2, [pc, #28]	@ (8002bc8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002baa:	f043 0308 	orr.w	r3, r3, #8
 8002bae:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002bb2:	e000      	b.n	8002bb6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002bb4:	bf00      	nop
  }
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	e000e010 	.word	0xe000e010
 8002bc8:	44020c00 	.word	0x44020c00

08002bcc <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002bd2:	4b17      	ldr	r3, [pc, #92]	@ (8002c30 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d002      	beq.n	8002be4 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002bde:	2304      	movs	r3, #4
 8002be0:	607b      	str	r3, [r7, #4]
 8002be2:	e01e      	b.n	8002c22 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8002be4:	4b13      	ldr	r3, [pc, #76]	@ (8002c34 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8002be6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d00f      	beq.n	8002c16 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d80f      	bhi.n	8002c1c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d003      	beq.n	8002c10 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002c08:	e008      	b.n	8002c1c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	607b      	str	r3, [r7, #4]
        break;
 8002c0e:	e008      	b.n	8002c22 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002c10:	2301      	movs	r3, #1
 8002c12:	607b      	str	r3, [r7, #4]
        break;
 8002c14:	e005      	b.n	8002c22 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002c16:	2302      	movs	r3, #2
 8002c18:	607b      	str	r3, [r7, #4]
        break;
 8002c1a:	e002      	b.n	8002c22 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	607b      	str	r3, [r7, #4]
        break;
 8002c20:	bf00      	nop
    }
  }
  return systick_source;
 8002c22:	687b      	ldr	r3, [r7, #4]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	e000e010 	.word	0xe000e010
 8002c34:	44020c00 	.word	0x44020c00

08002c38 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8002c40:	f7ff fe3a 	bl	80028b8 <HAL_GetTick>
 8002c44:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e06b      	b.n	8002d28 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d008      	beq.n	8002c6e <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2220      	movs	r2, #32
 8002c60:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e05c      	b.n	8002d28 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695a      	ldr	r2, [r3, #20]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f042 0204 	orr.w	r2, r2, #4
 8002c7c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2205      	movs	r2, #5
 8002c82:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002c86:	e020      	b.n	8002cca <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002c88:	f7ff fe16 	bl	80028b8 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b05      	cmp	r3, #5
 8002c94:	d919      	bls.n	8002cca <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c9a:	f043 0210 	orr.w	r2, r3, #16
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2203      	movs	r2, #3
 8002ca6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cba:	2201      	movs	r2, #1
 8002cbc:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e02e      	b.n	8002d28 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0d7      	beq.n	8002c88 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695a      	ldr	r2, [r3, #20]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0202 	orr.w	r2, r2, #2
 8002ce6:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2204      	movs	r2, #4
 8002cec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8002cf8:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d007      	beq.n	8002d1e <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d12:	2201      	movs	r2, #1
 8002d14:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e019      	b.n	8002d76 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d004      	beq.n	8002d58 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2220      	movs	r2, #32
 8002d52:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e00e      	b.n	8002d76 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2204      	movs	r2, #4
 8002d5c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6812      	ldr	r2, [r2, #0]
 8002d6a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d6e:	f043 0304 	orr.w	r3, r3, #4
 8002d72:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
	...

08002d84 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e147      	b.n	8003026 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d106      	bne.n	8002db0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7ff f888 	bl	8001ec0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	699a      	ldr	r2, [r3, #24]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 0210 	bic.w	r2, r2, #16
 8002dbe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dc0:	f7ff fd7a 	bl	80028b8 <HAL_GetTick>
 8002dc4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002dc6:	e012      	b.n	8002dee <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002dc8:	f7ff fd76 	bl	80028b8 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b0a      	cmp	r3, #10
 8002dd4:	d90b      	bls.n	8002dee <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dda:	f043 0201 	orr.w	r2, r3, #1
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2203      	movs	r2, #3
 8002de6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e11b      	b.n	8003026 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	f003 0308 	and.w	r3, r3, #8
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d0e5      	beq.n	8002dc8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699a      	ldr	r2, [r3, #24]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e0c:	f7ff fd54 	bl	80028b8 <HAL_GetTick>
 8002e10:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002e12:	e012      	b.n	8002e3a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002e14:	f7ff fd50 	bl	80028b8 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b0a      	cmp	r3, #10
 8002e20:	d90b      	bls.n	8002e3a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e26:	f043 0201 	orr.w	r2, r3, #1
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2203      	movs	r2, #3
 8002e32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e0f5      	b.n	8003026 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0e5      	beq.n	8002e14 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	699a      	ldr	r2, [r3, #24]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0202 	orr.w	r2, r2, #2
 8002e56:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a74      	ldr	r2, [pc, #464]	@ (8003030 <HAL_FDCAN_Init+0x2ac>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d103      	bne.n	8002e6a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002e62:	4a74      	ldr	r2, [pc, #464]	@ (8003034 <HAL_FDCAN_Init+0x2b0>)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	7c1b      	ldrb	r3, [r3, #16]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d108      	bne.n	8002e84 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	699a      	ldr	r2, [r3, #24]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e80:	619a      	str	r2, [r3, #24]
 8002e82:	e007      	b.n	8002e94 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699a      	ldr	r2, [r3, #24]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e92:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	7c5b      	ldrb	r3, [r3, #17]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d108      	bne.n	8002eae <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699a      	ldr	r2, [r3, #24]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002eaa:	619a      	str	r2, [r3, #24]
 8002eac:	e007      	b.n	8002ebe <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	699a      	ldr	r2, [r3, #24]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002ebc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	7c9b      	ldrb	r3, [r3, #18]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d108      	bne.n	8002ed8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	699a      	ldr	r2, [r3, #24]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ed4:	619a      	str	r2, [r3, #24]
 8002ed6:	e007      	b.n	8002ee8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699a      	ldr	r2, [r3, #24]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002ee6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	699a      	ldr	r2, [r3, #24]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002f0c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	691a      	ldr	r2, [r3, #16]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0210 	bic.w	r2, r2, #16
 8002f1c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d108      	bne.n	8002f38 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	699a      	ldr	r2, [r3, #24]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 0204 	orr.w	r2, r2, #4
 8002f34:	619a      	str	r2, [r3, #24]
 8002f36:	e02c      	b.n	8002f92 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d028      	beq.n	8002f92 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d01c      	beq.n	8002f82 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	699a      	ldr	r2, [r3, #24]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f56:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691a      	ldr	r2, [r3, #16]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0210 	orr.w	r2, r2, #16
 8002f66:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d110      	bne.n	8002f92 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699a      	ldr	r2, [r3, #24]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0220 	orr.w	r2, r2, #32
 8002f7e:	619a      	str	r2, [r3, #24]
 8002f80:	e007      	b.n	8002f92 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	699a      	ldr	r2, [r3, #24]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f042 0220 	orr.w	r2, r2, #32
 8002f90:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002fa2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002faa:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002fba:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002fbc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fc6:	d115      	bne.n	8002ff4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fcc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002fd6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002fe0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002ff0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002ff2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 fc3c 	bl	8003888 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	4000a400 	.word	0x4000a400
 8003034:	4000a500 	.word	0x4000a500

08003038 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8003038:	b480      	push	{r7}
 800303a:	b087      	sub	sp, #28
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003048:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800304a:	7dfb      	ldrb	r3, [r7, #23]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d002      	beq.n	8003056 <HAL_FDCAN_ConfigFilter+0x1e>
 8003050:	7dfb      	ldrb	r3, [r7, #23]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d13d      	bne.n	80030d2 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d119      	bne.n	8003092 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800306a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8003072:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003078:	4313      	orrs	r3, r2
 800307a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	e01d      	b.n	80030ce <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	075a      	lsls	r2, r3, #29
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	079a      	lsls	r2, r3, #30
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	4413      	add	r3, r2
 80030ba:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	3304      	adds	r3, #4
 80030c6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80030ce:	2300      	movs	r3, #0
 80030d0:	e006      	b.n	80030e0 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030d6:	f043 0202 	orr.w	r2, r3, #2
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
  }
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	371c      	adds	r7, #28
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d110      	bne.n	8003122 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699a      	ldr	r2, [r3, #24]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 0201 	bic.w	r2, r2, #1
 8003116:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800311e:	2300      	movs	r3, #0
 8003120:	e006      	b.n	8003130 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003126:	f043 0204 	orr.w	r2, r3, #4
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
  }
}
 8003130:	4618      	mov	r0, r3
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800313c:	b480      	push	{r7}
 800313e:	b08b      	sub	sp, #44	@ 0x2c
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
 8003148:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800314a:	2300      	movs	r3, #0
 800314c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003154:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8003156:	7efb      	ldrb	r3, [r7, #27]
 8003158:	2b02      	cmp	r3, #2
 800315a:	f040 80e8 	bne.w	800332e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2b40      	cmp	r3, #64	@ 0x40
 8003162:	d137      	bne.n	80031d4 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800316c:	f003 030f 	and.w	r3, r3, #15
 8003170:	2b00      	cmp	r3, #0
 8003172:	d107      	bne.n	8003184 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003178:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e0db      	b.n	800333c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800318c:	0e1b      	lsrs	r3, r3, #24
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b01      	cmp	r3, #1
 8003194:	d10a      	bne.n	80031ac <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800319e:	0a5b      	lsrs	r3, r3, #9
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d101      	bne.n	80031ac <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80031a8:	2301      	movs	r3, #1
 80031aa:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b4:	0a1b      	lsrs	r3, r3, #8
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	69fa      	ldr	r2, [r7, #28]
 80031bc:	4413      	add	r3, r2
 80031be:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80031c4:	69fa      	ldr	r2, [r7, #28]
 80031c6:	4613      	mov	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	4413      	add	r3, r2
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	440b      	add	r3, r1
 80031d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80031d2:	e036      	b.n	8003242 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031dc:	f003 030f 	and.w	r3, r3, #15
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d107      	bne.n	80031f4 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031e8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0a3      	b.n	800333c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031fc:	0e1b      	lsrs	r3, r3, #24
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b01      	cmp	r3, #1
 8003204:	d10a      	bne.n	800321c <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800320e:	0a1b      	lsrs	r3, r3, #8
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b01      	cmp	r3, #1
 8003216:	d101      	bne.n	800321c <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003218:	2301      	movs	r3, #1
 800321a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003224:	0a1b      	lsrs	r3, r3, #8
 8003226:	f003 0303 	and.w	r3, r3, #3
 800322a:	69fa      	ldr	r2, [r7, #28]
 800322c:	4413      	add	r3, r2
 800322e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003234:	69fa      	ldr	r2, [r7, #28]
 8003236:	4613      	mov	r3, r2
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	4413      	add	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	440b      	add	r3, r1
 8003240:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d107      	bne.n	8003266 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8003256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	0c9b      	lsrs	r3, r3, #18
 800325c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	e005      	b.n	8003272 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800327e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800328a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328c:	3304      	adds	r3, #4
 800328e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	b29a      	uxth	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800329a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	0c1b      	lsrs	r3, r3, #16
 80032a0:	f003 020f 	and.w	r2, r3, #15
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80032a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80032b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80032c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	0e1b      	lsrs	r3, r3, #24
 80032c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80032ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	0fda      	lsrs	r2, r3, #31
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80032d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032da:	3304      	adds	r3, #4
 80032dc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80032de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80032e2:	2300      	movs	r3, #0
 80032e4:	623b      	str	r3, [r7, #32]
 80032e6:	e00a      	b.n	80032fe <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	441a      	add	r2, r3
 80032ee:	6839      	ldr	r1, [r7, #0]
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	440b      	add	r3, r1
 80032f4:	7812      	ldrb	r2, [r2, #0]
 80032f6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80032f8:	6a3b      	ldr	r3, [r7, #32]
 80032fa:	3301      	adds	r3, #1
 80032fc:	623b      	str	r3, [r7, #32]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	4a11      	ldr	r2, [pc, #68]	@ (8003348 <HAL_FDCAN_GetRxMessage+0x20c>)
 8003304:	5cd3      	ldrb	r3, [r2, r3]
 8003306:	461a      	mov	r2, r3
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	4293      	cmp	r3, r2
 800330c:	d3ec      	bcc.n	80032e8 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b40      	cmp	r3, #64	@ 0x40
 8003312:	d105      	bne.n	8003320 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	69fa      	ldr	r2, [r7, #28]
 800331a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800331e:	e004      	b.n	800332a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	69fa      	ldr	r2, [r7, #28]
 8003326:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800332a:	2300      	movs	r3, #0
 800332c:	e006      	b.n	800333c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003332:	f043 0208 	orr.w	r2, r3, #8
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
  }
}
 800333c:	4618      	mov	r0, r3
 800333e:	372c      	adds	r7, #44	@ 0x2c
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	08010b08 	.word	0x08010b08

0800334c <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(const FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b40      	cmp	r3, #64	@ 0x40
 800335a:	d107      	bne.n	800336c <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003364:	f003 030f 	and.w	r3, r3, #15
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	e006      	b.n	800337a <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003374:	f003 030f 	and.w	r3, r3, #15
 8003378:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 800337a:	68fb      	ldr	r3, [r7, #12]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003388:	b480      	push	{r7}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800339a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800339c:	7dfb      	ldrb	r3, [r7, #23]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d003      	beq.n	80033aa <HAL_FDCAN_ActivateNotification+0x22>
 80033a2:	7dfb      	ldrb	r3, [r7, #23]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	f040 80c8 	bne.w	800353a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d004      	beq.n	80033c6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d03b      	beq.n	800343e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d004      	beq.n	80033da <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d031      	beq.n	800343e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d004      	beq.n	80033ee <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	f003 0304 	and.w	r3, r3, #4
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d027      	beq.n	800343e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d004      	beq.n	8003402 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d01d      	beq.n	800343e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003408:	2b00      	cmp	r3, #0
 800340a:	d004      	beq.n	8003416 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	f003 0310 	and.w	r3, r3, #16
 8003412:	2b00      	cmp	r3, #0
 8003414:	d013      	beq.n	800343e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800341c:	2b00      	cmp	r3, #0
 800341e:	d004      	beq.n	800342a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f003 0320 	and.w	r3, r3, #32
 8003426:	2b00      	cmp	r3, #0
 8003428:	d009      	beq.n	800343e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00c      	beq.n	800344e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800343a:	2b00      	cmp	r3, #0
 800343c:	d107      	bne.n	800344e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f042 0201 	orr.w	r2, r2, #1
 800344c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	2b00      	cmp	r3, #0
 8003456:	d004      	beq.n	8003462 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d13b      	bne.n	80034da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003468:	2b00      	cmp	r3, #0
 800346a:	d004      	beq.n	8003476 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d131      	bne.n	80034da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800347c:	2b00      	cmp	r3, #0
 800347e:	d004      	beq.n	800348a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	f003 0304 	and.w	r3, r3, #4
 8003486:	2b00      	cmp	r3, #0
 8003488:	d127      	bne.n	80034da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003490:	2b00      	cmp	r3, #0
 8003492:	d004      	beq.n	800349e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	f003 0308 	and.w	r3, r3, #8
 800349a:	2b00      	cmp	r3, #0
 800349c:	d11d      	bne.n	80034da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d004      	beq.n	80034b2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	f003 0310 	and.w	r3, r3, #16
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d113      	bne.n	80034da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d004      	beq.n	80034c6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	f003 0320 	and.w	r3, r3, #32
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d109      	bne.n	80034da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00c      	beq.n	80034ea <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d007      	beq.n	80034ea <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f042 0202 	orr.w	r2, r2, #2
 80034e8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d009      	beq.n	8003508 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	430a      	orrs	r2, r1
 8003504:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800350e:	2b00      	cmp	r3, #0
 8003510:	d009      	beq.n	8003526 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	430a      	orrs	r2, r1
 8003522:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	430a      	orrs	r2, r1
 8003534:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8003536:	2300      	movs	r3, #0
 8003538:	e006      	b.n	8003548 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800353e:	f043 0202 	orr.w	r2, r3, #2
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
  }
}
 8003548:	4618      	mov	r0, r3
 800354a:	371c      	adds	r7, #28
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08c      	sub	sp, #48	@ 0x30
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003562:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8003566:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800356e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003570:	4013      	ands	r3, r2
 8003572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003586:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003588:	4013      	ands	r3, r2
 800358a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003592:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003596:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800359e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035a0:	4013      	ands	r3, r2
 80035a2:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035aa:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80035ae:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b6:	6a3a      	ldr	r2, [r7, #32]
 80035b8:	4013      	ands	r3, r2
 80035ba:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035c2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80035c6:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ce:	69fa      	ldr	r2, [r7, #28]
 80035d0:	4013      	ands	r3, r2
 80035d2:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035da:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035e2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00b      	beq.n	8003606 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d006      	beq.n	8003606 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2240      	movs	r2, #64	@ 0x40
 80035fe:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f916 	bl	8003832 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800360c:	2b00      	cmp	r3, #0
 800360e:	d019      	beq.n	8003644 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003616:	2b00      	cmp	r3, #0
 8003618:	d014      	beq.n	8003644 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003622:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4013      	ands	r3, r2
 8003630:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800363a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800363c:	6939      	ldr	r1, [r7, #16]
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f8d8 	bl	80037f4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003646:	2b00      	cmp	r3, #0
 8003648:	d007      	beq.n	800365a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003650:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003652:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f8a2 	bl	800379e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800365a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800365c:	2b00      	cmp	r3, #0
 800365e:	d007      	beq.n	8003670 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003666:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003668:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7fe fa86 	bl	8001b7c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003672:	2b00      	cmp	r3, #0
 8003674:	d007      	beq.n	8003686 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800367c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800367e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f897 	bl	80037b4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00c      	beq.n	80036aa <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003696:	2b00      	cmp	r3, #0
 8003698:	d007      	beq.n	80036aa <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036a2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f890 	bl	80037ca <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d018      	beq.n	80036e6 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d013      	beq.n	80036e6 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80036c6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4013      	ands	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2280      	movs	r2, #128	@ 0x80
 80036dc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80036de:	68f9      	ldr	r1, [r7, #12]
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f87c 	bl	80037de <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00c      	beq.n	800370a <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d007      	beq.n	800370a <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003702:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f880 	bl	800380a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00c      	beq.n	800372e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d007      	beq.n	800372e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003726:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f878 	bl	800381e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00f      	beq.n	8003758 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800374a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003750:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d007      	beq.n	800376e <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69fa      	ldr	r2, [r7, #28]
 8003764:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003766:	69f9      	ldr	r1, [r7, #28]
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f876 	bl	800385a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d009      	beq.n	8003788 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6a3a      	ldr	r2, [r7, #32]
 800377a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f858 	bl	8003846 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003796:	bf00      	nop
 8003798:	3730      	adds	r7, #48	@ 0x30
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
 80037a6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_FDCAN_GetError>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval FDCAN Error Code
  */
uint32_t HAL_FDCAN_GetError(const FDCAN_HandleTypeDef *hfdcan)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Return FDCAN error code */
  return hfdcan->ErrorCode;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
}
 800387c:	4618      	mov	r0, r3
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003890:	4b2c      	ldr	r3, [pc, #176]	@ (8003944 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8003892:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a2b      	ldr	r2, [pc, #172]	@ (8003948 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d103      	bne.n	80038a6 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80038a4:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038b4:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038bc:	041a      	lsls	r2, r3, #16
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038da:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e2:	061a      	lsls	r2, r3, #24
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	e005      	b.n	8003928 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	3304      	adds	r3, #4
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	429a      	cmp	r2, r3
 8003932:	d3f3      	bcc.n	800391c <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8003934:	bf00      	nop
 8003936:	bf00      	nop
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	4000ac00 	.word	0x4000ac00
 8003948:	4000a800 	.word	0x4000a800

0800394c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8003956:	2300      	movs	r3, #0
 8003958:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800395a:	e136      	b.n	8003bca <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	2101      	movs	r1, #1
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	fa01 f303 	lsl.w	r3, r1, r3
 8003968:	4013      	ands	r3, r2
 800396a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2b00      	cmp	r3, #0
 8003970:	f000 8128 	beq.w	8003bc4 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b02      	cmp	r3, #2
 800397a:	d003      	beq.n	8003984 <HAL_GPIO_Init+0x38>
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b12      	cmp	r3, #18
 8003982:	d125      	bne.n	80039d0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	08da      	lsrs	r2, r3, #3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3208      	adds	r2, #8
 800398c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003990:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	220f      	movs	r2, #15
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	43db      	mvns	r3, r3
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4013      	ands	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	f003 020f 	and.w	r2, r3, #15
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	4313      	orrs	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	08da      	lsrs	r2, r3, #3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3208      	adds	r2, #8
 80039ca:	6979      	ldr	r1, [r7, #20]
 80039cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	2203      	movs	r2, #3
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	43db      	mvns	r3, r3
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	4013      	ands	r3, r2
 80039e6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 0203 	and.w	r2, r3, #3
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d00b      	beq.n	8003a24 <HAL_GPIO_Init+0xd8>
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d007      	beq.n	8003a24 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a18:	2b11      	cmp	r3, #17
 8003a1a:	d003      	beq.n	8003a24 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b12      	cmp	r3, #18
 8003a22:	d130      	bne.n	8003a86 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	2203      	movs	r2, #3
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	43db      	mvns	r3, r3
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	68da      	ldr	r2, [r3, #12]
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	fa02 f303 	lsl.w	r3, r2, r3
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	43db      	mvns	r3, r3
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	4013      	ands	r3, r2
 8003a68:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	091b      	lsrs	r3, r3, #4
 8003a70:	f003 0201 	and.w	r2, r3, #1
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2b03      	cmp	r3, #3
 8003a8c:	d017      	beq.n	8003abe <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	2203      	movs	r2, #3
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d07c      	beq.n	8003bc4 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003aca:	4a47      	ldr	r2, [pc, #284]	@ (8003be8 <HAL_GPIO_Init+0x29c>)
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	089b      	lsrs	r3, r3, #2
 8003ad0:	3318      	adds	r3, #24
 8003ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ad6:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	f003 0303 	and.w	r3, r3, #3
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	220f      	movs	r2, #15
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	43db      	mvns	r3, r3
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	4013      	ands	r3, r2
 8003aec:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	0a9a      	lsrs	r2, r3, #10
 8003af2:	4b3e      	ldr	r3, [pc, #248]	@ (8003bec <HAL_GPIO_Init+0x2a0>)
 8003af4:	4013      	ands	r3, r2
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	f002 0203 	and.w	r2, r2, #3
 8003afc:	00d2      	lsls	r2, r2, #3
 8003afe:	4093      	lsls	r3, r2
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003b06:	4938      	ldr	r1, [pc, #224]	@ (8003be8 <HAL_GPIO_Init+0x29c>)
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	089b      	lsrs	r3, r3, #2
 8003b0c:	3318      	adds	r3, #24
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003b14:	4b34      	ldr	r3, [pc, #208]	@ (8003be8 <HAL_GPIO_Init+0x29c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	4013      	ands	r3, r2
 8003b22:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003b38:	4a2b      	ldr	r2, [pc, #172]	@ (8003be8 <HAL_GPIO_Init+0x29c>)
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003b3e:	4b2a      	ldr	r3, [pc, #168]	@ (8003be8 <HAL_GPIO_Init+0x29c>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	43db      	mvns	r3, r3
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003b62:	4a21      	ldr	r2, [pc, #132]	@ (8003be8 <HAL_GPIO_Init+0x29c>)
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003b68:	4b1f      	ldr	r3, [pc, #124]	@ (8003be8 <HAL_GPIO_Init+0x29c>)
 8003b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b6e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	43db      	mvns	r3, r3
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	4013      	ands	r3, r2
 8003b78:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003b8e:	4a16      	ldr	r2, [pc, #88]	@ (8003be8 <HAL_GPIO_Init+0x29c>)
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003b96:	4b14      	ldr	r3, [pc, #80]	@ (8003be8 <HAL_GPIO_Init+0x29c>)
 8003b98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b9c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d003      	beq.n	8003bbc <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8003be8 <HAL_GPIO_Init+0x29c>)
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f47f aec1 	bne.w	800395c <HAL_GPIO_Init+0x10>
  }
}
 8003bda:	bf00      	nop
 8003bdc:	bf00      	nop
 8003bde:	371c      	adds	r7, #28
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	44022000 	.word	0x44022000
 8003bec:	002f7f7f 	.word	0x002f7f7f

08003bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	807b      	strh	r3, [r7, #2]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c00:	787b      	ldrb	r3, [r7, #1]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c06:	887a      	ldrh	r2, [r7, #2]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c0c:	e002      	b.n	8003c14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c0e:	887a      	ldrh	r2, [r7, #2]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c32:	887a      	ldrh	r2, [r7, #2]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4013      	ands	r3, r2
 8003c38:	041a      	lsls	r2, r3, #16
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	43d9      	mvns	r1, r3
 8003c3e:	887b      	ldrh	r3, [r7, #2]
 8003c40:	400b      	ands	r3, r1
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	619a      	str	r2, [r3, #24]
}
 8003c48:	bf00      	nop
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e08d      	b.n	8003d82 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d106      	bne.n	8003c80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7fe f99a 	bl	8001fb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2224      	movs	r2, #36	@ 0x24
 8003c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0201 	bic.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ca4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003cb4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d107      	bne.n	8003cce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cca:	609a      	str	r2, [r3, #8]
 8003ccc:	e006      	b.n	8003cdc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003cda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d108      	bne.n	8003cf6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cf2:	605a      	str	r2, [r3, #4]
 8003cf4:	e007      	b.n	8003d06 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6812      	ldr	r2, [r2, #0]
 8003d10:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003d14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68da      	ldr	r2, [r3, #12]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691a      	ldr	r2, [r3, #16]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	69d9      	ldr	r1, [r3, #28]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a1a      	ldr	r2, [r3, #32]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f042 0201 	orr.w	r2, r2, #1
 8003d62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
 8003d92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b20      	cmp	r3, #32
 8003d9e:	d138      	bne.n	8003e12 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d101      	bne.n	8003dae <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003daa:	2302      	movs	r3, #2
 8003dac:	e032      	b.n	8003e14 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2224      	movs	r2, #36	@ 0x24
 8003dba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0201 	bic.w	r2, r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003ddc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6819      	ldr	r1, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f042 0201 	orr.w	r2, r2, #1
 8003dfc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	e000      	b.n	8003e14 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e12:	2302      	movs	r3, #2
  }
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b20      	cmp	r3, #32
 8003e34:	d139      	bne.n	8003eaa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d101      	bne.n	8003e44 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e40:	2302      	movs	r3, #2
 8003e42:	e033      	b.n	8003eac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2224      	movs	r2, #36	@ 0x24
 8003e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0201 	bic.w	r2, r2, #1
 8003e62:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e72:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	021b      	lsls	r3, r3, #8
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f042 0201 	orr.w	r2, r2, #1
 8003e94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	e000      	b.n	8003eac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003eaa:	2302      	movs	r3, #2
  }
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d002      	beq.n	8003ed6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	73fb      	strb	r3, [r7, #15]
 8003ed4:	e007      	b.n	8003ee6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003ed6:	4b07      	ldr	r3, [pc, #28]	@ (8003ef4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f023 0204 	bic.w	r2, r3, #4
 8003ede:	4905      	ldr	r1, [pc, #20]	@ (8003ef4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	40030400 	.word	0x40030400

08003ef8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003efc:	4b05      	ldr	r3, [pc, #20]	@ (8003f14 <HAL_ICACHE_Enable+0x1c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a04      	ldr	r2, [pc, #16]	@ (8003f14 <HAL_ICACHE_Enable+0x1c>)
 8003f02:	f043 0301 	orr.w	r3, r3, #1
 8003f06:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	40030400 	.word	0x40030400

08003f18 <HAL_ICACHE_IRQHandler>:
  * @note This function respectively disables the interrupt and clears the
  *       flag of any pending flag before calling the associated user callback.
  * @retval None
  */
void HAL_ICACHE_IRQHandler(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
  /* Get current interrupt flags and interrupt sources value */
  uint32_t itflags   = READ_REG(ICACHE->SR);
 8003f1e:	4b17      	ldr	r3, [pc, #92]	@ (8003f7c <HAL_ICACHE_IRQHandler+0x64>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	607b      	str	r3, [r7, #4]
  uint32_t itsources = READ_REG(ICACHE->IER);
 8003f24:	4b15      	ldr	r3, [pc, #84]	@ (8003f7c <HAL_ICACHE_IRQHandler+0x64>)
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	603b      	str	r3, [r7, #0]

  /* Check Instruction cache Error interrupt flag */
  if (((itflags & itsources) & ICACHE_FLAG_ERROR) != 0U)
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <HAL_ICACHE_IRQHandler+0x36>
  {
    /* Disable error interrupt */
    CLEAR_BIT(ICACHE->IER, ICACHE_IER_ERRIE);
 8003f38:	4b10      	ldr	r3, [pc, #64]	@ (8003f7c <HAL_ICACHE_IRQHandler+0x64>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	4a0f      	ldr	r2, [pc, #60]	@ (8003f7c <HAL_ICACHE_IRQHandler+0x64>)
 8003f3e:	f023 0304 	bic.w	r3, r3, #4
 8003f42:	6093      	str	r3, [r2, #8]

    /* Clear ERR pending flag */
    WRITE_REG(ICACHE->FCR, ICACHE_FCR_CERRF);
 8003f44:	4b0d      	ldr	r3, [pc, #52]	@ (8003f7c <HAL_ICACHE_IRQHandler+0x64>)
 8003f46:	2204      	movs	r2, #4
 8003f48:	60da      	str	r2, [r3, #12]

    /* Instruction cache error interrupt user callback */
    HAL_ICACHE_ErrorCallback();
 8003f4a:	f000 f820 	bl	8003f8e <HAL_ICACHE_ErrorCallback>
  }

  /* Check Instruction cache BusyEnd interrupt flag */
  if (((itflags & itsources) & ICACHE_FLAG_BUSYEND) != 0U)
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	4013      	ands	r3, r2
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <HAL_ICACHE_IRQHandler+0x5a>
  {
    /* Disable end of cache invalidation interrupt */
    CLEAR_BIT(ICACHE->IER, ICACHE_IER_BSYENDIE);
 8003f5c:	4b07      	ldr	r3, [pc, #28]	@ (8003f7c <HAL_ICACHE_IRQHandler+0x64>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	4a06      	ldr	r2, [pc, #24]	@ (8003f7c <HAL_ICACHE_IRQHandler+0x64>)
 8003f62:	f023 0302 	bic.w	r3, r3, #2
 8003f66:	6093      	str	r3, [r2, #8]

    /* Clear BSYENDF pending flag */
    WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 8003f68:	4b04      	ldr	r3, [pc, #16]	@ (8003f7c <HAL_ICACHE_IRQHandler+0x64>)
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	60da      	str	r2, [r3, #12]

    /* Instruction cache busyend interrupt user callback */
    HAL_ICACHE_InvalidateCompleteCallback();
 8003f6e:	f000 f807 	bl	8003f80 <HAL_ICACHE_InvalidateCompleteCallback>
  }
}
 8003f72:	bf00      	nop
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	40030400 	.word	0x40030400

08003f80 <HAL_ICACHE_InvalidateCompleteCallback>:

/**
  * @brief  Cache invalidation complete callback.
  */
__weak void HAL_ICACHE_InvalidateCompleteCallback(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_ICACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 8003f84:	bf00      	nop
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <HAL_ICACHE_ErrorCallback>:

/**
  * @brief  Error callback.
  */
__weak void HAL_ICACHE_ErrorCallback(void)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_ICACHE_ErrorCallback() should be implemented in the user file
   */
}
 8003f92:	bf00      	nop
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b088      	sub	sp, #32
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d102      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	f000 bc28 	b.w	8004800 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fb0:	4b94      	ldr	r3, [pc, #592]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	f003 0318 	and.w	r3, r3, #24
 8003fb8:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8003fba:	4b92      	ldr	r3, [pc, #584]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0310 	and.w	r3, r3, #16
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d05b      	beq.n	8004088 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	2b08      	cmp	r3, #8
 8003fd4:	d005      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x46>
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	2b18      	cmp	r3, #24
 8003fda:	d114      	bne.n	8004006 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d111      	bne.n	8004006 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d102      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	f000 bc08 	b.w	8004800 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003ff0:	4b84      	ldr	r3, [pc, #528]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	041b      	lsls	r3, r3, #16
 8003ffe:	4981      	ldr	r1, [pc, #516]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 8004000:	4313      	orrs	r3, r2
 8004002:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8004004:	e040      	b.n	8004088 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d023      	beq.n	8004056 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800400e:	4b7d      	ldr	r3, [pc, #500]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a7c      	ldr	r2, [pc, #496]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 8004014:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004018:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401a:	f7fe fc4d 	bl	80028b8 <HAL_GetTick>
 800401e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004020:	e008      	b.n	8004034 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8004022:	f7fe fc49 	bl	80028b8 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e3e5      	b.n	8004800 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004034:	4b73      	ldr	r3, [pc, #460]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0f0      	beq.n	8004022 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8004040:	4b70      	ldr	r3, [pc, #448]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	041b      	lsls	r3, r3, #16
 800404e:	496d      	ldr	r1, [pc, #436]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 8004050:	4313      	orrs	r3, r2
 8004052:	618b      	str	r3, [r1, #24]
 8004054:	e018      	b.n	8004088 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004056:	4b6b      	ldr	r3, [pc, #428]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a6a      	ldr	r2, [pc, #424]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 800405c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004062:	f7fe fc29 	bl	80028b8 <HAL_GetTick>
 8004066:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800406a:	f7fe fc25 	bl	80028b8 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e3c1      	b.n	8004800 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800407c:	4b61      	ldr	r3, [pc, #388]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1f0      	bne.n	800406a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 80a0 	beq.w	80041d6 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	2b10      	cmp	r3, #16
 800409a:	d005      	beq.n	80040a8 <HAL_RCC_OscConfig+0x10c>
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	2b18      	cmp	r3, #24
 80040a0:	d109      	bne.n	80040b6 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	2b03      	cmp	r3, #3
 80040a6:	d106      	bne.n	80040b6 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f040 8092 	bne.w	80041d6 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e3a4      	b.n	8004800 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040be:	d106      	bne.n	80040ce <HAL_RCC_OscConfig+0x132>
 80040c0:	4b50      	ldr	r3, [pc, #320]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a4f      	ldr	r2, [pc, #316]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 80040c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040ca:	6013      	str	r3, [r2, #0]
 80040cc:	e058      	b.n	8004180 <HAL_RCC_OscConfig+0x1e4>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d112      	bne.n	80040fc <HAL_RCC_OscConfig+0x160>
 80040d6:	4b4b      	ldr	r3, [pc, #300]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a4a      	ldr	r2, [pc, #296]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 80040dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040e0:	6013      	str	r3, [r2, #0]
 80040e2:	4b48      	ldr	r3, [pc, #288]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a47      	ldr	r2, [pc, #284]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 80040e8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	4b45      	ldr	r3, [pc, #276]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a44      	ldr	r2, [pc, #272]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 80040f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	e041      	b.n	8004180 <HAL_RCC_OscConfig+0x1e4>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004104:	d112      	bne.n	800412c <HAL_RCC_OscConfig+0x190>
 8004106:	4b3f      	ldr	r3, [pc, #252]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a3e      	ldr	r2, [pc, #248]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 800410c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	4b3c      	ldr	r3, [pc, #240]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a3b      	ldr	r2, [pc, #236]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 8004118:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	4b39      	ldr	r3, [pc, #228]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a38      	ldr	r2, [pc, #224]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 8004124:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004128:	6013      	str	r3, [r2, #0]
 800412a:	e029      	b.n	8004180 <HAL_RCC_OscConfig+0x1e4>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004134:	d112      	bne.n	800415c <HAL_RCC_OscConfig+0x1c0>
 8004136:	4b33      	ldr	r3, [pc, #204]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a32      	ldr	r2, [pc, #200]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 800413c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	4b30      	ldr	r3, [pc, #192]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a2f      	ldr	r2, [pc, #188]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 8004148:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800414c:	6013      	str	r3, [r2, #0]
 800414e:	4b2d      	ldr	r3, [pc, #180]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a2c      	ldr	r2, [pc, #176]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 8004154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004158:	6013      	str	r3, [r2, #0]
 800415a:	e011      	b.n	8004180 <HAL_RCC_OscConfig+0x1e4>
 800415c:	4b29      	ldr	r3, [pc, #164]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a28      	ldr	r2, [pc, #160]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 8004162:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004166:	6013      	str	r3, [r2, #0]
 8004168:	4b26      	ldr	r3, [pc, #152]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a25      	ldr	r2, [pc, #148]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 800416e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	4b23      	ldr	r3, [pc, #140]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a22      	ldr	r2, [pc, #136]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 800417a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800417e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d013      	beq.n	80041b0 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004188:	f7fe fb96 	bl	80028b8 <HAL_GetTick>
 800418c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004190:	f7fe fb92 	bl	80028b8 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b64      	cmp	r3, #100	@ 0x64
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e32e      	b.n	8004800 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041a2:	4b18      	ldr	r3, [pc, #96]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0f0      	beq.n	8004190 <HAL_RCC_OscConfig+0x1f4>
 80041ae:	e012      	b.n	80041d6 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b0:	f7fe fb82 	bl	80028b8 <HAL_GetTick>
 80041b4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80041b8:	f7fe fb7e 	bl	80028b8 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b64      	cmp	r3, #100	@ 0x64
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e31a      	b.n	8004800 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004204 <HAL_RCC_OscConfig+0x268>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f0      	bne.n	80041b8 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 809a 	beq.w	8004318 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d005      	beq.n	80041f6 <HAL_RCC_OscConfig+0x25a>
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	2b18      	cmp	r3, #24
 80041ee:	d149      	bne.n	8004284 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d146      	bne.n	8004284 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d104      	bne.n	8004208 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e2fe      	b.n	8004800 <HAL_RCC_OscConfig+0x864>
 8004202:	bf00      	nop
 8004204:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d11c      	bne.n	8004248 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800420e:	4b9a      	ldr	r3, [pc, #616]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0218 	and.w	r2, r3, #24
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	429a      	cmp	r2, r3
 800421c:	d014      	beq.n	8004248 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800421e:	4b96      	ldr	r3, [pc, #600]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f023 0218 	bic.w	r2, r3, #24
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	4993      	ldr	r1, [pc, #588]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 800422c:	4313      	orrs	r3, r2
 800422e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8004230:	f000 fdd0 	bl	8004dd4 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004234:	4b91      	ldr	r3, [pc, #580]	@ (800447c <HAL_RCC_OscConfig+0x4e0>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f7fe fab3 	bl	80027a4 <HAL_InitTick>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e2db      	b.n	8004800 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004248:	f7fe fb36 	bl	80028b8 <HAL_GetTick>
 800424c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004250:	f7fe fb32 	bl	80028b8 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e2ce      	b.n	8004800 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004262:	4b85      	ldr	r3, [pc, #532]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0f0      	beq.n	8004250 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800426e:	4b82      	ldr	r3, [pc, #520]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	041b      	lsls	r3, r3, #16
 800427c:	497e      	ldr	r1, [pc, #504]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 800427e:	4313      	orrs	r3, r2
 8004280:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004282:	e049      	b.n	8004318 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d02c      	beq.n	80042e6 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800428c:	4b7a      	ldr	r3, [pc, #488]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f023 0218 	bic.w	r2, r3, #24
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	4977      	ldr	r1, [pc, #476]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 800429a:	4313      	orrs	r3, r2
 800429c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800429e:	4b76      	ldr	r3, [pc, #472]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a75      	ldr	r2, [pc, #468]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 80042a4:	f043 0301 	orr.w	r3, r3, #1
 80042a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042aa:	f7fe fb05 	bl	80028b8 <HAL_GetTick>
 80042ae:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042b0:	e008      	b.n	80042c4 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80042b2:	f7fe fb01 	bl	80028b8 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e29d      	b.n	8004800 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042c4:	4b6c      	ldr	r3, [pc, #432]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0f0      	beq.n	80042b2 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80042d0:	4b69      	ldr	r3, [pc, #420]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	041b      	lsls	r3, r3, #16
 80042de:	4966      	ldr	r1, [pc, #408]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	610b      	str	r3, [r1, #16]
 80042e4:	e018      	b.n	8004318 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042e6:	4b64      	ldr	r3, [pc, #400]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a63      	ldr	r2, [pc, #396]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 80042ec:	f023 0301 	bic.w	r3, r3, #1
 80042f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f2:	f7fe fae1 	bl	80028b8 <HAL_GetTick>
 80042f6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042f8:	e008      	b.n	800430c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80042fa:	f7fe fadd 	bl	80028b8 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e279      	b.n	8004800 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800430c:	4b5a      	ldr	r3, [pc, #360]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1f0      	bne.n	80042fa <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	2b00      	cmp	r3, #0
 8004322:	d03c      	beq.n	800439e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d01c      	beq.n	8004366 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800432c:	4b52      	ldr	r3, [pc, #328]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 800432e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004332:	4a51      	ldr	r2, [pc, #324]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 8004334:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004338:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800433c:	f7fe fabc 	bl	80028b8 <HAL_GetTick>
 8004340:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004344:	f7fe fab8 	bl	80028b8 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e254      	b.n	8004800 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004356:	4b48      	ldr	r3, [pc, #288]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 8004358:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800435c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0ef      	beq.n	8004344 <HAL_RCC_OscConfig+0x3a8>
 8004364:	e01b      	b.n	800439e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004366:	4b44      	ldr	r3, [pc, #272]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 8004368:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800436c:	4a42      	ldr	r2, [pc, #264]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 800436e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004372:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004376:	f7fe fa9f 	bl	80028b8 <HAL_GetTick>
 800437a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800437c:	e008      	b.n	8004390 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800437e:	f7fe fa9b 	bl	80028b8 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e237      	b.n	8004800 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004390:	4b39      	ldr	r3, [pc, #228]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 8004392:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004396:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1ef      	bne.n	800437e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0304 	and.w	r3, r3, #4
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 80d2 	beq.w	8004550 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80043ac:	4b34      	ldr	r3, [pc, #208]	@ (8004480 <HAL_RCC_OscConfig+0x4e4>)
 80043ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d118      	bne.n	80043ea <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80043b8:	4b31      	ldr	r3, [pc, #196]	@ (8004480 <HAL_RCC_OscConfig+0x4e4>)
 80043ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043bc:	4a30      	ldr	r2, [pc, #192]	@ (8004480 <HAL_RCC_OscConfig+0x4e4>)
 80043be:	f043 0301 	orr.w	r3, r3, #1
 80043c2:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043c4:	f7fe fa78 	bl	80028b8 <HAL_GetTick>
 80043c8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043cc:	f7fe fa74 	bl	80028b8 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e210      	b.n	8004800 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80043de:	4b28      	ldr	r3, [pc, #160]	@ (8004480 <HAL_RCC_OscConfig+0x4e4>)
 80043e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0f0      	beq.n	80043cc <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d108      	bne.n	8004404 <HAL_RCC_OscConfig+0x468>
 80043f2:	4b21      	ldr	r3, [pc, #132]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 80043f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043f8:	4a1f      	ldr	r2, [pc, #124]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 80043fa:	f043 0301 	orr.w	r3, r3, #1
 80043fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004402:	e074      	b.n	80044ee <HAL_RCC_OscConfig+0x552>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d118      	bne.n	800443e <HAL_RCC_OscConfig+0x4a2>
 800440c:	4b1a      	ldr	r3, [pc, #104]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 800440e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004412:	4a19      	ldr	r2, [pc, #100]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 8004414:	f023 0301 	bic.w	r3, r3, #1
 8004418:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800441c:	4b16      	ldr	r3, [pc, #88]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 800441e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004422:	4a15      	ldr	r2, [pc, #84]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 8004424:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004428:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800442c:	4b12      	ldr	r3, [pc, #72]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 800442e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004432:	4a11      	ldr	r2, [pc, #68]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 8004434:	f023 0304 	bic.w	r3, r3, #4
 8004438:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800443c:	e057      	b.n	80044ee <HAL_RCC_OscConfig+0x552>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	2b05      	cmp	r3, #5
 8004444:	d11e      	bne.n	8004484 <HAL_RCC_OscConfig+0x4e8>
 8004446:	4b0c      	ldr	r3, [pc, #48]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 8004448:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800444c:	4a0a      	ldr	r2, [pc, #40]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 800444e:	f043 0304 	orr.w	r3, r3, #4
 8004452:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004456:	4b08      	ldr	r3, [pc, #32]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 8004458:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800445c:	4a06      	ldr	r2, [pc, #24]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 800445e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004462:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004466:	4b04      	ldr	r3, [pc, #16]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 8004468:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800446c:	4a02      	ldr	r2, [pc, #8]	@ (8004478 <HAL_RCC_OscConfig+0x4dc>)
 800446e:	f043 0301 	orr.w	r3, r3, #1
 8004472:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004476:	e03a      	b.n	80044ee <HAL_RCC_OscConfig+0x552>
 8004478:	44020c00 	.word	0x44020c00
 800447c:	2000000c 	.word	0x2000000c
 8004480:	44020800 	.word	0x44020800
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	2b85      	cmp	r3, #133	@ 0x85
 800448a:	d118      	bne.n	80044be <HAL_RCC_OscConfig+0x522>
 800448c:	4ba2      	ldr	r3, [pc, #648]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 800448e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004492:	4aa1      	ldr	r2, [pc, #644]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 8004494:	f043 0304 	orr.w	r3, r3, #4
 8004498:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800449c:	4b9e      	ldr	r3, [pc, #632]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 800449e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044a2:	4a9d      	ldr	r2, [pc, #628]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 80044a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80044ac:	4b9a      	ldr	r3, [pc, #616]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 80044ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044b2:	4a99      	ldr	r2, [pc, #612]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 80044b4:	f043 0301 	orr.w	r3, r3, #1
 80044b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80044bc:	e017      	b.n	80044ee <HAL_RCC_OscConfig+0x552>
 80044be:	4b96      	ldr	r3, [pc, #600]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 80044c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044c4:	4a94      	ldr	r2, [pc, #592]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 80044c6:	f023 0301 	bic.w	r3, r3, #1
 80044ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80044ce:	4b92      	ldr	r3, [pc, #584]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 80044d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044d4:	4a90      	ldr	r2, [pc, #576]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 80044d6:	f023 0304 	bic.w	r3, r3, #4
 80044da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80044de:	4b8e      	ldr	r3, [pc, #568]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 80044e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044e4:	4a8c      	ldr	r2, [pc, #560]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 80044e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d016      	beq.n	8004524 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f6:	f7fe f9df 	bl	80028b8 <HAL_GetTick>
 80044fa:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044fc:	e00a      	b.n	8004514 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044fe:	f7fe f9db 	bl	80028b8 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	f241 3288 	movw	r2, #5000	@ 0x1388
 800450c:	4293      	cmp	r3, r2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e175      	b.n	8004800 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004514:	4b80      	ldr	r3, [pc, #512]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 8004516:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d0ed      	beq.n	80044fe <HAL_RCC_OscConfig+0x562>
 8004522:	e015      	b.n	8004550 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004524:	f7fe f9c8 	bl	80028b8 <HAL_GetTick>
 8004528:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800452a:	e00a      	b.n	8004542 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800452c:	f7fe f9c4 	bl	80028b8 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	f241 3288 	movw	r2, #5000	@ 0x1388
 800453a:	4293      	cmp	r3, r2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e15e      	b.n	8004800 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004542:	4b75      	ldr	r3, [pc, #468]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 8004544:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1ed      	bne.n	800452c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0320 	and.w	r3, r3, #32
 8004558:	2b00      	cmp	r3, #0
 800455a:	d036      	beq.n	80045ca <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004560:	2b00      	cmp	r3, #0
 8004562:	d019      	beq.n	8004598 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004564:	4b6c      	ldr	r3, [pc, #432]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a6b      	ldr	r2, [pc, #428]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 800456a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800456e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004570:	f7fe f9a2 	bl	80028b8 <HAL_GetTick>
 8004574:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004578:	f7fe f99e 	bl	80028b8 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e13a      	b.n	8004800 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800458a:	4b63      	ldr	r3, [pc, #396]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0f0      	beq.n	8004578 <HAL_RCC_OscConfig+0x5dc>
 8004596:	e018      	b.n	80045ca <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004598:	4b5f      	ldr	r3, [pc, #380]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a5e      	ldr	r2, [pc, #376]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 800459e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a4:	f7fe f988 	bl	80028b8 <HAL_GetTick>
 80045a8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80045ac:	f7fe f984 	bl	80028b8 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e120      	b.n	8004800 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80045be:	4b56      	ldr	r3, [pc, #344]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1f0      	bne.n	80045ac <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 8115 	beq.w	80047fe <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	2b18      	cmp	r3, #24
 80045d8:	f000 80af 	beq.w	800473a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	f040 8086 	bne.w	80046f2 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80045e6:	4b4c      	ldr	r3, [pc, #304]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a4b      	ldr	r2, [pc, #300]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 80045ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f2:	f7fe f961 	bl	80028b8 <HAL_GetTick>
 80045f6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80045fa:	f7fe f95d 	bl	80028b8 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e0f9      	b.n	8004800 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800460c:	4b42      	ldr	r3, [pc, #264]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1f0      	bne.n	80045fa <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8004618:	4b3f      	ldr	r3, [pc, #252]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 800461a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800461c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004620:	f023 0303 	bic.w	r3, r3, #3
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800462c:	0212      	lsls	r2, r2, #8
 800462e:	430a      	orrs	r2, r1
 8004630:	4939      	ldr	r1, [pc, #228]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 8004632:	4313      	orrs	r3, r2
 8004634:	628b      	str	r3, [r1, #40]	@ 0x28
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800463a:	3b01      	subs	r3, #1
 800463c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004644:	3b01      	subs	r3, #1
 8004646:	025b      	lsls	r3, r3, #9
 8004648:	b29b      	uxth	r3, r3
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004650:	3b01      	subs	r3, #1
 8004652:	041b      	lsls	r3, r3, #16
 8004654:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004658:	431a      	orrs	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465e:	3b01      	subs	r3, #1
 8004660:	061b      	lsls	r3, r3, #24
 8004662:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004666:	492c      	ldr	r1, [pc, #176]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 8004668:	4313      	orrs	r3, r2
 800466a:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800466c:	4b2a      	ldr	r3, [pc, #168]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 800466e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004670:	4a29      	ldr	r2, [pc, #164]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 8004672:	f023 0310 	bic.w	r3, r3, #16
 8004676:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800467c:	4a26      	ldr	r2, [pc, #152]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004682:	4b25      	ldr	r3, [pc, #148]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 8004684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004686:	4a24      	ldr	r2, [pc, #144]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 8004688:	f043 0310 	orr.w	r3, r3, #16
 800468c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800468e:	4b22      	ldr	r3, [pc, #136]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 8004690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004692:	f023 020c 	bic.w	r2, r3, #12
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800469a:	491f      	ldr	r1, [pc, #124]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 800469c:	4313      	orrs	r3, r2
 800469e:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80046a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 80046a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a4:	f023 0220 	bic.w	r2, r3, #32
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046ac:	491a      	ldr	r1, [pc, #104]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80046b2:	4b19      	ldr	r3, [pc, #100]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 80046b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b6:	4a18      	ldr	r2, [pc, #96]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 80046b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046bc:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80046be:	4b16      	ldr	r3, [pc, #88]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a15      	ldr	r2, [pc, #84]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 80046c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ca:	f7fe f8f5 	bl	80028b8 <HAL_GetTick>
 80046ce:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80046d2:	f7fe f8f1 	bl	80028b8 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e08d      	b.n	8004800 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80046e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0f0      	beq.n	80046d2 <HAL_RCC_OscConfig+0x736>
 80046f0:	e085      	b.n	80047fe <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80046f2:	4b09      	ldr	r3, [pc, #36]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a08      	ldr	r2, [pc, #32]	@ (8004718 <HAL_RCC_OscConfig+0x77c>)
 80046f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fe:	f7fe f8db 	bl	80028b8 <HAL_GetTick>
 8004702:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004704:	e00a      	b.n	800471c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004706:	f7fe f8d7 	bl	80028b8 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d903      	bls.n	800471c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e073      	b.n	8004800 <HAL_RCC_OscConfig+0x864>
 8004718:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800471c:	4b3a      	ldr	r3, [pc, #232]	@ (8004808 <HAL_RCC_OscConfig+0x86c>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1ee      	bne.n	8004706 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004728:	4b37      	ldr	r3, [pc, #220]	@ (8004808 <HAL_RCC_OscConfig+0x86c>)
 800472a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800472c:	4a36      	ldr	r2, [pc, #216]	@ (8004808 <HAL_RCC_OscConfig+0x86c>)
 800472e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004732:	f023 0303 	bic.w	r3, r3, #3
 8004736:	6293      	str	r3, [r2, #40]	@ 0x28
 8004738:	e061      	b.n	80047fe <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800473a:	4b33      	ldr	r3, [pc, #204]	@ (8004808 <HAL_RCC_OscConfig+0x86c>)
 800473c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004740:	4b31      	ldr	r3, [pc, #196]	@ (8004808 <HAL_RCC_OscConfig+0x86c>)
 8004742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004744:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800474a:	2b01      	cmp	r3, #1
 800474c:	d031      	beq.n	80047b2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	f003 0203 	and.w	r2, r3, #3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004758:	429a      	cmp	r2, r3
 800475a:	d12a      	bne.n	80047b2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	0a1b      	lsrs	r3, r3, #8
 8004760:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004768:	429a      	cmp	r2, r3
 800476a:	d122      	bne.n	80047b2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004776:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004778:	429a      	cmp	r2, r3
 800477a:	d11a      	bne.n	80047b2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	0a5b      	lsrs	r3, r3, #9
 8004780:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004788:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800478a:	429a      	cmp	r2, r3
 800478c:	d111      	bne.n	80047b2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	0c1b      	lsrs	r3, r3, #16
 8004792:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800479a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800479c:	429a      	cmp	r2, r3
 800479e:	d108      	bne.n	80047b2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	0e1b      	lsrs	r3, r3, #24
 80047a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ac:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d001      	beq.n	80047b6 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e024      	b.n	8004800 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80047b6:	4b14      	ldr	r3, [pc, #80]	@ (8004808 <HAL_RCC_OscConfig+0x86c>)
 80047b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ba:	08db      	lsrs	r3, r3, #3
 80047bc:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d01a      	beq.n	80047fe <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80047c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004808 <HAL_RCC_OscConfig+0x86c>)
 80047ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047cc:	4a0e      	ldr	r2, [pc, #56]	@ (8004808 <HAL_RCC_OscConfig+0x86c>)
 80047ce:	f023 0310 	bic.w	r3, r3, #16
 80047d2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d4:	f7fe f870 	bl	80028b8 <HAL_GetTick>
 80047d8:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80047da:	bf00      	nop
 80047dc:	f7fe f86c 	bl	80028b8 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d0f9      	beq.n	80047dc <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047ec:	4a06      	ldr	r2, [pc, #24]	@ (8004808 <HAL_RCC_OscConfig+0x86c>)
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80047f2:	4b05      	ldr	r3, [pc, #20]	@ (8004808 <HAL_RCC_OscConfig+0x86c>)
 80047f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f6:	4a04      	ldr	r2, [pc, #16]	@ (8004808 <HAL_RCC_OscConfig+0x86c>)
 80047f8:	f043 0310 	orr.w	r3, r3, #16
 80047fc:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3720      	adds	r7, #32
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	44020c00 	.word	0x44020c00

0800480c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e19e      	b.n	8004b5e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004820:	4b83      	ldr	r3, [pc, #524]	@ (8004a30 <HAL_RCC_ClockConfig+0x224>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 030f 	and.w	r3, r3, #15
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	429a      	cmp	r2, r3
 800482c:	d910      	bls.n	8004850 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800482e:	4b80      	ldr	r3, [pc, #512]	@ (8004a30 <HAL_RCC_ClockConfig+0x224>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f023 020f 	bic.w	r2, r3, #15
 8004836:	497e      	ldr	r1, [pc, #504]	@ (8004a30 <HAL_RCC_ClockConfig+0x224>)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	4313      	orrs	r3, r2
 800483c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800483e:	4b7c      	ldr	r3, [pc, #496]	@ (8004a30 <HAL_RCC_ClockConfig+0x224>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 030f 	and.w	r3, r3, #15
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d001      	beq.n	8004850 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e186      	b.n	8004b5e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0310 	and.w	r3, r3, #16
 8004858:	2b00      	cmp	r3, #0
 800485a:	d012      	beq.n	8004882 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	695a      	ldr	r2, [r3, #20]
 8004860:	4b74      	ldr	r3, [pc, #464]	@ (8004a34 <HAL_RCC_ClockConfig+0x228>)
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	0a1b      	lsrs	r3, r3, #8
 8004866:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800486a:	429a      	cmp	r2, r3
 800486c:	d909      	bls.n	8004882 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800486e:	4b71      	ldr	r3, [pc, #452]	@ (8004a34 <HAL_RCC_ClockConfig+0x228>)
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	021b      	lsls	r3, r3, #8
 800487c:	496d      	ldr	r1, [pc, #436]	@ (8004a34 <HAL_RCC_ClockConfig+0x228>)
 800487e:	4313      	orrs	r3, r2
 8004880:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	2b00      	cmp	r3, #0
 800488c:	d012      	beq.n	80048b4 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	691a      	ldr	r2, [r3, #16]
 8004892:	4b68      	ldr	r3, [pc, #416]	@ (8004a34 <HAL_RCC_ClockConfig+0x228>)
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	091b      	lsrs	r3, r3, #4
 8004898:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800489c:	429a      	cmp	r2, r3
 800489e:	d909      	bls.n	80048b4 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80048a0:	4b64      	ldr	r3, [pc, #400]	@ (8004a34 <HAL_RCC_ClockConfig+0x228>)
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	4961      	ldr	r1, [pc, #388]	@ (8004a34 <HAL_RCC_ClockConfig+0x228>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d010      	beq.n	80048e2 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68da      	ldr	r2, [r3, #12]
 80048c4:	4b5b      	ldr	r3, [pc, #364]	@ (8004a34 <HAL_RCC_ClockConfig+0x228>)
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d908      	bls.n	80048e2 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80048d0:	4b58      	ldr	r3, [pc, #352]	@ (8004a34 <HAL_RCC_ClockConfig+0x228>)
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	4955      	ldr	r1, [pc, #340]	@ (8004a34 <HAL_RCC_ClockConfig+0x228>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d010      	beq.n	8004910 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	4b50      	ldr	r3, [pc, #320]	@ (8004a34 <HAL_RCC_ClockConfig+0x228>)
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d908      	bls.n	8004910 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80048fe:	4b4d      	ldr	r3, [pc, #308]	@ (8004a34 <HAL_RCC_ClockConfig+0x228>)
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	f023 020f 	bic.w	r2, r3, #15
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	494a      	ldr	r1, [pc, #296]	@ (8004a34 <HAL_RCC_ClockConfig+0x228>)
 800490c:	4313      	orrs	r3, r2
 800490e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 8093 	beq.w	8004a44 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2b03      	cmp	r3, #3
 8004924:	d107      	bne.n	8004936 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004926:	4b43      	ldr	r3, [pc, #268]	@ (8004a34 <HAL_RCC_ClockConfig+0x228>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d121      	bne.n	8004976 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e113      	b.n	8004b5e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2b02      	cmp	r3, #2
 800493c:	d107      	bne.n	800494e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800493e:	4b3d      	ldr	r3, [pc, #244]	@ (8004a34 <HAL_RCC_ClockConfig+0x228>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d115      	bne.n	8004976 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e107      	b.n	8004b5e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d107      	bne.n	8004966 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004956:	4b37      	ldr	r3, [pc, #220]	@ (8004a34 <HAL_RCC_ClockConfig+0x228>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800495e:	2b00      	cmp	r3, #0
 8004960:	d109      	bne.n	8004976 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e0fb      	b.n	8004b5e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004966:	4b33      	ldr	r3, [pc, #204]	@ (8004a34 <HAL_RCC_ClockConfig+0x228>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e0f3      	b.n	8004b5e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8004976:	4b2f      	ldr	r3, [pc, #188]	@ (8004a34 <HAL_RCC_ClockConfig+0x228>)
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	f023 0203 	bic.w	r2, r3, #3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	492c      	ldr	r1, [pc, #176]	@ (8004a34 <HAL_RCC_ClockConfig+0x228>)
 8004984:	4313      	orrs	r3, r2
 8004986:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004988:	f7fd ff96 	bl	80028b8 <HAL_GetTick>
 800498c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b03      	cmp	r3, #3
 8004994:	d112      	bne.n	80049bc <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004996:	e00a      	b.n	80049ae <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004998:	f7fd ff8e 	bl	80028b8 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e0d7      	b.n	8004b5e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049ae:	4b21      	ldr	r3, [pc, #132]	@ (8004a34 <HAL_RCC_ClockConfig+0x228>)
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	f003 0318 	and.w	r3, r3, #24
 80049b6:	2b18      	cmp	r3, #24
 80049b8:	d1ee      	bne.n	8004998 <HAL_RCC_ClockConfig+0x18c>
 80049ba:	e043      	b.n	8004a44 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d112      	bne.n	80049ea <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80049c4:	e00a      	b.n	80049dc <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80049c6:	f7fd ff77 	bl	80028b8 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e0c0      	b.n	8004b5e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80049dc:	4b15      	ldr	r3, [pc, #84]	@ (8004a34 <HAL_RCC_ClockConfig+0x228>)
 80049de:	69db      	ldr	r3, [r3, #28]
 80049e0:	f003 0318 	and.w	r3, r3, #24
 80049e4:	2b10      	cmp	r3, #16
 80049e6:	d1ee      	bne.n	80049c6 <HAL_RCC_ClockConfig+0x1ba>
 80049e8:	e02c      	b.n	8004a44 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d122      	bne.n	8004a38 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80049f2:	e00a      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80049f4:	f7fd ff60 	bl	80028b8 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e0a9      	b.n	8004b5e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8004a34 <HAL_RCC_ClockConfig+0x228>)
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	f003 0318 	and.w	r3, r3, #24
 8004a12:	2b08      	cmp	r3, #8
 8004a14:	d1ee      	bne.n	80049f4 <HAL_RCC_ClockConfig+0x1e8>
 8004a16:	e015      	b.n	8004a44 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004a18:	f7fd ff4e 	bl	80028b8 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d906      	bls.n	8004a38 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e097      	b.n	8004b5e <HAL_RCC_ClockConfig+0x352>
 8004a2e:	bf00      	nop
 8004a30:	40022000 	.word	0x40022000
 8004a34:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a38:	4b4b      	ldr	r3, [pc, #300]	@ (8004b68 <HAL_RCC_ClockConfig+0x35c>)
 8004a3a:	69db      	ldr	r3, [r3, #28]
 8004a3c:	f003 0318 	and.w	r3, r3, #24
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1e9      	bne.n	8004a18 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d010      	beq.n	8004a72 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	4b44      	ldr	r3, [pc, #272]	@ (8004b68 <HAL_RCC_ClockConfig+0x35c>)
 8004a56:	6a1b      	ldr	r3, [r3, #32]
 8004a58:	f003 030f 	and.w	r3, r3, #15
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d208      	bcs.n	8004a72 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004a60:	4b41      	ldr	r3, [pc, #260]	@ (8004b68 <HAL_RCC_ClockConfig+0x35c>)
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	f023 020f 	bic.w	r2, r3, #15
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	493e      	ldr	r1, [pc, #248]	@ (8004b68 <HAL_RCC_ClockConfig+0x35c>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a72:	4b3e      	ldr	r3, [pc, #248]	@ (8004b6c <HAL_RCC_ClockConfig+0x360>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d210      	bcs.n	8004aa2 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a80:	4b3a      	ldr	r3, [pc, #232]	@ (8004b6c <HAL_RCC_ClockConfig+0x360>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f023 020f 	bic.w	r2, r3, #15
 8004a88:	4938      	ldr	r1, [pc, #224]	@ (8004b6c <HAL_RCC_ClockConfig+0x360>)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a90:	4b36      	ldr	r3, [pc, #216]	@ (8004b6c <HAL_RCC_ClockConfig+0x360>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 030f 	and.w	r3, r3, #15
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d001      	beq.n	8004aa2 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e05d      	b.n	8004b5e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0304 	and.w	r3, r3, #4
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d010      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	4b2d      	ldr	r3, [pc, #180]	@ (8004b68 <HAL_RCC_ClockConfig+0x35c>)
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d208      	bcs.n	8004ad0 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004abe:	4b2a      	ldr	r3, [pc, #168]	@ (8004b68 <HAL_RCC_ClockConfig+0x35c>)
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	4927      	ldr	r1, [pc, #156]	@ (8004b68 <HAL_RCC_ClockConfig+0x35c>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0308 	and.w	r3, r3, #8
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d012      	beq.n	8004b02 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691a      	ldr	r2, [r3, #16]
 8004ae0:	4b21      	ldr	r3, [pc, #132]	@ (8004b68 <HAL_RCC_ClockConfig+0x35c>)
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	091b      	lsrs	r3, r3, #4
 8004ae6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d209      	bcs.n	8004b02 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004aee:	4b1e      	ldr	r3, [pc, #120]	@ (8004b68 <HAL_RCC_ClockConfig+0x35c>)
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	011b      	lsls	r3, r3, #4
 8004afc:	491a      	ldr	r1, [pc, #104]	@ (8004b68 <HAL_RCC_ClockConfig+0x35c>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0310 	and.w	r3, r3, #16
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d012      	beq.n	8004b34 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	695a      	ldr	r2, [r3, #20]
 8004b12:	4b15      	ldr	r3, [pc, #84]	@ (8004b68 <HAL_RCC_ClockConfig+0x35c>)
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	0a1b      	lsrs	r3, r3, #8
 8004b18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d209      	bcs.n	8004b34 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004b20:	4b11      	ldr	r3, [pc, #68]	@ (8004b68 <HAL_RCC_ClockConfig+0x35c>)
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	021b      	lsls	r3, r3, #8
 8004b2e:	490e      	ldr	r1, [pc, #56]	@ (8004b68 <HAL_RCC_ClockConfig+0x35c>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004b34:	f000 f822 	bl	8004b7c <HAL_RCC_GetSysClockFreq>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004b68 <HAL_RCC_ClockConfig+0x35c>)
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	f003 030f 	and.w	r3, r3, #15
 8004b42:	490b      	ldr	r1, [pc, #44]	@ (8004b70 <HAL_RCC_ClockConfig+0x364>)
 8004b44:	5ccb      	ldrb	r3, [r1, r3]
 8004b46:	fa22 f303 	lsr.w	r3, r2, r3
 8004b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8004b74 <HAL_RCC_ClockConfig+0x368>)
 8004b4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8004b78 <HAL_RCC_ClockConfig+0x36c>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fd fe26 	bl	80027a4 <HAL_InitTick>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004b5c:	7afb      	ldrb	r3, [r7, #11]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	44020c00 	.word	0x44020c00
 8004b6c:	40022000 	.word	0x40022000
 8004b70:	08010af0 	.word	0x08010af0
 8004b74:	20000008 	.word	0x20000008
 8004b78:	2000000c 	.word	0x2000000c

08004b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b089      	sub	sp, #36	@ 0x24
 8004b80:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8004b82:	4b8c      	ldr	r3, [pc, #560]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x238>)
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	f003 0318 	and.w	r3, r3, #24
 8004b8a:	2b08      	cmp	r3, #8
 8004b8c:	d102      	bne.n	8004b94 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004b8e:	4b8a      	ldr	r3, [pc, #552]	@ (8004db8 <HAL_RCC_GetSysClockFreq+0x23c>)
 8004b90:	61fb      	str	r3, [r7, #28]
 8004b92:	e107      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b94:	4b87      	ldr	r3, [pc, #540]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x238>)
 8004b96:	69db      	ldr	r3, [r3, #28]
 8004b98:	f003 0318 	and.w	r3, r3, #24
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d112      	bne.n	8004bc6 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004ba0:	4b84      	ldr	r3, [pc, #528]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x238>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0320 	and.w	r3, r3, #32
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d009      	beq.n	8004bc0 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004bac:	4b81      	ldr	r3, [pc, #516]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x238>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	08db      	lsrs	r3, r3, #3
 8004bb2:	f003 0303 	and.w	r3, r3, #3
 8004bb6:	4a81      	ldr	r2, [pc, #516]	@ (8004dbc <HAL_RCC_GetSysClockFreq+0x240>)
 8004bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bbc:	61fb      	str	r3, [r7, #28]
 8004bbe:	e0f1      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004bc0:	4b7e      	ldr	r3, [pc, #504]	@ (8004dbc <HAL_RCC_GetSysClockFreq+0x240>)
 8004bc2:	61fb      	str	r3, [r7, #28]
 8004bc4:	e0ee      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bc6:	4b7b      	ldr	r3, [pc, #492]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x238>)
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	f003 0318 	and.w	r3, r3, #24
 8004bce:	2b10      	cmp	r3, #16
 8004bd0:	d102      	bne.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004bd2:	4b7b      	ldr	r3, [pc, #492]	@ (8004dc0 <HAL_RCC_GetSysClockFreq+0x244>)
 8004bd4:	61fb      	str	r3, [r7, #28]
 8004bd6:	e0e5      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bd8:	4b76      	ldr	r3, [pc, #472]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x238>)
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	f003 0318 	and.w	r3, r3, #24
 8004be0:	2b18      	cmp	r3, #24
 8004be2:	f040 80dd 	bne.w	8004da0 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004be6:	4b73      	ldr	r3, [pc, #460]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x238>)
 8004be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004bf0:	4b70      	ldr	r3, [pc, #448]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x238>)
 8004bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf4:	0a1b      	lsrs	r3, r3, #8
 8004bf6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bfa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004bfc:	4b6d      	ldr	r3, [pc, #436]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x238>)
 8004bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c00:	091b      	lsrs	r3, r3, #4
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004c08:	4b6a      	ldr	r3, [pc, #424]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x238>)
 8004c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004c0c:	08db      	lsrs	r3, r3, #3
 8004c0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	fb02 f303 	mul.w	r3, r2, r3
 8004c18:	ee07 3a90 	vmov	s15, r3
 8004c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c20:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f000 80b7 	beq.w	8004d9a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d003      	beq.n	8004c3a <HAL_RCC_GetSysClockFreq+0xbe>
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	2b03      	cmp	r3, #3
 8004c36:	d056      	beq.n	8004ce6 <HAL_RCC_GetSysClockFreq+0x16a>
 8004c38:	e077      	b.n	8004d2a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004c3a:	4b5e      	ldr	r3, [pc, #376]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x238>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0320 	and.w	r3, r3, #32
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d02d      	beq.n	8004ca2 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c46:	4b5b      	ldr	r3, [pc, #364]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x238>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	08db      	lsrs	r3, r3, #3
 8004c4c:	f003 0303 	and.w	r3, r3, #3
 8004c50:	4a5a      	ldr	r2, [pc, #360]	@ (8004dbc <HAL_RCC_GetSysClockFreq+0x240>)
 8004c52:	fa22 f303 	lsr.w	r3, r2, r3
 8004c56:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	ee07 3a90 	vmov	s15, r3
 8004c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	ee07 3a90 	vmov	s15, r3
 8004c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c70:	4b50      	ldr	r3, [pc, #320]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x238>)
 8004c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c78:	ee07 3a90 	vmov	s15, r3
 8004c7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c80:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c84:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8004dc4 <HAL_RCC_GetSysClockFreq+0x248>
 8004c88:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004c8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c94:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c9c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8004ca0:	e065      	b.n	8004d6e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	ee07 3a90 	vmov	s15, r3
 8004ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cac:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004dc8 <HAL_RCC_GetSysClockFreq+0x24c>
 8004cb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cb4:	4b3f      	ldr	r3, [pc, #252]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x238>)
 8004cb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cbc:	ee07 3a90 	vmov	s15, r3
 8004cc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cc4:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cc8:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004dc4 <HAL_RCC_GetSysClockFreq+0x248>
 8004ccc:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004cd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cd4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ce0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004ce4:	e043      	b.n	8004d6e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	ee07 3a90 	vmov	s15, r3
 8004cec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cf0:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004dcc <HAL_RCC_GetSysClockFreq+0x250>
 8004cf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cf8:	4b2e      	ldr	r3, [pc, #184]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x238>)
 8004cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d00:	ee07 3a90 	vmov	s15, r3
 8004d04:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d08:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d0c:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8004dc4 <HAL_RCC_GetSysClockFreq+0x248>
 8004d10:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d14:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d24:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8004d28:	e021      	b.n	8004d6e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	ee07 3a90 	vmov	s15, r3
 8004d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d34:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004dd0 <HAL_RCC_GetSysClockFreq+0x254>
 8004d38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x238>)
 8004d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d44:	ee07 3a90 	vmov	s15, r3
 8004d48:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d4c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d50:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8004dc4 <HAL_RCC_GetSysClockFreq+0x248>
 8004d54:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d58:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d60:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d68:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004d6c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8004d6e:	4b11      	ldr	r3, [pc, #68]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x238>)
 8004d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d72:	0a5b      	lsrs	r3, r3, #9
 8004d74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d78:	3301      	adds	r3, #1
 8004d7a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	ee07 3a90 	vmov	s15, r3
 8004d82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d86:	edd7 6a06 	vldr	s13, [r7, #24]
 8004d8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d92:	ee17 3a90 	vmov	r3, s15
 8004d96:	61fb      	str	r3, [r7, #28]
 8004d98:	e004      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61fb      	str	r3, [r7, #28]
 8004d9e:	e001      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004da0:	4b06      	ldr	r3, [pc, #24]	@ (8004dbc <HAL_RCC_GetSysClockFreq+0x240>)
 8004da2:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004da4:	69fb      	ldr	r3, [r7, #28]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3724      	adds	r7, #36	@ 0x24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	44020c00 	.word	0x44020c00
 8004db8:	003d0900 	.word	0x003d0900
 8004dbc:	03d09000 	.word	0x03d09000
 8004dc0:	007a1200 	.word	0x007a1200
 8004dc4:	46000000 	.word	0x46000000
 8004dc8:	4c742400 	.word	0x4c742400
 8004dcc:	4af42400 	.word	0x4af42400
 8004dd0:	4a742400 	.word	0x4a742400

08004dd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004dd8:	f7ff fed0 	bl	8004b7c <HAL_RCC_GetSysClockFreq>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	4b08      	ldr	r3, [pc, #32]	@ (8004e00 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004de0:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004de2:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004de6:	4907      	ldr	r1, [pc, #28]	@ (8004e04 <HAL_RCC_GetHCLKFreq+0x30>)
 8004de8:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004dea:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004dee:	fa22 f303 	lsr.w	r3, r2, r3
 8004df2:	4a05      	ldr	r2, [pc, #20]	@ (8004e08 <HAL_RCC_GetHCLKFreq+0x34>)
 8004df4:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004df6:	4b04      	ldr	r3, [pc, #16]	@ (8004e08 <HAL_RCC_GetHCLKFreq+0x34>)
 8004df8:	681b      	ldr	r3, [r3, #0]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	44020c00 	.word	0x44020c00
 8004e04:	08010af0 	.word	0x08010af0
 8004e08:	20000008 	.word	0x20000008

08004e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004e10:	f7ff ffe0 	bl	8004dd4 <HAL_RCC_GetHCLKFreq>
 8004e14:	4602      	mov	r2, r0
 8004e16:	4b06      	ldr	r3, [pc, #24]	@ (8004e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	091b      	lsrs	r3, r3, #4
 8004e1c:	f003 0307 	and.w	r3, r3, #7
 8004e20:	4904      	ldr	r1, [pc, #16]	@ (8004e34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e22:	5ccb      	ldrb	r3, [r1, r3]
 8004e24:	f003 031f 	and.w	r3, r3, #31
 8004e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	44020c00 	.word	0x44020c00
 8004e34:	08010b00 	.word	0x08010b00

08004e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8004e3c:	f7ff ffca 	bl	8004dd4 <HAL_RCC_GetHCLKFreq>
 8004e40:	4602      	mov	r2, r0
 8004e42:	4b06      	ldr	r3, [pc, #24]	@ (8004e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	0a1b      	lsrs	r3, r3, #8
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	4904      	ldr	r1, [pc, #16]	@ (8004e60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e4e:	5ccb      	ldrb	r3, [r1, r3]
 8004e50:	f003 031f 	and.w	r3, r3, #31
 8004e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	44020c00 	.word	0x44020c00
 8004e60:	08010b00 	.word	0x08010b00

08004e64 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8004e68:	f7ff ffb4 	bl	8004dd4 <HAL_RCC_GetHCLKFreq>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	4b06      	ldr	r3, [pc, #24]	@ (8004e88 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	0b1b      	lsrs	r3, r3, #12
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	4904      	ldr	r1, [pc, #16]	@ (8004e8c <HAL_RCC_GetPCLK3Freq+0x28>)
 8004e7a:	5ccb      	ldrb	r3, [r1, r3]
 8004e7c:	f003 031f 	and.w	r3, r3, #31
 8004e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	44020c00 	.word	0x44020c00
 8004e8c:	08010b00 	.word	0x08010b00

08004e90 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e94:	b0ba      	sub	sp, #232	@ 0xe8
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004ea8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb0:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8004eb4:	2500      	movs	r5, #0
 8004eb6:	ea54 0305 	orrs.w	r3, r4, r5
 8004eba:	d00b      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8004ebc:	4bcd      	ldr	r3, [pc, #820]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004ebe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ec2:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8004ec6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ecc:	4ac9      	ldr	r2, [pc, #804]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004ece:	430b      	orrs	r3, r1
 8004ed0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ed4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004edc:	f002 0801 	and.w	r8, r2, #1
 8004ee0:	f04f 0900 	mov.w	r9, #0
 8004ee4:	ea58 0309 	orrs.w	r3, r8, r9
 8004ee8:	d042      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8004eea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004eee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ef0:	2b05      	cmp	r3, #5
 8004ef2:	d823      	bhi.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xac>
 8004ef4:	a201      	add	r2, pc, #4	@ (adr r2, 8004efc <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8004ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efa:	bf00      	nop
 8004efc:	08004f45 	.word	0x08004f45
 8004f00:	08004f15 	.word	0x08004f15
 8004f04:	08004f29 	.word	0x08004f29
 8004f08:	08004f45 	.word	0x08004f45
 8004f0c:	08004f45 	.word	0x08004f45
 8004f10:	08004f45 	.word	0x08004f45
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f18:	3308      	adds	r3, #8
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f003 f90c 	bl	8008138 <RCCEx_PLL2_Config>
 8004f20:	4603      	mov	r3, r0
 8004f22:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8004f26:	e00e      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f2c:	3330      	adds	r3, #48	@ 0x30
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f003 f99a 	bl	8008268 <RCCEx_PLL3_Config>
 8004f34:	4603      	mov	r3, r0
 8004f36:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8004f3a:	e004      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004f42:	e000      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8004f44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f46:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10c      	bne.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004f4e:	4ba9      	ldr	r3, [pc, #676]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004f50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004f54:	f023 0107 	bic.w	r1, r3, #7
 8004f58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f5e:	4aa5      	ldr	r2, [pc, #660]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004f60:	430b      	orrs	r3, r1
 8004f62:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004f66:	e003      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f68:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f6c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f78:	f002 0a02 	and.w	sl, r2, #2
 8004f7c:	f04f 0b00 	mov.w	fp, #0
 8004f80:	ea5a 030b 	orrs.w	r3, sl, fp
 8004f84:	f000 8088 	beq.w	8005098 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8004f88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f8e:	2b28      	cmp	r3, #40	@ 0x28
 8004f90:	d868      	bhi.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004f92:	a201      	add	r2, pc, #4	@ (adr r2, 8004f98 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f98:	0800506d 	.word	0x0800506d
 8004f9c:	08005065 	.word	0x08005065
 8004fa0:	08005065 	.word	0x08005065
 8004fa4:	08005065 	.word	0x08005065
 8004fa8:	08005065 	.word	0x08005065
 8004fac:	08005065 	.word	0x08005065
 8004fb0:	08005065 	.word	0x08005065
 8004fb4:	08005065 	.word	0x08005065
 8004fb8:	0800503d 	.word	0x0800503d
 8004fbc:	08005065 	.word	0x08005065
 8004fc0:	08005065 	.word	0x08005065
 8004fc4:	08005065 	.word	0x08005065
 8004fc8:	08005065 	.word	0x08005065
 8004fcc:	08005065 	.word	0x08005065
 8004fd0:	08005065 	.word	0x08005065
 8004fd4:	08005065 	.word	0x08005065
 8004fd8:	08005051 	.word	0x08005051
 8004fdc:	08005065 	.word	0x08005065
 8004fe0:	08005065 	.word	0x08005065
 8004fe4:	08005065 	.word	0x08005065
 8004fe8:	08005065 	.word	0x08005065
 8004fec:	08005065 	.word	0x08005065
 8004ff0:	08005065 	.word	0x08005065
 8004ff4:	08005065 	.word	0x08005065
 8004ff8:	0800506d 	.word	0x0800506d
 8004ffc:	08005065 	.word	0x08005065
 8005000:	08005065 	.word	0x08005065
 8005004:	08005065 	.word	0x08005065
 8005008:	08005065 	.word	0x08005065
 800500c:	08005065 	.word	0x08005065
 8005010:	08005065 	.word	0x08005065
 8005014:	08005065 	.word	0x08005065
 8005018:	0800506d 	.word	0x0800506d
 800501c:	08005065 	.word	0x08005065
 8005020:	08005065 	.word	0x08005065
 8005024:	08005065 	.word	0x08005065
 8005028:	08005065 	.word	0x08005065
 800502c:	08005065 	.word	0x08005065
 8005030:	08005065 	.word	0x08005065
 8005034:	08005065 	.word	0x08005065
 8005038:	0800506d 	.word	0x0800506d
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800503c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005040:	3308      	adds	r3, #8
 8005042:	4618      	mov	r0, r3
 8005044:	f003 f878 	bl	8008138 <RCCEx_PLL2_Config>
 8005048:	4603      	mov	r3, r0
 800504a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 800504e:	e00e      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005050:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005054:	3330      	adds	r3, #48	@ 0x30
 8005056:	4618      	mov	r0, r3
 8005058:	f003 f906 	bl	8008268 <RCCEx_PLL3_Config>
 800505c:	4603      	mov	r3, r0
 800505e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8005062:	e004      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800506a:	e000      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 800506c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800506e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10c      	bne.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005076:	4b5f      	ldr	r3, [pc, #380]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005078:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800507c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005080:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005084:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005086:	4a5b      	ldr	r2, [pc, #364]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005088:	430b      	orrs	r3, r1
 800508a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800508e:	e003      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005090:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005094:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005098:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800509c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a0:	f002 0304 	and.w	r3, r2, #4
 80050a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80050a8:	2300      	movs	r3, #0
 80050aa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80050ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80050b2:	460b      	mov	r3, r1
 80050b4:	4313      	orrs	r3, r2
 80050b6:	d04e      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80050b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050be:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80050c2:	d02c      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80050c4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80050c8:	d825      	bhi.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80050ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050ce:	d028      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80050d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050d4:	d81f      	bhi.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80050d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80050d8:	d025      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80050da:	2bc0      	cmp	r3, #192	@ 0xc0
 80050dc:	d81b      	bhi.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80050de:	2b80      	cmp	r3, #128	@ 0x80
 80050e0:	d00f      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80050e2:	2b80      	cmp	r3, #128	@ 0x80
 80050e4:	d817      	bhi.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d01f      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80050ea:	2b40      	cmp	r3, #64	@ 0x40
 80050ec:	d113      	bne.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050f2:	3308      	adds	r3, #8
 80050f4:	4618      	mov	r0, r3
 80050f6:	f003 f81f 	bl	8008138 <RCCEx_PLL2_Config>
 80050fa:	4603      	mov	r3, r0
 80050fc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8005100:	e014      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005106:	3330      	adds	r3, #48	@ 0x30
 8005108:	4618      	mov	r0, r3
 800510a:	f003 f8ad 	bl	8008268 <RCCEx_PLL3_Config>
 800510e:	4603      	mov	r3, r0
 8005110:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8005114:	e00a      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800511c:	e006      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800511e:	bf00      	nop
 8005120:	e004      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005122:	bf00      	nop
 8005124:	e002      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005126:	bf00      	nop
 8005128:	e000      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800512a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800512c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10c      	bne.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005134:	4b2f      	ldr	r3, [pc, #188]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005136:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800513a:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800513e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005142:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005144:	4a2b      	ldr	r2, [pc, #172]	@ (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005146:	430b      	orrs	r3, r1
 8005148:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800514c:	e003      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800514e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005152:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005156:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800515a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515e:	f002 0308 	and.w	r3, r2, #8
 8005162:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005166:	2300      	movs	r3, #0
 8005168:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800516c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005170:	460b      	mov	r3, r1
 8005172:	4313      	orrs	r3, r2
 8005174:	d056      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8005176:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800517a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800517c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005180:	d031      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8005182:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005186:	d82a      	bhi.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005188:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800518c:	d02d      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800518e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005192:	d824      	bhi.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005194:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005198:	d029      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800519a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800519e:	d81e      	bhi.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80051a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051a4:	d011      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80051a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051aa:	d818      	bhi.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d023      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80051b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051b4:	d113      	bne.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80051b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051ba:	3308      	adds	r3, #8
 80051bc:	4618      	mov	r0, r3
 80051be:	f002 ffbb 	bl	8008138 <RCCEx_PLL2_Config>
 80051c2:	4603      	mov	r3, r0
 80051c4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 80051c8:	e017      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051ce:	3330      	adds	r3, #48	@ 0x30
 80051d0:	4618      	mov	r0, r3
 80051d2:	f003 f849 	bl	8008268 <RCCEx_PLL3_Config>
 80051d6:	4603      	mov	r3, r0
 80051d8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 80051dc:	e00d      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80051e4:	e009      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80051e6:	bf00      	nop
 80051e8:	e007      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80051ea:	bf00      	nop
 80051ec:	e005      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80051ee:	bf00      	nop
 80051f0:	e003      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80051f2:	bf00      	nop
 80051f4:	44020c00 	.word	0x44020c00
        break;
 80051f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051fa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10c      	bne.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005202:	4bb9      	ldr	r3, [pc, #740]	@ (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005204:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005208:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800520c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005210:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005212:	4ab5      	ldr	r2, [pc, #724]	@ (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005214:	430b      	orrs	r3, r1
 8005216:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800521a:	e003      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800521c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005220:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005224:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522c:	f002 0310 	and.w	r3, r2, #16
 8005230:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005234:	2300      	movs	r3, #0
 8005236:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800523a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800523e:	460b      	mov	r3, r1
 8005240:	4313      	orrs	r3, r2
 8005242:	d053      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8005244:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005248:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800524a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800524e:	d031      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8005250:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005254:	d82a      	bhi.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005256:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800525a:	d02d      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800525c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005260:	d824      	bhi.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005262:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005266:	d029      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8005268:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800526c:	d81e      	bhi.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800526e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005272:	d011      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005274:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005278:	d818      	bhi.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800527a:	2b00      	cmp	r3, #0
 800527c:	d020      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800527e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005282:	d113      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005284:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005288:	3308      	adds	r3, #8
 800528a:	4618      	mov	r0, r3
 800528c:	f002 ff54 	bl	8008138 <RCCEx_PLL2_Config>
 8005290:	4603      	mov	r3, r0
 8005292:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8005296:	e014      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005298:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800529c:	3330      	adds	r3, #48	@ 0x30
 800529e:	4618      	mov	r0, r3
 80052a0:	f002 ffe2 	bl	8008268 <RCCEx_PLL3_Config>
 80052a4:	4603      	mov	r3, r0
 80052a6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 80052aa:	e00a      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80052b2:	e006      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80052b4:	bf00      	nop
 80052b6:	e004      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80052b8:	bf00      	nop
 80052ba:	e002      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80052bc:	bf00      	nop
 80052be:	e000      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80052c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052c2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10c      	bne.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80052ca:	4b87      	ldr	r3, [pc, #540]	@ (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80052cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80052d0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80052d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052da:	4a83      	ldr	r2, [pc, #524]	@ (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80052dc:	430b      	orrs	r3, r1
 80052de:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80052e2:	e003      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052e4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80052e8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80052ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f4:	f002 0320 	and.w	r3, r2, #32
 80052f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052fc:	2300      	movs	r3, #0
 80052fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005302:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005306:	460b      	mov	r3, r1
 8005308:	4313      	orrs	r3, r2
 800530a:	d053      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 800530c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005312:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005316:	d031      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8005318:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800531c:	d82a      	bhi.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800531e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005322:	d02d      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005324:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005328:	d824      	bhi.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800532a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800532e:	d029      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8005330:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005334:	d81e      	bhi.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005336:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800533a:	d011      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800533c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005340:	d818      	bhi.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005342:	2b00      	cmp	r3, #0
 8005344:	d020      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8005346:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800534a:	d113      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800534c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005350:	3308      	adds	r3, #8
 8005352:	4618      	mov	r0, r3
 8005354:	f002 fef0 	bl	8008138 <RCCEx_PLL2_Config>
 8005358:	4603      	mov	r3, r0
 800535a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 800535e:	e014      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005360:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005364:	3330      	adds	r3, #48	@ 0x30
 8005366:	4618      	mov	r0, r3
 8005368:	f002 ff7e 	bl	8008268 <RCCEx_PLL3_Config>
 800536c:	4603      	mov	r3, r0
 800536e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8005372:	e00a      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800537a:	e006      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800537c:	bf00      	nop
 800537e:	e004      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005380:	bf00      	nop
 8005382:	e002      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005384:	bf00      	nop
 8005386:	e000      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005388:	bf00      	nop
    }

    if (ret == HAL_OK)
 800538a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10c      	bne.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8005392:	4b55      	ldr	r3, [pc, #340]	@ (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005394:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005398:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 800539c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053a2:	4a51      	ldr	r2, [pc, #324]	@ (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80053a4:	430b      	orrs	r3, r1
 80053a6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80053aa:	e003      	b.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80053b0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053bc:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80053c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80053c4:	2300      	movs	r3, #0
 80053c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80053ca:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80053ce:	460b      	mov	r3, r1
 80053d0:	4313      	orrs	r3, r2
 80053d2:	d053      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80053d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053da:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80053de:	d031      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80053e0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80053e4:	d82a      	bhi.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80053e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80053ea:	d02d      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80053ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80053f0:	d824      	bhi.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80053f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80053f6:	d029      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80053f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80053fc:	d81e      	bhi.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80053fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005402:	d011      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8005404:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005408:	d818      	bhi.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800540a:	2b00      	cmp	r3, #0
 800540c:	d020      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800540e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005412:	d113      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005414:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005418:	3308      	adds	r3, #8
 800541a:	4618      	mov	r0, r3
 800541c:	f002 fe8c 	bl	8008138 <RCCEx_PLL2_Config>
 8005420:	4603      	mov	r3, r0
 8005422:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005426:	e014      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005428:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800542c:	3330      	adds	r3, #48	@ 0x30
 800542e:	4618      	mov	r0, r3
 8005430:	f002 ff1a 	bl	8008268 <RCCEx_PLL3_Config>
 8005434:	4603      	mov	r3, r0
 8005436:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800543a:	e00a      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005442:	e006      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005444:	bf00      	nop
 8005446:	e004      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005448:	bf00      	nop
 800544a:	e002      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800544c:	bf00      	nop
 800544e:	e000      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005450:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005452:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10c      	bne.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800545a:	4b23      	ldr	r3, [pc, #140]	@ (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800545c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005460:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005464:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800546a:	4a1f      	ldr	r2, [pc, #124]	@ (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800546c:	430b      	orrs	r3, r1
 800546e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005472:	e003      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005474:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005478:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800547c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005484:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005488:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800548c:	2300      	movs	r3, #0
 800548e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005492:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005496:	460b      	mov	r3, r1
 8005498:	4313      	orrs	r3, r2
 800549a:	d03d      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800549c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80054a6:	d01b      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x650>
 80054a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80054ac:	d814      	bhi.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x648>
 80054ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054b2:	d017      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x654>
 80054b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054b8:	d80e      	bhi.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x648>
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d016      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x65c>
 80054be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054c2:	d109      	bne.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80054c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054c8:	3330      	adds	r3, #48	@ 0x30
 80054ca:	4618      	mov	r0, r3
 80054cc:	f002 fecc 	bl	8008268 <RCCEx_PLL3_Config>
 80054d0:	4603      	mov	r3, r0
 80054d2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80054d6:	e00a      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80054de:	e006      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 80054e0:	bf00      	nop
 80054e2:	e004      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 80054e4:	bf00      	nop
 80054e6:	e002      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x65e>
 80054e8:	44020c00 	.word	0x44020c00
        break;
 80054ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054ee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10c      	bne.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80054f6:	4b99      	ldr	r3, [pc, #612]	@ (800575c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80054f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80054fc:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005500:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005504:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005506:	4a95      	ldr	r2, [pc, #596]	@ (800575c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005508:	430b      	orrs	r3, r1
 800550a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800550e:	e003      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005510:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005514:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005518:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800551c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005520:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005524:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005528:	2300      	movs	r3, #0
 800552a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800552e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005532:	460b      	mov	r3, r1
 8005534:	4313      	orrs	r3, r2
 8005536:	d03b      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8005538:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800553c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800553e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005542:	d01b      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8005544:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005548:	d814      	bhi.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 800554a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800554e:	d017      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8005550:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005554:	d80e      	bhi.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8005556:	2b00      	cmp	r3, #0
 8005558:	d014      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 800555a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800555e:	d109      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005560:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005564:	3330      	adds	r3, #48	@ 0x30
 8005566:	4618      	mov	r0, r3
 8005568:	f002 fe7e 	bl	8008268 <RCCEx_PLL3_Config>
 800556c:	4603      	mov	r3, r0
 800556e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8005572:	e008      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800557a:	e004      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 800557c:	bf00      	nop
 800557e:	e002      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8005580:	bf00      	nop
 8005582:	e000      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8005584:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005586:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10c      	bne.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800558e:	4b73      	ldr	r3, [pc, #460]	@ (800575c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005590:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005594:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8005598:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800559c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800559e:	4a6f      	ldr	r2, [pc, #444]	@ (800575c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80055a0:	430b      	orrs	r3, r1
 80055a2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80055a6:	e003      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80055ac:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80055bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055c0:	2300      	movs	r3, #0
 80055c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80055c6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80055ca:	460b      	mov	r3, r1
 80055cc:	4313      	orrs	r3, r2
 80055ce:	d03d      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 80055d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055dc:	d01b      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x786>
 80055de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055e2:	d814      	bhi.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80055e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055e8:	d017      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x78a>
 80055ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055ee:	d80e      	bhi.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d014      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x78e>
 80055f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055f8:	d109      	bne.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80055fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055fe:	3330      	adds	r3, #48	@ 0x30
 8005600:	4618      	mov	r0, r3
 8005602:	f002 fe31 	bl	8008268 <RCCEx_PLL3_Config>
 8005606:	4603      	mov	r3, r0
 8005608:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 800560c:	e008      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005614:	e004      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8005616:	bf00      	nop
 8005618:	e002      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 800561a:	bf00      	nop
 800561c:	e000      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 800561e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005620:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10d      	bne.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005628:	4b4c      	ldr	r3, [pc, #304]	@ (800575c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800562a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800562e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005632:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005636:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800563a:	4a48      	ldr	r2, [pc, #288]	@ (800575c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800563c:	430b      	orrs	r3, r1
 800563e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005642:	e003      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005644:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005648:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800564c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005654:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005658:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800565c:	2300      	movs	r3, #0
 800565e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005662:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005666:	460b      	mov	r3, r1
 8005668:	4313      	orrs	r3, r2
 800566a:	d035      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 800566c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005670:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005674:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005678:	d015      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x816>
 800567a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800567e:	d80e      	bhi.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8005680:	2b00      	cmp	r3, #0
 8005682:	d012      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8005684:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005688:	d109      	bne.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800568a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800568e:	3330      	adds	r3, #48	@ 0x30
 8005690:	4618      	mov	r0, r3
 8005692:	f002 fde9 	bl	8008268 <RCCEx_PLL3_Config>
 8005696:	4603      	mov	r3, r0
 8005698:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800569c:	e006      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80056a4:	e002      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 80056a6:	bf00      	nop
 80056a8:	e000      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 80056aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10d      	bne.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80056b4:	4b29      	ldr	r3, [pc, #164]	@ (800575c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80056b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80056ba:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80056be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056c6:	4a25      	ldr	r2, [pc, #148]	@ (800575c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80056c8:	430b      	orrs	r3, r1
 80056ca:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80056ce:	e003      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80056d4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 80056d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e0:	2100      	movs	r1, #0
 80056e2:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 80056e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80056ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80056ee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80056f2:	460b      	mov	r3, r1
 80056f4:	4313      	orrs	r3, r2
 80056f6:	d037      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 80056f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005700:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005704:	d015      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8005706:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800570a:	d80e      	bhi.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x89a>
 800570c:	2b00      	cmp	r3, #0
 800570e:	d012      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8005710:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005714:	d109      	bne.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005716:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800571a:	3330      	adds	r3, #48	@ 0x30
 800571c:	4618      	mov	r0, r3
 800571e:	f002 fda3 	bl	8008268 <RCCEx_PLL3_Config>
 8005722:	4603      	mov	r3, r0
 8005724:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8005728:	e006      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005730:	e002      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8005732:	bf00      	nop
 8005734:	e000      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8005736:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005738:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10f      	bne.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8005740:	4b06      	ldr	r3, [pc, #24]	@ (800575c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005742:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005746:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800574a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800574e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005752:	4a02      	ldr	r2, [pc, #8]	@ (800575c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005754:	430b      	orrs	r3, r1
 8005756:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800575a:	e005      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 800575c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005760:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005764:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005768:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800576c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005770:	2100      	movs	r1, #0
 8005772:	67b9      	str	r1, [r7, #120]	@ 0x78
 8005774:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005778:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800577a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800577e:	460b      	mov	r3, r1
 8005780:	4313      	orrs	r3, r2
 8005782:	d00e      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8005784:	4bb8      	ldr	r3, [pc, #736]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005786:	69db      	ldr	r3, [r3, #28]
 8005788:	4ab7      	ldr	r2, [pc, #732]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800578a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800578e:	61d3      	str	r3, [r2, #28]
 8005790:	4bb5      	ldr	r3, [pc, #724]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005792:	69d9      	ldr	r1, [r3, #28]
 8005794:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005798:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800579c:	4ab2      	ldr	r2, [pc, #712]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800579e:	430b      	orrs	r3, r1
 80057a0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80057a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057aa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80057ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80057b0:	2300      	movs	r3, #0
 80057b2:	677b      	str	r3, [r7, #116]	@ 0x74
 80057b4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80057b8:	460b      	mov	r3, r1
 80057ba:	4313      	orrs	r3, r2
 80057bc:	d055      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80057be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057c6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80057ca:	d031      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 80057cc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80057d0:	d82a      	bhi.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80057d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057d6:	d02d      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 80057d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057dc:	d824      	bhi.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80057de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057e2:	d029      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 80057e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057e8:	d81e      	bhi.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80057ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057ee:	d011      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80057f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057f4:	d818      	bhi.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d020      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 80057fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057fe:	d113      	bne.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005800:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005804:	3308      	adds	r3, #8
 8005806:	4618      	mov	r0, r3
 8005808:	f002 fc96 	bl	8008138 <RCCEx_PLL2_Config>
 800580c:	4603      	mov	r3, r0
 800580e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005812:	e014      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005814:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005818:	3330      	adds	r3, #48	@ 0x30
 800581a:	4618      	mov	r0, r3
 800581c:	f002 fd24 	bl	8008268 <RCCEx_PLL3_Config>
 8005820:	4603      	mov	r3, r0
 8005822:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005826:	e00a      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800582e:	e006      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8005830:	bf00      	nop
 8005832:	e004      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8005834:	bf00      	nop
 8005836:	e002      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8005838:	bf00      	nop
 800583a:	e000      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 800583c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800583e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10d      	bne.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005846:	4b88      	ldr	r3, [pc, #544]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005848:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800584c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005850:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005854:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005858:	4a83      	ldr	r2, [pc, #524]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800585a:	430b      	orrs	r3, r1
 800585c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005860:	e003      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005862:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005866:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800586a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800586e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005872:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005876:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005878:	2300      	movs	r3, #0
 800587a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800587c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005880:	460b      	mov	r3, r1
 8005882:	4313      	orrs	r3, r2
 8005884:	d055      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8005886:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800588a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800588e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005892:	d031      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8005894:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005898:	d82a      	bhi.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800589a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800589e:	d02d      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 80058a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058a4:	d824      	bhi.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80058a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80058aa:	d029      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80058ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80058b0:	d81e      	bhi.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80058b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058b6:	d011      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80058b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058bc:	d818      	bhi.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d020      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80058c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058c6:	d113      	bne.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80058c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058cc:	3308      	adds	r3, #8
 80058ce:	4618      	mov	r0, r3
 80058d0:	f002 fc32 	bl	8008138 <RCCEx_PLL2_Config>
 80058d4:	4603      	mov	r3, r0
 80058d6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80058da:	e014      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80058dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058e0:	3330      	adds	r3, #48	@ 0x30
 80058e2:	4618      	mov	r0, r3
 80058e4:	f002 fcc0 	bl	8008268 <RCCEx_PLL3_Config>
 80058e8:	4603      	mov	r3, r0
 80058ea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80058ee:	e00a      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80058f6:	e006      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80058f8:	bf00      	nop
 80058fa:	e004      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80058fc:	bf00      	nop
 80058fe:	e002      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8005900:	bf00      	nop
 8005902:	e000      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8005904:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005906:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10d      	bne.n	800592a <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800590e:	4b56      	ldr	r3, [pc, #344]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005910:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005914:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005918:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800591c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005920:	4a51      	ldr	r2, [pc, #324]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005922:	430b      	orrs	r3, r1
 8005924:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005928:	e003      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800592a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800592e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005932:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800593e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005940:	2300      	movs	r3, #0
 8005942:	667b      	str	r3, [r7, #100]	@ 0x64
 8005944:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005948:	460b      	mov	r3, r1
 800594a:	4313      	orrs	r3, r2
 800594c:	d032      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800594e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005952:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005956:	2b05      	cmp	r3, #5
 8005958:	d80f      	bhi.n	800597a <HAL_RCCEx_PeriphCLKConfig+0xaea>
 800595a:	2b03      	cmp	r3, #3
 800595c:	d211      	bcs.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 800595e:	2b01      	cmp	r3, #1
 8005960:	d911      	bls.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8005962:	2b02      	cmp	r3, #2
 8005964:	d109      	bne.n	800597a <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005966:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800596a:	3308      	adds	r3, #8
 800596c:	4618      	mov	r0, r3
 800596e:	f002 fbe3 	bl	8008138 <RCCEx_PLL2_Config>
 8005972:	4603      	mov	r3, r0
 8005974:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005978:	e006      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005980:	e002      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8005982:	bf00      	nop
 8005984:	e000      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8005986:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005988:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10d      	bne.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005990:	4b35      	ldr	r3, [pc, #212]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005992:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005996:	f023 0107 	bic.w	r1, r3, #7
 800599a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800599e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80059a2:	4a31      	ldr	r2, [pc, #196]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80059a4:	430b      	orrs	r3, r1
 80059a6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80059aa:	e003      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80059b0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80059b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059bc:	2100      	movs	r1, #0
 80059be:	65b9      	str	r1, [r7, #88]	@ 0x58
 80059c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059c6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80059ca:	460b      	mov	r3, r1
 80059cc:	4313      	orrs	r3, r2
 80059ce:	d024      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80059d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d005      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 80059dc:	2b08      	cmp	r3, #8
 80059de:	d005      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80059e6:	e002      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 80059e8:	bf00      	nop
 80059ea:	e000      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 80059ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059ee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10d      	bne.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80059f6:	4b1c      	ldr	r3, [pc, #112]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80059f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80059fc:	f023 0108 	bic.w	r1, r3, #8
 8005a00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005a08:	4a17      	ldr	r2, [pc, #92]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005a0a:	430b      	orrs	r3, r1
 8005a0c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005a10:	e003      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a12:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a16:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a22:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005a26:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a28:	2300      	movs	r3, #0
 8005a2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a2c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005a30:	460b      	mov	r3, r1
 8005a32:	4313      	orrs	r3, r2
 8005a34:	f000 80b9 	beq.w	8005baa <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8005a38:	4b0c      	ldr	r3, [pc, #48]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3c:	4a0b      	ldr	r2, [pc, #44]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8005a3e:	f043 0301 	orr.w	r3, r3, #1
 8005a42:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a44:	f7fc ff38 	bl	80028b8 <HAL_GetTick>
 8005a48:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005a4c:	e010      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a4e:	f7fc ff33 	bl	80028b8 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d908      	bls.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005a64:	e00a      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8005a66:	bf00      	nop
 8005a68:	44020c00 	.word	0x44020c00
 8005a6c:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005a70:	4bba      	ldr	r3, [pc, #744]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 8005a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d0e8      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 8005a7c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f040 808e 	bne.w	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005a86:	4bb6      	ldr	r3, [pc, #728]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005a88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a90:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d023      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005a9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005aa0:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8005aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d01b      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005aac:	4bac      	ldr	r3, [pc, #688]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005aae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ab2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ab6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005aba:	4ba9      	ldr	r3, [pc, #676]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005abc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ac0:	4aa7      	ldr	r2, [pc, #668]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005ac2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ac6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005aca:	4ba5      	ldr	r3, [pc, #660]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005acc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ad0:	4aa3      	ldr	r2, [pc, #652]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005ad2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ad6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ada:	4aa1      	ldr	r2, [pc, #644]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ae0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d019      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af0:	f7fc fee2 	bl	80028b8 <HAL_GetTick>
 8005af4:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005af8:	e00d      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005afa:	f7fc fedd 	bl	80028b8 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b04:	1ad2      	subs	r2, r2, r3
 8005b06:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d903      	bls.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8005b14:	e006      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b16:	4b92      	ldr	r3, [pc, #584]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005b18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b1c:	f003 0302 	and.w	r3, r3, #2
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d0ea      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8005b24:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d135      	bne.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005b2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b30:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005b34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b3c:	d110      	bne.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 8005b3e:	4b88      	ldr	r3, [pc, #544]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005b40:	69db      	ldr	r3, [r3, #28]
 8005b42:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005b46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b4a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005b4e:	091b      	lsrs	r3, r3, #4
 8005b50:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005b54:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005b58:	4a81      	ldr	r2, [pc, #516]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005b5a:	430b      	orrs	r3, r1
 8005b5c:	61d3      	str	r3, [r2, #28]
 8005b5e:	e005      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005b60:	4b7f      	ldr	r3, [pc, #508]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005b62:	69db      	ldr	r3, [r3, #28]
 8005b64:	4a7e      	ldr	r2, [pc, #504]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005b66:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005b6a:	61d3      	str	r3, [r2, #28]
 8005b6c:	4b7c      	ldr	r3, [pc, #496]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005b6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b72:	4a7b      	ldr	r2, [pc, #492]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005b74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b78:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005b7c:	4b78      	ldr	r3, [pc, #480]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005b7e:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8005b82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b86:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005b8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b8e:	4a74      	ldr	r2, [pc, #464]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005b90:	430b      	orrs	r3, r1
 8005b92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005b96:	e008      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b98:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005b9c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8005ba0:	e003      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005ba6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005baa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb2:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005bb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bb8:	2300      	movs	r3, #0
 8005bba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bbc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	d035      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005bc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bce:	2b30      	cmp	r3, #48	@ 0x30
 8005bd0:	d014      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 8005bd2:	2b30      	cmp	r3, #48	@ 0x30
 8005bd4:	d80e      	bhi.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8005bd6:	2b20      	cmp	r3, #32
 8005bd8:	d012      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8005bda:	2b20      	cmp	r3, #32
 8005bdc:	d80a      	bhi.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d010      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 8005be2:	2b10      	cmp	r3, #16
 8005be4:	d106      	bne.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005be6:	4b5e      	ldr	r3, [pc, #376]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bea:	4a5d      	ldr	r2, [pc, #372]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005bec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bf0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8005bf2:	e008      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005bfa:	e004      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8005bfc:	bf00      	nop
 8005bfe:	e002      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8005c00:	bf00      	nop
 8005c02:	e000      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8005c04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c06:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10d      	bne.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005c0e:	4b54      	ldr	r3, [pc, #336]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005c10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005c14:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005c18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c20:	4a4f      	ldr	r2, [pc, #316]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005c22:	430b      	orrs	r3, r1
 8005c24:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005c28:	e003      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c2a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005c2e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005c32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3a:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005c3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c40:	2300      	movs	r3, #0
 8005c42:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c44:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005c48:	460b      	mov	r3, r1
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	d033      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8005c4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d002      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 8005c5a:	2b40      	cmp	r3, #64	@ 0x40
 8005c5c:	d007      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005c5e:	e010      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c60:	4b3f      	ldr	r3, [pc, #252]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c64:	4a3e      	ldr	r2, [pc, #248]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005c66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c6a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005c6c:	e00d      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c72:	3308      	adds	r3, #8
 8005c74:	4618      	mov	r0, r3
 8005c76:	f002 fa5f 	bl	8008138 <RCCEx_PLL2_Config>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005c80:	e003      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c8a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10d      	bne.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8005c92:	4b33      	ldr	r3, [pc, #204]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005c94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c98:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8005c9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ca0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ca4:	4a2e      	ldr	r2, [pc, #184]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005ca6:	430b      	orrs	r3, r1
 8005ca8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005cac:	e003      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cae:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005cb2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005cb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cbe:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cc8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005ccc:	460b      	mov	r3, r1
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	d04c      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8005cd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005cd6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	d827      	bhi.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8005cde:	a201      	add	r2, pc, #4	@ (adr r2, 8005ce4 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 8005ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce4:	08005cf9 	.word	0x08005cf9
 8005ce8:	08005d07 	.word	0x08005d07
 8005cec:	08005d1b 	.word	0x08005d1b
 8005cf0:	08005d37 	.word	0x08005d37
 8005cf4:	08005d37 	.word	0x08005d37
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cf8:	4b19      	ldr	r3, [pc, #100]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cfc:	4a18      	ldr	r2, [pc, #96]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005cfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d02:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005d04:	e018      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d0a:	3308      	adds	r3, #8
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f002 fa13 	bl	8008138 <RCCEx_PLL2_Config>
 8005d12:	4603      	mov	r3, r0
 8005d14:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005d18:	e00e      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d1e:	3330      	adds	r3, #48	@ 0x30
 8005d20:	4618      	mov	r0, r3
 8005d22:	f002 faa1 	bl	8008268 <RCCEx_PLL3_Config>
 8005d26:	4603      	mov	r3, r0
 8005d28:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005d2c:	e004      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005d34:	e000      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 8005d36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d38:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d111      	bne.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005d40:	4b07      	ldr	r3, [pc, #28]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d46:	f023 0107 	bic.w	r1, r3, #7
 8005d4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005d52:	4a03      	ldr	r2, [pc, #12]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005d54:	430b      	orrs	r3, r1
 8005d56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005d5a:	e007      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8005d5c:	44020800 	.word	0x44020800
 8005d60:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d64:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005d68:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005d6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d74:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005d78:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d7e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005d82:	460b      	mov	r3, r1
 8005d84:	4313      	orrs	r3, r2
 8005d86:	f000 8081 	beq.w	8005e8c <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8005d8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005d92:	2b20      	cmp	r3, #32
 8005d94:	d85f      	bhi.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8005d96:	a201      	add	r2, pc, #4	@ (adr r2, 8005d9c <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8005d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9c:	08005e21 	.word	0x08005e21
 8005da0:	08005e57 	.word	0x08005e57
 8005da4:	08005e57 	.word	0x08005e57
 8005da8:	08005e57 	.word	0x08005e57
 8005dac:	08005e57 	.word	0x08005e57
 8005db0:	08005e57 	.word	0x08005e57
 8005db4:	08005e57 	.word	0x08005e57
 8005db8:	08005e57 	.word	0x08005e57
 8005dbc:	08005e2f 	.word	0x08005e2f
 8005dc0:	08005e57 	.word	0x08005e57
 8005dc4:	08005e57 	.word	0x08005e57
 8005dc8:	08005e57 	.word	0x08005e57
 8005dcc:	08005e57 	.word	0x08005e57
 8005dd0:	08005e57 	.word	0x08005e57
 8005dd4:	08005e57 	.word	0x08005e57
 8005dd8:	08005e57 	.word	0x08005e57
 8005ddc:	08005e43 	.word	0x08005e43
 8005de0:	08005e57 	.word	0x08005e57
 8005de4:	08005e57 	.word	0x08005e57
 8005de8:	08005e57 	.word	0x08005e57
 8005dec:	08005e57 	.word	0x08005e57
 8005df0:	08005e57 	.word	0x08005e57
 8005df4:	08005e57 	.word	0x08005e57
 8005df8:	08005e57 	.word	0x08005e57
 8005dfc:	08005e5f 	.word	0x08005e5f
 8005e00:	08005e57 	.word	0x08005e57
 8005e04:	08005e57 	.word	0x08005e57
 8005e08:	08005e57 	.word	0x08005e57
 8005e0c:	08005e57 	.word	0x08005e57
 8005e10:	08005e57 	.word	0x08005e57
 8005e14:	08005e57 	.word	0x08005e57
 8005e18:	08005e57 	.word	0x08005e57
 8005e1c:	08005e5f 	.word	0x08005e5f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e20:	4bb9      	ldr	r3, [pc, #740]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e24:	4ab8      	ldr	r2, [pc, #736]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005e26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e2a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005e2c:	e018      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e32:	3308      	adds	r3, #8
 8005e34:	4618      	mov	r0, r3
 8005e36:	f002 f97f 	bl	8008138 <RCCEx_PLL2_Config>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005e40:	e00e      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e46:	3330      	adds	r3, #48	@ 0x30
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f002 fa0d 	bl	8008268 <RCCEx_PLL3_Config>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005e54:	e004      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005e5c:	e000      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 8005e5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e60:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10d      	bne.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005e68:	4ba7      	ldr	r3, [pc, #668]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e6e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005e72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005e7a:	4aa3      	ldr	r2, [pc, #652]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005e7c:	430b      	orrs	r3, r1
 8005e7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005e82:	e003      	b.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e84:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005e88:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005e8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e94:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005e98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e9e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	d04e      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8005ea8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005eac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005eb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005eb4:	d02e      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005eb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005eba:	d827      	bhi.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005ebc:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ebe:	d02b      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 8005ec0:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ec2:	d823      	bhi.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005ec4:	2b80      	cmp	r3, #128	@ 0x80
 8005ec6:	d017      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 8005ec8:	2b80      	cmp	r3, #128	@ 0x80
 8005eca:	d81f      	bhi.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x1046>
 8005ed0:	2b40      	cmp	r3, #64	@ 0x40
 8005ed2:	d007      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 8005ed4:	e01a      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ed6:	4b8c      	ldr	r3, [pc, #560]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eda:	4a8b      	ldr	r2, [pc, #556]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005edc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ee0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005ee2:	e01a      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ee4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ee8:	3308      	adds	r3, #8
 8005eea:	4618      	mov	r0, r3
 8005eec:	f002 f924 	bl	8008138 <RCCEx_PLL2_Config>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005ef6:	e010      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ef8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005efc:	3330      	adds	r3, #48	@ 0x30
 8005efe:	4618      	mov	r0, r3
 8005f00:	f002 f9b2 	bl	8008268 <RCCEx_PLL3_Config>
 8005f04:	4603      	mov	r3, r0
 8005f06:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005f0a:	e006      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005f12:	e002      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8005f14:	bf00      	nop
 8005f16:	e000      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8005f18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f1a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10d      	bne.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005f22:	4b79      	ldr	r3, [pc, #484]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f28:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8005f2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f34:	4974      	ldr	r1, [pc, #464]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005f36:	4313      	orrs	r3, r2
 8005f38:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005f3c:	e003      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f3e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005f42:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8005f46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005f52:	623b      	str	r3, [r7, #32]
 8005f54:	2300      	movs	r3, #0
 8005f56:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f58:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	d055      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8005f62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f66:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005f6a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005f6e:	d031      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8005f70:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005f74:	d82a      	bhi.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005f76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f7a:	d02d      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8005f7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f80:	d824      	bhi.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005f82:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005f86:	d029      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x114c>
 8005f88:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005f8c:	d81e      	bhi.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005f8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f92:	d011      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8005f94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f98:	d818      	bhi.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d020      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 8005f9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fa2:	d113      	bne.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005fa4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fa8:	3308      	adds	r3, #8
 8005faa:	4618      	mov	r0, r3
 8005fac:	f002 f8c4 	bl	8008138 <RCCEx_PLL2_Config>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005fb6:	e014      	b.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005fb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fbc:	3330      	adds	r3, #48	@ 0x30
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f002 f952 	bl	8008268 <RCCEx_PLL3_Config>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005fca:	e00a      	b.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005fd2:	e006      	b.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005fd4:	bf00      	nop
 8005fd6:	e004      	b.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005fd8:	bf00      	nop
 8005fda:	e002      	b.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005fdc:	bf00      	nop
 8005fde:	e000      	b.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005fe0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fe2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10d      	bne.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8005fea:	4b47      	ldr	r3, [pc, #284]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ff0:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 8005ff4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ff8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005ffc:	4942      	ldr	r1, [pc, #264]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006004:	e003      	b.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006006:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800600a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800600e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006016:	2100      	movs	r1, #0
 8006018:	61b9      	str	r1, [r7, #24]
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	61fb      	str	r3, [r7, #28]
 8006020:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006024:	460b      	mov	r3, r1
 8006026:	4313      	orrs	r3, r2
 8006028:	d03c      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800602a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800602e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006032:	2b03      	cmp	r3, #3
 8006034:	d81b      	bhi.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x11de>
 8006036:	a201      	add	r2, pc, #4	@ (adr r2, 800603c <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 8006038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603c:	08006077 	.word	0x08006077
 8006040:	0800604d 	.word	0x0800604d
 8006044:	0800605b 	.word	0x0800605b
 8006048:	08006077 	.word	0x08006077
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800604c:	4b2e      	ldr	r3, [pc, #184]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800604e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006050:	4a2d      	ldr	r2, [pc, #180]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8006052:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006056:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006058:	e00e      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800605a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800605e:	3308      	adds	r3, #8
 8006060:	4618      	mov	r0, r3
 8006062:	f002 f869 	bl	8008138 <RCCEx_PLL2_Config>
 8006066:	4603      	mov	r3, r0
 8006068:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 800606c:	e004      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006074:	e000      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 8006076:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006078:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10d      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006080:	4b21      	ldr	r3, [pc, #132]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8006082:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006086:	f023 0203 	bic.w	r2, r3, #3
 800608a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800608e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006092:	491d      	ldr	r1, [pc, #116]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8006094:	4313      	orrs	r3, r2
 8006096:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800609a:	e003      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800609c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80060a0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80060a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ac:	2100      	movs	r1, #0
 80060ae:	6139      	str	r1, [r7, #16]
 80060b0:	f003 0304 	and.w	r3, r3, #4
 80060b4:	617b      	str	r3, [r7, #20]
 80060b6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80060ba:	460b      	mov	r3, r1
 80060bc:	4313      	orrs	r3, r2
 80060be:	d03c      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80060c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060cc:	d00e      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80060ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060d2:	d815      	bhi.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d019      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x127c>
 80060d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060dc:	d110      	bne.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060de:	4b0a      	ldr	r3, [pc, #40]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80060e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e2:	4a09      	ldr	r2, [pc, #36]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80060e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060e8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80060ea:	e010      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80060ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060f0:	3308      	adds	r3, #8
 80060f2:	4618      	mov	r0, r3
 80060f4:	f002 f820 	bl	8008138 <RCCEx_PLL2_Config>
 80060f8:	4603      	mov	r3, r0
 80060fa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80060fe:	e006      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006106:	e002      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x127e>
 8006108:	44020c00 	.word	0x44020c00
        break;
 800610c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800610e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10d      	bne.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8006116:	4b3d      	ldr	r3, [pc, #244]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8006118:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800611c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006120:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006124:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006128:	4938      	ldr	r1, [pc, #224]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800612a:	4313      	orrs	r3, r2
 800612c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8006130:	e003      	b.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006132:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006136:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800613a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800613e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006142:	2100      	movs	r1, #0
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	f003 0310 	and.w	r3, r3, #16
 800614a:	60fb      	str	r3, [r7, #12]
 800614c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006150:	460b      	mov	r3, r1
 8006152:	4313      	orrs	r3, r2
 8006154:	d038      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8006156:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800615a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800615e:	2b30      	cmp	r3, #48	@ 0x30
 8006160:	d01b      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x130a>
 8006162:	2b30      	cmp	r3, #48	@ 0x30
 8006164:	d815      	bhi.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x1302>
 8006166:	2b10      	cmp	r3, #16
 8006168:	d002      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 800616a:	2b20      	cmp	r3, #32
 800616c:	d007      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 800616e:	e010      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006170:	4b26      	ldr	r3, [pc, #152]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8006172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006174:	4a25      	ldr	r2, [pc, #148]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8006176:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800617a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800617c:	e00e      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800617e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006182:	3330      	adds	r3, #48	@ 0x30
 8006184:	4618      	mov	r0, r3
 8006186:	f002 f86f 	bl	8008268 <RCCEx_PLL3_Config>
 800618a:	4603      	mov	r3, r0
 800618c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8006190:	e004      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006198:	e000      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 800619a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800619c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10d      	bne.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80061a4:	4b19      	ldr	r3, [pc, #100]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80061a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80061aa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80061ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80061b2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80061b6:	4915      	ldr	r1, [pc, #84]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80061b8:	4313      	orrs	r3, r2
 80061ba:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80061be:	e003      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80061c4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80061c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80061cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d0:	2100      	movs	r1, #0
 80061d2:	6039      	str	r1, [r7, #0]
 80061d4:	f003 0308 	and.w	r3, r3, #8
 80061d8:	607b      	str	r3, [r7, #4]
 80061da:	e9d7 1200 	ldrd	r1, r2, [r7]
 80061de:	460b      	mov	r3, r1
 80061e0:	4313      	orrs	r3, r2
 80061e2:	d00c      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80061e4:	4b09      	ldr	r3, [pc, #36]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80061e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80061ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80061ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80061f2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80061f6:	4905      	ldr	r1, [pc, #20]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 80061fe:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8006202:	4618      	mov	r0, r3
 8006204:	37e8      	adds	r7, #232	@ 0xe8
 8006206:	46bd      	mov	sp, r7
 8006208:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800620c:	44020c00 	.word	0x44020c00

08006210 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8006210:	b480      	push	{r7}
 8006212:	b08b      	sub	sp, #44	@ 0x2c
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006218:	4bae      	ldr	r3, [pc, #696]	@ (80064d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800621a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800621c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006220:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006222:	4bac      	ldr	r3, [pc, #688]	@ (80064d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006226:	f003 0303 	and.w	r3, r3, #3
 800622a:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800622c:	4ba9      	ldr	r3, [pc, #676]	@ (80064d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800622e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006230:	0a1b      	lsrs	r3, r3, #8
 8006232:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006236:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006238:	4ba6      	ldr	r3, [pc, #664]	@ (80064d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800623a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800623c:	091b      	lsrs	r3, r3, #4
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006244:	4ba3      	ldr	r3, [pc, #652]	@ (80064d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006248:	08db      	lsrs	r3, r3, #3
 800624a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	fb02 f303 	mul.w	r3, r2, r3
 8006254:	ee07 3a90 	vmov	s15, r3
 8006258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800625c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 8126 	beq.w	80064b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	2b03      	cmp	r3, #3
 800626c:	d053      	beq.n	8006316 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	2b03      	cmp	r3, #3
 8006272:	d86f      	bhi.n	8006354 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d003      	beq.n	8006282 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	2b02      	cmp	r3, #2
 800627e:	d02b      	beq.n	80062d8 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006280:	e068      	b.n	8006354 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006282:	4b94      	ldr	r3, [pc, #592]	@ (80064d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	08db      	lsrs	r3, r3, #3
 8006288:	f003 0303 	and.w	r3, r3, #3
 800628c:	4a92      	ldr	r2, [pc, #584]	@ (80064d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800628e:	fa22 f303 	lsr.w	r3, r2, r3
 8006292:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	ee07 3a90 	vmov	s15, r3
 800629a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	ee07 3a90 	vmov	s15, r3
 80062a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	ee07 3a90 	vmov	s15, r3
 80062b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062b6:	ed97 6a04 	vldr	s12, [r7, #16]
 80062ba:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80064dc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80062be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062d2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80062d6:	e068      	b.n	80063aa <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	ee07 3a90 	vmov	s15, r3
 80062de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e2:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80064e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80062e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ea:	6a3b      	ldr	r3, [r7, #32]
 80062ec:	ee07 3a90 	vmov	s15, r3
 80062f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062f4:	ed97 6a04 	vldr	s12, [r7, #16]
 80062f8:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80064dc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80062fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006300:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006304:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006308:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800630c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006310:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006314:	e049      	b.n	80063aa <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	ee07 3a90 	vmov	s15, r3
 800631c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006320:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80064e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8006324:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006328:	6a3b      	ldr	r3, [r7, #32]
 800632a:	ee07 3a90 	vmov	s15, r3
 800632e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006332:	ed97 6a04 	vldr	s12, [r7, #16]
 8006336:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80064dc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800633a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800633e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006342:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800634a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800634e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006352:	e02a      	b.n	80063aa <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006354:	4b5f      	ldr	r3, [pc, #380]	@ (80064d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	08db      	lsrs	r3, r3, #3
 800635a:	f003 0303 	and.w	r3, r3, #3
 800635e:	4a5e      	ldr	r2, [pc, #376]	@ (80064d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006360:	fa22 f303 	lsr.w	r3, r2, r3
 8006364:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	ee07 3a90 	vmov	s15, r3
 800636c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	ee07 3a90 	vmov	s15, r3
 8006376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800637a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800637e:	6a3b      	ldr	r3, [r7, #32]
 8006380:	ee07 3a90 	vmov	s15, r3
 8006384:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006388:	ed97 6a04 	vldr	s12, [r7, #16]
 800638c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80064dc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006390:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006394:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006398:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800639c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063a4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80063a8:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80063aa:	4b4a      	ldr	r3, [pc, #296]	@ (80064d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063b6:	d121      	bne.n	80063fc <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80063b8:	4b46      	ldr	r3, [pc, #280]	@ (80064d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80063ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d017      	beq.n	80063f4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80063c4:	4b43      	ldr	r3, [pc, #268]	@ (80064d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80063c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063c8:	0a5b      	lsrs	r3, r3, #9
 80063ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063ce:	ee07 3a90 	vmov	s15, r3
 80063d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80063d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063da:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80063de:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80063e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063ea:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	601a      	str	r2, [r3, #0]
 80063f2:	e006      	b.n	8006402 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	601a      	str	r2, [r3, #0]
 80063fa:	e002      	b.n	8006402 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006402:	4b34      	ldr	r3, [pc, #208]	@ (80064d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800640a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800640e:	d121      	bne.n	8006454 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006410:	4b30      	ldr	r3, [pc, #192]	@ (80064d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d017      	beq.n	800644c <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800641c:	4b2d      	ldr	r3, [pc, #180]	@ (80064d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800641e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006420:	0c1b      	lsrs	r3, r3, #16
 8006422:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006426:	ee07 3a90 	vmov	s15, r3
 800642a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800642e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006432:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006436:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800643a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800643e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006442:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	605a      	str	r2, [r3, #4]
 800644a:	e006      	b.n	800645a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	605a      	str	r2, [r3, #4]
 8006452:	e002      	b.n	800645a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800645a:	4b1e      	ldr	r3, [pc, #120]	@ (80064d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006462:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006466:	d121      	bne.n	80064ac <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006468:	4b1a      	ldr	r3, [pc, #104]	@ (80064d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800646a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800646c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d017      	beq.n	80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006474:	4b17      	ldr	r3, [pc, #92]	@ (80064d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006478:	0e1b      	lsrs	r3, r3, #24
 800647a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800647e:	ee07 3a90 	vmov	s15, r3
 8006482:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8006486:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800648a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800648e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800649a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80064a2:	e010      	b.n	80064c6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	609a      	str	r2, [r3, #8]
}
 80064aa:	e00c      	b.n	80064c6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	609a      	str	r2, [r3, #8]
}
 80064b2:	e008      	b.n	80064c6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	609a      	str	r2, [r3, #8]
}
 80064c6:	bf00      	nop
 80064c8:	372c      	adds	r7, #44	@ 0x2c
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	44020c00 	.word	0x44020c00
 80064d8:	03d09000 	.word	0x03d09000
 80064dc:	46000000 	.word	0x46000000
 80064e0:	4a742400 	.word	0x4a742400
 80064e4:	4af42400 	.word	0x4af42400

080064e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b08b      	sub	sp, #44	@ 0x2c
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80064f0:	4bae      	ldr	r3, [pc, #696]	@ (80067ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80064f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064f8:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80064fa:	4bac      	ldr	r3, [pc, #688]	@ (80067ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80064fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064fe:	f003 0303 	and.w	r3, r3, #3
 8006502:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8006504:	4ba9      	ldr	r3, [pc, #676]	@ (80067ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006508:	0a1b      	lsrs	r3, r3, #8
 800650a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800650e:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8006510:	4ba6      	ldr	r3, [pc, #664]	@ (80067ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006514:	091b      	lsrs	r3, r3, #4
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800651c:	4ba3      	ldr	r3, [pc, #652]	@ (80067ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800651e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006520:	08db      	lsrs	r3, r3, #3
 8006522:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	fb02 f303 	mul.w	r3, r2, r3
 800652c:	ee07 3a90 	vmov	s15, r3
 8006530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006534:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	2b00      	cmp	r3, #0
 800653c:	f000 8126 	beq.w	800678c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	2b03      	cmp	r3, #3
 8006544:	d053      	beq.n	80065ee <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	2b03      	cmp	r3, #3
 800654a:	d86f      	bhi.n	800662c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d003      	beq.n	800655a <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	2b02      	cmp	r3, #2
 8006556:	d02b      	beq.n	80065b0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8006558:	e068      	b.n	800662c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800655a:	4b94      	ldr	r3, [pc, #592]	@ (80067ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	08db      	lsrs	r3, r3, #3
 8006560:	f003 0303 	and.w	r3, r3, #3
 8006564:	4a92      	ldr	r2, [pc, #584]	@ (80067b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006566:	fa22 f303 	lsr.w	r3, r2, r3
 800656a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	ee07 3a90 	vmov	s15, r3
 8006572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	ee07 3a90 	vmov	s15, r3
 800657c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006580:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006584:	6a3b      	ldr	r3, [r7, #32]
 8006586:	ee07 3a90 	vmov	s15, r3
 800658a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800658e:	ed97 6a04 	vldr	s12, [r7, #16]
 8006592:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80067b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800659a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800659e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065aa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80065ae:	e068      	b.n	8006682 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	ee07 3a90 	vmov	s15, r3
 80065b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ba:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80067b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80065be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	ee07 3a90 	vmov	s15, r3
 80065c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065cc:	ed97 6a04 	vldr	s12, [r7, #16]
 80065d0:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80067b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80065d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065e8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80065ec:	e049      	b.n	8006682 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	ee07 3a90 	vmov	s15, r3
 80065f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065f8:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80067bc <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 80065fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	ee07 3a90 	vmov	s15, r3
 8006606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800660a:	ed97 6a04 	vldr	s12, [r7, #16]
 800660e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80067b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800661a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800661e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006626:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800662a:	e02a      	b.n	8006682 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800662c:	4b5f      	ldr	r3, [pc, #380]	@ (80067ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	08db      	lsrs	r3, r3, #3
 8006632:	f003 0303 	and.w	r3, r3, #3
 8006636:	4a5e      	ldr	r2, [pc, #376]	@ (80067b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006638:	fa22 f303 	lsr.w	r3, r2, r3
 800663c:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	ee07 3a90 	vmov	s15, r3
 8006644:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	ee07 3a90 	vmov	s15, r3
 800664e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006656:	6a3b      	ldr	r3, [r7, #32]
 8006658:	ee07 3a90 	vmov	s15, r3
 800665c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006660:	ed97 6a04 	vldr	s12, [r7, #16]
 8006664:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80067b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006668:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800666c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006670:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006674:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800667c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006680:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006682:	4b4a      	ldr	r3, [pc, #296]	@ (80067ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800668a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800668e:	d121      	bne.n	80066d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006690:	4b46      	ldr	r3, [pc, #280]	@ (80067ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006694:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d017      	beq.n	80066cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800669c:	4b43      	ldr	r3, [pc, #268]	@ (80067ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800669e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066a0:	0a5b      	lsrs	r3, r3, #9
 80066a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066a6:	ee07 3a90 	vmov	s15, r3
 80066aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80066ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80066b2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80066b6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80066ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066c2:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	601a      	str	r2, [r3, #0]
 80066ca:	e006      	b.n	80066da <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	601a      	str	r2, [r3, #0]
 80066d2:	e002      	b.n	80066da <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80066da:	4b34      	ldr	r3, [pc, #208]	@ (80067ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066e6:	d121      	bne.n	800672c <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80066e8:	4b30      	ldr	r3, [pc, #192]	@ (80067ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80066ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d017      	beq.n	8006724 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80066f4:	4b2d      	ldr	r3, [pc, #180]	@ (80067ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80066f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066f8:	0c1b      	lsrs	r3, r3, #16
 80066fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066fe:	ee07 3a90 	vmov	s15, r3
 8006702:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006706:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800670a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800670e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006712:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800671a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	605a      	str	r2, [r3, #4]
 8006722:	e006      	b.n	8006732 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	605a      	str	r2, [r3, #4]
 800672a:	e002      	b.n	8006732 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006732:	4b1e      	ldr	r3, [pc, #120]	@ (80067ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800673a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800673e:	d121      	bne.n	8006784 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006740:	4b1a      	ldr	r3, [pc, #104]	@ (80067ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006744:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d017      	beq.n	800677c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800674c:	4b17      	ldr	r3, [pc, #92]	@ (80067ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800674e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006750:	0e1b      	lsrs	r3, r3, #24
 8006752:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006756:	ee07 3a90 	vmov	s15, r3
 800675a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800675e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006762:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006766:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800676a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800676e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006772:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800677a:	e010      	b.n	800679e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	609a      	str	r2, [r3, #8]
}
 8006782:	e00c      	b.n	800679e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	609a      	str	r2, [r3, #8]
}
 800678a:	e008      	b.n	800679e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	609a      	str	r2, [r3, #8]
}
 800679e:	bf00      	nop
 80067a0:	372c      	adds	r7, #44	@ 0x2c
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	44020c00 	.word	0x44020c00
 80067b0:	03d09000 	.word	0x03d09000
 80067b4:	46000000 	.word	0x46000000
 80067b8:	4a742400 	.word	0x4a742400
 80067bc:	4af42400 	.word	0x4af42400

080067c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b08b      	sub	sp, #44	@ 0x2c
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80067c8:	4bae      	ldr	r3, [pc, #696]	@ (8006a84 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80067ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067d0:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80067d2:	4bac      	ldr	r3, [pc, #688]	@ (8006a84 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80067d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067d6:	f003 0303 	and.w	r3, r3, #3
 80067da:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80067dc:	4ba9      	ldr	r3, [pc, #676]	@ (8006a84 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80067de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067e0:	0a1b      	lsrs	r3, r3, #8
 80067e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067e6:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80067e8:	4ba6      	ldr	r3, [pc, #664]	@ (8006a84 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80067ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ec:	091b      	lsrs	r3, r3, #4
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80067f4:	4ba3      	ldr	r3, [pc, #652]	@ (8006a84 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80067f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067f8:	08db      	lsrs	r3, r3, #3
 80067fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	fb02 f303 	mul.w	r3, r2, r3
 8006804:	ee07 3a90 	vmov	s15, r3
 8006808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800680c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	2b00      	cmp	r3, #0
 8006814:	f000 8126 	beq.w	8006a64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	2b03      	cmp	r3, #3
 800681c:	d053      	beq.n	80068c6 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	2b03      	cmp	r3, #3
 8006822:	d86f      	bhi.n	8006904 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d003      	beq.n	8006832 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	2b02      	cmp	r3, #2
 800682e:	d02b      	beq.n	8006888 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8006830:	e068      	b.n	8006904 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006832:	4b94      	ldr	r3, [pc, #592]	@ (8006a84 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	08db      	lsrs	r3, r3, #3
 8006838:	f003 0303 	and.w	r3, r3, #3
 800683c:	4a92      	ldr	r2, [pc, #584]	@ (8006a88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800683e:	fa22 f303 	lsr.w	r3, r2, r3
 8006842:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	ee07 3a90 	vmov	s15, r3
 800684a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	ee07 3a90 	vmov	s15, r3
 8006854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006858:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800685c:	6a3b      	ldr	r3, [r7, #32]
 800685e:	ee07 3a90 	vmov	s15, r3
 8006862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006866:	ed97 6a04 	vldr	s12, [r7, #16]
 800686a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8006a8c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800686e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006876:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800687a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800687e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006882:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006886:	e068      	b.n	800695a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	ee07 3a90 	vmov	s15, r3
 800688e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006892:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8006a90 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8006896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800689a:	6a3b      	ldr	r3, [r7, #32]
 800689c:	ee07 3a90 	vmov	s15, r3
 80068a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068a4:	ed97 6a04 	vldr	s12, [r7, #16]
 80068a8:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006a8c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80068ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068c0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80068c4:	e049      	b.n	800695a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	ee07 3a90 	vmov	s15, r3
 80068cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068d0:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006a94 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 80068d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	ee07 3a90 	vmov	s15, r3
 80068de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068e2:	ed97 6a04 	vldr	s12, [r7, #16]
 80068e6:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8006a8c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80068ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068fe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006902:	e02a      	b.n	800695a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006904:	4b5f      	ldr	r3, [pc, #380]	@ (8006a84 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	08db      	lsrs	r3, r3, #3
 800690a:	f003 0303 	and.w	r3, r3, #3
 800690e:	4a5e      	ldr	r2, [pc, #376]	@ (8006a88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8006910:	fa22 f303 	lsr.w	r3, r2, r3
 8006914:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	ee07 3a90 	vmov	s15, r3
 800691c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	ee07 3a90 	vmov	s15, r3
 8006926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800692a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800692e:	6a3b      	ldr	r3, [r7, #32]
 8006930:	ee07 3a90 	vmov	s15, r3
 8006934:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006938:	ed97 6a04 	vldr	s12, [r7, #16]
 800693c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006a8c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8006940:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006944:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006948:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800694c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006954:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006958:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800695a:	4b4a      	ldr	r3, [pc, #296]	@ (8006a84 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006962:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006966:	d121      	bne.n	80069ac <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006968:	4b46      	ldr	r3, [pc, #280]	@ (8006a84 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800696a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800696c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006970:	2b00      	cmp	r3, #0
 8006972:	d017      	beq.n	80069a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006974:	4b43      	ldr	r3, [pc, #268]	@ (8006a84 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006978:	0a5b      	lsrs	r3, r3, #9
 800697a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800697e:	ee07 3a90 	vmov	s15, r3
 8006982:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8006986:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800698a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800698e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800699a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	601a      	str	r2, [r3, #0]
 80069a2:	e006      	b.n	80069b2 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	601a      	str	r2, [r3, #0]
 80069aa:	e002      	b.n	80069b2 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069b2:	4b34      	ldr	r3, [pc, #208]	@ (8006a84 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069be:	d121      	bne.n	8006a04 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80069c0:	4b30      	ldr	r3, [pc, #192]	@ (8006a84 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80069c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d017      	beq.n	80069fc <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80069cc:	4b2d      	ldr	r3, [pc, #180]	@ (8006a84 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80069ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069d0:	0c1b      	lsrs	r3, r3, #16
 80069d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069d6:	ee07 3a90 	vmov	s15, r3
 80069da:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80069de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80069e2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80069e6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80069ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069f2:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	605a      	str	r2, [r3, #4]
 80069fa:	e006      	b.n	8006a0a <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	605a      	str	r2, [r3, #4]
 8006a02:	e002      	b.n	8006a0a <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8006a84 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a16:	d121      	bne.n	8006a5c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006a18:	4b1a      	ldr	r3, [pc, #104]	@ (8006a84 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d017      	beq.n	8006a54 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006a24:	4b17      	ldr	r3, [pc, #92]	@ (8006a84 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a28:	0e1b      	lsrs	r3, r3, #24
 8006a2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a2e:	ee07 3a90 	vmov	s15, r3
 8006a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8006a36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a3a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006a3e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006a42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a4a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8006a52:	e010      	b.n	8006a76 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	609a      	str	r2, [r3, #8]
}
 8006a5a:	e00c      	b.n	8006a76 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	609a      	str	r2, [r3, #8]
}
 8006a62:	e008      	b.n	8006a76 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	609a      	str	r2, [r3, #8]
}
 8006a76:	bf00      	nop
 8006a78:	372c      	adds	r7, #44	@ 0x2c
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	44020c00 	.word	0x44020c00
 8006a88:	03d09000 	.word	0x03d09000
 8006a8c:	46000000 	.word	0x46000000
 8006a90:	4a742400 	.word	0x4a742400
 8006a94:	4af42400 	.word	0x4af42400

08006a98 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006a98:	b590      	push	{r4, r7, lr}
 8006a9a:	b08f      	sub	sp, #60	@ 0x3c
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006aa2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006aa6:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8006aaa:	4321      	orrs	r1, r4
 8006aac:	d150      	bne.n	8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006aae:	4b26      	ldr	r3, [pc, #152]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ab0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ab4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ab8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006aba:	4b23      	ldr	r3, [pc, #140]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006abc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ac0:	f003 0302 	and.w	r3, r3, #2
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d108      	bne.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ace:	d104      	bne.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006ad0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ad4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ad6:	f001 bb20 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006ada:	4b1b      	ldr	r3, [pc, #108]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006adc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ae0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ae4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ae8:	d108      	bne.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8006aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006af0:	d104      	bne.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8006af2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006af6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006af8:	f001 bb0f 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8006afc:	4b12      	ldr	r3, [pc, #72]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b08:	d119      	bne.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b10:	d115      	bne.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006b12:	4b0d      	ldr	r3, [pc, #52]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b14:	69db      	ldr	r3, [r3, #28]
 8006b16:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8006b1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b1e:	d30a      	bcc.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8006b20:	4b09      	ldr	r3, [pc, #36]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b22:	69db      	ldr	r3, [r3, #28]
 8006b24:	0a1b      	lsrs	r3, r3, #8
 8006b26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b2a:	4a08      	ldr	r2, [pc, #32]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b30:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006b32:	f001 baf2 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 8006b36:	2300      	movs	r3, #0
 8006b38:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006b3a:	f001 baee 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b42:	f001 baea 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006b46:	bf00      	nop
 8006b48:	44020c00 	.word	0x44020c00
 8006b4c:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8006b50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b54:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 8006b58:	ea50 0104 	orrs.w	r1, r0, r4
 8006b5c:	f000 8615 	beq.w	800778a <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 8006b60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b64:	2801      	cmp	r0, #1
 8006b66:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 8006b6a:	f081 82d3 	bcs.w	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006b6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b72:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8006b76:	ea50 0104 	orrs.w	r1, r0, r4
 8006b7a:	f000 84d8 	beq.w	800752e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8006b7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b82:	2801      	cmp	r0, #1
 8006b84:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8006b88:	f081 82c4 	bcs.w	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006b8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b90:	f1a1 0410 	sub.w	r4, r1, #16
 8006b94:	ea50 0104 	orrs.w	r1, r0, r4
 8006b98:	f001 8288 	beq.w	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 8006b9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ba0:	2801      	cmp	r0, #1
 8006ba2:	f171 0110 	sbcs.w	r1, r1, #16
 8006ba6:	f081 82b5 	bcs.w	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006baa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bae:	f1a1 0408 	sub.w	r4, r1, #8
 8006bb2:	ea50 0104 	orrs.w	r1, r0, r4
 8006bb6:	f001 81fe 	beq.w	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 8006bba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bbe:	2801      	cmp	r0, #1
 8006bc0:	f171 0108 	sbcs.w	r1, r1, #8
 8006bc4:	f081 82a6 	bcs.w	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006bc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bcc:	1f0c      	subs	r4, r1, #4
 8006bce:	ea50 0104 	orrs.w	r1, r0, r4
 8006bd2:	f000 8753 	beq.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 8006bd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bda:	2801      	cmp	r0, #1
 8006bdc:	f171 0104 	sbcs.w	r1, r1, #4
 8006be0:	f081 8298 	bcs.w	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006be4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006be8:	1e8c      	subs	r4, r1, #2
 8006bea:	ea50 0104 	orrs.w	r1, r0, r4
 8006bee:	f001 8173 	beq.w	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 8006bf2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bf6:	2801      	cmp	r0, #1
 8006bf8:	f171 0102 	sbcs.w	r1, r1, #2
 8006bfc:	f081 828a 	bcs.w	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006c00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c04:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8006c08:	4321      	orrs	r1, r4
 8006c0a:	f001 80fe 	beq.w	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8006c0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c12:	4ccb      	ldr	r4, [pc, #812]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8006c14:	42a0      	cmp	r0, r4
 8006c16:	f171 0100 	sbcs.w	r1, r1, #0
 8006c1a:	f081 827b 	bcs.w	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006c1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c22:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8006c26:	4321      	orrs	r1, r4
 8006c28:	f001 8076 	beq.w	8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 8006c2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c30:	4cc4      	ldr	r4, [pc, #784]	@ (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8006c32:	42a0      	cmp	r0, r4
 8006c34:	f171 0100 	sbcs.w	r1, r1, #0
 8006c38:	f081 826c 	bcs.w	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006c3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c40:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8006c44:	4321      	orrs	r1, r4
 8006c46:	f000 87b5 	beq.w	8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 8006c4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c4e:	4cbe      	ldr	r4, [pc, #760]	@ (8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 8006c50:	42a0      	cmp	r0, r4
 8006c52:	f171 0100 	sbcs.w	r1, r1, #0
 8006c56:	f081 825d 	bcs.w	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006c5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c5e:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8006c62:	4321      	orrs	r1, r4
 8006c64:	f000 8738 	beq.w	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8006c68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c6c:	4cb7      	ldr	r4, [pc, #732]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 8006c6e:	42a0      	cmp	r0, r4
 8006c70:	f171 0100 	sbcs.w	r1, r1, #0
 8006c74:	f081 824e 	bcs.w	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006c78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c7c:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8006c80:	4321      	orrs	r1, r4
 8006c82:	f001 81cd 	beq.w	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 8006c86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c8a:	4cb1      	ldr	r4, [pc, #708]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 8006c8c:	42a0      	cmp	r0, r4
 8006c8e:	f171 0100 	sbcs.w	r1, r1, #0
 8006c92:	f081 823f 	bcs.w	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006c96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c9a:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8006c9e:	4321      	orrs	r1, r4
 8006ca0:	f000 80d9 	beq.w	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006ca4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ca8:	4caa      	ldr	r4, [pc, #680]	@ (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 8006caa:	42a0      	cmp	r0, r4
 8006cac:	f171 0100 	sbcs.w	r1, r1, #0
 8006cb0:	f081 8230 	bcs.w	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006cb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cb8:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8006cbc:	4321      	orrs	r1, r4
 8006cbe:	f000 83da 	beq.w	8007476 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8006cc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cc6:	4ca4      	ldr	r4, [pc, #656]	@ (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 8006cc8:	42a0      	cmp	r0, r4
 8006cca:	f171 0100 	sbcs.w	r1, r1, #0
 8006cce:	f081 8221 	bcs.w	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006cd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cd6:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8006cda:	4321      	orrs	r1, r4
 8006cdc:	f000 8627 	beq.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 8006ce0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ce4:	4c9d      	ldr	r4, [pc, #628]	@ (8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 8006ce6:	42a0      	cmp	r0, r4
 8006ce8:	f171 0100 	sbcs.w	r1, r1, #0
 8006cec:	f081 8212 	bcs.w	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006cf0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cf4:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8006cf8:	4321      	orrs	r1, r4
 8006cfa:	f000 857a 	beq.w	80077f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8006cfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d02:	4c97      	ldr	r4, [pc, #604]	@ (8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 8006d04:	42a0      	cmp	r0, r4
 8006d06:	f171 0100 	sbcs.w	r1, r1, #0
 8006d0a:	f081 8203 	bcs.w	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006d0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d12:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8006d16:	4321      	orrs	r1, r4
 8006d18:	f000 84fb 	beq.w	8007712 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8006d1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d20:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8006d24:	f171 0100 	sbcs.w	r1, r1, #0
 8006d28:	f081 81f4 	bcs.w	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006d2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d30:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8006d34:	4321      	orrs	r1, r4
 8006d36:	f000 84a9 	beq.w	800768c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8006d3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d3e:	f248 0401 	movw	r4, #32769	@ 0x8001
 8006d42:	42a0      	cmp	r0, r4
 8006d44:	f171 0100 	sbcs.w	r1, r1, #0
 8006d48:	f081 81e4 	bcs.w	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006d4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d50:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8006d54:	4321      	orrs	r1, r4
 8006d56:	f000 8456 	beq.w	8007606 <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 8006d5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d5e:	f244 0401 	movw	r4, #16385	@ 0x4001
 8006d62:	42a0      	cmp	r0, r4
 8006d64:	f171 0100 	sbcs.w	r1, r1, #0
 8006d68:	f081 81d4 	bcs.w	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006d6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d70:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8006d74:	4321      	orrs	r1, r4
 8006d76:	f000 8403 	beq.w	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8006d7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d7e:	f242 0401 	movw	r4, #8193	@ 0x2001
 8006d82:	42a0      	cmp	r0, r4
 8006d84:	f171 0100 	sbcs.w	r1, r1, #0
 8006d88:	f081 81c4 	bcs.w	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006d8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d90:	2821      	cmp	r0, #33	@ 0x21
 8006d92:	f171 0100 	sbcs.w	r1, r1, #0
 8006d96:	d255      	bcs.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8006d98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d9c:	4301      	orrs	r1, r0
 8006d9e:	f001 81b9 	beq.w	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006da2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006da6:	1e42      	subs	r2, r0, #1
 8006da8:	f141 33ff 	adc.w	r3, r1, #4294967295
 8006dac:	2a20      	cmp	r2, #32
 8006dae:	f173 0100 	sbcs.w	r1, r3, #0
 8006db2:	f081 81af 	bcs.w	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006db6:	2a1f      	cmp	r2, #31
 8006db8:	f201 81ac 	bhi.w	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006dbc:	a101      	add	r1, pc, #4	@ (adr r1, 8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8006dbe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006dc2:	bf00      	nop
 8006dc4:	08006e9b 	.word	0x08006e9b
 8006dc8:	08006f99 	.word	0x08006f99
 8006dcc:	08008115 	.word	0x08008115
 8006dd0:	08007059 	.word	0x08007059
 8006dd4:	08008115 	.word	0x08008115
 8006dd8:	08008115 	.word	0x08008115
 8006ddc:	08008115 	.word	0x08008115
 8006de0:	08007129 	.word	0x08007129
 8006de4:	08008115 	.word	0x08008115
 8006de8:	08008115 	.word	0x08008115
 8006dec:	08008115 	.word	0x08008115
 8006df0:	08008115 	.word	0x08008115
 8006df4:	08008115 	.word	0x08008115
 8006df8:	08008115 	.word	0x08008115
 8006dfc:	08008115 	.word	0x08008115
 8006e00:	0800720d 	.word	0x0800720d
 8006e04:	08008115 	.word	0x08008115
 8006e08:	08008115 	.word	0x08008115
 8006e0c:	08008115 	.word	0x08008115
 8006e10:	08008115 	.word	0x08008115
 8006e14:	08008115 	.word	0x08008115
 8006e18:	08008115 	.word	0x08008115
 8006e1c:	08008115 	.word	0x08008115
 8006e20:	08008115 	.word	0x08008115
 8006e24:	08008115 	.word	0x08008115
 8006e28:	08008115 	.word	0x08008115
 8006e2c:	08008115 	.word	0x08008115
 8006e30:	08008115 	.word	0x08008115
 8006e34:	08008115 	.word	0x08008115
 8006e38:	08008115 	.word	0x08008115
 8006e3c:	08008115 	.word	0x08008115
 8006e40:	080072e3 	.word	0x080072e3
 8006e44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e48:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006e4c:	430b      	orrs	r3, r1
 8006e4e:	f000 82b3 	beq.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 8006e52:	f001 b95f 	b.w	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8006e56:	4b43      	ldr	r3, [pc, #268]	@ (8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006e58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e60:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8006e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d108      	bne.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e68:	f107 0320 	add.w	r3, r7, #32
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7ff f9cf 	bl	8006210 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e74:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006e76:	f001 b950 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8006e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e7c:	2b40      	cmp	r3, #64	@ 0x40
 8006e7e:	d108      	bne.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e80:	f107 0314 	add.w	r3, r7, #20
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7ff fb2f 	bl	80064e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e8e:	f001 b944 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8006e92:	2300      	movs	r3, #0
 8006e94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e96:	f001 b940 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006e9a:	4b32      	ldr	r3, [pc, #200]	@ (8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006e9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006ea0:	f003 0307 	and.w	r3, r3, #7
 8006ea4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d104      	bne.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8006eac:	f7fd ffc4 	bl	8004e38 <HAL_RCC_GetPCLK2Freq>
 8006eb0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006eb2:	f001 b932 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8006eb6:	4b2b      	ldr	r3, [pc, #172]	@ (8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ebe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ec2:	d10a      	bne.n	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8006ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d107      	bne.n	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006eca:	f107 0314 	add.w	r3, r7, #20
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7ff fb0a 	bl	80064e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ed8:	e05c      	b.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8006eda:	4b22      	ldr	r3, [pc, #136]	@ (8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ee2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ee6:	d10a      	bne.n	8006efe <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8006ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d107      	bne.n	8006efe <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006eee:	f107 0308 	add.w	r3, r7, #8
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7ff fc64 	bl	80067c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006efc:	e04a      	b.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006efe:	4b19      	ldr	r3, [pc, #100]	@ (8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0302 	and.w	r3, r3, #2
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d10c      	bne.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 8006f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f0c:	2b03      	cmp	r3, #3
 8006f0e:	d109      	bne.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f10:	4b14      	ldr	r3, [pc, #80]	@ (8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	08db      	lsrs	r3, r3, #3
 8006f16:	f003 0303 	and.w	r3, r3, #3
 8006f1a:	4a13      	ldr	r2, [pc, #76]	@ (8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 8006f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f20:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f22:	e037      	b.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8006f24:	4b0f      	ldr	r3, [pc, #60]	@ (8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f30:	d11e      	bne.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8006f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f34:	2b04      	cmp	r3, #4
 8006f36:	d11b      	bne.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 8006f38:	4b0c      	ldr	r3, [pc, #48]	@ (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 8006f3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f3c:	e02a      	b.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 8006f3e:	bf00      	nop
 8006f40:	40000001 	.word	0x40000001
 8006f44:	20000001 	.word	0x20000001
 8006f48:	10000001 	.word	0x10000001
 8006f4c:	08000001 	.word	0x08000001
 8006f50:	04000001 	.word	0x04000001
 8006f54:	00400001 	.word	0x00400001
 8006f58:	00200001 	.word	0x00200001
 8006f5c:	00040001 	.word	0x00040001
 8006f60:	00020001 	.word	0x00020001
 8006f64:	44020c00 	.word	0x44020c00
 8006f68:	03d09000 	.word	0x03d09000
 8006f6c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006f70:	4ba3      	ldr	r3, [pc, #652]	@ (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006f72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f76:	f003 0302 	and.w	r3, r3, #2
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d106      	bne.n	8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8006f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f80:	2b05      	cmp	r3, #5
 8006f82:	d103      	bne.n	8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 8006f84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f88:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f8a:	e003      	b.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f90:	f001 b8c3 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006f94:	f001 b8c1 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006f98:	4b99      	ldr	r3, [pc, #612]	@ (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006f9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006f9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006fa2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d104      	bne.n	8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006faa:	f7fd ff2f 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 8006fae:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006fb0:	f001 b8b3 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8006fb4:	4b92      	ldr	r3, [pc, #584]	@ (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fc0:	d10a      	bne.n	8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 8006fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc4:	2b08      	cmp	r3, #8
 8006fc6:	d107      	bne.n	8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fc8:	f107 0314 	add.w	r3, r7, #20
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7ff fa8b 	bl	80064e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fd6:	e03d      	b.n	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8006fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fda:	2b10      	cmp	r3, #16
 8006fdc:	d108      	bne.n	8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fde:	f107 0308 	add.w	r3, r7, #8
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7ff fbec 	bl	80067c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fec:	f001 b895 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006ff0:	4b83      	ldr	r3, [pc, #524]	@ (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 0302 	and.w	r3, r3, #2
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d10c      	bne.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8006ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffe:	2b18      	cmp	r3, #24
 8007000:	d109      	bne.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007002:	4b7f      	ldr	r3, [pc, #508]	@ (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	08db      	lsrs	r3, r3, #3
 8007008:	f003 0303 	and.w	r3, r3, #3
 800700c:	4a7d      	ldr	r2, [pc, #500]	@ (8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 800700e:	fa22 f303 	lsr.w	r3, r2, r3
 8007012:	637b      	str	r3, [r7, #52]	@ 0x34
 8007014:	e01e      	b.n	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8007016:	4b7a      	ldr	r3, [pc, #488]	@ (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800701e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007022:	d105      	bne.n	8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8007024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007026:	2b20      	cmp	r3, #32
 8007028:	d102      	bne.n	8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 800702a:	4b77      	ldr	r3, [pc, #476]	@ (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 800702c:	637b      	str	r3, [r7, #52]	@ 0x34
 800702e:	e011      	b.n	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007030:	4b73      	ldr	r3, [pc, #460]	@ (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007032:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007036:	f003 0302 	and.w	r3, r3, #2
 800703a:	2b02      	cmp	r3, #2
 800703c:	d106      	bne.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800703e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007040:	2b28      	cmp	r3, #40	@ 0x28
 8007042:	d103      	bne.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 8007044:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007048:	637b      	str	r3, [r7, #52]	@ 0x34
 800704a:	e003      	b.n	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 800704c:	2300      	movs	r3, #0
 800704e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007050:	f001 b863 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007054:	f001 b861 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007058:	4b69      	ldr	r3, [pc, #420]	@ (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800705a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800705e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007062:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007066:	2b00      	cmp	r3, #0
 8007068:	d104      	bne.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800706a:	f7fd fecf 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 800706e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007070:	f001 b853 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8007074:	4b62      	ldr	r3, [pc, #392]	@ (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800707c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007080:	d10a      	bne.n	8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8007082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007084:	2b40      	cmp	r3, #64	@ 0x40
 8007086:	d107      	bne.n	8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007088:	f107 0314 	add.w	r3, r7, #20
 800708c:	4618      	mov	r0, r3
 800708e:	f7ff fa2b 	bl	80064e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	637b      	str	r3, [r7, #52]	@ 0x34
 8007096:	e045      	b.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8007098:	4b59      	ldr	r3, [pc, #356]	@ (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070a4:	d10a      	bne.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 80070a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a8:	2b80      	cmp	r3, #128	@ 0x80
 80070aa:	d107      	bne.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070ac:	f107 0308 	add.w	r3, r7, #8
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7ff fb85 	bl	80067c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80070ba:	e033      	b.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80070bc:	4b50      	ldr	r3, [pc, #320]	@ (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0302 	and.w	r3, r3, #2
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d10c      	bne.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 80070c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80070cc:	d109      	bne.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80070ce:	4b4c      	ldr	r3, [pc, #304]	@ (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	08db      	lsrs	r3, r3, #3
 80070d4:	f003 0303 	and.w	r3, r3, #3
 80070d8:	4a4a      	ldr	r2, [pc, #296]	@ (8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80070da:	fa22 f303 	lsr.w	r3, r2, r3
 80070de:	637b      	str	r3, [r7, #52]	@ 0x34
 80070e0:	e020      	b.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80070e2:	4b47      	ldr	r3, [pc, #284]	@ (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070ee:	d106      	bne.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 80070f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070f6:	d102      	bne.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 80070f8:	4b43      	ldr	r3, [pc, #268]	@ (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80070fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80070fc:	e012      	b.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80070fe:	4b40      	ldr	r3, [pc, #256]	@ (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007100:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007104:	f003 0302 	and.w	r3, r3, #2
 8007108:	2b02      	cmp	r3, #2
 800710a:	d107      	bne.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800710c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007112:	d103      	bne.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 8007114:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007118:	637b      	str	r3, [r7, #52]	@ 0x34
 800711a:	e003      	b.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 800711c:	2300      	movs	r3, #0
 800711e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007120:	f000 bffb 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007124:	f000 bff9 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007128:	4b35      	ldr	r3, [pc, #212]	@ (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800712a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800712e:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8007132:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007136:	2b00      	cmp	r3, #0
 8007138:	d104      	bne.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800713a:	f7fd fe67 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 800713e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8007140:	f000 bfeb 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8007144:	4b2e      	ldr	r3, [pc, #184]	@ (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800714c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007150:	d10b      	bne.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 8007152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007154:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007158:	d107      	bne.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800715a:	f107 0314 	add.w	r3, r7, #20
 800715e:	4618      	mov	r0, r3
 8007160:	f7ff f9c2 	bl	80064e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	637b      	str	r3, [r7, #52]	@ 0x34
 8007168:	e047      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800716a:	4b25      	ldr	r3, [pc, #148]	@ (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007172:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007176:	d10b      	bne.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800717a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800717e:	d107      	bne.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007180:	f107 0308 	add.w	r3, r7, #8
 8007184:	4618      	mov	r0, r3
 8007186:	f7ff fb1b 	bl	80067c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	637b      	str	r3, [r7, #52]	@ 0x34
 800718e:	e034      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007190:	4b1b      	ldr	r3, [pc, #108]	@ (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 0302 	and.w	r3, r3, #2
 8007198:	2b02      	cmp	r3, #2
 800719a:	d10d      	bne.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800719c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80071a2:	d109      	bne.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80071a4:	4b16      	ldr	r3, [pc, #88]	@ (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	08db      	lsrs	r3, r3, #3
 80071aa:	f003 0303 	and.w	r3, r3, #3
 80071ae:	4a15      	ldr	r2, [pc, #84]	@ (8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80071b0:	fa22 f303 	lsr.w	r3, r2, r3
 80071b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80071b6:	e020      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 80071b8:	4b11      	ldr	r3, [pc, #68]	@ (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80071c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071c4:	d106      	bne.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80071c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071cc:	d102      	bne.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 80071ce:	4b0e      	ldr	r3, [pc, #56]	@ (8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80071d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80071d2:	e012      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80071d4:	4b0a      	ldr	r3, [pc, #40]	@ (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80071d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80071da:	f003 0302 	and.w	r3, r3, #2
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d107      	bne.n	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 80071e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80071e8:	d103      	bne.n	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 80071ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80071f0:	e003      	b.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 80071f2:	2300      	movs	r3, #0
 80071f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071f6:	f000 bf90 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80071fa:	f000 bf8e 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80071fe:	bf00      	nop
 8007200:	44020c00 	.word	0x44020c00
 8007204:	03d09000 	.word	0x03d09000
 8007208:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800720c:	4ba5      	ldr	r3, [pc, #660]	@ (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800720e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007212:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007216:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800721a:	2b00      	cmp	r3, #0
 800721c:	d104      	bne.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800721e:	f7fd fdf5 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 8007222:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8007224:	f000 bf79 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8007228:	4b9e      	ldr	r3, [pc, #632]	@ (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007230:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007234:	d10b      	bne.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8007236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007238:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800723c:	d107      	bne.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800723e:	f107 0314 	add.w	r3, r7, #20
 8007242:	4618      	mov	r0, r3
 8007244:	f7ff f950 	bl	80064e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	637b      	str	r3, [r7, #52]	@ 0x34
 800724c:	e047      	b.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800724e:	4b95      	ldr	r3, [pc, #596]	@ (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007256:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800725a:	d10b      	bne.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 800725c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800725e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007262:	d107      	bne.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007264:	f107 0308 	add.w	r3, r7, #8
 8007268:	4618      	mov	r0, r3
 800726a:	f7ff faa9 	bl	80067c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	637b      	str	r3, [r7, #52]	@ 0x34
 8007272:	e034      	b.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007274:	4b8b      	ldr	r3, [pc, #556]	@ (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 0302 	and.w	r3, r3, #2
 800727c:	2b02      	cmp	r3, #2
 800727e:	d10d      	bne.n	800729c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 8007280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007282:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007286:	d109      	bne.n	800729c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007288:	4b86      	ldr	r3, [pc, #536]	@ (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	08db      	lsrs	r3, r3, #3
 800728e:	f003 0303 	and.w	r3, r3, #3
 8007292:	4a85      	ldr	r2, [pc, #532]	@ (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8007294:	fa22 f303 	lsr.w	r3, r2, r3
 8007298:	637b      	str	r3, [r7, #52]	@ 0x34
 800729a:	e020      	b.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800729c:	4b81      	ldr	r3, [pc, #516]	@ (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072a8:	d106      	bne.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80072aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072b0:	d102      	bne.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 80072b2:	4b7e      	ldr	r3, [pc, #504]	@ (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 80072b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80072b6:	e012      	b.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80072b8:	4b7a      	ldr	r3, [pc, #488]	@ (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80072ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072be:	f003 0302 	and.w	r3, r3, #2
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d107      	bne.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 80072c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80072cc:	d103      	bne.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 80072ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80072d4:	e003      	b.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 80072d6:	2300      	movs	r3, #0
 80072d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072da:	f000 bf1e 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80072de:	f000 bf1c 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 80072e2:	4b70      	ldr	r3, [pc, #448]	@ (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80072e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80072e8:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 80072ec:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 80072ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d104      	bne.n	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80072f4:	f7fd fd8a 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 80072f8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 80072fa:	f000 bf0e 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 80072fe:	4b69      	ldr	r3, [pc, #420]	@ (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007306:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800730a:	d10b      	bne.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800730c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007312:	d107      	bne.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007314:	f107 0314 	add.w	r3, r7, #20
 8007318:	4618      	mov	r0, r3
 800731a:	f7ff f8e5 	bl	80064e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	637b      	str	r3, [r7, #52]	@ 0x34
 8007322:	e047      	b.n	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8007324:	4b5f      	ldr	r3, [pc, #380]	@ (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800732c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007330:	d10b      	bne.n	800734a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8007332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007334:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007338:	d107      	bne.n	800734a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800733a:	f107 0308 	add.w	r3, r7, #8
 800733e:	4618      	mov	r0, r3
 8007340:	f7ff fa3e 	bl	80067c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	637b      	str	r3, [r7, #52]	@ 0x34
 8007348:	e034      	b.n	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800734a:	4b56      	ldr	r3, [pc, #344]	@ (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 0302 	and.w	r3, r3, #2
 8007352:	2b02      	cmp	r3, #2
 8007354:	d10d      	bne.n	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8007356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007358:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800735c:	d109      	bne.n	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800735e:	4b51      	ldr	r3, [pc, #324]	@ (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	08db      	lsrs	r3, r3, #3
 8007364:	f003 0303 	and.w	r3, r3, #3
 8007368:	4a4f      	ldr	r2, [pc, #316]	@ (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 800736a:	fa22 f303 	lsr.w	r3, r2, r3
 800736e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007370:	e020      	b.n	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8007372:	4b4c      	ldr	r3, [pc, #304]	@ (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800737a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800737e:	d106      	bne.n	800738e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 8007380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007382:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007386:	d102      	bne.n	800738e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 8007388:	4b48      	ldr	r3, [pc, #288]	@ (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 800738a:	637b      	str	r3, [r7, #52]	@ 0x34
 800738c:	e012      	b.n	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800738e:	4b45      	ldr	r3, [pc, #276]	@ (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007390:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007394:	f003 0302 	and.w	r3, r3, #2
 8007398:	2b02      	cmp	r3, #2
 800739a:	d107      	bne.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800739c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800739e:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80073a2:	d103      	bne.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 80073a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80073aa:	e003      	b.n	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 80073ac:	2300      	movs	r3, #0
 80073ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073b0:	f000 beb3 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80073b4:	f000 beb1 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80073b8:	4b3a      	ldr	r3, [pc, #232]	@ (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80073ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80073be:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80073c2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80073c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d104      	bne.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80073ca:	f7fd fd4b 	bl	8004e64 <HAL_RCC_GetPCLK3Freq>
 80073ce:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80073d0:	f000 bea3 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80073d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80073da:	d108      	bne.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073dc:	f107 0314 	add.w	r3, r7, #20
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7ff f881 	bl	80064e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073ea:	f000 be96 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 80073ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80073f4:	d108      	bne.n	8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073f6:	f107 0308 	add.w	r3, r7, #8
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7ff f9e0 	bl	80067c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007404:	f000 be89 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007408:	4b26      	ldr	r3, [pc, #152]	@ (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0302 	and.w	r3, r3, #2
 8007410:	2b02      	cmp	r3, #2
 8007412:	d10d      	bne.n	8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8007414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007416:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800741a:	d109      	bne.n	8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800741c:	4b21      	ldr	r3, [pc, #132]	@ (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	08db      	lsrs	r3, r3, #3
 8007422:	f003 0303 	and.w	r3, r3, #3
 8007426:	4a20      	ldr	r2, [pc, #128]	@ (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8007428:	fa22 f303 	lsr.w	r3, r2, r3
 800742c:	637b      	str	r3, [r7, #52]	@ 0x34
 800742e:	e020      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8007430:	4b1c      	ldr	r3, [pc, #112]	@ (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007438:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800743c:	d106      	bne.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 800743e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007440:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007444:	d102      	bne.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 8007446:	4b19      	ldr	r3, [pc, #100]	@ (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8007448:	637b      	str	r3, [r7, #52]	@ 0x34
 800744a:	e012      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800744c:	4b15      	ldr	r3, [pc, #84]	@ (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800744e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007452:	f003 0302 	and.w	r3, r3, #2
 8007456:	2b02      	cmp	r3, #2
 8007458:	d107      	bne.n	800746a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 800745a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800745c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007460:	d103      	bne.n	800746a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 8007462:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007466:	637b      	str	r3, [r7, #52]	@ 0x34
 8007468:	e003      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 800746a:	2300      	movs	r3, #0
 800746c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800746e:	f000 be54 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007472:	f000 be52 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007476:	4b0b      	ldr	r3, [pc, #44]	@ (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007478:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800747c:	f003 0307 	and.w	r3, r3, #7
 8007480:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007484:	2b00      	cmp	r3, #0
 8007486:	d104      	bne.n	8007492 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8007488:	f7fd fca4 	bl	8004dd4 <HAL_RCC_GetHCLKFreq>
 800748c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800748e:	f000 be44 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007494:	2b01      	cmp	r3, #1
 8007496:	d10b      	bne.n	80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 8007498:	f7fd fb70 	bl	8004b7c <HAL_RCC_GetSysClockFreq>
 800749c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800749e:	f000 be3c 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80074a2:	bf00      	nop
 80074a4:	44020c00 	.word	0x44020c00
 80074a8:	03d09000 	.word	0x03d09000
 80074ac:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80074b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d108      	bne.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074b6:	f107 0314 	add.w	r3, r7, #20
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7ff f814 	bl	80064e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074c4:	f000 be29 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80074c8:	4b9f      	ldr	r3, [pc, #636]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074d4:	d105      	bne.n	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 80074d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d8:	2b03      	cmp	r3, #3
 80074da:	d102      	bne.n	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 80074dc:	4b9b      	ldr	r3, [pc, #620]	@ (800774c <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 80074de:	637b      	str	r3, [r7, #52]	@ 0x34
 80074e0:	e023      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80074e2:	4b99      	ldr	r3, [pc, #612]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0302 	and.w	r3, r3, #2
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d10c      	bne.n	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80074ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f0:	2b04      	cmp	r3, #4
 80074f2:	d109      	bne.n	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80074f4:	4b94      	ldr	r3, [pc, #592]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	08db      	lsrs	r3, r3, #3
 80074fa:	f003 0303 	and.w	r3, r3, #3
 80074fe:	4a94      	ldr	r2, [pc, #592]	@ (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8007500:	fa22 f303 	lsr.w	r3, r2, r3
 8007504:	637b      	str	r3, [r7, #52]	@ 0x34
 8007506:	e010      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8007508:	4b8f      	ldr	r3, [pc, #572]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007510:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007514:	d105      	bne.n	8007522 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 8007516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007518:	2b05      	cmp	r3, #5
 800751a:	d102      	bne.n	8007522 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 800751c:	4b8d      	ldr	r3, [pc, #564]	@ (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 800751e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007520:	e003      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 8007522:	2300      	movs	r3, #0
 8007524:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007526:	f000 bdf8 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800752a:	f000 bdf6 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800752e:	4b86      	ldr	r3, [pc, #536]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007530:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007534:	f003 0308 	and.w	r3, r3, #8
 8007538:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800753a:	4b83      	ldr	r3, [pc, #524]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800753c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007540:	f003 0302 	and.w	r3, r3, #2
 8007544:	2b02      	cmp	r3, #2
 8007546:	d106      	bne.n	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8007548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800754a:	2b00      	cmp	r3, #0
 800754c:	d103      	bne.n	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 800754e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007552:	637b      	str	r3, [r7, #52]	@ 0x34
 8007554:	e012      	b.n	800757c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8007556:	4b7c      	ldr	r3, [pc, #496]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007558:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800755c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007560:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007564:	d106      	bne.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 8007566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007568:	2b08      	cmp	r3, #8
 800756a:	d103      	bne.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 800756c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007570:	637b      	str	r3, [r7, #52]	@ 0x34
 8007572:	e003      	b.n	800757c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8007574:	2300      	movs	r3, #0
 8007576:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8007578:	f000 bdcf 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800757c:	f000 bdcd 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007580:	4b71      	ldr	r3, [pc, #452]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007582:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007586:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800758a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800758c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758e:	2b00      	cmp	r3, #0
 8007590:	d104      	bne.n	800759c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007592:	f7fd fc3b 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 8007596:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007598:	f000 bdbf 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800759c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800759e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075a2:	d108      	bne.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075a4:	f107 0308 	add.w	r3, r7, #8
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7ff f909 	bl	80067c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075b2:	f000 bdb2 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80075b6:	4b64      	ldr	r3, [pc, #400]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 0302 	and.w	r3, r3, #2
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d10d      	bne.n	80075de <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 80075c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075c8:	d109      	bne.n	80075de <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80075ca:	4b5f      	ldr	r3, [pc, #380]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	08db      	lsrs	r3, r3, #3
 80075d0:	f003 0303 	and.w	r3, r3, #3
 80075d4:	4a5e      	ldr	r2, [pc, #376]	@ (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80075d6:	fa22 f303 	lsr.w	r3, r2, r3
 80075da:	637b      	str	r3, [r7, #52]	@ 0x34
 80075dc:	e011      	b.n	8007602 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 80075de:	4b5a      	ldr	r3, [pc, #360]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075ea:	d106      	bne.n	80075fa <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 80075ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80075f2:	d102      	bne.n	80075fa <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 80075f4:	4b57      	ldr	r3, [pc, #348]	@ (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80075f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80075f8:	e003      	b.n	8007602 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 80075fa:	2300      	movs	r3, #0
 80075fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075fe:	f000 bd8c 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007602:	f000 bd8a 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007606:	4b50      	ldr	r3, [pc, #320]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007608:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800760c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007610:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007614:	2b00      	cmp	r3, #0
 8007616:	d104      	bne.n	8007622 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007618:	f7fd fbf8 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 800761c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800761e:	f000 bd7c 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8007622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007624:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007628:	d108      	bne.n	800763c <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800762a:	f107 0308 	add.w	r3, r7, #8
 800762e:	4618      	mov	r0, r3
 8007630:	f7ff f8c6 	bl	80067c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007638:	f000 bd6f 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800763c:	4b42      	ldr	r3, [pc, #264]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0302 	and.w	r3, r3, #2
 8007644:	2b02      	cmp	r3, #2
 8007646:	d10d      	bne.n	8007664 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 8007648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800764e:	d109      	bne.n	8007664 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007650:	4b3d      	ldr	r3, [pc, #244]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	08db      	lsrs	r3, r3, #3
 8007656:	f003 0303 	and.w	r3, r3, #3
 800765a:	4a3d      	ldr	r2, [pc, #244]	@ (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 800765c:	fa22 f303 	lsr.w	r3, r2, r3
 8007660:	637b      	str	r3, [r7, #52]	@ 0x34
 8007662:	e011      	b.n	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8007664:	4b38      	ldr	r3, [pc, #224]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800766c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007670:	d106      	bne.n	8007680 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 8007672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007674:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007678:	d102      	bne.n	8007680 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 800767a:	4b36      	ldr	r3, [pc, #216]	@ (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 800767c:	637b      	str	r3, [r7, #52]	@ 0x34
 800767e:	e003      	b.n	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 8007680:	2300      	movs	r3, #0
 8007682:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007684:	f000 bd49 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007688:	f000 bd47 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800768c:	4b2e      	ldr	r3, [pc, #184]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800768e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007692:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007696:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8007698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800769a:	2b00      	cmp	r3, #0
 800769c:	d104      	bne.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800769e:	f7fd fbe1 	bl	8004e64 <HAL_RCC_GetPCLK3Freq>
 80076a2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 80076a4:	f000 bd39 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 80076a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076ae:	d108      	bne.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076b0:	f107 0308 	add.w	r3, r7, #8
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7ff f883 	bl	80067c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076be:	f000 bd2c 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80076c2:	4b21      	ldr	r3, [pc, #132]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 0302 	and.w	r3, r3, #2
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d10d      	bne.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 80076ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80076d4:	d109      	bne.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80076d6:	4b1c      	ldr	r3, [pc, #112]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	08db      	lsrs	r3, r3, #3
 80076dc:	f003 0303 	and.w	r3, r3, #3
 80076e0:	4a1b      	ldr	r2, [pc, #108]	@ (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80076e2:	fa22 f303 	lsr.w	r3, r2, r3
 80076e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80076e8:	e011      	b.n	800770e <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 80076ea:	4b17      	ldr	r3, [pc, #92]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076f6:	d106      	bne.n	8007706 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 80076f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80076fe:	d102      	bne.n	8007706 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 8007700:	4b14      	ldr	r3, [pc, #80]	@ (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8007702:	637b      	str	r3, [r7, #52]	@ 0x34
 8007704:	e003      	b.n	800770e <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 8007706:	2300      	movs	r3, #0
 8007708:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800770a:	f000 bd06 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800770e:	f000 bd04 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8007712:	4b0d      	ldr	r3, [pc, #52]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007714:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007718:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800771c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800771e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007720:	2b00      	cmp	r3, #0
 8007722:	d104      	bne.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007724:	f7fd fb72 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 8007728:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800772a:	f000 bcf6 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800772e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007730:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007734:	d110      	bne.n	8007758 <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007736:	f107 0308 	add.w	r3, r7, #8
 800773a:	4618      	mov	r0, r3
 800773c:	f7ff f840 	bl	80067c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007744:	f000 bce9 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007748:	44020c00 	.word	0x44020c00
 800774c:	007a1200 	.word	0x007a1200
 8007750:	03d09000 	.word	0x03d09000
 8007754:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8007758:	4ba4      	ldr	r3, [pc, #656]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 0302 	and.w	r3, r3, #2
 8007760:	2b02      	cmp	r3, #2
 8007762:	d10e      	bne.n	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 8007764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007766:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800776a:	d10a      	bne.n	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800776c:	4b9f      	ldr	r3, [pc, #636]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	08db      	lsrs	r3, r3, #3
 8007772:	f003 0303 	and.w	r3, r3, #3
 8007776:	4a9e      	ldr	r2, [pc, #632]	@ (80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8007778:	fa22 f303 	lsr.w	r3, r2, r3
 800777c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800777e:	f000 bccc 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8007782:	2300      	movs	r3, #0
 8007784:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007786:	f000 bcc8 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 800778a:	4b98      	ldr	r3, [pc, #608]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800778c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007790:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007794:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8007796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007798:	2b00      	cmp	r3, #0
 800779a:	d104      	bne.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800779c:	f7fd fb62 	bl	8004e64 <HAL_RCC_GetPCLK3Freq>
 80077a0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80077a2:	f000 bcba 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 80077a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80077ac:	d108      	bne.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077ae:	f107 0308 	add.w	r3, r7, #8
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7ff f804 	bl	80067c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077bc:	f000 bcad 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 80077c0:	4b8a      	ldr	r3, [pc, #552]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 0302 	and.w	r3, r3, #2
 80077c8:	2b02      	cmp	r3, #2
 80077ca:	d10e      	bne.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 80077cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077d2:	d10a      	bne.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80077d4:	4b85      	ldr	r3, [pc, #532]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	08db      	lsrs	r3, r3, #3
 80077da:	f003 0303 	and.w	r3, r3, #3
 80077de:	4a84      	ldr	r2, [pc, #528]	@ (80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 80077e0:	fa22 f303 	lsr.w	r3, r2, r3
 80077e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077e6:	f000 bc98 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80077ea:	2300      	movs	r3, #0
 80077ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077ee:	f000 bc94 	b.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80077f2:	4b7e      	ldr	r3, [pc, #504]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80077f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80077f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80077fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80077fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007800:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007804:	d056      	beq.n	80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 8007806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007808:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800780c:	f200 808b 	bhi.w	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8007810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007812:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007816:	d03e      	beq.n	8007896 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 8007818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800781e:	f200 8082 	bhi.w	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8007822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007824:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007828:	d027      	beq.n	800787a <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 800782a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007830:	d879      	bhi.n	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8007832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007834:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007838:	d017      	beq.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 800783a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007840:	d871      	bhi.n	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8007842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007844:	2b00      	cmp	r3, #0
 8007846:	d004      	beq.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8007848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800784e:	d004      	beq.n	800785a <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 8007850:	e069      	b.n	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007852:	f7fd fb07 	bl	8004e64 <HAL_RCC_GetPCLK3Freq>
 8007856:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007858:	e068      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800785a:	f107 0314 	add.w	r3, r7, #20
 800785e:	4618      	mov	r0, r3
 8007860:	f7fe fe42 	bl	80064e8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007868:	e060      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800786a:	f107 0308 	add.w	r3, r7, #8
 800786e:	4618      	mov	r0, r3
 8007870:	f7fe ffa6 	bl	80067c0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007878:	e058      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800787a:	4b5c      	ldr	r3, [pc, #368]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800787c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007880:	f003 0302 	and.w	r3, r3, #2
 8007884:	2b02      	cmp	r3, #2
 8007886:	d103      	bne.n	8007890 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 8007888:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800788c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800788e:	e04d      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8007890:	2300      	movs	r3, #0
 8007892:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007894:	e04a      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007896:	4b55      	ldr	r3, [pc, #340]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007898:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800789c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078a4:	d103      	bne.n	80078ae <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 80078a6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80078aa:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80078ac:	e03e      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 80078ae:	2300      	movs	r3, #0
 80078b0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80078b2:	e03b      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80078b4:	4b4d      	ldr	r3, [pc, #308]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80078b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80078ba:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80078be:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078c0:	4b4a      	ldr	r3, [pc, #296]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 0302 	and.w	r3, r3, #2
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d10c      	bne.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 80078cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d109      	bne.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80078d2:	4b46      	ldr	r3, [pc, #280]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	08db      	lsrs	r3, r3, #3
 80078d8:	f003 0303 	and.w	r3, r3, #3
 80078dc:	4a44      	ldr	r2, [pc, #272]	@ (80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 80078de:	fa22 f303 	lsr.w	r3, r2, r3
 80078e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80078e4:	e01e      	b.n	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078e6:	4b41      	ldr	r3, [pc, #260]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078f2:	d106      	bne.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80078f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078fa:	d102      	bne.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80078fc:	4b3d      	ldr	r3, [pc, #244]	@ (80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 80078fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007900:	e010      	b.n	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007902:	4b3a      	ldr	r3, [pc, #232]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800790a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800790e:	d106      	bne.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 8007910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007912:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007916:	d102      	bne.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007918:	4b37      	ldr	r3, [pc, #220]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 800791a:	637b      	str	r3, [r7, #52]	@ 0x34
 800791c:	e002      	b.n	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800791e:	2300      	movs	r3, #0
 8007920:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007922:	e003      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8007924:	e002      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 8007926:	2300      	movs	r3, #0
 8007928:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800792a:	bf00      	nop
          }
        }
        break;
 800792c:	e3f5      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800792e:	4b2f      	ldr	r3, [pc, #188]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007930:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007934:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007938:	633b      	str	r3, [r7, #48]	@ 0x30
 800793a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800793c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007940:	d05f      	beq.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 8007942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007944:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007948:	f200 8094 	bhi.w	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800794c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800794e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007952:	d03f      	beq.n	80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 8007954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007956:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800795a:	f200 808b 	bhi.w	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800795e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007960:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007964:	d028      	beq.n	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8007966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007968:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800796c:	f200 8082 	bhi.w	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8007970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007972:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007976:	d017      	beq.n	80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 8007978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800797a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800797e:	d879      	bhi.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8007980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007982:	2b00      	cmp	r3, #0
 8007984:	d004      	beq.n	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8007986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007988:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800798c:	d004      	beq.n	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 800798e:	e071      	b.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8007990:	f7fd fa3c 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 8007994:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007996:	e070      	b.n	8007a7a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007998:	f107 0314 	add.w	r3, r7, #20
 800799c:	4618      	mov	r0, r3
 800799e:	f7fe fda3 	bl	80064e8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80079a6:	e068      	b.n	8007a7a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079a8:	f107 0308 	add.w	r3, r7, #8
 80079ac:	4618      	mov	r0, r3
 80079ae:	f7fe ff07 	bl	80067c0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80079b6:	e060      	b.n	8007a7a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80079b8:	4b0c      	ldr	r3, [pc, #48]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80079ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079be:	f003 0302 	and.w	r3, r3, #2
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d103      	bne.n	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 80079c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079ca:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80079cc:	e055      	b.n	8007a7a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 80079ce:	2300      	movs	r3, #0
 80079d0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80079d2:	e052      	b.n	8007a7a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80079d4:	4b05      	ldr	r3, [pc, #20]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80079d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079e2:	d10b      	bne.n	80079fc <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 80079e4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80079e8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80079ea:	e046      	b.n	8007a7a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 80079ec:	44020c00 	.word	0x44020c00
 80079f0:	03d09000 	.word	0x03d09000
 80079f4:	003d0900 	.word	0x003d0900
 80079f8:	007a1200 	.word	0x007a1200
              frequency = 0;
 80079fc:	2300      	movs	r3, #0
 80079fe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a00:	e03b      	b.n	8007a7a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a02:	4bae      	ldr	r3, [pc, #696]	@ (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007a04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a08:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a0e:	4bab      	ldr	r3, [pc, #684]	@ (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 0302 	and.w	r3, r3, #2
 8007a16:	2b02      	cmp	r3, #2
 8007a18:	d10c      	bne.n	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 8007a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d109      	bne.n	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a20:	4ba6      	ldr	r3, [pc, #664]	@ (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	08db      	lsrs	r3, r3, #3
 8007a26:	f003 0303 	and.w	r3, r3, #3
 8007a2a:	4aa5      	ldr	r2, [pc, #660]	@ (8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8007a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a30:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a32:	e01e      	b.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a34:	4ba1      	ldr	r3, [pc, #644]	@ (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a40:	d106      	bne.n	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 8007a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a48:	d102      	bne.n	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007a4a:	4b9e      	ldr	r3, [pc, #632]	@ (8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8007a4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a4e:	e010      	b.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a50:	4b9a      	ldr	r3, [pc, #616]	@ (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a5c:	d106      	bne.n	8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 8007a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a64:	d102      	bne.n	8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007a66:	4b98      	ldr	r3, [pc, #608]	@ (8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8007a68:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a6a:	e002      	b.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007a70:	e003      	b.n	8007a7a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8007a72:	e002      	b.n	8007a7a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 8007a74:	2300      	movs	r3, #0
 8007a76:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a78:	bf00      	nop
          }
        }
        break;
 8007a7a:	e34e      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007a7c:	4b8f      	ldr	r3, [pc, #572]	@ (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007a7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a86:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8007a88:	4b8c      	ldr	r3, [pc, #560]	@ (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a94:	d105      	bne.n	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 8007a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d102      	bne.n	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 8007a9c:	4b8a      	ldr	r3, [pc, #552]	@ (8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8007a9e:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8007aa0:	e33b      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8007aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007aa8:	d107      	bne.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007aaa:	f107 0320 	add.w	r3, r7, #32
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7fe fbae 	bl	8006210 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ab8:	e32f      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8007aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007abc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ac0:	d107      	bne.n	8007ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ac2:	f107 0314 	add.w	r3, r7, #20
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7fe fd0e 	bl	80064e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ad0:	e323      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ad6:	e320      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007ad8:	4b78      	ldr	r3, [pc, #480]	@ (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ade:	f003 0307 	and.w	r3, r3, #7
 8007ae2:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae6:	2b04      	cmp	r3, #4
 8007ae8:	d860      	bhi.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 8007aea:	a201      	add	r2, pc, #4	@ (adr r2, 8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8007aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af0:	08007b05 	.word	0x08007b05
 8007af4:	08007b15 	.word	0x08007b15
 8007af8:	08007b25 	.word	0x08007b25
 8007afc:	08007b35 	.word	0x08007b35
 8007b00:	08007b3b 	.word	0x08007b3b
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b04:	f107 0320 	add.w	r3, r7, #32
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7fe fb81 	bl	8006210 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b10:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007b12:	e04e      	b.n	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b14:	f107 0314 	add.w	r3, r7, #20
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7fe fce5 	bl	80064e8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007b22:	e046      	b.n	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b24:	f107 0308 	add.w	r3, r7, #8
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7fe fe49 	bl	80067c0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007b32:	e03e      	b.n	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007b34:	4b65      	ldr	r3, [pc, #404]	@ (8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8007b36:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007b38:	e03b      	b.n	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007b3a:	4b60      	ldr	r3, [pc, #384]	@ (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007b3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b40:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007b44:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b46:	4b5d      	ldr	r3, [pc, #372]	@ (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0302 	and.w	r3, r3, #2
 8007b4e:	2b02      	cmp	r3, #2
 8007b50:	d10c      	bne.n	8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 8007b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d109      	bne.n	8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b58:	4b58      	ldr	r3, [pc, #352]	@ (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	08db      	lsrs	r3, r3, #3
 8007b5e:	f003 0303 	and.w	r3, r3, #3
 8007b62:	4a57      	ldr	r2, [pc, #348]	@ (8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8007b64:	fa22 f303 	lsr.w	r3, r2, r3
 8007b68:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b6a:	e01e      	b.n	8007baa <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b6c:	4b53      	ldr	r3, [pc, #332]	@ (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b78:	d106      	bne.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 8007b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b80:	d102      	bne.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007b82:	4b50      	ldr	r3, [pc, #320]	@ (8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8007b84:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b86:	e010      	b.n	8007baa <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b88:	4b4c      	ldr	r3, [pc, #304]	@ (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b94:	d106      	bne.n	8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 8007b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b9c:	d102      	bne.n	8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007b9e:	4b4a      	ldr	r3, [pc, #296]	@ (8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8007ba0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ba2:	e002      	b.n	8007baa <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007ba8:	e003      	b.n	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8007baa:	e002      	b.n	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 8007bac:	2300      	movs	r3, #0
 8007bae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007bb0:	bf00      	nop
          }
        }
        break;
 8007bb2:	e2b2      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007bb4:	4b41      	ldr	r3, [pc, #260]	@ (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007bba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007bbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc2:	2b20      	cmp	r3, #32
 8007bc4:	f200 80a4 	bhi.w	8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 8007bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 8007bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bce:	bf00      	nop
 8007bd0:	08007c55 	.word	0x08007c55
 8007bd4:	08007d11 	.word	0x08007d11
 8007bd8:	08007d11 	.word	0x08007d11
 8007bdc:	08007d11 	.word	0x08007d11
 8007be0:	08007d11 	.word	0x08007d11
 8007be4:	08007d11 	.word	0x08007d11
 8007be8:	08007d11 	.word	0x08007d11
 8007bec:	08007d11 	.word	0x08007d11
 8007bf0:	08007c65 	.word	0x08007c65
 8007bf4:	08007d11 	.word	0x08007d11
 8007bf8:	08007d11 	.word	0x08007d11
 8007bfc:	08007d11 	.word	0x08007d11
 8007c00:	08007d11 	.word	0x08007d11
 8007c04:	08007d11 	.word	0x08007d11
 8007c08:	08007d11 	.word	0x08007d11
 8007c0c:	08007d11 	.word	0x08007d11
 8007c10:	08007c75 	.word	0x08007c75
 8007c14:	08007d11 	.word	0x08007d11
 8007c18:	08007d11 	.word	0x08007d11
 8007c1c:	08007d11 	.word	0x08007d11
 8007c20:	08007d11 	.word	0x08007d11
 8007c24:	08007d11 	.word	0x08007d11
 8007c28:	08007d11 	.word	0x08007d11
 8007c2c:	08007d11 	.word	0x08007d11
 8007c30:	08007c85 	.word	0x08007c85
 8007c34:	08007d11 	.word	0x08007d11
 8007c38:	08007d11 	.word	0x08007d11
 8007c3c:	08007d11 	.word	0x08007d11
 8007c40:	08007d11 	.word	0x08007d11
 8007c44:	08007d11 	.word	0x08007d11
 8007c48:	08007d11 	.word	0x08007d11
 8007c4c:	08007d11 	.word	0x08007d11
 8007c50:	08007c8b 	.word	0x08007c8b
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c54:	f107 0320 	add.w	r3, r7, #32
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7fe fad9 	bl	8006210 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c60:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007c62:	e058      	b.n	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c64:	f107 0314 	add.w	r3, r7, #20
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7fe fc3d 	bl	80064e8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007c72:	e050      	b.n	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c74:	f107 0308 	add.w	r3, r7, #8
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7fe fda1 	bl	80067c0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007c82:	e048      	b.n	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007c84:	4b11      	ldr	r3, [pc, #68]	@ (8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8007c86:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007c88:	e045      	b.n	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007c8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c90:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007c94:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c96:	4b09      	ldr	r3, [pc, #36]	@ (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f003 0302 	and.w	r3, r3, #2
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d116      	bne.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 8007ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d113      	bne.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ca8:	4b04      	ldr	r3, [pc, #16]	@ (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	08db      	lsrs	r3, r3, #3
 8007cae:	f003 0303 	and.w	r3, r3, #3
 8007cb2:	4a03      	ldr	r2, [pc, #12]	@ (8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8007cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8007cb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cba:	e028      	b.n	8007d0e <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8007cbc:	44020c00 	.word	0x44020c00
 8007cc0:	03d09000 	.word	0x03d09000
 8007cc4:	003d0900 	.word	0x003d0900
 8007cc8:	007a1200 	.word	0x007a1200
 8007ccc:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007cd0:	4b95      	ldr	r3, [pc, #596]	@ (8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cdc:	d106      	bne.n	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 8007cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ce4:	d102      	bne.n	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007ce6:	4b91      	ldr	r3, [pc, #580]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8007ce8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cea:	e010      	b.n	8007d0e <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007cec:	4b8e      	ldr	r3, [pc, #568]	@ (8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cf4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cf8:	d106      	bne.n	8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 8007cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cfc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d00:	d102      	bne.n	8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007d02:	4b8b      	ldr	r3, [pc, #556]	@ (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8007d04:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d06:	e002      	b.n	8007d0e <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007d0c:	e003      	b.n	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8007d0e:	e002      	b.n	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 8007d10:	2300      	movs	r3, #0
 8007d12:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007d14:	bf00      	nop
          }
        }
        break;
 8007d16:	e200      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007d18:	4b83      	ldr	r3, [pc, #524]	@ (8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d1e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007d22:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d2a:	d031      	beq.n	8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8007d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d32:	d866      	bhi.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8007d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d36:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d38:	d027      	beq.n	8007d8a <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 8007d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d3c:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d3e:	d860      	bhi.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8007d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d42:	2b80      	cmp	r3, #128	@ 0x80
 8007d44:	d019      	beq.n	8007d7a <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 8007d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d48:	2b80      	cmp	r3, #128	@ 0x80
 8007d4a:	d85a      	bhi.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8007d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d003      	beq.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 8007d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d54:	2b40      	cmp	r3, #64	@ 0x40
 8007d56:	d008      	beq.n	8007d6a <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 8007d58:	e053      	b.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d5a:	f107 0320 	add.w	r3, r7, #32
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7fe fa56 	bl	8006210 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d66:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007d68:	e04e      	b.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d6a:	f107 0314 	add.w	r3, r7, #20
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7fe fbba 	bl	80064e8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007d78:	e046      	b.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d7a:	f107 0308 	add.w	r3, r7, #8
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7fe fd1e 	bl	80067c0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007d88:	e03e      	b.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007d8a:	4b6a      	ldr	r3, [pc, #424]	@ (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 8007d8c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007d8e:	e03b      	b.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d90:	4b65      	ldr	r3, [pc, #404]	@ (8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007d92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d96:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d9c:	4b62      	ldr	r3, [pc, #392]	@ (8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 0302 	and.w	r3, r3, #2
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d10c      	bne.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8007da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d109      	bne.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007dae:	4b5e      	ldr	r3, [pc, #376]	@ (8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	08db      	lsrs	r3, r3, #3
 8007db4:	f003 0303 	and.w	r3, r3, #3
 8007db8:	4a5f      	ldr	r2, [pc, #380]	@ (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8007dba:	fa22 f303 	lsr.w	r3, r2, r3
 8007dbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dc0:	e01e      	b.n	8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007dc2:	4b59      	ldr	r3, [pc, #356]	@ (8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007dca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007dce:	d106      	bne.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8007dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dd6:	d102      	bne.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007dd8:	4b54      	ldr	r3, [pc, #336]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8007dda:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ddc:	e010      	b.n	8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007dde:	4b52      	ldr	r3, [pc, #328]	@ (8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007de6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007dea:	d106      	bne.n	8007dfa <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 8007dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007df2:	d102      	bne.n	8007dfa <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007df4:	4b4e      	ldr	r3, [pc, #312]	@ (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8007df6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007df8:	e002      	b.n	8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007dfe:	e003      	b.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 8007e00:	e002      	b.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 8007e02:	2300      	movs	r3, #0
 8007e04:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007e06:	bf00      	nop
          }
        }
        break;
 8007e08:	e187      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8007e0a:	4b47      	ldr	r3, [pc, #284]	@ (8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e10:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8007e14:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8007e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d103      	bne.n	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007e1c:	f7fd f80c 	bl	8004e38 <HAL_RCC_GetPCLK2Freq>
 8007e20:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007e22:	e17a      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8007e24:	4b40      	ldr	r3, [pc, #256]	@ (8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e30:	d10b      	bne.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8007e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e38:	d107      	bne.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e3a:	f107 0314 	add.w	r3, r7, #20
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7fe fb52 	bl	80064e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e48:	e045      	b.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8007e4a:	4b37      	ldr	r3, [pc, #220]	@ (8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e56:	d10b      	bne.n	8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 8007e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e5e:	d107      	bne.n	8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e60:	f107 0308 	add.w	r3, r7, #8
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7fe fcab 	bl	80067c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e6e:	e032      	b.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8007e70:	4b2d      	ldr	r3, [pc, #180]	@ (8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 0302 	and.w	r3, r3, #2
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d10d      	bne.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 8007e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e7e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007e82:	d109      	bne.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e84:	4b28      	ldr	r3, [pc, #160]	@ (8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	08db      	lsrs	r3, r3, #3
 8007e8a:	f003 0303 	and.w	r3, r3, #3
 8007e8e:	4a2a      	ldr	r2, [pc, #168]	@ (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8007e90:	fa22 f303 	lsr.w	r3, r2, r3
 8007e94:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e96:	e01e      	b.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8007e98:	4b23      	ldr	r3, [pc, #140]	@ (8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ea0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ea4:	d106      	bne.n	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 8007ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007eac:	d102      	bne.n	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 8007eae:	4b1f      	ldr	r3, [pc, #124]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8007eb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eb2:	e010      	b.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8007eb4:	4b1c      	ldr	r3, [pc, #112]	@ (8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ebc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ec0:	d106      	bne.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 8007ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007ec8:	d102      	bne.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 8007eca:	4b19      	ldr	r3, [pc, #100]	@ (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8007ecc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ece:	e002      	b.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ed4:	e121      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007ed6:	e120      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007ed8:	4b13      	ldr	r3, [pc, #76]	@ (8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007eda:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007ede:	f003 0303 	and.w	r3, r3, #3
 8007ee2:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee6:	2b03      	cmp	r3, #3
 8007ee8:	d861      	bhi.n	8007fae <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 8007eea:	a201      	add	r2, pc, #4	@ (adr r2, 8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 8007eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef0:	08007f01 	.word	0x08007f01
 8007ef4:	08007f09 	.word	0x08007f09
 8007ef8:	08007f19 	.word	0x08007f19
 8007efc:	08007f3d 	.word	0x08007f3d

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8007f00:	f7fc ff68 	bl	8004dd4 <HAL_RCC_GetHCLKFreq>
 8007f04:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007f06:	e055      	b.n	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f08:	f107 0320 	add.w	r3, r7, #32
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7fe f97f 	bl	8006210 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f14:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007f16:	e04d      	b.n	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f18:	f107 0314 	add.w	r3, r7, #20
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7fe fae3 	bl	80064e8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007f26:	e045      	b.n	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8007f28:	44020c00 	.word	0x44020c00
 8007f2c:	003d0900 	.word	0x003d0900
 8007f30:	007a1200 	.word	0x007a1200
 8007f34:	00bb8000 	.word	0x00bb8000
 8007f38:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f3c:	4b79      	ldr	r3, [pc, #484]	@ (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007f3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f42:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007f46:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f48:	4b76      	ldr	r3, [pc, #472]	@ (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 0302 	and.w	r3, r3, #2
 8007f50:	2b02      	cmp	r3, #2
 8007f52:	d10c      	bne.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 8007f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d109      	bne.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007f5a:	4b72      	ldr	r3, [pc, #456]	@ (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	08db      	lsrs	r3, r3, #3
 8007f60:	f003 0303 	and.w	r3, r3, #3
 8007f64:	4a70      	ldr	r2, [pc, #448]	@ (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 8007f66:	fa22 f303 	lsr.w	r3, r2, r3
 8007f6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f6c:	e01e      	b.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f6e:	4b6d      	ldr	r3, [pc, #436]	@ (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f7a:	d106      	bne.n	8007f8a <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 8007f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f82:	d102      	bne.n	8007f8a <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007f84:	4b69      	ldr	r3, [pc, #420]	@ (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 8007f86:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f88:	e010      	b.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f8a:	4b66      	ldr	r3, [pc, #408]	@ (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f96:	d106      	bne.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8007f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f9e:	d102      	bne.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007fa0:	4b63      	ldr	r3, [pc, #396]	@ (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 8007fa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fa4:	e002      	b.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007faa:	e003      	b.n	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8007fac:	e002      	b.n	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007fb2:	bf00      	nop
          }
        }
        break;
 8007fb4:	e0b1      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8007fb6:	4b5b      	ldr	r3, [pc, #364]	@ (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007fb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007fbc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007fc0:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8007fc2:	4b58      	ldr	r3, [pc, #352]	@ (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007fc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007fc8:	f003 0302 	and.w	r3, r3, #2
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d106      	bne.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 8007fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d103      	bne.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 8007fd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fda:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fdc:	e01f      	b.n	800801e <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8007fde:	4b51      	ldr	r3, [pc, #324]	@ (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007fe0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007fe4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fe8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007fec:	d106      	bne.n	8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 8007fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff0:	2b40      	cmp	r3, #64	@ 0x40
 8007ff2:	d103      	bne.n	8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 8007ff4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007ff8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ffa:	e010      	b.n	800801e <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8007ffc:	4b49      	ldr	r3, [pc, #292]	@ (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008008:	d106      	bne.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 800800a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800800c:	2b80      	cmp	r3, #128	@ 0x80
 800800e:	d103      	bne.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 8008010:	f248 0312 	movw	r3, #32786	@ 0x8012
 8008014:	637b      	str	r3, [r7, #52]	@ 0x34
 8008016:	e002      	b.n	800801e <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8008018:	2300      	movs	r3, #0
 800801a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800801c:	e07d      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800801e:	e07c      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008020:	4b40      	ldr	r3, [pc, #256]	@ (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8008022:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008026:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800802a:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800802c:	4b3d      	ldr	r3, [pc, #244]	@ (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008034:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008038:	d105      	bne.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 800803a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803c:	2b00      	cmp	r3, #0
 800803e:	d102      	bne.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 8008040:	4b3c      	ldr	r3, [pc, #240]	@ (8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8008042:	637b      	str	r3, [r7, #52]	@ 0x34
 8008044:	e031      	b.n	80080aa <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8008046:	4b37      	ldr	r3, [pc, #220]	@ (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800804e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008052:	d10a      	bne.n	800806a <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 8008054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008056:	2b10      	cmp	r3, #16
 8008058:	d107      	bne.n	800806a <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800805a:	f107 0320 	add.w	r3, r7, #32
 800805e:	4618      	mov	r0, r3
 8008060:	f7fe f8d6 	bl	8006210 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008066:	637b      	str	r3, [r7, #52]	@ 0x34
 8008068:	e01f      	b.n	80080aa <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800806a:	4b2e      	ldr	r3, [pc, #184]	@ (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800806c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008070:	f003 0302 	and.w	r3, r3, #2
 8008074:	2b02      	cmp	r3, #2
 8008076:	d106      	bne.n	8008086 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 8008078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800807a:	2b20      	cmp	r3, #32
 800807c:	d103      	bne.n	8008086 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 800807e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008082:	637b      	str	r3, [r7, #52]	@ 0x34
 8008084:	e011      	b.n	80080aa <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8008086:	4b27      	ldr	r3, [pc, #156]	@ (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8008088:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800808c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008090:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008094:	d106      	bne.n	80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 8008096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008098:	2b30      	cmp	r3, #48	@ 0x30
 800809a:	d103      	bne.n	80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 800809c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80080a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80080a2:	e002      	b.n	80080aa <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 80080a4:	2300      	movs	r3, #0
 80080a6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80080a8:	e037      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80080aa:	e036      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80080ac:	4b1d      	ldr	r3, [pc, #116]	@ (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80080ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80080b2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80080b6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 80080b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ba:	2b10      	cmp	r3, #16
 80080bc:	d107      	bne.n	80080ce <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080be:	f107 0320 	add.w	r3, r7, #32
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7fe f8a4 	bl	8006210 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ca:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80080cc:	e025      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 80080ce:	4b15      	ldr	r3, [pc, #84]	@ (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080da:	d10a      	bne.n	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 80080dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080de:	2b20      	cmp	r3, #32
 80080e0:	d107      	bne.n	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080e2:	f107 0308 	add.w	r3, r7, #8
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7fe fb6a 	bl	80067c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80080f0:	e00f      	b.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80080f2:	4b0c      	ldr	r3, [pc, #48]	@ (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80080fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080fe:	d105      	bne.n	800810c <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 8008100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008102:	2b30      	cmp	r3, #48	@ 0x30
 8008104:	d102      	bne.n	800810c <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 8008106:	4b0b      	ldr	r3, [pc, #44]	@ (8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8008108:	637b      	str	r3, [r7, #52]	@ 0x34
 800810a:	e002      	b.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800810c:	2300      	movs	r3, #0
 800810e:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8008110:	e003      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008112:	e002      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 8008114:	2300      	movs	r3, #0
 8008116:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008118:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800811a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800811c:	4618      	mov	r0, r3
 800811e:	373c      	adds	r7, #60	@ 0x3c
 8008120:	46bd      	mov	sp, r7
 8008122:	bd90      	pop	{r4, r7, pc}
 8008124:	44020c00 	.word	0x44020c00
 8008128:	03d09000 	.word	0x03d09000
 800812c:	003d0900 	.word	0x003d0900
 8008130:	007a1200 	.word	0x007a1200
 8008134:	02dc6c00 	.word	0x02dc6c00

08008138 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8008140:	4b48      	ldr	r3, [pc, #288]	@ (8008264 <RCCEx_PLL2_Config+0x12c>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a47      	ldr	r2, [pc, #284]	@ (8008264 <RCCEx_PLL2_Config+0x12c>)
 8008146:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800814a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800814c:	f7fa fbb4 	bl	80028b8 <HAL_GetTick>
 8008150:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008152:	e008      	b.n	8008166 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008154:	f7fa fbb0 	bl	80028b8 <HAL_GetTick>
 8008158:	4602      	mov	r2, r0
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	1ad3      	subs	r3, r2, r3
 800815e:	2b02      	cmp	r3, #2
 8008160:	d901      	bls.n	8008166 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008162:	2303      	movs	r3, #3
 8008164:	e07a      	b.n	800825c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008166:	4b3f      	ldr	r3, [pc, #252]	@ (8008264 <RCCEx_PLL2_Config+0x12c>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1f0      	bne.n	8008154 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008172:	4b3c      	ldr	r3, [pc, #240]	@ (8008264 <RCCEx_PLL2_Config+0x12c>)
 8008174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008176:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800817a:	f023 0303 	bic.w	r3, r3, #3
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	6811      	ldr	r1, [r2, #0]
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	6852      	ldr	r2, [r2, #4]
 8008186:	0212      	lsls	r2, r2, #8
 8008188:	430a      	orrs	r2, r1
 800818a:	4936      	ldr	r1, [pc, #216]	@ (8008264 <RCCEx_PLL2_Config+0x12c>)
 800818c:	4313      	orrs	r3, r2
 800818e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	3b01      	subs	r3, #1
 8008196:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	3b01      	subs	r3, #1
 80081a0:	025b      	lsls	r3, r3, #9
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	431a      	orrs	r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	3b01      	subs	r3, #1
 80081ac:	041b      	lsls	r3, r3, #16
 80081ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80081b2:	431a      	orrs	r2, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	695b      	ldr	r3, [r3, #20]
 80081b8:	3b01      	subs	r3, #1
 80081ba:	061b      	lsls	r3, r3, #24
 80081bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80081c0:	4928      	ldr	r1, [pc, #160]	@ (8008264 <RCCEx_PLL2_Config+0x12c>)
 80081c2:	4313      	orrs	r3, r2
 80081c4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80081c6:	4b27      	ldr	r3, [pc, #156]	@ (8008264 <RCCEx_PLL2_Config+0x12c>)
 80081c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ca:	f023 020c 	bic.w	r2, r3, #12
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	699b      	ldr	r3, [r3, #24]
 80081d2:	4924      	ldr	r1, [pc, #144]	@ (8008264 <RCCEx_PLL2_Config+0x12c>)
 80081d4:	4313      	orrs	r3, r2
 80081d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80081d8:	4b22      	ldr	r3, [pc, #136]	@ (8008264 <RCCEx_PLL2_Config+0x12c>)
 80081da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081dc:	f023 0220 	bic.w	r2, r3, #32
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	69db      	ldr	r3, [r3, #28]
 80081e4:	491f      	ldr	r1, [pc, #124]	@ (8008264 <RCCEx_PLL2_Config+0x12c>)
 80081e6:	4313      	orrs	r3, r2
 80081e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80081ea:	4b1e      	ldr	r3, [pc, #120]	@ (8008264 <RCCEx_PLL2_Config+0x12c>)
 80081ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081f2:	491c      	ldr	r1, [pc, #112]	@ (8008264 <RCCEx_PLL2_Config+0x12c>)
 80081f4:	4313      	orrs	r3, r2
 80081f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80081f8:	4b1a      	ldr	r3, [pc, #104]	@ (8008264 <RCCEx_PLL2_Config+0x12c>)
 80081fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081fc:	4a19      	ldr	r2, [pc, #100]	@ (8008264 <RCCEx_PLL2_Config+0x12c>)
 80081fe:	f023 0310 	bic.w	r3, r3, #16
 8008202:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8008204:	4b17      	ldr	r3, [pc, #92]	@ (8008264 <RCCEx_PLL2_Config+0x12c>)
 8008206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008208:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800820c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	6a12      	ldr	r2, [r2, #32]
 8008214:	00d2      	lsls	r2, r2, #3
 8008216:	4913      	ldr	r1, [pc, #76]	@ (8008264 <RCCEx_PLL2_Config+0x12c>)
 8008218:	4313      	orrs	r3, r2
 800821a:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800821c:	4b11      	ldr	r3, [pc, #68]	@ (8008264 <RCCEx_PLL2_Config+0x12c>)
 800821e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008220:	4a10      	ldr	r2, [pc, #64]	@ (8008264 <RCCEx_PLL2_Config+0x12c>)
 8008222:	f043 0310 	orr.w	r3, r3, #16
 8008226:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8008228:	4b0e      	ldr	r3, [pc, #56]	@ (8008264 <RCCEx_PLL2_Config+0x12c>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a0d      	ldr	r2, [pc, #52]	@ (8008264 <RCCEx_PLL2_Config+0x12c>)
 800822e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008232:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008234:	f7fa fb40 	bl	80028b8 <HAL_GetTick>
 8008238:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800823a:	e008      	b.n	800824e <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800823c:	f7fa fb3c 	bl	80028b8 <HAL_GetTick>
 8008240:	4602      	mov	r2, r0
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	1ad3      	subs	r3, r2, r3
 8008246:	2b02      	cmp	r3, #2
 8008248:	d901      	bls.n	800824e <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	e006      	b.n	800825c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800824e:	4b05      	ldr	r3, [pc, #20]	@ (8008264 <RCCEx_PLL2_Config+0x12c>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008256:	2b00      	cmp	r3, #0
 8008258:	d0f0      	beq.n	800823c <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800825a:	2300      	movs	r3, #0

}
 800825c:	4618      	mov	r0, r3
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	44020c00 	.word	0x44020c00

08008268 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8008270:	4b48      	ldr	r3, [pc, #288]	@ (8008394 <RCCEx_PLL3_Config+0x12c>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a47      	ldr	r2, [pc, #284]	@ (8008394 <RCCEx_PLL3_Config+0x12c>)
 8008276:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800827a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800827c:	f7fa fb1c 	bl	80028b8 <HAL_GetTick>
 8008280:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008282:	e008      	b.n	8008296 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008284:	f7fa fb18 	bl	80028b8 <HAL_GetTick>
 8008288:	4602      	mov	r2, r0
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	2b02      	cmp	r3, #2
 8008290:	d901      	bls.n	8008296 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008292:	2303      	movs	r3, #3
 8008294:	e07a      	b.n	800838c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008296:	4b3f      	ldr	r3, [pc, #252]	@ (8008394 <RCCEx_PLL3_Config+0x12c>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d1f0      	bne.n	8008284 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80082a2:	4b3c      	ldr	r3, [pc, #240]	@ (8008394 <RCCEx_PLL3_Config+0x12c>)
 80082a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082a6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80082aa:	f023 0303 	bic.w	r3, r3, #3
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	6811      	ldr	r1, [r2, #0]
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	6852      	ldr	r2, [r2, #4]
 80082b6:	0212      	lsls	r2, r2, #8
 80082b8:	430a      	orrs	r2, r1
 80082ba:	4936      	ldr	r1, [pc, #216]	@ (8008394 <RCCEx_PLL3_Config+0x12c>)
 80082bc:	4313      	orrs	r3, r2
 80082be:	630b      	str	r3, [r1, #48]	@ 0x30
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	3b01      	subs	r3, #1
 80082c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	3b01      	subs	r3, #1
 80082d0:	025b      	lsls	r3, r3, #9
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	431a      	orrs	r2, r3
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	3b01      	subs	r3, #1
 80082dc:	041b      	lsls	r3, r3, #16
 80082de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80082e2:	431a      	orrs	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	695b      	ldr	r3, [r3, #20]
 80082e8:	3b01      	subs	r3, #1
 80082ea:	061b      	lsls	r3, r3, #24
 80082ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80082f0:	4928      	ldr	r1, [pc, #160]	@ (8008394 <RCCEx_PLL3_Config+0x12c>)
 80082f2:	4313      	orrs	r3, r2
 80082f4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80082f6:	4b27      	ldr	r3, [pc, #156]	@ (8008394 <RCCEx_PLL3_Config+0x12c>)
 80082f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082fa:	f023 020c 	bic.w	r2, r3, #12
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	699b      	ldr	r3, [r3, #24]
 8008302:	4924      	ldr	r1, [pc, #144]	@ (8008394 <RCCEx_PLL3_Config+0x12c>)
 8008304:	4313      	orrs	r3, r2
 8008306:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8008308:	4b22      	ldr	r3, [pc, #136]	@ (8008394 <RCCEx_PLL3_Config+0x12c>)
 800830a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800830c:	f023 0220 	bic.w	r2, r3, #32
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	69db      	ldr	r3, [r3, #28]
 8008314:	491f      	ldr	r1, [pc, #124]	@ (8008394 <RCCEx_PLL3_Config+0x12c>)
 8008316:	4313      	orrs	r3, r2
 8008318:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800831a:	4b1e      	ldr	r3, [pc, #120]	@ (8008394 <RCCEx_PLL3_Config+0x12c>)
 800831c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008322:	491c      	ldr	r1, [pc, #112]	@ (8008394 <RCCEx_PLL3_Config+0x12c>)
 8008324:	4313      	orrs	r3, r2
 8008326:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8008328:	4b1a      	ldr	r3, [pc, #104]	@ (8008394 <RCCEx_PLL3_Config+0x12c>)
 800832a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800832c:	4a19      	ldr	r2, [pc, #100]	@ (8008394 <RCCEx_PLL3_Config+0x12c>)
 800832e:	f023 0310 	bic.w	r3, r3, #16
 8008332:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8008334:	4b17      	ldr	r3, [pc, #92]	@ (8008394 <RCCEx_PLL3_Config+0x12c>)
 8008336:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008338:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800833c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	6a12      	ldr	r2, [r2, #32]
 8008344:	00d2      	lsls	r2, r2, #3
 8008346:	4913      	ldr	r1, [pc, #76]	@ (8008394 <RCCEx_PLL3_Config+0x12c>)
 8008348:	4313      	orrs	r3, r2
 800834a:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800834c:	4b11      	ldr	r3, [pc, #68]	@ (8008394 <RCCEx_PLL3_Config+0x12c>)
 800834e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008350:	4a10      	ldr	r2, [pc, #64]	@ (8008394 <RCCEx_PLL3_Config+0x12c>)
 8008352:	f043 0310 	orr.w	r3, r3, #16
 8008356:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8008358:	4b0e      	ldr	r3, [pc, #56]	@ (8008394 <RCCEx_PLL3_Config+0x12c>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a0d      	ldr	r2, [pc, #52]	@ (8008394 <RCCEx_PLL3_Config+0x12c>)
 800835e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008362:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008364:	f7fa faa8 	bl	80028b8 <HAL_GetTick>
 8008368:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800836a:	e008      	b.n	800837e <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800836c:	f7fa faa4 	bl	80028b8 <HAL_GetTick>
 8008370:	4602      	mov	r2, r0
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	2b02      	cmp	r3, #2
 8008378:	d901      	bls.n	800837e <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800837a:	2303      	movs	r3, #3
 800837c:	e006      	b.n	800838c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800837e:	4b05      	ldr	r3, [pc, #20]	@ (8008394 <RCCEx_PLL3_Config+0x12c>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008386:	2b00      	cmp	r3, #0
 8008388:	d0f0      	beq.n	800836c <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	3710      	adds	r7, #16
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}
 8008394:	44020c00 	.word	0x44020c00

08008398 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d101      	bne.n	80083aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	e049      	b.n	800843e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d106      	bne.n	80083c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f7f9 fe60 	bl	8002084 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2202      	movs	r2, #2
 80083c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	3304      	adds	r3, #4
 80083d4:	4619      	mov	r1, r3
 80083d6:	4610      	mov	r0, r2
 80083d8:	f000 ff0e 	bl	80091f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3708      	adds	r7, #8
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
	...

08008448 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008452:	2300      	movs	r3, #0
 8008454:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d109      	bne.n	8008470 <HAL_TIM_OC_Start_IT+0x28>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008462:	b2db      	uxtb	r3, r3
 8008464:	2b01      	cmp	r3, #1
 8008466:	bf14      	ite	ne
 8008468:	2301      	movne	r3, #1
 800846a:	2300      	moveq	r3, #0
 800846c:	b2db      	uxtb	r3, r3
 800846e:	e03c      	b.n	80084ea <HAL_TIM_OC_Start_IT+0xa2>
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	2b04      	cmp	r3, #4
 8008474:	d109      	bne.n	800848a <HAL_TIM_OC_Start_IT+0x42>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800847c:	b2db      	uxtb	r3, r3
 800847e:	2b01      	cmp	r3, #1
 8008480:	bf14      	ite	ne
 8008482:	2301      	movne	r3, #1
 8008484:	2300      	moveq	r3, #0
 8008486:	b2db      	uxtb	r3, r3
 8008488:	e02f      	b.n	80084ea <HAL_TIM_OC_Start_IT+0xa2>
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	2b08      	cmp	r3, #8
 800848e:	d109      	bne.n	80084a4 <HAL_TIM_OC_Start_IT+0x5c>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008496:	b2db      	uxtb	r3, r3
 8008498:	2b01      	cmp	r3, #1
 800849a:	bf14      	ite	ne
 800849c:	2301      	movne	r3, #1
 800849e:	2300      	moveq	r3, #0
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	e022      	b.n	80084ea <HAL_TIM_OC_Start_IT+0xa2>
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	2b0c      	cmp	r3, #12
 80084a8:	d109      	bne.n	80084be <HAL_TIM_OC_Start_IT+0x76>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	bf14      	ite	ne
 80084b6:	2301      	movne	r3, #1
 80084b8:	2300      	moveq	r3, #0
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	e015      	b.n	80084ea <HAL_TIM_OC_Start_IT+0xa2>
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	2b10      	cmp	r3, #16
 80084c2:	d109      	bne.n	80084d8 <HAL_TIM_OC_Start_IT+0x90>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	bf14      	ite	ne
 80084d0:	2301      	movne	r3, #1
 80084d2:	2300      	moveq	r3, #0
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	e008      	b.n	80084ea <HAL_TIM_OC_Start_IT+0xa2>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	bf14      	ite	ne
 80084e4:	2301      	movne	r3, #1
 80084e6:	2300      	moveq	r3, #0
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d001      	beq.n	80084f2 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	e11a      	b.n	8008728 <HAL_TIM_OC_Start_IT+0x2e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d104      	bne.n	8008502 <HAL_TIM_OC_Start_IT+0xba>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2202      	movs	r2, #2
 80084fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008500:	e023      	b.n	800854a <HAL_TIM_OC_Start_IT+0x102>
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	2b04      	cmp	r3, #4
 8008506:	d104      	bne.n	8008512 <HAL_TIM_OC_Start_IT+0xca>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2202      	movs	r2, #2
 800850c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008510:	e01b      	b.n	800854a <HAL_TIM_OC_Start_IT+0x102>
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	2b08      	cmp	r3, #8
 8008516:	d104      	bne.n	8008522 <HAL_TIM_OC_Start_IT+0xda>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2202      	movs	r2, #2
 800851c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008520:	e013      	b.n	800854a <HAL_TIM_OC_Start_IT+0x102>
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	2b0c      	cmp	r3, #12
 8008526:	d104      	bne.n	8008532 <HAL_TIM_OC_Start_IT+0xea>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2202      	movs	r2, #2
 800852c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008530:	e00b      	b.n	800854a <HAL_TIM_OC_Start_IT+0x102>
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	2b10      	cmp	r3, #16
 8008536:	d104      	bne.n	8008542 <HAL_TIM_OC_Start_IT+0xfa>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2202      	movs	r2, #2
 800853c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008540:	e003      	b.n	800854a <HAL_TIM_OC_Start_IT+0x102>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2202      	movs	r2, #2
 8008546:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	2b0c      	cmp	r3, #12
 800854e:	d841      	bhi.n	80085d4 <HAL_TIM_OC_Start_IT+0x18c>
 8008550:	a201      	add	r2, pc, #4	@ (adr r2, 8008558 <HAL_TIM_OC_Start_IT+0x110>)
 8008552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008556:	bf00      	nop
 8008558:	0800858d 	.word	0x0800858d
 800855c:	080085d5 	.word	0x080085d5
 8008560:	080085d5 	.word	0x080085d5
 8008564:	080085d5 	.word	0x080085d5
 8008568:	0800859f 	.word	0x0800859f
 800856c:	080085d5 	.word	0x080085d5
 8008570:	080085d5 	.word	0x080085d5
 8008574:	080085d5 	.word	0x080085d5
 8008578:	080085b1 	.word	0x080085b1
 800857c:	080085d5 	.word	0x080085d5
 8008580:	080085d5 	.word	0x080085d5
 8008584:	080085d5 	.word	0x080085d5
 8008588:	080085c3 	.word	0x080085c3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	68da      	ldr	r2, [r3, #12]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f042 0202 	orr.w	r2, r2, #2
 800859a:	60da      	str	r2, [r3, #12]
      break;
 800859c:	e01d      	b.n	80085da <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68da      	ldr	r2, [r3, #12]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f042 0204 	orr.w	r2, r2, #4
 80085ac:	60da      	str	r2, [r3, #12]
      break;
 80085ae:	e014      	b.n	80085da <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68da      	ldr	r2, [r3, #12]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f042 0208 	orr.w	r2, r2, #8
 80085be:	60da      	str	r2, [r3, #12]
      break;
 80085c0:	e00b      	b.n	80085da <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68da      	ldr	r2, [r3, #12]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f042 0210 	orr.w	r2, r2, #16
 80085d0:	60da      	str	r2, [r3, #12]
      break;
 80085d2:	e002      	b.n	80085da <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80085d4:	2301      	movs	r3, #1
 80085d6:	73fb      	strb	r3, [r7, #15]
      break;
 80085d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80085da:	7bfb      	ldrb	r3, [r7, #15]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f040 80a2 	bne.w	8008726 <HAL_TIM_OC_Start_IT+0x2de>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2201      	movs	r2, #1
 80085e8:	6839      	ldr	r1, [r7, #0]
 80085ea:	4618      	mov	r0, r3
 80085ec:	f001 fac0 	bl	8009b70 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a4e      	ldr	r2, [pc, #312]	@ (8008730 <HAL_TIM_OC_Start_IT+0x2e8>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d018      	beq.n	800862c <HAL_TIM_OC_Start_IT+0x1e4>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a4d      	ldr	r2, [pc, #308]	@ (8008734 <HAL_TIM_OC_Start_IT+0x2ec>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d013      	beq.n	800862c <HAL_TIM_OC_Start_IT+0x1e4>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a4b      	ldr	r2, [pc, #300]	@ (8008738 <HAL_TIM_OC_Start_IT+0x2f0>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d00e      	beq.n	800862c <HAL_TIM_OC_Start_IT+0x1e4>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a4a      	ldr	r2, [pc, #296]	@ (800873c <HAL_TIM_OC_Start_IT+0x2f4>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d009      	beq.n	800862c <HAL_TIM_OC_Start_IT+0x1e4>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a48      	ldr	r2, [pc, #288]	@ (8008740 <HAL_TIM_OC_Start_IT+0x2f8>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d004      	beq.n	800862c <HAL_TIM_OC_Start_IT+0x1e4>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a47      	ldr	r2, [pc, #284]	@ (8008744 <HAL_TIM_OC_Start_IT+0x2fc>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d101      	bne.n	8008630 <HAL_TIM_OC_Start_IT+0x1e8>
 800862c:	2301      	movs	r3, #1
 800862e:	e000      	b.n	8008632 <HAL_TIM_OC_Start_IT+0x1ea>
 8008630:	2300      	movs	r3, #0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d007      	beq.n	8008646 <HAL_TIM_OC_Start_IT+0x1fe>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008644:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a39      	ldr	r2, [pc, #228]	@ (8008730 <HAL_TIM_OC_Start_IT+0x2e8>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d04a      	beq.n	80086e6 <HAL_TIM_OC_Start_IT+0x29e>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a37      	ldr	r2, [pc, #220]	@ (8008734 <HAL_TIM_OC_Start_IT+0x2ec>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d045      	beq.n	80086e6 <HAL_TIM_OC_Start_IT+0x29e>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008662:	d040      	beq.n	80086e6 <HAL_TIM_OC_Start_IT+0x29e>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800866c:	d03b      	beq.n	80086e6 <HAL_TIM_OC_Start_IT+0x29e>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a35      	ldr	r2, [pc, #212]	@ (8008748 <HAL_TIM_OC_Start_IT+0x300>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d036      	beq.n	80086e6 <HAL_TIM_OC_Start_IT+0x29e>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a33      	ldr	r2, [pc, #204]	@ (800874c <HAL_TIM_OC_Start_IT+0x304>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d031      	beq.n	80086e6 <HAL_TIM_OC_Start_IT+0x29e>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a32      	ldr	r2, [pc, #200]	@ (8008750 <HAL_TIM_OC_Start_IT+0x308>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d02c      	beq.n	80086e6 <HAL_TIM_OC_Start_IT+0x29e>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a30      	ldr	r2, [pc, #192]	@ (8008754 <HAL_TIM_OC_Start_IT+0x30c>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d027      	beq.n	80086e6 <HAL_TIM_OC_Start_IT+0x29e>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a2f      	ldr	r2, [pc, #188]	@ (8008758 <HAL_TIM_OC_Start_IT+0x310>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d022      	beq.n	80086e6 <HAL_TIM_OC_Start_IT+0x29e>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a2d      	ldr	r2, [pc, #180]	@ (800875c <HAL_TIM_OC_Start_IT+0x314>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d01d      	beq.n	80086e6 <HAL_TIM_OC_Start_IT+0x29e>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a22      	ldr	r2, [pc, #136]	@ (8008738 <HAL_TIM_OC_Start_IT+0x2f0>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d018      	beq.n	80086e6 <HAL_TIM_OC_Start_IT+0x29e>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a20      	ldr	r2, [pc, #128]	@ (800873c <HAL_TIM_OC_Start_IT+0x2f4>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d013      	beq.n	80086e6 <HAL_TIM_OC_Start_IT+0x29e>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a27      	ldr	r2, [pc, #156]	@ (8008760 <HAL_TIM_OC_Start_IT+0x318>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d00e      	beq.n	80086e6 <HAL_TIM_OC_Start_IT+0x29e>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a25      	ldr	r2, [pc, #148]	@ (8008764 <HAL_TIM_OC_Start_IT+0x31c>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d009      	beq.n	80086e6 <HAL_TIM_OC_Start_IT+0x29e>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a1a      	ldr	r2, [pc, #104]	@ (8008740 <HAL_TIM_OC_Start_IT+0x2f8>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d004      	beq.n	80086e6 <HAL_TIM_OC_Start_IT+0x29e>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a18      	ldr	r2, [pc, #96]	@ (8008744 <HAL_TIM_OC_Start_IT+0x2fc>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d115      	bne.n	8008712 <HAL_TIM_OC_Start_IT+0x2ca>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	689a      	ldr	r2, [r3, #8]
 80086ec:	4b1e      	ldr	r3, [pc, #120]	@ (8008768 <HAL_TIM_OC_Start_IT+0x320>)
 80086ee:	4013      	ands	r3, r2
 80086f0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	2b06      	cmp	r3, #6
 80086f6:	d015      	beq.n	8008724 <HAL_TIM_OC_Start_IT+0x2dc>
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086fe:	d011      	beq.n	8008724 <HAL_TIM_OC_Start_IT+0x2dc>
      {
        __HAL_TIM_ENABLE(htim);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f042 0201 	orr.w	r2, r2, #1
 800870e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008710:	e008      	b.n	8008724 <HAL_TIM_OC_Start_IT+0x2dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f042 0201 	orr.w	r2, r2, #1
 8008720:	601a      	str	r2, [r3, #0]
 8008722:	e000      	b.n	8008726 <HAL_TIM_OC_Start_IT+0x2de>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008724:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008726:	7bfb      	ldrb	r3, [r7, #15]
}
 8008728:	4618      	mov	r0, r3
 800872a:	3710      	adds	r7, #16
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	40012c00 	.word	0x40012c00
 8008734:	50012c00 	.word	0x50012c00
 8008738:	40013400 	.word	0x40013400
 800873c:	50013400 	.word	0x50013400
 8008740:	40014000 	.word	0x40014000
 8008744:	50014000 	.word	0x50014000
 8008748:	40000400 	.word	0x40000400
 800874c:	50000400 	.word	0x50000400
 8008750:	40000800 	.word	0x40000800
 8008754:	50000800 	.word	0x50000800
 8008758:	40000c00 	.word	0x40000c00
 800875c:	50000c00 	.word	0x50000c00
 8008760:	40001800 	.word	0x40001800
 8008764:	50001800 	.word	0x50001800
 8008768:	00010007 	.word	0x00010007

0800876c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d101      	bne.n	800877e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	e049      	b.n	8008812 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008784:	b2db      	uxtb	r3, r3
 8008786:	2b00      	cmp	r3, #0
 8008788:	d106      	bne.n	8008798 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f7f9 fcb6 	bl	8002104 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2202      	movs	r2, #2
 800879c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	3304      	adds	r3, #4
 80087a8:	4619      	mov	r1, r3
 80087aa:	4610      	mov	r0, r2
 80087ac:	f000 fd24 	bl	80091f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3708      	adds	r7, #8
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
	...

0800881c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d109      	bne.n	8008840 <HAL_TIM_PWM_Start+0x24>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008832:	b2db      	uxtb	r3, r3
 8008834:	2b01      	cmp	r3, #1
 8008836:	bf14      	ite	ne
 8008838:	2301      	movne	r3, #1
 800883a:	2300      	moveq	r3, #0
 800883c:	b2db      	uxtb	r3, r3
 800883e:	e03c      	b.n	80088ba <HAL_TIM_PWM_Start+0x9e>
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	2b04      	cmp	r3, #4
 8008844:	d109      	bne.n	800885a <HAL_TIM_PWM_Start+0x3e>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800884c:	b2db      	uxtb	r3, r3
 800884e:	2b01      	cmp	r3, #1
 8008850:	bf14      	ite	ne
 8008852:	2301      	movne	r3, #1
 8008854:	2300      	moveq	r3, #0
 8008856:	b2db      	uxtb	r3, r3
 8008858:	e02f      	b.n	80088ba <HAL_TIM_PWM_Start+0x9e>
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	2b08      	cmp	r3, #8
 800885e:	d109      	bne.n	8008874 <HAL_TIM_PWM_Start+0x58>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008866:	b2db      	uxtb	r3, r3
 8008868:	2b01      	cmp	r3, #1
 800886a:	bf14      	ite	ne
 800886c:	2301      	movne	r3, #1
 800886e:	2300      	moveq	r3, #0
 8008870:	b2db      	uxtb	r3, r3
 8008872:	e022      	b.n	80088ba <HAL_TIM_PWM_Start+0x9e>
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	2b0c      	cmp	r3, #12
 8008878:	d109      	bne.n	800888e <HAL_TIM_PWM_Start+0x72>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008880:	b2db      	uxtb	r3, r3
 8008882:	2b01      	cmp	r3, #1
 8008884:	bf14      	ite	ne
 8008886:	2301      	movne	r3, #1
 8008888:	2300      	moveq	r3, #0
 800888a:	b2db      	uxtb	r3, r3
 800888c:	e015      	b.n	80088ba <HAL_TIM_PWM_Start+0x9e>
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	2b10      	cmp	r3, #16
 8008892:	d109      	bne.n	80088a8 <HAL_TIM_PWM_Start+0x8c>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800889a:	b2db      	uxtb	r3, r3
 800889c:	2b01      	cmp	r3, #1
 800889e:	bf14      	ite	ne
 80088a0:	2301      	movne	r3, #1
 80088a2:	2300      	moveq	r3, #0
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	e008      	b.n	80088ba <HAL_TIM_PWM_Start+0x9e>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	bf14      	ite	ne
 80088b4:	2301      	movne	r3, #1
 80088b6:	2300      	moveq	r3, #0
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d001      	beq.n	80088c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	e0ce      	b.n	8008a60 <HAL_TIM_PWM_Start+0x244>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d104      	bne.n	80088d2 <HAL_TIM_PWM_Start+0xb6>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2202      	movs	r2, #2
 80088cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80088d0:	e023      	b.n	800891a <HAL_TIM_PWM_Start+0xfe>
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	2b04      	cmp	r3, #4
 80088d6:	d104      	bne.n	80088e2 <HAL_TIM_PWM_Start+0xc6>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2202      	movs	r2, #2
 80088dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80088e0:	e01b      	b.n	800891a <HAL_TIM_PWM_Start+0xfe>
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	2b08      	cmp	r3, #8
 80088e6:	d104      	bne.n	80088f2 <HAL_TIM_PWM_Start+0xd6>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2202      	movs	r2, #2
 80088ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80088f0:	e013      	b.n	800891a <HAL_TIM_PWM_Start+0xfe>
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	2b0c      	cmp	r3, #12
 80088f6:	d104      	bne.n	8008902 <HAL_TIM_PWM_Start+0xe6>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2202      	movs	r2, #2
 80088fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008900:	e00b      	b.n	800891a <HAL_TIM_PWM_Start+0xfe>
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	2b10      	cmp	r3, #16
 8008906:	d104      	bne.n	8008912 <HAL_TIM_PWM_Start+0xf6>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2202      	movs	r2, #2
 800890c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008910:	e003      	b.n	800891a <HAL_TIM_PWM_Start+0xfe>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2202      	movs	r2, #2
 8008916:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2201      	movs	r2, #1
 8008920:	6839      	ldr	r1, [r7, #0]
 8008922:	4618      	mov	r0, r3
 8008924:	f001 f924 	bl	8009b70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a4e      	ldr	r2, [pc, #312]	@ (8008a68 <HAL_TIM_PWM_Start+0x24c>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d018      	beq.n	8008964 <HAL_TIM_PWM_Start+0x148>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a4d      	ldr	r2, [pc, #308]	@ (8008a6c <HAL_TIM_PWM_Start+0x250>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d013      	beq.n	8008964 <HAL_TIM_PWM_Start+0x148>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a4b      	ldr	r2, [pc, #300]	@ (8008a70 <HAL_TIM_PWM_Start+0x254>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d00e      	beq.n	8008964 <HAL_TIM_PWM_Start+0x148>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a4a      	ldr	r2, [pc, #296]	@ (8008a74 <HAL_TIM_PWM_Start+0x258>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d009      	beq.n	8008964 <HAL_TIM_PWM_Start+0x148>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a48      	ldr	r2, [pc, #288]	@ (8008a78 <HAL_TIM_PWM_Start+0x25c>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d004      	beq.n	8008964 <HAL_TIM_PWM_Start+0x148>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a47      	ldr	r2, [pc, #284]	@ (8008a7c <HAL_TIM_PWM_Start+0x260>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d101      	bne.n	8008968 <HAL_TIM_PWM_Start+0x14c>
 8008964:	2301      	movs	r3, #1
 8008966:	e000      	b.n	800896a <HAL_TIM_PWM_Start+0x14e>
 8008968:	2300      	movs	r3, #0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d007      	beq.n	800897e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800897c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a39      	ldr	r2, [pc, #228]	@ (8008a68 <HAL_TIM_PWM_Start+0x24c>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d04a      	beq.n	8008a1e <HAL_TIM_PWM_Start+0x202>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a37      	ldr	r2, [pc, #220]	@ (8008a6c <HAL_TIM_PWM_Start+0x250>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d045      	beq.n	8008a1e <HAL_TIM_PWM_Start+0x202>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800899a:	d040      	beq.n	8008a1e <HAL_TIM_PWM_Start+0x202>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80089a4:	d03b      	beq.n	8008a1e <HAL_TIM_PWM_Start+0x202>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a35      	ldr	r2, [pc, #212]	@ (8008a80 <HAL_TIM_PWM_Start+0x264>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d036      	beq.n	8008a1e <HAL_TIM_PWM_Start+0x202>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a33      	ldr	r2, [pc, #204]	@ (8008a84 <HAL_TIM_PWM_Start+0x268>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d031      	beq.n	8008a1e <HAL_TIM_PWM_Start+0x202>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a32      	ldr	r2, [pc, #200]	@ (8008a88 <HAL_TIM_PWM_Start+0x26c>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d02c      	beq.n	8008a1e <HAL_TIM_PWM_Start+0x202>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a30      	ldr	r2, [pc, #192]	@ (8008a8c <HAL_TIM_PWM_Start+0x270>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d027      	beq.n	8008a1e <HAL_TIM_PWM_Start+0x202>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a2f      	ldr	r2, [pc, #188]	@ (8008a90 <HAL_TIM_PWM_Start+0x274>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d022      	beq.n	8008a1e <HAL_TIM_PWM_Start+0x202>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a2d      	ldr	r2, [pc, #180]	@ (8008a94 <HAL_TIM_PWM_Start+0x278>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d01d      	beq.n	8008a1e <HAL_TIM_PWM_Start+0x202>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a22      	ldr	r2, [pc, #136]	@ (8008a70 <HAL_TIM_PWM_Start+0x254>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d018      	beq.n	8008a1e <HAL_TIM_PWM_Start+0x202>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a20      	ldr	r2, [pc, #128]	@ (8008a74 <HAL_TIM_PWM_Start+0x258>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d013      	beq.n	8008a1e <HAL_TIM_PWM_Start+0x202>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a27      	ldr	r2, [pc, #156]	@ (8008a98 <HAL_TIM_PWM_Start+0x27c>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d00e      	beq.n	8008a1e <HAL_TIM_PWM_Start+0x202>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a25      	ldr	r2, [pc, #148]	@ (8008a9c <HAL_TIM_PWM_Start+0x280>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d009      	beq.n	8008a1e <HAL_TIM_PWM_Start+0x202>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a1a      	ldr	r2, [pc, #104]	@ (8008a78 <HAL_TIM_PWM_Start+0x25c>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d004      	beq.n	8008a1e <HAL_TIM_PWM_Start+0x202>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a18      	ldr	r2, [pc, #96]	@ (8008a7c <HAL_TIM_PWM_Start+0x260>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d115      	bne.n	8008a4a <HAL_TIM_PWM_Start+0x22e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	689a      	ldr	r2, [r3, #8]
 8008a24:	4b1e      	ldr	r3, [pc, #120]	@ (8008aa0 <HAL_TIM_PWM_Start+0x284>)
 8008a26:	4013      	ands	r3, r2
 8008a28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2b06      	cmp	r3, #6
 8008a2e:	d015      	beq.n	8008a5c <HAL_TIM_PWM_Start+0x240>
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a36:	d011      	beq.n	8008a5c <HAL_TIM_PWM_Start+0x240>
    {
      __HAL_TIM_ENABLE(htim);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f042 0201 	orr.w	r2, r2, #1
 8008a46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a48:	e008      	b.n	8008a5c <HAL_TIM_PWM_Start+0x240>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f042 0201 	orr.w	r2, r2, #1
 8008a58:	601a      	str	r2, [r3, #0]
 8008a5a:	e000      	b.n	8008a5e <HAL_TIM_PWM_Start+0x242>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3710      	adds	r7, #16
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	40012c00 	.word	0x40012c00
 8008a6c:	50012c00 	.word	0x50012c00
 8008a70:	40013400 	.word	0x40013400
 8008a74:	50013400 	.word	0x50013400
 8008a78:	40014000 	.word	0x40014000
 8008a7c:	50014000 	.word	0x50014000
 8008a80:	40000400 	.word	0x40000400
 8008a84:	50000400 	.word	0x50000400
 8008a88:	40000800 	.word	0x40000800
 8008a8c:	50000800 	.word	0x50000800
 8008a90:	40000c00 	.word	0x40000c00
 8008a94:	50000c00 	.word	0x50000c00
 8008a98:	40001800 	.word	0x40001800
 8008a9c:	50001800 	.word	0x50001800
 8008aa0:	00010007 	.word	0x00010007

08008aa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	f003 0302 	and.w	r3, r3, #2
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d020      	beq.n	8008b08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f003 0302 	and.w	r3, r3, #2
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d01b      	beq.n	8008b08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f06f 0202 	mvn.w	r2, #2
 8008ad8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2201      	movs	r2, #1
 8008ade:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	699b      	ldr	r3, [r3, #24]
 8008ae6:	f003 0303 	and.w	r3, r3, #3
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d003      	beq.n	8008af6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 fb64 	bl	80091bc <HAL_TIM_IC_CaptureCallback>
 8008af4:	e005      	b.n	8008b02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 fb56 	bl	80091a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 fb67 	bl	80091d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	f003 0304 	and.w	r3, r3, #4
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d020      	beq.n	8008b54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f003 0304 	and.w	r3, r3, #4
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d01b      	beq.n	8008b54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f06f 0204 	mvn.w	r2, #4
 8008b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2202      	movs	r2, #2
 8008b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	699b      	ldr	r3, [r3, #24]
 8008b32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d003      	beq.n	8008b42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 fb3e 	bl	80091bc <HAL_TIM_IC_CaptureCallback>
 8008b40:	e005      	b.n	8008b4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fb30 	bl	80091a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 fb41 	bl	80091d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	f003 0308 	and.w	r3, r3, #8
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d020      	beq.n	8008ba0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f003 0308 	and.w	r3, r3, #8
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d01b      	beq.n	8008ba0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f06f 0208 	mvn.w	r2, #8
 8008b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2204      	movs	r2, #4
 8008b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	69db      	ldr	r3, [r3, #28]
 8008b7e:	f003 0303 	and.w	r3, r3, #3
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d003      	beq.n	8008b8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fb18 	bl	80091bc <HAL_TIM_IC_CaptureCallback>
 8008b8c:	e005      	b.n	8008b9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 fb0a 	bl	80091a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 fb1b 	bl	80091d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	f003 0310 	and.w	r3, r3, #16
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d020      	beq.n	8008bec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f003 0310 	and.w	r3, r3, #16
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d01b      	beq.n	8008bec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f06f 0210 	mvn.w	r2, #16
 8008bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2208      	movs	r2, #8
 8008bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	69db      	ldr	r3, [r3, #28]
 8008bca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d003      	beq.n	8008bda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 faf2 	bl	80091bc <HAL_TIM_IC_CaptureCallback>
 8008bd8:	e005      	b.n	8008be6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 fae4 	bl	80091a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 faf5 	bl	80091d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	f003 0301 	and.w	r3, r3, #1
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00c      	beq.n	8008c10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f003 0301 	and.w	r3, r3, #1
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d007      	beq.n	8008c10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f06f 0201 	mvn.w	r2, #1
 8008c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f7f9 f886 	bl	8001d1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d104      	bne.n	8008c24 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d00c      	beq.n	8008c3e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d007      	beq.n	8008c3e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f001 f933 	bl	8009ea4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d00c      	beq.n	8008c62 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d007      	beq.n	8008c62 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f001 f92b 	bl	8009eb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00c      	beq.n	8008c86 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d007      	beq.n	8008c86 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 faaf 	bl	80091e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	f003 0320 	and.w	r3, r3, #32
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00c      	beq.n	8008caa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f003 0320 	and.w	r3, r3, #32
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d007      	beq.n	8008caa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f06f 0220 	mvn.w	r2, #32
 8008ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f001 f8f3 	bl	8009e90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d00c      	beq.n	8008cce <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d007      	beq.n	8008cce <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f001 f8ff 	bl	8009ecc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00c      	beq.n	8008cf2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d007      	beq.n	8008cf2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f001 f8f7 	bl	8009ee0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d00c      	beq.n	8008d16 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d007      	beq.n	8008d16 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f001 f8ef 	bl	8009ef4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d00c      	beq.n	8008d3a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d007      	beq.n	8008d3a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f001 f8e7 	bl	8009f08 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d3a:	bf00      	nop
 8008d3c:	3710      	adds	r7, #16
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
	...

08008d44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b086      	sub	sp, #24
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d50:	2300      	movs	r3, #0
 8008d52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d101      	bne.n	8008d62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008d5e:	2302      	movs	r3, #2
 8008d60:	e0ff      	b.n	8008f62 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2b14      	cmp	r3, #20
 8008d6e:	f200 80f0 	bhi.w	8008f52 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008d72:	a201      	add	r2, pc, #4	@ (adr r2, 8008d78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d78:	08008dcd 	.word	0x08008dcd
 8008d7c:	08008f53 	.word	0x08008f53
 8008d80:	08008f53 	.word	0x08008f53
 8008d84:	08008f53 	.word	0x08008f53
 8008d88:	08008e0d 	.word	0x08008e0d
 8008d8c:	08008f53 	.word	0x08008f53
 8008d90:	08008f53 	.word	0x08008f53
 8008d94:	08008f53 	.word	0x08008f53
 8008d98:	08008e4f 	.word	0x08008e4f
 8008d9c:	08008f53 	.word	0x08008f53
 8008da0:	08008f53 	.word	0x08008f53
 8008da4:	08008f53 	.word	0x08008f53
 8008da8:	08008e8f 	.word	0x08008e8f
 8008dac:	08008f53 	.word	0x08008f53
 8008db0:	08008f53 	.word	0x08008f53
 8008db4:	08008f53 	.word	0x08008f53
 8008db8:	08008ed1 	.word	0x08008ed1
 8008dbc:	08008f53 	.word	0x08008f53
 8008dc0:	08008f53 	.word	0x08008f53
 8008dc4:	08008f53 	.word	0x08008f53
 8008dc8:	08008f11 	.word	0x08008f11
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	68b9      	ldr	r1, [r7, #8]
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f000 fafa 	bl	80093cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	699a      	ldr	r2, [r3, #24]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f042 0208 	orr.w	r2, r2, #8
 8008de6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	699a      	ldr	r2, [r3, #24]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f022 0204 	bic.w	r2, r2, #4
 8008df6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	6999      	ldr	r1, [r3, #24]
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	691a      	ldr	r2, [r3, #16]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	430a      	orrs	r2, r1
 8008e08:	619a      	str	r2, [r3, #24]
      break;
 8008e0a:	e0a5      	b.n	8008f58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68b9      	ldr	r1, [r7, #8]
 8008e12:	4618      	mov	r0, r3
 8008e14:	f000 fb74 	bl	8009500 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	699a      	ldr	r2, [r3, #24]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	699a      	ldr	r2, [r3, #24]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	6999      	ldr	r1, [r3, #24]
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	691b      	ldr	r3, [r3, #16]
 8008e42:	021a      	lsls	r2, r3, #8
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	430a      	orrs	r2, r1
 8008e4a:	619a      	str	r2, [r3, #24]
      break;
 8008e4c:	e084      	b.n	8008f58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68b9      	ldr	r1, [r7, #8]
 8008e54:	4618      	mov	r0, r3
 8008e56:	f000 fbeb 	bl	8009630 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	69da      	ldr	r2, [r3, #28]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f042 0208 	orr.w	r2, r2, #8
 8008e68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	69da      	ldr	r2, [r3, #28]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f022 0204 	bic.w	r2, r2, #4
 8008e78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	69d9      	ldr	r1, [r3, #28]
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	691a      	ldr	r2, [r3, #16]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	430a      	orrs	r2, r1
 8008e8a:	61da      	str	r2, [r3, #28]
      break;
 8008e8c:	e064      	b.n	8008f58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	68b9      	ldr	r1, [r7, #8]
 8008e94:	4618      	mov	r0, r3
 8008e96:	f000 fc61 	bl	800975c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	69da      	ldr	r2, [r3, #28]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008ea8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	69da      	ldr	r2, [r3, #28]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008eb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	69d9      	ldr	r1, [r3, #28]
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	691b      	ldr	r3, [r3, #16]
 8008ec4:	021a      	lsls	r2, r3, #8
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	430a      	orrs	r2, r1
 8008ecc:	61da      	str	r2, [r3, #28]
      break;
 8008ece:	e043      	b.n	8008f58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	68b9      	ldr	r1, [r7, #8]
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f000 fcd8 	bl	800988c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f042 0208 	orr.w	r2, r2, #8
 8008eea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f022 0204 	bic.w	r2, r2, #4
 8008efa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	691a      	ldr	r2, [r3, #16]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	430a      	orrs	r2, r1
 8008f0c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008f0e:	e023      	b.n	8008f58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	68b9      	ldr	r1, [r7, #8]
 8008f16:	4618      	mov	r0, r3
 8008f18:	f000 fd22 	bl	8009960 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f2a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f3a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	021a      	lsls	r2, r3, #8
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	430a      	orrs	r2, r1
 8008f4e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008f50:	e002      	b.n	8008f58 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	75fb      	strb	r3, [r7, #23]
      break;
 8008f56:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3718      	adds	r7, #24
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop

08008f6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d101      	bne.n	8008f88 <HAL_TIM_ConfigClockSource+0x1c>
 8008f84:	2302      	movs	r3, #2
 8008f86:	e0fe      	b.n	8009186 <HAL_TIM_ConfigClockSource+0x21a>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2202      	movs	r2, #2
 8008f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008fa6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008faa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008fb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	68ba      	ldr	r2, [r7, #8]
 8008fba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008fc4:	f000 80c9 	beq.w	800915a <HAL_TIM_ConfigClockSource+0x1ee>
 8008fc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008fcc:	f200 80ce 	bhi.w	800916c <HAL_TIM_ConfigClockSource+0x200>
 8008fd0:	4a6f      	ldr	r2, [pc, #444]	@ (8009190 <HAL_TIM_ConfigClockSource+0x224>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	f000 80c1 	beq.w	800915a <HAL_TIM_ConfigClockSource+0x1ee>
 8008fd8:	4a6d      	ldr	r2, [pc, #436]	@ (8009190 <HAL_TIM_ConfigClockSource+0x224>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	f200 80c6 	bhi.w	800916c <HAL_TIM_ConfigClockSource+0x200>
 8008fe0:	4a6c      	ldr	r2, [pc, #432]	@ (8009194 <HAL_TIM_ConfigClockSource+0x228>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	f000 80b9 	beq.w	800915a <HAL_TIM_ConfigClockSource+0x1ee>
 8008fe8:	4a6a      	ldr	r2, [pc, #424]	@ (8009194 <HAL_TIM_ConfigClockSource+0x228>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	f200 80be 	bhi.w	800916c <HAL_TIM_ConfigClockSource+0x200>
 8008ff0:	4a69      	ldr	r2, [pc, #420]	@ (8009198 <HAL_TIM_ConfigClockSource+0x22c>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	f000 80b1 	beq.w	800915a <HAL_TIM_ConfigClockSource+0x1ee>
 8008ff8:	4a67      	ldr	r2, [pc, #412]	@ (8009198 <HAL_TIM_ConfigClockSource+0x22c>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	f200 80b6 	bhi.w	800916c <HAL_TIM_ConfigClockSource+0x200>
 8009000:	4a66      	ldr	r2, [pc, #408]	@ (800919c <HAL_TIM_ConfigClockSource+0x230>)
 8009002:	4293      	cmp	r3, r2
 8009004:	f000 80a9 	beq.w	800915a <HAL_TIM_ConfigClockSource+0x1ee>
 8009008:	4a64      	ldr	r2, [pc, #400]	@ (800919c <HAL_TIM_ConfigClockSource+0x230>)
 800900a:	4293      	cmp	r3, r2
 800900c:	f200 80ae 	bhi.w	800916c <HAL_TIM_ConfigClockSource+0x200>
 8009010:	4a63      	ldr	r2, [pc, #396]	@ (80091a0 <HAL_TIM_ConfigClockSource+0x234>)
 8009012:	4293      	cmp	r3, r2
 8009014:	f000 80a1 	beq.w	800915a <HAL_TIM_ConfigClockSource+0x1ee>
 8009018:	4a61      	ldr	r2, [pc, #388]	@ (80091a0 <HAL_TIM_ConfigClockSource+0x234>)
 800901a:	4293      	cmp	r3, r2
 800901c:	f200 80a6 	bhi.w	800916c <HAL_TIM_ConfigClockSource+0x200>
 8009020:	4a60      	ldr	r2, [pc, #384]	@ (80091a4 <HAL_TIM_ConfigClockSource+0x238>)
 8009022:	4293      	cmp	r3, r2
 8009024:	f000 8099 	beq.w	800915a <HAL_TIM_ConfigClockSource+0x1ee>
 8009028:	4a5e      	ldr	r2, [pc, #376]	@ (80091a4 <HAL_TIM_ConfigClockSource+0x238>)
 800902a:	4293      	cmp	r3, r2
 800902c:	f200 809e 	bhi.w	800916c <HAL_TIM_ConfigClockSource+0x200>
 8009030:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009034:	f000 8091 	beq.w	800915a <HAL_TIM_ConfigClockSource+0x1ee>
 8009038:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800903c:	f200 8096 	bhi.w	800916c <HAL_TIM_ConfigClockSource+0x200>
 8009040:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009044:	f000 8089 	beq.w	800915a <HAL_TIM_ConfigClockSource+0x1ee>
 8009048:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800904c:	f200 808e 	bhi.w	800916c <HAL_TIM_ConfigClockSource+0x200>
 8009050:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009054:	d03e      	beq.n	80090d4 <HAL_TIM_ConfigClockSource+0x168>
 8009056:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800905a:	f200 8087 	bhi.w	800916c <HAL_TIM_ConfigClockSource+0x200>
 800905e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009062:	f000 8086 	beq.w	8009172 <HAL_TIM_ConfigClockSource+0x206>
 8009066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800906a:	d87f      	bhi.n	800916c <HAL_TIM_ConfigClockSource+0x200>
 800906c:	2b70      	cmp	r3, #112	@ 0x70
 800906e:	d01a      	beq.n	80090a6 <HAL_TIM_ConfigClockSource+0x13a>
 8009070:	2b70      	cmp	r3, #112	@ 0x70
 8009072:	d87b      	bhi.n	800916c <HAL_TIM_ConfigClockSource+0x200>
 8009074:	2b60      	cmp	r3, #96	@ 0x60
 8009076:	d050      	beq.n	800911a <HAL_TIM_ConfigClockSource+0x1ae>
 8009078:	2b60      	cmp	r3, #96	@ 0x60
 800907a:	d877      	bhi.n	800916c <HAL_TIM_ConfigClockSource+0x200>
 800907c:	2b50      	cmp	r3, #80	@ 0x50
 800907e:	d03c      	beq.n	80090fa <HAL_TIM_ConfigClockSource+0x18e>
 8009080:	2b50      	cmp	r3, #80	@ 0x50
 8009082:	d873      	bhi.n	800916c <HAL_TIM_ConfigClockSource+0x200>
 8009084:	2b40      	cmp	r3, #64	@ 0x40
 8009086:	d058      	beq.n	800913a <HAL_TIM_ConfigClockSource+0x1ce>
 8009088:	2b40      	cmp	r3, #64	@ 0x40
 800908a:	d86f      	bhi.n	800916c <HAL_TIM_ConfigClockSource+0x200>
 800908c:	2b30      	cmp	r3, #48	@ 0x30
 800908e:	d064      	beq.n	800915a <HAL_TIM_ConfigClockSource+0x1ee>
 8009090:	2b30      	cmp	r3, #48	@ 0x30
 8009092:	d86b      	bhi.n	800916c <HAL_TIM_ConfigClockSource+0x200>
 8009094:	2b20      	cmp	r3, #32
 8009096:	d060      	beq.n	800915a <HAL_TIM_ConfigClockSource+0x1ee>
 8009098:	2b20      	cmp	r3, #32
 800909a:	d867      	bhi.n	800916c <HAL_TIM_ConfigClockSource+0x200>
 800909c:	2b00      	cmp	r3, #0
 800909e:	d05c      	beq.n	800915a <HAL_TIM_ConfigClockSource+0x1ee>
 80090a0:	2b10      	cmp	r3, #16
 80090a2:	d05a      	beq.n	800915a <HAL_TIM_ConfigClockSource+0x1ee>
 80090a4:	e062      	b.n	800916c <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80090b6:	f000 fd3b 	bl	8009b30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80090c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	68ba      	ldr	r2, [r7, #8]
 80090d0:	609a      	str	r2, [r3, #8]
      break;
 80090d2:	e04f      	b.n	8009174 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80090e4:	f000 fd24 	bl	8009b30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	689a      	ldr	r2, [r3, #8]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80090f6:	609a      	str	r2, [r3, #8]
      break;
 80090f8:	e03c      	b.n	8009174 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009106:	461a      	mov	r2, r3
 8009108:	f000 fc96 	bl	8009a38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2150      	movs	r1, #80	@ 0x50
 8009112:	4618      	mov	r0, r3
 8009114:	f000 fcef 	bl	8009af6 <TIM_ITRx_SetConfig>
      break;
 8009118:	e02c      	b.n	8009174 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009126:	461a      	mov	r2, r3
 8009128:	f000 fcb5 	bl	8009a96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2160      	movs	r1, #96	@ 0x60
 8009132:	4618      	mov	r0, r3
 8009134:	f000 fcdf 	bl	8009af6 <TIM_ITRx_SetConfig>
      break;
 8009138:	e01c      	b.n	8009174 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009146:	461a      	mov	r2, r3
 8009148:	f000 fc76 	bl	8009a38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2140      	movs	r1, #64	@ 0x40
 8009152:	4618      	mov	r0, r3
 8009154:	f000 fccf 	bl	8009af6 <TIM_ITRx_SetConfig>
      break;
 8009158:	e00c      	b.n	8009174 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4619      	mov	r1, r3
 8009164:	4610      	mov	r0, r2
 8009166:	f000 fcc6 	bl	8009af6 <TIM_ITRx_SetConfig>
      break;
 800916a:	e003      	b.n	8009174 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 800916c:	2301      	movs	r3, #1
 800916e:	73fb      	strb	r3, [r7, #15]
      break;
 8009170:	e000      	b.n	8009174 <HAL_TIM_ConfigClockSource+0x208>
      break;
 8009172:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2201      	movs	r2, #1
 8009178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009184:	7bfb      	ldrb	r3, [r7, #15]
}
 8009186:	4618      	mov	r0, r3
 8009188:	3710      	adds	r7, #16
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	00100070 	.word	0x00100070
 8009194:	00100060 	.word	0x00100060
 8009198:	00100050 	.word	0x00100050
 800919c:	00100040 	.word	0x00100040
 80091a0:	00100030 	.word	0x00100030
 80091a4:	00100020 	.word	0x00100020

080091a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80091b0:	bf00      	nop
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80091c4:	bf00      	nop
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80091d8:	bf00      	nop
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80091ec:	bf00      	nop
 80091ee:	370c      	adds	r7, #12
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b085      	sub	sp, #20
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4a62      	ldr	r2, [pc, #392]	@ (8009394 <TIM_Base_SetConfig+0x19c>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d02b      	beq.n	8009268 <TIM_Base_SetConfig+0x70>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4a61      	ldr	r2, [pc, #388]	@ (8009398 <TIM_Base_SetConfig+0x1a0>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d027      	beq.n	8009268 <TIM_Base_SetConfig+0x70>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800921e:	d023      	beq.n	8009268 <TIM_Base_SetConfig+0x70>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009226:	d01f      	beq.n	8009268 <TIM_Base_SetConfig+0x70>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	4a5c      	ldr	r2, [pc, #368]	@ (800939c <TIM_Base_SetConfig+0x1a4>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d01b      	beq.n	8009268 <TIM_Base_SetConfig+0x70>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4a5b      	ldr	r2, [pc, #364]	@ (80093a0 <TIM_Base_SetConfig+0x1a8>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d017      	beq.n	8009268 <TIM_Base_SetConfig+0x70>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4a5a      	ldr	r2, [pc, #360]	@ (80093a4 <TIM_Base_SetConfig+0x1ac>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d013      	beq.n	8009268 <TIM_Base_SetConfig+0x70>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	4a59      	ldr	r2, [pc, #356]	@ (80093a8 <TIM_Base_SetConfig+0x1b0>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d00f      	beq.n	8009268 <TIM_Base_SetConfig+0x70>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4a58      	ldr	r2, [pc, #352]	@ (80093ac <TIM_Base_SetConfig+0x1b4>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d00b      	beq.n	8009268 <TIM_Base_SetConfig+0x70>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4a57      	ldr	r2, [pc, #348]	@ (80093b0 <TIM_Base_SetConfig+0x1b8>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d007      	beq.n	8009268 <TIM_Base_SetConfig+0x70>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4a56      	ldr	r2, [pc, #344]	@ (80093b4 <TIM_Base_SetConfig+0x1bc>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d003      	beq.n	8009268 <TIM_Base_SetConfig+0x70>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a55      	ldr	r2, [pc, #340]	@ (80093b8 <TIM_Base_SetConfig+0x1c0>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d108      	bne.n	800927a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800926e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	68fa      	ldr	r2, [r7, #12]
 8009276:	4313      	orrs	r3, r2
 8009278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4a45      	ldr	r2, [pc, #276]	@ (8009394 <TIM_Base_SetConfig+0x19c>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d03b      	beq.n	80092fa <TIM_Base_SetConfig+0x102>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	4a44      	ldr	r2, [pc, #272]	@ (8009398 <TIM_Base_SetConfig+0x1a0>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d037      	beq.n	80092fa <TIM_Base_SetConfig+0x102>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009290:	d033      	beq.n	80092fa <TIM_Base_SetConfig+0x102>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009298:	d02f      	beq.n	80092fa <TIM_Base_SetConfig+0x102>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	4a3f      	ldr	r2, [pc, #252]	@ (800939c <TIM_Base_SetConfig+0x1a4>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d02b      	beq.n	80092fa <TIM_Base_SetConfig+0x102>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	4a3e      	ldr	r2, [pc, #248]	@ (80093a0 <TIM_Base_SetConfig+0x1a8>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d027      	beq.n	80092fa <TIM_Base_SetConfig+0x102>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	4a3d      	ldr	r2, [pc, #244]	@ (80093a4 <TIM_Base_SetConfig+0x1ac>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d023      	beq.n	80092fa <TIM_Base_SetConfig+0x102>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	4a3c      	ldr	r2, [pc, #240]	@ (80093a8 <TIM_Base_SetConfig+0x1b0>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d01f      	beq.n	80092fa <TIM_Base_SetConfig+0x102>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	4a3b      	ldr	r2, [pc, #236]	@ (80093ac <TIM_Base_SetConfig+0x1b4>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d01b      	beq.n	80092fa <TIM_Base_SetConfig+0x102>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	4a3a      	ldr	r2, [pc, #232]	@ (80093b0 <TIM_Base_SetConfig+0x1b8>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d017      	beq.n	80092fa <TIM_Base_SetConfig+0x102>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	4a39      	ldr	r2, [pc, #228]	@ (80093b4 <TIM_Base_SetConfig+0x1bc>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d013      	beq.n	80092fa <TIM_Base_SetConfig+0x102>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	4a38      	ldr	r2, [pc, #224]	@ (80093b8 <TIM_Base_SetConfig+0x1c0>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d00f      	beq.n	80092fa <TIM_Base_SetConfig+0x102>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	4a37      	ldr	r2, [pc, #220]	@ (80093bc <TIM_Base_SetConfig+0x1c4>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d00b      	beq.n	80092fa <TIM_Base_SetConfig+0x102>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	4a36      	ldr	r2, [pc, #216]	@ (80093c0 <TIM_Base_SetConfig+0x1c8>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d007      	beq.n	80092fa <TIM_Base_SetConfig+0x102>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4a35      	ldr	r2, [pc, #212]	@ (80093c4 <TIM_Base_SetConfig+0x1cc>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d003      	beq.n	80092fa <TIM_Base_SetConfig+0x102>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4a34      	ldr	r2, [pc, #208]	@ (80093c8 <TIM_Base_SetConfig+0x1d0>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d108      	bne.n	800930c <TIM_Base_SetConfig+0x114>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	68db      	ldr	r3, [r3, #12]
 8009306:	68fa      	ldr	r2, [r7, #12]
 8009308:	4313      	orrs	r3, r2
 800930a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	695b      	ldr	r3, [r3, #20]
 8009316:	4313      	orrs	r3, r2
 8009318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	689a      	ldr	r2, [r3, #8]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4a18      	ldr	r2, [pc, #96]	@ (8009394 <TIM_Base_SetConfig+0x19c>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d013      	beq.n	8009360 <TIM_Base_SetConfig+0x168>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	4a17      	ldr	r2, [pc, #92]	@ (8009398 <TIM_Base_SetConfig+0x1a0>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d00f      	beq.n	8009360 <TIM_Base_SetConfig+0x168>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	4a1c      	ldr	r2, [pc, #112]	@ (80093b4 <TIM_Base_SetConfig+0x1bc>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d00b      	beq.n	8009360 <TIM_Base_SetConfig+0x168>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4a1b      	ldr	r2, [pc, #108]	@ (80093b8 <TIM_Base_SetConfig+0x1c0>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d007      	beq.n	8009360 <TIM_Base_SetConfig+0x168>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4a1c      	ldr	r2, [pc, #112]	@ (80093c4 <TIM_Base_SetConfig+0x1cc>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d003      	beq.n	8009360 <TIM_Base_SetConfig+0x168>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4a1b      	ldr	r2, [pc, #108]	@ (80093c8 <TIM_Base_SetConfig+0x1d0>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d103      	bne.n	8009368 <TIM_Base_SetConfig+0x170>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	691a      	ldr	r2, [r3, #16]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2201      	movs	r2, #1
 800936c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	f003 0301 	and.w	r3, r3, #1
 8009376:	2b01      	cmp	r3, #1
 8009378:	d105      	bne.n	8009386 <TIM_Base_SetConfig+0x18e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	691b      	ldr	r3, [r3, #16]
 800937e:	f023 0201 	bic.w	r2, r3, #1
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	611a      	str	r2, [r3, #16]
  }
}
 8009386:	bf00      	nop
 8009388:	3714      	adds	r7, #20
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr
 8009392:	bf00      	nop
 8009394:	40012c00 	.word	0x40012c00
 8009398:	50012c00 	.word	0x50012c00
 800939c:	40000400 	.word	0x40000400
 80093a0:	50000400 	.word	0x50000400
 80093a4:	40000800 	.word	0x40000800
 80093a8:	50000800 	.word	0x50000800
 80093ac:	40000c00 	.word	0x40000c00
 80093b0:	50000c00 	.word	0x50000c00
 80093b4:	40013400 	.word	0x40013400
 80093b8:	50013400 	.word	0x50013400
 80093bc:	40001800 	.word	0x40001800
 80093c0:	50001800 	.word	0x50001800
 80093c4:	40014000 	.word	0x40014000
 80093c8:	50014000 	.word	0x50014000

080093cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b087      	sub	sp, #28
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6a1b      	ldr	r3, [r3, #32]
 80093da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6a1b      	ldr	r3, [r3, #32]
 80093e0:	f023 0201 	bic.w	r2, r3, #1
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	699b      	ldr	r3, [r3, #24]
 80093f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f023 0303 	bic.w	r3, r3, #3
 8009406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	4313      	orrs	r3, r2
 8009410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	f023 0302 	bic.w	r3, r3, #2
 8009418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	697a      	ldr	r2, [r7, #20]
 8009420:	4313      	orrs	r3, r2
 8009422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a30      	ldr	r2, [pc, #192]	@ (80094e8 <TIM_OC1_SetConfig+0x11c>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d013      	beq.n	8009454 <TIM_OC1_SetConfig+0x88>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a2f      	ldr	r2, [pc, #188]	@ (80094ec <TIM_OC1_SetConfig+0x120>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d00f      	beq.n	8009454 <TIM_OC1_SetConfig+0x88>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a2e      	ldr	r2, [pc, #184]	@ (80094f0 <TIM_OC1_SetConfig+0x124>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d00b      	beq.n	8009454 <TIM_OC1_SetConfig+0x88>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4a2d      	ldr	r2, [pc, #180]	@ (80094f4 <TIM_OC1_SetConfig+0x128>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d007      	beq.n	8009454 <TIM_OC1_SetConfig+0x88>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a2c      	ldr	r2, [pc, #176]	@ (80094f8 <TIM_OC1_SetConfig+0x12c>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d003      	beq.n	8009454 <TIM_OC1_SetConfig+0x88>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	4a2b      	ldr	r2, [pc, #172]	@ (80094fc <TIM_OC1_SetConfig+0x130>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d10c      	bne.n	800946e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	f023 0308 	bic.w	r3, r3, #8
 800945a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	697a      	ldr	r2, [r7, #20]
 8009462:	4313      	orrs	r3, r2
 8009464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	f023 0304 	bic.w	r3, r3, #4
 800946c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	4a1d      	ldr	r2, [pc, #116]	@ (80094e8 <TIM_OC1_SetConfig+0x11c>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d013      	beq.n	800949e <TIM_OC1_SetConfig+0xd2>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	4a1c      	ldr	r2, [pc, #112]	@ (80094ec <TIM_OC1_SetConfig+0x120>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d00f      	beq.n	800949e <TIM_OC1_SetConfig+0xd2>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	4a1b      	ldr	r2, [pc, #108]	@ (80094f0 <TIM_OC1_SetConfig+0x124>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d00b      	beq.n	800949e <TIM_OC1_SetConfig+0xd2>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4a1a      	ldr	r2, [pc, #104]	@ (80094f4 <TIM_OC1_SetConfig+0x128>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d007      	beq.n	800949e <TIM_OC1_SetConfig+0xd2>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	4a19      	ldr	r2, [pc, #100]	@ (80094f8 <TIM_OC1_SetConfig+0x12c>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d003      	beq.n	800949e <TIM_OC1_SetConfig+0xd2>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	4a18      	ldr	r2, [pc, #96]	@ (80094fc <TIM_OC1_SetConfig+0x130>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d111      	bne.n	80094c2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80094a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80094ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	695b      	ldr	r3, [r3, #20]
 80094b2:	693a      	ldr	r2, [r7, #16]
 80094b4:	4313      	orrs	r3, r2
 80094b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	699b      	ldr	r3, [r3, #24]
 80094bc:	693a      	ldr	r2, [r7, #16]
 80094be:	4313      	orrs	r3, r2
 80094c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	693a      	ldr	r2, [r7, #16]
 80094c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	68fa      	ldr	r2, [r7, #12]
 80094cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	685a      	ldr	r2, [r3, #4]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	697a      	ldr	r2, [r7, #20]
 80094da:	621a      	str	r2, [r3, #32]
}
 80094dc:	bf00      	nop
 80094de:	371c      	adds	r7, #28
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr
 80094e8:	40012c00 	.word	0x40012c00
 80094ec:	50012c00 	.word	0x50012c00
 80094f0:	40013400 	.word	0x40013400
 80094f4:	50013400 	.word	0x50013400
 80094f8:	40014000 	.word	0x40014000
 80094fc:	50014000 	.word	0x50014000

08009500 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009500:	b480      	push	{r7}
 8009502:	b087      	sub	sp, #28
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6a1b      	ldr	r3, [r3, #32]
 800950e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6a1b      	ldr	r3, [r3, #32]
 8009514:	f023 0210 	bic.w	r2, r3, #16
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	699b      	ldr	r3, [r3, #24]
 8009526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800952e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800953a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	021b      	lsls	r3, r3, #8
 8009542:	68fa      	ldr	r2, [r7, #12]
 8009544:	4313      	orrs	r3, r2
 8009546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	f023 0320 	bic.w	r3, r3, #32
 800954e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	011b      	lsls	r3, r3, #4
 8009556:	697a      	ldr	r2, [r7, #20]
 8009558:	4313      	orrs	r3, r2
 800955a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	4a2e      	ldr	r2, [pc, #184]	@ (8009618 <TIM_OC2_SetConfig+0x118>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d00b      	beq.n	800957c <TIM_OC2_SetConfig+0x7c>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	4a2d      	ldr	r2, [pc, #180]	@ (800961c <TIM_OC2_SetConfig+0x11c>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d007      	beq.n	800957c <TIM_OC2_SetConfig+0x7c>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	4a2c      	ldr	r2, [pc, #176]	@ (8009620 <TIM_OC2_SetConfig+0x120>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d003      	beq.n	800957c <TIM_OC2_SetConfig+0x7c>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4a2b      	ldr	r2, [pc, #172]	@ (8009624 <TIM_OC2_SetConfig+0x124>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d10d      	bne.n	8009598 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009582:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	68db      	ldr	r3, [r3, #12]
 8009588:	011b      	lsls	r3, r3, #4
 800958a:	697a      	ldr	r2, [r7, #20]
 800958c:	4313      	orrs	r3, r2
 800958e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009596:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4a1f      	ldr	r2, [pc, #124]	@ (8009618 <TIM_OC2_SetConfig+0x118>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d013      	beq.n	80095c8 <TIM_OC2_SetConfig+0xc8>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	4a1e      	ldr	r2, [pc, #120]	@ (800961c <TIM_OC2_SetConfig+0x11c>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d00f      	beq.n	80095c8 <TIM_OC2_SetConfig+0xc8>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a1d      	ldr	r2, [pc, #116]	@ (8009620 <TIM_OC2_SetConfig+0x120>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d00b      	beq.n	80095c8 <TIM_OC2_SetConfig+0xc8>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	4a1c      	ldr	r2, [pc, #112]	@ (8009624 <TIM_OC2_SetConfig+0x124>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d007      	beq.n	80095c8 <TIM_OC2_SetConfig+0xc8>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4a1b      	ldr	r2, [pc, #108]	@ (8009628 <TIM_OC2_SetConfig+0x128>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d003      	beq.n	80095c8 <TIM_OC2_SetConfig+0xc8>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	4a1a      	ldr	r2, [pc, #104]	@ (800962c <TIM_OC2_SetConfig+0x12c>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d113      	bne.n	80095f0 <TIM_OC2_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80095ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80095d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	695b      	ldr	r3, [r3, #20]
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	693a      	ldr	r2, [r7, #16]
 80095e0:	4313      	orrs	r3, r2
 80095e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	699b      	ldr	r3, [r3, #24]
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	693a      	ldr	r2, [r7, #16]
 80095ec:	4313      	orrs	r3, r2
 80095ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	693a      	ldr	r2, [r7, #16]
 80095f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	68fa      	ldr	r2, [r7, #12]
 80095fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	685a      	ldr	r2, [r3, #4]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	697a      	ldr	r2, [r7, #20]
 8009608:	621a      	str	r2, [r3, #32]
}
 800960a:	bf00      	nop
 800960c:	371c      	adds	r7, #28
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr
 8009616:	bf00      	nop
 8009618:	40012c00 	.word	0x40012c00
 800961c:	50012c00 	.word	0x50012c00
 8009620:	40013400 	.word	0x40013400
 8009624:	50013400 	.word	0x50013400
 8009628:	40014000 	.word	0x40014000
 800962c:	50014000 	.word	0x50014000

08009630 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009630:	b480      	push	{r7}
 8009632:	b087      	sub	sp, #28
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a1b      	ldr	r3, [r3, #32]
 800963e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6a1b      	ldr	r3, [r3, #32]
 8009644:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	69db      	ldr	r3, [r3, #28]
 8009656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800965e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f023 0303 	bic.w	r3, r3, #3
 800966a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	68fa      	ldr	r2, [r7, #12]
 8009672:	4313      	orrs	r3, r2
 8009674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800967c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	021b      	lsls	r3, r3, #8
 8009684:	697a      	ldr	r2, [r7, #20]
 8009686:	4313      	orrs	r3, r2
 8009688:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	4a2d      	ldr	r2, [pc, #180]	@ (8009744 <TIM_OC3_SetConfig+0x114>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d00b      	beq.n	80096aa <TIM_OC3_SetConfig+0x7a>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4a2c      	ldr	r2, [pc, #176]	@ (8009748 <TIM_OC3_SetConfig+0x118>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d007      	beq.n	80096aa <TIM_OC3_SetConfig+0x7a>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4a2b      	ldr	r2, [pc, #172]	@ (800974c <TIM_OC3_SetConfig+0x11c>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d003      	beq.n	80096aa <TIM_OC3_SetConfig+0x7a>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4a2a      	ldr	r2, [pc, #168]	@ (8009750 <TIM_OC3_SetConfig+0x120>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d10d      	bne.n	80096c6 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80096b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	68db      	ldr	r3, [r3, #12]
 80096b6:	021b      	lsls	r3, r3, #8
 80096b8:	697a      	ldr	r2, [r7, #20]
 80096ba:	4313      	orrs	r3, r2
 80096bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80096c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4a1e      	ldr	r2, [pc, #120]	@ (8009744 <TIM_OC3_SetConfig+0x114>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d013      	beq.n	80096f6 <TIM_OC3_SetConfig+0xc6>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4a1d      	ldr	r2, [pc, #116]	@ (8009748 <TIM_OC3_SetConfig+0x118>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d00f      	beq.n	80096f6 <TIM_OC3_SetConfig+0xc6>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4a1c      	ldr	r2, [pc, #112]	@ (800974c <TIM_OC3_SetConfig+0x11c>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d00b      	beq.n	80096f6 <TIM_OC3_SetConfig+0xc6>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4a1b      	ldr	r2, [pc, #108]	@ (8009750 <TIM_OC3_SetConfig+0x120>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d007      	beq.n	80096f6 <TIM_OC3_SetConfig+0xc6>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4a1a      	ldr	r2, [pc, #104]	@ (8009754 <TIM_OC3_SetConfig+0x124>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d003      	beq.n	80096f6 <TIM_OC3_SetConfig+0xc6>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4a19      	ldr	r2, [pc, #100]	@ (8009758 <TIM_OC3_SetConfig+0x128>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d113      	bne.n	800971e <TIM_OC3_SetConfig+0xee>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80096fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	695b      	ldr	r3, [r3, #20]
 800970a:	011b      	lsls	r3, r3, #4
 800970c:	693a      	ldr	r2, [r7, #16]
 800970e:	4313      	orrs	r3, r2
 8009710:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	699b      	ldr	r3, [r3, #24]
 8009716:	011b      	lsls	r3, r3, #4
 8009718:	693a      	ldr	r2, [r7, #16]
 800971a:	4313      	orrs	r3, r2
 800971c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	693a      	ldr	r2, [r7, #16]
 8009722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	68fa      	ldr	r2, [r7, #12]
 8009728:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	685a      	ldr	r2, [r3, #4]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	697a      	ldr	r2, [r7, #20]
 8009736:	621a      	str	r2, [r3, #32]
}
 8009738:	bf00      	nop
 800973a:	371c      	adds	r7, #28
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr
 8009744:	40012c00 	.word	0x40012c00
 8009748:	50012c00 	.word	0x50012c00
 800974c:	40013400 	.word	0x40013400
 8009750:	50013400 	.word	0x50013400
 8009754:	40014000 	.word	0x40014000
 8009758:	50014000 	.word	0x50014000

0800975c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800975c:	b480      	push	{r7}
 800975e:	b087      	sub	sp, #28
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6a1b      	ldr	r3, [r3, #32]
 800976a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6a1b      	ldr	r3, [r3, #32]
 8009770:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	69db      	ldr	r3, [r3, #28]
 8009782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800978a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800978e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009796:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	021b      	lsls	r3, r3, #8
 800979e:	68fa      	ldr	r2, [r7, #12]
 80097a0:	4313      	orrs	r3, r2
 80097a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80097aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	031b      	lsls	r3, r3, #12
 80097b2:	697a      	ldr	r2, [r7, #20]
 80097b4:	4313      	orrs	r3, r2
 80097b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4a2e      	ldr	r2, [pc, #184]	@ (8009874 <TIM_OC4_SetConfig+0x118>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d00b      	beq.n	80097d8 <TIM_OC4_SetConfig+0x7c>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4a2d      	ldr	r2, [pc, #180]	@ (8009878 <TIM_OC4_SetConfig+0x11c>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d007      	beq.n	80097d8 <TIM_OC4_SetConfig+0x7c>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4a2c      	ldr	r2, [pc, #176]	@ (800987c <TIM_OC4_SetConfig+0x120>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d003      	beq.n	80097d8 <TIM_OC4_SetConfig+0x7c>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	4a2b      	ldr	r2, [pc, #172]	@ (8009880 <TIM_OC4_SetConfig+0x124>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d10d      	bne.n	80097f4 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80097de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	031b      	lsls	r3, r3, #12
 80097e6:	697a      	ldr	r2, [r7, #20]
 80097e8:	4313      	orrs	r3, r2
 80097ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80097f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4a1f      	ldr	r2, [pc, #124]	@ (8009874 <TIM_OC4_SetConfig+0x118>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d013      	beq.n	8009824 <TIM_OC4_SetConfig+0xc8>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	4a1e      	ldr	r2, [pc, #120]	@ (8009878 <TIM_OC4_SetConfig+0x11c>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d00f      	beq.n	8009824 <TIM_OC4_SetConfig+0xc8>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	4a1d      	ldr	r2, [pc, #116]	@ (800987c <TIM_OC4_SetConfig+0x120>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d00b      	beq.n	8009824 <TIM_OC4_SetConfig+0xc8>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	4a1c      	ldr	r2, [pc, #112]	@ (8009880 <TIM_OC4_SetConfig+0x124>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d007      	beq.n	8009824 <TIM_OC4_SetConfig+0xc8>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	4a1b      	ldr	r2, [pc, #108]	@ (8009884 <TIM_OC4_SetConfig+0x128>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d003      	beq.n	8009824 <TIM_OC4_SetConfig+0xc8>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	4a1a      	ldr	r2, [pc, #104]	@ (8009888 <TIM_OC4_SetConfig+0x12c>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d113      	bne.n	800984c <TIM_OC4_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800982a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009832:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	695b      	ldr	r3, [r3, #20]
 8009838:	019b      	lsls	r3, r3, #6
 800983a:	693a      	ldr	r2, [r7, #16]
 800983c:	4313      	orrs	r3, r2
 800983e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	699b      	ldr	r3, [r3, #24]
 8009844:	019b      	lsls	r3, r3, #6
 8009846:	693a      	ldr	r2, [r7, #16]
 8009848:	4313      	orrs	r3, r2
 800984a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	693a      	ldr	r2, [r7, #16]
 8009850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	68fa      	ldr	r2, [r7, #12]
 8009856:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	685a      	ldr	r2, [r3, #4]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	697a      	ldr	r2, [r7, #20]
 8009864:	621a      	str	r2, [r3, #32]
}
 8009866:	bf00      	nop
 8009868:	371c      	adds	r7, #28
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr
 8009872:	bf00      	nop
 8009874:	40012c00 	.word	0x40012c00
 8009878:	50012c00 	.word	0x50012c00
 800987c:	40013400 	.word	0x40013400
 8009880:	50013400 	.word	0x50013400
 8009884:	40014000 	.word	0x40014000
 8009888:	50014000 	.word	0x50014000

0800988c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800988c:	b480      	push	{r7}
 800988e:	b087      	sub	sp, #28
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6a1b      	ldr	r3, [r3, #32]
 800989a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a1b      	ldr	r3, [r3, #32]
 80098a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	68fa      	ldr	r2, [r7, #12]
 80098c6:	4313      	orrs	r3, r2
 80098c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80098d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	041b      	lsls	r3, r3, #16
 80098d8:	693a      	ldr	r2, [r7, #16]
 80098da:	4313      	orrs	r3, r2
 80098dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	4a19      	ldr	r2, [pc, #100]	@ (8009948 <TIM_OC5_SetConfig+0xbc>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d013      	beq.n	800990e <TIM_OC5_SetConfig+0x82>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4a18      	ldr	r2, [pc, #96]	@ (800994c <TIM_OC5_SetConfig+0xc0>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d00f      	beq.n	800990e <TIM_OC5_SetConfig+0x82>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4a17      	ldr	r2, [pc, #92]	@ (8009950 <TIM_OC5_SetConfig+0xc4>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d00b      	beq.n	800990e <TIM_OC5_SetConfig+0x82>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	4a16      	ldr	r2, [pc, #88]	@ (8009954 <TIM_OC5_SetConfig+0xc8>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d007      	beq.n	800990e <TIM_OC5_SetConfig+0x82>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	4a15      	ldr	r2, [pc, #84]	@ (8009958 <TIM_OC5_SetConfig+0xcc>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d003      	beq.n	800990e <TIM_OC5_SetConfig+0x82>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	4a14      	ldr	r2, [pc, #80]	@ (800995c <TIM_OC5_SetConfig+0xd0>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d109      	bne.n	8009922 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009914:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	695b      	ldr	r3, [r3, #20]
 800991a:	021b      	lsls	r3, r3, #8
 800991c:	697a      	ldr	r2, [r7, #20]
 800991e:	4313      	orrs	r3, r2
 8009920:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	697a      	ldr	r2, [r7, #20]
 8009926:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	68fa      	ldr	r2, [r7, #12]
 800992c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	685a      	ldr	r2, [r3, #4]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	693a      	ldr	r2, [r7, #16]
 800993a:	621a      	str	r2, [r3, #32]
}
 800993c:	bf00      	nop
 800993e:	371c      	adds	r7, #28
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr
 8009948:	40012c00 	.word	0x40012c00
 800994c:	50012c00 	.word	0x50012c00
 8009950:	40013400 	.word	0x40013400
 8009954:	50013400 	.word	0x50013400
 8009958:	40014000 	.word	0x40014000
 800995c:	50014000 	.word	0x50014000

08009960 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009960:	b480      	push	{r7}
 8009962:	b087      	sub	sp, #28
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6a1b      	ldr	r3, [r3, #32]
 800996e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6a1b      	ldr	r3, [r3, #32]
 8009974:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800998e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	021b      	lsls	r3, r3, #8
 800999a:	68fa      	ldr	r2, [r7, #12]
 800999c:	4313      	orrs	r3, r2
 800999e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80099a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	051b      	lsls	r3, r3, #20
 80099ae:	693a      	ldr	r2, [r7, #16]
 80099b0:	4313      	orrs	r3, r2
 80099b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4a1a      	ldr	r2, [pc, #104]	@ (8009a20 <TIM_OC6_SetConfig+0xc0>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d013      	beq.n	80099e4 <TIM_OC6_SetConfig+0x84>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4a19      	ldr	r2, [pc, #100]	@ (8009a24 <TIM_OC6_SetConfig+0xc4>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d00f      	beq.n	80099e4 <TIM_OC6_SetConfig+0x84>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	4a18      	ldr	r2, [pc, #96]	@ (8009a28 <TIM_OC6_SetConfig+0xc8>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d00b      	beq.n	80099e4 <TIM_OC6_SetConfig+0x84>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	4a17      	ldr	r2, [pc, #92]	@ (8009a2c <TIM_OC6_SetConfig+0xcc>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d007      	beq.n	80099e4 <TIM_OC6_SetConfig+0x84>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	4a16      	ldr	r2, [pc, #88]	@ (8009a30 <TIM_OC6_SetConfig+0xd0>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d003      	beq.n	80099e4 <TIM_OC6_SetConfig+0x84>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	4a15      	ldr	r2, [pc, #84]	@ (8009a34 <TIM_OC6_SetConfig+0xd4>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d109      	bne.n	80099f8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80099ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	695b      	ldr	r3, [r3, #20]
 80099f0:	029b      	lsls	r3, r3, #10
 80099f2:	697a      	ldr	r2, [r7, #20]
 80099f4:	4313      	orrs	r3, r2
 80099f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	697a      	ldr	r2, [r7, #20]
 80099fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	68fa      	ldr	r2, [r7, #12]
 8009a02:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	685a      	ldr	r2, [r3, #4]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	693a      	ldr	r2, [r7, #16]
 8009a10:	621a      	str	r2, [r3, #32]
}
 8009a12:	bf00      	nop
 8009a14:	371c      	adds	r7, #28
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr
 8009a1e:	bf00      	nop
 8009a20:	40012c00 	.word	0x40012c00
 8009a24:	50012c00 	.word	0x50012c00
 8009a28:	40013400 	.word	0x40013400
 8009a2c:	50013400 	.word	0x50013400
 8009a30:	40014000 	.word	0x40014000
 8009a34:	50014000 	.word	0x50014000

08009a38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b087      	sub	sp, #28
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	6a1b      	ldr	r3, [r3, #32]
 8009a48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	6a1b      	ldr	r3, [r3, #32]
 8009a4e:	f023 0201 	bic.w	r2, r3, #1
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	699b      	ldr	r3, [r3, #24]
 8009a5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009a62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	011b      	lsls	r3, r3, #4
 8009a68:	693a      	ldr	r2, [r7, #16]
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	f023 030a 	bic.w	r3, r3, #10
 8009a74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009a76:	697a      	ldr	r2, [r7, #20]
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	693a      	ldr	r2, [r7, #16]
 8009a82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	697a      	ldr	r2, [r7, #20]
 8009a88:	621a      	str	r2, [r3, #32]
}
 8009a8a:	bf00      	nop
 8009a8c:	371c      	adds	r7, #28
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr

08009a96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a96:	b480      	push	{r7}
 8009a98:	b087      	sub	sp, #28
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	60f8      	str	r0, [r7, #12]
 8009a9e:	60b9      	str	r1, [r7, #8]
 8009aa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	6a1b      	ldr	r3, [r3, #32]
 8009aa6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	6a1b      	ldr	r3, [r3, #32]
 8009aac:	f023 0210 	bic.w	r2, r3, #16
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	699b      	ldr	r3, [r3, #24]
 8009ab8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009ac0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	031b      	lsls	r3, r3, #12
 8009ac6:	693a      	ldr	r2, [r7, #16]
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009ad2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	011b      	lsls	r3, r3, #4
 8009ad8:	697a      	ldr	r2, [r7, #20]
 8009ada:	4313      	orrs	r3, r2
 8009adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	693a      	ldr	r2, [r7, #16]
 8009ae2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	697a      	ldr	r2, [r7, #20]
 8009ae8:	621a      	str	r2, [r3, #32]
}
 8009aea:	bf00      	nop
 8009aec:	371c      	adds	r7, #28
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr

08009af6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009af6:	b480      	push	{r7}
 8009af8:	b085      	sub	sp, #20
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	6078      	str	r0, [r7, #4]
 8009afe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009b0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009b12:	683a      	ldr	r2, [r7, #0]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	4313      	orrs	r3, r2
 8009b18:	f043 0307 	orr.w	r3, r3, #7
 8009b1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	68fa      	ldr	r2, [r7, #12]
 8009b22:	609a      	str	r2, [r3, #8]
}
 8009b24:	bf00      	nop
 8009b26:	3714      	adds	r7, #20
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b087      	sub	sp, #28
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	60b9      	str	r1, [r7, #8]
 8009b3a:	607a      	str	r2, [r7, #4]
 8009b3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	021a      	lsls	r2, r3, #8
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	431a      	orrs	r2, r3
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	4313      	orrs	r3, r2
 8009b58:	697a      	ldr	r2, [r7, #20]
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	697a      	ldr	r2, [r7, #20]
 8009b62:	609a      	str	r2, [r3, #8]
}
 8009b64:	bf00      	nop
 8009b66:	371c      	adds	r7, #28
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr

08009b70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b087      	sub	sp, #28
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	60f8      	str	r0, [r7, #12]
 8009b78:	60b9      	str	r1, [r7, #8]
 8009b7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	f003 031f 	and.w	r3, r3, #31
 8009b82:	2201      	movs	r2, #1
 8009b84:	fa02 f303 	lsl.w	r3, r2, r3
 8009b88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	6a1a      	ldr	r2, [r3, #32]
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	43db      	mvns	r3, r3
 8009b92:	401a      	ands	r2, r3
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	6a1a      	ldr	r2, [r3, #32]
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	f003 031f 	and.w	r3, r3, #31
 8009ba2:	6879      	ldr	r1, [r7, #4]
 8009ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ba8:	431a      	orrs	r2, r3
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	621a      	str	r2, [r3, #32]
}
 8009bae:	bf00      	nop
 8009bb0:	371c      	adds	r7, #28
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr
	...

08009bbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b085      	sub	sp, #20
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d101      	bne.n	8009bd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009bd0:	2302      	movs	r3, #2
 8009bd2:	e0a1      	b.n	8009d18 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2202      	movs	r2, #2
 8009be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	689b      	ldr	r3, [r3, #8]
 8009bf2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a4a      	ldr	r2, [pc, #296]	@ (8009d24 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d00e      	beq.n	8009c1c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a49      	ldr	r2, [pc, #292]	@ (8009d28 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d009      	beq.n	8009c1c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a47      	ldr	r2, [pc, #284]	@ (8009d2c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d004      	beq.n	8009c1c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a46      	ldr	r2, [pc, #280]	@ (8009d30 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d108      	bne.n	8009c2e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009c22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	68fa      	ldr	r2, [r7, #12]
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009c34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	68fa      	ldr	r2, [r7, #12]
 8009c40:	4313      	orrs	r3, r2
 8009c42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	68fa      	ldr	r2, [r7, #12]
 8009c4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a34      	ldr	r2, [pc, #208]	@ (8009d24 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d04a      	beq.n	8009cec <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a33      	ldr	r2, [pc, #204]	@ (8009d28 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d045      	beq.n	8009cec <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c68:	d040      	beq.n	8009cec <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009c72:	d03b      	beq.n	8009cec <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4a2e      	ldr	r2, [pc, #184]	@ (8009d34 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d036      	beq.n	8009cec <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4a2d      	ldr	r2, [pc, #180]	@ (8009d38 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d031      	beq.n	8009cec <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a2b      	ldr	r2, [pc, #172]	@ (8009d3c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d02c      	beq.n	8009cec <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a2a      	ldr	r2, [pc, #168]	@ (8009d40 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d027      	beq.n	8009cec <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a28      	ldr	r2, [pc, #160]	@ (8009d44 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d022      	beq.n	8009cec <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a27      	ldr	r2, [pc, #156]	@ (8009d48 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d01d      	beq.n	8009cec <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a1d      	ldr	r2, [pc, #116]	@ (8009d2c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d018      	beq.n	8009cec <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a1c      	ldr	r2, [pc, #112]	@ (8009d30 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d013      	beq.n	8009cec <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a20      	ldr	r2, [pc, #128]	@ (8009d4c <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d00e      	beq.n	8009cec <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4a1f      	ldr	r2, [pc, #124]	@ (8009d50 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d009      	beq.n	8009cec <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a1d      	ldr	r2, [pc, #116]	@ (8009d54 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d004      	beq.n	8009cec <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a1c      	ldr	r2, [pc, #112]	@ (8009d58 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d10c      	bne.n	8009d06 <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009cf2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	68ba      	ldr	r2, [r7, #8]
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	68ba      	ldr	r2, [r7, #8]
 8009d04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2201      	movs	r2, #1
 8009d0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2200      	movs	r2, #0
 8009d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009d16:	2300      	movs	r3, #0
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3714      	adds	r7, #20
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr
 8009d24:	40012c00 	.word	0x40012c00
 8009d28:	50012c00 	.word	0x50012c00
 8009d2c:	40013400 	.word	0x40013400
 8009d30:	50013400 	.word	0x50013400
 8009d34:	40000400 	.word	0x40000400
 8009d38:	50000400 	.word	0x50000400
 8009d3c:	40000800 	.word	0x40000800
 8009d40:	50000800 	.word	0x50000800
 8009d44:	40000c00 	.word	0x40000c00
 8009d48:	50000c00 	.word	0x50000c00
 8009d4c:	40001800 	.word	0x40001800
 8009d50:	50001800 	.word	0x50001800
 8009d54:	40014000 	.word	0x40014000
 8009d58:	50014000 	.word	0x50014000

08009d5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b085      	sub	sp, #20
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009d66:	2300      	movs	r3, #0
 8009d68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d101      	bne.n	8009d78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009d74:	2302      	movs	r3, #2
 8009d76:	e07d      	b.n	8009e74 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	68db      	ldr	r3, [r3, #12]
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	4313      	orrs	r3, r2
 8009da8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4313      	orrs	r3, r2
 8009db6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	691b      	ldr	r3, [r3, #16]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	695b      	ldr	r3, [r3, #20]
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dde:	4313      	orrs	r3, r2
 8009de0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	699b      	ldr	r3, [r3, #24]
 8009dec:	041b      	lsls	r3, r3, #16
 8009dee:	4313      	orrs	r3, r2
 8009df0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	69db      	ldr	r3, [r3, #28]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a1e      	ldr	r2, [pc, #120]	@ (8009e80 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d00e      	beq.n	8009e28 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a1d      	ldr	r2, [pc, #116]	@ (8009e84 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d009      	beq.n	8009e28 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a1b      	ldr	r2, [pc, #108]	@ (8009e88 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d004      	beq.n	8009e28 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a1a      	ldr	r2, [pc, #104]	@ (8009e8c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d11c      	bne.n	8009e62 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e32:	051b      	lsls	r3, r3, #20
 8009e34:	4313      	orrs	r3, r2
 8009e36:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	6a1b      	ldr	r3, [r3, #32]
 8009e42:	4313      	orrs	r3, r2
 8009e44:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e50:	4313      	orrs	r3, r2
 8009e52:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	68fa      	ldr	r2, [r7, #12]
 8009e68:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009e72:	2300      	movs	r3, #0
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3714      	adds	r7, #20
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr
 8009e80:	40012c00 	.word	0x40012c00
 8009e84:	50012c00 	.word	0x50012c00
 8009e88:	40013400 	.word	0x40013400
 8009e8c:	50013400 	.word	0x50013400

08009e90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b083      	sub	sp, #12
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e98:	bf00      	nop
 8009e9a:	370c      	adds	r7, #12
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr

08009ea4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009eac:	bf00      	nop
 8009eae:	370c      	adds	r7, #12
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr

08009eb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b083      	sub	sp, #12
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009ec0:	bf00      	nop
 8009ec2:	370c      	adds	r7, #12
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009ed4:	bf00      	nop
 8009ed6:	370c      	adds	r7, #12
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr

08009ee0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b083      	sub	sp, #12
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009ee8:	bf00      	nop
 8009eea:	370c      	adds	r7, #12
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009efc:	bf00      	nop
 8009efe:	370c      	adds	r7, #12
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr

08009f08 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009f10:	bf00      	nop
 8009f12:	370c      	adds	r7, #12
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr

08009f1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b082      	sub	sp, #8
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d101      	bne.n	8009f2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e042      	b.n	8009fb4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d106      	bne.n	8009f46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f7f8 f95f 	bl	8002204 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2224      	movs	r2, #36	@ 0x24
 8009f4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f022 0201 	bic.w	r2, r2, #1
 8009f5c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d002      	beq.n	8009f6c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 fde4 	bl	800ab34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 fc33 	bl	800a7d8 <UART_SetConfig>
 8009f72:	4603      	mov	r3, r0
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d101      	bne.n	8009f7c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	e01b      	b.n	8009fb4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	685a      	ldr	r2, [r3, #4]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009f8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	689a      	ldr	r2, [r3, #8]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009f9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f042 0201 	orr.w	r2, r2, #1
 8009faa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 fe63 	bl	800ac78 <UART_CheckIdleState>
 8009fb2:	4603      	mov	r3, r0
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3708      	adds	r7, #8
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b08a      	sub	sp, #40	@ 0x28
 8009fc0:	af02      	add	r7, sp, #8
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	60b9      	str	r1, [r7, #8]
 8009fc6:	603b      	str	r3, [r7, #0]
 8009fc8:	4613      	mov	r3, r2
 8009fca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fd2:	2b20      	cmp	r3, #32
 8009fd4:	f040 808b 	bne.w	800a0ee <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d002      	beq.n	8009fe4 <HAL_UART_Transmit+0x28>
 8009fde:	88fb      	ldrh	r3, [r7, #6]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d101      	bne.n	8009fe8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e083      	b.n	800a0f0 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ff2:	2b80      	cmp	r3, #128	@ 0x80
 8009ff4:	d107      	bne.n	800a006 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	689a      	ldr	r2, [r3, #8]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a004:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2200      	movs	r2, #0
 800a00a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2221      	movs	r2, #33	@ 0x21
 800a012:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a016:	f7f8 fc4f 	bl	80028b8 <HAL_GetTick>
 800a01a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	88fa      	ldrh	r2, [r7, #6]
 800a020:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	88fa      	ldrh	r2, [r7, #6]
 800a028:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	689b      	ldr	r3, [r3, #8]
 800a030:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a034:	d108      	bne.n	800a048 <HAL_UART_Transmit+0x8c>
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	691b      	ldr	r3, [r3, #16]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d104      	bne.n	800a048 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800a03e:	2300      	movs	r3, #0
 800a040:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	61bb      	str	r3, [r7, #24]
 800a046:	e003      	b.n	800a050 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a04c:	2300      	movs	r3, #0
 800a04e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a050:	e030      	b.n	800a0b4 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	9300      	str	r3, [sp, #0]
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	2200      	movs	r2, #0
 800a05a:	2180      	movs	r1, #128	@ 0x80
 800a05c:	68f8      	ldr	r0, [r7, #12]
 800a05e:	f000 feb5 	bl	800adcc <UART_WaitOnFlagUntilTimeout>
 800a062:	4603      	mov	r3, r0
 800a064:	2b00      	cmp	r3, #0
 800a066:	d005      	beq.n	800a074 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2220      	movs	r2, #32
 800a06c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a070:	2303      	movs	r3, #3
 800a072:	e03d      	b.n	800a0f0 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800a074:	69fb      	ldr	r3, [r7, #28]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d10b      	bne.n	800a092 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a07a:	69bb      	ldr	r3, [r7, #24]
 800a07c:	881b      	ldrh	r3, [r3, #0]
 800a07e:	461a      	mov	r2, r3
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a088:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	3302      	adds	r3, #2
 800a08e:	61bb      	str	r3, [r7, #24]
 800a090:	e007      	b.n	800a0a2 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	781a      	ldrb	r2, [r3, #0]
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a09c:	69fb      	ldr	r3, [r7, #28]
 800a09e:	3301      	adds	r3, #1
 800a0a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	3b01      	subs	r3, #1
 800a0ac:	b29a      	uxth	r2, r3
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d1c8      	bne.n	800a052 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	9300      	str	r3, [sp, #0]
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	2140      	movs	r1, #64	@ 0x40
 800a0ca:	68f8      	ldr	r0, [r7, #12]
 800a0cc:	f000 fe7e 	bl	800adcc <UART_WaitOnFlagUntilTimeout>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d005      	beq.n	800a0e2 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2220      	movs	r2, #32
 800a0da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a0de:	2303      	movs	r3, #3
 800a0e0:	e006      	b.n	800a0f0 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2220      	movs	r2, #32
 800a0e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	e000      	b.n	800a0f0 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800a0ee:	2302      	movs	r3, #2
  }
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3720      	adds	r7, #32
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b08a      	sub	sp, #40	@ 0x28
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	4613      	mov	r3, r2
 800a104:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a10c:	2b20      	cmp	r3, #32
 800a10e:	d14b      	bne.n	800a1a8 <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d002      	beq.n	800a11c <HAL_UART_Receive_IT+0x24>
 800a116:	88fb      	ldrh	r3, [r7, #6]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d101      	bne.n	800a120 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a11c:	2301      	movs	r3, #1
 800a11e:	e044      	b.n	800a1aa <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2200      	movs	r2, #0
 800a124:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	689b      	ldr	r3, [r3, #8]
 800a12c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a130:	2b40      	cmp	r3, #64	@ 0x40
 800a132:	d107      	bne.n	800a144 <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	689a      	ldr	r2, [r3, #8]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a142:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a1a      	ldr	r2, [pc, #104]	@ (800a1b4 <HAL_UART_Receive_IT+0xbc>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d024      	beq.n	800a198 <HAL_UART_Receive_IT+0xa0>
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4a19      	ldr	r2, [pc, #100]	@ (800a1b8 <HAL_UART_Receive_IT+0xc0>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d01f      	beq.n	800a198 <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a162:	2b00      	cmp	r3, #0
 800a164:	d018      	beq.n	800a198 <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	e853 3f00 	ldrex	r3, [r3]
 800a172:	613b      	str	r3, [r7, #16]
   return(result);
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a17a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	461a      	mov	r2, r3
 800a182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a184:	623b      	str	r3, [r7, #32]
 800a186:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a188:	69f9      	ldr	r1, [r7, #28]
 800a18a:	6a3a      	ldr	r2, [r7, #32]
 800a18c:	e841 2300 	strex	r3, r2, [r1]
 800a190:	61bb      	str	r3, [r7, #24]
   return(result);
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d1e6      	bne.n	800a166 <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a198:	88fb      	ldrh	r3, [r7, #6]
 800a19a:	461a      	mov	r2, r3
 800a19c:	68b9      	ldr	r1, [r7, #8]
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	f000 fe82 	bl	800aea8 <UART_Start_Receive_IT>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	e000      	b.n	800a1aa <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800a1a8:	2302      	movs	r3, #2
  }
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3728      	adds	r7, #40	@ 0x28
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
 800a1b2:	bf00      	nop
 800a1b4:	44002400 	.word	0x44002400
 800a1b8:	54002400 	.word	0x54002400

0800a1bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b0ae      	sub	sp, #184	@ 0xb8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	69db      	ldr	r3, [r3, #28]
 800a1ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a1e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a1e6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a1ea:	4013      	ands	r3, r2
 800a1ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 800a1f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d11b      	bne.n	800a230 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a1f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a1fc:	f003 0320 	and.w	r3, r3, #32
 800a200:	2b00      	cmp	r3, #0
 800a202:	d015      	beq.n	800a230 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a204:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a208:	f003 0320 	and.w	r3, r3, #32
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d105      	bne.n	800a21c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a210:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a214:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d009      	beq.n	800a230 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a220:	2b00      	cmp	r3, #0
 800a222:	f000 82ac 	beq.w	800a77e <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	4798      	blx	r3
      }
      return;
 800a22e:	e2a6      	b.n	800a77e <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a230:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a234:	2b00      	cmp	r3, #0
 800a236:	f000 80fd 	beq.w	800a434 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a23a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a23e:	4b7a      	ldr	r3, [pc, #488]	@ (800a428 <HAL_UART_IRQHandler+0x26c>)
 800a240:	4013      	ands	r3, r2
 800a242:	2b00      	cmp	r3, #0
 800a244:	d106      	bne.n	800a254 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a246:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a24a:	4b78      	ldr	r3, [pc, #480]	@ (800a42c <HAL_UART_IRQHandler+0x270>)
 800a24c:	4013      	ands	r3, r2
 800a24e:	2b00      	cmp	r3, #0
 800a250:	f000 80f0 	beq.w	800a434 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a254:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a258:	f003 0301 	and.w	r3, r3, #1
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d011      	beq.n	800a284 <HAL_UART_IRQHandler+0xc8>
 800a260:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d00b      	beq.n	800a284 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2201      	movs	r2, #1
 800a272:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a27a:	f043 0201 	orr.w	r2, r3, #1
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a284:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a288:	f003 0302 	and.w	r3, r3, #2
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d011      	beq.n	800a2b4 <HAL_UART_IRQHandler+0xf8>
 800a290:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a294:	f003 0301 	and.w	r3, r3, #1
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d00b      	beq.n	800a2b4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2202      	movs	r2, #2
 800a2a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2aa:	f043 0204 	orr.w	r2, r3, #4
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a2b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a2b8:	f003 0304 	and.w	r3, r3, #4
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d011      	beq.n	800a2e4 <HAL_UART_IRQHandler+0x128>
 800a2c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a2c4:	f003 0301 	and.w	r3, r3, #1
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d00b      	beq.n	800a2e4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	2204      	movs	r2, #4
 800a2d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2da:	f043 0202 	orr.w	r2, r3, #2
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a2e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a2e8:	f003 0308 	and.w	r3, r3, #8
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d017      	beq.n	800a320 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a2f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a2f4:	f003 0320 	and.w	r3, r3, #32
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d105      	bne.n	800a308 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a2fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a300:	4b49      	ldr	r3, [pc, #292]	@ (800a428 <HAL_UART_IRQHandler+0x26c>)
 800a302:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a304:	2b00      	cmp	r3, #0
 800a306:	d00b      	beq.n	800a320 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	2208      	movs	r2, #8
 800a30e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a316:	f043 0208 	orr.w	r2, r3, #8
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a320:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a324:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d012      	beq.n	800a352 <HAL_UART_IRQHandler+0x196>
 800a32c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a330:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a334:	2b00      	cmp	r3, #0
 800a336:	d00c      	beq.n	800a352 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a340:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a348:	f043 0220 	orr.w	r2, r3, #32
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a358:	2b00      	cmp	r3, #0
 800a35a:	f000 8212 	beq.w	800a782 <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a35e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a362:	f003 0320 	and.w	r3, r3, #32
 800a366:	2b00      	cmp	r3, #0
 800a368:	d013      	beq.n	800a392 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a36a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a36e:	f003 0320 	and.w	r3, r3, #32
 800a372:	2b00      	cmp	r3, #0
 800a374:	d105      	bne.n	800a382 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a376:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a37a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d007      	beq.n	800a392 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a386:	2b00      	cmp	r3, #0
 800a388:	d003      	beq.n	800a392 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a398:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	689b      	ldr	r3, [r3, #8]
 800a3a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3a6:	2b40      	cmp	r3, #64	@ 0x40
 800a3a8:	d005      	beq.n	800a3b6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a3aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a3ae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d02e      	beq.n	800a414 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 fe98 	bl	800b0ec <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	689b      	ldr	r3, [r3, #8]
 800a3c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3c6:	2b40      	cmp	r3, #64	@ 0x40
 800a3c8:	d120      	bne.n	800a40c <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d017      	beq.n	800a404 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3da:	4a15      	ldr	r2, [pc, #84]	@ (800a430 <HAL_UART_IRQHandler+0x274>)
 800a3dc:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7f8 fca3 	bl	8002d30 <HAL_DMA_Abort_IT>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d019      	beq.n	800a424 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a3fe:	4610      	mov	r0, r2
 800a400:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a402:	e00f      	b.n	800a424 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f000 f9d1 	bl	800a7ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a40a:	e00b      	b.n	800a424 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 f9cd 	bl	800a7ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a412:	e007      	b.n	800a424 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f000 f9c9 	bl	800a7ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2200      	movs	r2, #0
 800a41e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a422:	e1ae      	b.n	800a782 <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a424:	bf00      	nop
    return;
 800a426:	e1ac      	b.n	800a782 <HAL_UART_IRQHandler+0x5c6>
 800a428:	10000001 	.word	0x10000001
 800a42c:	04000120 	.word	0x04000120
 800a430:	0800b1b9 	.word	0x0800b1b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a438:	2b01      	cmp	r3, #1
 800a43a:	f040 8142 	bne.w	800a6c2 <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a43e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a442:	f003 0310 	and.w	r3, r3, #16
 800a446:	2b00      	cmp	r3, #0
 800a448:	f000 813b 	beq.w	800a6c2 <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a44c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a450:	f003 0310 	and.w	r3, r3, #16
 800a454:	2b00      	cmp	r3, #0
 800a456:	f000 8134 	beq.w	800a6c2 <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	2210      	movs	r2, #16
 800a460:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a46c:	2b40      	cmp	r3, #64	@ 0x40
 800a46e:	f040 80aa 	bne.w	800a5c6 <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a47c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 800a480:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a484:	2b00      	cmp	r3, #0
 800a486:	f000 8084 	beq.w	800a592 <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a490:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800a494:	429a      	cmp	r2, r3
 800a496:	d27c      	bcs.n	800a592 <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800a49e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4aa:	2b81      	cmp	r3, #129	@ 0x81
 800a4ac:	d060      	beq.n	800a570 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a4b6:	e853 3f00 	ldrex	r3, [r3]
 800a4ba:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a4bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a4be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a4c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a4d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a4d4:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4d6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a4d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a4dc:	e841 2300 	strex	r3, r2, [r1]
 800a4e0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a4e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d1e2      	bne.n	800a4ae <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	3308      	adds	r3, #8
 800a4ee:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a4f2:	e853 3f00 	ldrex	r3, [r3]
 800a4f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a4f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a4fa:	f023 0301 	bic.w	r3, r3, #1
 800a4fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	3308      	adds	r3, #8
 800a508:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a50c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a50e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a510:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a512:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a514:	e841 2300 	strex	r3, r2, [r1]
 800a518:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a51a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d1e3      	bne.n	800a4e8 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2220      	movs	r2, #32
 800a524:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a534:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a536:	e853 3f00 	ldrex	r3, [r3]
 800a53a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a53c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a53e:	f023 0310 	bic.w	r3, r3, #16
 800a542:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	461a      	mov	r2, r3
 800a54c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a550:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a552:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a554:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a556:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a558:	e841 2300 	strex	r3, r2, [r1]
 800a55c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a55e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a560:	2b00      	cmp	r3, #0
 800a562:	d1e4      	bne.n	800a52e <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7f8 fb64 	bl	8002c38 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2202      	movs	r2, #2
 800a574:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a582:	b29b      	uxth	r3, r3
 800a584:	1ad3      	subs	r3, r2, r3
 800a586:	b29b      	uxth	r3, r3
 800a588:	4619      	mov	r1, r3
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 f918 	bl	800a7c0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a590:	e0f9      	b.n	800a786 <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a598:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800a59c:	429a      	cmp	r2, r3
 800a59e:	f040 80f2 	bne.w	800a786 <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5aa:	2b81      	cmp	r3, #129	@ 0x81
 800a5ac:	f040 80eb 	bne.w	800a786 <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2202      	movs	r2, #2
 800a5b4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a5bc:	4619      	mov	r1, r3
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 f8fe 	bl	800a7c0 <HAL_UARTEx_RxEventCallback>
      return;
 800a5c4:	e0df      	b.n	800a786 <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	1ad3      	subs	r3, r2, r3
 800a5d6:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f000 80d1 	beq.w	800a78a <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 800a5e8:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	f000 80cc 	beq.w	800a78a <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5fa:	e853 3f00 	ldrex	r3, [r3]
 800a5fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a602:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a606:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	461a      	mov	r2, r3
 800a610:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a614:	647b      	str	r3, [r7, #68]	@ 0x44
 800a616:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a618:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a61a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a61c:	e841 2300 	strex	r3, r2, [r1]
 800a620:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a624:	2b00      	cmp	r3, #0
 800a626:	d1e4      	bne.n	800a5f2 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	3308      	adds	r3, #8
 800a62e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a632:	e853 3f00 	ldrex	r3, [r3]
 800a636:	623b      	str	r3, [r7, #32]
   return(result);
 800a638:	6a3b      	ldr	r3, [r7, #32]
 800a63a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a63e:	f023 0301 	bic.w	r3, r3, #1
 800a642:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	3308      	adds	r3, #8
 800a64c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800a650:	633a      	str	r2, [r7, #48]	@ 0x30
 800a652:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a654:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a656:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a658:	e841 2300 	strex	r3, r2, [r1]
 800a65c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a65e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a660:	2b00      	cmp	r3, #0
 800a662:	d1e1      	bne.n	800a628 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2220      	movs	r2, #32
 800a668:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2200      	movs	r2, #0
 800a676:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	e853 3f00 	ldrex	r3, [r3]
 800a684:	60fb      	str	r3, [r7, #12]
   return(result);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f023 0310 	bic.w	r3, r3, #16
 800a68c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	461a      	mov	r2, r3
 800a696:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a69a:	61fb      	str	r3, [r7, #28]
 800a69c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a69e:	69b9      	ldr	r1, [r7, #24]
 800a6a0:	69fa      	ldr	r2, [r7, #28]
 800a6a2:	e841 2300 	strex	r3, r2, [r1]
 800a6a6:	617b      	str	r3, [r7, #20]
   return(result);
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d1e4      	bne.n	800a678 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2202      	movs	r2, #2
 800a6b2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a6b4:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 f880 	bl	800a7c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a6c0:	e063      	b.n	800a78a <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a6c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a6c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d00e      	beq.n	800a6ec <HAL_UART_IRQHandler+0x530>
 800a6ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a6d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d008      	beq.n	800a6ec <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a6e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f001 fadd 	bl	800bca4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a6ea:	e051      	b.n	800a790 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a6ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a6f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d014      	beq.n	800a722 <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a6f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a6fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a700:	2b00      	cmp	r3, #0
 800a702:	d105      	bne.n	800a710 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a704:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a708:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d008      	beq.n	800a722 <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a714:	2b00      	cmp	r3, #0
 800a716:	d03a      	beq.n	800a78e <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	4798      	blx	r3
    }
    return;
 800a720:	e035      	b.n	800a78e <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a722:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d009      	beq.n	800a742 <HAL_UART_IRQHandler+0x586>
 800a72e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a736:	2b00      	cmp	r3, #0
 800a738:	d003      	beq.n	800a742 <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 fd4e 	bl	800b1dc <UART_EndTransmit_IT>
    return;
 800a740:	e026      	b.n	800a790 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a742:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a746:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d009      	beq.n	800a762 <HAL_UART_IRQHandler+0x5a6>
 800a74e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a752:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a756:	2b00      	cmp	r3, #0
 800a758:	d003      	beq.n	800a762 <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f001 fab6 	bl	800bccc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a760:	e016      	b.n	800a790 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a762:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a766:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d010      	beq.n	800a790 <HAL_UART_IRQHandler+0x5d4>
 800a76e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a772:	2b00      	cmp	r3, #0
 800a774:	da0c      	bge.n	800a790 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f001 fa9e 	bl	800bcb8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a77c:	e008      	b.n	800a790 <HAL_UART_IRQHandler+0x5d4>
      return;
 800a77e:	bf00      	nop
 800a780:	e006      	b.n	800a790 <HAL_UART_IRQHandler+0x5d4>
    return;
 800a782:	bf00      	nop
 800a784:	e004      	b.n	800a790 <HAL_UART_IRQHandler+0x5d4>
      return;
 800a786:	bf00      	nop
 800a788:	e002      	b.n	800a790 <HAL_UART_IRQHandler+0x5d4>
      return;
 800a78a:	bf00      	nop
 800a78c:	e000      	b.n	800a790 <HAL_UART_IRQHandler+0x5d4>
    return;
 800a78e:	bf00      	nop
  }
}
 800a790:	37b8      	adds	r7, #184	@ 0xb8
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop

0800a798 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a798:	b480      	push	{r7}
 800a79a:	b083      	sub	sp, #12
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a7a0:	bf00      	nop
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a7b4:	bf00      	nop
 800a7b6:	370c      	adds	r7, #12
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	460b      	mov	r3, r1
 800a7ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a7cc:	bf00      	nop
 800a7ce:	370c      	adds	r7, #12
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a7d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a7dc:	b094      	sub	sp, #80	@ 0x50
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a7e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	4b83      	ldr	r3, [pc, #524]	@ (800a9fc <UART_SetConfig+0x224>)
 800a7ee:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a7f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7f2:	689a      	ldr	r2, [r3, #8]
 800a7f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7f6:	691b      	ldr	r3, [r3, #16]
 800a7f8:	431a      	orrs	r2, r3
 800a7fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7fc:	695b      	ldr	r3, [r3, #20]
 800a7fe:	431a      	orrs	r2, r3
 800a800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a802:	69db      	ldr	r3, [r3, #28]
 800a804:	4313      	orrs	r3, r2
 800a806:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	497c      	ldr	r1, [pc, #496]	@ (800aa00 <UART_SetConfig+0x228>)
 800a810:	4019      	ands	r1, r3
 800a812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a818:	430b      	orrs	r3, r1
 800a81a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a81c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a828:	68d9      	ldr	r1, [r3, #12]
 800a82a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a82c:	681a      	ldr	r2, [r3, #0]
 800a82e:	ea40 0301 	orr.w	r3, r0, r1
 800a832:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a836:	699b      	ldr	r3, [r3, #24]
 800a838:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a83a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	4b6f      	ldr	r3, [pc, #444]	@ (800a9fc <UART_SetConfig+0x224>)
 800a840:	429a      	cmp	r2, r3
 800a842:	d009      	beq.n	800a858 <UART_SetConfig+0x80>
 800a844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	4b6e      	ldr	r3, [pc, #440]	@ (800aa04 <UART_SetConfig+0x22c>)
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d004      	beq.n	800a858 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a84e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a850:	6a1a      	ldr	r2, [r3, #32]
 800a852:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a854:	4313      	orrs	r3, r2
 800a856:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	689b      	ldr	r3, [r3, #8]
 800a85e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800a862:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800a866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a868:	681a      	ldr	r2, [r3, #0]
 800a86a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a86c:	430b      	orrs	r3, r1
 800a86e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a876:	f023 000f 	bic.w	r0, r3, #15
 800a87a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a87c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a87e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	ea40 0301 	orr.w	r3, r0, r1
 800a886:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a88a:	681a      	ldr	r2, [r3, #0]
 800a88c:	4b5e      	ldr	r3, [pc, #376]	@ (800aa08 <UART_SetConfig+0x230>)
 800a88e:	429a      	cmp	r2, r3
 800a890:	d102      	bne.n	800a898 <UART_SetConfig+0xc0>
 800a892:	2301      	movs	r3, #1
 800a894:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a896:	e032      	b.n	800a8fe <UART_SetConfig+0x126>
 800a898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	4b5b      	ldr	r3, [pc, #364]	@ (800aa0c <UART_SetConfig+0x234>)
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d102      	bne.n	800a8a8 <UART_SetConfig+0xd0>
 800a8a2:	2302      	movs	r3, #2
 800a8a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8a6:	e02a      	b.n	800a8fe <UART_SetConfig+0x126>
 800a8a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	4b58      	ldr	r3, [pc, #352]	@ (800aa10 <UART_SetConfig+0x238>)
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d102      	bne.n	800a8b8 <UART_SetConfig+0xe0>
 800a8b2:	2304      	movs	r3, #4
 800a8b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8b6:	e022      	b.n	800a8fe <UART_SetConfig+0x126>
 800a8b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	4b55      	ldr	r3, [pc, #340]	@ (800aa14 <UART_SetConfig+0x23c>)
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d102      	bne.n	800a8c8 <UART_SetConfig+0xf0>
 800a8c2:	2308      	movs	r3, #8
 800a8c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8c6:	e01a      	b.n	800a8fe <UART_SetConfig+0x126>
 800a8c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ca:	681a      	ldr	r2, [r3, #0]
 800a8cc:	4b52      	ldr	r3, [pc, #328]	@ (800aa18 <UART_SetConfig+0x240>)
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d102      	bne.n	800a8d8 <UART_SetConfig+0x100>
 800a8d2:	2310      	movs	r3, #16
 800a8d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8d6:	e012      	b.n	800a8fe <UART_SetConfig+0x126>
 800a8d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	4b4f      	ldr	r3, [pc, #316]	@ (800aa1c <UART_SetConfig+0x244>)
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d102      	bne.n	800a8e8 <UART_SetConfig+0x110>
 800a8e2:	2320      	movs	r3, #32
 800a8e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8e6:	e00a      	b.n	800a8fe <UART_SetConfig+0x126>
 800a8e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	4b43      	ldr	r3, [pc, #268]	@ (800a9fc <UART_SetConfig+0x224>)
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d103      	bne.n	800a8fa <UART_SetConfig+0x122>
 800a8f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a8f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8f8:	e001      	b.n	800a8fe <UART_SetConfig+0x126>
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a8fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a900:	681a      	ldr	r2, [r3, #0]
 800a902:	4b3e      	ldr	r3, [pc, #248]	@ (800a9fc <UART_SetConfig+0x224>)
 800a904:	429a      	cmp	r2, r3
 800a906:	d005      	beq.n	800a914 <UART_SetConfig+0x13c>
 800a908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a90a:	681a      	ldr	r2, [r3, #0]
 800a90c:	4b3d      	ldr	r3, [pc, #244]	@ (800aa04 <UART_SetConfig+0x22c>)
 800a90e:	429a      	cmp	r2, r3
 800a910:	f040 8088 	bne.w	800aa24 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a914:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a916:	2200      	movs	r2, #0
 800a918:	623b      	str	r3, [r7, #32]
 800a91a:	627a      	str	r2, [r7, #36]	@ 0x24
 800a91c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a920:	f7fc f8ba 	bl	8006a98 <HAL_RCCEx_GetPeriphCLKFreq>
 800a924:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800a926:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a928:	2b00      	cmp	r3, #0
 800a92a:	f000 80eb 	beq.w	800ab04 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a92e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a932:	4a3b      	ldr	r2, [pc, #236]	@ (800aa20 <UART_SetConfig+0x248>)
 800a934:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a938:	461a      	mov	r2, r3
 800a93a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a93c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a940:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a944:	685a      	ldr	r2, [r3, #4]
 800a946:	4613      	mov	r3, r2
 800a948:	005b      	lsls	r3, r3, #1
 800a94a:	4413      	add	r3, r2
 800a94c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a94e:	429a      	cmp	r2, r3
 800a950:	d305      	bcc.n	800a95e <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a954:	685b      	ldr	r3, [r3, #4]
 800a956:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a958:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d903      	bls.n	800a966 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800a95e:	2301      	movs	r3, #1
 800a960:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a964:	e048      	b.n	800a9f8 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a966:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a968:	2200      	movs	r2, #0
 800a96a:	61bb      	str	r3, [r7, #24]
 800a96c:	61fa      	str	r2, [r7, #28]
 800a96e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a972:	4a2b      	ldr	r2, [pc, #172]	@ (800aa20 <UART_SetConfig+0x248>)
 800a974:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a978:	b29b      	uxth	r3, r3
 800a97a:	2200      	movs	r2, #0
 800a97c:	613b      	str	r3, [r7, #16]
 800a97e:	617a      	str	r2, [r7, #20]
 800a980:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a984:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a988:	f7f6 f992 	bl	8000cb0 <__aeabi_uldivmod>
 800a98c:	4602      	mov	r2, r0
 800a98e:	460b      	mov	r3, r1
 800a990:	4610      	mov	r0, r2
 800a992:	4619      	mov	r1, r3
 800a994:	f04f 0200 	mov.w	r2, #0
 800a998:	f04f 0300 	mov.w	r3, #0
 800a99c:	020b      	lsls	r3, r1, #8
 800a99e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a9a2:	0202      	lsls	r2, r0, #8
 800a9a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a9a6:	6849      	ldr	r1, [r1, #4]
 800a9a8:	0849      	lsrs	r1, r1, #1
 800a9aa:	2000      	movs	r0, #0
 800a9ac:	460c      	mov	r4, r1
 800a9ae:	4605      	mov	r5, r0
 800a9b0:	eb12 0804 	adds.w	r8, r2, r4
 800a9b4:	eb43 0905 	adc.w	r9, r3, r5
 800a9b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	60bb      	str	r3, [r7, #8]
 800a9c0:	60fa      	str	r2, [r7, #12]
 800a9c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a9c6:	4640      	mov	r0, r8
 800a9c8:	4649      	mov	r1, r9
 800a9ca:	f7f6 f971 	bl	8000cb0 <__aeabi_uldivmod>
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	4613      	mov	r3, r2
 800a9d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a9d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a9dc:	d308      	bcc.n	800a9f0 <UART_SetConfig+0x218>
 800a9de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9e4:	d204      	bcs.n	800a9f0 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800a9e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a9ec:	60da      	str	r2, [r3, #12]
 800a9ee:	e003      	b.n	800a9f8 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800a9f6:	e085      	b.n	800ab04 <UART_SetConfig+0x32c>
 800a9f8:	e084      	b.n	800ab04 <UART_SetConfig+0x32c>
 800a9fa:	bf00      	nop
 800a9fc:	44002400 	.word	0x44002400
 800aa00:	cfff69f3 	.word	0xcfff69f3
 800aa04:	54002400 	.word	0x54002400
 800aa08:	40013800 	.word	0x40013800
 800aa0c:	40004400 	.word	0x40004400
 800aa10:	40004800 	.word	0x40004800
 800aa14:	40004c00 	.word	0x40004c00
 800aa18:	40005000 	.word	0x40005000
 800aa1c:	40006400 	.word	0x40006400
 800aa20:	08010b18 	.word	0x08010b18
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa26:	69db      	ldr	r3, [r3, #28]
 800aa28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa2c:	d13c      	bne.n	800aaa8 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800aa2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa30:	2200      	movs	r2, #0
 800aa32:	603b      	str	r3, [r7, #0]
 800aa34:	607a      	str	r2, [r7, #4]
 800aa36:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa3a:	f7fc f82d 	bl	8006a98 <HAL_RCCEx_GetPeriphCLKFreq>
 800aa3e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aa40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d05e      	beq.n	800ab04 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa4a:	4a39      	ldr	r2, [pc, #228]	@ (800ab30 <UART_SetConfig+0x358>)
 800aa4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa50:	461a      	mov	r2, r3
 800aa52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa54:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa58:	005a      	lsls	r2, r3, #1
 800aa5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	085b      	lsrs	r3, r3, #1
 800aa60:	441a      	add	r2, r3
 800aa62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa6e:	2b0f      	cmp	r3, #15
 800aa70:	d916      	bls.n	800aaa0 <UART_SetConfig+0x2c8>
 800aa72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa78:	d212      	bcs.n	800aaa0 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aa7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa7c:	b29b      	uxth	r3, r3
 800aa7e:	f023 030f 	bic.w	r3, r3, #15
 800aa82:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aa84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa86:	085b      	lsrs	r3, r3, #1
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	f003 0307 	and.w	r3, r3, #7
 800aa8e:	b29a      	uxth	r2, r3
 800aa90:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800aa92:	4313      	orrs	r3, r2
 800aa94:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800aa96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800aa9c:	60da      	str	r2, [r3, #12]
 800aa9e:	e031      	b.n	800ab04 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800aaa6:	e02d      	b.n	800ab04 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800aaa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aaaa:	2200      	movs	r2, #0
 800aaac:	469a      	mov	sl, r3
 800aaae:	4693      	mov	fp, r2
 800aab0:	4650      	mov	r0, sl
 800aab2:	4659      	mov	r1, fp
 800aab4:	f7fb fff0 	bl	8006a98 <HAL_RCCEx_GetPeriphCLKFreq>
 800aab8:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800aaba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d021      	beq.n	800ab04 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aac4:	4a1a      	ldr	r2, [pc, #104]	@ (800ab30 <UART_SetConfig+0x358>)
 800aac6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aaca:	461a      	mov	r2, r3
 800aacc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aace:	fbb3 f2f2 	udiv	r2, r3, r2
 800aad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	085b      	lsrs	r3, r3, #1
 800aad8:	441a      	add	r2, r3
 800aada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	fbb2 f3f3 	udiv	r3, r2, r3
 800aae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aae6:	2b0f      	cmp	r3, #15
 800aae8:	d909      	bls.n	800aafe <UART_SetConfig+0x326>
 800aaea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aaf0:	d205      	bcs.n	800aafe <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aaf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaf4:	b29a      	uxth	r2, r3
 800aaf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	60da      	str	r2, [r3, #12]
 800aafc:	e002      	b.n	800ab04 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800aafe:	2301      	movs	r3, #1
 800ab00:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ab04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab06:	2201      	movs	r2, #1
 800ab08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ab0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab0e:	2201      	movs	r2, #1
 800ab10:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab16:	2200      	movs	r2, #0
 800ab18:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ab1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ab20:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3750      	adds	r7, #80	@ 0x50
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab2e:	bf00      	nop
 800ab30:	08010b18 	.word	0x08010b18

0800ab34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab40:	f003 0308 	and.w	r3, r3, #8
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d00a      	beq.n	800ab5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	430a      	orrs	r2, r1
 800ab5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab62:	f003 0301 	and.w	r3, r3, #1
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d00a      	beq.n	800ab80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	430a      	orrs	r2, r1
 800ab7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab84:	f003 0302 	and.w	r3, r3, #2
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d00a      	beq.n	800aba2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	430a      	orrs	r2, r1
 800aba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aba6:	f003 0304 	and.w	r3, r3, #4
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d00a      	beq.n	800abc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	430a      	orrs	r2, r1
 800abc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abc8:	f003 0310 	and.w	r3, r3, #16
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d00a      	beq.n	800abe6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	689b      	ldr	r3, [r3, #8]
 800abd6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	430a      	orrs	r2, r1
 800abe4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abea:	f003 0320 	and.w	r3, r3, #32
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d00a      	beq.n	800ac08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	689b      	ldr	r3, [r3, #8]
 800abf8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	430a      	orrs	r2, r1
 800ac06:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d01a      	beq.n	800ac4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	430a      	orrs	r2, r1
 800ac28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac32:	d10a      	bne.n	800ac4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	430a      	orrs	r2, r1
 800ac48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d00a      	beq.n	800ac6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	430a      	orrs	r2, r1
 800ac6a:	605a      	str	r2, [r3, #4]
  }
}
 800ac6c:	bf00      	nop
 800ac6e:	370c      	adds	r7, #12
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr

0800ac78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b098      	sub	sp, #96	@ 0x60
 800ac7c:	af02      	add	r7, sp, #8
 800ac7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2200      	movs	r2, #0
 800ac84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ac88:	f7f7 fe16 	bl	80028b8 <HAL_GetTick>
 800ac8c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f003 0308 	and.w	r3, r3, #8
 800ac98:	2b08      	cmp	r3, #8
 800ac9a:	d12f      	bne.n	800acfc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aca0:	9300      	str	r3, [sp, #0]
 800aca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aca4:	2200      	movs	r2, #0
 800aca6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f000 f88e 	bl	800adcc <UART_WaitOnFlagUntilTimeout>
 800acb0:	4603      	mov	r3, r0
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d022      	beq.n	800acfc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acbe:	e853 3f00 	ldrex	r3, [r3]
 800acc2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800acc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800acca:	653b      	str	r3, [r7, #80]	@ 0x50
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	461a      	mov	r2, r3
 800acd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800acd4:	647b      	str	r3, [r7, #68]	@ 0x44
 800acd6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800acda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800acdc:	e841 2300 	strex	r3, r2, [r1]
 800ace0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ace2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d1e6      	bne.n	800acb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2220      	movs	r2, #32
 800acec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acf8:	2303      	movs	r3, #3
 800acfa:	e063      	b.n	800adc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f003 0304 	and.w	r3, r3, #4
 800ad06:	2b04      	cmp	r3, #4
 800ad08:	d149      	bne.n	800ad9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad0a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ad0e:	9300      	str	r3, [sp, #0]
 800ad10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad12:	2200      	movs	r2, #0
 800ad14:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 f857 	bl	800adcc <UART_WaitOnFlagUntilTimeout>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d03c      	beq.n	800ad9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad2c:	e853 3f00 	ldrex	r3, [r3]
 800ad30:	623b      	str	r3, [r7, #32]
   return(result);
 800ad32:	6a3b      	ldr	r3, [r7, #32]
 800ad34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	461a      	mov	r2, r3
 800ad40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad42:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad44:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad4a:	e841 2300 	strex	r3, r2, [r1]
 800ad4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ad50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d1e6      	bne.n	800ad24 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	3308      	adds	r3, #8
 800ad5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	e853 3f00 	ldrex	r3, [r3]
 800ad64:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f023 0301 	bic.w	r3, r3, #1
 800ad6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	3308      	adds	r3, #8
 800ad74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad76:	61fa      	str	r2, [r7, #28]
 800ad78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7a:	69b9      	ldr	r1, [r7, #24]
 800ad7c:	69fa      	ldr	r2, [r7, #28]
 800ad7e:	e841 2300 	strex	r3, r2, [r1]
 800ad82:	617b      	str	r3, [r7, #20]
   return(result);
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d1e5      	bne.n	800ad56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2220      	movs	r2, #32
 800ad8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2200      	movs	r2, #0
 800ad96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad9a:	2303      	movs	r3, #3
 800ad9c:	e012      	b.n	800adc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2220      	movs	r2, #32
 800ada2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2220      	movs	r2, #32
 800adaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2200      	movs	r2, #0
 800adb2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2200      	movs	r2, #0
 800adb8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2200      	movs	r2, #0
 800adbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800adc2:	2300      	movs	r3, #0
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3758      	adds	r7, #88	@ 0x58
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b084      	sub	sp, #16
 800add0:	af00      	add	r7, sp, #0
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	60b9      	str	r1, [r7, #8]
 800add6:	603b      	str	r3, [r7, #0]
 800add8:	4613      	mov	r3, r2
 800adda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800addc:	e04f      	b.n	800ae7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800adde:	69bb      	ldr	r3, [r7, #24]
 800ade0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ade4:	d04b      	beq.n	800ae7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ade6:	f7f7 fd67 	bl	80028b8 <HAL_GetTick>
 800adea:	4602      	mov	r2, r0
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	1ad3      	subs	r3, r2, r3
 800adf0:	69ba      	ldr	r2, [r7, #24]
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d302      	bcc.n	800adfc <UART_WaitOnFlagUntilTimeout+0x30>
 800adf6:	69bb      	ldr	r3, [r7, #24]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d101      	bne.n	800ae00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800adfc:	2303      	movs	r3, #3
 800adfe:	e04e      	b.n	800ae9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f003 0304 	and.w	r3, r3, #4
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d037      	beq.n	800ae7e <UART_WaitOnFlagUntilTimeout+0xb2>
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	2b80      	cmp	r3, #128	@ 0x80
 800ae12:	d034      	beq.n	800ae7e <UART_WaitOnFlagUntilTimeout+0xb2>
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	2b40      	cmp	r3, #64	@ 0x40
 800ae18:	d031      	beq.n	800ae7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	69db      	ldr	r3, [r3, #28]
 800ae20:	f003 0308 	and.w	r3, r3, #8
 800ae24:	2b08      	cmp	r3, #8
 800ae26:	d110      	bne.n	800ae4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2208      	movs	r2, #8
 800ae2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ae30:	68f8      	ldr	r0, [r7, #12]
 800ae32:	f000 f95b 	bl	800b0ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2208      	movs	r2, #8
 800ae3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	2200      	movs	r2, #0
 800ae42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ae46:	2301      	movs	r3, #1
 800ae48:	e029      	b.n	800ae9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	69db      	ldr	r3, [r3, #28]
 800ae50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ae54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae58:	d111      	bne.n	800ae7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ae62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ae64:	68f8      	ldr	r0, [r7, #12]
 800ae66:	f000 f941 	bl	800b0ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2220      	movs	r2, #32
 800ae6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2200      	movs	r2, #0
 800ae76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ae7a:	2303      	movs	r3, #3
 800ae7c:	e00f      	b.n	800ae9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	69da      	ldr	r2, [r3, #28]
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	4013      	ands	r3, r2
 800ae88:	68ba      	ldr	r2, [r7, #8]
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	bf0c      	ite	eq
 800ae8e:	2301      	moveq	r3, #1
 800ae90:	2300      	movne	r3, #0
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	461a      	mov	r2, r3
 800ae96:	79fb      	ldrb	r3, [r7, #7]
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d0a0      	beq.n	800adde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ae9c:	2300      	movs	r3, #0
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3710      	adds	r7, #16
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
	...

0800aea8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b0a3      	sub	sp, #140	@ 0x8c
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	60f8      	str	r0, [r7, #12]
 800aeb0:	60b9      	str	r1, [r7, #8]
 800aeb2:	4613      	mov	r3, r2
 800aeb4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	68ba      	ldr	r2, [r7, #8]
 800aeba:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	88fa      	ldrh	r2, [r7, #6]
 800aec0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	88fa      	ldrh	r2, [r7, #6]
 800aec8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2200      	movs	r2, #0
 800aed0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	689b      	ldr	r3, [r3, #8]
 800aed6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aeda:	d10e      	bne.n	800aefa <UART_Start_Receive_IT+0x52>
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	691b      	ldr	r3, [r3, #16]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d105      	bne.n	800aef0 <UART_Start_Receive_IT+0x48>
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800aeea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800aeee:	e02d      	b.n	800af4c <UART_Start_Receive_IT+0xa4>
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	22ff      	movs	r2, #255	@ 0xff
 800aef4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800aef8:	e028      	b.n	800af4c <UART_Start_Receive_IT+0xa4>
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	689b      	ldr	r3, [r3, #8]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d10d      	bne.n	800af1e <UART_Start_Receive_IT+0x76>
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	691b      	ldr	r3, [r3, #16]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d104      	bne.n	800af14 <UART_Start_Receive_IT+0x6c>
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	22ff      	movs	r2, #255	@ 0xff
 800af0e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800af12:	e01b      	b.n	800af4c <UART_Start_Receive_IT+0xa4>
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	227f      	movs	r2, #127	@ 0x7f
 800af18:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800af1c:	e016      	b.n	800af4c <UART_Start_Receive_IT+0xa4>
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	689b      	ldr	r3, [r3, #8]
 800af22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af26:	d10d      	bne.n	800af44 <UART_Start_Receive_IT+0x9c>
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	691b      	ldr	r3, [r3, #16]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d104      	bne.n	800af3a <UART_Start_Receive_IT+0x92>
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	227f      	movs	r2, #127	@ 0x7f
 800af34:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800af38:	e008      	b.n	800af4c <UART_Start_Receive_IT+0xa4>
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	223f      	movs	r2, #63	@ 0x3f
 800af3e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800af42:	e003      	b.n	800af4c <UART_Start_Receive_IT+0xa4>
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2200      	movs	r2, #0
 800af48:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2200      	movs	r2, #0
 800af50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2222      	movs	r2, #34	@ 0x22
 800af58:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	3308      	adds	r3, #8
 800af62:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800af66:	e853 3f00 	ldrex	r3, [r3]
 800af6a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800af6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800af6e:	f043 0301 	orr.w	r3, r3, #1
 800af72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	3308      	adds	r3, #8
 800af7c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800af80:	673a      	str	r2, [r7, #112]	@ 0x70
 800af82:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af84:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800af86:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800af88:	e841 2300 	strex	r3, r2, [r1]
 800af8c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800af8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800af90:	2b00      	cmp	r3, #0
 800af92:	d1e3      	bne.n	800af5c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af9c:	d14f      	bne.n	800b03e <UART_Start_Receive_IT+0x196>
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800afa4:	88fa      	ldrh	r2, [r7, #6]
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d349      	bcc.n	800b03e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	689b      	ldr	r3, [r3, #8]
 800afae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800afb2:	d107      	bne.n	800afc4 <UART_Start_Receive_IT+0x11c>
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	691b      	ldr	r3, [r3, #16]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d103      	bne.n	800afc4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	4a47      	ldr	r2, [pc, #284]	@ (800b0dc <UART_Start_Receive_IT+0x234>)
 800afc0:	675a      	str	r2, [r3, #116]	@ 0x74
 800afc2:	e002      	b.n	800afca <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	4a46      	ldr	r2, [pc, #280]	@ (800b0e0 <UART_Start_Receive_IT+0x238>)
 800afc8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	691b      	ldr	r3, [r3, #16]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d01a      	beq.n	800b008 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800afda:	e853 3f00 	ldrex	r3, [r3]
 800afde:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800afe0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afe2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800afe6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	461a      	mov	r2, r3
 800aff0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800aff4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aff6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800affa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800affc:	e841 2300 	strex	r3, r2, [r1]
 800b000:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800b002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b004:	2b00      	cmp	r3, #0
 800b006:	d1e4      	bne.n	800afd2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	3308      	adds	r3, #8
 800b00e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b012:	e853 3f00 	ldrex	r3, [r3]
 800b016:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b01a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b01e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	3308      	adds	r3, #8
 800b026:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b028:	64ba      	str	r2, [r7, #72]	@ 0x48
 800b02a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b02c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b02e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b030:	e841 2300 	strex	r3, r2, [r1]
 800b034:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b036:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d1e5      	bne.n	800b008 <UART_Start_Receive_IT+0x160>
 800b03c:	e046      	b.n	800b0cc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b046:	d107      	bne.n	800b058 <UART_Start_Receive_IT+0x1b0>
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	691b      	ldr	r3, [r3, #16]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d103      	bne.n	800b058 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	4a24      	ldr	r2, [pc, #144]	@ (800b0e4 <UART_Start_Receive_IT+0x23c>)
 800b054:	675a      	str	r2, [r3, #116]	@ 0x74
 800b056:	e002      	b.n	800b05e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	4a23      	ldr	r2, [pc, #140]	@ (800b0e8 <UART_Start_Receive_IT+0x240>)
 800b05c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	691b      	ldr	r3, [r3, #16]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d019      	beq.n	800b09a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b06c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b06e:	e853 3f00 	ldrex	r3, [r3]
 800b072:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b076:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800b07a:	677b      	str	r3, [r7, #116]	@ 0x74
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	461a      	mov	r2, r3
 800b082:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b084:	637b      	str	r3, [r7, #52]	@ 0x34
 800b086:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b088:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b08a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b08c:	e841 2300 	strex	r3, r2, [r1]
 800b090:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b094:	2b00      	cmp	r3, #0
 800b096:	d1e6      	bne.n	800b066 <UART_Start_Receive_IT+0x1be>
 800b098:	e018      	b.n	800b0cc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	e853 3f00 	ldrex	r3, [r3]
 800b0a6:	613b      	str	r3, [r7, #16]
   return(result);
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	f043 0320 	orr.w	r3, r3, #32
 800b0ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b0b8:	623b      	str	r3, [r7, #32]
 800b0ba:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0bc:	69f9      	ldr	r1, [r7, #28]
 800b0be:	6a3a      	ldr	r2, [r7, #32]
 800b0c0:	e841 2300 	strex	r3, r2, [r1]
 800b0c4:	61bb      	str	r3, [r7, #24]
   return(result);
 800b0c6:	69bb      	ldr	r3, [r7, #24]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d1e6      	bne.n	800b09a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800b0cc:	2300      	movs	r3, #0
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	378c      	adds	r7, #140	@ 0x8c
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr
 800b0da:	bf00      	nop
 800b0dc:	0800b92d 	.word	0x0800b92d
 800b0e0:	0800b5bd 	.word	0x0800b5bd
 800b0e4:	0800b3f9 	.word	0x0800b3f9
 800b0e8:	0800b235 	.word	0x0800b235

0800b0ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b095      	sub	sp, #84	@ 0x54
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0fc:	e853 3f00 	ldrex	r3, [r3]
 800b100:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b104:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b108:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	461a      	mov	r2, r3
 800b110:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b112:	643b      	str	r3, [r7, #64]	@ 0x40
 800b114:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b116:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b118:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b11a:	e841 2300 	strex	r3, r2, [r1]
 800b11e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b122:	2b00      	cmp	r3, #0
 800b124:	d1e6      	bne.n	800b0f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	3308      	adds	r3, #8
 800b12c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b12e:	6a3b      	ldr	r3, [r7, #32]
 800b130:	e853 3f00 	ldrex	r3, [r3]
 800b134:	61fb      	str	r3, [r7, #28]
   return(result);
 800b136:	69fb      	ldr	r3, [r7, #28]
 800b138:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b13c:	f023 0301 	bic.w	r3, r3, #1
 800b140:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	3308      	adds	r3, #8
 800b148:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b14a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b14c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b14e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b150:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b152:	e841 2300 	strex	r3, r2, [r1]
 800b156:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d1e3      	bne.n	800b126 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b162:	2b01      	cmp	r3, #1
 800b164:	d118      	bne.n	800b198 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	e853 3f00 	ldrex	r3, [r3]
 800b172:	60bb      	str	r3, [r7, #8]
   return(result);
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	f023 0310 	bic.w	r3, r3, #16
 800b17a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	461a      	mov	r2, r3
 800b182:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b184:	61bb      	str	r3, [r7, #24]
 800b186:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b188:	6979      	ldr	r1, [r7, #20]
 800b18a:	69ba      	ldr	r2, [r7, #24]
 800b18c:	e841 2300 	strex	r3, r2, [r1]
 800b190:	613b      	str	r3, [r7, #16]
   return(result);
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d1e6      	bne.n	800b166 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2220      	movs	r2, #32
 800b19c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b1ac:	bf00      	nop
 800b1ae:	3754      	adds	r7, #84	@ 0x54
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b084      	sub	sp, #16
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b1c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b1ce:	68f8      	ldr	r0, [r7, #12]
 800b1d0:	f7ff faec 	bl	800a7ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1d4:	bf00      	nop
 800b1d6:	3710      	adds	r7, #16
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b088      	sub	sp, #32
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	e853 3f00 	ldrex	r3, [r3]
 800b1f0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b1f8:	61fb      	str	r3, [r7, #28]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	461a      	mov	r2, r3
 800b200:	69fb      	ldr	r3, [r7, #28]
 800b202:	61bb      	str	r3, [r7, #24]
 800b204:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b206:	6979      	ldr	r1, [r7, #20]
 800b208:	69ba      	ldr	r2, [r7, #24]
 800b20a:	e841 2300 	strex	r3, r2, [r1]
 800b20e:	613b      	str	r3, [r7, #16]
   return(result);
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d1e6      	bne.n	800b1e4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2220      	movs	r2, #32
 800b21a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2200      	movs	r2, #0
 800b222:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f7ff fab7 	bl	800a798 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b22a:	bf00      	nop
 800b22c:	3720      	adds	r7, #32
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
	...

0800b234 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b09c      	sub	sp, #112	@ 0x70
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b242:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b24c:	2b22      	cmp	r3, #34	@ 0x22
 800b24e:	f040 80c3 	bne.w	800b3d8 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b258:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b25c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b260:	b2d9      	uxtb	r1, r3
 800b262:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b266:	b2da      	uxtb	r2, r3
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b26c:	400a      	ands	r2, r1
 800b26e:	b2d2      	uxtb	r2, r2
 800b270:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b276:	1c5a      	adds	r2, r3, #1
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b282:	b29b      	uxth	r3, r3
 800b284:	3b01      	subs	r3, #1
 800b286:	b29a      	uxth	r2, r3
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b294:	b29b      	uxth	r3, r3
 800b296:	2b00      	cmp	r3, #0
 800b298:	f040 80a6 	bne.w	800b3e8 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2a4:	e853 3f00 	ldrex	r3, [r3]
 800b2a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b2aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b2ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b2b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b2ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b2bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b2c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b2c2:	e841 2300 	strex	r3, r2, [r1]
 800b2c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b2c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d1e6      	bne.n	800b29c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	3308      	adds	r3, #8
 800b2d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2d8:	e853 3f00 	ldrex	r3, [r3]
 800b2dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b2de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2e0:	f023 0301 	bic.w	r3, r3, #1
 800b2e4:	667b      	str	r3, [r7, #100]	@ 0x64
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	3308      	adds	r3, #8
 800b2ec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b2ee:	647a      	str	r2, [r7, #68]	@ 0x44
 800b2f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b2f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b2f6:	e841 2300 	strex	r3, r2, [r1]
 800b2fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b2fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d1e5      	bne.n	800b2ce <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2220      	movs	r2, #32
 800b306:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2200      	movs	r2, #0
 800b30e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2200      	movs	r2, #0
 800b314:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4a35      	ldr	r2, [pc, #212]	@ (800b3f0 <UART_RxISR_8BIT+0x1bc>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d024      	beq.n	800b36a <UART_RxISR_8BIT+0x136>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	4a33      	ldr	r2, [pc, #204]	@ (800b3f4 <UART_RxISR_8BIT+0x1c0>)
 800b326:	4293      	cmp	r3, r2
 800b328:	d01f      	beq.n	800b36a <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b334:	2b00      	cmp	r3, #0
 800b336:	d018      	beq.n	800b36a <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b340:	e853 3f00 	ldrex	r3, [r3]
 800b344:	623b      	str	r3, [r7, #32]
   return(result);
 800b346:	6a3b      	ldr	r3, [r7, #32]
 800b348:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b34c:	663b      	str	r3, [r7, #96]	@ 0x60
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	461a      	mov	r2, r3
 800b354:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b356:	633b      	str	r3, [r7, #48]	@ 0x30
 800b358:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b35a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b35c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b35e:	e841 2300 	strex	r3, r2, [r1]
 800b362:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b366:	2b00      	cmp	r3, #0
 800b368:	d1e6      	bne.n	800b338 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b36e:	2b01      	cmp	r3, #1
 800b370:	d12e      	bne.n	800b3d0 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2200      	movs	r2, #0
 800b376:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	e853 3f00 	ldrex	r3, [r3]
 800b384:	60fb      	str	r3, [r7, #12]
   return(result);
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f023 0310 	bic.w	r3, r3, #16
 800b38c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	461a      	mov	r2, r3
 800b394:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b396:	61fb      	str	r3, [r7, #28]
 800b398:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b39a:	69b9      	ldr	r1, [r7, #24]
 800b39c:	69fa      	ldr	r2, [r7, #28]
 800b39e:	e841 2300 	strex	r3, r2, [r1]
 800b3a2:	617b      	str	r3, [r7, #20]
   return(result);
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d1e6      	bne.n	800b378 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	69db      	ldr	r3, [r3, #28]
 800b3b0:	f003 0310 	and.w	r3, r3, #16
 800b3b4:	2b10      	cmp	r3, #16
 800b3b6:	d103      	bne.n	800b3c0 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	2210      	movs	r2, #16
 800b3be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f7ff f9f9 	bl	800a7c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b3ce:	e00b      	b.n	800b3e8 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f7f6 fcb7 	bl	8001d44 <HAL_UART_RxCpltCallback>
}
 800b3d6:	e007      	b.n	800b3e8 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	699a      	ldr	r2, [r3, #24]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f042 0208 	orr.w	r2, r2, #8
 800b3e6:	619a      	str	r2, [r3, #24]
}
 800b3e8:	bf00      	nop
 800b3ea:	3770      	adds	r7, #112	@ 0x70
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	44002400 	.word	0x44002400
 800b3f4:	54002400 	.word	0x54002400

0800b3f8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b09c      	sub	sp, #112	@ 0x70
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b406:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b410:	2b22      	cmp	r3, #34	@ 0x22
 800b412:	f040 80c3 	bne.w	800b59c <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b41c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b424:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b426:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800b42a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b42e:	4013      	ands	r3, r2
 800b430:	b29a      	uxth	r2, r3
 800b432:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b434:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b43a:	1c9a      	adds	r2, r3, #2
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b446:	b29b      	uxth	r3, r3
 800b448:	3b01      	subs	r3, #1
 800b44a:	b29a      	uxth	r2, r3
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b458:	b29b      	uxth	r3, r3
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	f040 80a6 	bne.w	800b5ac <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b466:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b468:	e853 3f00 	ldrex	r3, [r3]
 800b46c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b46e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b470:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b474:	667b      	str	r3, [r7, #100]	@ 0x64
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	461a      	mov	r2, r3
 800b47c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b47e:	657b      	str	r3, [r7, #84]	@ 0x54
 800b480:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b482:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b484:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b486:	e841 2300 	strex	r3, r2, [r1]
 800b48a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b48c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d1e6      	bne.n	800b460 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	3308      	adds	r3, #8
 800b498:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b49a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b49c:	e853 3f00 	ldrex	r3, [r3]
 800b4a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a4:	f023 0301 	bic.w	r3, r3, #1
 800b4a8:	663b      	str	r3, [r7, #96]	@ 0x60
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	3308      	adds	r3, #8
 800b4b0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b4b2:	643a      	str	r2, [r7, #64]	@ 0x40
 800b4b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b4b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b4ba:	e841 2300 	strex	r3, r2, [r1]
 800b4be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b4c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d1e5      	bne.n	800b492 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2220      	movs	r2, #32
 800b4ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4a35      	ldr	r2, [pc, #212]	@ (800b5b4 <UART_RxISR_16BIT+0x1bc>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d024      	beq.n	800b52e <UART_RxISR_16BIT+0x136>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a33      	ldr	r2, [pc, #204]	@ (800b5b8 <UART_RxISR_16BIT+0x1c0>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d01f      	beq.n	800b52e <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d018      	beq.n	800b52e <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b502:	6a3b      	ldr	r3, [r7, #32]
 800b504:	e853 3f00 	ldrex	r3, [r3]
 800b508:	61fb      	str	r3, [r7, #28]
   return(result);
 800b50a:	69fb      	ldr	r3, [r7, #28]
 800b50c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b510:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	461a      	mov	r2, r3
 800b518:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b51a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b51c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b51e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b520:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b522:	e841 2300 	strex	r3, r2, [r1]
 800b526:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d1e6      	bne.n	800b4fc <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b532:	2b01      	cmp	r3, #1
 800b534:	d12e      	bne.n	800b594 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2200      	movs	r2, #0
 800b53a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	e853 3f00 	ldrex	r3, [r3]
 800b548:	60bb      	str	r3, [r7, #8]
   return(result);
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	f023 0310 	bic.w	r3, r3, #16
 800b550:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	461a      	mov	r2, r3
 800b558:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b55a:	61bb      	str	r3, [r7, #24]
 800b55c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b55e:	6979      	ldr	r1, [r7, #20]
 800b560:	69ba      	ldr	r2, [r7, #24]
 800b562:	e841 2300 	strex	r3, r2, [r1]
 800b566:	613b      	str	r3, [r7, #16]
   return(result);
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d1e6      	bne.n	800b53c <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	69db      	ldr	r3, [r3, #28]
 800b574:	f003 0310 	and.w	r3, r3, #16
 800b578:	2b10      	cmp	r3, #16
 800b57a:	d103      	bne.n	800b584 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	2210      	movs	r2, #16
 800b582:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b58a:	4619      	mov	r1, r3
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f7ff f917 	bl	800a7c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b592:	e00b      	b.n	800b5ac <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f7f6 fbd5 	bl	8001d44 <HAL_UART_RxCpltCallback>
}
 800b59a:	e007      	b.n	800b5ac <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	699a      	ldr	r2, [r3, #24]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f042 0208 	orr.w	r2, r2, #8
 800b5aa:	619a      	str	r2, [r3, #24]
}
 800b5ac:	bf00      	nop
 800b5ae:	3770      	adds	r7, #112	@ 0x70
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}
 800b5b4:	44002400 	.word	0x44002400
 800b5b8:	54002400 	.word	0x54002400

0800b5bc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b0ac      	sub	sp, #176	@ 0xb0
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b5ca:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	69db      	ldr	r3, [r3, #28]
 800b5d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	689b      	ldr	r3, [r3, #8]
 800b5e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b5f2:	2b22      	cmp	r3, #34	@ 0x22
 800b5f4:	f040 8188 	bne.w	800b908 <UART_RxISR_8BIT_FIFOEN+0x34c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b5fe:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b602:	e12b      	b.n	800b85c <UART_RxISR_8BIT_FIFOEN+0x2a0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b60a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b60e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800b612:	b2d9      	uxtb	r1, r3
 800b614:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800b618:	b2da      	uxtb	r2, r3
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b61e:	400a      	ands	r2, r1
 800b620:	b2d2      	uxtb	r2, r2
 800b622:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b628:	1c5a      	adds	r2, r3, #1
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b634:	b29b      	uxth	r3, r3
 800b636:	3b01      	subs	r3, #1
 800b638:	b29a      	uxth	r2, r3
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	69db      	ldr	r3, [r3, #28]
 800b646:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b64a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b64e:	f003 0307 	and.w	r3, r3, #7
 800b652:	2b00      	cmp	r3, #0
 800b654:	d053      	beq.n	800b6fe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b656:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b65a:	f003 0301 	and.w	r3, r3, #1
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d011      	beq.n	800b686 <UART_RxISR_8BIT_FIFOEN+0xca>
 800b662:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d00b      	beq.n	800b686 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	2201      	movs	r2, #1
 800b674:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b67c:	f043 0201 	orr.w	r2, r3, #1
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b686:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b68a:	f003 0302 	and.w	r3, r3, #2
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d011      	beq.n	800b6b6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b692:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b696:	f003 0301 	and.w	r3, r3, #1
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d00b      	beq.n	800b6b6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	2202      	movs	r2, #2
 800b6a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6ac:	f043 0204 	orr.w	r2, r3, #4
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b6b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b6ba:	f003 0304 	and.w	r3, r3, #4
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d011      	beq.n	800b6e6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b6c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b6c6:	f003 0301 	and.w	r3, r3, #1
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d00b      	beq.n	800b6e6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	2204      	movs	r2, #4
 800b6d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6dc:	f043 0202 	orr.w	r2, r3, #2
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d006      	beq.n	800b6fe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f7ff f85b 	bl	800a7ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b704:	b29b      	uxth	r3, r3
 800b706:	2b00      	cmp	r3, #0
 800b708:	f040 80a8 	bne.w	800b85c <UART_RxISR_8BIT_FIFOEN+0x2a0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b712:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b714:	e853 3f00 	ldrex	r3, [r3]
 800b718:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800b71a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b71c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b720:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	461a      	mov	r2, r3
 800b72a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b72e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b730:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b732:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800b734:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b736:	e841 2300 	strex	r3, r2, [r1]
 800b73a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800b73c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d1e4      	bne.n	800b70c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	3308      	adds	r3, #8
 800b748:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b74a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b74c:	e853 3f00 	ldrex	r3, [r3]
 800b750:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800b752:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b754:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b758:	f023 0301 	bic.w	r3, r3, #1
 800b75c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	3308      	adds	r3, #8
 800b766:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b76a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800b76c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b76e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b770:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b772:	e841 2300 	strex	r3, r2, [r1]
 800b776:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b778:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d1e1      	bne.n	800b742 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2220      	movs	r2, #32
 800b782:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2200      	movs	r2, #0
 800b78a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2200      	movs	r2, #0
 800b790:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	4a62      	ldr	r2, [pc, #392]	@ (800b920 <UART_RxISR_8BIT_FIFOEN+0x364>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d026      	beq.n	800b7ea <UART_RxISR_8BIT_FIFOEN+0x22e>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4a60      	ldr	r2, [pc, #384]	@ (800b924 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d021      	beq.n	800b7ea <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d01a      	beq.n	800b7ea <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b7bc:	e853 3f00 	ldrex	r3, [r3]
 800b7c0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b7c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7c4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b7c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b7d6:	657b      	str	r3, [r7, #84]	@ 0x54
 800b7d8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7da:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b7dc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b7de:	e841 2300 	strex	r3, r2, [r1]
 800b7e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b7e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d1e4      	bne.n	800b7b4 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	d130      	bne.n	800b854 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b800:	e853 3f00 	ldrex	r3, [r3]
 800b804:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b808:	f023 0310 	bic.w	r3, r3, #16
 800b80c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	461a      	mov	r2, r3
 800b816:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b81a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b81c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b81e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b820:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b822:	e841 2300 	strex	r3, r2, [r1]
 800b826:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d1e4      	bne.n	800b7f8 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	69db      	ldr	r3, [r3, #28]
 800b834:	f003 0310 	and.w	r3, r3, #16
 800b838:	2b10      	cmp	r3, #16
 800b83a:	d103      	bne.n	800b844 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	2210      	movs	r2, #16
 800b842:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b84a:	4619      	mov	r1, r3
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f7fe ffb7 	bl	800a7c0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800b852:	e00e      	b.n	800b872 <UART_RxISR_8BIT_FIFOEN+0x2b6>
          HAL_UART_RxCpltCallback(huart);
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f7f6 fa75 	bl	8001d44 <HAL_UART_RxCpltCallback>
        break;
 800b85a:	e00a      	b.n	800b872 <UART_RxISR_8BIT_FIFOEN+0x2b6>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b85c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800b860:	2b00      	cmp	r3, #0
 800b862:	d006      	beq.n	800b872 <UART_RxISR_8BIT_FIFOEN+0x2b6>
 800b864:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b868:	f003 0320 	and.w	r3, r3, #32
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	f47f aec9 	bne.w	800b604 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b878:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b87c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b880:	2b00      	cmp	r3, #0
 800b882:	d049      	beq.n	800b918 <UART_RxISR_8BIT_FIFOEN+0x35c>
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b88a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800b88e:	429a      	cmp	r2, r3
 800b890:	d242      	bcs.n	800b918 <UART_RxISR_8BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	3308      	adds	r3, #8
 800b898:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b89a:	6a3b      	ldr	r3, [r7, #32]
 800b89c:	e853 3f00 	ldrex	r3, [r3]
 800b8a0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b8a2:	69fb      	ldr	r3, [r7, #28]
 800b8a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b8a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	3308      	adds	r3, #8
 800b8b2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b8b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b8b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b8bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b8be:	e841 2300 	strex	r3, r2, [r1]
 800b8c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d1e3      	bne.n	800b892 <UART_RxISR_8BIT_FIFOEN+0x2d6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	4a16      	ldr	r2, [pc, #88]	@ (800b928 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800b8ce:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	e853 3f00 	ldrex	r3, [r3]
 800b8dc:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	f043 0320 	orr.w	r3, r3, #32
 800b8e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	461a      	mov	r2, r3
 800b8ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b8f2:	61bb      	str	r3, [r7, #24]
 800b8f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8f6:	6979      	ldr	r1, [r7, #20]
 800b8f8:	69ba      	ldr	r2, [r7, #24]
 800b8fa:	e841 2300 	strex	r3, r2, [r1]
 800b8fe:	613b      	str	r3, [r7, #16]
   return(result);
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d1e4      	bne.n	800b8d0 <UART_RxISR_8BIT_FIFOEN+0x314>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b906:	e007      	b.n	800b918 <UART_RxISR_8BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	699a      	ldr	r2, [r3, #24]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f042 0208 	orr.w	r2, r2, #8
 800b916:	619a      	str	r2, [r3, #24]
}
 800b918:	bf00      	nop
 800b91a:	37b0      	adds	r7, #176	@ 0xb0
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	44002400 	.word	0x44002400
 800b924:	54002400 	.word	0x54002400
 800b928:	0800b235 	.word	0x0800b235

0800b92c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b0ae      	sub	sp, #184	@ 0xb8
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b93a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	69db      	ldr	r3, [r3, #28]
 800b944:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	689b      	ldr	r3, [r3, #8]
 800b958:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b962:	2b22      	cmp	r3, #34	@ 0x22
 800b964:	f040 818c 	bne.w	800bc80 <UART_RxISR_16BIT_FIFOEN+0x354>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b96e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b972:	e12f      	b.n	800bbd4 <UART_RxISR_16BIT_FIFOEN+0x2a8>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b97a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b982:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b986:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800b98a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800b98e:	4013      	ands	r3, r2
 800b990:	b29a      	uxth	r2, r3
 800b992:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b996:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b99c:	1c9a      	adds	r2, r3, #2
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b9a8:	b29b      	uxth	r3, r3
 800b9aa:	3b01      	subs	r3, #1
 800b9ac:	b29a      	uxth	r2, r3
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	69db      	ldr	r3, [r3, #28]
 800b9ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b9be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b9c2:	f003 0307 	and.w	r3, r3, #7
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d053      	beq.n	800ba72 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b9ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b9ce:	f003 0301 	and.w	r3, r3, #1
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d011      	beq.n	800b9fa <UART_RxISR_16BIT_FIFOEN+0xce>
 800b9d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b9da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d00b      	beq.n	800b9fa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9f0:	f043 0201 	orr.w	r2, r3, #1
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b9fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b9fe:	f003 0302 	and.w	r3, r3, #2
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d011      	beq.n	800ba2a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800ba06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ba0a:	f003 0301 	and.w	r3, r3, #1
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d00b      	beq.n	800ba2a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	2202      	movs	r2, #2
 800ba18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba20:	f043 0204 	orr.w	r2, r3, #4
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ba2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ba2e:	f003 0304 	and.w	r3, r3, #4
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d011      	beq.n	800ba5a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ba36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ba3a:	f003 0301 	and.w	r3, r3, #1
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d00b      	beq.n	800ba5a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	2204      	movs	r2, #4
 800ba48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba50:	f043 0202 	orr.w	r2, r3, #2
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d006      	beq.n	800ba72 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f7fe fea1 	bl	800a7ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ba78:	b29b      	uxth	r3, r3
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	f040 80aa 	bne.w	800bbd4 <UART_RxISR_16BIT_FIFOEN+0x2a8>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ba88:	e853 3f00 	ldrex	r3, [r3]
 800ba8c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ba8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ba90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ba94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800baa2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800baa6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baa8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800baaa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800baae:	e841 2300 	strex	r3, r2, [r1]
 800bab2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bab4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d1e2      	bne.n	800ba80 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	3308      	adds	r3, #8
 800bac0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bac2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bac4:	e853 3f00 	ldrex	r3, [r3]
 800bac8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800baca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bacc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bad0:	f023 0301 	bic.w	r3, r3, #1
 800bad4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	3308      	adds	r3, #8
 800bade:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800bae2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bae4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bae6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bae8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800baea:	e841 2300 	strex	r3, r2, [r1]
 800baee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800baf0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d1e1      	bne.n	800baba <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2220      	movs	r2, #32
 800bafa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2200      	movs	r2, #0
 800bb02:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2200      	movs	r2, #0
 800bb08:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	4a62      	ldr	r2, [pc, #392]	@ (800bc98 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d026      	beq.n	800bb62 <UART_RxISR_16BIT_FIFOEN+0x236>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	4a60      	ldr	r2, [pc, #384]	@ (800bc9c <UART_RxISR_16BIT_FIFOEN+0x370>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d021      	beq.n	800bb62 <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d01a      	beq.n	800bb62 <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb34:	e853 3f00 	ldrex	r3, [r3]
 800bb38:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bb3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb3c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bb40:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	461a      	mov	r2, r3
 800bb4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800bb4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bb50:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bb54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bb56:	e841 2300 	strex	r3, r2, [r1]
 800bb5a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bb5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d1e4      	bne.n	800bb2c <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb66:	2b01      	cmp	r3, #1
 800bb68:	d130      	bne.n	800bbcc <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb78:	e853 3f00 	ldrex	r3, [r3]
 800bb7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bb7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb80:	f023 0310 	bic.w	r3, r3, #16
 800bb84:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	461a      	mov	r2, r3
 800bb8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bb92:	647b      	str	r3, [r7, #68]	@ 0x44
 800bb94:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bb98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bb9a:	e841 2300 	strex	r3, r2, [r1]
 800bb9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bba0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d1e4      	bne.n	800bb70 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	69db      	ldr	r3, [r3, #28]
 800bbac:	f003 0310 	and.w	r3, r3, #16
 800bbb0:	2b10      	cmp	r3, #16
 800bbb2:	d103      	bne.n	800bbbc <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	2210      	movs	r2, #16
 800bbba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f7fe fdfb 	bl	800a7c0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800bbca:	e00e      	b.n	800bbea <UART_RxISR_16BIT_FIFOEN+0x2be>
          HAL_UART_RxCpltCallback(huart);
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f7f6 f8b9 	bl	8001d44 <HAL_UART_RxCpltCallback>
        break;
 800bbd2:	e00a      	b.n	800bbea <UART_RxISR_16BIT_FIFOEN+0x2be>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bbd4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d006      	beq.n	800bbea <UART_RxISR_16BIT_FIFOEN+0x2be>
 800bbdc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bbe0:	f003 0320 	and.w	r3, r3, #32
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	f47f aec5 	bne.w	800b974 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bbf0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800bbf4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d049      	beq.n	800bc90 <UART_RxISR_16BIT_FIFOEN+0x364>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800bc02:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d242      	bcs.n	800bc90 <UART_RxISR_16BIT_FIFOEN+0x364>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	3308      	adds	r3, #8
 800bc10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc14:	e853 3f00 	ldrex	r3, [r3]
 800bc18:	623b      	str	r3, [r7, #32]
   return(result);
 800bc1a:	6a3b      	ldr	r3, [r7, #32]
 800bc1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bc20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	3308      	adds	r3, #8
 800bc2a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800bc2e:	633a      	str	r2, [r7, #48]	@ 0x30
 800bc30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bc34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc36:	e841 2300 	strex	r3, r2, [r1]
 800bc3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bc3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d1e3      	bne.n	800bc0a <UART_RxISR_16BIT_FIFOEN+0x2de>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	4a16      	ldr	r2, [pc, #88]	@ (800bca0 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800bc46:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	e853 3f00 	ldrex	r3, [r3]
 800bc54:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	f043 0320 	orr.w	r3, r3, #32
 800bc5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	461a      	mov	r2, r3
 800bc66:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bc6a:	61fb      	str	r3, [r7, #28]
 800bc6c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc6e:	69b9      	ldr	r1, [r7, #24]
 800bc70:	69fa      	ldr	r2, [r7, #28]
 800bc72:	e841 2300 	strex	r3, r2, [r1]
 800bc76:	617b      	str	r3, [r7, #20]
   return(result);
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d1e4      	bne.n	800bc48 <UART_RxISR_16BIT_FIFOEN+0x31c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bc7e:	e007      	b.n	800bc90 <UART_RxISR_16BIT_FIFOEN+0x364>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	699a      	ldr	r2, [r3, #24]
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f042 0208 	orr.w	r2, r2, #8
 800bc8e:	619a      	str	r2, [r3, #24]
}
 800bc90:	bf00      	nop
 800bc92:	37b8      	adds	r7, #184	@ 0xb8
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}
 800bc98:	44002400 	.word	0x44002400
 800bc9c:	54002400 	.word	0x54002400
 800bca0:	0800b3f9 	.word	0x0800b3f9

0800bca4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b083      	sub	sp, #12
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bcac:	bf00      	nop
 800bcae:	370c      	adds	r7, #12
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b083      	sub	sp, #12
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bcc0:	bf00      	nop
 800bcc2:	370c      	adds	r7, #12
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr

0800bccc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b083      	sub	sp, #12
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bcd4:	bf00      	nop
 800bcd6:	370c      	adds	r7, #12
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr

0800bce0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bce0:	b480      	push	{r7}
 800bce2:	b085      	sub	sp, #20
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bcee:	2b01      	cmp	r3, #1
 800bcf0:	d101      	bne.n	800bcf6 <HAL_UARTEx_DisableFifoMode+0x16>
 800bcf2:	2302      	movs	r3, #2
 800bcf4:	e027      	b.n	800bd46 <HAL_UARTEx_DisableFifoMode+0x66>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2201      	movs	r2, #1
 800bcfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2224      	movs	r2, #36	@ 0x24
 800bd02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	681a      	ldr	r2, [r3, #0]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f022 0201 	bic.w	r2, r2, #1
 800bd1c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bd24:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	68fa      	ldr	r2, [r7, #12]
 800bd32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2220      	movs	r2, #32
 800bd38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bd44:	2300      	movs	r3, #0
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3714      	adds	r7, #20
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd50:	4770      	bx	lr

0800bd52 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd52:	b580      	push	{r7, lr}
 800bd54:	b084      	sub	sp, #16
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	6078      	str	r0, [r7, #4]
 800bd5a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bd62:	2b01      	cmp	r3, #1
 800bd64:	d101      	bne.n	800bd6a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bd66:	2302      	movs	r3, #2
 800bd68:	e02d      	b.n	800bdc6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2201      	movs	r2, #1
 800bd6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2224      	movs	r2, #36	@ 0x24
 800bd76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	681a      	ldr	r2, [r3, #0]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f022 0201 	bic.w	r2, r2, #1
 800bd90:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	689b      	ldr	r3, [r3, #8]
 800bd98:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	683a      	ldr	r2, [r7, #0]
 800bda2:	430a      	orrs	r2, r1
 800bda4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f000 f850 	bl	800be4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	68fa      	ldr	r2, [r7, #12]
 800bdb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2220      	movs	r2, #32
 800bdb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bdc4:	2300      	movs	r3, #0
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3710      	adds	r7, #16
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}

0800bdce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bdce:	b580      	push	{r7, lr}
 800bdd0:	b084      	sub	sp, #16
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	6078      	str	r0, [r7, #4]
 800bdd6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bdde:	2b01      	cmp	r3, #1
 800bde0:	d101      	bne.n	800bde6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bde2:	2302      	movs	r3, #2
 800bde4:	e02d      	b.n	800be42 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2201      	movs	r2, #1
 800bdea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2224      	movs	r2, #36	@ 0x24
 800bdf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	681a      	ldr	r2, [r3, #0]
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	f022 0201 	bic.w	r2, r2, #1
 800be0c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	689b      	ldr	r3, [r3, #8]
 800be14:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	683a      	ldr	r2, [r7, #0]
 800be1e:	430a      	orrs	r2, r1
 800be20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f000 f812 	bl	800be4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	68fa      	ldr	r2, [r7, #12]
 800be2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2220      	movs	r2, #32
 800be34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2200      	movs	r2, #0
 800be3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800be40:	2300      	movs	r3, #0
}
 800be42:	4618      	mov	r0, r3
 800be44:	3710      	adds	r7, #16
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}
	...

0800be4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b085      	sub	sp, #20
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d108      	bne.n	800be6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2201      	movs	r2, #1
 800be60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2201      	movs	r2, #1
 800be68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800be6c:	e031      	b.n	800bed2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800be6e:	2308      	movs	r3, #8
 800be70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800be72:	2308      	movs	r3, #8
 800be74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	689b      	ldr	r3, [r3, #8]
 800be7c:	0e5b      	lsrs	r3, r3, #25
 800be7e:	b2db      	uxtb	r3, r3
 800be80:	f003 0307 	and.w	r3, r3, #7
 800be84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	689b      	ldr	r3, [r3, #8]
 800be8c:	0f5b      	lsrs	r3, r3, #29
 800be8e:	b2db      	uxtb	r3, r3
 800be90:	f003 0307 	and.w	r3, r3, #7
 800be94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be96:	7bbb      	ldrb	r3, [r7, #14]
 800be98:	7b3a      	ldrb	r2, [r7, #12]
 800be9a:	4911      	ldr	r1, [pc, #68]	@ (800bee0 <UARTEx_SetNbDataToProcess+0x94>)
 800be9c:	5c8a      	ldrb	r2, [r1, r2]
 800be9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bea2:	7b3a      	ldrb	r2, [r7, #12]
 800bea4:	490f      	ldr	r1, [pc, #60]	@ (800bee4 <UARTEx_SetNbDataToProcess+0x98>)
 800bea6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bea8:	fb93 f3f2 	sdiv	r3, r3, r2
 800beac:	b29a      	uxth	r2, r3
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800beb4:	7bfb      	ldrb	r3, [r7, #15]
 800beb6:	7b7a      	ldrb	r2, [r7, #13]
 800beb8:	4909      	ldr	r1, [pc, #36]	@ (800bee0 <UARTEx_SetNbDataToProcess+0x94>)
 800beba:	5c8a      	ldrb	r2, [r1, r2]
 800bebc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bec0:	7b7a      	ldrb	r2, [r7, #13]
 800bec2:	4908      	ldr	r1, [pc, #32]	@ (800bee4 <UARTEx_SetNbDataToProcess+0x98>)
 800bec4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bec6:	fb93 f3f2 	sdiv	r3, r3, r2
 800beca:	b29a      	uxth	r2, r3
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bed2:	bf00      	nop
 800bed4:	3714      	adds	r7, #20
 800bed6:	46bd      	mov	sp, r7
 800bed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bedc:	4770      	bx	lr
 800bede:	bf00      	nop
 800bee0:	08010b30 	.word	0x08010b30
 800bee4:	08010b38 	.word	0x08010b38

0800bee8 <atoi>:
 800bee8:	220a      	movs	r2, #10
 800beea:	2100      	movs	r1, #0
 800beec:	f000 b87c 	b.w	800bfe8 <strtol>

0800bef0 <_strtol_l.constprop.0>:
 800bef0:	2b24      	cmp	r3, #36	@ 0x24
 800bef2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bef6:	4686      	mov	lr, r0
 800bef8:	4690      	mov	r8, r2
 800befa:	d801      	bhi.n	800bf00 <_strtol_l.constprop.0+0x10>
 800befc:	2b01      	cmp	r3, #1
 800befe:	d106      	bne.n	800bf0e <_strtol_l.constprop.0+0x1e>
 800bf00:	f001 f976 	bl	800d1f0 <__errno>
 800bf04:	2316      	movs	r3, #22
 800bf06:	6003      	str	r3, [r0, #0]
 800bf08:	2000      	movs	r0, #0
 800bf0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf0e:	460d      	mov	r5, r1
 800bf10:	4833      	ldr	r0, [pc, #204]	@ (800bfe0 <_strtol_l.constprop.0+0xf0>)
 800bf12:	462a      	mov	r2, r5
 800bf14:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf18:	5d06      	ldrb	r6, [r0, r4]
 800bf1a:	f016 0608 	ands.w	r6, r6, #8
 800bf1e:	d1f8      	bne.n	800bf12 <_strtol_l.constprop.0+0x22>
 800bf20:	2c2d      	cmp	r4, #45	@ 0x2d
 800bf22:	d12d      	bne.n	800bf80 <_strtol_l.constprop.0+0x90>
 800bf24:	782c      	ldrb	r4, [r5, #0]
 800bf26:	2601      	movs	r6, #1
 800bf28:	1c95      	adds	r5, r2, #2
 800bf2a:	f033 0210 	bics.w	r2, r3, #16
 800bf2e:	d109      	bne.n	800bf44 <_strtol_l.constprop.0+0x54>
 800bf30:	2c30      	cmp	r4, #48	@ 0x30
 800bf32:	d12a      	bne.n	800bf8a <_strtol_l.constprop.0+0x9a>
 800bf34:	782a      	ldrb	r2, [r5, #0]
 800bf36:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bf3a:	2a58      	cmp	r2, #88	@ 0x58
 800bf3c:	d125      	bne.n	800bf8a <_strtol_l.constprop.0+0x9a>
 800bf3e:	786c      	ldrb	r4, [r5, #1]
 800bf40:	2310      	movs	r3, #16
 800bf42:	3502      	adds	r5, #2
 800bf44:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bf48:	2200      	movs	r2, #0
 800bf4a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bf4e:	4610      	mov	r0, r2
 800bf50:	fbbc f9f3 	udiv	r9, ip, r3
 800bf54:	fb03 ca19 	mls	sl, r3, r9, ip
 800bf58:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bf5c:	2f09      	cmp	r7, #9
 800bf5e:	d81b      	bhi.n	800bf98 <_strtol_l.constprop.0+0xa8>
 800bf60:	463c      	mov	r4, r7
 800bf62:	42a3      	cmp	r3, r4
 800bf64:	dd27      	ble.n	800bfb6 <_strtol_l.constprop.0+0xc6>
 800bf66:	1c57      	adds	r7, r2, #1
 800bf68:	d007      	beq.n	800bf7a <_strtol_l.constprop.0+0x8a>
 800bf6a:	4581      	cmp	r9, r0
 800bf6c:	d320      	bcc.n	800bfb0 <_strtol_l.constprop.0+0xc0>
 800bf6e:	d101      	bne.n	800bf74 <_strtol_l.constprop.0+0x84>
 800bf70:	45a2      	cmp	sl, r4
 800bf72:	db1d      	blt.n	800bfb0 <_strtol_l.constprop.0+0xc0>
 800bf74:	fb00 4003 	mla	r0, r0, r3, r4
 800bf78:	2201      	movs	r2, #1
 800bf7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf7e:	e7eb      	b.n	800bf58 <_strtol_l.constprop.0+0x68>
 800bf80:	2c2b      	cmp	r4, #43	@ 0x2b
 800bf82:	bf04      	itt	eq
 800bf84:	782c      	ldrbeq	r4, [r5, #0]
 800bf86:	1c95      	addeq	r5, r2, #2
 800bf88:	e7cf      	b.n	800bf2a <_strtol_l.constprop.0+0x3a>
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d1da      	bne.n	800bf44 <_strtol_l.constprop.0+0x54>
 800bf8e:	2c30      	cmp	r4, #48	@ 0x30
 800bf90:	bf0c      	ite	eq
 800bf92:	2308      	moveq	r3, #8
 800bf94:	230a      	movne	r3, #10
 800bf96:	e7d5      	b.n	800bf44 <_strtol_l.constprop.0+0x54>
 800bf98:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bf9c:	2f19      	cmp	r7, #25
 800bf9e:	d801      	bhi.n	800bfa4 <_strtol_l.constprop.0+0xb4>
 800bfa0:	3c37      	subs	r4, #55	@ 0x37
 800bfa2:	e7de      	b.n	800bf62 <_strtol_l.constprop.0+0x72>
 800bfa4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bfa8:	2f19      	cmp	r7, #25
 800bfaa:	d804      	bhi.n	800bfb6 <_strtol_l.constprop.0+0xc6>
 800bfac:	3c57      	subs	r4, #87	@ 0x57
 800bfae:	e7d8      	b.n	800bf62 <_strtol_l.constprop.0+0x72>
 800bfb0:	f04f 32ff 	mov.w	r2, #4294967295
 800bfb4:	e7e1      	b.n	800bf7a <_strtol_l.constprop.0+0x8a>
 800bfb6:	1c53      	adds	r3, r2, #1
 800bfb8:	d108      	bne.n	800bfcc <_strtol_l.constprop.0+0xdc>
 800bfba:	2322      	movs	r3, #34	@ 0x22
 800bfbc:	4660      	mov	r0, ip
 800bfbe:	f8ce 3000 	str.w	r3, [lr]
 800bfc2:	f1b8 0f00 	cmp.w	r8, #0
 800bfc6:	d0a0      	beq.n	800bf0a <_strtol_l.constprop.0+0x1a>
 800bfc8:	1e69      	subs	r1, r5, #1
 800bfca:	e006      	b.n	800bfda <_strtol_l.constprop.0+0xea>
 800bfcc:	b106      	cbz	r6, 800bfd0 <_strtol_l.constprop.0+0xe0>
 800bfce:	4240      	negs	r0, r0
 800bfd0:	f1b8 0f00 	cmp.w	r8, #0
 800bfd4:	d099      	beq.n	800bf0a <_strtol_l.constprop.0+0x1a>
 800bfd6:	2a00      	cmp	r2, #0
 800bfd8:	d1f6      	bne.n	800bfc8 <_strtol_l.constprop.0+0xd8>
 800bfda:	f8c8 1000 	str.w	r1, [r8]
 800bfde:	e794      	b.n	800bf0a <_strtol_l.constprop.0+0x1a>
 800bfe0:	08010b41 	.word	0x08010b41

0800bfe4 <_strtol_r>:
 800bfe4:	f7ff bf84 	b.w	800bef0 <_strtol_l.constprop.0>

0800bfe8 <strtol>:
 800bfe8:	4613      	mov	r3, r2
 800bfea:	460a      	mov	r2, r1
 800bfec:	4601      	mov	r1, r0
 800bfee:	4802      	ldr	r0, [pc, #8]	@ (800bff8 <strtol+0x10>)
 800bff0:	6800      	ldr	r0, [r0, #0]
 800bff2:	f7ff bf7d 	b.w	800bef0 <_strtol_l.constprop.0>
 800bff6:	bf00      	nop
 800bff8:	20000020 	.word	0x20000020

0800bffc <__cvt>:
 800bffc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c000:	ec57 6b10 	vmov	r6, r7, d0
 800c004:	2f00      	cmp	r7, #0
 800c006:	460c      	mov	r4, r1
 800c008:	4619      	mov	r1, r3
 800c00a:	463b      	mov	r3, r7
 800c00c:	bfb4      	ite	lt
 800c00e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c012:	2300      	movge	r3, #0
 800c014:	4691      	mov	r9, r2
 800c016:	bfbf      	itttt	lt
 800c018:	4632      	movlt	r2, r6
 800c01a:	461f      	movlt	r7, r3
 800c01c:	232d      	movlt	r3, #45	@ 0x2d
 800c01e:	4616      	movlt	r6, r2
 800c020:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c024:	700b      	strb	r3, [r1, #0]
 800c026:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c028:	f023 0820 	bic.w	r8, r3, #32
 800c02c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c030:	d005      	beq.n	800c03e <__cvt+0x42>
 800c032:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c036:	d100      	bne.n	800c03a <__cvt+0x3e>
 800c038:	3401      	adds	r4, #1
 800c03a:	2102      	movs	r1, #2
 800c03c:	e000      	b.n	800c040 <__cvt+0x44>
 800c03e:	2103      	movs	r1, #3
 800c040:	ab03      	add	r3, sp, #12
 800c042:	4622      	mov	r2, r4
 800c044:	9301      	str	r3, [sp, #4]
 800c046:	ab02      	add	r3, sp, #8
 800c048:	ec47 6b10 	vmov	d0, r6, r7
 800c04c:	9300      	str	r3, [sp, #0]
 800c04e:	4653      	mov	r3, sl
 800c050:	f001 f9aa 	bl	800d3a8 <_dtoa_r>
 800c054:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c058:	4605      	mov	r5, r0
 800c05a:	d119      	bne.n	800c090 <__cvt+0x94>
 800c05c:	f019 0f01 	tst.w	r9, #1
 800c060:	d00e      	beq.n	800c080 <__cvt+0x84>
 800c062:	eb00 0904 	add.w	r9, r0, r4
 800c066:	2200      	movs	r2, #0
 800c068:	2300      	movs	r3, #0
 800c06a:	4630      	mov	r0, r6
 800c06c:	4639      	mov	r1, r7
 800c06e:	f7f4 fd3f 	bl	8000af0 <__aeabi_dcmpeq>
 800c072:	b108      	cbz	r0, 800c078 <__cvt+0x7c>
 800c074:	f8cd 900c 	str.w	r9, [sp, #12]
 800c078:	2230      	movs	r2, #48	@ 0x30
 800c07a:	9b03      	ldr	r3, [sp, #12]
 800c07c:	454b      	cmp	r3, r9
 800c07e:	d31e      	bcc.n	800c0be <__cvt+0xc2>
 800c080:	9b03      	ldr	r3, [sp, #12]
 800c082:	4628      	mov	r0, r5
 800c084:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c086:	1b5b      	subs	r3, r3, r5
 800c088:	6013      	str	r3, [r2, #0]
 800c08a:	b004      	add	sp, #16
 800c08c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c090:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c094:	eb00 0904 	add.w	r9, r0, r4
 800c098:	d1e5      	bne.n	800c066 <__cvt+0x6a>
 800c09a:	7803      	ldrb	r3, [r0, #0]
 800c09c:	2b30      	cmp	r3, #48	@ 0x30
 800c09e:	d10a      	bne.n	800c0b6 <__cvt+0xba>
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	4630      	mov	r0, r6
 800c0a6:	4639      	mov	r1, r7
 800c0a8:	f7f4 fd22 	bl	8000af0 <__aeabi_dcmpeq>
 800c0ac:	b918      	cbnz	r0, 800c0b6 <__cvt+0xba>
 800c0ae:	f1c4 0401 	rsb	r4, r4, #1
 800c0b2:	f8ca 4000 	str.w	r4, [sl]
 800c0b6:	f8da 3000 	ldr.w	r3, [sl]
 800c0ba:	4499      	add	r9, r3
 800c0bc:	e7d3      	b.n	800c066 <__cvt+0x6a>
 800c0be:	1c59      	adds	r1, r3, #1
 800c0c0:	9103      	str	r1, [sp, #12]
 800c0c2:	701a      	strb	r2, [r3, #0]
 800c0c4:	e7d9      	b.n	800c07a <__cvt+0x7e>

0800c0c6 <__exponent>:
 800c0c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0c8:	2900      	cmp	r1, #0
 800c0ca:	7002      	strb	r2, [r0, #0]
 800c0cc:	bfba      	itte	lt
 800c0ce:	4249      	neglt	r1, r1
 800c0d0:	232d      	movlt	r3, #45	@ 0x2d
 800c0d2:	232b      	movge	r3, #43	@ 0x2b
 800c0d4:	2909      	cmp	r1, #9
 800c0d6:	7043      	strb	r3, [r0, #1]
 800c0d8:	dd28      	ble.n	800c12c <__exponent+0x66>
 800c0da:	f10d 0307 	add.w	r3, sp, #7
 800c0de:	270a      	movs	r7, #10
 800c0e0:	461d      	mov	r5, r3
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	3b01      	subs	r3, #1
 800c0e6:	fbb1 f6f7 	udiv	r6, r1, r7
 800c0ea:	fb07 1416 	mls	r4, r7, r6, r1
 800c0ee:	3430      	adds	r4, #48	@ 0x30
 800c0f0:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c0f4:	460c      	mov	r4, r1
 800c0f6:	4631      	mov	r1, r6
 800c0f8:	2c63      	cmp	r4, #99	@ 0x63
 800c0fa:	dcf2      	bgt.n	800c0e2 <__exponent+0x1c>
 800c0fc:	3130      	adds	r1, #48	@ 0x30
 800c0fe:	1e94      	subs	r4, r2, #2
 800c100:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c104:	1c41      	adds	r1, r0, #1
 800c106:	4623      	mov	r3, r4
 800c108:	42ab      	cmp	r3, r5
 800c10a:	d30a      	bcc.n	800c122 <__exponent+0x5c>
 800c10c:	f10d 0309 	add.w	r3, sp, #9
 800c110:	1a9b      	subs	r3, r3, r2
 800c112:	42ac      	cmp	r4, r5
 800c114:	bf88      	it	hi
 800c116:	2300      	movhi	r3, #0
 800c118:	3302      	adds	r3, #2
 800c11a:	4403      	add	r3, r0
 800c11c:	1a18      	subs	r0, r3, r0
 800c11e:	b003      	add	sp, #12
 800c120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c122:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c126:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c12a:	e7ed      	b.n	800c108 <__exponent+0x42>
 800c12c:	2330      	movs	r3, #48	@ 0x30
 800c12e:	3130      	adds	r1, #48	@ 0x30
 800c130:	7083      	strb	r3, [r0, #2]
 800c132:	1d03      	adds	r3, r0, #4
 800c134:	70c1      	strb	r1, [r0, #3]
 800c136:	e7f1      	b.n	800c11c <__exponent+0x56>

0800c138 <_printf_float>:
 800c138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c13c:	b08d      	sub	sp, #52	@ 0x34
 800c13e:	460c      	mov	r4, r1
 800c140:	4616      	mov	r6, r2
 800c142:	461f      	mov	r7, r3
 800c144:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c148:	4605      	mov	r5, r0
 800c14a:	f001 f807 	bl	800d15c <_localeconv_r>
 800c14e:	6803      	ldr	r3, [r0, #0]
 800c150:	4618      	mov	r0, r3
 800c152:	9304      	str	r3, [sp, #16]
 800c154:	f7f4 f8a0 	bl	8000298 <strlen>
 800c158:	2300      	movs	r3, #0
 800c15a:	9005      	str	r0, [sp, #20]
 800c15c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c15e:	f8d8 3000 	ldr.w	r3, [r8]
 800c162:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c166:	3307      	adds	r3, #7
 800c168:	f8d4 b000 	ldr.w	fp, [r4]
 800c16c:	f023 0307 	bic.w	r3, r3, #7
 800c170:	f103 0208 	add.w	r2, r3, #8
 800c174:	f8c8 2000 	str.w	r2, [r8]
 800c178:	f04f 32ff 	mov.w	r2, #4294967295
 800c17c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c180:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c184:	f8cd 8018 	str.w	r8, [sp, #24]
 800c188:	9307      	str	r3, [sp, #28]
 800c18a:	4b9d      	ldr	r3, [pc, #628]	@ (800c400 <_printf_float+0x2c8>)
 800c18c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c190:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c194:	f7f4 fcde 	bl	8000b54 <__aeabi_dcmpun>
 800c198:	bb70      	cbnz	r0, 800c1f8 <_printf_float+0xc0>
 800c19a:	f04f 32ff 	mov.w	r2, #4294967295
 800c19e:	4b98      	ldr	r3, [pc, #608]	@ (800c400 <_printf_float+0x2c8>)
 800c1a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c1a4:	f7f4 fcb8 	bl	8000b18 <__aeabi_dcmple>
 800c1a8:	bb30      	cbnz	r0, 800c1f8 <_printf_float+0xc0>
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	4640      	mov	r0, r8
 800c1b0:	4649      	mov	r1, r9
 800c1b2:	f7f4 fca7 	bl	8000b04 <__aeabi_dcmplt>
 800c1b6:	b110      	cbz	r0, 800c1be <_printf_float+0x86>
 800c1b8:	232d      	movs	r3, #45	@ 0x2d
 800c1ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c1be:	4a91      	ldr	r2, [pc, #580]	@ (800c404 <_printf_float+0x2cc>)
 800c1c0:	4b91      	ldr	r3, [pc, #580]	@ (800c408 <_printf_float+0x2d0>)
 800c1c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c1c6:	bf94      	ite	ls
 800c1c8:	4690      	movls	r8, r2
 800c1ca:	4698      	movhi	r8, r3
 800c1cc:	2303      	movs	r3, #3
 800c1ce:	f04f 0900 	mov.w	r9, #0
 800c1d2:	6123      	str	r3, [r4, #16]
 800c1d4:	f02b 0304 	bic.w	r3, fp, #4
 800c1d8:	6023      	str	r3, [r4, #0]
 800c1da:	4633      	mov	r3, r6
 800c1dc:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c1de:	4621      	mov	r1, r4
 800c1e0:	4628      	mov	r0, r5
 800c1e2:	9700      	str	r7, [sp, #0]
 800c1e4:	f000 f9d2 	bl	800c58c <_printf_common>
 800c1e8:	3001      	adds	r0, #1
 800c1ea:	f040 808d 	bne.w	800c308 <_printf_float+0x1d0>
 800c1ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c1f2:	b00d      	add	sp, #52	@ 0x34
 800c1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1f8:	4642      	mov	r2, r8
 800c1fa:	464b      	mov	r3, r9
 800c1fc:	4640      	mov	r0, r8
 800c1fe:	4649      	mov	r1, r9
 800c200:	f7f4 fca8 	bl	8000b54 <__aeabi_dcmpun>
 800c204:	b140      	cbz	r0, 800c218 <_printf_float+0xe0>
 800c206:	464b      	mov	r3, r9
 800c208:	4a80      	ldr	r2, [pc, #512]	@ (800c40c <_printf_float+0x2d4>)
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	bfbc      	itt	lt
 800c20e:	232d      	movlt	r3, #45	@ 0x2d
 800c210:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c214:	4b7e      	ldr	r3, [pc, #504]	@ (800c410 <_printf_float+0x2d8>)
 800c216:	e7d4      	b.n	800c1c2 <_printf_float+0x8a>
 800c218:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c21c:	6863      	ldr	r3, [r4, #4]
 800c21e:	9206      	str	r2, [sp, #24]
 800c220:	1c5a      	adds	r2, r3, #1
 800c222:	d13b      	bne.n	800c29c <_printf_float+0x164>
 800c224:	2306      	movs	r3, #6
 800c226:	6063      	str	r3, [r4, #4]
 800c228:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c22c:	2300      	movs	r3, #0
 800c22e:	4628      	mov	r0, r5
 800c230:	6022      	str	r2, [r4, #0]
 800c232:	9303      	str	r3, [sp, #12]
 800c234:	ab0a      	add	r3, sp, #40	@ 0x28
 800c236:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c23a:	ab09      	add	r3, sp, #36	@ 0x24
 800c23c:	ec49 8b10 	vmov	d0, r8, r9
 800c240:	9300      	str	r3, [sp, #0]
 800c242:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c246:	6861      	ldr	r1, [r4, #4]
 800c248:	f7ff fed8 	bl	800bffc <__cvt>
 800c24c:	9b06      	ldr	r3, [sp, #24]
 800c24e:	4680      	mov	r8, r0
 800c250:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c252:	2b47      	cmp	r3, #71	@ 0x47
 800c254:	d129      	bne.n	800c2aa <_printf_float+0x172>
 800c256:	1cc8      	adds	r0, r1, #3
 800c258:	db02      	blt.n	800c260 <_printf_float+0x128>
 800c25a:	6863      	ldr	r3, [r4, #4]
 800c25c:	4299      	cmp	r1, r3
 800c25e:	dd41      	ble.n	800c2e4 <_printf_float+0x1ac>
 800c260:	f1aa 0a02 	sub.w	sl, sl, #2
 800c264:	fa5f fa8a 	uxtb.w	sl, sl
 800c268:	3901      	subs	r1, #1
 800c26a:	4652      	mov	r2, sl
 800c26c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c270:	9109      	str	r1, [sp, #36]	@ 0x24
 800c272:	f7ff ff28 	bl	800c0c6 <__exponent>
 800c276:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c278:	4681      	mov	r9, r0
 800c27a:	1813      	adds	r3, r2, r0
 800c27c:	2a01      	cmp	r2, #1
 800c27e:	6123      	str	r3, [r4, #16]
 800c280:	dc02      	bgt.n	800c288 <_printf_float+0x150>
 800c282:	6822      	ldr	r2, [r4, #0]
 800c284:	07d2      	lsls	r2, r2, #31
 800c286:	d501      	bpl.n	800c28c <_printf_float+0x154>
 800c288:	3301      	adds	r3, #1
 800c28a:	6123      	str	r3, [r4, #16]
 800c28c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c290:	2b00      	cmp	r3, #0
 800c292:	d0a2      	beq.n	800c1da <_printf_float+0xa2>
 800c294:	232d      	movs	r3, #45	@ 0x2d
 800c296:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c29a:	e79e      	b.n	800c1da <_printf_float+0xa2>
 800c29c:	9a06      	ldr	r2, [sp, #24]
 800c29e:	2a47      	cmp	r2, #71	@ 0x47
 800c2a0:	d1c2      	bne.n	800c228 <_printf_float+0xf0>
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d1c0      	bne.n	800c228 <_printf_float+0xf0>
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	e7bd      	b.n	800c226 <_printf_float+0xee>
 800c2aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c2ae:	d9db      	bls.n	800c268 <_printf_float+0x130>
 800c2b0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c2b4:	d118      	bne.n	800c2e8 <_printf_float+0x1b0>
 800c2b6:	2900      	cmp	r1, #0
 800c2b8:	6863      	ldr	r3, [r4, #4]
 800c2ba:	dd0b      	ble.n	800c2d4 <_printf_float+0x19c>
 800c2bc:	6121      	str	r1, [r4, #16]
 800c2be:	b913      	cbnz	r3, 800c2c6 <_printf_float+0x18e>
 800c2c0:	6822      	ldr	r2, [r4, #0]
 800c2c2:	07d0      	lsls	r0, r2, #31
 800c2c4:	d502      	bpl.n	800c2cc <_printf_float+0x194>
 800c2c6:	3301      	adds	r3, #1
 800c2c8:	440b      	add	r3, r1
 800c2ca:	6123      	str	r3, [r4, #16]
 800c2cc:	f04f 0900 	mov.w	r9, #0
 800c2d0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c2d2:	e7db      	b.n	800c28c <_printf_float+0x154>
 800c2d4:	b913      	cbnz	r3, 800c2dc <_printf_float+0x1a4>
 800c2d6:	6822      	ldr	r2, [r4, #0]
 800c2d8:	07d2      	lsls	r2, r2, #31
 800c2da:	d501      	bpl.n	800c2e0 <_printf_float+0x1a8>
 800c2dc:	3302      	adds	r3, #2
 800c2de:	e7f4      	b.n	800c2ca <_printf_float+0x192>
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	e7f2      	b.n	800c2ca <_printf_float+0x192>
 800c2e4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c2e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2ea:	4299      	cmp	r1, r3
 800c2ec:	db05      	blt.n	800c2fa <_printf_float+0x1c2>
 800c2ee:	6823      	ldr	r3, [r4, #0]
 800c2f0:	6121      	str	r1, [r4, #16]
 800c2f2:	07d8      	lsls	r0, r3, #31
 800c2f4:	d5ea      	bpl.n	800c2cc <_printf_float+0x194>
 800c2f6:	1c4b      	adds	r3, r1, #1
 800c2f8:	e7e7      	b.n	800c2ca <_printf_float+0x192>
 800c2fa:	2900      	cmp	r1, #0
 800c2fc:	bfd4      	ite	le
 800c2fe:	f1c1 0202 	rsble	r2, r1, #2
 800c302:	2201      	movgt	r2, #1
 800c304:	4413      	add	r3, r2
 800c306:	e7e0      	b.n	800c2ca <_printf_float+0x192>
 800c308:	6823      	ldr	r3, [r4, #0]
 800c30a:	055a      	lsls	r2, r3, #21
 800c30c:	d407      	bmi.n	800c31e <_printf_float+0x1e6>
 800c30e:	6923      	ldr	r3, [r4, #16]
 800c310:	4642      	mov	r2, r8
 800c312:	4631      	mov	r1, r6
 800c314:	4628      	mov	r0, r5
 800c316:	47b8      	blx	r7
 800c318:	3001      	adds	r0, #1
 800c31a:	d12b      	bne.n	800c374 <_printf_float+0x23c>
 800c31c:	e767      	b.n	800c1ee <_printf_float+0xb6>
 800c31e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c322:	f240 80dd 	bls.w	800c4e0 <_printf_float+0x3a8>
 800c326:	2200      	movs	r2, #0
 800c328:	2300      	movs	r3, #0
 800c32a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c32e:	f7f4 fbdf 	bl	8000af0 <__aeabi_dcmpeq>
 800c332:	2800      	cmp	r0, #0
 800c334:	d033      	beq.n	800c39e <_printf_float+0x266>
 800c336:	2301      	movs	r3, #1
 800c338:	4a36      	ldr	r2, [pc, #216]	@ (800c414 <_printf_float+0x2dc>)
 800c33a:	4631      	mov	r1, r6
 800c33c:	4628      	mov	r0, r5
 800c33e:	47b8      	blx	r7
 800c340:	3001      	adds	r0, #1
 800c342:	f43f af54 	beq.w	800c1ee <_printf_float+0xb6>
 800c346:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c34a:	4543      	cmp	r3, r8
 800c34c:	db02      	blt.n	800c354 <_printf_float+0x21c>
 800c34e:	6823      	ldr	r3, [r4, #0]
 800c350:	07d8      	lsls	r0, r3, #31
 800c352:	d50f      	bpl.n	800c374 <_printf_float+0x23c>
 800c354:	4631      	mov	r1, r6
 800c356:	4628      	mov	r0, r5
 800c358:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c35c:	47b8      	blx	r7
 800c35e:	3001      	adds	r0, #1
 800c360:	f43f af45 	beq.w	800c1ee <_printf_float+0xb6>
 800c364:	f04f 0900 	mov.w	r9, #0
 800c368:	f108 38ff 	add.w	r8, r8, #4294967295
 800c36c:	f104 0a1a 	add.w	sl, r4, #26
 800c370:	45c8      	cmp	r8, r9
 800c372:	dc09      	bgt.n	800c388 <_printf_float+0x250>
 800c374:	6823      	ldr	r3, [r4, #0]
 800c376:	079b      	lsls	r3, r3, #30
 800c378:	f100 8103 	bmi.w	800c582 <_printf_float+0x44a>
 800c37c:	68e0      	ldr	r0, [r4, #12]
 800c37e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c380:	4298      	cmp	r0, r3
 800c382:	bfb8      	it	lt
 800c384:	4618      	movlt	r0, r3
 800c386:	e734      	b.n	800c1f2 <_printf_float+0xba>
 800c388:	2301      	movs	r3, #1
 800c38a:	4652      	mov	r2, sl
 800c38c:	4631      	mov	r1, r6
 800c38e:	4628      	mov	r0, r5
 800c390:	47b8      	blx	r7
 800c392:	3001      	adds	r0, #1
 800c394:	f43f af2b 	beq.w	800c1ee <_printf_float+0xb6>
 800c398:	f109 0901 	add.w	r9, r9, #1
 800c39c:	e7e8      	b.n	800c370 <_printf_float+0x238>
 800c39e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	dc39      	bgt.n	800c418 <_printf_float+0x2e0>
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	4a1b      	ldr	r2, [pc, #108]	@ (800c414 <_printf_float+0x2dc>)
 800c3a8:	4631      	mov	r1, r6
 800c3aa:	4628      	mov	r0, r5
 800c3ac:	47b8      	blx	r7
 800c3ae:	3001      	adds	r0, #1
 800c3b0:	f43f af1d 	beq.w	800c1ee <_printf_float+0xb6>
 800c3b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c3b8:	ea59 0303 	orrs.w	r3, r9, r3
 800c3bc:	d102      	bne.n	800c3c4 <_printf_float+0x28c>
 800c3be:	6823      	ldr	r3, [r4, #0]
 800c3c0:	07d9      	lsls	r1, r3, #31
 800c3c2:	d5d7      	bpl.n	800c374 <_printf_float+0x23c>
 800c3c4:	4631      	mov	r1, r6
 800c3c6:	4628      	mov	r0, r5
 800c3c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3cc:	47b8      	blx	r7
 800c3ce:	3001      	adds	r0, #1
 800c3d0:	f43f af0d 	beq.w	800c1ee <_printf_float+0xb6>
 800c3d4:	f04f 0a00 	mov.w	sl, #0
 800c3d8:	f104 0b1a 	add.w	fp, r4, #26
 800c3dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3de:	425b      	negs	r3, r3
 800c3e0:	4553      	cmp	r3, sl
 800c3e2:	dc01      	bgt.n	800c3e8 <_printf_float+0x2b0>
 800c3e4:	464b      	mov	r3, r9
 800c3e6:	e793      	b.n	800c310 <_printf_float+0x1d8>
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	465a      	mov	r2, fp
 800c3ec:	4631      	mov	r1, r6
 800c3ee:	4628      	mov	r0, r5
 800c3f0:	47b8      	blx	r7
 800c3f2:	3001      	adds	r0, #1
 800c3f4:	f43f aefb 	beq.w	800c1ee <_printf_float+0xb6>
 800c3f8:	f10a 0a01 	add.w	sl, sl, #1
 800c3fc:	e7ee      	b.n	800c3dc <_printf_float+0x2a4>
 800c3fe:	bf00      	nop
 800c400:	7fefffff 	.word	0x7fefffff
 800c404:	08010c41 	.word	0x08010c41
 800c408:	08010c45 	.word	0x08010c45
 800c40c:	08010c49 	.word	0x08010c49
 800c410:	08010c4d 	.word	0x08010c4d
 800c414:	08010c51 	.word	0x08010c51
 800c418:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c41a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c41e:	4553      	cmp	r3, sl
 800c420:	bfa8      	it	ge
 800c422:	4653      	movge	r3, sl
 800c424:	2b00      	cmp	r3, #0
 800c426:	4699      	mov	r9, r3
 800c428:	dc36      	bgt.n	800c498 <_printf_float+0x360>
 800c42a:	f04f 0b00 	mov.w	fp, #0
 800c42e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c432:	f104 021a 	add.w	r2, r4, #26
 800c436:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c438:	9306      	str	r3, [sp, #24]
 800c43a:	eba3 0309 	sub.w	r3, r3, r9
 800c43e:	455b      	cmp	r3, fp
 800c440:	dc31      	bgt.n	800c4a6 <_printf_float+0x36e>
 800c442:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c444:	459a      	cmp	sl, r3
 800c446:	dc3a      	bgt.n	800c4be <_printf_float+0x386>
 800c448:	6823      	ldr	r3, [r4, #0]
 800c44a:	07da      	lsls	r2, r3, #31
 800c44c:	d437      	bmi.n	800c4be <_printf_float+0x386>
 800c44e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c450:	ebaa 0903 	sub.w	r9, sl, r3
 800c454:	9b06      	ldr	r3, [sp, #24]
 800c456:	ebaa 0303 	sub.w	r3, sl, r3
 800c45a:	4599      	cmp	r9, r3
 800c45c:	bfa8      	it	ge
 800c45e:	4699      	movge	r9, r3
 800c460:	f1b9 0f00 	cmp.w	r9, #0
 800c464:	dc33      	bgt.n	800c4ce <_printf_float+0x396>
 800c466:	f04f 0800 	mov.w	r8, #0
 800c46a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c46e:	f104 0b1a 	add.w	fp, r4, #26
 800c472:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c474:	ebaa 0303 	sub.w	r3, sl, r3
 800c478:	eba3 0309 	sub.w	r3, r3, r9
 800c47c:	4543      	cmp	r3, r8
 800c47e:	f77f af79 	ble.w	800c374 <_printf_float+0x23c>
 800c482:	2301      	movs	r3, #1
 800c484:	465a      	mov	r2, fp
 800c486:	4631      	mov	r1, r6
 800c488:	4628      	mov	r0, r5
 800c48a:	47b8      	blx	r7
 800c48c:	3001      	adds	r0, #1
 800c48e:	f43f aeae 	beq.w	800c1ee <_printf_float+0xb6>
 800c492:	f108 0801 	add.w	r8, r8, #1
 800c496:	e7ec      	b.n	800c472 <_printf_float+0x33a>
 800c498:	4642      	mov	r2, r8
 800c49a:	4631      	mov	r1, r6
 800c49c:	4628      	mov	r0, r5
 800c49e:	47b8      	blx	r7
 800c4a0:	3001      	adds	r0, #1
 800c4a2:	d1c2      	bne.n	800c42a <_printf_float+0x2f2>
 800c4a4:	e6a3      	b.n	800c1ee <_printf_float+0xb6>
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	4631      	mov	r1, r6
 800c4aa:	4628      	mov	r0, r5
 800c4ac:	9206      	str	r2, [sp, #24]
 800c4ae:	47b8      	blx	r7
 800c4b0:	3001      	adds	r0, #1
 800c4b2:	f43f ae9c 	beq.w	800c1ee <_printf_float+0xb6>
 800c4b6:	f10b 0b01 	add.w	fp, fp, #1
 800c4ba:	9a06      	ldr	r2, [sp, #24]
 800c4bc:	e7bb      	b.n	800c436 <_printf_float+0x2fe>
 800c4be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4c2:	4631      	mov	r1, r6
 800c4c4:	4628      	mov	r0, r5
 800c4c6:	47b8      	blx	r7
 800c4c8:	3001      	adds	r0, #1
 800c4ca:	d1c0      	bne.n	800c44e <_printf_float+0x316>
 800c4cc:	e68f      	b.n	800c1ee <_printf_float+0xb6>
 800c4ce:	9a06      	ldr	r2, [sp, #24]
 800c4d0:	464b      	mov	r3, r9
 800c4d2:	4631      	mov	r1, r6
 800c4d4:	4628      	mov	r0, r5
 800c4d6:	4442      	add	r2, r8
 800c4d8:	47b8      	blx	r7
 800c4da:	3001      	adds	r0, #1
 800c4dc:	d1c3      	bne.n	800c466 <_printf_float+0x32e>
 800c4de:	e686      	b.n	800c1ee <_printf_float+0xb6>
 800c4e0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c4e4:	f1ba 0f01 	cmp.w	sl, #1
 800c4e8:	dc01      	bgt.n	800c4ee <_printf_float+0x3b6>
 800c4ea:	07db      	lsls	r3, r3, #31
 800c4ec:	d536      	bpl.n	800c55c <_printf_float+0x424>
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	4642      	mov	r2, r8
 800c4f2:	4631      	mov	r1, r6
 800c4f4:	4628      	mov	r0, r5
 800c4f6:	47b8      	blx	r7
 800c4f8:	3001      	adds	r0, #1
 800c4fa:	f43f ae78 	beq.w	800c1ee <_printf_float+0xb6>
 800c4fe:	4631      	mov	r1, r6
 800c500:	4628      	mov	r0, r5
 800c502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c506:	47b8      	blx	r7
 800c508:	3001      	adds	r0, #1
 800c50a:	f43f ae70 	beq.w	800c1ee <_printf_float+0xb6>
 800c50e:	2200      	movs	r2, #0
 800c510:	2300      	movs	r3, #0
 800c512:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c516:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c51a:	f7f4 fae9 	bl	8000af0 <__aeabi_dcmpeq>
 800c51e:	b9c0      	cbnz	r0, 800c552 <_printf_float+0x41a>
 800c520:	4653      	mov	r3, sl
 800c522:	f108 0201 	add.w	r2, r8, #1
 800c526:	4631      	mov	r1, r6
 800c528:	4628      	mov	r0, r5
 800c52a:	47b8      	blx	r7
 800c52c:	3001      	adds	r0, #1
 800c52e:	d10c      	bne.n	800c54a <_printf_float+0x412>
 800c530:	e65d      	b.n	800c1ee <_printf_float+0xb6>
 800c532:	2301      	movs	r3, #1
 800c534:	465a      	mov	r2, fp
 800c536:	4631      	mov	r1, r6
 800c538:	4628      	mov	r0, r5
 800c53a:	47b8      	blx	r7
 800c53c:	3001      	adds	r0, #1
 800c53e:	f43f ae56 	beq.w	800c1ee <_printf_float+0xb6>
 800c542:	f108 0801 	add.w	r8, r8, #1
 800c546:	45d0      	cmp	r8, sl
 800c548:	dbf3      	blt.n	800c532 <_printf_float+0x3fa>
 800c54a:	464b      	mov	r3, r9
 800c54c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c550:	e6df      	b.n	800c312 <_printf_float+0x1da>
 800c552:	f04f 0800 	mov.w	r8, #0
 800c556:	f104 0b1a 	add.w	fp, r4, #26
 800c55a:	e7f4      	b.n	800c546 <_printf_float+0x40e>
 800c55c:	2301      	movs	r3, #1
 800c55e:	4642      	mov	r2, r8
 800c560:	e7e1      	b.n	800c526 <_printf_float+0x3ee>
 800c562:	2301      	movs	r3, #1
 800c564:	464a      	mov	r2, r9
 800c566:	4631      	mov	r1, r6
 800c568:	4628      	mov	r0, r5
 800c56a:	47b8      	blx	r7
 800c56c:	3001      	adds	r0, #1
 800c56e:	f43f ae3e 	beq.w	800c1ee <_printf_float+0xb6>
 800c572:	f108 0801 	add.w	r8, r8, #1
 800c576:	68e3      	ldr	r3, [r4, #12]
 800c578:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c57a:	1a5b      	subs	r3, r3, r1
 800c57c:	4543      	cmp	r3, r8
 800c57e:	dcf0      	bgt.n	800c562 <_printf_float+0x42a>
 800c580:	e6fc      	b.n	800c37c <_printf_float+0x244>
 800c582:	f04f 0800 	mov.w	r8, #0
 800c586:	f104 0919 	add.w	r9, r4, #25
 800c58a:	e7f4      	b.n	800c576 <_printf_float+0x43e>

0800c58c <_printf_common>:
 800c58c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c590:	4616      	mov	r6, r2
 800c592:	4698      	mov	r8, r3
 800c594:	688a      	ldr	r2, [r1, #8]
 800c596:	4607      	mov	r7, r0
 800c598:	690b      	ldr	r3, [r1, #16]
 800c59a:	460c      	mov	r4, r1
 800c59c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	bfb8      	it	lt
 800c5a4:	4613      	movlt	r3, r2
 800c5a6:	6033      	str	r3, [r6, #0]
 800c5a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c5ac:	b10a      	cbz	r2, 800c5b2 <_printf_common+0x26>
 800c5ae:	3301      	adds	r3, #1
 800c5b0:	6033      	str	r3, [r6, #0]
 800c5b2:	6823      	ldr	r3, [r4, #0]
 800c5b4:	0699      	lsls	r1, r3, #26
 800c5b6:	bf42      	ittt	mi
 800c5b8:	6833      	ldrmi	r3, [r6, #0]
 800c5ba:	3302      	addmi	r3, #2
 800c5bc:	6033      	strmi	r3, [r6, #0]
 800c5be:	6825      	ldr	r5, [r4, #0]
 800c5c0:	f015 0506 	ands.w	r5, r5, #6
 800c5c4:	d106      	bne.n	800c5d4 <_printf_common+0x48>
 800c5c6:	f104 0a19 	add.w	sl, r4, #25
 800c5ca:	68e3      	ldr	r3, [r4, #12]
 800c5cc:	6832      	ldr	r2, [r6, #0]
 800c5ce:	1a9b      	subs	r3, r3, r2
 800c5d0:	42ab      	cmp	r3, r5
 800c5d2:	dc2b      	bgt.n	800c62c <_printf_common+0xa0>
 800c5d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c5d8:	6822      	ldr	r2, [r4, #0]
 800c5da:	3b00      	subs	r3, #0
 800c5dc:	bf18      	it	ne
 800c5de:	2301      	movne	r3, #1
 800c5e0:	0692      	lsls	r2, r2, #26
 800c5e2:	d430      	bmi.n	800c646 <_printf_common+0xba>
 800c5e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c5e8:	4641      	mov	r1, r8
 800c5ea:	4638      	mov	r0, r7
 800c5ec:	47c8      	blx	r9
 800c5ee:	3001      	adds	r0, #1
 800c5f0:	d023      	beq.n	800c63a <_printf_common+0xae>
 800c5f2:	6823      	ldr	r3, [r4, #0]
 800c5f4:	341a      	adds	r4, #26
 800c5f6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800c5fa:	f003 0306 	and.w	r3, r3, #6
 800c5fe:	2b04      	cmp	r3, #4
 800c600:	bf0a      	itet	eq
 800c602:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800c606:	2500      	movne	r5, #0
 800c608:	6833      	ldreq	r3, [r6, #0]
 800c60a:	f04f 0600 	mov.w	r6, #0
 800c60e:	bf08      	it	eq
 800c610:	1aed      	subeq	r5, r5, r3
 800c612:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c616:	bf08      	it	eq
 800c618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c61c:	4293      	cmp	r3, r2
 800c61e:	bfc4      	itt	gt
 800c620:	1a9b      	subgt	r3, r3, r2
 800c622:	18ed      	addgt	r5, r5, r3
 800c624:	42b5      	cmp	r5, r6
 800c626:	d11a      	bne.n	800c65e <_printf_common+0xd2>
 800c628:	2000      	movs	r0, #0
 800c62a:	e008      	b.n	800c63e <_printf_common+0xb2>
 800c62c:	2301      	movs	r3, #1
 800c62e:	4652      	mov	r2, sl
 800c630:	4641      	mov	r1, r8
 800c632:	4638      	mov	r0, r7
 800c634:	47c8      	blx	r9
 800c636:	3001      	adds	r0, #1
 800c638:	d103      	bne.n	800c642 <_printf_common+0xb6>
 800c63a:	f04f 30ff 	mov.w	r0, #4294967295
 800c63e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c642:	3501      	adds	r5, #1
 800c644:	e7c1      	b.n	800c5ca <_printf_common+0x3e>
 800c646:	18e1      	adds	r1, r4, r3
 800c648:	1c5a      	adds	r2, r3, #1
 800c64a:	2030      	movs	r0, #48	@ 0x30
 800c64c:	3302      	adds	r3, #2
 800c64e:	4422      	add	r2, r4
 800c650:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c654:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c658:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c65c:	e7c2      	b.n	800c5e4 <_printf_common+0x58>
 800c65e:	2301      	movs	r3, #1
 800c660:	4622      	mov	r2, r4
 800c662:	4641      	mov	r1, r8
 800c664:	4638      	mov	r0, r7
 800c666:	47c8      	blx	r9
 800c668:	3001      	adds	r0, #1
 800c66a:	d0e6      	beq.n	800c63a <_printf_common+0xae>
 800c66c:	3601      	adds	r6, #1
 800c66e:	e7d9      	b.n	800c624 <_printf_common+0x98>

0800c670 <_printf_i>:
 800c670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c674:	7e0f      	ldrb	r7, [r1, #24]
 800c676:	4691      	mov	r9, r2
 800c678:	4680      	mov	r8, r0
 800c67a:	460c      	mov	r4, r1
 800c67c:	2f78      	cmp	r7, #120	@ 0x78
 800c67e:	469a      	mov	sl, r3
 800c680:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c682:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c686:	d807      	bhi.n	800c698 <_printf_i+0x28>
 800c688:	2f62      	cmp	r7, #98	@ 0x62
 800c68a:	d80a      	bhi.n	800c6a2 <_printf_i+0x32>
 800c68c:	2f00      	cmp	r7, #0
 800c68e:	f000 80d2 	beq.w	800c836 <_printf_i+0x1c6>
 800c692:	2f58      	cmp	r7, #88	@ 0x58
 800c694:	f000 80b9 	beq.w	800c80a <_printf_i+0x19a>
 800c698:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c69c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c6a0:	e03a      	b.n	800c718 <_printf_i+0xa8>
 800c6a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c6a6:	2b15      	cmp	r3, #21
 800c6a8:	d8f6      	bhi.n	800c698 <_printf_i+0x28>
 800c6aa:	a101      	add	r1, pc, #4	@ (adr r1, 800c6b0 <_printf_i+0x40>)
 800c6ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c6b0:	0800c709 	.word	0x0800c709
 800c6b4:	0800c71d 	.word	0x0800c71d
 800c6b8:	0800c699 	.word	0x0800c699
 800c6bc:	0800c699 	.word	0x0800c699
 800c6c0:	0800c699 	.word	0x0800c699
 800c6c4:	0800c699 	.word	0x0800c699
 800c6c8:	0800c71d 	.word	0x0800c71d
 800c6cc:	0800c699 	.word	0x0800c699
 800c6d0:	0800c699 	.word	0x0800c699
 800c6d4:	0800c699 	.word	0x0800c699
 800c6d8:	0800c699 	.word	0x0800c699
 800c6dc:	0800c81d 	.word	0x0800c81d
 800c6e0:	0800c747 	.word	0x0800c747
 800c6e4:	0800c7d7 	.word	0x0800c7d7
 800c6e8:	0800c699 	.word	0x0800c699
 800c6ec:	0800c699 	.word	0x0800c699
 800c6f0:	0800c83f 	.word	0x0800c83f
 800c6f4:	0800c699 	.word	0x0800c699
 800c6f8:	0800c747 	.word	0x0800c747
 800c6fc:	0800c699 	.word	0x0800c699
 800c700:	0800c699 	.word	0x0800c699
 800c704:	0800c7df 	.word	0x0800c7df
 800c708:	6833      	ldr	r3, [r6, #0]
 800c70a:	1d1a      	adds	r2, r3, #4
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	6032      	str	r2, [r6, #0]
 800c710:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c714:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c718:	2301      	movs	r3, #1
 800c71a:	e09d      	b.n	800c858 <_printf_i+0x1e8>
 800c71c:	6833      	ldr	r3, [r6, #0]
 800c71e:	6820      	ldr	r0, [r4, #0]
 800c720:	1d19      	adds	r1, r3, #4
 800c722:	6031      	str	r1, [r6, #0]
 800c724:	0606      	lsls	r6, r0, #24
 800c726:	d501      	bpl.n	800c72c <_printf_i+0xbc>
 800c728:	681d      	ldr	r5, [r3, #0]
 800c72a:	e003      	b.n	800c734 <_printf_i+0xc4>
 800c72c:	0645      	lsls	r5, r0, #25
 800c72e:	d5fb      	bpl.n	800c728 <_printf_i+0xb8>
 800c730:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c734:	2d00      	cmp	r5, #0
 800c736:	da03      	bge.n	800c740 <_printf_i+0xd0>
 800c738:	232d      	movs	r3, #45	@ 0x2d
 800c73a:	426d      	negs	r5, r5
 800c73c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c740:	4859      	ldr	r0, [pc, #356]	@ (800c8a8 <_printf_i+0x238>)
 800c742:	230a      	movs	r3, #10
 800c744:	e011      	b.n	800c76a <_printf_i+0xfa>
 800c746:	6821      	ldr	r1, [r4, #0]
 800c748:	6833      	ldr	r3, [r6, #0]
 800c74a:	0608      	lsls	r0, r1, #24
 800c74c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c750:	d402      	bmi.n	800c758 <_printf_i+0xe8>
 800c752:	0649      	lsls	r1, r1, #25
 800c754:	bf48      	it	mi
 800c756:	b2ad      	uxthmi	r5, r5
 800c758:	2f6f      	cmp	r7, #111	@ 0x6f
 800c75a:	6033      	str	r3, [r6, #0]
 800c75c:	4852      	ldr	r0, [pc, #328]	@ (800c8a8 <_printf_i+0x238>)
 800c75e:	bf14      	ite	ne
 800c760:	230a      	movne	r3, #10
 800c762:	2308      	moveq	r3, #8
 800c764:	2100      	movs	r1, #0
 800c766:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c76a:	6866      	ldr	r6, [r4, #4]
 800c76c:	2e00      	cmp	r6, #0
 800c76e:	60a6      	str	r6, [r4, #8]
 800c770:	bfa2      	ittt	ge
 800c772:	6821      	ldrge	r1, [r4, #0]
 800c774:	f021 0104 	bicge.w	r1, r1, #4
 800c778:	6021      	strge	r1, [r4, #0]
 800c77a:	b90d      	cbnz	r5, 800c780 <_printf_i+0x110>
 800c77c:	2e00      	cmp	r6, #0
 800c77e:	d04b      	beq.n	800c818 <_printf_i+0x1a8>
 800c780:	4616      	mov	r6, r2
 800c782:	fbb5 f1f3 	udiv	r1, r5, r3
 800c786:	fb03 5711 	mls	r7, r3, r1, r5
 800c78a:	5dc7      	ldrb	r7, [r0, r7]
 800c78c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c790:	462f      	mov	r7, r5
 800c792:	460d      	mov	r5, r1
 800c794:	42bb      	cmp	r3, r7
 800c796:	d9f4      	bls.n	800c782 <_printf_i+0x112>
 800c798:	2b08      	cmp	r3, #8
 800c79a:	d10b      	bne.n	800c7b4 <_printf_i+0x144>
 800c79c:	6823      	ldr	r3, [r4, #0]
 800c79e:	07df      	lsls	r7, r3, #31
 800c7a0:	d508      	bpl.n	800c7b4 <_printf_i+0x144>
 800c7a2:	6923      	ldr	r3, [r4, #16]
 800c7a4:	6861      	ldr	r1, [r4, #4]
 800c7a6:	4299      	cmp	r1, r3
 800c7a8:	bfde      	ittt	le
 800c7aa:	2330      	movle	r3, #48	@ 0x30
 800c7ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c7b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c7b4:	1b92      	subs	r2, r2, r6
 800c7b6:	6122      	str	r2, [r4, #16]
 800c7b8:	464b      	mov	r3, r9
 800c7ba:	aa03      	add	r2, sp, #12
 800c7bc:	4621      	mov	r1, r4
 800c7be:	4640      	mov	r0, r8
 800c7c0:	f8cd a000 	str.w	sl, [sp]
 800c7c4:	f7ff fee2 	bl	800c58c <_printf_common>
 800c7c8:	3001      	adds	r0, #1
 800c7ca:	d14a      	bne.n	800c862 <_printf_i+0x1f2>
 800c7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c7d0:	b004      	add	sp, #16
 800c7d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7d6:	6823      	ldr	r3, [r4, #0]
 800c7d8:	f043 0320 	orr.w	r3, r3, #32
 800c7dc:	6023      	str	r3, [r4, #0]
 800c7de:	2778      	movs	r7, #120	@ 0x78
 800c7e0:	4832      	ldr	r0, [pc, #200]	@ (800c8ac <_printf_i+0x23c>)
 800c7e2:	6823      	ldr	r3, [r4, #0]
 800c7e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c7e8:	061f      	lsls	r7, r3, #24
 800c7ea:	6831      	ldr	r1, [r6, #0]
 800c7ec:	f851 5b04 	ldr.w	r5, [r1], #4
 800c7f0:	d402      	bmi.n	800c7f8 <_printf_i+0x188>
 800c7f2:	065f      	lsls	r7, r3, #25
 800c7f4:	bf48      	it	mi
 800c7f6:	b2ad      	uxthmi	r5, r5
 800c7f8:	6031      	str	r1, [r6, #0]
 800c7fa:	07d9      	lsls	r1, r3, #31
 800c7fc:	bf44      	itt	mi
 800c7fe:	f043 0320 	orrmi.w	r3, r3, #32
 800c802:	6023      	strmi	r3, [r4, #0]
 800c804:	b11d      	cbz	r5, 800c80e <_printf_i+0x19e>
 800c806:	2310      	movs	r3, #16
 800c808:	e7ac      	b.n	800c764 <_printf_i+0xf4>
 800c80a:	4827      	ldr	r0, [pc, #156]	@ (800c8a8 <_printf_i+0x238>)
 800c80c:	e7e9      	b.n	800c7e2 <_printf_i+0x172>
 800c80e:	6823      	ldr	r3, [r4, #0]
 800c810:	f023 0320 	bic.w	r3, r3, #32
 800c814:	6023      	str	r3, [r4, #0]
 800c816:	e7f6      	b.n	800c806 <_printf_i+0x196>
 800c818:	4616      	mov	r6, r2
 800c81a:	e7bd      	b.n	800c798 <_printf_i+0x128>
 800c81c:	6833      	ldr	r3, [r6, #0]
 800c81e:	6825      	ldr	r5, [r4, #0]
 800c820:	1d18      	adds	r0, r3, #4
 800c822:	6961      	ldr	r1, [r4, #20]
 800c824:	6030      	str	r0, [r6, #0]
 800c826:	062e      	lsls	r6, r5, #24
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	d501      	bpl.n	800c830 <_printf_i+0x1c0>
 800c82c:	6019      	str	r1, [r3, #0]
 800c82e:	e002      	b.n	800c836 <_printf_i+0x1c6>
 800c830:	0668      	lsls	r0, r5, #25
 800c832:	d5fb      	bpl.n	800c82c <_printf_i+0x1bc>
 800c834:	8019      	strh	r1, [r3, #0]
 800c836:	2300      	movs	r3, #0
 800c838:	4616      	mov	r6, r2
 800c83a:	6123      	str	r3, [r4, #16]
 800c83c:	e7bc      	b.n	800c7b8 <_printf_i+0x148>
 800c83e:	6833      	ldr	r3, [r6, #0]
 800c840:	2100      	movs	r1, #0
 800c842:	1d1a      	adds	r2, r3, #4
 800c844:	6032      	str	r2, [r6, #0]
 800c846:	681e      	ldr	r6, [r3, #0]
 800c848:	6862      	ldr	r2, [r4, #4]
 800c84a:	4630      	mov	r0, r6
 800c84c:	f000 fcfd 	bl	800d24a <memchr>
 800c850:	b108      	cbz	r0, 800c856 <_printf_i+0x1e6>
 800c852:	1b80      	subs	r0, r0, r6
 800c854:	6060      	str	r0, [r4, #4]
 800c856:	6863      	ldr	r3, [r4, #4]
 800c858:	6123      	str	r3, [r4, #16]
 800c85a:	2300      	movs	r3, #0
 800c85c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c860:	e7aa      	b.n	800c7b8 <_printf_i+0x148>
 800c862:	6923      	ldr	r3, [r4, #16]
 800c864:	4632      	mov	r2, r6
 800c866:	4649      	mov	r1, r9
 800c868:	4640      	mov	r0, r8
 800c86a:	47d0      	blx	sl
 800c86c:	3001      	adds	r0, #1
 800c86e:	d0ad      	beq.n	800c7cc <_printf_i+0x15c>
 800c870:	6823      	ldr	r3, [r4, #0]
 800c872:	079b      	lsls	r3, r3, #30
 800c874:	d413      	bmi.n	800c89e <_printf_i+0x22e>
 800c876:	68e0      	ldr	r0, [r4, #12]
 800c878:	9b03      	ldr	r3, [sp, #12]
 800c87a:	4298      	cmp	r0, r3
 800c87c:	bfb8      	it	lt
 800c87e:	4618      	movlt	r0, r3
 800c880:	e7a6      	b.n	800c7d0 <_printf_i+0x160>
 800c882:	2301      	movs	r3, #1
 800c884:	4632      	mov	r2, r6
 800c886:	4649      	mov	r1, r9
 800c888:	4640      	mov	r0, r8
 800c88a:	47d0      	blx	sl
 800c88c:	3001      	adds	r0, #1
 800c88e:	d09d      	beq.n	800c7cc <_printf_i+0x15c>
 800c890:	3501      	adds	r5, #1
 800c892:	68e3      	ldr	r3, [r4, #12]
 800c894:	9903      	ldr	r1, [sp, #12]
 800c896:	1a5b      	subs	r3, r3, r1
 800c898:	42ab      	cmp	r3, r5
 800c89a:	dcf2      	bgt.n	800c882 <_printf_i+0x212>
 800c89c:	e7eb      	b.n	800c876 <_printf_i+0x206>
 800c89e:	2500      	movs	r5, #0
 800c8a0:	f104 0619 	add.w	r6, r4, #25
 800c8a4:	e7f5      	b.n	800c892 <_printf_i+0x222>
 800c8a6:	bf00      	nop
 800c8a8:	08010c53 	.word	0x08010c53
 800c8ac:	08010c64 	.word	0x08010c64

0800c8b0 <_scanf_float>:
 800c8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8b4:	b087      	sub	sp, #28
 800c8b6:	4617      	mov	r7, r2
 800c8b8:	4680      	mov	r8, r0
 800c8ba:	460c      	mov	r4, r1
 800c8bc:	9303      	str	r3, [sp, #12]
 800c8be:	688b      	ldr	r3, [r1, #8]
 800c8c0:	1e5a      	subs	r2, r3, #1
 800c8c2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c8c6:	460a      	mov	r2, r1
 800c8c8:	bf89      	itett	hi
 800c8ca:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c8ce:	f04f 0b00 	movls.w	fp, #0
 800c8d2:	eb03 0b05 	addhi.w	fp, r3, r5
 800c8d6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c8da:	f04f 0500 	mov.w	r5, #0
 800c8de:	bf88      	it	hi
 800c8e0:	608b      	strhi	r3, [r1, #8]
 800c8e2:	680b      	ldr	r3, [r1, #0]
 800c8e4:	46aa      	mov	sl, r5
 800c8e6:	46a9      	mov	r9, r5
 800c8e8:	9502      	str	r5, [sp, #8]
 800c8ea:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c8ee:	f842 3b1c 	str.w	r3, [r2], #28
 800c8f2:	4616      	mov	r6, r2
 800c8f4:	9201      	str	r2, [sp, #4]
 800c8f6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c8fa:	68a2      	ldr	r2, [r4, #8]
 800c8fc:	b152      	cbz	r2, 800c914 <_scanf_float+0x64>
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	2b4e      	cmp	r3, #78	@ 0x4e
 800c904:	d864      	bhi.n	800c9d0 <_scanf_float+0x120>
 800c906:	2b40      	cmp	r3, #64	@ 0x40
 800c908:	d83c      	bhi.n	800c984 <_scanf_float+0xd4>
 800c90a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c90e:	b2c8      	uxtb	r0, r1
 800c910:	280e      	cmp	r0, #14
 800c912:	d93a      	bls.n	800c98a <_scanf_float+0xda>
 800c914:	f1b9 0f00 	cmp.w	r9, #0
 800c918:	d003      	beq.n	800c922 <_scanf_float+0x72>
 800c91a:	6823      	ldr	r3, [r4, #0]
 800c91c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c920:	6023      	str	r3, [r4, #0]
 800c922:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c926:	f1ba 0f01 	cmp.w	sl, #1
 800c92a:	f200 8117 	bhi.w	800cb5c <_scanf_float+0x2ac>
 800c92e:	9b01      	ldr	r3, [sp, #4]
 800c930:	429e      	cmp	r6, r3
 800c932:	f200 8108 	bhi.w	800cb46 <_scanf_float+0x296>
 800c936:	2001      	movs	r0, #1
 800c938:	b007      	add	sp, #28
 800c93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c93e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c942:	2a0d      	cmp	r2, #13
 800c944:	d8e6      	bhi.n	800c914 <_scanf_float+0x64>
 800c946:	a101      	add	r1, pc, #4	@ (adr r1, 800c94c <_scanf_float+0x9c>)
 800c948:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c94c:	0800ca93 	.word	0x0800ca93
 800c950:	0800c915 	.word	0x0800c915
 800c954:	0800c915 	.word	0x0800c915
 800c958:	0800c915 	.word	0x0800c915
 800c95c:	0800caf3 	.word	0x0800caf3
 800c960:	0800cacb 	.word	0x0800cacb
 800c964:	0800c915 	.word	0x0800c915
 800c968:	0800c915 	.word	0x0800c915
 800c96c:	0800caa1 	.word	0x0800caa1
 800c970:	0800c915 	.word	0x0800c915
 800c974:	0800c915 	.word	0x0800c915
 800c978:	0800c915 	.word	0x0800c915
 800c97c:	0800c915 	.word	0x0800c915
 800c980:	0800ca59 	.word	0x0800ca59
 800c984:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c988:	e7db      	b.n	800c942 <_scanf_float+0x92>
 800c98a:	290e      	cmp	r1, #14
 800c98c:	d8c2      	bhi.n	800c914 <_scanf_float+0x64>
 800c98e:	a001      	add	r0, pc, #4	@ (adr r0, 800c994 <_scanf_float+0xe4>)
 800c990:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c994:	0800ca49 	.word	0x0800ca49
 800c998:	0800c915 	.word	0x0800c915
 800c99c:	0800ca49 	.word	0x0800ca49
 800c9a0:	0800cadf 	.word	0x0800cadf
 800c9a4:	0800c915 	.word	0x0800c915
 800c9a8:	0800c9f1 	.word	0x0800c9f1
 800c9ac:	0800ca2f 	.word	0x0800ca2f
 800c9b0:	0800ca2f 	.word	0x0800ca2f
 800c9b4:	0800ca2f 	.word	0x0800ca2f
 800c9b8:	0800ca2f 	.word	0x0800ca2f
 800c9bc:	0800ca2f 	.word	0x0800ca2f
 800c9c0:	0800ca2f 	.word	0x0800ca2f
 800c9c4:	0800ca2f 	.word	0x0800ca2f
 800c9c8:	0800ca2f 	.word	0x0800ca2f
 800c9cc:	0800ca2f 	.word	0x0800ca2f
 800c9d0:	2b6e      	cmp	r3, #110	@ 0x6e
 800c9d2:	d809      	bhi.n	800c9e8 <_scanf_float+0x138>
 800c9d4:	2b60      	cmp	r3, #96	@ 0x60
 800c9d6:	d8b2      	bhi.n	800c93e <_scanf_float+0x8e>
 800c9d8:	2b54      	cmp	r3, #84	@ 0x54
 800c9da:	d07b      	beq.n	800cad4 <_scanf_float+0x224>
 800c9dc:	2b59      	cmp	r3, #89	@ 0x59
 800c9de:	d199      	bne.n	800c914 <_scanf_float+0x64>
 800c9e0:	2d07      	cmp	r5, #7
 800c9e2:	d197      	bne.n	800c914 <_scanf_float+0x64>
 800c9e4:	2508      	movs	r5, #8
 800c9e6:	e02c      	b.n	800ca42 <_scanf_float+0x192>
 800c9e8:	2b74      	cmp	r3, #116	@ 0x74
 800c9ea:	d073      	beq.n	800cad4 <_scanf_float+0x224>
 800c9ec:	2b79      	cmp	r3, #121	@ 0x79
 800c9ee:	e7f6      	b.n	800c9de <_scanf_float+0x12e>
 800c9f0:	6821      	ldr	r1, [r4, #0]
 800c9f2:	05c8      	lsls	r0, r1, #23
 800c9f4:	d51b      	bpl.n	800ca2e <_scanf_float+0x17e>
 800c9f6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c9fa:	f109 0901 	add.w	r9, r9, #1
 800c9fe:	6021      	str	r1, [r4, #0]
 800ca00:	f1bb 0f00 	cmp.w	fp, #0
 800ca04:	d003      	beq.n	800ca0e <_scanf_float+0x15e>
 800ca06:	3201      	adds	r2, #1
 800ca08:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ca0c:	60a2      	str	r2, [r4, #8]
 800ca0e:	68a3      	ldr	r3, [r4, #8]
 800ca10:	3b01      	subs	r3, #1
 800ca12:	60a3      	str	r3, [r4, #8]
 800ca14:	6923      	ldr	r3, [r4, #16]
 800ca16:	3301      	adds	r3, #1
 800ca18:	6123      	str	r3, [r4, #16]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	3b01      	subs	r3, #1
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	607b      	str	r3, [r7, #4]
 800ca22:	f340 8087 	ble.w	800cb34 <_scanf_float+0x284>
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	3301      	adds	r3, #1
 800ca2a:	603b      	str	r3, [r7, #0]
 800ca2c:	e765      	b.n	800c8fa <_scanf_float+0x4a>
 800ca2e:	eb1a 0105 	adds.w	r1, sl, r5
 800ca32:	f47f af6f 	bne.w	800c914 <_scanf_float+0x64>
 800ca36:	6822      	ldr	r2, [r4, #0]
 800ca38:	460d      	mov	r5, r1
 800ca3a:	468a      	mov	sl, r1
 800ca3c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ca40:	6022      	str	r2, [r4, #0]
 800ca42:	f806 3b01 	strb.w	r3, [r6], #1
 800ca46:	e7e2      	b.n	800ca0e <_scanf_float+0x15e>
 800ca48:	6822      	ldr	r2, [r4, #0]
 800ca4a:	0610      	lsls	r0, r2, #24
 800ca4c:	f57f af62 	bpl.w	800c914 <_scanf_float+0x64>
 800ca50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ca54:	6022      	str	r2, [r4, #0]
 800ca56:	e7f4      	b.n	800ca42 <_scanf_float+0x192>
 800ca58:	f1ba 0f00 	cmp.w	sl, #0
 800ca5c:	d10e      	bne.n	800ca7c <_scanf_float+0x1cc>
 800ca5e:	f1b9 0f00 	cmp.w	r9, #0
 800ca62:	d10e      	bne.n	800ca82 <_scanf_float+0x1d2>
 800ca64:	6822      	ldr	r2, [r4, #0]
 800ca66:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ca6a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ca6e:	d108      	bne.n	800ca82 <_scanf_float+0x1d2>
 800ca70:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ca74:	f04f 0a01 	mov.w	sl, #1
 800ca78:	6022      	str	r2, [r4, #0]
 800ca7a:	e7e2      	b.n	800ca42 <_scanf_float+0x192>
 800ca7c:	f1ba 0f02 	cmp.w	sl, #2
 800ca80:	d055      	beq.n	800cb2e <_scanf_float+0x27e>
 800ca82:	2d01      	cmp	r5, #1
 800ca84:	d002      	beq.n	800ca8c <_scanf_float+0x1dc>
 800ca86:	2d04      	cmp	r5, #4
 800ca88:	f47f af44 	bne.w	800c914 <_scanf_float+0x64>
 800ca8c:	3501      	adds	r5, #1
 800ca8e:	b2ed      	uxtb	r5, r5
 800ca90:	e7d7      	b.n	800ca42 <_scanf_float+0x192>
 800ca92:	f1ba 0f01 	cmp.w	sl, #1
 800ca96:	f47f af3d 	bne.w	800c914 <_scanf_float+0x64>
 800ca9a:	f04f 0a02 	mov.w	sl, #2
 800ca9e:	e7d0      	b.n	800ca42 <_scanf_float+0x192>
 800caa0:	b97d      	cbnz	r5, 800cac2 <_scanf_float+0x212>
 800caa2:	f1b9 0f00 	cmp.w	r9, #0
 800caa6:	f47f af38 	bne.w	800c91a <_scanf_float+0x6a>
 800caaa:	6822      	ldr	r2, [r4, #0]
 800caac:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cab0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cab4:	f040 8107 	bne.w	800ccc6 <_scanf_float+0x416>
 800cab8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cabc:	2501      	movs	r5, #1
 800cabe:	6022      	str	r2, [r4, #0]
 800cac0:	e7bf      	b.n	800ca42 <_scanf_float+0x192>
 800cac2:	2d03      	cmp	r5, #3
 800cac4:	d0e2      	beq.n	800ca8c <_scanf_float+0x1dc>
 800cac6:	2d05      	cmp	r5, #5
 800cac8:	e7de      	b.n	800ca88 <_scanf_float+0x1d8>
 800caca:	2d02      	cmp	r5, #2
 800cacc:	f47f af22 	bne.w	800c914 <_scanf_float+0x64>
 800cad0:	2503      	movs	r5, #3
 800cad2:	e7b6      	b.n	800ca42 <_scanf_float+0x192>
 800cad4:	2d06      	cmp	r5, #6
 800cad6:	f47f af1d 	bne.w	800c914 <_scanf_float+0x64>
 800cada:	2507      	movs	r5, #7
 800cadc:	e7b1      	b.n	800ca42 <_scanf_float+0x192>
 800cade:	6822      	ldr	r2, [r4, #0]
 800cae0:	0591      	lsls	r1, r2, #22
 800cae2:	f57f af17 	bpl.w	800c914 <_scanf_float+0x64>
 800cae6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800caea:	f8cd 9008 	str.w	r9, [sp, #8]
 800caee:	6022      	str	r2, [r4, #0]
 800caf0:	e7a7      	b.n	800ca42 <_scanf_float+0x192>
 800caf2:	6822      	ldr	r2, [r4, #0]
 800caf4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800caf8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800cafc:	d006      	beq.n	800cb0c <_scanf_float+0x25c>
 800cafe:	0550      	lsls	r0, r2, #21
 800cb00:	f57f af08 	bpl.w	800c914 <_scanf_float+0x64>
 800cb04:	f1b9 0f00 	cmp.w	r9, #0
 800cb08:	f000 80dd 	beq.w	800ccc6 <_scanf_float+0x416>
 800cb0c:	0591      	lsls	r1, r2, #22
 800cb0e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cb12:	bf58      	it	pl
 800cb14:	9902      	ldrpl	r1, [sp, #8]
 800cb16:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800cb1a:	bf58      	it	pl
 800cb1c:	eba9 0101 	subpl.w	r1, r9, r1
 800cb20:	6022      	str	r2, [r4, #0]
 800cb22:	f04f 0900 	mov.w	r9, #0
 800cb26:	bf58      	it	pl
 800cb28:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cb2c:	e789      	b.n	800ca42 <_scanf_float+0x192>
 800cb2e:	f04f 0a03 	mov.w	sl, #3
 800cb32:	e786      	b.n	800ca42 <_scanf_float+0x192>
 800cb34:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cb38:	4639      	mov	r1, r7
 800cb3a:	4640      	mov	r0, r8
 800cb3c:	4798      	blx	r3
 800cb3e:	2800      	cmp	r0, #0
 800cb40:	f43f aedb 	beq.w	800c8fa <_scanf_float+0x4a>
 800cb44:	e6e6      	b.n	800c914 <_scanf_float+0x64>
 800cb46:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cb4a:	463a      	mov	r2, r7
 800cb4c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cb50:	4640      	mov	r0, r8
 800cb52:	4798      	blx	r3
 800cb54:	6923      	ldr	r3, [r4, #16]
 800cb56:	3b01      	subs	r3, #1
 800cb58:	6123      	str	r3, [r4, #16]
 800cb5a:	e6e8      	b.n	800c92e <_scanf_float+0x7e>
 800cb5c:	1e6b      	subs	r3, r5, #1
 800cb5e:	2b06      	cmp	r3, #6
 800cb60:	d824      	bhi.n	800cbac <_scanf_float+0x2fc>
 800cb62:	2d02      	cmp	r5, #2
 800cb64:	d836      	bhi.n	800cbd4 <_scanf_float+0x324>
 800cb66:	9b01      	ldr	r3, [sp, #4]
 800cb68:	429e      	cmp	r6, r3
 800cb6a:	f67f aee4 	bls.w	800c936 <_scanf_float+0x86>
 800cb6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cb72:	463a      	mov	r2, r7
 800cb74:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cb78:	4640      	mov	r0, r8
 800cb7a:	4798      	blx	r3
 800cb7c:	6923      	ldr	r3, [r4, #16]
 800cb7e:	3b01      	subs	r3, #1
 800cb80:	6123      	str	r3, [r4, #16]
 800cb82:	e7f0      	b.n	800cb66 <_scanf_float+0x2b6>
 800cb84:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cb88:	463a      	mov	r2, r7
 800cb8a:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800cb8e:	4640      	mov	r0, r8
 800cb90:	4798      	blx	r3
 800cb92:	6923      	ldr	r3, [r4, #16]
 800cb94:	3b01      	subs	r3, #1
 800cb96:	6123      	str	r3, [r4, #16]
 800cb98:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cb9c:	fa5f fa8a 	uxtb.w	sl, sl
 800cba0:	f1ba 0f02 	cmp.w	sl, #2
 800cba4:	d1ee      	bne.n	800cb84 <_scanf_float+0x2d4>
 800cba6:	3d03      	subs	r5, #3
 800cba8:	b2ed      	uxtb	r5, r5
 800cbaa:	1b76      	subs	r6, r6, r5
 800cbac:	6823      	ldr	r3, [r4, #0]
 800cbae:	05da      	lsls	r2, r3, #23
 800cbb0:	d52f      	bpl.n	800cc12 <_scanf_float+0x362>
 800cbb2:	055b      	lsls	r3, r3, #21
 800cbb4:	d511      	bpl.n	800cbda <_scanf_float+0x32a>
 800cbb6:	9b01      	ldr	r3, [sp, #4]
 800cbb8:	429e      	cmp	r6, r3
 800cbba:	f67f aebc 	bls.w	800c936 <_scanf_float+0x86>
 800cbbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cbc2:	463a      	mov	r2, r7
 800cbc4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cbc8:	4640      	mov	r0, r8
 800cbca:	4798      	blx	r3
 800cbcc:	6923      	ldr	r3, [r4, #16]
 800cbce:	3b01      	subs	r3, #1
 800cbd0:	6123      	str	r3, [r4, #16]
 800cbd2:	e7f0      	b.n	800cbb6 <_scanf_float+0x306>
 800cbd4:	46aa      	mov	sl, r5
 800cbd6:	46b3      	mov	fp, r6
 800cbd8:	e7de      	b.n	800cb98 <_scanf_float+0x2e8>
 800cbda:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cbde:	1e75      	subs	r5, r6, #1
 800cbe0:	6923      	ldr	r3, [r4, #16]
 800cbe2:	2965      	cmp	r1, #101	@ 0x65
 800cbe4:	f103 33ff 	add.w	r3, r3, #4294967295
 800cbe8:	6123      	str	r3, [r4, #16]
 800cbea:	d00c      	beq.n	800cc06 <_scanf_float+0x356>
 800cbec:	2945      	cmp	r1, #69	@ 0x45
 800cbee:	d00a      	beq.n	800cc06 <_scanf_float+0x356>
 800cbf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cbf4:	463a      	mov	r2, r7
 800cbf6:	4640      	mov	r0, r8
 800cbf8:	1eb5      	subs	r5, r6, #2
 800cbfa:	4798      	blx	r3
 800cbfc:	6923      	ldr	r3, [r4, #16]
 800cbfe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cc02:	3b01      	subs	r3, #1
 800cc04:	6123      	str	r3, [r4, #16]
 800cc06:	462e      	mov	r6, r5
 800cc08:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cc0c:	463a      	mov	r2, r7
 800cc0e:	4640      	mov	r0, r8
 800cc10:	4798      	blx	r3
 800cc12:	6822      	ldr	r2, [r4, #0]
 800cc14:	f012 0210 	ands.w	r2, r2, #16
 800cc18:	d001      	beq.n	800cc1e <_scanf_float+0x36e>
 800cc1a:	2000      	movs	r0, #0
 800cc1c:	e68c      	b.n	800c938 <_scanf_float+0x88>
 800cc1e:	7032      	strb	r2, [r6, #0]
 800cc20:	6823      	ldr	r3, [r4, #0]
 800cc22:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800cc26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cc2a:	d11c      	bne.n	800cc66 <_scanf_float+0x3b6>
 800cc2c:	9b02      	ldr	r3, [sp, #8]
 800cc2e:	454b      	cmp	r3, r9
 800cc30:	eba3 0209 	sub.w	r2, r3, r9
 800cc34:	d123      	bne.n	800cc7e <_scanf_float+0x3ce>
 800cc36:	2200      	movs	r2, #0
 800cc38:	9901      	ldr	r1, [sp, #4]
 800cc3a:	4640      	mov	r0, r8
 800cc3c:	f002 fd38 	bl	800f6b0 <_strtod_r>
 800cc40:	6821      	ldr	r1, [r4, #0]
 800cc42:	9b03      	ldr	r3, [sp, #12]
 800cc44:	f011 0f02 	tst.w	r1, #2
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	ec57 6b10 	vmov	r6, r7, d0
 800cc4e:	f103 0204 	add.w	r2, r3, #4
 800cc52:	d01f      	beq.n	800cc94 <_scanf_float+0x3e4>
 800cc54:	9903      	ldr	r1, [sp, #12]
 800cc56:	600a      	str	r2, [r1, #0]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	e9c3 6700 	strd	r6, r7, [r3]
 800cc5e:	68e3      	ldr	r3, [r4, #12]
 800cc60:	3301      	adds	r3, #1
 800cc62:	60e3      	str	r3, [r4, #12]
 800cc64:	e7d9      	b.n	800cc1a <_scanf_float+0x36a>
 800cc66:	9b04      	ldr	r3, [sp, #16]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d0e4      	beq.n	800cc36 <_scanf_float+0x386>
 800cc6c:	9905      	ldr	r1, [sp, #20]
 800cc6e:	230a      	movs	r3, #10
 800cc70:	4640      	mov	r0, r8
 800cc72:	3101      	adds	r1, #1
 800cc74:	f7ff f9b6 	bl	800bfe4 <_strtol_r>
 800cc78:	9b04      	ldr	r3, [sp, #16]
 800cc7a:	9e05      	ldr	r6, [sp, #20]
 800cc7c:	1ac2      	subs	r2, r0, r3
 800cc7e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800cc82:	4912      	ldr	r1, [pc, #72]	@ (800cccc <_scanf_float+0x41c>)
 800cc84:	429e      	cmp	r6, r3
 800cc86:	bf28      	it	cs
 800cc88:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800cc8c:	4630      	mov	r0, r6
 800cc8e:	f000 f941 	bl	800cf14 <siprintf>
 800cc92:	e7d0      	b.n	800cc36 <_scanf_float+0x386>
 800cc94:	f011 0f04 	tst.w	r1, #4
 800cc98:	9903      	ldr	r1, [sp, #12]
 800cc9a:	600a      	str	r2, [r1, #0]
 800cc9c:	d1dc      	bne.n	800cc58 <_scanf_float+0x3a8>
 800cc9e:	681d      	ldr	r5, [r3, #0]
 800cca0:	4632      	mov	r2, r6
 800cca2:	463b      	mov	r3, r7
 800cca4:	4630      	mov	r0, r6
 800cca6:	4639      	mov	r1, r7
 800cca8:	f7f3 ff54 	bl	8000b54 <__aeabi_dcmpun>
 800ccac:	b128      	cbz	r0, 800ccba <_scanf_float+0x40a>
 800ccae:	4808      	ldr	r0, [pc, #32]	@ (800ccd0 <_scanf_float+0x420>)
 800ccb0:	f000 fae6 	bl	800d280 <nanf>
 800ccb4:	ed85 0a00 	vstr	s0, [r5]
 800ccb8:	e7d1      	b.n	800cc5e <_scanf_float+0x3ae>
 800ccba:	4630      	mov	r0, r6
 800ccbc:	4639      	mov	r1, r7
 800ccbe:	f7f3 ffa7 	bl	8000c10 <__aeabi_d2f>
 800ccc2:	6028      	str	r0, [r5, #0]
 800ccc4:	e7cb      	b.n	800cc5e <_scanf_float+0x3ae>
 800ccc6:	f04f 0900 	mov.w	r9, #0
 800ccca:	e62a      	b.n	800c922 <_scanf_float+0x72>
 800cccc:	08010c75 	.word	0x08010c75
 800ccd0:	08010f0c 	.word	0x08010f0c

0800ccd4 <std>:
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	b510      	push	{r4, lr}
 800ccd8:	4604      	mov	r4, r0
 800ccda:	6083      	str	r3, [r0, #8]
 800ccdc:	8181      	strh	r1, [r0, #12]
 800ccde:	4619      	mov	r1, r3
 800cce0:	6643      	str	r3, [r0, #100]	@ 0x64
 800cce2:	81c2      	strh	r2, [r0, #14]
 800cce4:	2208      	movs	r2, #8
 800cce6:	6183      	str	r3, [r0, #24]
 800cce8:	e9c0 3300 	strd	r3, r3, [r0]
 800ccec:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ccf0:	305c      	adds	r0, #92	@ 0x5c
 800ccf2:	f000 fa07 	bl	800d104 <memset>
 800ccf6:	4b0d      	ldr	r3, [pc, #52]	@ (800cd2c <std+0x58>)
 800ccf8:	6224      	str	r4, [r4, #32]
 800ccfa:	6263      	str	r3, [r4, #36]	@ 0x24
 800ccfc:	4b0c      	ldr	r3, [pc, #48]	@ (800cd30 <std+0x5c>)
 800ccfe:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cd00:	4b0c      	ldr	r3, [pc, #48]	@ (800cd34 <std+0x60>)
 800cd02:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cd04:	4b0c      	ldr	r3, [pc, #48]	@ (800cd38 <std+0x64>)
 800cd06:	6323      	str	r3, [r4, #48]	@ 0x30
 800cd08:	4b0c      	ldr	r3, [pc, #48]	@ (800cd3c <std+0x68>)
 800cd0a:	429c      	cmp	r4, r3
 800cd0c:	d006      	beq.n	800cd1c <std+0x48>
 800cd0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cd12:	4294      	cmp	r4, r2
 800cd14:	d002      	beq.n	800cd1c <std+0x48>
 800cd16:	33d0      	adds	r3, #208	@ 0xd0
 800cd18:	429c      	cmp	r4, r3
 800cd1a:	d105      	bne.n	800cd28 <std+0x54>
 800cd1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cd20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd24:	f000 ba8e 	b.w	800d244 <__retarget_lock_init_recursive>
 800cd28:	bd10      	pop	{r4, pc}
 800cd2a:	bf00      	nop
 800cd2c:	0800cf55 	.word	0x0800cf55
 800cd30:	0800cf77 	.word	0x0800cf77
 800cd34:	0800cfaf 	.word	0x0800cfaf
 800cd38:	0800cfd3 	.word	0x0800cfd3
 800cd3c:	200006b4 	.word	0x200006b4

0800cd40 <stdio_exit_handler>:
 800cd40:	4a02      	ldr	r2, [pc, #8]	@ (800cd4c <stdio_exit_handler+0xc>)
 800cd42:	4903      	ldr	r1, [pc, #12]	@ (800cd50 <stdio_exit_handler+0x10>)
 800cd44:	4803      	ldr	r0, [pc, #12]	@ (800cd54 <stdio_exit_handler+0x14>)
 800cd46:	f000 b869 	b.w	800ce1c <_fwalk_sglue>
 800cd4a:	bf00      	nop
 800cd4c:	20000014 	.word	0x20000014
 800cd50:	0800fcf9 	.word	0x0800fcf9
 800cd54:	20000024 	.word	0x20000024

0800cd58 <cleanup_stdio>:
 800cd58:	6841      	ldr	r1, [r0, #4]
 800cd5a:	4b0c      	ldr	r3, [pc, #48]	@ (800cd8c <cleanup_stdio+0x34>)
 800cd5c:	4299      	cmp	r1, r3
 800cd5e:	b510      	push	{r4, lr}
 800cd60:	4604      	mov	r4, r0
 800cd62:	d001      	beq.n	800cd68 <cleanup_stdio+0x10>
 800cd64:	f002 ffc8 	bl	800fcf8 <_fflush_r>
 800cd68:	68a1      	ldr	r1, [r4, #8]
 800cd6a:	4b09      	ldr	r3, [pc, #36]	@ (800cd90 <cleanup_stdio+0x38>)
 800cd6c:	4299      	cmp	r1, r3
 800cd6e:	d002      	beq.n	800cd76 <cleanup_stdio+0x1e>
 800cd70:	4620      	mov	r0, r4
 800cd72:	f002 ffc1 	bl	800fcf8 <_fflush_r>
 800cd76:	68e1      	ldr	r1, [r4, #12]
 800cd78:	4b06      	ldr	r3, [pc, #24]	@ (800cd94 <cleanup_stdio+0x3c>)
 800cd7a:	4299      	cmp	r1, r3
 800cd7c:	d004      	beq.n	800cd88 <cleanup_stdio+0x30>
 800cd7e:	4620      	mov	r0, r4
 800cd80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd84:	f002 bfb8 	b.w	800fcf8 <_fflush_r>
 800cd88:	bd10      	pop	{r4, pc}
 800cd8a:	bf00      	nop
 800cd8c:	200006b4 	.word	0x200006b4
 800cd90:	2000071c 	.word	0x2000071c
 800cd94:	20000784 	.word	0x20000784

0800cd98 <global_stdio_init.part.0>:
 800cd98:	b510      	push	{r4, lr}
 800cd9a:	4b0b      	ldr	r3, [pc, #44]	@ (800cdc8 <global_stdio_init.part.0+0x30>)
 800cd9c:	2104      	movs	r1, #4
 800cd9e:	4c0b      	ldr	r4, [pc, #44]	@ (800cdcc <global_stdio_init.part.0+0x34>)
 800cda0:	4a0b      	ldr	r2, [pc, #44]	@ (800cdd0 <global_stdio_init.part.0+0x38>)
 800cda2:	4620      	mov	r0, r4
 800cda4:	601a      	str	r2, [r3, #0]
 800cda6:	2200      	movs	r2, #0
 800cda8:	f7ff ff94 	bl	800ccd4 <std>
 800cdac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cdb0:	2201      	movs	r2, #1
 800cdb2:	2109      	movs	r1, #9
 800cdb4:	f7ff ff8e 	bl	800ccd4 <std>
 800cdb8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cdbc:	2202      	movs	r2, #2
 800cdbe:	2112      	movs	r1, #18
 800cdc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdc4:	f7ff bf86 	b.w	800ccd4 <std>
 800cdc8:	200007ec 	.word	0x200007ec
 800cdcc:	200006b4 	.word	0x200006b4
 800cdd0:	0800cd41 	.word	0x0800cd41

0800cdd4 <__sfp_lock_acquire>:
 800cdd4:	4801      	ldr	r0, [pc, #4]	@ (800cddc <__sfp_lock_acquire+0x8>)
 800cdd6:	f000 ba36 	b.w	800d246 <__retarget_lock_acquire_recursive>
 800cdda:	bf00      	nop
 800cddc:	200007f5 	.word	0x200007f5

0800cde0 <__sfp_lock_release>:
 800cde0:	4801      	ldr	r0, [pc, #4]	@ (800cde8 <__sfp_lock_release+0x8>)
 800cde2:	f000 ba31 	b.w	800d248 <__retarget_lock_release_recursive>
 800cde6:	bf00      	nop
 800cde8:	200007f5 	.word	0x200007f5

0800cdec <__sinit>:
 800cdec:	b510      	push	{r4, lr}
 800cdee:	4604      	mov	r4, r0
 800cdf0:	f7ff fff0 	bl	800cdd4 <__sfp_lock_acquire>
 800cdf4:	6a23      	ldr	r3, [r4, #32]
 800cdf6:	b11b      	cbz	r3, 800ce00 <__sinit+0x14>
 800cdf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdfc:	f7ff bff0 	b.w	800cde0 <__sfp_lock_release>
 800ce00:	4b04      	ldr	r3, [pc, #16]	@ (800ce14 <__sinit+0x28>)
 800ce02:	6223      	str	r3, [r4, #32]
 800ce04:	4b04      	ldr	r3, [pc, #16]	@ (800ce18 <__sinit+0x2c>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d1f5      	bne.n	800cdf8 <__sinit+0xc>
 800ce0c:	f7ff ffc4 	bl	800cd98 <global_stdio_init.part.0>
 800ce10:	e7f2      	b.n	800cdf8 <__sinit+0xc>
 800ce12:	bf00      	nop
 800ce14:	0800cd59 	.word	0x0800cd59
 800ce18:	200007ec 	.word	0x200007ec

0800ce1c <_fwalk_sglue>:
 800ce1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce20:	4607      	mov	r7, r0
 800ce22:	4688      	mov	r8, r1
 800ce24:	4614      	mov	r4, r2
 800ce26:	2600      	movs	r6, #0
 800ce28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce2c:	f1b9 0901 	subs.w	r9, r9, #1
 800ce30:	d505      	bpl.n	800ce3e <_fwalk_sglue+0x22>
 800ce32:	6824      	ldr	r4, [r4, #0]
 800ce34:	2c00      	cmp	r4, #0
 800ce36:	d1f7      	bne.n	800ce28 <_fwalk_sglue+0xc>
 800ce38:	4630      	mov	r0, r6
 800ce3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce3e:	89ab      	ldrh	r3, [r5, #12]
 800ce40:	2b01      	cmp	r3, #1
 800ce42:	d907      	bls.n	800ce54 <_fwalk_sglue+0x38>
 800ce44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce48:	3301      	adds	r3, #1
 800ce4a:	d003      	beq.n	800ce54 <_fwalk_sglue+0x38>
 800ce4c:	4629      	mov	r1, r5
 800ce4e:	4638      	mov	r0, r7
 800ce50:	47c0      	blx	r8
 800ce52:	4306      	orrs	r6, r0
 800ce54:	3568      	adds	r5, #104	@ 0x68
 800ce56:	e7e9      	b.n	800ce2c <_fwalk_sglue+0x10>

0800ce58 <_puts_r>:
 800ce58:	6a03      	ldr	r3, [r0, #32]
 800ce5a:	b570      	push	{r4, r5, r6, lr}
 800ce5c:	4605      	mov	r5, r0
 800ce5e:	460e      	mov	r6, r1
 800ce60:	6884      	ldr	r4, [r0, #8]
 800ce62:	b90b      	cbnz	r3, 800ce68 <_puts_r+0x10>
 800ce64:	f7ff ffc2 	bl	800cdec <__sinit>
 800ce68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ce6a:	07db      	lsls	r3, r3, #31
 800ce6c:	d405      	bmi.n	800ce7a <_puts_r+0x22>
 800ce6e:	89a3      	ldrh	r3, [r4, #12]
 800ce70:	0598      	lsls	r0, r3, #22
 800ce72:	d402      	bmi.n	800ce7a <_puts_r+0x22>
 800ce74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce76:	f000 f9e6 	bl	800d246 <__retarget_lock_acquire_recursive>
 800ce7a:	89a3      	ldrh	r3, [r4, #12]
 800ce7c:	0719      	lsls	r1, r3, #28
 800ce7e:	d502      	bpl.n	800ce86 <_puts_r+0x2e>
 800ce80:	6923      	ldr	r3, [r4, #16]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d135      	bne.n	800cef2 <_puts_r+0x9a>
 800ce86:	4621      	mov	r1, r4
 800ce88:	4628      	mov	r0, r5
 800ce8a:	f000 f8e5 	bl	800d058 <__swsetup_r>
 800ce8e:	b380      	cbz	r0, 800cef2 <_puts_r+0x9a>
 800ce90:	f04f 35ff 	mov.w	r5, #4294967295
 800ce94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ce96:	07da      	lsls	r2, r3, #31
 800ce98:	d405      	bmi.n	800cea6 <_puts_r+0x4e>
 800ce9a:	89a3      	ldrh	r3, [r4, #12]
 800ce9c:	059b      	lsls	r3, r3, #22
 800ce9e:	d402      	bmi.n	800cea6 <_puts_r+0x4e>
 800cea0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cea2:	f000 f9d1 	bl	800d248 <__retarget_lock_release_recursive>
 800cea6:	4628      	mov	r0, r5
 800cea8:	bd70      	pop	{r4, r5, r6, pc}
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	da04      	bge.n	800ceb8 <_puts_r+0x60>
 800ceae:	69a2      	ldr	r2, [r4, #24]
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	dc17      	bgt.n	800cee4 <_puts_r+0x8c>
 800ceb4:	290a      	cmp	r1, #10
 800ceb6:	d015      	beq.n	800cee4 <_puts_r+0x8c>
 800ceb8:	6823      	ldr	r3, [r4, #0]
 800ceba:	1c5a      	adds	r2, r3, #1
 800cebc:	6022      	str	r2, [r4, #0]
 800cebe:	7019      	strb	r1, [r3, #0]
 800cec0:	68a3      	ldr	r3, [r4, #8]
 800cec2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cec6:	3b01      	subs	r3, #1
 800cec8:	60a3      	str	r3, [r4, #8]
 800ceca:	2900      	cmp	r1, #0
 800cecc:	d1ed      	bne.n	800ceaa <_puts_r+0x52>
 800cece:	2b00      	cmp	r3, #0
 800ced0:	da11      	bge.n	800cef6 <_puts_r+0x9e>
 800ced2:	4622      	mov	r2, r4
 800ced4:	210a      	movs	r1, #10
 800ced6:	4628      	mov	r0, r5
 800ced8:	f000 f87f 	bl	800cfda <__swbuf_r>
 800cedc:	3001      	adds	r0, #1
 800cede:	d0d7      	beq.n	800ce90 <_puts_r+0x38>
 800cee0:	250a      	movs	r5, #10
 800cee2:	e7d7      	b.n	800ce94 <_puts_r+0x3c>
 800cee4:	4622      	mov	r2, r4
 800cee6:	4628      	mov	r0, r5
 800cee8:	f000 f877 	bl	800cfda <__swbuf_r>
 800ceec:	3001      	adds	r0, #1
 800ceee:	d1e7      	bne.n	800cec0 <_puts_r+0x68>
 800cef0:	e7ce      	b.n	800ce90 <_puts_r+0x38>
 800cef2:	3e01      	subs	r6, #1
 800cef4:	e7e4      	b.n	800cec0 <_puts_r+0x68>
 800cef6:	6823      	ldr	r3, [r4, #0]
 800cef8:	1c5a      	adds	r2, r3, #1
 800cefa:	6022      	str	r2, [r4, #0]
 800cefc:	220a      	movs	r2, #10
 800cefe:	701a      	strb	r2, [r3, #0]
 800cf00:	e7ee      	b.n	800cee0 <_puts_r+0x88>
	...

0800cf04 <puts>:
 800cf04:	4b02      	ldr	r3, [pc, #8]	@ (800cf10 <puts+0xc>)
 800cf06:	4601      	mov	r1, r0
 800cf08:	6818      	ldr	r0, [r3, #0]
 800cf0a:	f7ff bfa5 	b.w	800ce58 <_puts_r>
 800cf0e:	bf00      	nop
 800cf10:	20000020 	.word	0x20000020

0800cf14 <siprintf>:
 800cf14:	b40e      	push	{r1, r2, r3}
 800cf16:	b500      	push	{lr}
 800cf18:	b09c      	sub	sp, #112	@ 0x70
 800cf1a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cf1e:	ab1d      	add	r3, sp, #116	@ 0x74
 800cf20:	9002      	str	r0, [sp, #8]
 800cf22:	9006      	str	r0, [sp, #24]
 800cf24:	9107      	str	r1, [sp, #28]
 800cf26:	9104      	str	r1, [sp, #16]
 800cf28:	4808      	ldr	r0, [pc, #32]	@ (800cf4c <siprintf+0x38>)
 800cf2a:	4909      	ldr	r1, [pc, #36]	@ (800cf50 <siprintf+0x3c>)
 800cf2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf30:	9105      	str	r1, [sp, #20]
 800cf32:	a902      	add	r1, sp, #8
 800cf34:	6800      	ldr	r0, [r0, #0]
 800cf36:	9301      	str	r3, [sp, #4]
 800cf38:	f002 fc1c 	bl	800f774 <_svfiprintf_r>
 800cf3c:	9b02      	ldr	r3, [sp, #8]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	701a      	strb	r2, [r3, #0]
 800cf42:	b01c      	add	sp, #112	@ 0x70
 800cf44:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf48:	b003      	add	sp, #12
 800cf4a:	4770      	bx	lr
 800cf4c:	20000020 	.word	0x20000020
 800cf50:	ffff0208 	.word	0xffff0208

0800cf54 <__sread>:
 800cf54:	b510      	push	{r4, lr}
 800cf56:	460c      	mov	r4, r1
 800cf58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf5c:	f000 f924 	bl	800d1a8 <_read_r>
 800cf60:	2800      	cmp	r0, #0
 800cf62:	bfab      	itete	ge
 800cf64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cf66:	89a3      	ldrhlt	r3, [r4, #12]
 800cf68:	181b      	addge	r3, r3, r0
 800cf6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cf6e:	bfac      	ite	ge
 800cf70:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cf72:	81a3      	strhlt	r3, [r4, #12]
 800cf74:	bd10      	pop	{r4, pc}

0800cf76 <__swrite>:
 800cf76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf7a:	461f      	mov	r7, r3
 800cf7c:	898b      	ldrh	r3, [r1, #12]
 800cf7e:	4605      	mov	r5, r0
 800cf80:	460c      	mov	r4, r1
 800cf82:	05db      	lsls	r3, r3, #23
 800cf84:	4616      	mov	r6, r2
 800cf86:	d505      	bpl.n	800cf94 <__swrite+0x1e>
 800cf88:	2302      	movs	r3, #2
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf90:	f000 f8f8 	bl	800d184 <_lseek_r>
 800cf94:	89a3      	ldrh	r3, [r4, #12]
 800cf96:	4632      	mov	r2, r6
 800cf98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf9c:	4628      	mov	r0, r5
 800cf9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cfa2:	81a3      	strh	r3, [r4, #12]
 800cfa4:	463b      	mov	r3, r7
 800cfa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfaa:	f000 b90f 	b.w	800d1cc <_write_r>

0800cfae <__sseek>:
 800cfae:	b510      	push	{r4, lr}
 800cfb0:	460c      	mov	r4, r1
 800cfb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfb6:	f000 f8e5 	bl	800d184 <_lseek_r>
 800cfba:	1c43      	adds	r3, r0, #1
 800cfbc:	89a3      	ldrh	r3, [r4, #12]
 800cfbe:	bf15      	itete	ne
 800cfc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cfc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cfc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cfca:	81a3      	strheq	r3, [r4, #12]
 800cfcc:	bf18      	it	ne
 800cfce:	81a3      	strhne	r3, [r4, #12]
 800cfd0:	bd10      	pop	{r4, pc}

0800cfd2 <__sclose>:
 800cfd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfd6:	f000 b8c5 	b.w	800d164 <_close_r>

0800cfda <__swbuf_r>:
 800cfda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfdc:	460e      	mov	r6, r1
 800cfde:	4614      	mov	r4, r2
 800cfe0:	4605      	mov	r5, r0
 800cfe2:	b118      	cbz	r0, 800cfec <__swbuf_r+0x12>
 800cfe4:	6a03      	ldr	r3, [r0, #32]
 800cfe6:	b90b      	cbnz	r3, 800cfec <__swbuf_r+0x12>
 800cfe8:	f7ff ff00 	bl	800cdec <__sinit>
 800cfec:	69a3      	ldr	r3, [r4, #24]
 800cfee:	60a3      	str	r3, [r4, #8]
 800cff0:	89a3      	ldrh	r3, [r4, #12]
 800cff2:	071a      	lsls	r2, r3, #28
 800cff4:	d501      	bpl.n	800cffa <__swbuf_r+0x20>
 800cff6:	6923      	ldr	r3, [r4, #16]
 800cff8:	b943      	cbnz	r3, 800d00c <__swbuf_r+0x32>
 800cffa:	4621      	mov	r1, r4
 800cffc:	4628      	mov	r0, r5
 800cffe:	f000 f82b 	bl	800d058 <__swsetup_r>
 800d002:	b118      	cbz	r0, 800d00c <__swbuf_r+0x32>
 800d004:	f04f 37ff 	mov.w	r7, #4294967295
 800d008:	4638      	mov	r0, r7
 800d00a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d00c:	6823      	ldr	r3, [r4, #0]
 800d00e:	b2f6      	uxtb	r6, r6
 800d010:	6922      	ldr	r2, [r4, #16]
 800d012:	4637      	mov	r7, r6
 800d014:	1a98      	subs	r0, r3, r2
 800d016:	6963      	ldr	r3, [r4, #20]
 800d018:	4283      	cmp	r3, r0
 800d01a:	dc05      	bgt.n	800d028 <__swbuf_r+0x4e>
 800d01c:	4621      	mov	r1, r4
 800d01e:	4628      	mov	r0, r5
 800d020:	f002 fe6a 	bl	800fcf8 <_fflush_r>
 800d024:	2800      	cmp	r0, #0
 800d026:	d1ed      	bne.n	800d004 <__swbuf_r+0x2a>
 800d028:	68a3      	ldr	r3, [r4, #8]
 800d02a:	3b01      	subs	r3, #1
 800d02c:	60a3      	str	r3, [r4, #8]
 800d02e:	6823      	ldr	r3, [r4, #0]
 800d030:	1c5a      	adds	r2, r3, #1
 800d032:	6022      	str	r2, [r4, #0]
 800d034:	701e      	strb	r6, [r3, #0]
 800d036:	1c43      	adds	r3, r0, #1
 800d038:	6962      	ldr	r2, [r4, #20]
 800d03a:	429a      	cmp	r2, r3
 800d03c:	d004      	beq.n	800d048 <__swbuf_r+0x6e>
 800d03e:	89a3      	ldrh	r3, [r4, #12]
 800d040:	07db      	lsls	r3, r3, #31
 800d042:	d5e1      	bpl.n	800d008 <__swbuf_r+0x2e>
 800d044:	2e0a      	cmp	r6, #10
 800d046:	d1df      	bne.n	800d008 <__swbuf_r+0x2e>
 800d048:	4621      	mov	r1, r4
 800d04a:	4628      	mov	r0, r5
 800d04c:	f002 fe54 	bl	800fcf8 <_fflush_r>
 800d050:	2800      	cmp	r0, #0
 800d052:	d0d9      	beq.n	800d008 <__swbuf_r+0x2e>
 800d054:	e7d6      	b.n	800d004 <__swbuf_r+0x2a>
	...

0800d058 <__swsetup_r>:
 800d058:	b538      	push	{r3, r4, r5, lr}
 800d05a:	4b29      	ldr	r3, [pc, #164]	@ (800d100 <__swsetup_r+0xa8>)
 800d05c:	4605      	mov	r5, r0
 800d05e:	460c      	mov	r4, r1
 800d060:	6818      	ldr	r0, [r3, #0]
 800d062:	b118      	cbz	r0, 800d06c <__swsetup_r+0x14>
 800d064:	6a03      	ldr	r3, [r0, #32]
 800d066:	b90b      	cbnz	r3, 800d06c <__swsetup_r+0x14>
 800d068:	f7ff fec0 	bl	800cdec <__sinit>
 800d06c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d070:	0719      	lsls	r1, r3, #28
 800d072:	d422      	bmi.n	800d0ba <__swsetup_r+0x62>
 800d074:	06da      	lsls	r2, r3, #27
 800d076:	d407      	bmi.n	800d088 <__swsetup_r+0x30>
 800d078:	2209      	movs	r2, #9
 800d07a:	602a      	str	r2, [r5, #0]
 800d07c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d080:	f04f 30ff 	mov.w	r0, #4294967295
 800d084:	81a3      	strh	r3, [r4, #12]
 800d086:	e033      	b.n	800d0f0 <__swsetup_r+0x98>
 800d088:	0758      	lsls	r0, r3, #29
 800d08a:	d512      	bpl.n	800d0b2 <__swsetup_r+0x5a>
 800d08c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d08e:	b141      	cbz	r1, 800d0a2 <__swsetup_r+0x4a>
 800d090:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d094:	4299      	cmp	r1, r3
 800d096:	d002      	beq.n	800d09e <__swsetup_r+0x46>
 800d098:	4628      	mov	r0, r5
 800d09a:	f000 ff49 	bl	800df30 <_free_r>
 800d09e:	2300      	movs	r3, #0
 800d0a0:	6363      	str	r3, [r4, #52]	@ 0x34
 800d0a2:	89a3      	ldrh	r3, [r4, #12]
 800d0a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d0a8:	81a3      	strh	r3, [r4, #12]
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	6063      	str	r3, [r4, #4]
 800d0ae:	6923      	ldr	r3, [r4, #16]
 800d0b0:	6023      	str	r3, [r4, #0]
 800d0b2:	89a3      	ldrh	r3, [r4, #12]
 800d0b4:	f043 0308 	orr.w	r3, r3, #8
 800d0b8:	81a3      	strh	r3, [r4, #12]
 800d0ba:	6923      	ldr	r3, [r4, #16]
 800d0bc:	b94b      	cbnz	r3, 800d0d2 <__swsetup_r+0x7a>
 800d0be:	89a3      	ldrh	r3, [r4, #12]
 800d0c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d0c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d0c8:	d003      	beq.n	800d0d2 <__swsetup_r+0x7a>
 800d0ca:	4621      	mov	r1, r4
 800d0cc:	4628      	mov	r0, r5
 800d0ce:	f002 fe60 	bl	800fd92 <__smakebuf_r>
 800d0d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0d6:	f013 0201 	ands.w	r2, r3, #1
 800d0da:	d00a      	beq.n	800d0f2 <__swsetup_r+0x9a>
 800d0dc:	2200      	movs	r2, #0
 800d0de:	60a2      	str	r2, [r4, #8]
 800d0e0:	6962      	ldr	r2, [r4, #20]
 800d0e2:	4252      	negs	r2, r2
 800d0e4:	61a2      	str	r2, [r4, #24]
 800d0e6:	6922      	ldr	r2, [r4, #16]
 800d0e8:	b942      	cbnz	r2, 800d0fc <__swsetup_r+0xa4>
 800d0ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d0ee:	d1c5      	bne.n	800d07c <__swsetup_r+0x24>
 800d0f0:	bd38      	pop	{r3, r4, r5, pc}
 800d0f2:	0799      	lsls	r1, r3, #30
 800d0f4:	bf58      	it	pl
 800d0f6:	6962      	ldrpl	r2, [r4, #20]
 800d0f8:	60a2      	str	r2, [r4, #8]
 800d0fa:	e7f4      	b.n	800d0e6 <__swsetup_r+0x8e>
 800d0fc:	2000      	movs	r0, #0
 800d0fe:	e7f7      	b.n	800d0f0 <__swsetup_r+0x98>
 800d100:	20000020 	.word	0x20000020

0800d104 <memset>:
 800d104:	4402      	add	r2, r0
 800d106:	4603      	mov	r3, r0
 800d108:	4293      	cmp	r3, r2
 800d10a:	d100      	bne.n	800d10e <memset+0xa>
 800d10c:	4770      	bx	lr
 800d10e:	f803 1b01 	strb.w	r1, [r3], #1
 800d112:	e7f9      	b.n	800d108 <memset+0x4>

0800d114 <strchr>:
 800d114:	b2c9      	uxtb	r1, r1
 800d116:	4603      	mov	r3, r0
 800d118:	4618      	mov	r0, r3
 800d11a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d11e:	b112      	cbz	r2, 800d126 <strchr+0x12>
 800d120:	428a      	cmp	r2, r1
 800d122:	d1f9      	bne.n	800d118 <strchr+0x4>
 800d124:	4770      	bx	lr
 800d126:	2900      	cmp	r1, #0
 800d128:	bf18      	it	ne
 800d12a:	2000      	movne	r0, #0
 800d12c:	4770      	bx	lr

0800d12e <strstr>:
 800d12e:	780a      	ldrb	r2, [r1, #0]
 800d130:	b570      	push	{r4, r5, r6, lr}
 800d132:	b96a      	cbnz	r2, 800d150 <strstr+0x22>
 800d134:	bd70      	pop	{r4, r5, r6, pc}
 800d136:	429a      	cmp	r2, r3
 800d138:	d109      	bne.n	800d14e <strstr+0x20>
 800d13a:	460c      	mov	r4, r1
 800d13c:	4605      	mov	r5, r0
 800d13e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d142:	2b00      	cmp	r3, #0
 800d144:	d0f6      	beq.n	800d134 <strstr+0x6>
 800d146:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d14a:	429e      	cmp	r6, r3
 800d14c:	d0f7      	beq.n	800d13e <strstr+0x10>
 800d14e:	3001      	adds	r0, #1
 800d150:	7803      	ldrb	r3, [r0, #0]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d1ef      	bne.n	800d136 <strstr+0x8>
 800d156:	4618      	mov	r0, r3
 800d158:	e7ec      	b.n	800d134 <strstr+0x6>
	...

0800d15c <_localeconv_r>:
 800d15c:	4800      	ldr	r0, [pc, #0]	@ (800d160 <_localeconv_r+0x4>)
 800d15e:	4770      	bx	lr
 800d160:	20000160 	.word	0x20000160

0800d164 <_close_r>:
 800d164:	b538      	push	{r3, r4, r5, lr}
 800d166:	2300      	movs	r3, #0
 800d168:	4d05      	ldr	r5, [pc, #20]	@ (800d180 <_close_r+0x1c>)
 800d16a:	4604      	mov	r4, r0
 800d16c:	4608      	mov	r0, r1
 800d16e:	602b      	str	r3, [r5, #0]
 800d170:	f7f5 f9e0 	bl	8002534 <_close>
 800d174:	1c43      	adds	r3, r0, #1
 800d176:	d102      	bne.n	800d17e <_close_r+0x1a>
 800d178:	682b      	ldr	r3, [r5, #0]
 800d17a:	b103      	cbz	r3, 800d17e <_close_r+0x1a>
 800d17c:	6023      	str	r3, [r4, #0]
 800d17e:	bd38      	pop	{r3, r4, r5, pc}
 800d180:	200007f0 	.word	0x200007f0

0800d184 <_lseek_r>:
 800d184:	b538      	push	{r3, r4, r5, lr}
 800d186:	4604      	mov	r4, r0
 800d188:	4d06      	ldr	r5, [pc, #24]	@ (800d1a4 <_lseek_r+0x20>)
 800d18a:	4608      	mov	r0, r1
 800d18c:	4611      	mov	r1, r2
 800d18e:	2200      	movs	r2, #0
 800d190:	602a      	str	r2, [r5, #0]
 800d192:	461a      	mov	r2, r3
 800d194:	f7f5 f9f5 	bl	8002582 <_lseek>
 800d198:	1c43      	adds	r3, r0, #1
 800d19a:	d102      	bne.n	800d1a2 <_lseek_r+0x1e>
 800d19c:	682b      	ldr	r3, [r5, #0]
 800d19e:	b103      	cbz	r3, 800d1a2 <_lseek_r+0x1e>
 800d1a0:	6023      	str	r3, [r4, #0]
 800d1a2:	bd38      	pop	{r3, r4, r5, pc}
 800d1a4:	200007f0 	.word	0x200007f0

0800d1a8 <_read_r>:
 800d1a8:	b538      	push	{r3, r4, r5, lr}
 800d1aa:	4604      	mov	r4, r0
 800d1ac:	4d06      	ldr	r5, [pc, #24]	@ (800d1c8 <_read_r+0x20>)
 800d1ae:	4608      	mov	r0, r1
 800d1b0:	4611      	mov	r1, r2
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	602a      	str	r2, [r5, #0]
 800d1b6:	461a      	mov	r2, r3
 800d1b8:	f7f5 f983 	bl	80024c2 <_read>
 800d1bc:	1c43      	adds	r3, r0, #1
 800d1be:	d102      	bne.n	800d1c6 <_read_r+0x1e>
 800d1c0:	682b      	ldr	r3, [r5, #0]
 800d1c2:	b103      	cbz	r3, 800d1c6 <_read_r+0x1e>
 800d1c4:	6023      	str	r3, [r4, #0]
 800d1c6:	bd38      	pop	{r3, r4, r5, pc}
 800d1c8:	200007f0 	.word	0x200007f0

0800d1cc <_write_r>:
 800d1cc:	b538      	push	{r3, r4, r5, lr}
 800d1ce:	4604      	mov	r4, r0
 800d1d0:	4d06      	ldr	r5, [pc, #24]	@ (800d1ec <_write_r+0x20>)
 800d1d2:	4608      	mov	r0, r1
 800d1d4:	4611      	mov	r1, r2
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	602a      	str	r2, [r5, #0]
 800d1da:	461a      	mov	r2, r3
 800d1dc:	f7f5 f98e 	bl	80024fc <_write>
 800d1e0:	1c43      	adds	r3, r0, #1
 800d1e2:	d102      	bne.n	800d1ea <_write_r+0x1e>
 800d1e4:	682b      	ldr	r3, [r5, #0]
 800d1e6:	b103      	cbz	r3, 800d1ea <_write_r+0x1e>
 800d1e8:	6023      	str	r3, [r4, #0]
 800d1ea:	bd38      	pop	{r3, r4, r5, pc}
 800d1ec:	200007f0 	.word	0x200007f0

0800d1f0 <__errno>:
 800d1f0:	4b01      	ldr	r3, [pc, #4]	@ (800d1f8 <__errno+0x8>)
 800d1f2:	6818      	ldr	r0, [r3, #0]
 800d1f4:	4770      	bx	lr
 800d1f6:	bf00      	nop
 800d1f8:	20000020 	.word	0x20000020

0800d1fc <__libc_init_array>:
 800d1fc:	b570      	push	{r4, r5, r6, lr}
 800d1fe:	4d0d      	ldr	r5, [pc, #52]	@ (800d234 <__libc_init_array+0x38>)
 800d200:	2600      	movs	r6, #0
 800d202:	4c0d      	ldr	r4, [pc, #52]	@ (800d238 <__libc_init_array+0x3c>)
 800d204:	1b64      	subs	r4, r4, r5
 800d206:	10a4      	asrs	r4, r4, #2
 800d208:	42a6      	cmp	r6, r4
 800d20a:	d109      	bne.n	800d220 <__libc_init_array+0x24>
 800d20c:	4d0b      	ldr	r5, [pc, #44]	@ (800d23c <__libc_init_array+0x40>)
 800d20e:	2600      	movs	r6, #0
 800d210:	4c0b      	ldr	r4, [pc, #44]	@ (800d240 <__libc_init_array+0x44>)
 800d212:	f003 fa7b 	bl	801070c <_init>
 800d216:	1b64      	subs	r4, r4, r5
 800d218:	10a4      	asrs	r4, r4, #2
 800d21a:	42a6      	cmp	r6, r4
 800d21c:	d105      	bne.n	800d22a <__libc_init_array+0x2e>
 800d21e:	bd70      	pop	{r4, r5, r6, pc}
 800d220:	f855 3b04 	ldr.w	r3, [r5], #4
 800d224:	3601      	adds	r6, #1
 800d226:	4798      	blx	r3
 800d228:	e7ee      	b.n	800d208 <__libc_init_array+0xc>
 800d22a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d22e:	3601      	adds	r6, #1
 800d230:	4798      	blx	r3
 800d232:	e7f2      	b.n	800d21a <__libc_init_array+0x1e>
 800d234:	08010f78 	.word	0x08010f78
 800d238:	08010f78 	.word	0x08010f78
 800d23c:	08010f78 	.word	0x08010f78
 800d240:	08010f7c 	.word	0x08010f7c

0800d244 <__retarget_lock_init_recursive>:
 800d244:	4770      	bx	lr

0800d246 <__retarget_lock_acquire_recursive>:
 800d246:	4770      	bx	lr

0800d248 <__retarget_lock_release_recursive>:
 800d248:	4770      	bx	lr

0800d24a <memchr>:
 800d24a:	b2c9      	uxtb	r1, r1
 800d24c:	4603      	mov	r3, r0
 800d24e:	4402      	add	r2, r0
 800d250:	b510      	push	{r4, lr}
 800d252:	4293      	cmp	r3, r2
 800d254:	4618      	mov	r0, r3
 800d256:	d101      	bne.n	800d25c <memchr+0x12>
 800d258:	2000      	movs	r0, #0
 800d25a:	e003      	b.n	800d264 <memchr+0x1a>
 800d25c:	7804      	ldrb	r4, [r0, #0]
 800d25e:	3301      	adds	r3, #1
 800d260:	428c      	cmp	r4, r1
 800d262:	d1f6      	bne.n	800d252 <memchr+0x8>
 800d264:	bd10      	pop	{r4, pc}

0800d266 <memcpy>:
 800d266:	440a      	add	r2, r1
 800d268:	1e43      	subs	r3, r0, #1
 800d26a:	4291      	cmp	r1, r2
 800d26c:	d100      	bne.n	800d270 <memcpy+0xa>
 800d26e:	4770      	bx	lr
 800d270:	b510      	push	{r4, lr}
 800d272:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d276:	4291      	cmp	r1, r2
 800d278:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d27c:	d1f9      	bne.n	800d272 <memcpy+0xc>
 800d27e:	bd10      	pop	{r4, pc}

0800d280 <nanf>:
 800d280:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d288 <nanf+0x8>
 800d284:	4770      	bx	lr
 800d286:	bf00      	nop
 800d288:	7fc00000 	.word	0x7fc00000

0800d28c <quorem>:
 800d28c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d290:	6903      	ldr	r3, [r0, #16]
 800d292:	4607      	mov	r7, r0
 800d294:	690c      	ldr	r4, [r1, #16]
 800d296:	42a3      	cmp	r3, r4
 800d298:	f2c0 8083 	blt.w	800d3a2 <quorem+0x116>
 800d29c:	3c01      	subs	r4, #1
 800d29e:	f100 0514 	add.w	r5, r0, #20
 800d2a2:	f101 0814 	add.w	r8, r1, #20
 800d2a6:	00a3      	lsls	r3, r4, #2
 800d2a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d2ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d2b0:	9300      	str	r3, [sp, #0]
 800d2b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d2b6:	9301      	str	r3, [sp, #4]
 800d2b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d2bc:	3301      	adds	r3, #1
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	fbb2 f6f3 	udiv	r6, r2, r3
 800d2c4:	d331      	bcc.n	800d32a <quorem+0x9e>
 800d2c6:	f04f 0a00 	mov.w	sl, #0
 800d2ca:	46c4      	mov	ip, r8
 800d2cc:	46ae      	mov	lr, r5
 800d2ce:	46d3      	mov	fp, sl
 800d2d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d2d4:	b298      	uxth	r0, r3
 800d2d6:	45e1      	cmp	r9, ip
 800d2d8:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800d2dc:	fb06 a000 	mla	r0, r6, r0, sl
 800d2e0:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800d2e4:	b280      	uxth	r0, r0
 800d2e6:	fb06 2303 	mla	r3, r6, r3, r2
 800d2ea:	f8de 2000 	ldr.w	r2, [lr]
 800d2ee:	b292      	uxth	r2, r2
 800d2f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d2f4:	eba2 0200 	sub.w	r2, r2, r0
 800d2f8:	b29b      	uxth	r3, r3
 800d2fa:	f8de 0000 	ldr.w	r0, [lr]
 800d2fe:	445a      	add	r2, fp
 800d300:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d304:	b292      	uxth	r2, r2
 800d306:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d30a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d30e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d312:	f84e 2b04 	str.w	r2, [lr], #4
 800d316:	d2db      	bcs.n	800d2d0 <quorem+0x44>
 800d318:	9b00      	ldr	r3, [sp, #0]
 800d31a:	58eb      	ldr	r3, [r5, r3]
 800d31c:	b92b      	cbnz	r3, 800d32a <quorem+0x9e>
 800d31e:	9b01      	ldr	r3, [sp, #4]
 800d320:	3b04      	subs	r3, #4
 800d322:	429d      	cmp	r5, r3
 800d324:	461a      	mov	r2, r3
 800d326:	d330      	bcc.n	800d38a <quorem+0xfe>
 800d328:	613c      	str	r4, [r7, #16]
 800d32a:	4638      	mov	r0, r7
 800d32c:	f001 f9c6 	bl	800e6bc <__mcmp>
 800d330:	2800      	cmp	r0, #0
 800d332:	db26      	blt.n	800d382 <quorem+0xf6>
 800d334:	4629      	mov	r1, r5
 800d336:	2000      	movs	r0, #0
 800d338:	f858 2b04 	ldr.w	r2, [r8], #4
 800d33c:	f8d1 c000 	ldr.w	ip, [r1]
 800d340:	fa1f fe82 	uxth.w	lr, r2
 800d344:	45c1      	cmp	r9, r8
 800d346:	fa1f f38c 	uxth.w	r3, ip
 800d34a:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800d34e:	eba3 030e 	sub.w	r3, r3, lr
 800d352:	4403      	add	r3, r0
 800d354:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d358:	b29b      	uxth	r3, r3
 800d35a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d35e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d362:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d366:	f841 3b04 	str.w	r3, [r1], #4
 800d36a:	d2e5      	bcs.n	800d338 <quorem+0xac>
 800d36c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d370:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d374:	b922      	cbnz	r2, 800d380 <quorem+0xf4>
 800d376:	3b04      	subs	r3, #4
 800d378:	429d      	cmp	r5, r3
 800d37a:	461a      	mov	r2, r3
 800d37c:	d30b      	bcc.n	800d396 <quorem+0x10a>
 800d37e:	613c      	str	r4, [r7, #16]
 800d380:	3601      	adds	r6, #1
 800d382:	4630      	mov	r0, r6
 800d384:	b003      	add	sp, #12
 800d386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d38a:	6812      	ldr	r2, [r2, #0]
 800d38c:	3b04      	subs	r3, #4
 800d38e:	2a00      	cmp	r2, #0
 800d390:	d1ca      	bne.n	800d328 <quorem+0x9c>
 800d392:	3c01      	subs	r4, #1
 800d394:	e7c5      	b.n	800d322 <quorem+0x96>
 800d396:	6812      	ldr	r2, [r2, #0]
 800d398:	3b04      	subs	r3, #4
 800d39a:	2a00      	cmp	r2, #0
 800d39c:	d1ef      	bne.n	800d37e <quorem+0xf2>
 800d39e:	3c01      	subs	r4, #1
 800d3a0:	e7ea      	b.n	800d378 <quorem+0xec>
 800d3a2:	2000      	movs	r0, #0
 800d3a4:	e7ee      	b.n	800d384 <quorem+0xf8>
	...

0800d3a8 <_dtoa_r>:
 800d3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3ac:	69c7      	ldr	r7, [r0, #28]
 800d3ae:	b099      	sub	sp, #100	@ 0x64
 800d3b0:	4683      	mov	fp, r0
 800d3b2:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d3b4:	9109      	str	r1, [sp, #36]	@ 0x24
 800d3b6:	920e      	str	r2, [sp, #56]	@ 0x38
 800d3b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d3ba:	ec55 4b10 	vmov	r4, r5, d0
 800d3be:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d3c2:	b97f      	cbnz	r7, 800d3e4 <_dtoa_r+0x3c>
 800d3c4:	2010      	movs	r0, #16
 800d3c6:	f000 fdfd 	bl	800dfc4 <malloc>
 800d3ca:	4602      	mov	r2, r0
 800d3cc:	f8cb 001c 	str.w	r0, [fp, #28]
 800d3d0:	b920      	cbnz	r0, 800d3dc <_dtoa_r+0x34>
 800d3d2:	4ba7      	ldr	r3, [pc, #668]	@ (800d670 <_dtoa_r+0x2c8>)
 800d3d4:	21ef      	movs	r1, #239	@ 0xef
 800d3d6:	48a7      	ldr	r0, [pc, #668]	@ (800d674 <_dtoa_r+0x2cc>)
 800d3d8:	f002 fd7e 	bl	800fed8 <__assert_func>
 800d3dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d3e0:	6007      	str	r7, [r0, #0]
 800d3e2:	60c7      	str	r7, [r0, #12]
 800d3e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d3e8:	6819      	ldr	r1, [r3, #0]
 800d3ea:	b159      	cbz	r1, 800d404 <_dtoa_r+0x5c>
 800d3ec:	685a      	ldr	r2, [r3, #4]
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	4658      	mov	r0, fp
 800d3f2:	4093      	lsls	r3, r2
 800d3f4:	604a      	str	r2, [r1, #4]
 800d3f6:	608b      	str	r3, [r1, #8]
 800d3f8:	f000 feda 	bl	800e1b0 <_Bfree>
 800d3fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d400:	2200      	movs	r2, #0
 800d402:	601a      	str	r2, [r3, #0]
 800d404:	1e2b      	subs	r3, r5, #0
 800d406:	bfb7      	itett	lt
 800d408:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d40c:	2300      	movge	r3, #0
 800d40e:	2201      	movlt	r2, #1
 800d410:	9303      	strlt	r3, [sp, #12]
 800d412:	bfa8      	it	ge
 800d414:	6033      	strge	r3, [r6, #0]
 800d416:	9f03      	ldr	r7, [sp, #12]
 800d418:	4b97      	ldr	r3, [pc, #604]	@ (800d678 <_dtoa_r+0x2d0>)
 800d41a:	bfb8      	it	lt
 800d41c:	6032      	strlt	r2, [r6, #0]
 800d41e:	43bb      	bics	r3, r7
 800d420:	d112      	bne.n	800d448 <_dtoa_r+0xa0>
 800d422:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d426:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d428:	6013      	str	r3, [r2, #0]
 800d42a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d42e:	4323      	orrs	r3, r4
 800d430:	f000 854c 	beq.w	800decc <_dtoa_r+0xb24>
 800d434:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d436:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d68c <_dtoa_r+0x2e4>
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	f000 854e 	beq.w	800dedc <_dtoa_r+0xb34>
 800d440:	f10a 0303 	add.w	r3, sl, #3
 800d444:	f000 bd48 	b.w	800ded8 <_dtoa_r+0xb30>
 800d448:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d44c:	2200      	movs	r2, #0
 800d44e:	2300      	movs	r3, #0
 800d450:	ec51 0b17 	vmov	r0, r1, d7
 800d454:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d458:	f7f3 fb4a 	bl	8000af0 <__aeabi_dcmpeq>
 800d45c:	4680      	mov	r8, r0
 800d45e:	b158      	cbz	r0, 800d478 <_dtoa_r+0xd0>
 800d460:	2301      	movs	r3, #1
 800d462:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d464:	6013      	str	r3, [r2, #0]
 800d466:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d468:	b113      	cbz	r3, 800d470 <_dtoa_r+0xc8>
 800d46a:	4b84      	ldr	r3, [pc, #528]	@ (800d67c <_dtoa_r+0x2d4>)
 800d46c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d46e:	6013      	str	r3, [r2, #0]
 800d470:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800d690 <_dtoa_r+0x2e8>
 800d474:	f000 bd32 	b.w	800dedc <_dtoa_r+0xb34>
 800d478:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d47c:	aa16      	add	r2, sp, #88	@ 0x58
 800d47e:	a917      	add	r1, sp, #92	@ 0x5c
 800d480:	4658      	mov	r0, fp
 800d482:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d486:	f001 fa41 	bl	800e90c <__d2b>
 800d48a:	4681      	mov	r9, r0
 800d48c:	2e00      	cmp	r6, #0
 800d48e:	d075      	beq.n	800d57c <_dtoa_r+0x1d4>
 800d490:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d492:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d496:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d49a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d49e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d4a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d4a6:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d4aa:	4619      	mov	r1, r3
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	4b74      	ldr	r3, [pc, #464]	@ (800d680 <_dtoa_r+0x2d8>)
 800d4b0:	f7f2 fefe 	bl	80002b0 <__aeabi_dsub>
 800d4b4:	a368      	add	r3, pc, #416	@ (adr r3, 800d658 <_dtoa_r+0x2b0>)
 800d4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ba:	f7f3 f8b1 	bl	8000620 <__aeabi_dmul>
 800d4be:	a368      	add	r3, pc, #416	@ (adr r3, 800d660 <_dtoa_r+0x2b8>)
 800d4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c4:	f7f2 fef6 	bl	80002b4 <__adddf3>
 800d4c8:	4604      	mov	r4, r0
 800d4ca:	460d      	mov	r5, r1
 800d4cc:	4630      	mov	r0, r6
 800d4ce:	f7f3 f83d 	bl	800054c <__aeabi_i2d>
 800d4d2:	a365      	add	r3, pc, #404	@ (adr r3, 800d668 <_dtoa_r+0x2c0>)
 800d4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d8:	f7f3 f8a2 	bl	8000620 <__aeabi_dmul>
 800d4dc:	4602      	mov	r2, r0
 800d4de:	460b      	mov	r3, r1
 800d4e0:	4620      	mov	r0, r4
 800d4e2:	4629      	mov	r1, r5
 800d4e4:	f7f2 fee6 	bl	80002b4 <__adddf3>
 800d4e8:	4604      	mov	r4, r0
 800d4ea:	460d      	mov	r5, r1
 800d4ec:	f7f3 fb48 	bl	8000b80 <__aeabi_d2iz>
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	4607      	mov	r7, r0
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	4620      	mov	r0, r4
 800d4f8:	4629      	mov	r1, r5
 800d4fa:	f7f3 fb03 	bl	8000b04 <__aeabi_dcmplt>
 800d4fe:	b140      	cbz	r0, 800d512 <_dtoa_r+0x16a>
 800d500:	4638      	mov	r0, r7
 800d502:	f7f3 f823 	bl	800054c <__aeabi_i2d>
 800d506:	4622      	mov	r2, r4
 800d508:	462b      	mov	r3, r5
 800d50a:	f7f3 faf1 	bl	8000af0 <__aeabi_dcmpeq>
 800d50e:	b900      	cbnz	r0, 800d512 <_dtoa_r+0x16a>
 800d510:	3f01      	subs	r7, #1
 800d512:	2f16      	cmp	r7, #22
 800d514:	d851      	bhi.n	800d5ba <_dtoa_r+0x212>
 800d516:	4b5b      	ldr	r3, [pc, #364]	@ (800d684 <_dtoa_r+0x2dc>)
 800d518:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d51c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d524:	f7f3 faee 	bl	8000b04 <__aeabi_dcmplt>
 800d528:	2800      	cmp	r0, #0
 800d52a:	d048      	beq.n	800d5be <_dtoa_r+0x216>
 800d52c:	3f01      	subs	r7, #1
 800d52e:	2300      	movs	r3, #0
 800d530:	9312      	str	r3, [sp, #72]	@ 0x48
 800d532:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d534:	1b9b      	subs	r3, r3, r6
 800d536:	1e5a      	subs	r2, r3, #1
 800d538:	bf46      	itte	mi
 800d53a:	f1c3 0801 	rsbmi	r8, r3, #1
 800d53e:	2300      	movmi	r3, #0
 800d540:	f04f 0800 	movpl.w	r8, #0
 800d544:	9208      	str	r2, [sp, #32]
 800d546:	bf48      	it	mi
 800d548:	9308      	strmi	r3, [sp, #32]
 800d54a:	2f00      	cmp	r7, #0
 800d54c:	db39      	blt.n	800d5c2 <_dtoa_r+0x21a>
 800d54e:	9b08      	ldr	r3, [sp, #32]
 800d550:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d552:	443b      	add	r3, r7
 800d554:	9308      	str	r3, [sp, #32]
 800d556:	2300      	movs	r3, #0
 800d558:	930a      	str	r3, [sp, #40]	@ 0x28
 800d55a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d55c:	2b09      	cmp	r3, #9
 800d55e:	d864      	bhi.n	800d62a <_dtoa_r+0x282>
 800d560:	2b05      	cmp	r3, #5
 800d562:	bfc5      	ittet	gt
 800d564:	3b04      	subgt	r3, #4
 800d566:	2400      	movgt	r4, #0
 800d568:	2401      	movle	r4, #1
 800d56a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d56c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d56e:	3b02      	subs	r3, #2
 800d570:	2b03      	cmp	r3, #3
 800d572:	d865      	bhi.n	800d640 <_dtoa_r+0x298>
 800d574:	e8df f003 	tbb	[pc, r3]
 800d578:	5737392c 	.word	0x5737392c
 800d57c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d580:	441e      	add	r6, r3
 800d582:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d586:	2b20      	cmp	r3, #32
 800d588:	bfc9      	itett	gt
 800d58a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d58e:	f1c3 0320 	rsble	r3, r3, #32
 800d592:	409f      	lslgt	r7, r3
 800d594:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d598:	bfd8      	it	le
 800d59a:	fa04 f003 	lslle.w	r0, r4, r3
 800d59e:	f106 36ff 	add.w	r6, r6, #4294967295
 800d5a2:	bfc4      	itt	gt
 800d5a4:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d5a8:	ea47 0003 	orrgt.w	r0, r7, r3
 800d5ac:	f7f2 ffbe 	bl	800052c <__aeabi_ui2d>
 800d5b0:	2201      	movs	r2, #1
 800d5b2:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d5b6:	9214      	str	r2, [sp, #80]	@ 0x50
 800d5b8:	e777      	b.n	800d4aa <_dtoa_r+0x102>
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	e7b8      	b.n	800d530 <_dtoa_r+0x188>
 800d5be:	9012      	str	r0, [sp, #72]	@ 0x48
 800d5c0:	e7b7      	b.n	800d532 <_dtoa_r+0x18a>
 800d5c2:	427b      	negs	r3, r7
 800d5c4:	eba8 0807 	sub.w	r8, r8, r7
 800d5c8:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d5ce:	e7c4      	b.n	800d55a <_dtoa_r+0x1b2>
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d5d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	dc35      	bgt.n	800d646 <_dtoa_r+0x29e>
 800d5da:	2301      	movs	r3, #1
 800d5dc:	461a      	mov	r2, r3
 800d5de:	9300      	str	r3, [sp, #0]
 800d5e0:	9307      	str	r3, [sp, #28]
 800d5e2:	920e      	str	r2, [sp, #56]	@ 0x38
 800d5e4:	e00b      	b.n	800d5fe <_dtoa_r+0x256>
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	e7f3      	b.n	800d5d2 <_dtoa_r+0x22a>
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d5ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d5f0:	18fb      	adds	r3, r7, r3
 800d5f2:	9300      	str	r3, [sp, #0]
 800d5f4:	3301      	adds	r3, #1
 800d5f6:	2b01      	cmp	r3, #1
 800d5f8:	9307      	str	r3, [sp, #28]
 800d5fa:	bfb8      	it	lt
 800d5fc:	2301      	movlt	r3, #1
 800d5fe:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d602:	2100      	movs	r1, #0
 800d604:	2204      	movs	r2, #4
 800d606:	f102 0514 	add.w	r5, r2, #20
 800d60a:	429d      	cmp	r5, r3
 800d60c:	d91f      	bls.n	800d64e <_dtoa_r+0x2a6>
 800d60e:	6041      	str	r1, [r0, #4]
 800d610:	4658      	mov	r0, fp
 800d612:	f000 fd8d 	bl	800e130 <_Balloc>
 800d616:	4682      	mov	sl, r0
 800d618:	2800      	cmp	r0, #0
 800d61a:	d13b      	bne.n	800d694 <_dtoa_r+0x2ec>
 800d61c:	4b1a      	ldr	r3, [pc, #104]	@ (800d688 <_dtoa_r+0x2e0>)
 800d61e:	4602      	mov	r2, r0
 800d620:	f240 11af 	movw	r1, #431	@ 0x1af
 800d624:	e6d7      	b.n	800d3d6 <_dtoa_r+0x2e>
 800d626:	2301      	movs	r3, #1
 800d628:	e7e0      	b.n	800d5ec <_dtoa_r+0x244>
 800d62a:	2401      	movs	r4, #1
 800d62c:	2300      	movs	r3, #0
 800d62e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d630:	9309      	str	r3, [sp, #36]	@ 0x24
 800d632:	f04f 33ff 	mov.w	r3, #4294967295
 800d636:	2200      	movs	r2, #0
 800d638:	9300      	str	r3, [sp, #0]
 800d63a:	9307      	str	r3, [sp, #28]
 800d63c:	2312      	movs	r3, #18
 800d63e:	e7d0      	b.n	800d5e2 <_dtoa_r+0x23a>
 800d640:	2301      	movs	r3, #1
 800d642:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d644:	e7f5      	b.n	800d632 <_dtoa_r+0x28a>
 800d646:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d648:	9300      	str	r3, [sp, #0]
 800d64a:	9307      	str	r3, [sp, #28]
 800d64c:	e7d7      	b.n	800d5fe <_dtoa_r+0x256>
 800d64e:	3101      	adds	r1, #1
 800d650:	0052      	lsls	r2, r2, #1
 800d652:	e7d8      	b.n	800d606 <_dtoa_r+0x25e>
 800d654:	f3af 8000 	nop.w
 800d658:	636f4361 	.word	0x636f4361
 800d65c:	3fd287a7 	.word	0x3fd287a7
 800d660:	8b60c8b3 	.word	0x8b60c8b3
 800d664:	3fc68a28 	.word	0x3fc68a28
 800d668:	509f79fb 	.word	0x509f79fb
 800d66c:	3fd34413 	.word	0x3fd34413
 800d670:	08010c87 	.word	0x08010c87
 800d674:	08010c9e 	.word	0x08010c9e
 800d678:	7ff00000 	.word	0x7ff00000
 800d67c:	08010c52 	.word	0x08010c52
 800d680:	3ff80000 	.word	0x3ff80000
 800d684:	08010d98 	.word	0x08010d98
 800d688:	08010cf6 	.word	0x08010cf6
 800d68c:	08010c83 	.word	0x08010c83
 800d690:	08010c51 	.word	0x08010c51
 800d694:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d698:	6018      	str	r0, [r3, #0]
 800d69a:	9b07      	ldr	r3, [sp, #28]
 800d69c:	2b0e      	cmp	r3, #14
 800d69e:	f200 80a4 	bhi.w	800d7ea <_dtoa_r+0x442>
 800d6a2:	2c00      	cmp	r4, #0
 800d6a4:	f000 80a1 	beq.w	800d7ea <_dtoa_r+0x442>
 800d6a8:	2f00      	cmp	r7, #0
 800d6aa:	dd33      	ble.n	800d714 <_dtoa_r+0x36c>
 800d6ac:	f007 020f 	and.w	r2, r7, #15
 800d6b0:	4bac      	ldr	r3, [pc, #688]	@ (800d964 <_dtoa_r+0x5bc>)
 800d6b2:	05f8      	lsls	r0, r7, #23
 800d6b4:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d6b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d6bc:	ed93 7b00 	vldr	d7, [r3]
 800d6c0:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d6c4:	d516      	bpl.n	800d6f4 <_dtoa_r+0x34c>
 800d6c6:	4ba8      	ldr	r3, [pc, #672]	@ (800d968 <_dtoa_r+0x5c0>)
 800d6c8:	f004 040f 	and.w	r4, r4, #15
 800d6cc:	2603      	movs	r6, #3
 800d6ce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d6d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d6d6:	f7f3 f8cd 	bl	8000874 <__aeabi_ddiv>
 800d6da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6de:	4da2      	ldr	r5, [pc, #648]	@ (800d968 <_dtoa_r+0x5c0>)
 800d6e0:	b954      	cbnz	r4, 800d6f8 <_dtoa_r+0x350>
 800d6e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d6e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6ea:	f7f3 f8c3 	bl	8000874 <__aeabi_ddiv>
 800d6ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6f2:	e028      	b.n	800d746 <_dtoa_r+0x39e>
 800d6f4:	2602      	movs	r6, #2
 800d6f6:	e7f2      	b.n	800d6de <_dtoa_r+0x336>
 800d6f8:	07e1      	lsls	r1, r4, #31
 800d6fa:	d508      	bpl.n	800d70e <_dtoa_r+0x366>
 800d6fc:	3601      	adds	r6, #1
 800d6fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d702:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d706:	f7f2 ff8b 	bl	8000620 <__aeabi_dmul>
 800d70a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d70e:	1064      	asrs	r4, r4, #1
 800d710:	3508      	adds	r5, #8
 800d712:	e7e5      	b.n	800d6e0 <_dtoa_r+0x338>
 800d714:	f000 80d2 	beq.w	800d8bc <_dtoa_r+0x514>
 800d718:	427c      	negs	r4, r7
 800d71a:	4b92      	ldr	r3, [pc, #584]	@ (800d964 <_dtoa_r+0x5bc>)
 800d71c:	4d92      	ldr	r5, [pc, #584]	@ (800d968 <_dtoa_r+0x5c0>)
 800d71e:	2602      	movs	r6, #2
 800d720:	f004 020f 	and.w	r2, r4, #15
 800d724:	1124      	asrs	r4, r4, #4
 800d726:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d72a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d732:	f7f2 ff75 	bl	8000620 <__aeabi_dmul>
 800d736:	2300      	movs	r3, #0
 800d738:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d73c:	2c00      	cmp	r4, #0
 800d73e:	f040 80b2 	bne.w	800d8a6 <_dtoa_r+0x4fe>
 800d742:	2b00      	cmp	r3, #0
 800d744:	d1d3      	bne.n	800d6ee <_dtoa_r+0x346>
 800d746:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d748:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	f000 80b7 	beq.w	800d8c0 <_dtoa_r+0x518>
 800d752:	2200      	movs	r2, #0
 800d754:	4b85      	ldr	r3, [pc, #532]	@ (800d96c <_dtoa_r+0x5c4>)
 800d756:	4620      	mov	r0, r4
 800d758:	4629      	mov	r1, r5
 800d75a:	f7f3 f9d3 	bl	8000b04 <__aeabi_dcmplt>
 800d75e:	2800      	cmp	r0, #0
 800d760:	f000 80ae 	beq.w	800d8c0 <_dtoa_r+0x518>
 800d764:	9b07      	ldr	r3, [sp, #28]
 800d766:	2b00      	cmp	r3, #0
 800d768:	f000 80aa 	beq.w	800d8c0 <_dtoa_r+0x518>
 800d76c:	9b00      	ldr	r3, [sp, #0]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	dd37      	ble.n	800d7e2 <_dtoa_r+0x43a>
 800d772:	1e7b      	subs	r3, r7, #1
 800d774:	4620      	mov	r0, r4
 800d776:	2200      	movs	r2, #0
 800d778:	4629      	mov	r1, r5
 800d77a:	9304      	str	r3, [sp, #16]
 800d77c:	3601      	adds	r6, #1
 800d77e:	4b7c      	ldr	r3, [pc, #496]	@ (800d970 <_dtoa_r+0x5c8>)
 800d780:	f7f2 ff4e 	bl	8000620 <__aeabi_dmul>
 800d784:	9c00      	ldr	r4, [sp, #0]
 800d786:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d78a:	4630      	mov	r0, r6
 800d78c:	f7f2 fede 	bl	800054c <__aeabi_i2d>
 800d790:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d794:	f7f2 ff44 	bl	8000620 <__aeabi_dmul>
 800d798:	2200      	movs	r2, #0
 800d79a:	4b76      	ldr	r3, [pc, #472]	@ (800d974 <_dtoa_r+0x5cc>)
 800d79c:	f7f2 fd8a 	bl	80002b4 <__adddf3>
 800d7a0:	4605      	mov	r5, r0
 800d7a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d7a6:	2c00      	cmp	r4, #0
 800d7a8:	f040 808d 	bne.w	800d8c6 <_dtoa_r+0x51e>
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	4b72      	ldr	r3, [pc, #456]	@ (800d978 <_dtoa_r+0x5d0>)
 800d7b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7b4:	f7f2 fd7c 	bl	80002b0 <__aeabi_dsub>
 800d7b8:	4602      	mov	r2, r0
 800d7ba:	460b      	mov	r3, r1
 800d7bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d7c0:	462a      	mov	r2, r5
 800d7c2:	4633      	mov	r3, r6
 800d7c4:	f7f3 f9bc 	bl	8000b40 <__aeabi_dcmpgt>
 800d7c8:	2800      	cmp	r0, #0
 800d7ca:	f040 828b 	bne.w	800dce4 <_dtoa_r+0x93c>
 800d7ce:	462a      	mov	r2, r5
 800d7d0:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d7d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7d8:	f7f3 f994 	bl	8000b04 <__aeabi_dcmplt>
 800d7dc:	2800      	cmp	r0, #0
 800d7de:	f040 8128 	bne.w	800da32 <_dtoa_r+0x68a>
 800d7e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d7e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d7ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	f2c0 815a 	blt.w	800daa6 <_dtoa_r+0x6fe>
 800d7f2:	2f0e      	cmp	r7, #14
 800d7f4:	f300 8157 	bgt.w	800daa6 <_dtoa_r+0x6fe>
 800d7f8:	4b5a      	ldr	r3, [pc, #360]	@ (800d964 <_dtoa_r+0x5bc>)
 800d7fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d7fe:	ed93 7b00 	vldr	d7, [r3]
 800d802:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d804:	2b00      	cmp	r3, #0
 800d806:	ed8d 7b00 	vstr	d7, [sp]
 800d80a:	da03      	bge.n	800d814 <_dtoa_r+0x46c>
 800d80c:	9b07      	ldr	r3, [sp, #28]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	f340 8101 	ble.w	800da16 <_dtoa_r+0x66e>
 800d814:	4656      	mov	r6, sl
 800d816:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d81a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d81e:	4620      	mov	r0, r4
 800d820:	4629      	mov	r1, r5
 800d822:	f7f3 f827 	bl	8000874 <__aeabi_ddiv>
 800d826:	f7f3 f9ab 	bl	8000b80 <__aeabi_d2iz>
 800d82a:	4680      	mov	r8, r0
 800d82c:	f7f2 fe8e 	bl	800054c <__aeabi_i2d>
 800d830:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d834:	f7f2 fef4 	bl	8000620 <__aeabi_dmul>
 800d838:	4602      	mov	r2, r0
 800d83a:	4620      	mov	r0, r4
 800d83c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d840:	460b      	mov	r3, r1
 800d842:	4629      	mov	r1, r5
 800d844:	f7f2 fd34 	bl	80002b0 <__aeabi_dsub>
 800d848:	9d07      	ldr	r5, [sp, #28]
 800d84a:	f806 4b01 	strb.w	r4, [r6], #1
 800d84e:	eba6 040a 	sub.w	r4, r6, sl
 800d852:	4602      	mov	r2, r0
 800d854:	460b      	mov	r3, r1
 800d856:	42a5      	cmp	r5, r4
 800d858:	f040 8117 	bne.w	800da8a <_dtoa_r+0x6e2>
 800d85c:	f7f2 fd2a 	bl	80002b4 <__adddf3>
 800d860:	4604      	mov	r4, r0
 800d862:	460d      	mov	r5, r1
 800d864:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d868:	f7f3 f96a 	bl	8000b40 <__aeabi_dcmpgt>
 800d86c:	2800      	cmp	r0, #0
 800d86e:	f040 80f9 	bne.w	800da64 <_dtoa_r+0x6bc>
 800d872:	4620      	mov	r0, r4
 800d874:	4629      	mov	r1, r5
 800d876:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d87a:	f7f3 f939 	bl	8000af0 <__aeabi_dcmpeq>
 800d87e:	b118      	cbz	r0, 800d888 <_dtoa_r+0x4e0>
 800d880:	f018 0f01 	tst.w	r8, #1
 800d884:	f040 80ee 	bne.w	800da64 <_dtoa_r+0x6bc>
 800d888:	4649      	mov	r1, r9
 800d88a:	4658      	mov	r0, fp
 800d88c:	f000 fc90 	bl	800e1b0 <_Bfree>
 800d890:	2300      	movs	r3, #0
 800d892:	3701      	adds	r7, #1
 800d894:	7033      	strb	r3, [r6, #0]
 800d896:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d898:	601f      	str	r7, [r3, #0]
 800d89a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	f000 831d 	beq.w	800dedc <_dtoa_r+0xb34>
 800d8a2:	601e      	str	r6, [r3, #0]
 800d8a4:	e31a      	b.n	800dedc <_dtoa_r+0xb34>
 800d8a6:	07e2      	lsls	r2, r4, #31
 800d8a8:	d505      	bpl.n	800d8b6 <_dtoa_r+0x50e>
 800d8aa:	3601      	adds	r6, #1
 800d8ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d8b0:	f7f2 feb6 	bl	8000620 <__aeabi_dmul>
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	1064      	asrs	r4, r4, #1
 800d8b8:	3508      	adds	r5, #8
 800d8ba:	e73f      	b.n	800d73c <_dtoa_r+0x394>
 800d8bc:	2602      	movs	r6, #2
 800d8be:	e742      	b.n	800d746 <_dtoa_r+0x39e>
 800d8c0:	9c07      	ldr	r4, [sp, #28]
 800d8c2:	9704      	str	r7, [sp, #16]
 800d8c4:	e761      	b.n	800d78a <_dtoa_r+0x3e2>
 800d8c6:	4b27      	ldr	r3, [pc, #156]	@ (800d964 <_dtoa_r+0x5bc>)
 800d8c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d8ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d8ce:	4454      	add	r4, sl
 800d8d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d8d4:	2900      	cmp	r1, #0
 800d8d6:	d053      	beq.n	800d980 <_dtoa_r+0x5d8>
 800d8d8:	2000      	movs	r0, #0
 800d8da:	4928      	ldr	r1, [pc, #160]	@ (800d97c <_dtoa_r+0x5d4>)
 800d8dc:	f7f2 ffca 	bl	8000874 <__aeabi_ddiv>
 800d8e0:	4633      	mov	r3, r6
 800d8e2:	4656      	mov	r6, sl
 800d8e4:	462a      	mov	r2, r5
 800d8e6:	f7f2 fce3 	bl	80002b0 <__aeabi_dsub>
 800d8ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d8ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8f2:	f7f3 f945 	bl	8000b80 <__aeabi_d2iz>
 800d8f6:	4605      	mov	r5, r0
 800d8f8:	f7f2 fe28 	bl	800054c <__aeabi_i2d>
 800d8fc:	4602      	mov	r2, r0
 800d8fe:	460b      	mov	r3, r1
 800d900:	3530      	adds	r5, #48	@ 0x30
 800d902:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d906:	f7f2 fcd3 	bl	80002b0 <__aeabi_dsub>
 800d90a:	4602      	mov	r2, r0
 800d90c:	460b      	mov	r3, r1
 800d90e:	f806 5b01 	strb.w	r5, [r6], #1
 800d912:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d916:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d91a:	f7f3 f8f3 	bl	8000b04 <__aeabi_dcmplt>
 800d91e:	2800      	cmp	r0, #0
 800d920:	d171      	bne.n	800da06 <_dtoa_r+0x65e>
 800d922:	2000      	movs	r0, #0
 800d924:	4911      	ldr	r1, [pc, #68]	@ (800d96c <_dtoa_r+0x5c4>)
 800d926:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d92a:	f7f2 fcc1 	bl	80002b0 <__aeabi_dsub>
 800d92e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d932:	f7f3 f8e7 	bl	8000b04 <__aeabi_dcmplt>
 800d936:	2800      	cmp	r0, #0
 800d938:	f040 8095 	bne.w	800da66 <_dtoa_r+0x6be>
 800d93c:	42a6      	cmp	r6, r4
 800d93e:	f43f af50 	beq.w	800d7e2 <_dtoa_r+0x43a>
 800d942:	2200      	movs	r2, #0
 800d944:	4b0a      	ldr	r3, [pc, #40]	@ (800d970 <_dtoa_r+0x5c8>)
 800d946:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d94a:	f7f2 fe69 	bl	8000620 <__aeabi_dmul>
 800d94e:	2200      	movs	r2, #0
 800d950:	4b07      	ldr	r3, [pc, #28]	@ (800d970 <_dtoa_r+0x5c8>)
 800d952:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d956:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d95a:	f7f2 fe61 	bl	8000620 <__aeabi_dmul>
 800d95e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d962:	e7c4      	b.n	800d8ee <_dtoa_r+0x546>
 800d964:	08010d98 	.word	0x08010d98
 800d968:	08010d70 	.word	0x08010d70
 800d96c:	3ff00000 	.word	0x3ff00000
 800d970:	40240000 	.word	0x40240000
 800d974:	401c0000 	.word	0x401c0000
 800d978:	40140000 	.word	0x40140000
 800d97c:	3fe00000 	.word	0x3fe00000
 800d980:	4631      	mov	r1, r6
 800d982:	4656      	mov	r6, sl
 800d984:	4628      	mov	r0, r5
 800d986:	f7f2 fe4b 	bl	8000620 <__aeabi_dmul>
 800d98a:	9415      	str	r4, [sp, #84]	@ 0x54
 800d98c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d990:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d994:	f7f3 f8f4 	bl	8000b80 <__aeabi_d2iz>
 800d998:	4605      	mov	r5, r0
 800d99a:	f7f2 fdd7 	bl	800054c <__aeabi_i2d>
 800d99e:	4602      	mov	r2, r0
 800d9a0:	3530      	adds	r5, #48	@ 0x30
 800d9a2:	460b      	mov	r3, r1
 800d9a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9a8:	f7f2 fc82 	bl	80002b0 <__aeabi_dsub>
 800d9ac:	f806 5b01 	strb.w	r5, [r6], #1
 800d9b0:	4602      	mov	r2, r0
 800d9b2:	460b      	mov	r3, r1
 800d9b4:	42a6      	cmp	r6, r4
 800d9b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d9ba:	f04f 0200 	mov.w	r2, #0
 800d9be:	d124      	bne.n	800da0a <_dtoa_r+0x662>
 800d9c0:	4bac      	ldr	r3, [pc, #688]	@ (800dc74 <_dtoa_r+0x8cc>)
 800d9c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d9c6:	f7f2 fc75 	bl	80002b4 <__adddf3>
 800d9ca:	4602      	mov	r2, r0
 800d9cc:	460b      	mov	r3, r1
 800d9ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9d2:	f7f3 f8b5 	bl	8000b40 <__aeabi_dcmpgt>
 800d9d6:	2800      	cmp	r0, #0
 800d9d8:	d145      	bne.n	800da66 <_dtoa_r+0x6be>
 800d9da:	2000      	movs	r0, #0
 800d9dc:	49a5      	ldr	r1, [pc, #660]	@ (800dc74 <_dtoa_r+0x8cc>)
 800d9de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d9e2:	f7f2 fc65 	bl	80002b0 <__aeabi_dsub>
 800d9e6:	4602      	mov	r2, r0
 800d9e8:	460b      	mov	r3, r1
 800d9ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9ee:	f7f3 f889 	bl	8000b04 <__aeabi_dcmplt>
 800d9f2:	2800      	cmp	r0, #0
 800d9f4:	f43f aef5 	beq.w	800d7e2 <_dtoa_r+0x43a>
 800d9f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d9fa:	1e73      	subs	r3, r6, #1
 800d9fc:	9315      	str	r3, [sp, #84]	@ 0x54
 800d9fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800da02:	2b30      	cmp	r3, #48	@ 0x30
 800da04:	d0f8      	beq.n	800d9f8 <_dtoa_r+0x650>
 800da06:	9f04      	ldr	r7, [sp, #16]
 800da08:	e73e      	b.n	800d888 <_dtoa_r+0x4e0>
 800da0a:	4b9b      	ldr	r3, [pc, #620]	@ (800dc78 <_dtoa_r+0x8d0>)
 800da0c:	f7f2 fe08 	bl	8000620 <__aeabi_dmul>
 800da10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da14:	e7bc      	b.n	800d990 <_dtoa_r+0x5e8>
 800da16:	d10c      	bne.n	800da32 <_dtoa_r+0x68a>
 800da18:	2200      	movs	r2, #0
 800da1a:	4b98      	ldr	r3, [pc, #608]	@ (800dc7c <_dtoa_r+0x8d4>)
 800da1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800da20:	f7f2 fdfe 	bl	8000620 <__aeabi_dmul>
 800da24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800da28:	f7f3 f880 	bl	8000b2c <__aeabi_dcmpge>
 800da2c:	2800      	cmp	r0, #0
 800da2e:	f000 8157 	beq.w	800dce0 <_dtoa_r+0x938>
 800da32:	2400      	movs	r4, #0
 800da34:	4625      	mov	r5, r4
 800da36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da38:	4656      	mov	r6, sl
 800da3a:	43db      	mvns	r3, r3
 800da3c:	9304      	str	r3, [sp, #16]
 800da3e:	2700      	movs	r7, #0
 800da40:	4621      	mov	r1, r4
 800da42:	4658      	mov	r0, fp
 800da44:	f000 fbb4 	bl	800e1b0 <_Bfree>
 800da48:	2d00      	cmp	r5, #0
 800da4a:	d0dc      	beq.n	800da06 <_dtoa_r+0x65e>
 800da4c:	b12f      	cbz	r7, 800da5a <_dtoa_r+0x6b2>
 800da4e:	42af      	cmp	r7, r5
 800da50:	d003      	beq.n	800da5a <_dtoa_r+0x6b2>
 800da52:	4639      	mov	r1, r7
 800da54:	4658      	mov	r0, fp
 800da56:	f000 fbab 	bl	800e1b0 <_Bfree>
 800da5a:	4629      	mov	r1, r5
 800da5c:	4658      	mov	r0, fp
 800da5e:	f000 fba7 	bl	800e1b0 <_Bfree>
 800da62:	e7d0      	b.n	800da06 <_dtoa_r+0x65e>
 800da64:	9704      	str	r7, [sp, #16]
 800da66:	4633      	mov	r3, r6
 800da68:	461e      	mov	r6, r3
 800da6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800da6e:	2a39      	cmp	r2, #57	@ 0x39
 800da70:	d107      	bne.n	800da82 <_dtoa_r+0x6da>
 800da72:	459a      	cmp	sl, r3
 800da74:	d1f8      	bne.n	800da68 <_dtoa_r+0x6c0>
 800da76:	9a04      	ldr	r2, [sp, #16]
 800da78:	3201      	adds	r2, #1
 800da7a:	9204      	str	r2, [sp, #16]
 800da7c:	2230      	movs	r2, #48	@ 0x30
 800da7e:	f88a 2000 	strb.w	r2, [sl]
 800da82:	781a      	ldrb	r2, [r3, #0]
 800da84:	3201      	adds	r2, #1
 800da86:	701a      	strb	r2, [r3, #0]
 800da88:	e7bd      	b.n	800da06 <_dtoa_r+0x65e>
 800da8a:	2200      	movs	r2, #0
 800da8c:	4b7a      	ldr	r3, [pc, #488]	@ (800dc78 <_dtoa_r+0x8d0>)
 800da8e:	f7f2 fdc7 	bl	8000620 <__aeabi_dmul>
 800da92:	2200      	movs	r2, #0
 800da94:	2300      	movs	r3, #0
 800da96:	4604      	mov	r4, r0
 800da98:	460d      	mov	r5, r1
 800da9a:	f7f3 f829 	bl	8000af0 <__aeabi_dcmpeq>
 800da9e:	2800      	cmp	r0, #0
 800daa0:	f43f aebb 	beq.w	800d81a <_dtoa_r+0x472>
 800daa4:	e6f0      	b.n	800d888 <_dtoa_r+0x4e0>
 800daa6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800daa8:	2a00      	cmp	r2, #0
 800daaa:	f000 80db 	beq.w	800dc64 <_dtoa_r+0x8bc>
 800daae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dab0:	2a01      	cmp	r2, #1
 800dab2:	f300 80bf 	bgt.w	800dc34 <_dtoa_r+0x88c>
 800dab6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800dab8:	2a00      	cmp	r2, #0
 800daba:	f000 80b7 	beq.w	800dc2c <_dtoa_r+0x884>
 800dabe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800dac2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dac4:	4646      	mov	r6, r8
 800dac6:	9a08      	ldr	r2, [sp, #32]
 800dac8:	2101      	movs	r1, #1
 800daca:	4658      	mov	r0, fp
 800dacc:	4498      	add	r8, r3
 800dace:	441a      	add	r2, r3
 800dad0:	9208      	str	r2, [sp, #32]
 800dad2:	f000 fc6d 	bl	800e3b0 <__i2b>
 800dad6:	4605      	mov	r5, r0
 800dad8:	b15e      	cbz	r6, 800daf2 <_dtoa_r+0x74a>
 800dada:	9b08      	ldr	r3, [sp, #32]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	dd08      	ble.n	800daf2 <_dtoa_r+0x74a>
 800dae0:	42b3      	cmp	r3, r6
 800dae2:	9a08      	ldr	r2, [sp, #32]
 800dae4:	bfa8      	it	ge
 800dae6:	4633      	movge	r3, r6
 800dae8:	eba8 0803 	sub.w	r8, r8, r3
 800daec:	1af6      	subs	r6, r6, r3
 800daee:	1ad3      	subs	r3, r2, r3
 800daf0:	9308      	str	r3, [sp, #32]
 800daf2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800daf4:	b1f3      	cbz	r3, 800db34 <_dtoa_r+0x78c>
 800daf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	f000 80b7 	beq.w	800dc6c <_dtoa_r+0x8c4>
 800dafe:	b18c      	cbz	r4, 800db24 <_dtoa_r+0x77c>
 800db00:	4629      	mov	r1, r5
 800db02:	4622      	mov	r2, r4
 800db04:	4658      	mov	r0, fp
 800db06:	f000 fd13 	bl	800e530 <__pow5mult>
 800db0a:	464a      	mov	r2, r9
 800db0c:	4601      	mov	r1, r0
 800db0e:	4605      	mov	r5, r0
 800db10:	4658      	mov	r0, fp
 800db12:	f000 fc63 	bl	800e3dc <__multiply>
 800db16:	4649      	mov	r1, r9
 800db18:	9004      	str	r0, [sp, #16]
 800db1a:	4658      	mov	r0, fp
 800db1c:	f000 fb48 	bl	800e1b0 <_Bfree>
 800db20:	9b04      	ldr	r3, [sp, #16]
 800db22:	4699      	mov	r9, r3
 800db24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db26:	1b1a      	subs	r2, r3, r4
 800db28:	d004      	beq.n	800db34 <_dtoa_r+0x78c>
 800db2a:	4649      	mov	r1, r9
 800db2c:	4658      	mov	r0, fp
 800db2e:	f000 fcff 	bl	800e530 <__pow5mult>
 800db32:	4681      	mov	r9, r0
 800db34:	2101      	movs	r1, #1
 800db36:	4658      	mov	r0, fp
 800db38:	f000 fc3a 	bl	800e3b0 <__i2b>
 800db3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db3e:	4604      	mov	r4, r0
 800db40:	2b00      	cmp	r3, #0
 800db42:	f000 81cf 	beq.w	800dee4 <_dtoa_r+0xb3c>
 800db46:	461a      	mov	r2, r3
 800db48:	4601      	mov	r1, r0
 800db4a:	4658      	mov	r0, fp
 800db4c:	f000 fcf0 	bl	800e530 <__pow5mult>
 800db50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db52:	4604      	mov	r4, r0
 800db54:	2b01      	cmp	r3, #1
 800db56:	f300 8095 	bgt.w	800dc84 <_dtoa_r+0x8dc>
 800db5a:	9b02      	ldr	r3, [sp, #8]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	f040 8087 	bne.w	800dc70 <_dtoa_r+0x8c8>
 800db62:	9b03      	ldr	r3, [sp, #12]
 800db64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800db68:	2b00      	cmp	r3, #0
 800db6a:	f040 8089 	bne.w	800dc80 <_dtoa_r+0x8d8>
 800db6e:	9b03      	ldr	r3, [sp, #12]
 800db70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800db74:	0d1b      	lsrs	r3, r3, #20
 800db76:	051b      	lsls	r3, r3, #20
 800db78:	b12b      	cbz	r3, 800db86 <_dtoa_r+0x7de>
 800db7a:	9b08      	ldr	r3, [sp, #32]
 800db7c:	f108 0801 	add.w	r8, r8, #1
 800db80:	3301      	adds	r3, #1
 800db82:	9308      	str	r3, [sp, #32]
 800db84:	2301      	movs	r3, #1
 800db86:	930a      	str	r3, [sp, #40]	@ 0x28
 800db88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	f000 81b0 	beq.w	800def0 <_dtoa_r+0xb48>
 800db90:	6923      	ldr	r3, [r4, #16]
 800db92:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800db96:	6918      	ldr	r0, [r3, #16]
 800db98:	f000 fbbe 	bl	800e318 <__hi0bits>
 800db9c:	f1c0 0020 	rsb	r0, r0, #32
 800dba0:	9b08      	ldr	r3, [sp, #32]
 800dba2:	4418      	add	r0, r3
 800dba4:	f010 001f 	ands.w	r0, r0, #31
 800dba8:	d077      	beq.n	800dc9a <_dtoa_r+0x8f2>
 800dbaa:	f1c0 0320 	rsb	r3, r0, #32
 800dbae:	2b04      	cmp	r3, #4
 800dbb0:	dd6b      	ble.n	800dc8a <_dtoa_r+0x8e2>
 800dbb2:	f1c0 001c 	rsb	r0, r0, #28
 800dbb6:	9b08      	ldr	r3, [sp, #32]
 800dbb8:	4480      	add	r8, r0
 800dbba:	4403      	add	r3, r0
 800dbbc:	4406      	add	r6, r0
 800dbbe:	9308      	str	r3, [sp, #32]
 800dbc0:	f1b8 0f00 	cmp.w	r8, #0
 800dbc4:	dd05      	ble.n	800dbd2 <_dtoa_r+0x82a>
 800dbc6:	4649      	mov	r1, r9
 800dbc8:	4642      	mov	r2, r8
 800dbca:	4658      	mov	r0, fp
 800dbcc:	f000 fd0a 	bl	800e5e4 <__lshift>
 800dbd0:	4681      	mov	r9, r0
 800dbd2:	9b08      	ldr	r3, [sp, #32]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	dd05      	ble.n	800dbe4 <_dtoa_r+0x83c>
 800dbd8:	4621      	mov	r1, r4
 800dbda:	461a      	mov	r2, r3
 800dbdc:	4658      	mov	r0, fp
 800dbde:	f000 fd01 	bl	800e5e4 <__lshift>
 800dbe2:	4604      	mov	r4, r0
 800dbe4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d059      	beq.n	800dc9e <_dtoa_r+0x8f6>
 800dbea:	4621      	mov	r1, r4
 800dbec:	4648      	mov	r0, r9
 800dbee:	f000 fd65 	bl	800e6bc <__mcmp>
 800dbf2:	2800      	cmp	r0, #0
 800dbf4:	da53      	bge.n	800dc9e <_dtoa_r+0x8f6>
 800dbf6:	1e7b      	subs	r3, r7, #1
 800dbf8:	4649      	mov	r1, r9
 800dbfa:	220a      	movs	r2, #10
 800dbfc:	4658      	mov	r0, fp
 800dbfe:	9304      	str	r3, [sp, #16]
 800dc00:	2300      	movs	r3, #0
 800dc02:	f000 faf7 	bl	800e1f4 <__multadd>
 800dc06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc08:	4681      	mov	r9, r0
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	f000 8172 	beq.w	800def4 <_dtoa_r+0xb4c>
 800dc10:	2300      	movs	r3, #0
 800dc12:	4629      	mov	r1, r5
 800dc14:	220a      	movs	r2, #10
 800dc16:	4658      	mov	r0, fp
 800dc18:	f000 faec 	bl	800e1f4 <__multadd>
 800dc1c:	9b00      	ldr	r3, [sp, #0]
 800dc1e:	4605      	mov	r5, r0
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	dc67      	bgt.n	800dcf4 <_dtoa_r+0x94c>
 800dc24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc26:	2b02      	cmp	r3, #2
 800dc28:	dc41      	bgt.n	800dcae <_dtoa_r+0x906>
 800dc2a:	e063      	b.n	800dcf4 <_dtoa_r+0x94c>
 800dc2c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dc2e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dc32:	e746      	b.n	800dac2 <_dtoa_r+0x71a>
 800dc34:	9b07      	ldr	r3, [sp, #28]
 800dc36:	1e5c      	subs	r4, r3, #1
 800dc38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc3a:	42a3      	cmp	r3, r4
 800dc3c:	bfb7      	itett	lt
 800dc3e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800dc40:	1b1c      	subge	r4, r3, r4
 800dc42:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800dc44:	1ae3      	sublt	r3, r4, r3
 800dc46:	bfbe      	ittt	lt
 800dc48:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800dc4a:	2400      	movlt	r4, #0
 800dc4c:	18d2      	addlt	r2, r2, r3
 800dc4e:	9b07      	ldr	r3, [sp, #28]
 800dc50:	bfb8      	it	lt
 800dc52:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	bfb5      	itete	lt
 800dc58:	eba8 0603 	sublt.w	r6, r8, r3
 800dc5c:	4646      	movge	r6, r8
 800dc5e:	2300      	movlt	r3, #0
 800dc60:	9b07      	ldrge	r3, [sp, #28]
 800dc62:	e730      	b.n	800dac6 <_dtoa_r+0x71e>
 800dc64:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dc66:	4646      	mov	r6, r8
 800dc68:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800dc6a:	e735      	b.n	800dad8 <_dtoa_r+0x730>
 800dc6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dc6e:	e75c      	b.n	800db2a <_dtoa_r+0x782>
 800dc70:	2300      	movs	r3, #0
 800dc72:	e788      	b.n	800db86 <_dtoa_r+0x7de>
 800dc74:	3fe00000 	.word	0x3fe00000
 800dc78:	40240000 	.word	0x40240000
 800dc7c:	40140000 	.word	0x40140000
 800dc80:	9b02      	ldr	r3, [sp, #8]
 800dc82:	e780      	b.n	800db86 <_dtoa_r+0x7de>
 800dc84:	2300      	movs	r3, #0
 800dc86:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc88:	e782      	b.n	800db90 <_dtoa_r+0x7e8>
 800dc8a:	d099      	beq.n	800dbc0 <_dtoa_r+0x818>
 800dc8c:	331c      	adds	r3, #28
 800dc8e:	9a08      	ldr	r2, [sp, #32]
 800dc90:	441a      	add	r2, r3
 800dc92:	4498      	add	r8, r3
 800dc94:	441e      	add	r6, r3
 800dc96:	9208      	str	r2, [sp, #32]
 800dc98:	e792      	b.n	800dbc0 <_dtoa_r+0x818>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	e7f6      	b.n	800dc8c <_dtoa_r+0x8e4>
 800dc9e:	9b07      	ldr	r3, [sp, #28]
 800dca0:	9704      	str	r7, [sp, #16]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	dc20      	bgt.n	800dce8 <_dtoa_r+0x940>
 800dca6:	9300      	str	r3, [sp, #0]
 800dca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcaa:	2b02      	cmp	r3, #2
 800dcac:	dd1e      	ble.n	800dcec <_dtoa_r+0x944>
 800dcae:	9b00      	ldr	r3, [sp, #0]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	f47f aec0 	bne.w	800da36 <_dtoa_r+0x68e>
 800dcb6:	4621      	mov	r1, r4
 800dcb8:	2205      	movs	r2, #5
 800dcba:	4658      	mov	r0, fp
 800dcbc:	f000 fa9a 	bl	800e1f4 <__multadd>
 800dcc0:	4601      	mov	r1, r0
 800dcc2:	4604      	mov	r4, r0
 800dcc4:	4648      	mov	r0, r9
 800dcc6:	f000 fcf9 	bl	800e6bc <__mcmp>
 800dcca:	2800      	cmp	r0, #0
 800dccc:	f77f aeb3 	ble.w	800da36 <_dtoa_r+0x68e>
 800dcd0:	2331      	movs	r3, #49	@ 0x31
 800dcd2:	4656      	mov	r6, sl
 800dcd4:	f806 3b01 	strb.w	r3, [r6], #1
 800dcd8:	9b04      	ldr	r3, [sp, #16]
 800dcda:	3301      	adds	r3, #1
 800dcdc:	9304      	str	r3, [sp, #16]
 800dcde:	e6ae      	b.n	800da3e <_dtoa_r+0x696>
 800dce0:	9c07      	ldr	r4, [sp, #28]
 800dce2:	9704      	str	r7, [sp, #16]
 800dce4:	4625      	mov	r5, r4
 800dce6:	e7f3      	b.n	800dcd0 <_dtoa_r+0x928>
 800dce8:	9b07      	ldr	r3, [sp, #28]
 800dcea:	9300      	str	r3, [sp, #0]
 800dcec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	f000 8104 	beq.w	800defc <_dtoa_r+0xb54>
 800dcf4:	2e00      	cmp	r6, #0
 800dcf6:	dd05      	ble.n	800dd04 <_dtoa_r+0x95c>
 800dcf8:	4629      	mov	r1, r5
 800dcfa:	4632      	mov	r2, r6
 800dcfc:	4658      	mov	r0, fp
 800dcfe:	f000 fc71 	bl	800e5e4 <__lshift>
 800dd02:	4605      	mov	r5, r0
 800dd04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d05a      	beq.n	800ddc0 <_dtoa_r+0xa18>
 800dd0a:	6869      	ldr	r1, [r5, #4]
 800dd0c:	4658      	mov	r0, fp
 800dd0e:	f000 fa0f 	bl	800e130 <_Balloc>
 800dd12:	4606      	mov	r6, r0
 800dd14:	b928      	cbnz	r0, 800dd22 <_dtoa_r+0x97a>
 800dd16:	4b84      	ldr	r3, [pc, #528]	@ (800df28 <_dtoa_r+0xb80>)
 800dd18:	4602      	mov	r2, r0
 800dd1a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800dd1e:	f7ff bb5a 	b.w	800d3d6 <_dtoa_r+0x2e>
 800dd22:	692a      	ldr	r2, [r5, #16]
 800dd24:	f105 010c 	add.w	r1, r5, #12
 800dd28:	300c      	adds	r0, #12
 800dd2a:	3202      	adds	r2, #2
 800dd2c:	0092      	lsls	r2, r2, #2
 800dd2e:	f7ff fa9a 	bl	800d266 <memcpy>
 800dd32:	2201      	movs	r2, #1
 800dd34:	4631      	mov	r1, r6
 800dd36:	4658      	mov	r0, fp
 800dd38:	f000 fc54 	bl	800e5e4 <__lshift>
 800dd3c:	f10a 0301 	add.w	r3, sl, #1
 800dd40:	462f      	mov	r7, r5
 800dd42:	4605      	mov	r5, r0
 800dd44:	9307      	str	r3, [sp, #28]
 800dd46:	9b00      	ldr	r3, [sp, #0]
 800dd48:	4453      	add	r3, sl
 800dd4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dd4c:	9b02      	ldr	r3, [sp, #8]
 800dd4e:	f003 0301 	and.w	r3, r3, #1
 800dd52:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd54:	9b07      	ldr	r3, [sp, #28]
 800dd56:	4621      	mov	r1, r4
 800dd58:	4648      	mov	r0, r9
 800dd5a:	3b01      	subs	r3, #1
 800dd5c:	9300      	str	r3, [sp, #0]
 800dd5e:	f7ff fa95 	bl	800d28c <quorem>
 800dd62:	4639      	mov	r1, r7
 800dd64:	9002      	str	r0, [sp, #8]
 800dd66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dd6a:	4648      	mov	r0, r9
 800dd6c:	f000 fca6 	bl	800e6bc <__mcmp>
 800dd70:	462a      	mov	r2, r5
 800dd72:	9008      	str	r0, [sp, #32]
 800dd74:	4621      	mov	r1, r4
 800dd76:	4658      	mov	r0, fp
 800dd78:	f000 fcbc 	bl	800e6f4 <__mdiff>
 800dd7c:	68c2      	ldr	r2, [r0, #12]
 800dd7e:	4606      	mov	r6, r0
 800dd80:	bb02      	cbnz	r2, 800ddc4 <_dtoa_r+0xa1c>
 800dd82:	4601      	mov	r1, r0
 800dd84:	4648      	mov	r0, r9
 800dd86:	f000 fc99 	bl	800e6bc <__mcmp>
 800dd8a:	4602      	mov	r2, r0
 800dd8c:	4631      	mov	r1, r6
 800dd8e:	4658      	mov	r0, fp
 800dd90:	920e      	str	r2, [sp, #56]	@ 0x38
 800dd92:	f000 fa0d 	bl	800e1b0 <_Bfree>
 800dd96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd9a:	9e07      	ldr	r6, [sp, #28]
 800dd9c:	ea43 0102 	orr.w	r1, r3, r2
 800dda0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dda2:	4319      	orrs	r1, r3
 800dda4:	d110      	bne.n	800ddc8 <_dtoa_r+0xa20>
 800dda6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ddaa:	d029      	beq.n	800de00 <_dtoa_r+0xa58>
 800ddac:	9b08      	ldr	r3, [sp, #32]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	dd02      	ble.n	800ddb8 <_dtoa_r+0xa10>
 800ddb2:	9b02      	ldr	r3, [sp, #8]
 800ddb4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ddb8:	9b00      	ldr	r3, [sp, #0]
 800ddba:	f883 8000 	strb.w	r8, [r3]
 800ddbe:	e63f      	b.n	800da40 <_dtoa_r+0x698>
 800ddc0:	4628      	mov	r0, r5
 800ddc2:	e7bb      	b.n	800dd3c <_dtoa_r+0x994>
 800ddc4:	2201      	movs	r2, #1
 800ddc6:	e7e1      	b.n	800dd8c <_dtoa_r+0x9e4>
 800ddc8:	9b08      	ldr	r3, [sp, #32]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	db04      	blt.n	800ddd8 <_dtoa_r+0xa30>
 800ddce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ddd0:	430b      	orrs	r3, r1
 800ddd2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ddd4:	430b      	orrs	r3, r1
 800ddd6:	d120      	bne.n	800de1a <_dtoa_r+0xa72>
 800ddd8:	2a00      	cmp	r2, #0
 800ddda:	dded      	ble.n	800ddb8 <_dtoa_r+0xa10>
 800dddc:	4649      	mov	r1, r9
 800ddde:	2201      	movs	r2, #1
 800dde0:	4658      	mov	r0, fp
 800dde2:	f000 fbff 	bl	800e5e4 <__lshift>
 800dde6:	4621      	mov	r1, r4
 800dde8:	4681      	mov	r9, r0
 800ddea:	f000 fc67 	bl	800e6bc <__mcmp>
 800ddee:	2800      	cmp	r0, #0
 800ddf0:	dc03      	bgt.n	800ddfa <_dtoa_r+0xa52>
 800ddf2:	d1e1      	bne.n	800ddb8 <_dtoa_r+0xa10>
 800ddf4:	f018 0f01 	tst.w	r8, #1
 800ddf8:	d0de      	beq.n	800ddb8 <_dtoa_r+0xa10>
 800ddfa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ddfe:	d1d8      	bne.n	800ddb2 <_dtoa_r+0xa0a>
 800de00:	2339      	movs	r3, #57	@ 0x39
 800de02:	9a00      	ldr	r2, [sp, #0]
 800de04:	7013      	strb	r3, [r2, #0]
 800de06:	4633      	mov	r3, r6
 800de08:	461e      	mov	r6, r3
 800de0a:	3b01      	subs	r3, #1
 800de0c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800de10:	2a39      	cmp	r2, #57	@ 0x39
 800de12:	d052      	beq.n	800deba <_dtoa_r+0xb12>
 800de14:	3201      	adds	r2, #1
 800de16:	701a      	strb	r2, [r3, #0]
 800de18:	e612      	b.n	800da40 <_dtoa_r+0x698>
 800de1a:	2a00      	cmp	r2, #0
 800de1c:	dd07      	ble.n	800de2e <_dtoa_r+0xa86>
 800de1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800de22:	d0ed      	beq.n	800de00 <_dtoa_r+0xa58>
 800de24:	f108 0301 	add.w	r3, r8, #1
 800de28:	9a00      	ldr	r2, [sp, #0]
 800de2a:	7013      	strb	r3, [r2, #0]
 800de2c:	e608      	b.n	800da40 <_dtoa_r+0x698>
 800de2e:	9b07      	ldr	r3, [sp, #28]
 800de30:	9a07      	ldr	r2, [sp, #28]
 800de32:	f803 8c01 	strb.w	r8, [r3, #-1]
 800de36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de38:	4293      	cmp	r3, r2
 800de3a:	d028      	beq.n	800de8e <_dtoa_r+0xae6>
 800de3c:	4649      	mov	r1, r9
 800de3e:	2300      	movs	r3, #0
 800de40:	220a      	movs	r2, #10
 800de42:	4658      	mov	r0, fp
 800de44:	f000 f9d6 	bl	800e1f4 <__multadd>
 800de48:	42af      	cmp	r7, r5
 800de4a:	4681      	mov	r9, r0
 800de4c:	f04f 0300 	mov.w	r3, #0
 800de50:	f04f 020a 	mov.w	r2, #10
 800de54:	4639      	mov	r1, r7
 800de56:	4658      	mov	r0, fp
 800de58:	d107      	bne.n	800de6a <_dtoa_r+0xac2>
 800de5a:	f000 f9cb 	bl	800e1f4 <__multadd>
 800de5e:	4607      	mov	r7, r0
 800de60:	4605      	mov	r5, r0
 800de62:	9b07      	ldr	r3, [sp, #28]
 800de64:	3301      	adds	r3, #1
 800de66:	9307      	str	r3, [sp, #28]
 800de68:	e774      	b.n	800dd54 <_dtoa_r+0x9ac>
 800de6a:	f000 f9c3 	bl	800e1f4 <__multadd>
 800de6e:	4629      	mov	r1, r5
 800de70:	4607      	mov	r7, r0
 800de72:	2300      	movs	r3, #0
 800de74:	220a      	movs	r2, #10
 800de76:	4658      	mov	r0, fp
 800de78:	f000 f9bc 	bl	800e1f4 <__multadd>
 800de7c:	4605      	mov	r5, r0
 800de7e:	e7f0      	b.n	800de62 <_dtoa_r+0xaba>
 800de80:	9b00      	ldr	r3, [sp, #0]
 800de82:	2700      	movs	r7, #0
 800de84:	2b00      	cmp	r3, #0
 800de86:	bfcc      	ite	gt
 800de88:	461e      	movgt	r6, r3
 800de8a:	2601      	movle	r6, #1
 800de8c:	4456      	add	r6, sl
 800de8e:	4649      	mov	r1, r9
 800de90:	2201      	movs	r2, #1
 800de92:	4658      	mov	r0, fp
 800de94:	f000 fba6 	bl	800e5e4 <__lshift>
 800de98:	4621      	mov	r1, r4
 800de9a:	4681      	mov	r9, r0
 800de9c:	f000 fc0e 	bl	800e6bc <__mcmp>
 800dea0:	2800      	cmp	r0, #0
 800dea2:	dcb0      	bgt.n	800de06 <_dtoa_r+0xa5e>
 800dea4:	d102      	bne.n	800deac <_dtoa_r+0xb04>
 800dea6:	f018 0f01 	tst.w	r8, #1
 800deaa:	d1ac      	bne.n	800de06 <_dtoa_r+0xa5e>
 800deac:	4633      	mov	r3, r6
 800deae:	461e      	mov	r6, r3
 800deb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800deb4:	2a30      	cmp	r2, #48	@ 0x30
 800deb6:	d0fa      	beq.n	800deae <_dtoa_r+0xb06>
 800deb8:	e5c2      	b.n	800da40 <_dtoa_r+0x698>
 800deba:	459a      	cmp	sl, r3
 800debc:	d1a4      	bne.n	800de08 <_dtoa_r+0xa60>
 800debe:	9b04      	ldr	r3, [sp, #16]
 800dec0:	3301      	adds	r3, #1
 800dec2:	9304      	str	r3, [sp, #16]
 800dec4:	2331      	movs	r3, #49	@ 0x31
 800dec6:	f88a 3000 	strb.w	r3, [sl]
 800deca:	e5b9      	b.n	800da40 <_dtoa_r+0x698>
 800decc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dece:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800df2c <_dtoa_r+0xb84>
 800ded2:	b11b      	cbz	r3, 800dedc <_dtoa_r+0xb34>
 800ded4:	f10a 0308 	add.w	r3, sl, #8
 800ded8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800deda:	6013      	str	r3, [r2, #0]
 800dedc:	4650      	mov	r0, sl
 800dede:	b019      	add	sp, #100	@ 0x64
 800dee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dee6:	2b01      	cmp	r3, #1
 800dee8:	f77f ae37 	ble.w	800db5a <_dtoa_r+0x7b2>
 800deec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800deee:	930a      	str	r3, [sp, #40]	@ 0x28
 800def0:	2001      	movs	r0, #1
 800def2:	e655      	b.n	800dba0 <_dtoa_r+0x7f8>
 800def4:	9b00      	ldr	r3, [sp, #0]
 800def6:	2b00      	cmp	r3, #0
 800def8:	f77f aed6 	ble.w	800dca8 <_dtoa_r+0x900>
 800defc:	4656      	mov	r6, sl
 800defe:	4621      	mov	r1, r4
 800df00:	4648      	mov	r0, r9
 800df02:	f7ff f9c3 	bl	800d28c <quorem>
 800df06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800df0a:	9b00      	ldr	r3, [sp, #0]
 800df0c:	f806 8b01 	strb.w	r8, [r6], #1
 800df10:	eba6 020a 	sub.w	r2, r6, sl
 800df14:	4293      	cmp	r3, r2
 800df16:	ddb3      	ble.n	800de80 <_dtoa_r+0xad8>
 800df18:	4649      	mov	r1, r9
 800df1a:	2300      	movs	r3, #0
 800df1c:	220a      	movs	r2, #10
 800df1e:	4658      	mov	r0, fp
 800df20:	f000 f968 	bl	800e1f4 <__multadd>
 800df24:	4681      	mov	r9, r0
 800df26:	e7ea      	b.n	800defe <_dtoa_r+0xb56>
 800df28:	08010cf6 	.word	0x08010cf6
 800df2c:	08010c7a 	.word	0x08010c7a

0800df30 <_free_r>:
 800df30:	b538      	push	{r3, r4, r5, lr}
 800df32:	4605      	mov	r5, r0
 800df34:	2900      	cmp	r1, #0
 800df36:	d041      	beq.n	800dfbc <_free_r+0x8c>
 800df38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df3c:	1f0c      	subs	r4, r1, #4
 800df3e:	2b00      	cmp	r3, #0
 800df40:	bfb8      	it	lt
 800df42:	18e4      	addlt	r4, r4, r3
 800df44:	f000 f8e8 	bl	800e118 <__malloc_lock>
 800df48:	4a1d      	ldr	r2, [pc, #116]	@ (800dfc0 <_free_r+0x90>)
 800df4a:	6813      	ldr	r3, [r2, #0]
 800df4c:	b933      	cbnz	r3, 800df5c <_free_r+0x2c>
 800df4e:	6063      	str	r3, [r4, #4]
 800df50:	6014      	str	r4, [r2, #0]
 800df52:	4628      	mov	r0, r5
 800df54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df58:	f000 b8e4 	b.w	800e124 <__malloc_unlock>
 800df5c:	42a3      	cmp	r3, r4
 800df5e:	d908      	bls.n	800df72 <_free_r+0x42>
 800df60:	6820      	ldr	r0, [r4, #0]
 800df62:	1821      	adds	r1, r4, r0
 800df64:	428b      	cmp	r3, r1
 800df66:	bf01      	itttt	eq
 800df68:	6819      	ldreq	r1, [r3, #0]
 800df6a:	685b      	ldreq	r3, [r3, #4]
 800df6c:	1809      	addeq	r1, r1, r0
 800df6e:	6021      	streq	r1, [r4, #0]
 800df70:	e7ed      	b.n	800df4e <_free_r+0x1e>
 800df72:	461a      	mov	r2, r3
 800df74:	685b      	ldr	r3, [r3, #4]
 800df76:	b10b      	cbz	r3, 800df7c <_free_r+0x4c>
 800df78:	42a3      	cmp	r3, r4
 800df7a:	d9fa      	bls.n	800df72 <_free_r+0x42>
 800df7c:	6811      	ldr	r1, [r2, #0]
 800df7e:	1850      	adds	r0, r2, r1
 800df80:	42a0      	cmp	r0, r4
 800df82:	d10b      	bne.n	800df9c <_free_r+0x6c>
 800df84:	6820      	ldr	r0, [r4, #0]
 800df86:	4401      	add	r1, r0
 800df88:	1850      	adds	r0, r2, r1
 800df8a:	6011      	str	r1, [r2, #0]
 800df8c:	4283      	cmp	r3, r0
 800df8e:	d1e0      	bne.n	800df52 <_free_r+0x22>
 800df90:	6818      	ldr	r0, [r3, #0]
 800df92:	685b      	ldr	r3, [r3, #4]
 800df94:	4408      	add	r0, r1
 800df96:	6053      	str	r3, [r2, #4]
 800df98:	6010      	str	r0, [r2, #0]
 800df9a:	e7da      	b.n	800df52 <_free_r+0x22>
 800df9c:	d902      	bls.n	800dfa4 <_free_r+0x74>
 800df9e:	230c      	movs	r3, #12
 800dfa0:	602b      	str	r3, [r5, #0]
 800dfa2:	e7d6      	b.n	800df52 <_free_r+0x22>
 800dfa4:	6820      	ldr	r0, [r4, #0]
 800dfa6:	1821      	adds	r1, r4, r0
 800dfa8:	428b      	cmp	r3, r1
 800dfaa:	bf02      	ittt	eq
 800dfac:	6819      	ldreq	r1, [r3, #0]
 800dfae:	685b      	ldreq	r3, [r3, #4]
 800dfb0:	1809      	addeq	r1, r1, r0
 800dfb2:	6063      	str	r3, [r4, #4]
 800dfb4:	bf08      	it	eq
 800dfb6:	6021      	streq	r1, [r4, #0]
 800dfb8:	6054      	str	r4, [r2, #4]
 800dfba:	e7ca      	b.n	800df52 <_free_r+0x22>
 800dfbc:	bd38      	pop	{r3, r4, r5, pc}
 800dfbe:	bf00      	nop
 800dfc0:	200007fc 	.word	0x200007fc

0800dfc4 <malloc>:
 800dfc4:	4b02      	ldr	r3, [pc, #8]	@ (800dfd0 <malloc+0xc>)
 800dfc6:	4601      	mov	r1, r0
 800dfc8:	6818      	ldr	r0, [r3, #0]
 800dfca:	f000 b825 	b.w	800e018 <_malloc_r>
 800dfce:	bf00      	nop
 800dfd0:	20000020 	.word	0x20000020

0800dfd4 <sbrk_aligned>:
 800dfd4:	b570      	push	{r4, r5, r6, lr}
 800dfd6:	4e0f      	ldr	r6, [pc, #60]	@ (800e014 <sbrk_aligned+0x40>)
 800dfd8:	460c      	mov	r4, r1
 800dfda:	4605      	mov	r5, r0
 800dfdc:	6831      	ldr	r1, [r6, #0]
 800dfde:	b911      	cbnz	r1, 800dfe6 <sbrk_aligned+0x12>
 800dfe0:	f001 ff62 	bl	800fea8 <_sbrk_r>
 800dfe4:	6030      	str	r0, [r6, #0]
 800dfe6:	4621      	mov	r1, r4
 800dfe8:	4628      	mov	r0, r5
 800dfea:	f001 ff5d 	bl	800fea8 <_sbrk_r>
 800dfee:	1c43      	adds	r3, r0, #1
 800dff0:	d103      	bne.n	800dffa <sbrk_aligned+0x26>
 800dff2:	f04f 34ff 	mov.w	r4, #4294967295
 800dff6:	4620      	mov	r0, r4
 800dff8:	bd70      	pop	{r4, r5, r6, pc}
 800dffa:	1cc4      	adds	r4, r0, #3
 800dffc:	f024 0403 	bic.w	r4, r4, #3
 800e000:	42a0      	cmp	r0, r4
 800e002:	d0f8      	beq.n	800dff6 <sbrk_aligned+0x22>
 800e004:	1a21      	subs	r1, r4, r0
 800e006:	4628      	mov	r0, r5
 800e008:	f001 ff4e 	bl	800fea8 <_sbrk_r>
 800e00c:	3001      	adds	r0, #1
 800e00e:	d1f2      	bne.n	800dff6 <sbrk_aligned+0x22>
 800e010:	e7ef      	b.n	800dff2 <sbrk_aligned+0x1e>
 800e012:	bf00      	nop
 800e014:	200007f8 	.word	0x200007f8

0800e018 <_malloc_r>:
 800e018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e01c:	1ccd      	adds	r5, r1, #3
 800e01e:	4606      	mov	r6, r0
 800e020:	f025 0503 	bic.w	r5, r5, #3
 800e024:	3508      	adds	r5, #8
 800e026:	2d0c      	cmp	r5, #12
 800e028:	bf38      	it	cc
 800e02a:	250c      	movcc	r5, #12
 800e02c:	2d00      	cmp	r5, #0
 800e02e:	db01      	blt.n	800e034 <_malloc_r+0x1c>
 800e030:	42a9      	cmp	r1, r5
 800e032:	d904      	bls.n	800e03e <_malloc_r+0x26>
 800e034:	230c      	movs	r3, #12
 800e036:	6033      	str	r3, [r6, #0]
 800e038:	2000      	movs	r0, #0
 800e03a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e03e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e114 <_malloc_r+0xfc>
 800e042:	f000 f869 	bl	800e118 <__malloc_lock>
 800e046:	f8d8 3000 	ldr.w	r3, [r8]
 800e04a:	461c      	mov	r4, r3
 800e04c:	bb44      	cbnz	r4, 800e0a0 <_malloc_r+0x88>
 800e04e:	4629      	mov	r1, r5
 800e050:	4630      	mov	r0, r6
 800e052:	f7ff ffbf 	bl	800dfd4 <sbrk_aligned>
 800e056:	1c43      	adds	r3, r0, #1
 800e058:	4604      	mov	r4, r0
 800e05a:	d158      	bne.n	800e10e <_malloc_r+0xf6>
 800e05c:	f8d8 4000 	ldr.w	r4, [r8]
 800e060:	4627      	mov	r7, r4
 800e062:	2f00      	cmp	r7, #0
 800e064:	d143      	bne.n	800e0ee <_malloc_r+0xd6>
 800e066:	2c00      	cmp	r4, #0
 800e068:	d04b      	beq.n	800e102 <_malloc_r+0xea>
 800e06a:	6823      	ldr	r3, [r4, #0]
 800e06c:	4639      	mov	r1, r7
 800e06e:	4630      	mov	r0, r6
 800e070:	eb04 0903 	add.w	r9, r4, r3
 800e074:	f001 ff18 	bl	800fea8 <_sbrk_r>
 800e078:	4581      	cmp	r9, r0
 800e07a:	d142      	bne.n	800e102 <_malloc_r+0xea>
 800e07c:	6821      	ldr	r1, [r4, #0]
 800e07e:	4630      	mov	r0, r6
 800e080:	1a6d      	subs	r5, r5, r1
 800e082:	4629      	mov	r1, r5
 800e084:	f7ff ffa6 	bl	800dfd4 <sbrk_aligned>
 800e088:	3001      	adds	r0, #1
 800e08a:	d03a      	beq.n	800e102 <_malloc_r+0xea>
 800e08c:	6823      	ldr	r3, [r4, #0]
 800e08e:	442b      	add	r3, r5
 800e090:	6023      	str	r3, [r4, #0]
 800e092:	f8d8 3000 	ldr.w	r3, [r8]
 800e096:	685a      	ldr	r2, [r3, #4]
 800e098:	bb62      	cbnz	r2, 800e0f4 <_malloc_r+0xdc>
 800e09a:	f8c8 7000 	str.w	r7, [r8]
 800e09e:	e00f      	b.n	800e0c0 <_malloc_r+0xa8>
 800e0a0:	6822      	ldr	r2, [r4, #0]
 800e0a2:	1b52      	subs	r2, r2, r5
 800e0a4:	d420      	bmi.n	800e0e8 <_malloc_r+0xd0>
 800e0a6:	2a0b      	cmp	r2, #11
 800e0a8:	d917      	bls.n	800e0da <_malloc_r+0xc2>
 800e0aa:	1961      	adds	r1, r4, r5
 800e0ac:	42a3      	cmp	r3, r4
 800e0ae:	6025      	str	r5, [r4, #0]
 800e0b0:	bf18      	it	ne
 800e0b2:	6059      	strne	r1, [r3, #4]
 800e0b4:	6863      	ldr	r3, [r4, #4]
 800e0b6:	bf08      	it	eq
 800e0b8:	f8c8 1000 	streq.w	r1, [r8]
 800e0bc:	5162      	str	r2, [r4, r5]
 800e0be:	604b      	str	r3, [r1, #4]
 800e0c0:	4630      	mov	r0, r6
 800e0c2:	f000 f82f 	bl	800e124 <__malloc_unlock>
 800e0c6:	f104 000b 	add.w	r0, r4, #11
 800e0ca:	1d23      	adds	r3, r4, #4
 800e0cc:	f020 0007 	bic.w	r0, r0, #7
 800e0d0:	1ac2      	subs	r2, r0, r3
 800e0d2:	bf1c      	itt	ne
 800e0d4:	1a1b      	subne	r3, r3, r0
 800e0d6:	50a3      	strne	r3, [r4, r2]
 800e0d8:	e7af      	b.n	800e03a <_malloc_r+0x22>
 800e0da:	6862      	ldr	r2, [r4, #4]
 800e0dc:	42a3      	cmp	r3, r4
 800e0de:	bf0c      	ite	eq
 800e0e0:	f8c8 2000 	streq.w	r2, [r8]
 800e0e4:	605a      	strne	r2, [r3, #4]
 800e0e6:	e7eb      	b.n	800e0c0 <_malloc_r+0xa8>
 800e0e8:	4623      	mov	r3, r4
 800e0ea:	6864      	ldr	r4, [r4, #4]
 800e0ec:	e7ae      	b.n	800e04c <_malloc_r+0x34>
 800e0ee:	463c      	mov	r4, r7
 800e0f0:	687f      	ldr	r7, [r7, #4]
 800e0f2:	e7b6      	b.n	800e062 <_malloc_r+0x4a>
 800e0f4:	461a      	mov	r2, r3
 800e0f6:	685b      	ldr	r3, [r3, #4]
 800e0f8:	42a3      	cmp	r3, r4
 800e0fa:	d1fb      	bne.n	800e0f4 <_malloc_r+0xdc>
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	6053      	str	r3, [r2, #4]
 800e100:	e7de      	b.n	800e0c0 <_malloc_r+0xa8>
 800e102:	230c      	movs	r3, #12
 800e104:	4630      	mov	r0, r6
 800e106:	6033      	str	r3, [r6, #0]
 800e108:	f000 f80c 	bl	800e124 <__malloc_unlock>
 800e10c:	e794      	b.n	800e038 <_malloc_r+0x20>
 800e10e:	6005      	str	r5, [r0, #0]
 800e110:	e7d6      	b.n	800e0c0 <_malloc_r+0xa8>
 800e112:	bf00      	nop
 800e114:	200007fc 	.word	0x200007fc

0800e118 <__malloc_lock>:
 800e118:	4801      	ldr	r0, [pc, #4]	@ (800e120 <__malloc_lock+0x8>)
 800e11a:	f7ff b894 	b.w	800d246 <__retarget_lock_acquire_recursive>
 800e11e:	bf00      	nop
 800e120:	200007f4 	.word	0x200007f4

0800e124 <__malloc_unlock>:
 800e124:	4801      	ldr	r0, [pc, #4]	@ (800e12c <__malloc_unlock+0x8>)
 800e126:	f7ff b88f 	b.w	800d248 <__retarget_lock_release_recursive>
 800e12a:	bf00      	nop
 800e12c:	200007f4 	.word	0x200007f4

0800e130 <_Balloc>:
 800e130:	b570      	push	{r4, r5, r6, lr}
 800e132:	69c6      	ldr	r6, [r0, #28]
 800e134:	4604      	mov	r4, r0
 800e136:	460d      	mov	r5, r1
 800e138:	b976      	cbnz	r6, 800e158 <_Balloc+0x28>
 800e13a:	2010      	movs	r0, #16
 800e13c:	f7ff ff42 	bl	800dfc4 <malloc>
 800e140:	4602      	mov	r2, r0
 800e142:	61e0      	str	r0, [r4, #28]
 800e144:	b920      	cbnz	r0, 800e150 <_Balloc+0x20>
 800e146:	4b18      	ldr	r3, [pc, #96]	@ (800e1a8 <_Balloc+0x78>)
 800e148:	216b      	movs	r1, #107	@ 0x6b
 800e14a:	4818      	ldr	r0, [pc, #96]	@ (800e1ac <_Balloc+0x7c>)
 800e14c:	f001 fec4 	bl	800fed8 <__assert_func>
 800e150:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e154:	6006      	str	r6, [r0, #0]
 800e156:	60c6      	str	r6, [r0, #12]
 800e158:	69e6      	ldr	r6, [r4, #28]
 800e15a:	68f3      	ldr	r3, [r6, #12]
 800e15c:	b183      	cbz	r3, 800e180 <_Balloc+0x50>
 800e15e:	69e3      	ldr	r3, [r4, #28]
 800e160:	68db      	ldr	r3, [r3, #12]
 800e162:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e166:	b9b8      	cbnz	r0, 800e198 <_Balloc+0x68>
 800e168:	2101      	movs	r1, #1
 800e16a:	4620      	mov	r0, r4
 800e16c:	fa01 f605 	lsl.w	r6, r1, r5
 800e170:	1d72      	adds	r2, r6, #5
 800e172:	0092      	lsls	r2, r2, #2
 800e174:	f001 fece 	bl	800ff14 <_calloc_r>
 800e178:	b160      	cbz	r0, 800e194 <_Balloc+0x64>
 800e17a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e17e:	e00e      	b.n	800e19e <_Balloc+0x6e>
 800e180:	2221      	movs	r2, #33	@ 0x21
 800e182:	2104      	movs	r1, #4
 800e184:	4620      	mov	r0, r4
 800e186:	f001 fec5 	bl	800ff14 <_calloc_r>
 800e18a:	69e3      	ldr	r3, [r4, #28]
 800e18c:	60f0      	str	r0, [r6, #12]
 800e18e:	68db      	ldr	r3, [r3, #12]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d1e4      	bne.n	800e15e <_Balloc+0x2e>
 800e194:	2000      	movs	r0, #0
 800e196:	bd70      	pop	{r4, r5, r6, pc}
 800e198:	6802      	ldr	r2, [r0, #0]
 800e19a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e19e:	2300      	movs	r3, #0
 800e1a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e1a4:	e7f7      	b.n	800e196 <_Balloc+0x66>
 800e1a6:	bf00      	nop
 800e1a8:	08010c87 	.word	0x08010c87
 800e1ac:	08010d07 	.word	0x08010d07

0800e1b0 <_Bfree>:
 800e1b0:	b570      	push	{r4, r5, r6, lr}
 800e1b2:	69c6      	ldr	r6, [r0, #28]
 800e1b4:	4605      	mov	r5, r0
 800e1b6:	460c      	mov	r4, r1
 800e1b8:	b976      	cbnz	r6, 800e1d8 <_Bfree+0x28>
 800e1ba:	2010      	movs	r0, #16
 800e1bc:	f7ff ff02 	bl	800dfc4 <malloc>
 800e1c0:	4602      	mov	r2, r0
 800e1c2:	61e8      	str	r0, [r5, #28]
 800e1c4:	b920      	cbnz	r0, 800e1d0 <_Bfree+0x20>
 800e1c6:	4b09      	ldr	r3, [pc, #36]	@ (800e1ec <_Bfree+0x3c>)
 800e1c8:	218f      	movs	r1, #143	@ 0x8f
 800e1ca:	4809      	ldr	r0, [pc, #36]	@ (800e1f0 <_Bfree+0x40>)
 800e1cc:	f001 fe84 	bl	800fed8 <__assert_func>
 800e1d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e1d4:	6006      	str	r6, [r0, #0]
 800e1d6:	60c6      	str	r6, [r0, #12]
 800e1d8:	b13c      	cbz	r4, 800e1ea <_Bfree+0x3a>
 800e1da:	69eb      	ldr	r3, [r5, #28]
 800e1dc:	6862      	ldr	r2, [r4, #4]
 800e1de:	68db      	ldr	r3, [r3, #12]
 800e1e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e1e4:	6021      	str	r1, [r4, #0]
 800e1e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e1ea:	bd70      	pop	{r4, r5, r6, pc}
 800e1ec:	08010c87 	.word	0x08010c87
 800e1f0:	08010d07 	.word	0x08010d07

0800e1f4 <__multadd>:
 800e1f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1f8:	f101 0c14 	add.w	ip, r1, #20
 800e1fc:	4607      	mov	r7, r0
 800e1fe:	460c      	mov	r4, r1
 800e200:	461e      	mov	r6, r3
 800e202:	690d      	ldr	r5, [r1, #16]
 800e204:	2000      	movs	r0, #0
 800e206:	f8dc 3000 	ldr.w	r3, [ip]
 800e20a:	3001      	adds	r0, #1
 800e20c:	b299      	uxth	r1, r3
 800e20e:	4285      	cmp	r5, r0
 800e210:	fb02 6101 	mla	r1, r2, r1, r6
 800e214:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e218:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800e21c:	b289      	uxth	r1, r1
 800e21e:	fb02 3306 	mla	r3, r2, r6, r3
 800e222:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e226:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e22a:	f84c 1b04 	str.w	r1, [ip], #4
 800e22e:	dcea      	bgt.n	800e206 <__multadd+0x12>
 800e230:	b30e      	cbz	r6, 800e276 <__multadd+0x82>
 800e232:	68a3      	ldr	r3, [r4, #8]
 800e234:	42ab      	cmp	r3, r5
 800e236:	dc19      	bgt.n	800e26c <__multadd+0x78>
 800e238:	6861      	ldr	r1, [r4, #4]
 800e23a:	4638      	mov	r0, r7
 800e23c:	3101      	adds	r1, #1
 800e23e:	f7ff ff77 	bl	800e130 <_Balloc>
 800e242:	4680      	mov	r8, r0
 800e244:	b928      	cbnz	r0, 800e252 <__multadd+0x5e>
 800e246:	4602      	mov	r2, r0
 800e248:	4b0c      	ldr	r3, [pc, #48]	@ (800e27c <__multadd+0x88>)
 800e24a:	21ba      	movs	r1, #186	@ 0xba
 800e24c:	480c      	ldr	r0, [pc, #48]	@ (800e280 <__multadd+0x8c>)
 800e24e:	f001 fe43 	bl	800fed8 <__assert_func>
 800e252:	6922      	ldr	r2, [r4, #16]
 800e254:	f104 010c 	add.w	r1, r4, #12
 800e258:	300c      	adds	r0, #12
 800e25a:	3202      	adds	r2, #2
 800e25c:	0092      	lsls	r2, r2, #2
 800e25e:	f7ff f802 	bl	800d266 <memcpy>
 800e262:	4621      	mov	r1, r4
 800e264:	4644      	mov	r4, r8
 800e266:	4638      	mov	r0, r7
 800e268:	f7ff ffa2 	bl	800e1b0 <_Bfree>
 800e26c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e270:	3501      	adds	r5, #1
 800e272:	615e      	str	r6, [r3, #20]
 800e274:	6125      	str	r5, [r4, #16]
 800e276:	4620      	mov	r0, r4
 800e278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e27c:	08010cf6 	.word	0x08010cf6
 800e280:	08010d07 	.word	0x08010d07

0800e284 <__s2b>:
 800e284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e288:	4615      	mov	r5, r2
 800e28a:	461f      	mov	r7, r3
 800e28c:	2209      	movs	r2, #9
 800e28e:	3308      	adds	r3, #8
 800e290:	460c      	mov	r4, r1
 800e292:	4606      	mov	r6, r0
 800e294:	2100      	movs	r1, #0
 800e296:	fb93 f3f2 	sdiv	r3, r3, r2
 800e29a:	2201      	movs	r2, #1
 800e29c:	429a      	cmp	r2, r3
 800e29e:	db09      	blt.n	800e2b4 <__s2b+0x30>
 800e2a0:	4630      	mov	r0, r6
 800e2a2:	f7ff ff45 	bl	800e130 <_Balloc>
 800e2a6:	b940      	cbnz	r0, 800e2ba <__s2b+0x36>
 800e2a8:	4602      	mov	r2, r0
 800e2aa:	4b19      	ldr	r3, [pc, #100]	@ (800e310 <__s2b+0x8c>)
 800e2ac:	21d3      	movs	r1, #211	@ 0xd3
 800e2ae:	4819      	ldr	r0, [pc, #100]	@ (800e314 <__s2b+0x90>)
 800e2b0:	f001 fe12 	bl	800fed8 <__assert_func>
 800e2b4:	0052      	lsls	r2, r2, #1
 800e2b6:	3101      	adds	r1, #1
 800e2b8:	e7f0      	b.n	800e29c <__s2b+0x18>
 800e2ba:	9b08      	ldr	r3, [sp, #32]
 800e2bc:	2d09      	cmp	r5, #9
 800e2be:	6143      	str	r3, [r0, #20]
 800e2c0:	f04f 0301 	mov.w	r3, #1
 800e2c4:	6103      	str	r3, [r0, #16]
 800e2c6:	dd16      	ble.n	800e2f6 <__s2b+0x72>
 800e2c8:	f104 0909 	add.w	r9, r4, #9
 800e2cc:	442c      	add	r4, r5
 800e2ce:	46c8      	mov	r8, r9
 800e2d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e2d4:	4601      	mov	r1, r0
 800e2d6:	220a      	movs	r2, #10
 800e2d8:	4630      	mov	r0, r6
 800e2da:	3b30      	subs	r3, #48	@ 0x30
 800e2dc:	f7ff ff8a 	bl	800e1f4 <__multadd>
 800e2e0:	45a0      	cmp	r8, r4
 800e2e2:	d1f5      	bne.n	800e2d0 <__s2b+0x4c>
 800e2e4:	f1a5 0408 	sub.w	r4, r5, #8
 800e2e8:	444c      	add	r4, r9
 800e2ea:	1b2d      	subs	r5, r5, r4
 800e2ec:	1963      	adds	r3, r4, r5
 800e2ee:	42bb      	cmp	r3, r7
 800e2f0:	db04      	blt.n	800e2fc <__s2b+0x78>
 800e2f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2f6:	340a      	adds	r4, #10
 800e2f8:	2509      	movs	r5, #9
 800e2fa:	e7f6      	b.n	800e2ea <__s2b+0x66>
 800e2fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e300:	4601      	mov	r1, r0
 800e302:	220a      	movs	r2, #10
 800e304:	4630      	mov	r0, r6
 800e306:	3b30      	subs	r3, #48	@ 0x30
 800e308:	f7ff ff74 	bl	800e1f4 <__multadd>
 800e30c:	e7ee      	b.n	800e2ec <__s2b+0x68>
 800e30e:	bf00      	nop
 800e310:	08010cf6 	.word	0x08010cf6
 800e314:	08010d07 	.word	0x08010d07

0800e318 <__hi0bits>:
 800e318:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e31c:	4603      	mov	r3, r0
 800e31e:	bf36      	itet	cc
 800e320:	0403      	lslcc	r3, r0, #16
 800e322:	2000      	movcs	r0, #0
 800e324:	2010      	movcc	r0, #16
 800e326:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e32a:	bf3c      	itt	cc
 800e32c:	021b      	lslcc	r3, r3, #8
 800e32e:	3008      	addcc	r0, #8
 800e330:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e334:	bf3c      	itt	cc
 800e336:	011b      	lslcc	r3, r3, #4
 800e338:	3004      	addcc	r0, #4
 800e33a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e33e:	bf3c      	itt	cc
 800e340:	009b      	lslcc	r3, r3, #2
 800e342:	3002      	addcc	r0, #2
 800e344:	2b00      	cmp	r3, #0
 800e346:	db05      	blt.n	800e354 <__hi0bits+0x3c>
 800e348:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e34c:	f100 0001 	add.w	r0, r0, #1
 800e350:	bf08      	it	eq
 800e352:	2020      	moveq	r0, #32
 800e354:	4770      	bx	lr

0800e356 <__lo0bits>:
 800e356:	6803      	ldr	r3, [r0, #0]
 800e358:	4602      	mov	r2, r0
 800e35a:	f013 0007 	ands.w	r0, r3, #7
 800e35e:	d00b      	beq.n	800e378 <__lo0bits+0x22>
 800e360:	07d9      	lsls	r1, r3, #31
 800e362:	d421      	bmi.n	800e3a8 <__lo0bits+0x52>
 800e364:	0798      	lsls	r0, r3, #30
 800e366:	bf47      	ittee	mi
 800e368:	085b      	lsrmi	r3, r3, #1
 800e36a:	2001      	movmi	r0, #1
 800e36c:	089b      	lsrpl	r3, r3, #2
 800e36e:	2002      	movpl	r0, #2
 800e370:	bf4c      	ite	mi
 800e372:	6013      	strmi	r3, [r2, #0]
 800e374:	6013      	strpl	r3, [r2, #0]
 800e376:	4770      	bx	lr
 800e378:	b299      	uxth	r1, r3
 800e37a:	b909      	cbnz	r1, 800e380 <__lo0bits+0x2a>
 800e37c:	0c1b      	lsrs	r3, r3, #16
 800e37e:	2010      	movs	r0, #16
 800e380:	b2d9      	uxtb	r1, r3
 800e382:	b909      	cbnz	r1, 800e388 <__lo0bits+0x32>
 800e384:	3008      	adds	r0, #8
 800e386:	0a1b      	lsrs	r3, r3, #8
 800e388:	0719      	lsls	r1, r3, #28
 800e38a:	bf04      	itt	eq
 800e38c:	091b      	lsreq	r3, r3, #4
 800e38e:	3004      	addeq	r0, #4
 800e390:	0799      	lsls	r1, r3, #30
 800e392:	bf04      	itt	eq
 800e394:	089b      	lsreq	r3, r3, #2
 800e396:	3002      	addeq	r0, #2
 800e398:	07d9      	lsls	r1, r3, #31
 800e39a:	d403      	bmi.n	800e3a4 <__lo0bits+0x4e>
 800e39c:	085b      	lsrs	r3, r3, #1
 800e39e:	f100 0001 	add.w	r0, r0, #1
 800e3a2:	d003      	beq.n	800e3ac <__lo0bits+0x56>
 800e3a4:	6013      	str	r3, [r2, #0]
 800e3a6:	4770      	bx	lr
 800e3a8:	2000      	movs	r0, #0
 800e3aa:	4770      	bx	lr
 800e3ac:	2020      	movs	r0, #32
 800e3ae:	4770      	bx	lr

0800e3b0 <__i2b>:
 800e3b0:	b510      	push	{r4, lr}
 800e3b2:	460c      	mov	r4, r1
 800e3b4:	2101      	movs	r1, #1
 800e3b6:	f7ff febb 	bl	800e130 <_Balloc>
 800e3ba:	4602      	mov	r2, r0
 800e3bc:	b928      	cbnz	r0, 800e3ca <__i2b+0x1a>
 800e3be:	4b05      	ldr	r3, [pc, #20]	@ (800e3d4 <__i2b+0x24>)
 800e3c0:	f240 1145 	movw	r1, #325	@ 0x145
 800e3c4:	4804      	ldr	r0, [pc, #16]	@ (800e3d8 <__i2b+0x28>)
 800e3c6:	f001 fd87 	bl	800fed8 <__assert_func>
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	6144      	str	r4, [r0, #20]
 800e3ce:	6103      	str	r3, [r0, #16]
 800e3d0:	bd10      	pop	{r4, pc}
 800e3d2:	bf00      	nop
 800e3d4:	08010cf6 	.word	0x08010cf6
 800e3d8:	08010d07 	.word	0x08010d07

0800e3dc <__multiply>:
 800e3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3e0:	4614      	mov	r4, r2
 800e3e2:	690a      	ldr	r2, [r1, #16]
 800e3e4:	460f      	mov	r7, r1
 800e3e6:	b085      	sub	sp, #20
 800e3e8:	6923      	ldr	r3, [r4, #16]
 800e3ea:	429a      	cmp	r2, r3
 800e3ec:	bfa2      	ittt	ge
 800e3ee:	4623      	movge	r3, r4
 800e3f0:	460c      	movge	r4, r1
 800e3f2:	461f      	movge	r7, r3
 800e3f4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e3f8:	68a3      	ldr	r3, [r4, #8]
 800e3fa:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e3fe:	6861      	ldr	r1, [r4, #4]
 800e400:	eb0a 0609 	add.w	r6, sl, r9
 800e404:	42b3      	cmp	r3, r6
 800e406:	bfb8      	it	lt
 800e408:	3101      	addlt	r1, #1
 800e40a:	f7ff fe91 	bl	800e130 <_Balloc>
 800e40e:	b930      	cbnz	r0, 800e41e <__multiply+0x42>
 800e410:	4602      	mov	r2, r0
 800e412:	4b45      	ldr	r3, [pc, #276]	@ (800e528 <__multiply+0x14c>)
 800e414:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e418:	4844      	ldr	r0, [pc, #272]	@ (800e52c <__multiply+0x150>)
 800e41a:	f001 fd5d 	bl	800fed8 <__assert_func>
 800e41e:	f100 0514 	add.w	r5, r0, #20
 800e422:	2200      	movs	r2, #0
 800e424:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e428:	462b      	mov	r3, r5
 800e42a:	4543      	cmp	r3, r8
 800e42c:	d321      	bcc.n	800e472 <__multiply+0x96>
 800e42e:	f107 0114 	add.w	r1, r7, #20
 800e432:	f104 0214 	add.w	r2, r4, #20
 800e436:	f104 0715 	add.w	r7, r4, #21
 800e43a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e43e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e442:	9302      	str	r3, [sp, #8]
 800e444:	1b13      	subs	r3, r2, r4
 800e446:	3b15      	subs	r3, #21
 800e448:	f023 0303 	bic.w	r3, r3, #3
 800e44c:	3304      	adds	r3, #4
 800e44e:	42ba      	cmp	r2, r7
 800e450:	bf38      	it	cc
 800e452:	2304      	movcc	r3, #4
 800e454:	9301      	str	r3, [sp, #4]
 800e456:	9b02      	ldr	r3, [sp, #8]
 800e458:	9103      	str	r1, [sp, #12]
 800e45a:	428b      	cmp	r3, r1
 800e45c:	d80c      	bhi.n	800e478 <__multiply+0x9c>
 800e45e:	2e00      	cmp	r6, #0
 800e460:	dd03      	ble.n	800e46a <__multiply+0x8e>
 800e462:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e466:	2b00      	cmp	r3, #0
 800e468:	d05b      	beq.n	800e522 <__multiply+0x146>
 800e46a:	6106      	str	r6, [r0, #16]
 800e46c:	b005      	add	sp, #20
 800e46e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e472:	f843 2b04 	str.w	r2, [r3], #4
 800e476:	e7d8      	b.n	800e42a <__multiply+0x4e>
 800e478:	f8b1 a000 	ldrh.w	sl, [r1]
 800e47c:	f1ba 0f00 	cmp.w	sl, #0
 800e480:	d024      	beq.n	800e4cc <__multiply+0xf0>
 800e482:	f104 0e14 	add.w	lr, r4, #20
 800e486:	46a9      	mov	r9, r5
 800e488:	f04f 0c00 	mov.w	ip, #0
 800e48c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e490:	f8d9 3000 	ldr.w	r3, [r9]
 800e494:	fa1f fb87 	uxth.w	fp, r7
 800e498:	4572      	cmp	r2, lr
 800e49a:	b29b      	uxth	r3, r3
 800e49c:	fb0a 330b 	mla	r3, sl, fp, r3
 800e4a0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e4a4:	f8d9 7000 	ldr.w	r7, [r9]
 800e4a8:	4463      	add	r3, ip
 800e4aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e4ae:	fb0a c70b 	mla	r7, sl, fp, ip
 800e4b2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e4b6:	b29b      	uxth	r3, r3
 800e4b8:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e4bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e4c0:	f849 3b04 	str.w	r3, [r9], #4
 800e4c4:	d8e2      	bhi.n	800e48c <__multiply+0xb0>
 800e4c6:	9b01      	ldr	r3, [sp, #4]
 800e4c8:	f845 c003 	str.w	ip, [r5, r3]
 800e4cc:	9b03      	ldr	r3, [sp, #12]
 800e4ce:	3104      	adds	r1, #4
 800e4d0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e4d4:	f1b9 0f00 	cmp.w	r9, #0
 800e4d8:	d021      	beq.n	800e51e <__multiply+0x142>
 800e4da:	682b      	ldr	r3, [r5, #0]
 800e4dc:	f104 0c14 	add.w	ip, r4, #20
 800e4e0:	46ae      	mov	lr, r5
 800e4e2:	f04f 0a00 	mov.w	sl, #0
 800e4e6:	f8bc b000 	ldrh.w	fp, [ip]
 800e4ea:	b29b      	uxth	r3, r3
 800e4ec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e4f0:	fb09 770b 	mla	r7, r9, fp, r7
 800e4f4:	4457      	add	r7, sl
 800e4f6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e4fa:	f84e 3b04 	str.w	r3, [lr], #4
 800e4fe:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e502:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e506:	f8be 3000 	ldrh.w	r3, [lr]
 800e50a:	4562      	cmp	r2, ip
 800e50c:	fb09 330a 	mla	r3, r9, sl, r3
 800e510:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e514:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e518:	d8e5      	bhi.n	800e4e6 <__multiply+0x10a>
 800e51a:	9f01      	ldr	r7, [sp, #4]
 800e51c:	51eb      	str	r3, [r5, r7]
 800e51e:	3504      	adds	r5, #4
 800e520:	e799      	b.n	800e456 <__multiply+0x7a>
 800e522:	3e01      	subs	r6, #1
 800e524:	e79b      	b.n	800e45e <__multiply+0x82>
 800e526:	bf00      	nop
 800e528:	08010cf6 	.word	0x08010cf6
 800e52c:	08010d07 	.word	0x08010d07

0800e530 <__pow5mult>:
 800e530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e534:	4615      	mov	r5, r2
 800e536:	f012 0203 	ands.w	r2, r2, #3
 800e53a:	4607      	mov	r7, r0
 800e53c:	460e      	mov	r6, r1
 800e53e:	d007      	beq.n	800e550 <__pow5mult+0x20>
 800e540:	3a01      	subs	r2, #1
 800e542:	4c25      	ldr	r4, [pc, #148]	@ (800e5d8 <__pow5mult+0xa8>)
 800e544:	2300      	movs	r3, #0
 800e546:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e54a:	f7ff fe53 	bl	800e1f4 <__multadd>
 800e54e:	4606      	mov	r6, r0
 800e550:	10ad      	asrs	r5, r5, #2
 800e552:	d03d      	beq.n	800e5d0 <__pow5mult+0xa0>
 800e554:	69fc      	ldr	r4, [r7, #28]
 800e556:	b97c      	cbnz	r4, 800e578 <__pow5mult+0x48>
 800e558:	2010      	movs	r0, #16
 800e55a:	f7ff fd33 	bl	800dfc4 <malloc>
 800e55e:	4602      	mov	r2, r0
 800e560:	61f8      	str	r0, [r7, #28]
 800e562:	b928      	cbnz	r0, 800e570 <__pow5mult+0x40>
 800e564:	4b1d      	ldr	r3, [pc, #116]	@ (800e5dc <__pow5mult+0xac>)
 800e566:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e56a:	481d      	ldr	r0, [pc, #116]	@ (800e5e0 <__pow5mult+0xb0>)
 800e56c:	f001 fcb4 	bl	800fed8 <__assert_func>
 800e570:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e574:	6004      	str	r4, [r0, #0]
 800e576:	60c4      	str	r4, [r0, #12]
 800e578:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e57c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e580:	b94c      	cbnz	r4, 800e596 <__pow5mult+0x66>
 800e582:	f240 2171 	movw	r1, #625	@ 0x271
 800e586:	4638      	mov	r0, r7
 800e588:	f7ff ff12 	bl	800e3b0 <__i2b>
 800e58c:	2300      	movs	r3, #0
 800e58e:	4604      	mov	r4, r0
 800e590:	f8c8 0008 	str.w	r0, [r8, #8]
 800e594:	6003      	str	r3, [r0, #0]
 800e596:	f04f 0900 	mov.w	r9, #0
 800e59a:	07eb      	lsls	r3, r5, #31
 800e59c:	d50a      	bpl.n	800e5b4 <__pow5mult+0x84>
 800e59e:	4631      	mov	r1, r6
 800e5a0:	4622      	mov	r2, r4
 800e5a2:	4638      	mov	r0, r7
 800e5a4:	f7ff ff1a 	bl	800e3dc <__multiply>
 800e5a8:	4680      	mov	r8, r0
 800e5aa:	4631      	mov	r1, r6
 800e5ac:	4638      	mov	r0, r7
 800e5ae:	4646      	mov	r6, r8
 800e5b0:	f7ff fdfe 	bl	800e1b0 <_Bfree>
 800e5b4:	106d      	asrs	r5, r5, #1
 800e5b6:	d00b      	beq.n	800e5d0 <__pow5mult+0xa0>
 800e5b8:	6820      	ldr	r0, [r4, #0]
 800e5ba:	b938      	cbnz	r0, 800e5cc <__pow5mult+0x9c>
 800e5bc:	4622      	mov	r2, r4
 800e5be:	4621      	mov	r1, r4
 800e5c0:	4638      	mov	r0, r7
 800e5c2:	f7ff ff0b 	bl	800e3dc <__multiply>
 800e5c6:	6020      	str	r0, [r4, #0]
 800e5c8:	f8c0 9000 	str.w	r9, [r0]
 800e5cc:	4604      	mov	r4, r0
 800e5ce:	e7e4      	b.n	800e59a <__pow5mult+0x6a>
 800e5d0:	4630      	mov	r0, r6
 800e5d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5d6:	bf00      	nop
 800e5d8:	08010d60 	.word	0x08010d60
 800e5dc:	08010c87 	.word	0x08010c87
 800e5e0:	08010d07 	.word	0x08010d07

0800e5e4 <__lshift>:
 800e5e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5e8:	460c      	mov	r4, r1
 800e5ea:	4607      	mov	r7, r0
 800e5ec:	4691      	mov	r9, r2
 800e5ee:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e5f2:	6923      	ldr	r3, [r4, #16]
 800e5f4:	6849      	ldr	r1, [r1, #4]
 800e5f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e5fa:	68a3      	ldr	r3, [r4, #8]
 800e5fc:	f108 0601 	add.w	r6, r8, #1
 800e600:	42b3      	cmp	r3, r6
 800e602:	db0b      	blt.n	800e61c <__lshift+0x38>
 800e604:	4638      	mov	r0, r7
 800e606:	f7ff fd93 	bl	800e130 <_Balloc>
 800e60a:	4605      	mov	r5, r0
 800e60c:	b948      	cbnz	r0, 800e622 <__lshift+0x3e>
 800e60e:	4602      	mov	r2, r0
 800e610:	4b28      	ldr	r3, [pc, #160]	@ (800e6b4 <__lshift+0xd0>)
 800e612:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e616:	4828      	ldr	r0, [pc, #160]	@ (800e6b8 <__lshift+0xd4>)
 800e618:	f001 fc5e 	bl	800fed8 <__assert_func>
 800e61c:	3101      	adds	r1, #1
 800e61e:	005b      	lsls	r3, r3, #1
 800e620:	e7ee      	b.n	800e600 <__lshift+0x1c>
 800e622:	2300      	movs	r3, #0
 800e624:	f100 0114 	add.w	r1, r0, #20
 800e628:	f100 0210 	add.w	r2, r0, #16
 800e62c:	4618      	mov	r0, r3
 800e62e:	4553      	cmp	r3, sl
 800e630:	db33      	blt.n	800e69a <__lshift+0xb6>
 800e632:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e636:	f104 0314 	add.w	r3, r4, #20
 800e63a:	6920      	ldr	r0, [r4, #16]
 800e63c:	f019 091f 	ands.w	r9, r9, #31
 800e640:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e644:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e648:	d02b      	beq.n	800e6a2 <__lshift+0xbe>
 800e64a:	f1c9 0e20 	rsb	lr, r9, #32
 800e64e:	468a      	mov	sl, r1
 800e650:	2200      	movs	r2, #0
 800e652:	6818      	ldr	r0, [r3, #0]
 800e654:	fa00 f009 	lsl.w	r0, r0, r9
 800e658:	4310      	orrs	r0, r2
 800e65a:	f84a 0b04 	str.w	r0, [sl], #4
 800e65e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e662:	459c      	cmp	ip, r3
 800e664:	fa22 f20e 	lsr.w	r2, r2, lr
 800e668:	d8f3      	bhi.n	800e652 <__lshift+0x6e>
 800e66a:	ebac 0304 	sub.w	r3, ip, r4
 800e66e:	f104 0015 	add.w	r0, r4, #21
 800e672:	3b15      	subs	r3, #21
 800e674:	f023 0303 	bic.w	r3, r3, #3
 800e678:	3304      	adds	r3, #4
 800e67a:	4584      	cmp	ip, r0
 800e67c:	bf38      	it	cc
 800e67e:	2304      	movcc	r3, #4
 800e680:	50ca      	str	r2, [r1, r3]
 800e682:	b10a      	cbz	r2, 800e688 <__lshift+0xa4>
 800e684:	f108 0602 	add.w	r6, r8, #2
 800e688:	3e01      	subs	r6, #1
 800e68a:	4638      	mov	r0, r7
 800e68c:	4621      	mov	r1, r4
 800e68e:	612e      	str	r6, [r5, #16]
 800e690:	f7ff fd8e 	bl	800e1b0 <_Bfree>
 800e694:	4628      	mov	r0, r5
 800e696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e69a:	3301      	adds	r3, #1
 800e69c:	f842 0f04 	str.w	r0, [r2, #4]!
 800e6a0:	e7c5      	b.n	800e62e <__lshift+0x4a>
 800e6a2:	3904      	subs	r1, #4
 800e6a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6a8:	459c      	cmp	ip, r3
 800e6aa:	f841 2f04 	str.w	r2, [r1, #4]!
 800e6ae:	d8f9      	bhi.n	800e6a4 <__lshift+0xc0>
 800e6b0:	e7ea      	b.n	800e688 <__lshift+0xa4>
 800e6b2:	bf00      	nop
 800e6b4:	08010cf6 	.word	0x08010cf6
 800e6b8:	08010d07 	.word	0x08010d07

0800e6bc <__mcmp>:
 800e6bc:	4603      	mov	r3, r0
 800e6be:	690a      	ldr	r2, [r1, #16]
 800e6c0:	6900      	ldr	r0, [r0, #16]
 800e6c2:	1a80      	subs	r0, r0, r2
 800e6c4:	b530      	push	{r4, r5, lr}
 800e6c6:	d10e      	bne.n	800e6e6 <__mcmp+0x2a>
 800e6c8:	3314      	adds	r3, #20
 800e6ca:	3114      	adds	r1, #20
 800e6cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e6d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e6d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e6d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e6dc:	4295      	cmp	r5, r2
 800e6de:	d003      	beq.n	800e6e8 <__mcmp+0x2c>
 800e6e0:	d205      	bcs.n	800e6ee <__mcmp+0x32>
 800e6e2:	f04f 30ff 	mov.w	r0, #4294967295
 800e6e6:	bd30      	pop	{r4, r5, pc}
 800e6e8:	42a3      	cmp	r3, r4
 800e6ea:	d3f3      	bcc.n	800e6d4 <__mcmp+0x18>
 800e6ec:	e7fb      	b.n	800e6e6 <__mcmp+0x2a>
 800e6ee:	2001      	movs	r0, #1
 800e6f0:	e7f9      	b.n	800e6e6 <__mcmp+0x2a>
	...

0800e6f4 <__mdiff>:
 800e6f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6f8:	4689      	mov	r9, r1
 800e6fa:	4606      	mov	r6, r0
 800e6fc:	4611      	mov	r1, r2
 800e6fe:	4614      	mov	r4, r2
 800e700:	4648      	mov	r0, r9
 800e702:	f7ff ffdb 	bl	800e6bc <__mcmp>
 800e706:	1e05      	subs	r5, r0, #0
 800e708:	d112      	bne.n	800e730 <__mdiff+0x3c>
 800e70a:	4629      	mov	r1, r5
 800e70c:	4630      	mov	r0, r6
 800e70e:	f7ff fd0f 	bl	800e130 <_Balloc>
 800e712:	4602      	mov	r2, r0
 800e714:	b928      	cbnz	r0, 800e722 <__mdiff+0x2e>
 800e716:	4b41      	ldr	r3, [pc, #260]	@ (800e81c <__mdiff+0x128>)
 800e718:	f240 2137 	movw	r1, #567	@ 0x237
 800e71c:	4840      	ldr	r0, [pc, #256]	@ (800e820 <__mdiff+0x12c>)
 800e71e:	f001 fbdb 	bl	800fed8 <__assert_func>
 800e722:	2301      	movs	r3, #1
 800e724:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e728:	4610      	mov	r0, r2
 800e72a:	b003      	add	sp, #12
 800e72c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e730:	bfbc      	itt	lt
 800e732:	464b      	movlt	r3, r9
 800e734:	46a1      	movlt	r9, r4
 800e736:	4630      	mov	r0, r6
 800e738:	bfb8      	it	lt
 800e73a:	2501      	movlt	r5, #1
 800e73c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e740:	bfb4      	ite	lt
 800e742:	461c      	movlt	r4, r3
 800e744:	2500      	movge	r5, #0
 800e746:	f7ff fcf3 	bl	800e130 <_Balloc>
 800e74a:	4602      	mov	r2, r0
 800e74c:	b918      	cbnz	r0, 800e756 <__mdiff+0x62>
 800e74e:	4b33      	ldr	r3, [pc, #204]	@ (800e81c <__mdiff+0x128>)
 800e750:	f240 2145 	movw	r1, #581	@ 0x245
 800e754:	e7e2      	b.n	800e71c <__mdiff+0x28>
 800e756:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e75a:	f104 0e14 	add.w	lr, r4, #20
 800e75e:	6926      	ldr	r6, [r4, #16]
 800e760:	f100 0b14 	add.w	fp, r0, #20
 800e764:	60c5      	str	r5, [r0, #12]
 800e766:	f109 0514 	add.w	r5, r9, #20
 800e76a:	f109 0310 	add.w	r3, r9, #16
 800e76e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e772:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e776:	46d9      	mov	r9, fp
 800e778:	f04f 0c00 	mov.w	ip, #0
 800e77c:	9301      	str	r3, [sp, #4]
 800e77e:	9b01      	ldr	r3, [sp, #4]
 800e780:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e784:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e788:	4576      	cmp	r6, lr
 800e78a:	9301      	str	r3, [sp, #4]
 800e78c:	fa1f f38a 	uxth.w	r3, sl
 800e790:	4619      	mov	r1, r3
 800e792:	b283      	uxth	r3, r0
 800e794:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800e798:	eba1 0303 	sub.w	r3, r1, r3
 800e79c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e7a0:	4463      	add	r3, ip
 800e7a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e7a6:	b29b      	uxth	r3, r3
 800e7a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e7ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e7b0:	f849 3b04 	str.w	r3, [r9], #4
 800e7b4:	d8e3      	bhi.n	800e77e <__mdiff+0x8a>
 800e7b6:	1b33      	subs	r3, r6, r4
 800e7b8:	3415      	adds	r4, #21
 800e7ba:	3b15      	subs	r3, #21
 800e7bc:	f023 0303 	bic.w	r3, r3, #3
 800e7c0:	3304      	adds	r3, #4
 800e7c2:	42a6      	cmp	r6, r4
 800e7c4:	bf38      	it	cc
 800e7c6:	2304      	movcc	r3, #4
 800e7c8:	441d      	add	r5, r3
 800e7ca:	445b      	add	r3, fp
 800e7cc:	462c      	mov	r4, r5
 800e7ce:	461e      	mov	r6, r3
 800e7d0:	4544      	cmp	r4, r8
 800e7d2:	d30e      	bcc.n	800e7f2 <__mdiff+0xfe>
 800e7d4:	f108 0103 	add.w	r1, r8, #3
 800e7d8:	1b49      	subs	r1, r1, r5
 800e7da:	3d03      	subs	r5, #3
 800e7dc:	f021 0103 	bic.w	r1, r1, #3
 800e7e0:	45a8      	cmp	r8, r5
 800e7e2:	bf38      	it	cc
 800e7e4:	2100      	movcc	r1, #0
 800e7e6:	440b      	add	r3, r1
 800e7e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e7ec:	b199      	cbz	r1, 800e816 <__mdiff+0x122>
 800e7ee:	6117      	str	r7, [r2, #16]
 800e7f0:	e79a      	b.n	800e728 <__mdiff+0x34>
 800e7f2:	f854 1b04 	ldr.w	r1, [r4], #4
 800e7f6:	46e6      	mov	lr, ip
 800e7f8:	fa1f fc81 	uxth.w	ip, r1
 800e7fc:	0c08      	lsrs	r0, r1, #16
 800e7fe:	4471      	add	r1, lr
 800e800:	44f4      	add	ip, lr
 800e802:	b289      	uxth	r1, r1
 800e804:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e808:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e80c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e810:	f846 1b04 	str.w	r1, [r6], #4
 800e814:	e7dc      	b.n	800e7d0 <__mdiff+0xdc>
 800e816:	3f01      	subs	r7, #1
 800e818:	e7e6      	b.n	800e7e8 <__mdiff+0xf4>
 800e81a:	bf00      	nop
 800e81c:	08010cf6 	.word	0x08010cf6
 800e820:	08010d07 	.word	0x08010d07

0800e824 <__ulp>:
 800e824:	b082      	sub	sp, #8
 800e826:	4b11      	ldr	r3, [pc, #68]	@ (800e86c <__ulp+0x48>)
 800e828:	ed8d 0b00 	vstr	d0, [sp]
 800e82c:	9a01      	ldr	r2, [sp, #4]
 800e82e:	4013      	ands	r3, r2
 800e830:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e834:	2b00      	cmp	r3, #0
 800e836:	dc08      	bgt.n	800e84a <__ulp+0x26>
 800e838:	425b      	negs	r3, r3
 800e83a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e83e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e842:	da04      	bge.n	800e84e <__ulp+0x2a>
 800e844:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e848:	4113      	asrs	r3, r2
 800e84a:	2200      	movs	r2, #0
 800e84c:	e008      	b.n	800e860 <__ulp+0x3c>
 800e84e:	f1a2 0314 	sub.w	r3, r2, #20
 800e852:	2b1e      	cmp	r3, #30
 800e854:	bfd6      	itet	le
 800e856:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e85a:	2201      	movgt	r2, #1
 800e85c:	40da      	lsrle	r2, r3
 800e85e:	2300      	movs	r3, #0
 800e860:	4619      	mov	r1, r3
 800e862:	4610      	mov	r0, r2
 800e864:	ec41 0b10 	vmov	d0, r0, r1
 800e868:	b002      	add	sp, #8
 800e86a:	4770      	bx	lr
 800e86c:	7ff00000 	.word	0x7ff00000

0800e870 <__b2d>:
 800e870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e874:	6906      	ldr	r6, [r0, #16]
 800e876:	f100 0814 	add.w	r8, r0, #20
 800e87a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e87e:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e882:	1f37      	subs	r7, r6, #4
 800e884:	4610      	mov	r0, r2
 800e886:	f7ff fd47 	bl	800e318 <__hi0bits>
 800e88a:	f1c0 0320 	rsb	r3, r0, #32
 800e88e:	280a      	cmp	r0, #10
 800e890:	600b      	str	r3, [r1, #0]
 800e892:	491d      	ldr	r1, [pc, #116]	@ (800e908 <__b2d+0x98>)
 800e894:	dc16      	bgt.n	800e8c4 <__b2d+0x54>
 800e896:	f1c0 0c0b 	rsb	ip, r0, #11
 800e89a:	45b8      	cmp	r8, r7
 800e89c:	f100 0015 	add.w	r0, r0, #21
 800e8a0:	fa22 f30c 	lsr.w	r3, r2, ip
 800e8a4:	fa02 f000 	lsl.w	r0, r2, r0
 800e8a8:	ea43 0501 	orr.w	r5, r3, r1
 800e8ac:	bf34      	ite	cc
 800e8ae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e8b2:	2300      	movcs	r3, #0
 800e8b4:	fa23 f30c 	lsr.w	r3, r3, ip
 800e8b8:	4303      	orrs	r3, r0
 800e8ba:	461c      	mov	r4, r3
 800e8bc:	ec45 4b10 	vmov	d0, r4, r5
 800e8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8c4:	45b8      	cmp	r8, r7
 800e8c6:	bf3a      	itte	cc
 800e8c8:	f1a6 0708 	subcc.w	r7, r6, #8
 800e8cc:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e8d0:	2300      	movcs	r3, #0
 800e8d2:	380b      	subs	r0, #11
 800e8d4:	d014      	beq.n	800e900 <__b2d+0x90>
 800e8d6:	f1c0 0120 	rsb	r1, r0, #32
 800e8da:	4082      	lsls	r2, r0
 800e8dc:	4547      	cmp	r7, r8
 800e8de:	fa23 f401 	lsr.w	r4, r3, r1
 800e8e2:	fa03 f300 	lsl.w	r3, r3, r0
 800e8e6:	ea42 0204 	orr.w	r2, r2, r4
 800e8ea:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e8ee:	bf8c      	ite	hi
 800e8f0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e8f4:	2200      	movls	r2, #0
 800e8f6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e8fa:	40ca      	lsrs	r2, r1
 800e8fc:	4313      	orrs	r3, r2
 800e8fe:	e7dc      	b.n	800e8ba <__b2d+0x4a>
 800e900:	ea42 0501 	orr.w	r5, r2, r1
 800e904:	e7d9      	b.n	800e8ba <__b2d+0x4a>
 800e906:	bf00      	nop
 800e908:	3ff00000 	.word	0x3ff00000

0800e90c <__d2b>:
 800e90c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e910:	460f      	mov	r7, r1
 800e912:	2101      	movs	r1, #1
 800e914:	4616      	mov	r6, r2
 800e916:	ec59 8b10 	vmov	r8, r9, d0
 800e91a:	f7ff fc09 	bl	800e130 <_Balloc>
 800e91e:	4604      	mov	r4, r0
 800e920:	b930      	cbnz	r0, 800e930 <__d2b+0x24>
 800e922:	4602      	mov	r2, r0
 800e924:	4b23      	ldr	r3, [pc, #140]	@ (800e9b4 <__d2b+0xa8>)
 800e926:	f240 310f 	movw	r1, #783	@ 0x30f
 800e92a:	4823      	ldr	r0, [pc, #140]	@ (800e9b8 <__d2b+0xac>)
 800e92c:	f001 fad4 	bl	800fed8 <__assert_func>
 800e930:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e934:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e938:	b10d      	cbz	r5, 800e93e <__d2b+0x32>
 800e93a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e93e:	9301      	str	r3, [sp, #4]
 800e940:	f1b8 0300 	subs.w	r3, r8, #0
 800e944:	d023      	beq.n	800e98e <__d2b+0x82>
 800e946:	4668      	mov	r0, sp
 800e948:	9300      	str	r3, [sp, #0]
 800e94a:	f7ff fd04 	bl	800e356 <__lo0bits>
 800e94e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e952:	b1d0      	cbz	r0, 800e98a <__d2b+0x7e>
 800e954:	f1c0 0320 	rsb	r3, r0, #32
 800e958:	fa02 f303 	lsl.w	r3, r2, r3
 800e95c:	40c2      	lsrs	r2, r0
 800e95e:	430b      	orrs	r3, r1
 800e960:	9201      	str	r2, [sp, #4]
 800e962:	6163      	str	r3, [r4, #20]
 800e964:	9b01      	ldr	r3, [sp, #4]
 800e966:	2b00      	cmp	r3, #0
 800e968:	61a3      	str	r3, [r4, #24]
 800e96a:	bf0c      	ite	eq
 800e96c:	2201      	moveq	r2, #1
 800e96e:	2202      	movne	r2, #2
 800e970:	6122      	str	r2, [r4, #16]
 800e972:	b1a5      	cbz	r5, 800e99e <__d2b+0x92>
 800e974:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e978:	4405      	add	r5, r0
 800e97a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e97e:	603d      	str	r5, [r7, #0]
 800e980:	6030      	str	r0, [r6, #0]
 800e982:	4620      	mov	r0, r4
 800e984:	b003      	add	sp, #12
 800e986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e98a:	6161      	str	r1, [r4, #20]
 800e98c:	e7ea      	b.n	800e964 <__d2b+0x58>
 800e98e:	a801      	add	r0, sp, #4
 800e990:	f7ff fce1 	bl	800e356 <__lo0bits>
 800e994:	9b01      	ldr	r3, [sp, #4]
 800e996:	3020      	adds	r0, #32
 800e998:	2201      	movs	r2, #1
 800e99a:	6163      	str	r3, [r4, #20]
 800e99c:	e7e8      	b.n	800e970 <__d2b+0x64>
 800e99e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e9a2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e9a6:	6038      	str	r0, [r7, #0]
 800e9a8:	6918      	ldr	r0, [r3, #16]
 800e9aa:	f7ff fcb5 	bl	800e318 <__hi0bits>
 800e9ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e9b2:	e7e5      	b.n	800e980 <__d2b+0x74>
 800e9b4:	08010cf6 	.word	0x08010cf6
 800e9b8:	08010d07 	.word	0x08010d07

0800e9bc <__ratio>:
 800e9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9c0:	b085      	sub	sp, #20
 800e9c2:	e9cd 1000 	strd	r1, r0, [sp]
 800e9c6:	a902      	add	r1, sp, #8
 800e9c8:	f7ff ff52 	bl	800e870 <__b2d>
 800e9cc:	a903      	add	r1, sp, #12
 800e9ce:	9800      	ldr	r0, [sp, #0]
 800e9d0:	ec55 4b10 	vmov	r4, r5, d0
 800e9d4:	f7ff ff4c 	bl	800e870 <__b2d>
 800e9d8:	9b01      	ldr	r3, [sp, #4]
 800e9da:	462f      	mov	r7, r5
 800e9dc:	4620      	mov	r0, r4
 800e9de:	6919      	ldr	r1, [r3, #16]
 800e9e0:	9b00      	ldr	r3, [sp, #0]
 800e9e2:	691b      	ldr	r3, [r3, #16]
 800e9e4:	1ac9      	subs	r1, r1, r3
 800e9e6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e9ea:	ec5b ab10 	vmov	sl, fp, d0
 800e9ee:	1a9b      	subs	r3, r3, r2
 800e9f0:	46d9      	mov	r9, fp
 800e9f2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	bfcd      	iteet	gt
 800e9fa:	462a      	movgt	r2, r5
 800e9fc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ea00:	465a      	movle	r2, fp
 800ea02:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ea06:	bfd8      	it	le
 800ea08:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ea0c:	4652      	mov	r2, sl
 800ea0e:	4639      	mov	r1, r7
 800ea10:	464b      	mov	r3, r9
 800ea12:	f7f1 ff2f 	bl	8000874 <__aeabi_ddiv>
 800ea16:	ec41 0b10 	vmov	d0, r0, r1
 800ea1a:	b005      	add	sp, #20
 800ea1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ea20 <__copybits>:
 800ea20:	3901      	subs	r1, #1
 800ea22:	f102 0314 	add.w	r3, r2, #20
 800ea26:	1149      	asrs	r1, r1, #5
 800ea28:	b570      	push	{r4, r5, r6, lr}
 800ea2a:	3101      	adds	r1, #1
 800ea2c:	6914      	ldr	r4, [r2, #16]
 800ea2e:	1f05      	subs	r5, r0, #4
 800ea30:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ea34:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ea38:	42a3      	cmp	r3, r4
 800ea3a:	d30c      	bcc.n	800ea56 <__copybits+0x36>
 800ea3c:	1aa3      	subs	r3, r4, r2
 800ea3e:	3211      	adds	r2, #17
 800ea40:	3b11      	subs	r3, #17
 800ea42:	f023 0303 	bic.w	r3, r3, #3
 800ea46:	42a2      	cmp	r2, r4
 800ea48:	bf88      	it	hi
 800ea4a:	2300      	movhi	r3, #0
 800ea4c:	4418      	add	r0, r3
 800ea4e:	2300      	movs	r3, #0
 800ea50:	4288      	cmp	r0, r1
 800ea52:	d305      	bcc.n	800ea60 <__copybits+0x40>
 800ea54:	bd70      	pop	{r4, r5, r6, pc}
 800ea56:	f853 6b04 	ldr.w	r6, [r3], #4
 800ea5a:	f845 6f04 	str.w	r6, [r5, #4]!
 800ea5e:	e7eb      	b.n	800ea38 <__copybits+0x18>
 800ea60:	f840 3b04 	str.w	r3, [r0], #4
 800ea64:	e7f4      	b.n	800ea50 <__copybits+0x30>

0800ea66 <__any_on>:
 800ea66:	f100 0214 	add.w	r2, r0, #20
 800ea6a:	114b      	asrs	r3, r1, #5
 800ea6c:	6900      	ldr	r0, [r0, #16]
 800ea6e:	4298      	cmp	r0, r3
 800ea70:	b510      	push	{r4, lr}
 800ea72:	db11      	blt.n	800ea98 <__any_on+0x32>
 800ea74:	dd0a      	ble.n	800ea8c <__any_on+0x26>
 800ea76:	f011 011f 	ands.w	r1, r1, #31
 800ea7a:	d007      	beq.n	800ea8c <__any_on+0x26>
 800ea7c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ea80:	fa24 f001 	lsr.w	r0, r4, r1
 800ea84:	fa00 f101 	lsl.w	r1, r0, r1
 800ea88:	428c      	cmp	r4, r1
 800ea8a:	d10b      	bne.n	800eaa4 <__any_on+0x3e>
 800ea8c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ea90:	4293      	cmp	r3, r2
 800ea92:	d803      	bhi.n	800ea9c <__any_on+0x36>
 800ea94:	2000      	movs	r0, #0
 800ea96:	bd10      	pop	{r4, pc}
 800ea98:	4603      	mov	r3, r0
 800ea9a:	e7f7      	b.n	800ea8c <__any_on+0x26>
 800ea9c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eaa0:	2900      	cmp	r1, #0
 800eaa2:	d0f5      	beq.n	800ea90 <__any_on+0x2a>
 800eaa4:	2001      	movs	r0, #1
 800eaa6:	e7f6      	b.n	800ea96 <__any_on+0x30>

0800eaa8 <sulp>:
 800eaa8:	b570      	push	{r4, r5, r6, lr}
 800eaaa:	4604      	mov	r4, r0
 800eaac:	460d      	mov	r5, r1
 800eaae:	4616      	mov	r6, r2
 800eab0:	ec45 4b10 	vmov	d0, r4, r5
 800eab4:	f7ff feb6 	bl	800e824 <__ulp>
 800eab8:	ec51 0b10 	vmov	r0, r1, d0
 800eabc:	b17e      	cbz	r6, 800eade <sulp+0x36>
 800eabe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800eac2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	dd09      	ble.n	800eade <sulp+0x36>
 800eaca:	051b      	lsls	r3, r3, #20
 800eacc:	2400      	movs	r4, #0
 800eace:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ead2:	4622      	mov	r2, r4
 800ead4:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ead8:	462b      	mov	r3, r5
 800eada:	f7f1 fda1 	bl	8000620 <__aeabi_dmul>
 800eade:	ec41 0b10 	vmov	d0, r0, r1
 800eae2:	bd70      	pop	{r4, r5, r6, pc}
 800eae4:	0000      	movs	r0, r0
	...

0800eae8 <_strtod_l>:
 800eae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaec:	b09f      	sub	sp, #124	@ 0x7c
 800eaee:	460c      	mov	r4, r1
 800eaf0:	f04f 0a00 	mov.w	sl, #0
 800eaf4:	f04f 0b00 	mov.w	fp, #0
 800eaf8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800eafa:	2200      	movs	r2, #0
 800eafc:	9005      	str	r0, [sp, #20]
 800eafe:	921a      	str	r2, [sp, #104]	@ 0x68
 800eb00:	460a      	mov	r2, r1
 800eb02:	9219      	str	r2, [sp, #100]	@ 0x64
 800eb04:	7811      	ldrb	r1, [r2, #0]
 800eb06:	292b      	cmp	r1, #43	@ 0x2b
 800eb08:	d04a      	beq.n	800eba0 <_strtod_l+0xb8>
 800eb0a:	d838      	bhi.n	800eb7e <_strtod_l+0x96>
 800eb0c:	290d      	cmp	r1, #13
 800eb0e:	d832      	bhi.n	800eb76 <_strtod_l+0x8e>
 800eb10:	2908      	cmp	r1, #8
 800eb12:	d832      	bhi.n	800eb7a <_strtod_l+0x92>
 800eb14:	2900      	cmp	r1, #0
 800eb16:	d03b      	beq.n	800eb90 <_strtod_l+0xa8>
 800eb18:	2200      	movs	r2, #0
 800eb1a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800eb1c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800eb1e:	782a      	ldrb	r2, [r5, #0]
 800eb20:	2a30      	cmp	r2, #48	@ 0x30
 800eb22:	f040 80b3 	bne.w	800ec8c <_strtod_l+0x1a4>
 800eb26:	786a      	ldrb	r2, [r5, #1]
 800eb28:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800eb2c:	2a58      	cmp	r2, #88	@ 0x58
 800eb2e:	d16e      	bne.n	800ec0e <_strtod_l+0x126>
 800eb30:	9302      	str	r3, [sp, #8]
 800eb32:	a919      	add	r1, sp, #100	@ 0x64
 800eb34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb36:	4a90      	ldr	r2, [pc, #576]	@ (800ed78 <_strtod_l+0x290>)
 800eb38:	9301      	str	r3, [sp, #4]
 800eb3a:	ab1a      	add	r3, sp, #104	@ 0x68
 800eb3c:	9805      	ldr	r0, [sp, #20]
 800eb3e:	9300      	str	r3, [sp, #0]
 800eb40:	ab1b      	add	r3, sp, #108	@ 0x6c
 800eb42:	f001 fa61 	bl	8010008 <__gethex>
 800eb46:	f010 060f 	ands.w	r6, r0, #15
 800eb4a:	4604      	mov	r4, r0
 800eb4c:	d005      	beq.n	800eb5a <_strtod_l+0x72>
 800eb4e:	2e06      	cmp	r6, #6
 800eb50:	d128      	bne.n	800eba4 <_strtod_l+0xbc>
 800eb52:	3501      	adds	r5, #1
 800eb54:	2300      	movs	r3, #0
 800eb56:	9519      	str	r5, [sp, #100]	@ 0x64
 800eb58:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eb5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	f040 858e 	bne.w	800f67e <_strtod_l+0xb96>
 800eb62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb64:	b1cb      	cbz	r3, 800eb9a <_strtod_l+0xb2>
 800eb66:	4652      	mov	r2, sl
 800eb68:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800eb6c:	ec43 2b10 	vmov	d0, r2, r3
 800eb70:	b01f      	add	sp, #124	@ 0x7c
 800eb72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb76:	2920      	cmp	r1, #32
 800eb78:	d1ce      	bne.n	800eb18 <_strtod_l+0x30>
 800eb7a:	3201      	adds	r2, #1
 800eb7c:	e7c1      	b.n	800eb02 <_strtod_l+0x1a>
 800eb7e:	292d      	cmp	r1, #45	@ 0x2d
 800eb80:	d1ca      	bne.n	800eb18 <_strtod_l+0x30>
 800eb82:	2101      	movs	r1, #1
 800eb84:	910b      	str	r1, [sp, #44]	@ 0x2c
 800eb86:	1c51      	adds	r1, r2, #1
 800eb88:	9119      	str	r1, [sp, #100]	@ 0x64
 800eb8a:	7852      	ldrb	r2, [r2, #1]
 800eb8c:	2a00      	cmp	r2, #0
 800eb8e:	d1c5      	bne.n	800eb1c <_strtod_l+0x34>
 800eb90:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800eb92:	9419      	str	r4, [sp, #100]	@ 0x64
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	f040 8570 	bne.w	800f67a <_strtod_l+0xb92>
 800eb9a:	4652      	mov	r2, sl
 800eb9c:	465b      	mov	r3, fp
 800eb9e:	e7e5      	b.n	800eb6c <_strtod_l+0x84>
 800eba0:	2100      	movs	r1, #0
 800eba2:	e7ef      	b.n	800eb84 <_strtod_l+0x9c>
 800eba4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800eba6:	b13a      	cbz	r2, 800ebb8 <_strtod_l+0xd0>
 800eba8:	2135      	movs	r1, #53	@ 0x35
 800ebaa:	a81c      	add	r0, sp, #112	@ 0x70
 800ebac:	f7ff ff38 	bl	800ea20 <__copybits>
 800ebb0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ebb2:	9805      	ldr	r0, [sp, #20]
 800ebb4:	f7ff fafc 	bl	800e1b0 <_Bfree>
 800ebb8:	3e01      	subs	r6, #1
 800ebba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ebbc:	2e04      	cmp	r6, #4
 800ebbe:	d806      	bhi.n	800ebce <_strtod_l+0xe6>
 800ebc0:	e8df f006 	tbb	[pc, r6]
 800ebc4:	201d0314 	.word	0x201d0314
 800ebc8:	14          	.byte	0x14
 800ebc9:	00          	.byte	0x00
 800ebca:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ebce:	05e1      	lsls	r1, r4, #23
 800ebd0:	bf48      	it	mi
 800ebd2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ebd6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ebda:	0d1b      	lsrs	r3, r3, #20
 800ebdc:	051b      	lsls	r3, r3, #20
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d1bb      	bne.n	800eb5a <_strtod_l+0x72>
 800ebe2:	f7fe fb05 	bl	800d1f0 <__errno>
 800ebe6:	2322      	movs	r3, #34	@ 0x22
 800ebe8:	6003      	str	r3, [r0, #0]
 800ebea:	e7b6      	b.n	800eb5a <_strtod_l+0x72>
 800ebec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ebf0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ebf4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ebf8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ebfc:	e7e7      	b.n	800ebce <_strtod_l+0xe6>
 800ebfe:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800ed80 <_strtod_l+0x298>
 800ec02:	e7e4      	b.n	800ebce <_strtod_l+0xe6>
 800ec04:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ec08:	f04f 3aff 	mov.w	sl, #4294967295
 800ec0c:	e7df      	b.n	800ebce <_strtod_l+0xe6>
 800ec0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ec10:	1c5a      	adds	r2, r3, #1
 800ec12:	9219      	str	r2, [sp, #100]	@ 0x64
 800ec14:	785b      	ldrb	r3, [r3, #1]
 800ec16:	2b30      	cmp	r3, #48	@ 0x30
 800ec18:	d0f9      	beq.n	800ec0e <_strtod_l+0x126>
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d09d      	beq.n	800eb5a <_strtod_l+0x72>
 800ec1e:	2301      	movs	r3, #1
 800ec20:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec22:	220a      	movs	r2, #10
 800ec24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ec26:	930c      	str	r3, [sp, #48]	@ 0x30
 800ec28:	2300      	movs	r3, #0
 800ec2a:	461f      	mov	r7, r3
 800ec2c:	9308      	str	r3, [sp, #32]
 800ec2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ec30:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ec32:	7805      	ldrb	r5, [r0, #0]
 800ec34:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ec38:	b2d9      	uxtb	r1, r3
 800ec3a:	2909      	cmp	r1, #9
 800ec3c:	d928      	bls.n	800ec90 <_strtod_l+0x1a8>
 800ec3e:	2201      	movs	r2, #1
 800ec40:	494e      	ldr	r1, [pc, #312]	@ (800ed7c <_strtod_l+0x294>)
 800ec42:	f001 f8fc 	bl	800fe3e <strncmp>
 800ec46:	2800      	cmp	r0, #0
 800ec48:	d033      	beq.n	800ecb2 <_strtod_l+0x1ca>
 800ec4a:	2000      	movs	r0, #0
 800ec4c:	462a      	mov	r2, r5
 800ec4e:	463d      	mov	r5, r7
 800ec50:	4681      	mov	r9, r0
 800ec52:	4603      	mov	r3, r0
 800ec54:	2a65      	cmp	r2, #101	@ 0x65
 800ec56:	d001      	beq.n	800ec5c <_strtod_l+0x174>
 800ec58:	2a45      	cmp	r2, #69	@ 0x45
 800ec5a:	d114      	bne.n	800ec86 <_strtod_l+0x19e>
 800ec5c:	b91d      	cbnz	r5, 800ec66 <_strtod_l+0x17e>
 800ec5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec60:	4302      	orrs	r2, r0
 800ec62:	d095      	beq.n	800eb90 <_strtod_l+0xa8>
 800ec64:	2500      	movs	r5, #0
 800ec66:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ec68:	1c62      	adds	r2, r4, #1
 800ec6a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ec6c:	7862      	ldrb	r2, [r4, #1]
 800ec6e:	2a2b      	cmp	r2, #43	@ 0x2b
 800ec70:	d078      	beq.n	800ed64 <_strtod_l+0x27c>
 800ec72:	2a2d      	cmp	r2, #45	@ 0x2d
 800ec74:	d07c      	beq.n	800ed70 <_strtod_l+0x288>
 800ec76:	f04f 0c00 	mov.w	ip, #0
 800ec7a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ec7e:	2909      	cmp	r1, #9
 800ec80:	f240 8084 	bls.w	800ed8c <_strtod_l+0x2a4>
 800ec84:	9419      	str	r4, [sp, #100]	@ 0x64
 800ec86:	f04f 0800 	mov.w	r8, #0
 800ec8a:	e0a4      	b.n	800edd6 <_strtod_l+0x2ee>
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	e7c7      	b.n	800ec20 <_strtod_l+0x138>
 800ec90:	2f08      	cmp	r7, #8
 800ec92:	f100 0001 	add.w	r0, r0, #1
 800ec96:	f107 0701 	add.w	r7, r7, #1
 800ec9a:	bfd5      	itete	le
 800ec9c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ec9e:	9908      	ldrgt	r1, [sp, #32]
 800eca0:	fb02 3301 	mlale	r3, r2, r1, r3
 800eca4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800eca8:	bfd4      	ite	le
 800ecaa:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ecac:	9308      	strgt	r3, [sp, #32]
 800ecae:	9019      	str	r0, [sp, #100]	@ 0x64
 800ecb0:	e7be      	b.n	800ec30 <_strtod_l+0x148>
 800ecb2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ecb4:	1c5a      	adds	r2, r3, #1
 800ecb6:	9219      	str	r2, [sp, #100]	@ 0x64
 800ecb8:	785a      	ldrb	r2, [r3, #1]
 800ecba:	b37f      	cbz	r7, 800ed1c <_strtod_l+0x234>
 800ecbc:	4681      	mov	r9, r0
 800ecbe:	463d      	mov	r5, r7
 800ecc0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ecc4:	2b09      	cmp	r3, #9
 800ecc6:	d912      	bls.n	800ecee <_strtod_l+0x206>
 800ecc8:	2301      	movs	r3, #1
 800ecca:	e7c3      	b.n	800ec54 <_strtod_l+0x16c>
 800eccc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ecce:	3001      	adds	r0, #1
 800ecd0:	1c5a      	adds	r2, r3, #1
 800ecd2:	9219      	str	r2, [sp, #100]	@ 0x64
 800ecd4:	785a      	ldrb	r2, [r3, #1]
 800ecd6:	2a30      	cmp	r2, #48	@ 0x30
 800ecd8:	d0f8      	beq.n	800eccc <_strtod_l+0x1e4>
 800ecda:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ecde:	2b08      	cmp	r3, #8
 800ece0:	f200 84d2 	bhi.w	800f688 <_strtod_l+0xba0>
 800ece4:	4681      	mov	r9, r0
 800ece6:	2000      	movs	r0, #0
 800ece8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ecea:	4605      	mov	r5, r0
 800ecec:	930c      	str	r3, [sp, #48]	@ 0x30
 800ecee:	3a30      	subs	r2, #48	@ 0x30
 800ecf0:	f100 0301 	add.w	r3, r0, #1
 800ecf4:	d02a      	beq.n	800ed4c <_strtod_l+0x264>
 800ecf6:	4499      	add	r9, r3
 800ecf8:	eb00 0c05 	add.w	ip, r0, r5
 800ecfc:	462b      	mov	r3, r5
 800ecfe:	210a      	movs	r1, #10
 800ed00:	4563      	cmp	r3, ip
 800ed02:	d10d      	bne.n	800ed20 <_strtod_l+0x238>
 800ed04:	1c69      	adds	r1, r5, #1
 800ed06:	4401      	add	r1, r0
 800ed08:	4428      	add	r0, r5
 800ed0a:	2808      	cmp	r0, #8
 800ed0c:	dc16      	bgt.n	800ed3c <_strtod_l+0x254>
 800ed0e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ed10:	230a      	movs	r3, #10
 800ed12:	fb03 2300 	mla	r3, r3, r0, r2
 800ed16:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed18:	2300      	movs	r3, #0
 800ed1a:	e018      	b.n	800ed4e <_strtod_l+0x266>
 800ed1c:	4638      	mov	r0, r7
 800ed1e:	e7da      	b.n	800ecd6 <_strtod_l+0x1ee>
 800ed20:	2b08      	cmp	r3, #8
 800ed22:	f103 0301 	add.w	r3, r3, #1
 800ed26:	dc03      	bgt.n	800ed30 <_strtod_l+0x248>
 800ed28:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ed2a:	434e      	muls	r6, r1
 800ed2c:	960a      	str	r6, [sp, #40]	@ 0x28
 800ed2e:	e7e7      	b.n	800ed00 <_strtod_l+0x218>
 800ed30:	2b10      	cmp	r3, #16
 800ed32:	bfde      	ittt	le
 800ed34:	9e08      	ldrle	r6, [sp, #32]
 800ed36:	434e      	mulle	r6, r1
 800ed38:	9608      	strle	r6, [sp, #32]
 800ed3a:	e7e1      	b.n	800ed00 <_strtod_l+0x218>
 800ed3c:	280f      	cmp	r0, #15
 800ed3e:	dceb      	bgt.n	800ed18 <_strtod_l+0x230>
 800ed40:	9808      	ldr	r0, [sp, #32]
 800ed42:	230a      	movs	r3, #10
 800ed44:	fb03 2300 	mla	r3, r3, r0, r2
 800ed48:	9308      	str	r3, [sp, #32]
 800ed4a:	e7e5      	b.n	800ed18 <_strtod_l+0x230>
 800ed4c:	4629      	mov	r1, r5
 800ed4e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ed50:	460d      	mov	r5, r1
 800ed52:	1c50      	adds	r0, r2, #1
 800ed54:	9019      	str	r0, [sp, #100]	@ 0x64
 800ed56:	4618      	mov	r0, r3
 800ed58:	7852      	ldrb	r2, [r2, #1]
 800ed5a:	e7b1      	b.n	800ecc0 <_strtod_l+0x1d8>
 800ed5c:	f04f 0900 	mov.w	r9, #0
 800ed60:	2301      	movs	r3, #1
 800ed62:	e77c      	b.n	800ec5e <_strtod_l+0x176>
 800ed64:	f04f 0c00 	mov.w	ip, #0
 800ed68:	1ca2      	adds	r2, r4, #2
 800ed6a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ed6c:	78a2      	ldrb	r2, [r4, #2]
 800ed6e:	e784      	b.n	800ec7a <_strtod_l+0x192>
 800ed70:	f04f 0c01 	mov.w	ip, #1
 800ed74:	e7f8      	b.n	800ed68 <_strtod_l+0x280>
 800ed76:	bf00      	nop
 800ed78:	08010e78 	.word	0x08010e78
 800ed7c:	08010e60 	.word	0x08010e60
 800ed80:	7ff00000 	.word	0x7ff00000
 800ed84:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ed86:	1c51      	adds	r1, r2, #1
 800ed88:	9119      	str	r1, [sp, #100]	@ 0x64
 800ed8a:	7852      	ldrb	r2, [r2, #1]
 800ed8c:	2a30      	cmp	r2, #48	@ 0x30
 800ed8e:	d0f9      	beq.n	800ed84 <_strtod_l+0x29c>
 800ed90:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ed94:	2908      	cmp	r1, #8
 800ed96:	f63f af76 	bhi.w	800ec86 <_strtod_l+0x19e>
 800ed9a:	3a30      	subs	r2, #48	@ 0x30
 800ed9c:	f04f 080a 	mov.w	r8, #10
 800eda0:	920e      	str	r2, [sp, #56]	@ 0x38
 800eda2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800eda4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800eda6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800eda8:	1c56      	adds	r6, r2, #1
 800edaa:	9619      	str	r6, [sp, #100]	@ 0x64
 800edac:	7852      	ldrb	r2, [r2, #1]
 800edae:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800edb2:	f1be 0f09 	cmp.w	lr, #9
 800edb6:	d939      	bls.n	800ee2c <_strtod_l+0x344>
 800edb8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800edba:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800edbe:	1a76      	subs	r6, r6, r1
 800edc0:	2e08      	cmp	r6, #8
 800edc2:	dc03      	bgt.n	800edcc <_strtod_l+0x2e4>
 800edc4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800edc6:	4588      	cmp	r8, r1
 800edc8:	bfa8      	it	ge
 800edca:	4688      	movge	r8, r1
 800edcc:	f1bc 0f00 	cmp.w	ip, #0
 800edd0:	d001      	beq.n	800edd6 <_strtod_l+0x2ee>
 800edd2:	f1c8 0800 	rsb	r8, r8, #0
 800edd6:	2d00      	cmp	r5, #0
 800edd8:	d14e      	bne.n	800ee78 <_strtod_l+0x390>
 800edda:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eddc:	4308      	orrs	r0, r1
 800edde:	f47f aebc 	bne.w	800eb5a <_strtod_l+0x72>
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	f47f aed4 	bne.w	800eb90 <_strtod_l+0xa8>
 800ede8:	2a69      	cmp	r2, #105	@ 0x69
 800edea:	d028      	beq.n	800ee3e <_strtod_l+0x356>
 800edec:	dc25      	bgt.n	800ee3a <_strtod_l+0x352>
 800edee:	2a49      	cmp	r2, #73	@ 0x49
 800edf0:	d025      	beq.n	800ee3e <_strtod_l+0x356>
 800edf2:	2a4e      	cmp	r2, #78	@ 0x4e
 800edf4:	f47f aecc 	bne.w	800eb90 <_strtod_l+0xa8>
 800edf8:	499b      	ldr	r1, [pc, #620]	@ (800f068 <_strtod_l+0x580>)
 800edfa:	a819      	add	r0, sp, #100	@ 0x64
 800edfc:	f001 fb24 	bl	8010448 <__match>
 800ee00:	2800      	cmp	r0, #0
 800ee02:	f43f aec5 	beq.w	800eb90 <_strtod_l+0xa8>
 800ee06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ee08:	781b      	ldrb	r3, [r3, #0]
 800ee0a:	2b28      	cmp	r3, #40	@ 0x28
 800ee0c:	d12e      	bne.n	800ee6c <_strtod_l+0x384>
 800ee0e:	aa1c      	add	r2, sp, #112	@ 0x70
 800ee10:	4996      	ldr	r1, [pc, #600]	@ (800f06c <_strtod_l+0x584>)
 800ee12:	a819      	add	r0, sp, #100	@ 0x64
 800ee14:	f001 fb2c 	bl	8010470 <__hexnan>
 800ee18:	2805      	cmp	r0, #5
 800ee1a:	d127      	bne.n	800ee6c <_strtod_l+0x384>
 800ee1c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ee1e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ee22:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ee26:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ee2a:	e696      	b.n	800eb5a <_strtod_l+0x72>
 800ee2c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ee2e:	fb08 2101 	mla	r1, r8, r1, r2
 800ee32:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ee36:	920e      	str	r2, [sp, #56]	@ 0x38
 800ee38:	e7b5      	b.n	800eda6 <_strtod_l+0x2be>
 800ee3a:	2a6e      	cmp	r2, #110	@ 0x6e
 800ee3c:	e7da      	b.n	800edf4 <_strtod_l+0x30c>
 800ee3e:	498c      	ldr	r1, [pc, #560]	@ (800f070 <_strtod_l+0x588>)
 800ee40:	a819      	add	r0, sp, #100	@ 0x64
 800ee42:	f001 fb01 	bl	8010448 <__match>
 800ee46:	2800      	cmp	r0, #0
 800ee48:	f43f aea2 	beq.w	800eb90 <_strtod_l+0xa8>
 800ee4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ee4e:	a819      	add	r0, sp, #100	@ 0x64
 800ee50:	4988      	ldr	r1, [pc, #544]	@ (800f074 <_strtod_l+0x58c>)
 800ee52:	3b01      	subs	r3, #1
 800ee54:	9319      	str	r3, [sp, #100]	@ 0x64
 800ee56:	f001 faf7 	bl	8010448 <__match>
 800ee5a:	b910      	cbnz	r0, 800ee62 <_strtod_l+0x37a>
 800ee5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ee5e:	3301      	adds	r3, #1
 800ee60:	9319      	str	r3, [sp, #100]	@ 0x64
 800ee62:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800f084 <_strtod_l+0x59c>
 800ee66:	f04f 0a00 	mov.w	sl, #0
 800ee6a:	e676      	b.n	800eb5a <_strtod_l+0x72>
 800ee6c:	4882      	ldr	r0, [pc, #520]	@ (800f078 <_strtod_l+0x590>)
 800ee6e:	f001 f82b 	bl	800fec8 <nan>
 800ee72:	ec5b ab10 	vmov	sl, fp, d0
 800ee76:	e670      	b.n	800eb5a <_strtod_l+0x72>
 800ee78:	eba8 0309 	sub.w	r3, r8, r9
 800ee7c:	2f00      	cmp	r7, #0
 800ee7e:	bf08      	it	eq
 800ee80:	462f      	moveq	r7, r5
 800ee82:	2d10      	cmp	r5, #16
 800ee84:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ee86:	462c      	mov	r4, r5
 800ee88:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee8a:	bfa8      	it	ge
 800ee8c:	2410      	movge	r4, #16
 800ee8e:	f7f1 fb4d 	bl	800052c <__aeabi_ui2d>
 800ee92:	2d09      	cmp	r5, #9
 800ee94:	4682      	mov	sl, r0
 800ee96:	468b      	mov	fp, r1
 800ee98:	dc13      	bgt.n	800eec2 <_strtod_l+0x3da>
 800ee9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	f43f ae5c 	beq.w	800eb5a <_strtod_l+0x72>
 800eea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eea4:	dd78      	ble.n	800ef98 <_strtod_l+0x4b0>
 800eea6:	2b16      	cmp	r3, #22
 800eea8:	dc5f      	bgt.n	800ef6a <_strtod_l+0x482>
 800eeaa:	4974      	ldr	r1, [pc, #464]	@ (800f07c <_strtod_l+0x594>)
 800eeac:	4652      	mov	r2, sl
 800eeae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800eeb2:	465b      	mov	r3, fp
 800eeb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eeb8:	f7f1 fbb2 	bl	8000620 <__aeabi_dmul>
 800eebc:	4682      	mov	sl, r0
 800eebe:	468b      	mov	fp, r1
 800eec0:	e64b      	b.n	800eb5a <_strtod_l+0x72>
 800eec2:	4b6e      	ldr	r3, [pc, #440]	@ (800f07c <_strtod_l+0x594>)
 800eec4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eec8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800eecc:	f7f1 fba8 	bl	8000620 <__aeabi_dmul>
 800eed0:	4682      	mov	sl, r0
 800eed2:	468b      	mov	fp, r1
 800eed4:	9808      	ldr	r0, [sp, #32]
 800eed6:	f7f1 fb29 	bl	800052c <__aeabi_ui2d>
 800eeda:	4602      	mov	r2, r0
 800eedc:	460b      	mov	r3, r1
 800eede:	4650      	mov	r0, sl
 800eee0:	4659      	mov	r1, fp
 800eee2:	f7f1 f9e7 	bl	80002b4 <__adddf3>
 800eee6:	2d0f      	cmp	r5, #15
 800eee8:	4682      	mov	sl, r0
 800eeea:	468b      	mov	fp, r1
 800eeec:	ddd5      	ble.n	800ee9a <_strtod_l+0x3b2>
 800eeee:	1b2c      	subs	r4, r5, r4
 800eef0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eef2:	441c      	add	r4, r3
 800eef4:	2c00      	cmp	r4, #0
 800eef6:	f340 8096 	ble.w	800f026 <_strtod_l+0x53e>
 800eefa:	f014 030f 	ands.w	r3, r4, #15
 800eefe:	d00a      	beq.n	800ef16 <_strtod_l+0x42e>
 800ef00:	495e      	ldr	r1, [pc, #376]	@ (800f07c <_strtod_l+0x594>)
 800ef02:	4652      	mov	r2, sl
 800ef04:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ef08:	465b      	mov	r3, fp
 800ef0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef0e:	f7f1 fb87 	bl	8000620 <__aeabi_dmul>
 800ef12:	4682      	mov	sl, r0
 800ef14:	468b      	mov	fp, r1
 800ef16:	f034 040f 	bics.w	r4, r4, #15
 800ef1a:	d073      	beq.n	800f004 <_strtod_l+0x51c>
 800ef1c:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ef20:	dd48      	ble.n	800efb4 <_strtod_l+0x4cc>
 800ef22:	2400      	movs	r4, #0
 800ef24:	46a0      	mov	r8, r4
 800ef26:	46a1      	mov	r9, r4
 800ef28:	940a      	str	r4, [sp, #40]	@ 0x28
 800ef2a:	2322      	movs	r3, #34	@ 0x22
 800ef2c:	9a05      	ldr	r2, [sp, #20]
 800ef2e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800f084 <_strtod_l+0x59c>
 800ef32:	f04f 0a00 	mov.w	sl, #0
 800ef36:	6013      	str	r3, [r2, #0]
 800ef38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	f43f ae0d 	beq.w	800eb5a <_strtod_l+0x72>
 800ef40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ef42:	9805      	ldr	r0, [sp, #20]
 800ef44:	f7ff f934 	bl	800e1b0 <_Bfree>
 800ef48:	4649      	mov	r1, r9
 800ef4a:	9805      	ldr	r0, [sp, #20]
 800ef4c:	f7ff f930 	bl	800e1b0 <_Bfree>
 800ef50:	4641      	mov	r1, r8
 800ef52:	9805      	ldr	r0, [sp, #20]
 800ef54:	f7ff f92c 	bl	800e1b0 <_Bfree>
 800ef58:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ef5a:	9805      	ldr	r0, [sp, #20]
 800ef5c:	f7ff f928 	bl	800e1b0 <_Bfree>
 800ef60:	4621      	mov	r1, r4
 800ef62:	9805      	ldr	r0, [sp, #20]
 800ef64:	f7ff f924 	bl	800e1b0 <_Bfree>
 800ef68:	e5f7      	b.n	800eb5a <_strtod_l+0x72>
 800ef6a:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ef6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ef70:	4293      	cmp	r3, r2
 800ef72:	dbbc      	blt.n	800eeee <_strtod_l+0x406>
 800ef74:	f1c5 050f 	rsb	r5, r5, #15
 800ef78:	4c40      	ldr	r4, [pc, #256]	@ (800f07c <_strtod_l+0x594>)
 800ef7a:	4652      	mov	r2, sl
 800ef7c:	465b      	mov	r3, fp
 800ef7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ef82:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef86:	f7f1 fb4b 	bl	8000620 <__aeabi_dmul>
 800ef8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef8c:	1b5d      	subs	r5, r3, r5
 800ef8e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ef92:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ef96:	e78f      	b.n	800eeb8 <_strtod_l+0x3d0>
 800ef98:	3316      	adds	r3, #22
 800ef9a:	dba8      	blt.n	800eeee <_strtod_l+0x406>
 800ef9c:	eba9 0808 	sub.w	r8, r9, r8
 800efa0:	4b36      	ldr	r3, [pc, #216]	@ (800f07c <_strtod_l+0x594>)
 800efa2:	4650      	mov	r0, sl
 800efa4:	4659      	mov	r1, fp
 800efa6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800efaa:	e9d8 2300 	ldrd	r2, r3, [r8]
 800efae:	f7f1 fc61 	bl	8000874 <__aeabi_ddiv>
 800efb2:	e783      	b.n	800eebc <_strtod_l+0x3d4>
 800efb4:	4b32      	ldr	r3, [pc, #200]	@ (800f080 <_strtod_l+0x598>)
 800efb6:	1124      	asrs	r4, r4, #4
 800efb8:	4650      	mov	r0, sl
 800efba:	4659      	mov	r1, fp
 800efbc:	9308      	str	r3, [sp, #32]
 800efbe:	2300      	movs	r3, #0
 800efc0:	461e      	mov	r6, r3
 800efc2:	2c01      	cmp	r4, #1
 800efc4:	dc21      	bgt.n	800f00a <_strtod_l+0x522>
 800efc6:	b10b      	cbz	r3, 800efcc <_strtod_l+0x4e4>
 800efc8:	4682      	mov	sl, r0
 800efca:	468b      	mov	fp, r1
 800efcc:	492c      	ldr	r1, [pc, #176]	@ (800f080 <_strtod_l+0x598>)
 800efce:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800efd2:	4652      	mov	r2, sl
 800efd4:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800efd8:	465b      	mov	r3, fp
 800efda:	e9d1 0100 	ldrd	r0, r1, [r1]
 800efde:	f7f1 fb1f 	bl	8000620 <__aeabi_dmul>
 800efe2:	4b28      	ldr	r3, [pc, #160]	@ (800f084 <_strtod_l+0x59c>)
 800efe4:	460a      	mov	r2, r1
 800efe6:	4682      	mov	sl, r0
 800efe8:	400b      	ands	r3, r1
 800efea:	4927      	ldr	r1, [pc, #156]	@ (800f088 <_strtod_l+0x5a0>)
 800efec:	428b      	cmp	r3, r1
 800efee:	d898      	bhi.n	800ef22 <_strtod_l+0x43a>
 800eff0:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800eff4:	428b      	cmp	r3, r1
 800eff6:	bf86      	itte	hi
 800eff8:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800f08c <_strtod_l+0x5a4>
 800effc:	f04f 3aff 	movhi.w	sl, #4294967295
 800f000:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f004:	2300      	movs	r3, #0
 800f006:	9308      	str	r3, [sp, #32]
 800f008:	e07a      	b.n	800f100 <_strtod_l+0x618>
 800f00a:	07e2      	lsls	r2, r4, #31
 800f00c:	d505      	bpl.n	800f01a <_strtod_l+0x532>
 800f00e:	9b08      	ldr	r3, [sp, #32]
 800f010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f014:	f7f1 fb04 	bl	8000620 <__aeabi_dmul>
 800f018:	2301      	movs	r3, #1
 800f01a:	9a08      	ldr	r2, [sp, #32]
 800f01c:	3601      	adds	r6, #1
 800f01e:	1064      	asrs	r4, r4, #1
 800f020:	3208      	adds	r2, #8
 800f022:	9208      	str	r2, [sp, #32]
 800f024:	e7cd      	b.n	800efc2 <_strtod_l+0x4da>
 800f026:	d0ed      	beq.n	800f004 <_strtod_l+0x51c>
 800f028:	4264      	negs	r4, r4
 800f02a:	f014 020f 	ands.w	r2, r4, #15
 800f02e:	d00a      	beq.n	800f046 <_strtod_l+0x55e>
 800f030:	4b12      	ldr	r3, [pc, #72]	@ (800f07c <_strtod_l+0x594>)
 800f032:	4650      	mov	r0, sl
 800f034:	4659      	mov	r1, fp
 800f036:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f03e:	f7f1 fc19 	bl	8000874 <__aeabi_ddiv>
 800f042:	4682      	mov	sl, r0
 800f044:	468b      	mov	fp, r1
 800f046:	1124      	asrs	r4, r4, #4
 800f048:	d0dc      	beq.n	800f004 <_strtod_l+0x51c>
 800f04a:	2c1f      	cmp	r4, #31
 800f04c:	dd20      	ble.n	800f090 <_strtod_l+0x5a8>
 800f04e:	2400      	movs	r4, #0
 800f050:	46a0      	mov	r8, r4
 800f052:	46a1      	mov	r9, r4
 800f054:	940a      	str	r4, [sp, #40]	@ 0x28
 800f056:	2322      	movs	r3, #34	@ 0x22
 800f058:	9a05      	ldr	r2, [sp, #20]
 800f05a:	f04f 0a00 	mov.w	sl, #0
 800f05e:	f04f 0b00 	mov.w	fp, #0
 800f062:	6013      	str	r3, [r2, #0]
 800f064:	e768      	b.n	800ef38 <_strtod_l+0x450>
 800f066:	bf00      	nop
 800f068:	08010c4e 	.word	0x08010c4e
 800f06c:	08010e64 	.word	0x08010e64
 800f070:	08010c46 	.word	0x08010c46
 800f074:	08010c7d 	.word	0x08010c7d
 800f078:	08010f0c 	.word	0x08010f0c
 800f07c:	08010d98 	.word	0x08010d98
 800f080:	08010d70 	.word	0x08010d70
 800f084:	7ff00000 	.word	0x7ff00000
 800f088:	7ca00000 	.word	0x7ca00000
 800f08c:	7fefffff 	.word	0x7fefffff
 800f090:	f014 0310 	ands.w	r3, r4, #16
 800f094:	4650      	mov	r0, sl
 800f096:	4659      	mov	r1, fp
 800f098:	4ea9      	ldr	r6, [pc, #676]	@ (800f340 <_strtod_l+0x858>)
 800f09a:	bf18      	it	ne
 800f09c:	236a      	movne	r3, #106	@ 0x6a
 800f09e:	9308      	str	r3, [sp, #32]
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	07e2      	lsls	r2, r4, #31
 800f0a4:	d504      	bpl.n	800f0b0 <_strtod_l+0x5c8>
 800f0a6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f0aa:	f7f1 fab9 	bl	8000620 <__aeabi_dmul>
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	1064      	asrs	r4, r4, #1
 800f0b2:	f106 0608 	add.w	r6, r6, #8
 800f0b6:	d1f4      	bne.n	800f0a2 <_strtod_l+0x5ba>
 800f0b8:	b10b      	cbz	r3, 800f0be <_strtod_l+0x5d6>
 800f0ba:	4682      	mov	sl, r0
 800f0bc:	468b      	mov	fp, r1
 800f0be:	9b08      	ldr	r3, [sp, #32]
 800f0c0:	b1b3      	cbz	r3, 800f0f0 <_strtod_l+0x608>
 800f0c2:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f0c6:	4659      	mov	r1, fp
 800f0c8:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	dd0f      	ble.n	800f0f0 <_strtod_l+0x608>
 800f0d0:	2b1f      	cmp	r3, #31
 800f0d2:	dd55      	ble.n	800f180 <_strtod_l+0x698>
 800f0d4:	2b34      	cmp	r3, #52	@ 0x34
 800f0d6:	f04f 0a00 	mov.w	sl, #0
 800f0da:	bfdb      	ittet	le
 800f0dc:	f04f 33ff 	movle.w	r3, #4294967295
 800f0e0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f0e4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f0e8:	4093      	lslle	r3, r2
 800f0ea:	bfd8      	it	le
 800f0ec:	ea03 0b01 	andle.w	fp, r3, r1
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	4650      	mov	r0, sl
 800f0f6:	4659      	mov	r1, fp
 800f0f8:	f7f1 fcfa 	bl	8000af0 <__aeabi_dcmpeq>
 800f0fc:	2800      	cmp	r0, #0
 800f0fe:	d1a6      	bne.n	800f04e <_strtod_l+0x566>
 800f100:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f102:	463a      	mov	r2, r7
 800f104:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f106:	9300      	str	r3, [sp, #0]
 800f108:	462b      	mov	r3, r5
 800f10a:	9805      	ldr	r0, [sp, #20]
 800f10c:	f7ff f8ba 	bl	800e284 <__s2b>
 800f110:	900a      	str	r0, [sp, #40]	@ 0x28
 800f112:	2800      	cmp	r0, #0
 800f114:	f43f af05 	beq.w	800ef22 <_strtod_l+0x43a>
 800f118:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f11a:	eba9 0308 	sub.w	r3, r9, r8
 800f11e:	2400      	movs	r4, #0
 800f120:	2a00      	cmp	r2, #0
 800f122:	46a0      	mov	r8, r4
 800f124:	bfa8      	it	ge
 800f126:	2300      	movge	r3, #0
 800f128:	9312      	str	r3, [sp, #72]	@ 0x48
 800f12a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f12e:	9316      	str	r3, [sp, #88]	@ 0x58
 800f130:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f132:	9805      	ldr	r0, [sp, #20]
 800f134:	6859      	ldr	r1, [r3, #4]
 800f136:	f7fe fffb 	bl	800e130 <_Balloc>
 800f13a:	4681      	mov	r9, r0
 800f13c:	2800      	cmp	r0, #0
 800f13e:	f43f aef4 	beq.w	800ef2a <_strtod_l+0x442>
 800f142:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f144:	300c      	adds	r0, #12
 800f146:	691a      	ldr	r2, [r3, #16]
 800f148:	f103 010c 	add.w	r1, r3, #12
 800f14c:	3202      	adds	r2, #2
 800f14e:	0092      	lsls	r2, r2, #2
 800f150:	f7fe f889 	bl	800d266 <memcpy>
 800f154:	aa1c      	add	r2, sp, #112	@ 0x70
 800f156:	a91b      	add	r1, sp, #108	@ 0x6c
 800f158:	9805      	ldr	r0, [sp, #20]
 800f15a:	ec4b ab10 	vmov	d0, sl, fp
 800f15e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f162:	f7ff fbd3 	bl	800e90c <__d2b>
 800f166:	901a      	str	r0, [sp, #104]	@ 0x68
 800f168:	2800      	cmp	r0, #0
 800f16a:	f43f aede 	beq.w	800ef2a <_strtod_l+0x442>
 800f16e:	2101      	movs	r1, #1
 800f170:	9805      	ldr	r0, [sp, #20]
 800f172:	f7ff f91d 	bl	800e3b0 <__i2b>
 800f176:	4680      	mov	r8, r0
 800f178:	b948      	cbnz	r0, 800f18e <_strtod_l+0x6a6>
 800f17a:	f04f 0800 	mov.w	r8, #0
 800f17e:	e6d4      	b.n	800ef2a <_strtod_l+0x442>
 800f180:	f04f 32ff 	mov.w	r2, #4294967295
 800f184:	fa02 f303 	lsl.w	r3, r2, r3
 800f188:	ea03 0a0a 	and.w	sl, r3, sl
 800f18c:	e7b0      	b.n	800f0f0 <_strtod_l+0x608>
 800f18e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f190:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f192:	2d00      	cmp	r5, #0
 800f194:	bfa9      	itett	ge
 800f196:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f198:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f19a:	18ef      	addge	r7, r5, r3
 800f19c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f19e:	bfb8      	it	lt
 800f1a0:	1b5e      	sublt	r6, r3, r5
 800f1a2:	9b08      	ldr	r3, [sp, #32]
 800f1a4:	bfb8      	it	lt
 800f1a6:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f1a8:	1aed      	subs	r5, r5, r3
 800f1aa:	4b66      	ldr	r3, [pc, #408]	@ (800f344 <_strtod_l+0x85c>)
 800f1ac:	4415      	add	r5, r2
 800f1ae:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f1b2:	3d01      	subs	r5, #1
 800f1b4:	429d      	cmp	r5, r3
 800f1b6:	da4f      	bge.n	800f258 <_strtod_l+0x770>
 800f1b8:	1b5b      	subs	r3, r3, r5
 800f1ba:	2101      	movs	r1, #1
 800f1bc:	2b1f      	cmp	r3, #31
 800f1be:	eba2 0203 	sub.w	r2, r2, r3
 800f1c2:	dc3d      	bgt.n	800f240 <_strtod_l+0x758>
 800f1c4:	fa01 f303 	lsl.w	r3, r1, r3
 800f1c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	9310      	str	r3, [sp, #64]	@ 0x40
 800f1ce:	18bd      	adds	r5, r7, r2
 800f1d0:	9b08      	ldr	r3, [sp, #32]
 800f1d2:	4416      	add	r6, r2
 800f1d4:	42af      	cmp	r7, r5
 800f1d6:	441e      	add	r6, r3
 800f1d8:	463b      	mov	r3, r7
 800f1da:	bfa8      	it	ge
 800f1dc:	462b      	movge	r3, r5
 800f1de:	42b3      	cmp	r3, r6
 800f1e0:	bfa8      	it	ge
 800f1e2:	4633      	movge	r3, r6
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	bfc2      	ittt	gt
 800f1e8:	1aed      	subgt	r5, r5, r3
 800f1ea:	1af6      	subgt	r6, r6, r3
 800f1ec:	1aff      	subgt	r7, r7, r3
 800f1ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	dd16      	ble.n	800f222 <_strtod_l+0x73a>
 800f1f4:	4641      	mov	r1, r8
 800f1f6:	461a      	mov	r2, r3
 800f1f8:	9805      	ldr	r0, [sp, #20]
 800f1fa:	f7ff f999 	bl	800e530 <__pow5mult>
 800f1fe:	4680      	mov	r8, r0
 800f200:	2800      	cmp	r0, #0
 800f202:	d0ba      	beq.n	800f17a <_strtod_l+0x692>
 800f204:	4601      	mov	r1, r0
 800f206:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f208:	9805      	ldr	r0, [sp, #20]
 800f20a:	f7ff f8e7 	bl	800e3dc <__multiply>
 800f20e:	900e      	str	r0, [sp, #56]	@ 0x38
 800f210:	2800      	cmp	r0, #0
 800f212:	f43f ae8a 	beq.w	800ef2a <_strtod_l+0x442>
 800f216:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f218:	9805      	ldr	r0, [sp, #20]
 800f21a:	f7fe ffc9 	bl	800e1b0 <_Bfree>
 800f21e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f220:	931a      	str	r3, [sp, #104]	@ 0x68
 800f222:	2d00      	cmp	r5, #0
 800f224:	dc1d      	bgt.n	800f262 <_strtod_l+0x77a>
 800f226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f228:	2b00      	cmp	r3, #0
 800f22a:	dd23      	ble.n	800f274 <_strtod_l+0x78c>
 800f22c:	4649      	mov	r1, r9
 800f22e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f230:	9805      	ldr	r0, [sp, #20]
 800f232:	f7ff f97d 	bl	800e530 <__pow5mult>
 800f236:	4681      	mov	r9, r0
 800f238:	b9e0      	cbnz	r0, 800f274 <_strtod_l+0x78c>
 800f23a:	f04f 0900 	mov.w	r9, #0
 800f23e:	e674      	b.n	800ef2a <_strtod_l+0x442>
 800f240:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f244:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f246:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f24a:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f24e:	35e2      	adds	r5, #226	@ 0xe2
 800f250:	fa01 f305 	lsl.w	r3, r1, r5
 800f254:	9310      	str	r3, [sp, #64]	@ 0x40
 800f256:	e7ba      	b.n	800f1ce <_strtod_l+0x6e6>
 800f258:	2300      	movs	r3, #0
 800f25a:	9310      	str	r3, [sp, #64]	@ 0x40
 800f25c:	2301      	movs	r3, #1
 800f25e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f260:	e7b5      	b.n	800f1ce <_strtod_l+0x6e6>
 800f262:	462a      	mov	r2, r5
 800f264:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f266:	9805      	ldr	r0, [sp, #20]
 800f268:	f7ff f9bc 	bl	800e5e4 <__lshift>
 800f26c:	901a      	str	r0, [sp, #104]	@ 0x68
 800f26e:	2800      	cmp	r0, #0
 800f270:	d1d9      	bne.n	800f226 <_strtod_l+0x73e>
 800f272:	e65a      	b.n	800ef2a <_strtod_l+0x442>
 800f274:	2e00      	cmp	r6, #0
 800f276:	dd07      	ble.n	800f288 <_strtod_l+0x7a0>
 800f278:	4649      	mov	r1, r9
 800f27a:	4632      	mov	r2, r6
 800f27c:	9805      	ldr	r0, [sp, #20]
 800f27e:	f7ff f9b1 	bl	800e5e4 <__lshift>
 800f282:	4681      	mov	r9, r0
 800f284:	2800      	cmp	r0, #0
 800f286:	d0d8      	beq.n	800f23a <_strtod_l+0x752>
 800f288:	2f00      	cmp	r7, #0
 800f28a:	dd08      	ble.n	800f29e <_strtod_l+0x7b6>
 800f28c:	4641      	mov	r1, r8
 800f28e:	463a      	mov	r2, r7
 800f290:	9805      	ldr	r0, [sp, #20]
 800f292:	f7ff f9a7 	bl	800e5e4 <__lshift>
 800f296:	4680      	mov	r8, r0
 800f298:	2800      	cmp	r0, #0
 800f29a:	f43f ae46 	beq.w	800ef2a <_strtod_l+0x442>
 800f29e:	464a      	mov	r2, r9
 800f2a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f2a2:	9805      	ldr	r0, [sp, #20]
 800f2a4:	f7ff fa26 	bl	800e6f4 <__mdiff>
 800f2a8:	4604      	mov	r4, r0
 800f2aa:	2800      	cmp	r0, #0
 800f2ac:	f43f ae3d 	beq.w	800ef2a <_strtod_l+0x442>
 800f2b0:	68c3      	ldr	r3, [r0, #12]
 800f2b2:	4641      	mov	r1, r8
 800f2b4:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	60c3      	str	r3, [r0, #12]
 800f2ba:	f7ff f9ff 	bl	800e6bc <__mcmp>
 800f2be:	2800      	cmp	r0, #0
 800f2c0:	da46      	bge.n	800f350 <_strtod_l+0x868>
 800f2c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f2c4:	ea53 030a 	orrs.w	r3, r3, sl
 800f2c8:	d16c      	bne.n	800f3a4 <_strtod_l+0x8bc>
 800f2ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d168      	bne.n	800f3a4 <_strtod_l+0x8bc>
 800f2d2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f2d6:	0d1b      	lsrs	r3, r3, #20
 800f2d8:	051b      	lsls	r3, r3, #20
 800f2da:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f2de:	d961      	bls.n	800f3a4 <_strtod_l+0x8bc>
 800f2e0:	6963      	ldr	r3, [r4, #20]
 800f2e2:	b913      	cbnz	r3, 800f2ea <_strtod_l+0x802>
 800f2e4:	6923      	ldr	r3, [r4, #16]
 800f2e6:	2b01      	cmp	r3, #1
 800f2e8:	dd5c      	ble.n	800f3a4 <_strtod_l+0x8bc>
 800f2ea:	4621      	mov	r1, r4
 800f2ec:	2201      	movs	r2, #1
 800f2ee:	9805      	ldr	r0, [sp, #20]
 800f2f0:	f7ff f978 	bl	800e5e4 <__lshift>
 800f2f4:	4641      	mov	r1, r8
 800f2f6:	4604      	mov	r4, r0
 800f2f8:	f7ff f9e0 	bl	800e6bc <__mcmp>
 800f2fc:	2800      	cmp	r0, #0
 800f2fe:	dd51      	ble.n	800f3a4 <_strtod_l+0x8bc>
 800f300:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f304:	9a08      	ldr	r2, [sp, #32]
 800f306:	0d1b      	lsrs	r3, r3, #20
 800f308:	051b      	lsls	r3, r3, #20
 800f30a:	2a00      	cmp	r2, #0
 800f30c:	d06b      	beq.n	800f3e6 <_strtod_l+0x8fe>
 800f30e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f312:	d868      	bhi.n	800f3e6 <_strtod_l+0x8fe>
 800f314:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f318:	f67f ae9d 	bls.w	800f056 <_strtod_l+0x56e>
 800f31c:	4b0a      	ldr	r3, [pc, #40]	@ (800f348 <_strtod_l+0x860>)
 800f31e:	4650      	mov	r0, sl
 800f320:	4659      	mov	r1, fp
 800f322:	2200      	movs	r2, #0
 800f324:	f7f1 f97c 	bl	8000620 <__aeabi_dmul>
 800f328:	4b08      	ldr	r3, [pc, #32]	@ (800f34c <_strtod_l+0x864>)
 800f32a:	4682      	mov	sl, r0
 800f32c:	468b      	mov	fp, r1
 800f32e:	400b      	ands	r3, r1
 800f330:	2b00      	cmp	r3, #0
 800f332:	f47f ae05 	bne.w	800ef40 <_strtod_l+0x458>
 800f336:	2322      	movs	r3, #34	@ 0x22
 800f338:	9a05      	ldr	r2, [sp, #20]
 800f33a:	6013      	str	r3, [r2, #0]
 800f33c:	e600      	b.n	800ef40 <_strtod_l+0x458>
 800f33e:	bf00      	nop
 800f340:	08010e90 	.word	0x08010e90
 800f344:	fffffc02 	.word	0xfffffc02
 800f348:	39500000 	.word	0x39500000
 800f34c:	7ff00000 	.word	0x7ff00000
 800f350:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f354:	d165      	bne.n	800f422 <_strtod_l+0x93a>
 800f356:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f358:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f35c:	b35a      	cbz	r2, 800f3b6 <_strtod_l+0x8ce>
 800f35e:	4a9e      	ldr	r2, [pc, #632]	@ (800f5d8 <_strtod_l+0xaf0>)
 800f360:	4293      	cmp	r3, r2
 800f362:	d12b      	bne.n	800f3bc <_strtod_l+0x8d4>
 800f364:	9b08      	ldr	r3, [sp, #32]
 800f366:	4651      	mov	r1, sl
 800f368:	b303      	cbz	r3, 800f3ac <_strtod_l+0x8c4>
 800f36a:	465a      	mov	r2, fp
 800f36c:	4b9b      	ldr	r3, [pc, #620]	@ (800f5dc <_strtod_l+0xaf4>)
 800f36e:	4013      	ands	r3, r2
 800f370:	f04f 32ff 	mov.w	r2, #4294967295
 800f374:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f378:	d81b      	bhi.n	800f3b2 <_strtod_l+0x8ca>
 800f37a:	0d1b      	lsrs	r3, r3, #20
 800f37c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f380:	fa02 f303 	lsl.w	r3, r2, r3
 800f384:	4299      	cmp	r1, r3
 800f386:	d119      	bne.n	800f3bc <_strtod_l+0x8d4>
 800f388:	4b95      	ldr	r3, [pc, #596]	@ (800f5e0 <_strtod_l+0xaf8>)
 800f38a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f38c:	429a      	cmp	r2, r3
 800f38e:	d102      	bne.n	800f396 <_strtod_l+0x8ae>
 800f390:	3101      	adds	r1, #1
 800f392:	f43f adca 	beq.w	800ef2a <_strtod_l+0x442>
 800f396:	4b91      	ldr	r3, [pc, #580]	@ (800f5dc <_strtod_l+0xaf4>)
 800f398:	f04f 0a00 	mov.w	sl, #0
 800f39c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f39e:	401a      	ands	r2, r3
 800f3a0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f3a4:	9b08      	ldr	r3, [sp, #32]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d1b8      	bne.n	800f31c <_strtod_l+0x834>
 800f3aa:	e5c9      	b.n	800ef40 <_strtod_l+0x458>
 800f3ac:	f04f 33ff 	mov.w	r3, #4294967295
 800f3b0:	e7e8      	b.n	800f384 <_strtod_l+0x89c>
 800f3b2:	4613      	mov	r3, r2
 800f3b4:	e7e6      	b.n	800f384 <_strtod_l+0x89c>
 800f3b6:	ea53 030a 	orrs.w	r3, r3, sl
 800f3ba:	d0a1      	beq.n	800f300 <_strtod_l+0x818>
 800f3bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f3be:	b1db      	cbz	r3, 800f3f8 <_strtod_l+0x910>
 800f3c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f3c2:	4213      	tst	r3, r2
 800f3c4:	d0ee      	beq.n	800f3a4 <_strtod_l+0x8bc>
 800f3c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f3c8:	4650      	mov	r0, sl
 800f3ca:	9a08      	ldr	r2, [sp, #32]
 800f3cc:	4659      	mov	r1, fp
 800f3ce:	b1bb      	cbz	r3, 800f400 <_strtod_l+0x918>
 800f3d0:	f7ff fb6a 	bl	800eaa8 <sulp>
 800f3d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f3d8:	ec53 2b10 	vmov	r2, r3, d0
 800f3dc:	f7f0 ff6a 	bl	80002b4 <__adddf3>
 800f3e0:	4682      	mov	sl, r0
 800f3e2:	468b      	mov	fp, r1
 800f3e4:	e7de      	b.n	800f3a4 <_strtod_l+0x8bc>
 800f3e6:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f3ea:	f04f 3aff 	mov.w	sl, #4294967295
 800f3ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f3f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f3f6:	e7d5      	b.n	800f3a4 <_strtod_l+0x8bc>
 800f3f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f3fa:	ea13 0f0a 	tst.w	r3, sl
 800f3fe:	e7e1      	b.n	800f3c4 <_strtod_l+0x8dc>
 800f400:	f7ff fb52 	bl	800eaa8 <sulp>
 800f404:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f408:	ec53 2b10 	vmov	r2, r3, d0
 800f40c:	f7f0 ff50 	bl	80002b0 <__aeabi_dsub>
 800f410:	2200      	movs	r2, #0
 800f412:	2300      	movs	r3, #0
 800f414:	4682      	mov	sl, r0
 800f416:	468b      	mov	fp, r1
 800f418:	f7f1 fb6a 	bl	8000af0 <__aeabi_dcmpeq>
 800f41c:	2800      	cmp	r0, #0
 800f41e:	d0c1      	beq.n	800f3a4 <_strtod_l+0x8bc>
 800f420:	e619      	b.n	800f056 <_strtod_l+0x56e>
 800f422:	4641      	mov	r1, r8
 800f424:	4620      	mov	r0, r4
 800f426:	f7ff fac9 	bl	800e9bc <__ratio>
 800f42a:	2200      	movs	r2, #0
 800f42c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f430:	ec57 6b10 	vmov	r6, r7, d0
 800f434:	4630      	mov	r0, r6
 800f436:	4639      	mov	r1, r7
 800f438:	f7f1 fb6e 	bl	8000b18 <__aeabi_dcmple>
 800f43c:	2800      	cmp	r0, #0
 800f43e:	d06f      	beq.n	800f520 <_strtod_l+0xa38>
 800f440:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f442:	2b00      	cmp	r3, #0
 800f444:	d17a      	bne.n	800f53c <_strtod_l+0xa54>
 800f446:	f1ba 0f00 	cmp.w	sl, #0
 800f44a:	d158      	bne.n	800f4fe <_strtod_l+0xa16>
 800f44c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f44e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f452:	2b00      	cmp	r3, #0
 800f454:	d15a      	bne.n	800f50c <_strtod_l+0xa24>
 800f456:	2200      	movs	r2, #0
 800f458:	4b62      	ldr	r3, [pc, #392]	@ (800f5e4 <_strtod_l+0xafc>)
 800f45a:	4630      	mov	r0, r6
 800f45c:	4639      	mov	r1, r7
 800f45e:	f7f1 fb51 	bl	8000b04 <__aeabi_dcmplt>
 800f462:	2800      	cmp	r0, #0
 800f464:	d159      	bne.n	800f51a <_strtod_l+0xa32>
 800f466:	4630      	mov	r0, r6
 800f468:	4639      	mov	r1, r7
 800f46a:	2200      	movs	r2, #0
 800f46c:	4b5e      	ldr	r3, [pc, #376]	@ (800f5e8 <_strtod_l+0xb00>)
 800f46e:	f7f1 f8d7 	bl	8000620 <__aeabi_dmul>
 800f472:	4606      	mov	r6, r0
 800f474:	460f      	mov	r7, r1
 800f476:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f47a:	9606      	str	r6, [sp, #24]
 800f47c:	9307      	str	r3, [sp, #28]
 800f47e:	4d57      	ldr	r5, [pc, #348]	@ (800f5dc <_strtod_l+0xaf4>)
 800f480:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f484:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f488:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f48a:	401d      	ands	r5, r3
 800f48c:	4b57      	ldr	r3, [pc, #348]	@ (800f5ec <_strtod_l+0xb04>)
 800f48e:	429d      	cmp	r5, r3
 800f490:	f040 80b0 	bne.w	800f5f4 <_strtod_l+0xb0c>
 800f494:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f496:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f49a:	ec4b ab10 	vmov	d0, sl, fp
 800f49e:	f7ff f9c1 	bl	800e824 <__ulp>
 800f4a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f4a6:	ec51 0b10 	vmov	r0, r1, d0
 800f4aa:	f7f1 f8b9 	bl	8000620 <__aeabi_dmul>
 800f4ae:	4652      	mov	r2, sl
 800f4b0:	465b      	mov	r3, fp
 800f4b2:	f7f0 feff 	bl	80002b4 <__adddf3>
 800f4b6:	460b      	mov	r3, r1
 800f4b8:	4948      	ldr	r1, [pc, #288]	@ (800f5dc <_strtod_l+0xaf4>)
 800f4ba:	4682      	mov	sl, r0
 800f4bc:	4a4c      	ldr	r2, [pc, #304]	@ (800f5f0 <_strtod_l+0xb08>)
 800f4be:	4019      	ands	r1, r3
 800f4c0:	4291      	cmp	r1, r2
 800f4c2:	d942      	bls.n	800f54a <_strtod_l+0xa62>
 800f4c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f4c6:	4b46      	ldr	r3, [pc, #280]	@ (800f5e0 <_strtod_l+0xaf8>)
 800f4c8:	429a      	cmp	r2, r3
 800f4ca:	d103      	bne.n	800f4d4 <_strtod_l+0x9ec>
 800f4cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f4ce:	3301      	adds	r3, #1
 800f4d0:	f43f ad2b 	beq.w	800ef2a <_strtod_l+0x442>
 800f4d4:	f8df b108 	ldr.w	fp, [pc, #264]	@ 800f5e0 <_strtod_l+0xaf8>
 800f4d8:	f04f 3aff 	mov.w	sl, #4294967295
 800f4dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f4de:	9805      	ldr	r0, [sp, #20]
 800f4e0:	f7fe fe66 	bl	800e1b0 <_Bfree>
 800f4e4:	4649      	mov	r1, r9
 800f4e6:	9805      	ldr	r0, [sp, #20]
 800f4e8:	f7fe fe62 	bl	800e1b0 <_Bfree>
 800f4ec:	4641      	mov	r1, r8
 800f4ee:	9805      	ldr	r0, [sp, #20]
 800f4f0:	f7fe fe5e 	bl	800e1b0 <_Bfree>
 800f4f4:	4621      	mov	r1, r4
 800f4f6:	9805      	ldr	r0, [sp, #20]
 800f4f8:	f7fe fe5a 	bl	800e1b0 <_Bfree>
 800f4fc:	e618      	b.n	800f130 <_strtod_l+0x648>
 800f4fe:	f1ba 0f01 	cmp.w	sl, #1
 800f502:	d103      	bne.n	800f50c <_strtod_l+0xa24>
 800f504:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f506:	2b00      	cmp	r3, #0
 800f508:	f43f ada5 	beq.w	800f056 <_strtod_l+0x56e>
 800f50c:	2600      	movs	r6, #0
 800f50e:	4f35      	ldr	r7, [pc, #212]	@ (800f5e4 <_strtod_l+0xafc>)
 800f510:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 800f5b8 <_strtod_l+0xad0>
 800f514:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f518:	e7b1      	b.n	800f47e <_strtod_l+0x996>
 800f51a:	2600      	movs	r6, #0
 800f51c:	4f32      	ldr	r7, [pc, #200]	@ (800f5e8 <_strtod_l+0xb00>)
 800f51e:	e7aa      	b.n	800f476 <_strtod_l+0x98e>
 800f520:	4b31      	ldr	r3, [pc, #196]	@ (800f5e8 <_strtod_l+0xb00>)
 800f522:	4630      	mov	r0, r6
 800f524:	4639      	mov	r1, r7
 800f526:	2200      	movs	r2, #0
 800f528:	f7f1 f87a 	bl	8000620 <__aeabi_dmul>
 800f52c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f52e:	4606      	mov	r6, r0
 800f530:	460f      	mov	r7, r1
 800f532:	2b00      	cmp	r3, #0
 800f534:	d09f      	beq.n	800f476 <_strtod_l+0x98e>
 800f536:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f53a:	e7a0      	b.n	800f47e <_strtod_l+0x996>
 800f53c:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800f5c0 <_strtod_l+0xad8>
 800f540:	ec57 6b17 	vmov	r6, r7, d7
 800f544:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f548:	e799      	b.n	800f47e <_strtod_l+0x996>
 800f54a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f54e:	9b08      	ldr	r3, [sp, #32]
 800f550:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f554:	2b00      	cmp	r3, #0
 800f556:	d1c1      	bne.n	800f4dc <_strtod_l+0x9f4>
 800f558:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f55c:	0d1b      	lsrs	r3, r3, #20
 800f55e:	051b      	lsls	r3, r3, #20
 800f560:	429d      	cmp	r5, r3
 800f562:	d1bb      	bne.n	800f4dc <_strtod_l+0x9f4>
 800f564:	4630      	mov	r0, r6
 800f566:	4639      	mov	r1, r7
 800f568:	f7f1 fbba 	bl	8000ce0 <__aeabi_d2lz>
 800f56c:	f7f1 f82a 	bl	80005c4 <__aeabi_l2d>
 800f570:	4602      	mov	r2, r0
 800f572:	460b      	mov	r3, r1
 800f574:	4630      	mov	r0, r6
 800f576:	4639      	mov	r1, r7
 800f578:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f57c:	f7f0 fe98 	bl	80002b0 <__aeabi_dsub>
 800f580:	460b      	mov	r3, r1
 800f582:	4602      	mov	r2, r0
 800f584:	ea46 060a 	orr.w	r6, r6, sl
 800f588:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f58c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f58e:	431e      	orrs	r6, r3
 800f590:	d06d      	beq.n	800f66e <_strtod_l+0xb86>
 800f592:	a30d      	add	r3, pc, #52	@ (adr r3, 800f5c8 <_strtod_l+0xae0>)
 800f594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f598:	f7f1 fab4 	bl	8000b04 <__aeabi_dcmplt>
 800f59c:	2800      	cmp	r0, #0
 800f59e:	f47f accf 	bne.w	800ef40 <_strtod_l+0x458>
 800f5a2:	a30b      	add	r3, pc, #44	@ (adr r3, 800f5d0 <_strtod_l+0xae8>)
 800f5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f5ac:	f7f1 fac8 	bl	8000b40 <__aeabi_dcmpgt>
 800f5b0:	2800      	cmp	r0, #0
 800f5b2:	d093      	beq.n	800f4dc <_strtod_l+0x9f4>
 800f5b4:	e4c4      	b.n	800ef40 <_strtod_l+0x458>
 800f5b6:	bf00      	nop
 800f5b8:	00000000 	.word	0x00000000
 800f5bc:	bff00000 	.word	0xbff00000
 800f5c0:	00000000 	.word	0x00000000
 800f5c4:	3ff00000 	.word	0x3ff00000
 800f5c8:	94a03595 	.word	0x94a03595
 800f5cc:	3fdfffff 	.word	0x3fdfffff
 800f5d0:	35afe535 	.word	0x35afe535
 800f5d4:	3fe00000 	.word	0x3fe00000
 800f5d8:	000fffff 	.word	0x000fffff
 800f5dc:	7ff00000 	.word	0x7ff00000
 800f5e0:	7fefffff 	.word	0x7fefffff
 800f5e4:	3ff00000 	.word	0x3ff00000
 800f5e8:	3fe00000 	.word	0x3fe00000
 800f5ec:	7fe00000 	.word	0x7fe00000
 800f5f0:	7c9fffff 	.word	0x7c9fffff
 800f5f4:	9b08      	ldr	r3, [sp, #32]
 800f5f6:	b323      	cbz	r3, 800f642 <_strtod_l+0xb5a>
 800f5f8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f5fc:	d821      	bhi.n	800f642 <_strtod_l+0xb5a>
 800f5fe:	4630      	mov	r0, r6
 800f600:	4639      	mov	r1, r7
 800f602:	a327      	add	r3, pc, #156	@ (adr r3, 800f6a0 <_strtod_l+0xbb8>)
 800f604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f608:	f7f1 fa86 	bl	8000b18 <__aeabi_dcmple>
 800f60c:	b1a0      	cbz	r0, 800f638 <_strtod_l+0xb50>
 800f60e:	4639      	mov	r1, r7
 800f610:	4630      	mov	r0, r6
 800f612:	f7f1 fadd 	bl	8000bd0 <__aeabi_d2uiz>
 800f616:	2801      	cmp	r0, #1
 800f618:	bf38      	it	cc
 800f61a:	2001      	movcc	r0, #1
 800f61c:	f7f0 ff86 	bl	800052c <__aeabi_ui2d>
 800f620:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f622:	4606      	mov	r6, r0
 800f624:	460f      	mov	r7, r1
 800f626:	b9fb      	cbnz	r3, 800f668 <_strtod_l+0xb80>
 800f628:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f62c:	9014      	str	r0, [sp, #80]	@ 0x50
 800f62e:	9315      	str	r3, [sp, #84]	@ 0x54
 800f630:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f634:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f638:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f63a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f63e:	1b5b      	subs	r3, r3, r5
 800f640:	9311      	str	r3, [sp, #68]	@ 0x44
 800f642:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f646:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f64a:	f7ff f8eb 	bl	800e824 <__ulp>
 800f64e:	4650      	mov	r0, sl
 800f650:	4659      	mov	r1, fp
 800f652:	ec53 2b10 	vmov	r2, r3, d0
 800f656:	f7f0 ffe3 	bl	8000620 <__aeabi_dmul>
 800f65a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f65e:	f7f0 fe29 	bl	80002b4 <__adddf3>
 800f662:	4682      	mov	sl, r0
 800f664:	468b      	mov	fp, r1
 800f666:	e772      	b.n	800f54e <_strtod_l+0xa66>
 800f668:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f66c:	e7e0      	b.n	800f630 <_strtod_l+0xb48>
 800f66e:	a30e      	add	r3, pc, #56	@ (adr r3, 800f6a8 <_strtod_l+0xbc0>)
 800f670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f674:	f7f1 fa46 	bl	8000b04 <__aeabi_dcmplt>
 800f678:	e79a      	b.n	800f5b0 <_strtod_l+0xac8>
 800f67a:	2300      	movs	r3, #0
 800f67c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f67e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f680:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f682:	6013      	str	r3, [r2, #0]
 800f684:	f7ff ba6d 	b.w	800eb62 <_strtod_l+0x7a>
 800f688:	2a65      	cmp	r2, #101	@ 0x65
 800f68a:	f43f ab67 	beq.w	800ed5c <_strtod_l+0x274>
 800f68e:	2a45      	cmp	r2, #69	@ 0x45
 800f690:	f43f ab64 	beq.w	800ed5c <_strtod_l+0x274>
 800f694:	2301      	movs	r3, #1
 800f696:	f7ff bba0 	b.w	800edda <_strtod_l+0x2f2>
 800f69a:	bf00      	nop
 800f69c:	f3af 8000 	nop.w
 800f6a0:	ffc00000 	.word	0xffc00000
 800f6a4:	41dfffff 	.word	0x41dfffff
 800f6a8:	94a03595 	.word	0x94a03595
 800f6ac:	3fcfffff 	.word	0x3fcfffff

0800f6b0 <_strtod_r>:
 800f6b0:	4b01      	ldr	r3, [pc, #4]	@ (800f6b8 <_strtod_r+0x8>)
 800f6b2:	f7ff ba19 	b.w	800eae8 <_strtod_l>
 800f6b6:	bf00      	nop
 800f6b8:	20000070 	.word	0x20000070

0800f6bc <__ssputs_r>:
 800f6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6c0:	461f      	mov	r7, r3
 800f6c2:	688e      	ldr	r6, [r1, #8]
 800f6c4:	4682      	mov	sl, r0
 800f6c6:	460c      	mov	r4, r1
 800f6c8:	42be      	cmp	r6, r7
 800f6ca:	4690      	mov	r8, r2
 800f6cc:	680b      	ldr	r3, [r1, #0]
 800f6ce:	d82d      	bhi.n	800f72c <__ssputs_r+0x70>
 800f6d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f6d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f6d8:	d026      	beq.n	800f728 <__ssputs_r+0x6c>
 800f6da:	6965      	ldr	r5, [r4, #20]
 800f6dc:	6909      	ldr	r1, [r1, #16]
 800f6de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f6e2:	eba3 0901 	sub.w	r9, r3, r1
 800f6e6:	1c7b      	adds	r3, r7, #1
 800f6e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f6ec:	444b      	add	r3, r9
 800f6ee:	106d      	asrs	r5, r5, #1
 800f6f0:	429d      	cmp	r5, r3
 800f6f2:	bf38      	it	cc
 800f6f4:	461d      	movcc	r5, r3
 800f6f6:	0553      	lsls	r3, r2, #21
 800f6f8:	d527      	bpl.n	800f74a <__ssputs_r+0x8e>
 800f6fa:	4629      	mov	r1, r5
 800f6fc:	f7fe fc8c 	bl	800e018 <_malloc_r>
 800f700:	4606      	mov	r6, r0
 800f702:	b360      	cbz	r0, 800f75e <__ssputs_r+0xa2>
 800f704:	464a      	mov	r2, r9
 800f706:	6921      	ldr	r1, [r4, #16]
 800f708:	f7fd fdad 	bl	800d266 <memcpy>
 800f70c:	89a3      	ldrh	r3, [r4, #12]
 800f70e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f716:	81a3      	strh	r3, [r4, #12]
 800f718:	6126      	str	r6, [r4, #16]
 800f71a:	444e      	add	r6, r9
 800f71c:	6165      	str	r5, [r4, #20]
 800f71e:	eba5 0509 	sub.w	r5, r5, r9
 800f722:	6026      	str	r6, [r4, #0]
 800f724:	463e      	mov	r6, r7
 800f726:	60a5      	str	r5, [r4, #8]
 800f728:	42be      	cmp	r6, r7
 800f72a:	d900      	bls.n	800f72e <__ssputs_r+0x72>
 800f72c:	463e      	mov	r6, r7
 800f72e:	4632      	mov	r2, r6
 800f730:	4641      	mov	r1, r8
 800f732:	6820      	ldr	r0, [r4, #0]
 800f734:	f000 fb69 	bl	800fe0a <memmove>
 800f738:	68a3      	ldr	r3, [r4, #8]
 800f73a:	2000      	movs	r0, #0
 800f73c:	1b9b      	subs	r3, r3, r6
 800f73e:	60a3      	str	r3, [r4, #8]
 800f740:	6823      	ldr	r3, [r4, #0]
 800f742:	4433      	add	r3, r6
 800f744:	6023      	str	r3, [r4, #0]
 800f746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f74a:	462a      	mov	r2, r5
 800f74c:	f000 ff3d 	bl	80105ca <_realloc_r>
 800f750:	4606      	mov	r6, r0
 800f752:	2800      	cmp	r0, #0
 800f754:	d1e0      	bne.n	800f718 <__ssputs_r+0x5c>
 800f756:	6921      	ldr	r1, [r4, #16]
 800f758:	4650      	mov	r0, sl
 800f75a:	f7fe fbe9 	bl	800df30 <_free_r>
 800f75e:	230c      	movs	r3, #12
 800f760:	f04f 30ff 	mov.w	r0, #4294967295
 800f764:	f8ca 3000 	str.w	r3, [sl]
 800f768:	89a3      	ldrh	r3, [r4, #12]
 800f76a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f76e:	81a3      	strh	r3, [r4, #12]
 800f770:	e7e9      	b.n	800f746 <__ssputs_r+0x8a>
	...

0800f774 <_svfiprintf_r>:
 800f774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f778:	4698      	mov	r8, r3
 800f77a:	898b      	ldrh	r3, [r1, #12]
 800f77c:	b09d      	sub	sp, #116	@ 0x74
 800f77e:	4607      	mov	r7, r0
 800f780:	061b      	lsls	r3, r3, #24
 800f782:	460d      	mov	r5, r1
 800f784:	4614      	mov	r4, r2
 800f786:	d510      	bpl.n	800f7aa <_svfiprintf_r+0x36>
 800f788:	690b      	ldr	r3, [r1, #16]
 800f78a:	b973      	cbnz	r3, 800f7aa <_svfiprintf_r+0x36>
 800f78c:	2140      	movs	r1, #64	@ 0x40
 800f78e:	f7fe fc43 	bl	800e018 <_malloc_r>
 800f792:	6028      	str	r0, [r5, #0]
 800f794:	6128      	str	r0, [r5, #16]
 800f796:	b930      	cbnz	r0, 800f7a6 <_svfiprintf_r+0x32>
 800f798:	230c      	movs	r3, #12
 800f79a:	603b      	str	r3, [r7, #0]
 800f79c:	f04f 30ff 	mov.w	r0, #4294967295
 800f7a0:	b01d      	add	sp, #116	@ 0x74
 800f7a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7a6:	2340      	movs	r3, #64	@ 0x40
 800f7a8:	616b      	str	r3, [r5, #20]
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800f7b0:	f04f 0901 	mov.w	r9, #1
 800f7b4:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800f958 <_svfiprintf_r+0x1e4>
 800f7b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7ba:	2320      	movs	r3, #32
 800f7bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f7c0:	2330      	movs	r3, #48	@ 0x30
 800f7c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f7c6:	4623      	mov	r3, r4
 800f7c8:	469a      	mov	sl, r3
 800f7ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7ce:	b10a      	cbz	r2, 800f7d4 <_svfiprintf_r+0x60>
 800f7d0:	2a25      	cmp	r2, #37	@ 0x25
 800f7d2:	d1f9      	bne.n	800f7c8 <_svfiprintf_r+0x54>
 800f7d4:	ebba 0b04 	subs.w	fp, sl, r4
 800f7d8:	d00b      	beq.n	800f7f2 <_svfiprintf_r+0x7e>
 800f7da:	465b      	mov	r3, fp
 800f7dc:	4622      	mov	r2, r4
 800f7de:	4629      	mov	r1, r5
 800f7e0:	4638      	mov	r0, r7
 800f7e2:	f7ff ff6b 	bl	800f6bc <__ssputs_r>
 800f7e6:	3001      	adds	r0, #1
 800f7e8:	f000 80a7 	beq.w	800f93a <_svfiprintf_r+0x1c6>
 800f7ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f7ee:	445a      	add	r2, fp
 800f7f0:	9209      	str	r2, [sp, #36]	@ 0x24
 800f7f2:	f89a 3000 	ldrb.w	r3, [sl]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	f000 809f 	beq.w	800f93a <_svfiprintf_r+0x1c6>
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	f04f 32ff 	mov.w	r2, #4294967295
 800f802:	f10a 0a01 	add.w	sl, sl, #1
 800f806:	9304      	str	r3, [sp, #16]
 800f808:	9307      	str	r3, [sp, #28]
 800f80a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f80e:	931a      	str	r3, [sp, #104]	@ 0x68
 800f810:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f814:	4654      	mov	r4, sl
 800f816:	2205      	movs	r2, #5
 800f818:	484f      	ldr	r0, [pc, #316]	@ (800f958 <_svfiprintf_r+0x1e4>)
 800f81a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f81e:	f7fd fd14 	bl	800d24a <memchr>
 800f822:	9a04      	ldr	r2, [sp, #16]
 800f824:	b9d8      	cbnz	r0, 800f85e <_svfiprintf_r+0xea>
 800f826:	06d0      	lsls	r0, r2, #27
 800f828:	bf44      	itt	mi
 800f82a:	2320      	movmi	r3, #32
 800f82c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f830:	0711      	lsls	r1, r2, #28
 800f832:	bf44      	itt	mi
 800f834:	232b      	movmi	r3, #43	@ 0x2b
 800f836:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f83a:	f89a 3000 	ldrb.w	r3, [sl]
 800f83e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f840:	d015      	beq.n	800f86e <_svfiprintf_r+0xfa>
 800f842:	9a07      	ldr	r2, [sp, #28]
 800f844:	4654      	mov	r4, sl
 800f846:	2000      	movs	r0, #0
 800f848:	f04f 0c0a 	mov.w	ip, #10
 800f84c:	4621      	mov	r1, r4
 800f84e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f852:	3b30      	subs	r3, #48	@ 0x30
 800f854:	2b09      	cmp	r3, #9
 800f856:	d94b      	bls.n	800f8f0 <_svfiprintf_r+0x17c>
 800f858:	b1b0      	cbz	r0, 800f888 <_svfiprintf_r+0x114>
 800f85a:	9207      	str	r2, [sp, #28]
 800f85c:	e014      	b.n	800f888 <_svfiprintf_r+0x114>
 800f85e:	eba0 0308 	sub.w	r3, r0, r8
 800f862:	46a2      	mov	sl, r4
 800f864:	fa09 f303 	lsl.w	r3, r9, r3
 800f868:	4313      	orrs	r3, r2
 800f86a:	9304      	str	r3, [sp, #16]
 800f86c:	e7d2      	b.n	800f814 <_svfiprintf_r+0xa0>
 800f86e:	9b03      	ldr	r3, [sp, #12]
 800f870:	1d19      	adds	r1, r3, #4
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	2b00      	cmp	r3, #0
 800f876:	9103      	str	r1, [sp, #12]
 800f878:	bfbb      	ittet	lt
 800f87a:	425b      	neglt	r3, r3
 800f87c:	f042 0202 	orrlt.w	r2, r2, #2
 800f880:	9307      	strge	r3, [sp, #28]
 800f882:	9307      	strlt	r3, [sp, #28]
 800f884:	bfb8      	it	lt
 800f886:	9204      	strlt	r2, [sp, #16]
 800f888:	7823      	ldrb	r3, [r4, #0]
 800f88a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f88c:	d10a      	bne.n	800f8a4 <_svfiprintf_r+0x130>
 800f88e:	7863      	ldrb	r3, [r4, #1]
 800f890:	2b2a      	cmp	r3, #42	@ 0x2a
 800f892:	d132      	bne.n	800f8fa <_svfiprintf_r+0x186>
 800f894:	9b03      	ldr	r3, [sp, #12]
 800f896:	3402      	adds	r4, #2
 800f898:	1d1a      	adds	r2, r3, #4
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f8a0:	9203      	str	r2, [sp, #12]
 800f8a2:	9305      	str	r3, [sp, #20]
 800f8a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f968 <_svfiprintf_r+0x1f4>
 800f8a8:	2203      	movs	r2, #3
 800f8aa:	7821      	ldrb	r1, [r4, #0]
 800f8ac:	4650      	mov	r0, sl
 800f8ae:	f7fd fccc 	bl	800d24a <memchr>
 800f8b2:	b138      	cbz	r0, 800f8c4 <_svfiprintf_r+0x150>
 800f8b4:	eba0 000a 	sub.w	r0, r0, sl
 800f8b8:	2240      	movs	r2, #64	@ 0x40
 800f8ba:	9b04      	ldr	r3, [sp, #16]
 800f8bc:	3401      	adds	r4, #1
 800f8be:	4082      	lsls	r2, r0
 800f8c0:	4313      	orrs	r3, r2
 800f8c2:	9304      	str	r3, [sp, #16]
 800f8c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8c8:	2206      	movs	r2, #6
 800f8ca:	4824      	ldr	r0, [pc, #144]	@ (800f95c <_svfiprintf_r+0x1e8>)
 800f8cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f8d0:	f7fd fcbb 	bl	800d24a <memchr>
 800f8d4:	2800      	cmp	r0, #0
 800f8d6:	d036      	beq.n	800f946 <_svfiprintf_r+0x1d2>
 800f8d8:	4b21      	ldr	r3, [pc, #132]	@ (800f960 <_svfiprintf_r+0x1ec>)
 800f8da:	bb1b      	cbnz	r3, 800f924 <_svfiprintf_r+0x1b0>
 800f8dc:	9b03      	ldr	r3, [sp, #12]
 800f8de:	3307      	adds	r3, #7
 800f8e0:	f023 0307 	bic.w	r3, r3, #7
 800f8e4:	3308      	adds	r3, #8
 800f8e6:	9303      	str	r3, [sp, #12]
 800f8e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8ea:	4433      	add	r3, r6
 800f8ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800f8ee:	e76a      	b.n	800f7c6 <_svfiprintf_r+0x52>
 800f8f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f8f4:	460c      	mov	r4, r1
 800f8f6:	2001      	movs	r0, #1
 800f8f8:	e7a8      	b.n	800f84c <_svfiprintf_r+0xd8>
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	3401      	adds	r4, #1
 800f8fe:	f04f 0c0a 	mov.w	ip, #10
 800f902:	4619      	mov	r1, r3
 800f904:	9305      	str	r3, [sp, #20]
 800f906:	4620      	mov	r0, r4
 800f908:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f90c:	3a30      	subs	r2, #48	@ 0x30
 800f90e:	2a09      	cmp	r2, #9
 800f910:	d903      	bls.n	800f91a <_svfiprintf_r+0x1a6>
 800f912:	2b00      	cmp	r3, #0
 800f914:	d0c6      	beq.n	800f8a4 <_svfiprintf_r+0x130>
 800f916:	9105      	str	r1, [sp, #20]
 800f918:	e7c4      	b.n	800f8a4 <_svfiprintf_r+0x130>
 800f91a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f91e:	4604      	mov	r4, r0
 800f920:	2301      	movs	r3, #1
 800f922:	e7f0      	b.n	800f906 <_svfiprintf_r+0x192>
 800f924:	ab03      	add	r3, sp, #12
 800f926:	462a      	mov	r2, r5
 800f928:	a904      	add	r1, sp, #16
 800f92a:	4638      	mov	r0, r7
 800f92c:	9300      	str	r3, [sp, #0]
 800f92e:	4b0d      	ldr	r3, [pc, #52]	@ (800f964 <_svfiprintf_r+0x1f0>)
 800f930:	f7fc fc02 	bl	800c138 <_printf_float>
 800f934:	1c42      	adds	r2, r0, #1
 800f936:	4606      	mov	r6, r0
 800f938:	d1d6      	bne.n	800f8e8 <_svfiprintf_r+0x174>
 800f93a:	89ab      	ldrh	r3, [r5, #12]
 800f93c:	065b      	lsls	r3, r3, #25
 800f93e:	f53f af2d 	bmi.w	800f79c <_svfiprintf_r+0x28>
 800f942:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f944:	e72c      	b.n	800f7a0 <_svfiprintf_r+0x2c>
 800f946:	ab03      	add	r3, sp, #12
 800f948:	462a      	mov	r2, r5
 800f94a:	a904      	add	r1, sp, #16
 800f94c:	4638      	mov	r0, r7
 800f94e:	9300      	str	r3, [sp, #0]
 800f950:	4b04      	ldr	r3, [pc, #16]	@ (800f964 <_svfiprintf_r+0x1f0>)
 800f952:	f7fc fe8d 	bl	800c670 <_printf_i>
 800f956:	e7ed      	b.n	800f934 <_svfiprintf_r+0x1c0>
 800f958:	08010eb8 	.word	0x08010eb8
 800f95c:	08010ec2 	.word	0x08010ec2
 800f960:	0800c139 	.word	0x0800c139
 800f964:	0800f6bd 	.word	0x0800f6bd
 800f968:	08010ebe 	.word	0x08010ebe

0800f96c <__sfputc_r>:
 800f96c:	6893      	ldr	r3, [r2, #8]
 800f96e:	3b01      	subs	r3, #1
 800f970:	2b00      	cmp	r3, #0
 800f972:	6093      	str	r3, [r2, #8]
 800f974:	b410      	push	{r4}
 800f976:	da08      	bge.n	800f98a <__sfputc_r+0x1e>
 800f978:	6994      	ldr	r4, [r2, #24]
 800f97a:	42a3      	cmp	r3, r4
 800f97c:	db01      	blt.n	800f982 <__sfputc_r+0x16>
 800f97e:	290a      	cmp	r1, #10
 800f980:	d103      	bne.n	800f98a <__sfputc_r+0x1e>
 800f982:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f986:	f7fd bb28 	b.w	800cfda <__swbuf_r>
 800f98a:	6813      	ldr	r3, [r2, #0]
 800f98c:	1c58      	adds	r0, r3, #1
 800f98e:	6010      	str	r0, [r2, #0]
 800f990:	4608      	mov	r0, r1
 800f992:	7019      	strb	r1, [r3, #0]
 800f994:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f998:	4770      	bx	lr

0800f99a <__sfputs_r>:
 800f99a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f99c:	4606      	mov	r6, r0
 800f99e:	460f      	mov	r7, r1
 800f9a0:	4614      	mov	r4, r2
 800f9a2:	18d5      	adds	r5, r2, r3
 800f9a4:	42ac      	cmp	r4, r5
 800f9a6:	d101      	bne.n	800f9ac <__sfputs_r+0x12>
 800f9a8:	2000      	movs	r0, #0
 800f9aa:	e007      	b.n	800f9bc <__sfputs_r+0x22>
 800f9ac:	463a      	mov	r2, r7
 800f9ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9b2:	4630      	mov	r0, r6
 800f9b4:	f7ff ffda 	bl	800f96c <__sfputc_r>
 800f9b8:	1c43      	adds	r3, r0, #1
 800f9ba:	d1f3      	bne.n	800f9a4 <__sfputs_r+0xa>
 800f9bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f9c0 <_vfiprintf_r>:
 800f9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9c4:	460d      	mov	r5, r1
 800f9c6:	b09d      	sub	sp, #116	@ 0x74
 800f9c8:	4614      	mov	r4, r2
 800f9ca:	4698      	mov	r8, r3
 800f9cc:	4606      	mov	r6, r0
 800f9ce:	b118      	cbz	r0, 800f9d8 <_vfiprintf_r+0x18>
 800f9d0:	6a03      	ldr	r3, [r0, #32]
 800f9d2:	b90b      	cbnz	r3, 800f9d8 <_vfiprintf_r+0x18>
 800f9d4:	f7fd fa0a 	bl	800cdec <__sinit>
 800f9d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f9da:	07d9      	lsls	r1, r3, #31
 800f9dc:	d405      	bmi.n	800f9ea <_vfiprintf_r+0x2a>
 800f9de:	89ab      	ldrh	r3, [r5, #12]
 800f9e0:	059a      	lsls	r2, r3, #22
 800f9e2:	d402      	bmi.n	800f9ea <_vfiprintf_r+0x2a>
 800f9e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f9e6:	f7fd fc2e 	bl	800d246 <__retarget_lock_acquire_recursive>
 800f9ea:	89ab      	ldrh	r3, [r5, #12]
 800f9ec:	071b      	lsls	r3, r3, #28
 800f9ee:	d501      	bpl.n	800f9f4 <_vfiprintf_r+0x34>
 800f9f0:	692b      	ldr	r3, [r5, #16]
 800f9f2:	b99b      	cbnz	r3, 800fa1c <_vfiprintf_r+0x5c>
 800f9f4:	4629      	mov	r1, r5
 800f9f6:	4630      	mov	r0, r6
 800f9f8:	f7fd fb2e 	bl	800d058 <__swsetup_r>
 800f9fc:	b170      	cbz	r0, 800fa1c <_vfiprintf_r+0x5c>
 800f9fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fa00:	07dc      	lsls	r4, r3, #31
 800fa02:	d504      	bpl.n	800fa0e <_vfiprintf_r+0x4e>
 800fa04:	f04f 30ff 	mov.w	r0, #4294967295
 800fa08:	b01d      	add	sp, #116	@ 0x74
 800fa0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa0e:	89ab      	ldrh	r3, [r5, #12]
 800fa10:	0598      	lsls	r0, r3, #22
 800fa12:	d4f7      	bmi.n	800fa04 <_vfiprintf_r+0x44>
 800fa14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fa16:	f7fd fc17 	bl	800d248 <__retarget_lock_release_recursive>
 800fa1a:	e7f3      	b.n	800fa04 <_vfiprintf_r+0x44>
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa22:	f04f 0901 	mov.w	r9, #1
 800fa26:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800fbdc <_vfiprintf_r+0x21c>
 800fa2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa2c:	2320      	movs	r3, #32
 800fa2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fa32:	2330      	movs	r3, #48	@ 0x30
 800fa34:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fa38:	4623      	mov	r3, r4
 800fa3a:	469a      	mov	sl, r3
 800fa3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa40:	b10a      	cbz	r2, 800fa46 <_vfiprintf_r+0x86>
 800fa42:	2a25      	cmp	r2, #37	@ 0x25
 800fa44:	d1f9      	bne.n	800fa3a <_vfiprintf_r+0x7a>
 800fa46:	ebba 0b04 	subs.w	fp, sl, r4
 800fa4a:	d00b      	beq.n	800fa64 <_vfiprintf_r+0xa4>
 800fa4c:	465b      	mov	r3, fp
 800fa4e:	4622      	mov	r2, r4
 800fa50:	4629      	mov	r1, r5
 800fa52:	4630      	mov	r0, r6
 800fa54:	f7ff ffa1 	bl	800f99a <__sfputs_r>
 800fa58:	3001      	adds	r0, #1
 800fa5a:	f000 80a7 	beq.w	800fbac <_vfiprintf_r+0x1ec>
 800fa5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fa60:	445a      	add	r2, fp
 800fa62:	9209      	str	r2, [sp, #36]	@ 0x24
 800fa64:	f89a 3000 	ldrb.w	r3, [sl]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	f000 809f 	beq.w	800fbac <_vfiprintf_r+0x1ec>
 800fa6e:	2300      	movs	r3, #0
 800fa70:	f04f 32ff 	mov.w	r2, #4294967295
 800fa74:	f10a 0a01 	add.w	sl, sl, #1
 800fa78:	9304      	str	r3, [sp, #16]
 800fa7a:	9307      	str	r3, [sp, #28]
 800fa7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fa80:	931a      	str	r3, [sp, #104]	@ 0x68
 800fa82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa86:	4654      	mov	r4, sl
 800fa88:	2205      	movs	r2, #5
 800fa8a:	4854      	ldr	r0, [pc, #336]	@ (800fbdc <_vfiprintf_r+0x21c>)
 800fa8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa90:	f7fd fbdb 	bl	800d24a <memchr>
 800fa94:	9a04      	ldr	r2, [sp, #16]
 800fa96:	b9d8      	cbnz	r0, 800fad0 <_vfiprintf_r+0x110>
 800fa98:	06d1      	lsls	r1, r2, #27
 800fa9a:	bf44      	itt	mi
 800fa9c:	2320      	movmi	r3, #32
 800fa9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800faa2:	0713      	lsls	r3, r2, #28
 800faa4:	bf44      	itt	mi
 800faa6:	232b      	movmi	r3, #43	@ 0x2b
 800faa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800faac:	f89a 3000 	ldrb.w	r3, [sl]
 800fab0:	2b2a      	cmp	r3, #42	@ 0x2a
 800fab2:	d015      	beq.n	800fae0 <_vfiprintf_r+0x120>
 800fab4:	9a07      	ldr	r2, [sp, #28]
 800fab6:	4654      	mov	r4, sl
 800fab8:	2000      	movs	r0, #0
 800faba:	f04f 0c0a 	mov.w	ip, #10
 800fabe:	4621      	mov	r1, r4
 800fac0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fac4:	3b30      	subs	r3, #48	@ 0x30
 800fac6:	2b09      	cmp	r3, #9
 800fac8:	d94b      	bls.n	800fb62 <_vfiprintf_r+0x1a2>
 800faca:	b1b0      	cbz	r0, 800fafa <_vfiprintf_r+0x13a>
 800facc:	9207      	str	r2, [sp, #28]
 800face:	e014      	b.n	800fafa <_vfiprintf_r+0x13a>
 800fad0:	eba0 0308 	sub.w	r3, r0, r8
 800fad4:	46a2      	mov	sl, r4
 800fad6:	fa09 f303 	lsl.w	r3, r9, r3
 800fada:	4313      	orrs	r3, r2
 800fadc:	9304      	str	r3, [sp, #16]
 800fade:	e7d2      	b.n	800fa86 <_vfiprintf_r+0xc6>
 800fae0:	9b03      	ldr	r3, [sp, #12]
 800fae2:	1d19      	adds	r1, r3, #4
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	9103      	str	r1, [sp, #12]
 800faea:	bfbb      	ittet	lt
 800faec:	425b      	neglt	r3, r3
 800faee:	f042 0202 	orrlt.w	r2, r2, #2
 800faf2:	9307      	strge	r3, [sp, #28]
 800faf4:	9307      	strlt	r3, [sp, #28]
 800faf6:	bfb8      	it	lt
 800faf8:	9204      	strlt	r2, [sp, #16]
 800fafa:	7823      	ldrb	r3, [r4, #0]
 800fafc:	2b2e      	cmp	r3, #46	@ 0x2e
 800fafe:	d10a      	bne.n	800fb16 <_vfiprintf_r+0x156>
 800fb00:	7863      	ldrb	r3, [r4, #1]
 800fb02:	2b2a      	cmp	r3, #42	@ 0x2a
 800fb04:	d132      	bne.n	800fb6c <_vfiprintf_r+0x1ac>
 800fb06:	9b03      	ldr	r3, [sp, #12]
 800fb08:	3402      	adds	r4, #2
 800fb0a:	1d1a      	adds	r2, r3, #4
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fb12:	9203      	str	r2, [sp, #12]
 800fb14:	9305      	str	r3, [sp, #20]
 800fb16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fbec <_vfiprintf_r+0x22c>
 800fb1a:	2203      	movs	r2, #3
 800fb1c:	7821      	ldrb	r1, [r4, #0]
 800fb1e:	4650      	mov	r0, sl
 800fb20:	f7fd fb93 	bl	800d24a <memchr>
 800fb24:	b138      	cbz	r0, 800fb36 <_vfiprintf_r+0x176>
 800fb26:	eba0 000a 	sub.w	r0, r0, sl
 800fb2a:	2240      	movs	r2, #64	@ 0x40
 800fb2c:	9b04      	ldr	r3, [sp, #16]
 800fb2e:	3401      	adds	r4, #1
 800fb30:	4082      	lsls	r2, r0
 800fb32:	4313      	orrs	r3, r2
 800fb34:	9304      	str	r3, [sp, #16]
 800fb36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb3a:	2206      	movs	r2, #6
 800fb3c:	4828      	ldr	r0, [pc, #160]	@ (800fbe0 <_vfiprintf_r+0x220>)
 800fb3e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fb42:	f7fd fb82 	bl	800d24a <memchr>
 800fb46:	2800      	cmp	r0, #0
 800fb48:	d03f      	beq.n	800fbca <_vfiprintf_r+0x20a>
 800fb4a:	4b26      	ldr	r3, [pc, #152]	@ (800fbe4 <_vfiprintf_r+0x224>)
 800fb4c:	bb1b      	cbnz	r3, 800fb96 <_vfiprintf_r+0x1d6>
 800fb4e:	9b03      	ldr	r3, [sp, #12]
 800fb50:	3307      	adds	r3, #7
 800fb52:	f023 0307 	bic.w	r3, r3, #7
 800fb56:	3308      	adds	r3, #8
 800fb58:	9303      	str	r3, [sp, #12]
 800fb5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb5c:	443b      	add	r3, r7
 800fb5e:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb60:	e76a      	b.n	800fa38 <_vfiprintf_r+0x78>
 800fb62:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb66:	460c      	mov	r4, r1
 800fb68:	2001      	movs	r0, #1
 800fb6a:	e7a8      	b.n	800fabe <_vfiprintf_r+0xfe>
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	3401      	adds	r4, #1
 800fb70:	f04f 0c0a 	mov.w	ip, #10
 800fb74:	4619      	mov	r1, r3
 800fb76:	9305      	str	r3, [sp, #20]
 800fb78:	4620      	mov	r0, r4
 800fb7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb7e:	3a30      	subs	r2, #48	@ 0x30
 800fb80:	2a09      	cmp	r2, #9
 800fb82:	d903      	bls.n	800fb8c <_vfiprintf_r+0x1cc>
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d0c6      	beq.n	800fb16 <_vfiprintf_r+0x156>
 800fb88:	9105      	str	r1, [sp, #20]
 800fb8a:	e7c4      	b.n	800fb16 <_vfiprintf_r+0x156>
 800fb8c:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb90:	4604      	mov	r4, r0
 800fb92:	2301      	movs	r3, #1
 800fb94:	e7f0      	b.n	800fb78 <_vfiprintf_r+0x1b8>
 800fb96:	ab03      	add	r3, sp, #12
 800fb98:	462a      	mov	r2, r5
 800fb9a:	a904      	add	r1, sp, #16
 800fb9c:	4630      	mov	r0, r6
 800fb9e:	9300      	str	r3, [sp, #0]
 800fba0:	4b11      	ldr	r3, [pc, #68]	@ (800fbe8 <_vfiprintf_r+0x228>)
 800fba2:	f7fc fac9 	bl	800c138 <_printf_float>
 800fba6:	4607      	mov	r7, r0
 800fba8:	1c78      	adds	r0, r7, #1
 800fbaa:	d1d6      	bne.n	800fb5a <_vfiprintf_r+0x19a>
 800fbac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fbae:	07d9      	lsls	r1, r3, #31
 800fbb0:	d405      	bmi.n	800fbbe <_vfiprintf_r+0x1fe>
 800fbb2:	89ab      	ldrh	r3, [r5, #12]
 800fbb4:	059a      	lsls	r2, r3, #22
 800fbb6:	d402      	bmi.n	800fbbe <_vfiprintf_r+0x1fe>
 800fbb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fbba:	f7fd fb45 	bl	800d248 <__retarget_lock_release_recursive>
 800fbbe:	89ab      	ldrh	r3, [r5, #12]
 800fbc0:	065b      	lsls	r3, r3, #25
 800fbc2:	f53f af1f 	bmi.w	800fa04 <_vfiprintf_r+0x44>
 800fbc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fbc8:	e71e      	b.n	800fa08 <_vfiprintf_r+0x48>
 800fbca:	ab03      	add	r3, sp, #12
 800fbcc:	462a      	mov	r2, r5
 800fbce:	a904      	add	r1, sp, #16
 800fbd0:	4630      	mov	r0, r6
 800fbd2:	9300      	str	r3, [sp, #0]
 800fbd4:	4b04      	ldr	r3, [pc, #16]	@ (800fbe8 <_vfiprintf_r+0x228>)
 800fbd6:	f7fc fd4b 	bl	800c670 <_printf_i>
 800fbda:	e7e4      	b.n	800fba6 <_vfiprintf_r+0x1e6>
 800fbdc:	08010eb8 	.word	0x08010eb8
 800fbe0:	08010ec2 	.word	0x08010ec2
 800fbe4:	0800c139 	.word	0x0800c139
 800fbe8:	0800f99b 	.word	0x0800f99b
 800fbec:	08010ebe 	.word	0x08010ebe

0800fbf0 <__sflush_r>:
 800fbf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fbf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbf8:	0716      	lsls	r6, r2, #28
 800fbfa:	4605      	mov	r5, r0
 800fbfc:	460c      	mov	r4, r1
 800fbfe:	d454      	bmi.n	800fcaa <__sflush_r+0xba>
 800fc00:	684b      	ldr	r3, [r1, #4]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	dc02      	bgt.n	800fc0c <__sflush_r+0x1c>
 800fc06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	dd48      	ble.n	800fc9e <__sflush_r+0xae>
 800fc0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fc0e:	2e00      	cmp	r6, #0
 800fc10:	d045      	beq.n	800fc9e <__sflush_r+0xae>
 800fc12:	2300      	movs	r3, #0
 800fc14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fc18:	682f      	ldr	r7, [r5, #0]
 800fc1a:	6a21      	ldr	r1, [r4, #32]
 800fc1c:	602b      	str	r3, [r5, #0]
 800fc1e:	d030      	beq.n	800fc82 <__sflush_r+0x92>
 800fc20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fc22:	89a3      	ldrh	r3, [r4, #12]
 800fc24:	0759      	lsls	r1, r3, #29
 800fc26:	d505      	bpl.n	800fc34 <__sflush_r+0x44>
 800fc28:	6863      	ldr	r3, [r4, #4]
 800fc2a:	1ad2      	subs	r2, r2, r3
 800fc2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fc2e:	b10b      	cbz	r3, 800fc34 <__sflush_r+0x44>
 800fc30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fc32:	1ad2      	subs	r2, r2, r3
 800fc34:	2300      	movs	r3, #0
 800fc36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fc38:	6a21      	ldr	r1, [r4, #32]
 800fc3a:	4628      	mov	r0, r5
 800fc3c:	47b0      	blx	r6
 800fc3e:	1c43      	adds	r3, r0, #1
 800fc40:	89a3      	ldrh	r3, [r4, #12]
 800fc42:	d106      	bne.n	800fc52 <__sflush_r+0x62>
 800fc44:	6829      	ldr	r1, [r5, #0]
 800fc46:	291d      	cmp	r1, #29
 800fc48:	d82b      	bhi.n	800fca2 <__sflush_r+0xb2>
 800fc4a:	4a2a      	ldr	r2, [pc, #168]	@ (800fcf4 <__sflush_r+0x104>)
 800fc4c:	410a      	asrs	r2, r1
 800fc4e:	07d6      	lsls	r6, r2, #31
 800fc50:	d427      	bmi.n	800fca2 <__sflush_r+0xb2>
 800fc52:	2200      	movs	r2, #0
 800fc54:	04d9      	lsls	r1, r3, #19
 800fc56:	6062      	str	r2, [r4, #4]
 800fc58:	6922      	ldr	r2, [r4, #16]
 800fc5a:	6022      	str	r2, [r4, #0]
 800fc5c:	d504      	bpl.n	800fc68 <__sflush_r+0x78>
 800fc5e:	1c42      	adds	r2, r0, #1
 800fc60:	d101      	bne.n	800fc66 <__sflush_r+0x76>
 800fc62:	682b      	ldr	r3, [r5, #0]
 800fc64:	b903      	cbnz	r3, 800fc68 <__sflush_r+0x78>
 800fc66:	6560      	str	r0, [r4, #84]	@ 0x54
 800fc68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fc6a:	602f      	str	r7, [r5, #0]
 800fc6c:	b1b9      	cbz	r1, 800fc9e <__sflush_r+0xae>
 800fc6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fc72:	4299      	cmp	r1, r3
 800fc74:	d002      	beq.n	800fc7c <__sflush_r+0x8c>
 800fc76:	4628      	mov	r0, r5
 800fc78:	f7fe f95a 	bl	800df30 <_free_r>
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	6363      	str	r3, [r4, #52]	@ 0x34
 800fc80:	e00d      	b.n	800fc9e <__sflush_r+0xae>
 800fc82:	2301      	movs	r3, #1
 800fc84:	4628      	mov	r0, r5
 800fc86:	47b0      	blx	r6
 800fc88:	4602      	mov	r2, r0
 800fc8a:	1c50      	adds	r0, r2, #1
 800fc8c:	d1c9      	bne.n	800fc22 <__sflush_r+0x32>
 800fc8e:	682b      	ldr	r3, [r5, #0]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d0c6      	beq.n	800fc22 <__sflush_r+0x32>
 800fc94:	2b1d      	cmp	r3, #29
 800fc96:	d001      	beq.n	800fc9c <__sflush_r+0xac>
 800fc98:	2b16      	cmp	r3, #22
 800fc9a:	d11d      	bne.n	800fcd8 <__sflush_r+0xe8>
 800fc9c:	602f      	str	r7, [r5, #0]
 800fc9e:	2000      	movs	r0, #0
 800fca0:	e021      	b.n	800fce6 <__sflush_r+0xf6>
 800fca2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fca6:	b21b      	sxth	r3, r3
 800fca8:	e01a      	b.n	800fce0 <__sflush_r+0xf0>
 800fcaa:	690f      	ldr	r7, [r1, #16]
 800fcac:	2f00      	cmp	r7, #0
 800fcae:	d0f6      	beq.n	800fc9e <__sflush_r+0xae>
 800fcb0:	0793      	lsls	r3, r2, #30
 800fcb2:	680e      	ldr	r6, [r1, #0]
 800fcb4:	600f      	str	r7, [r1, #0]
 800fcb6:	bf0c      	ite	eq
 800fcb8:	694b      	ldreq	r3, [r1, #20]
 800fcba:	2300      	movne	r3, #0
 800fcbc:	eba6 0807 	sub.w	r8, r6, r7
 800fcc0:	608b      	str	r3, [r1, #8]
 800fcc2:	f1b8 0f00 	cmp.w	r8, #0
 800fcc6:	ddea      	ble.n	800fc9e <__sflush_r+0xae>
 800fcc8:	4643      	mov	r3, r8
 800fcca:	463a      	mov	r2, r7
 800fccc:	6a21      	ldr	r1, [r4, #32]
 800fcce:	4628      	mov	r0, r5
 800fcd0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fcd2:	47b0      	blx	r6
 800fcd4:	2800      	cmp	r0, #0
 800fcd6:	dc08      	bgt.n	800fcea <__sflush_r+0xfa>
 800fcd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fcdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fce0:	f04f 30ff 	mov.w	r0, #4294967295
 800fce4:	81a3      	strh	r3, [r4, #12]
 800fce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcea:	4407      	add	r7, r0
 800fcec:	eba8 0800 	sub.w	r8, r8, r0
 800fcf0:	e7e7      	b.n	800fcc2 <__sflush_r+0xd2>
 800fcf2:	bf00      	nop
 800fcf4:	dfbffffe 	.word	0xdfbffffe

0800fcf8 <_fflush_r>:
 800fcf8:	b538      	push	{r3, r4, r5, lr}
 800fcfa:	690b      	ldr	r3, [r1, #16]
 800fcfc:	4605      	mov	r5, r0
 800fcfe:	460c      	mov	r4, r1
 800fd00:	b913      	cbnz	r3, 800fd08 <_fflush_r+0x10>
 800fd02:	2500      	movs	r5, #0
 800fd04:	4628      	mov	r0, r5
 800fd06:	bd38      	pop	{r3, r4, r5, pc}
 800fd08:	b118      	cbz	r0, 800fd12 <_fflush_r+0x1a>
 800fd0a:	6a03      	ldr	r3, [r0, #32]
 800fd0c:	b90b      	cbnz	r3, 800fd12 <_fflush_r+0x1a>
 800fd0e:	f7fd f86d 	bl	800cdec <__sinit>
 800fd12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d0f3      	beq.n	800fd02 <_fflush_r+0xa>
 800fd1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fd1c:	07d0      	lsls	r0, r2, #31
 800fd1e:	d404      	bmi.n	800fd2a <_fflush_r+0x32>
 800fd20:	0599      	lsls	r1, r3, #22
 800fd22:	d402      	bmi.n	800fd2a <_fflush_r+0x32>
 800fd24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fd26:	f7fd fa8e 	bl	800d246 <__retarget_lock_acquire_recursive>
 800fd2a:	4628      	mov	r0, r5
 800fd2c:	4621      	mov	r1, r4
 800fd2e:	f7ff ff5f 	bl	800fbf0 <__sflush_r>
 800fd32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fd34:	4605      	mov	r5, r0
 800fd36:	07da      	lsls	r2, r3, #31
 800fd38:	d4e4      	bmi.n	800fd04 <_fflush_r+0xc>
 800fd3a:	89a3      	ldrh	r3, [r4, #12]
 800fd3c:	059b      	lsls	r3, r3, #22
 800fd3e:	d4e1      	bmi.n	800fd04 <_fflush_r+0xc>
 800fd40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fd42:	f7fd fa81 	bl	800d248 <__retarget_lock_release_recursive>
 800fd46:	e7dd      	b.n	800fd04 <_fflush_r+0xc>

0800fd48 <__swhatbuf_r>:
 800fd48:	b570      	push	{r4, r5, r6, lr}
 800fd4a:	460c      	mov	r4, r1
 800fd4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd50:	b096      	sub	sp, #88	@ 0x58
 800fd52:	4615      	mov	r5, r2
 800fd54:	2900      	cmp	r1, #0
 800fd56:	461e      	mov	r6, r3
 800fd58:	da0c      	bge.n	800fd74 <__swhatbuf_r+0x2c>
 800fd5a:	89a3      	ldrh	r3, [r4, #12]
 800fd5c:	2100      	movs	r1, #0
 800fd5e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fd62:	bf14      	ite	ne
 800fd64:	2340      	movne	r3, #64	@ 0x40
 800fd66:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fd6a:	2000      	movs	r0, #0
 800fd6c:	6031      	str	r1, [r6, #0]
 800fd6e:	602b      	str	r3, [r5, #0]
 800fd70:	b016      	add	sp, #88	@ 0x58
 800fd72:	bd70      	pop	{r4, r5, r6, pc}
 800fd74:	466a      	mov	r2, sp
 800fd76:	f000 f875 	bl	800fe64 <_fstat_r>
 800fd7a:	2800      	cmp	r0, #0
 800fd7c:	dbed      	blt.n	800fd5a <__swhatbuf_r+0x12>
 800fd7e:	9901      	ldr	r1, [sp, #4]
 800fd80:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fd84:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fd88:	4259      	negs	r1, r3
 800fd8a:	4159      	adcs	r1, r3
 800fd8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fd90:	e7eb      	b.n	800fd6a <__swhatbuf_r+0x22>

0800fd92 <__smakebuf_r>:
 800fd92:	898b      	ldrh	r3, [r1, #12]
 800fd94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd96:	079d      	lsls	r5, r3, #30
 800fd98:	4606      	mov	r6, r0
 800fd9a:	460c      	mov	r4, r1
 800fd9c:	d507      	bpl.n	800fdae <__smakebuf_r+0x1c>
 800fd9e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fda2:	6023      	str	r3, [r4, #0]
 800fda4:	6123      	str	r3, [r4, #16]
 800fda6:	2301      	movs	r3, #1
 800fda8:	6163      	str	r3, [r4, #20]
 800fdaa:	b003      	add	sp, #12
 800fdac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdae:	ab01      	add	r3, sp, #4
 800fdb0:	466a      	mov	r2, sp
 800fdb2:	f7ff ffc9 	bl	800fd48 <__swhatbuf_r>
 800fdb6:	9f00      	ldr	r7, [sp, #0]
 800fdb8:	4605      	mov	r5, r0
 800fdba:	4630      	mov	r0, r6
 800fdbc:	4639      	mov	r1, r7
 800fdbe:	f7fe f92b 	bl	800e018 <_malloc_r>
 800fdc2:	b948      	cbnz	r0, 800fdd8 <__smakebuf_r+0x46>
 800fdc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fdc8:	059a      	lsls	r2, r3, #22
 800fdca:	d4ee      	bmi.n	800fdaa <__smakebuf_r+0x18>
 800fdcc:	f023 0303 	bic.w	r3, r3, #3
 800fdd0:	f043 0302 	orr.w	r3, r3, #2
 800fdd4:	81a3      	strh	r3, [r4, #12]
 800fdd6:	e7e2      	b.n	800fd9e <__smakebuf_r+0xc>
 800fdd8:	89a3      	ldrh	r3, [r4, #12]
 800fdda:	6020      	str	r0, [r4, #0]
 800fddc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fde0:	81a3      	strh	r3, [r4, #12]
 800fde2:	9b01      	ldr	r3, [sp, #4]
 800fde4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fde8:	b15b      	cbz	r3, 800fe02 <__smakebuf_r+0x70>
 800fdea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fdee:	4630      	mov	r0, r6
 800fdf0:	f000 f84a 	bl	800fe88 <_isatty_r>
 800fdf4:	b128      	cbz	r0, 800fe02 <__smakebuf_r+0x70>
 800fdf6:	89a3      	ldrh	r3, [r4, #12]
 800fdf8:	f023 0303 	bic.w	r3, r3, #3
 800fdfc:	f043 0301 	orr.w	r3, r3, #1
 800fe00:	81a3      	strh	r3, [r4, #12]
 800fe02:	89a3      	ldrh	r3, [r4, #12]
 800fe04:	431d      	orrs	r5, r3
 800fe06:	81a5      	strh	r5, [r4, #12]
 800fe08:	e7cf      	b.n	800fdaa <__smakebuf_r+0x18>

0800fe0a <memmove>:
 800fe0a:	4288      	cmp	r0, r1
 800fe0c:	b510      	push	{r4, lr}
 800fe0e:	eb01 0402 	add.w	r4, r1, r2
 800fe12:	d902      	bls.n	800fe1a <memmove+0x10>
 800fe14:	4284      	cmp	r4, r0
 800fe16:	4623      	mov	r3, r4
 800fe18:	d807      	bhi.n	800fe2a <memmove+0x20>
 800fe1a:	1e43      	subs	r3, r0, #1
 800fe1c:	42a1      	cmp	r1, r4
 800fe1e:	d008      	beq.n	800fe32 <memmove+0x28>
 800fe20:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fe24:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fe28:	e7f8      	b.n	800fe1c <memmove+0x12>
 800fe2a:	4402      	add	r2, r0
 800fe2c:	4601      	mov	r1, r0
 800fe2e:	428a      	cmp	r2, r1
 800fe30:	d100      	bne.n	800fe34 <memmove+0x2a>
 800fe32:	bd10      	pop	{r4, pc}
 800fe34:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fe38:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fe3c:	e7f7      	b.n	800fe2e <memmove+0x24>

0800fe3e <strncmp>:
 800fe3e:	b510      	push	{r4, lr}
 800fe40:	b16a      	cbz	r2, 800fe5e <strncmp+0x20>
 800fe42:	3901      	subs	r1, #1
 800fe44:	1884      	adds	r4, r0, r2
 800fe46:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe4a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	d103      	bne.n	800fe5a <strncmp+0x1c>
 800fe52:	42a0      	cmp	r0, r4
 800fe54:	d001      	beq.n	800fe5a <strncmp+0x1c>
 800fe56:	2a00      	cmp	r2, #0
 800fe58:	d1f5      	bne.n	800fe46 <strncmp+0x8>
 800fe5a:	1ad0      	subs	r0, r2, r3
 800fe5c:	bd10      	pop	{r4, pc}
 800fe5e:	4610      	mov	r0, r2
 800fe60:	e7fc      	b.n	800fe5c <strncmp+0x1e>
	...

0800fe64 <_fstat_r>:
 800fe64:	b538      	push	{r3, r4, r5, lr}
 800fe66:	2300      	movs	r3, #0
 800fe68:	4d06      	ldr	r5, [pc, #24]	@ (800fe84 <_fstat_r+0x20>)
 800fe6a:	4604      	mov	r4, r0
 800fe6c:	4608      	mov	r0, r1
 800fe6e:	4611      	mov	r1, r2
 800fe70:	602b      	str	r3, [r5, #0]
 800fe72:	f7f2 fb6b 	bl	800254c <_fstat>
 800fe76:	1c43      	adds	r3, r0, #1
 800fe78:	d102      	bne.n	800fe80 <_fstat_r+0x1c>
 800fe7a:	682b      	ldr	r3, [r5, #0]
 800fe7c:	b103      	cbz	r3, 800fe80 <_fstat_r+0x1c>
 800fe7e:	6023      	str	r3, [r4, #0]
 800fe80:	bd38      	pop	{r3, r4, r5, pc}
 800fe82:	bf00      	nop
 800fe84:	200007f0 	.word	0x200007f0

0800fe88 <_isatty_r>:
 800fe88:	b538      	push	{r3, r4, r5, lr}
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	4d05      	ldr	r5, [pc, #20]	@ (800fea4 <_isatty_r+0x1c>)
 800fe8e:	4604      	mov	r4, r0
 800fe90:	4608      	mov	r0, r1
 800fe92:	602b      	str	r3, [r5, #0]
 800fe94:	f7f2 fb6a 	bl	800256c <_isatty>
 800fe98:	1c43      	adds	r3, r0, #1
 800fe9a:	d102      	bne.n	800fea2 <_isatty_r+0x1a>
 800fe9c:	682b      	ldr	r3, [r5, #0]
 800fe9e:	b103      	cbz	r3, 800fea2 <_isatty_r+0x1a>
 800fea0:	6023      	str	r3, [r4, #0]
 800fea2:	bd38      	pop	{r3, r4, r5, pc}
 800fea4:	200007f0 	.word	0x200007f0

0800fea8 <_sbrk_r>:
 800fea8:	b538      	push	{r3, r4, r5, lr}
 800feaa:	2300      	movs	r3, #0
 800feac:	4d05      	ldr	r5, [pc, #20]	@ (800fec4 <_sbrk_r+0x1c>)
 800feae:	4604      	mov	r4, r0
 800feb0:	4608      	mov	r0, r1
 800feb2:	602b      	str	r3, [r5, #0]
 800feb4:	f7f2 fb72 	bl	800259c <_sbrk>
 800feb8:	1c43      	adds	r3, r0, #1
 800feba:	d102      	bne.n	800fec2 <_sbrk_r+0x1a>
 800febc:	682b      	ldr	r3, [r5, #0]
 800febe:	b103      	cbz	r3, 800fec2 <_sbrk_r+0x1a>
 800fec0:	6023      	str	r3, [r4, #0]
 800fec2:	bd38      	pop	{r3, r4, r5, pc}
 800fec4:	200007f0 	.word	0x200007f0

0800fec8 <nan>:
 800fec8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fed0 <nan+0x8>
 800fecc:	4770      	bx	lr
 800fece:	bf00      	nop
 800fed0:	00000000 	.word	0x00000000
 800fed4:	7ff80000 	.word	0x7ff80000

0800fed8 <__assert_func>:
 800fed8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800feda:	4614      	mov	r4, r2
 800fedc:	461a      	mov	r2, r3
 800fede:	4b09      	ldr	r3, [pc, #36]	@ (800ff04 <__assert_func+0x2c>)
 800fee0:	4605      	mov	r5, r0
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	68d8      	ldr	r0, [r3, #12]
 800fee6:	b954      	cbnz	r4, 800fefe <__assert_func+0x26>
 800fee8:	4b07      	ldr	r3, [pc, #28]	@ (800ff08 <__assert_func+0x30>)
 800feea:	461c      	mov	r4, r3
 800feec:	9100      	str	r1, [sp, #0]
 800feee:	4907      	ldr	r1, [pc, #28]	@ (800ff0c <__assert_func+0x34>)
 800fef0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fef4:	462b      	mov	r3, r5
 800fef6:	f000 fba3 	bl	8010640 <fiprintf>
 800fefa:	f000 fbb3 	bl	8010664 <abort>
 800fefe:	4b04      	ldr	r3, [pc, #16]	@ (800ff10 <__assert_func+0x38>)
 800ff00:	e7f4      	b.n	800feec <__assert_func+0x14>
 800ff02:	bf00      	nop
 800ff04:	20000020 	.word	0x20000020
 800ff08:	08010f0c 	.word	0x08010f0c
 800ff0c:	08010ede 	.word	0x08010ede
 800ff10:	08010ed1 	.word	0x08010ed1

0800ff14 <_calloc_r>:
 800ff14:	b570      	push	{r4, r5, r6, lr}
 800ff16:	fba1 5402 	umull	r5, r4, r1, r2
 800ff1a:	b93c      	cbnz	r4, 800ff2c <_calloc_r+0x18>
 800ff1c:	4629      	mov	r1, r5
 800ff1e:	f7fe f87b 	bl	800e018 <_malloc_r>
 800ff22:	4606      	mov	r6, r0
 800ff24:	b928      	cbnz	r0, 800ff32 <_calloc_r+0x1e>
 800ff26:	2600      	movs	r6, #0
 800ff28:	4630      	mov	r0, r6
 800ff2a:	bd70      	pop	{r4, r5, r6, pc}
 800ff2c:	220c      	movs	r2, #12
 800ff2e:	6002      	str	r2, [r0, #0]
 800ff30:	e7f9      	b.n	800ff26 <_calloc_r+0x12>
 800ff32:	462a      	mov	r2, r5
 800ff34:	4621      	mov	r1, r4
 800ff36:	f7fd f8e5 	bl	800d104 <memset>
 800ff3a:	e7f5      	b.n	800ff28 <_calloc_r+0x14>

0800ff3c <rshift>:
 800ff3c:	6903      	ldr	r3, [r0, #16]
 800ff3e:	114a      	asrs	r2, r1, #5
 800ff40:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ff44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff48:	f100 0414 	add.w	r4, r0, #20
 800ff4c:	dd45      	ble.n	800ffda <rshift+0x9e>
 800ff4e:	f011 011f 	ands.w	r1, r1, #31
 800ff52:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ff56:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ff5a:	d10c      	bne.n	800ff76 <rshift+0x3a>
 800ff5c:	f100 0710 	add.w	r7, r0, #16
 800ff60:	4629      	mov	r1, r5
 800ff62:	42b1      	cmp	r1, r6
 800ff64:	d334      	bcc.n	800ffd0 <rshift+0x94>
 800ff66:	1a9b      	subs	r3, r3, r2
 800ff68:	1eea      	subs	r2, r5, #3
 800ff6a:	009b      	lsls	r3, r3, #2
 800ff6c:	4296      	cmp	r6, r2
 800ff6e:	bf38      	it	cc
 800ff70:	2300      	movcc	r3, #0
 800ff72:	4423      	add	r3, r4
 800ff74:	e015      	b.n	800ffa2 <rshift+0x66>
 800ff76:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ff7a:	f1c1 0820 	rsb	r8, r1, #32
 800ff7e:	f105 0e04 	add.w	lr, r5, #4
 800ff82:	46a1      	mov	r9, r4
 800ff84:	40cf      	lsrs	r7, r1
 800ff86:	4576      	cmp	r6, lr
 800ff88:	46f4      	mov	ip, lr
 800ff8a:	d815      	bhi.n	800ffb8 <rshift+0x7c>
 800ff8c:	1a9a      	subs	r2, r3, r2
 800ff8e:	3501      	adds	r5, #1
 800ff90:	0092      	lsls	r2, r2, #2
 800ff92:	3a04      	subs	r2, #4
 800ff94:	42ae      	cmp	r6, r5
 800ff96:	bf38      	it	cc
 800ff98:	2200      	movcc	r2, #0
 800ff9a:	18a3      	adds	r3, r4, r2
 800ff9c:	50a7      	str	r7, [r4, r2]
 800ff9e:	b107      	cbz	r7, 800ffa2 <rshift+0x66>
 800ffa0:	3304      	adds	r3, #4
 800ffa2:	1b1a      	subs	r2, r3, r4
 800ffa4:	42a3      	cmp	r3, r4
 800ffa6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ffaa:	bf08      	it	eq
 800ffac:	2300      	moveq	r3, #0
 800ffae:	6102      	str	r2, [r0, #16]
 800ffb0:	bf08      	it	eq
 800ffb2:	6143      	streq	r3, [r0, #20]
 800ffb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ffb8:	f8dc c000 	ldr.w	ip, [ip]
 800ffbc:	fa0c fc08 	lsl.w	ip, ip, r8
 800ffc0:	ea4c 0707 	orr.w	r7, ip, r7
 800ffc4:	f849 7b04 	str.w	r7, [r9], #4
 800ffc8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ffcc:	40cf      	lsrs	r7, r1
 800ffce:	e7da      	b.n	800ff86 <rshift+0x4a>
 800ffd0:	f851 cb04 	ldr.w	ip, [r1], #4
 800ffd4:	f847 cf04 	str.w	ip, [r7, #4]!
 800ffd8:	e7c3      	b.n	800ff62 <rshift+0x26>
 800ffda:	4623      	mov	r3, r4
 800ffdc:	e7e1      	b.n	800ffa2 <rshift+0x66>

0800ffde <__hexdig_fun>:
 800ffde:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ffe2:	2b09      	cmp	r3, #9
 800ffe4:	d802      	bhi.n	800ffec <__hexdig_fun+0xe>
 800ffe6:	3820      	subs	r0, #32
 800ffe8:	b2c0      	uxtb	r0, r0
 800ffea:	4770      	bx	lr
 800ffec:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800fff0:	2b05      	cmp	r3, #5
 800fff2:	d801      	bhi.n	800fff8 <__hexdig_fun+0x1a>
 800fff4:	3847      	subs	r0, #71	@ 0x47
 800fff6:	e7f7      	b.n	800ffe8 <__hexdig_fun+0xa>
 800fff8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800fffc:	2b05      	cmp	r3, #5
 800fffe:	d801      	bhi.n	8010004 <__hexdig_fun+0x26>
 8010000:	3827      	subs	r0, #39	@ 0x27
 8010002:	e7f1      	b.n	800ffe8 <__hexdig_fun+0xa>
 8010004:	2000      	movs	r0, #0
 8010006:	4770      	bx	lr

08010008 <__gethex>:
 8010008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801000c:	b085      	sub	sp, #20
 801000e:	468a      	mov	sl, r1
 8010010:	4690      	mov	r8, r2
 8010012:	9302      	str	r3, [sp, #8]
 8010014:	680b      	ldr	r3, [r1, #0]
 8010016:	9001      	str	r0, [sp, #4]
 8010018:	1c9c      	adds	r4, r3, #2
 801001a:	46a1      	mov	r9, r4
 801001c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010020:	2830      	cmp	r0, #48	@ 0x30
 8010022:	d0fa      	beq.n	801001a <__gethex+0x12>
 8010024:	eba9 0303 	sub.w	r3, r9, r3
 8010028:	f1a3 0b02 	sub.w	fp, r3, #2
 801002c:	f7ff ffd7 	bl	800ffde <__hexdig_fun>
 8010030:	4605      	mov	r5, r0
 8010032:	2800      	cmp	r0, #0
 8010034:	d166      	bne.n	8010104 <__gethex+0xfc>
 8010036:	2201      	movs	r2, #1
 8010038:	499e      	ldr	r1, [pc, #632]	@ (80102b4 <__gethex+0x2ac>)
 801003a:	4648      	mov	r0, r9
 801003c:	f7ff feff 	bl	800fe3e <strncmp>
 8010040:	4607      	mov	r7, r0
 8010042:	2800      	cmp	r0, #0
 8010044:	d165      	bne.n	8010112 <__gethex+0x10a>
 8010046:	f899 0001 	ldrb.w	r0, [r9, #1]
 801004a:	4626      	mov	r6, r4
 801004c:	f7ff ffc7 	bl	800ffde <__hexdig_fun>
 8010050:	2800      	cmp	r0, #0
 8010052:	d060      	beq.n	8010116 <__gethex+0x10e>
 8010054:	4623      	mov	r3, r4
 8010056:	7818      	ldrb	r0, [r3, #0]
 8010058:	4699      	mov	r9, r3
 801005a:	3301      	adds	r3, #1
 801005c:	2830      	cmp	r0, #48	@ 0x30
 801005e:	d0fa      	beq.n	8010056 <__gethex+0x4e>
 8010060:	f7ff ffbd 	bl	800ffde <__hexdig_fun>
 8010064:	fab0 f580 	clz	r5, r0
 8010068:	f04f 0b01 	mov.w	fp, #1
 801006c:	096d      	lsrs	r5, r5, #5
 801006e:	464a      	mov	r2, r9
 8010070:	4616      	mov	r6, r2
 8010072:	3201      	adds	r2, #1
 8010074:	7830      	ldrb	r0, [r6, #0]
 8010076:	f7ff ffb2 	bl	800ffde <__hexdig_fun>
 801007a:	2800      	cmp	r0, #0
 801007c:	d1f8      	bne.n	8010070 <__gethex+0x68>
 801007e:	2201      	movs	r2, #1
 8010080:	498c      	ldr	r1, [pc, #560]	@ (80102b4 <__gethex+0x2ac>)
 8010082:	4630      	mov	r0, r6
 8010084:	f7ff fedb 	bl	800fe3e <strncmp>
 8010088:	2800      	cmp	r0, #0
 801008a:	d13e      	bne.n	801010a <__gethex+0x102>
 801008c:	b944      	cbnz	r4, 80100a0 <__gethex+0x98>
 801008e:	1c74      	adds	r4, r6, #1
 8010090:	4622      	mov	r2, r4
 8010092:	4616      	mov	r6, r2
 8010094:	3201      	adds	r2, #1
 8010096:	7830      	ldrb	r0, [r6, #0]
 8010098:	f7ff ffa1 	bl	800ffde <__hexdig_fun>
 801009c:	2800      	cmp	r0, #0
 801009e:	d1f8      	bne.n	8010092 <__gethex+0x8a>
 80100a0:	1ba4      	subs	r4, r4, r6
 80100a2:	00a7      	lsls	r7, r4, #2
 80100a4:	7833      	ldrb	r3, [r6, #0]
 80100a6:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80100aa:	2b50      	cmp	r3, #80	@ 0x50
 80100ac:	d13d      	bne.n	801012a <__gethex+0x122>
 80100ae:	7873      	ldrb	r3, [r6, #1]
 80100b0:	2b2b      	cmp	r3, #43	@ 0x2b
 80100b2:	d032      	beq.n	801011a <__gethex+0x112>
 80100b4:	2b2d      	cmp	r3, #45	@ 0x2d
 80100b6:	d033      	beq.n	8010120 <__gethex+0x118>
 80100b8:	1c71      	adds	r1, r6, #1
 80100ba:	2400      	movs	r4, #0
 80100bc:	7808      	ldrb	r0, [r1, #0]
 80100be:	f7ff ff8e 	bl	800ffde <__hexdig_fun>
 80100c2:	1e43      	subs	r3, r0, #1
 80100c4:	b2db      	uxtb	r3, r3
 80100c6:	2b18      	cmp	r3, #24
 80100c8:	d82f      	bhi.n	801012a <__gethex+0x122>
 80100ca:	f1a0 0210 	sub.w	r2, r0, #16
 80100ce:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80100d2:	f7ff ff84 	bl	800ffde <__hexdig_fun>
 80100d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80100da:	230a      	movs	r3, #10
 80100dc:	fa5f fc8c 	uxtb.w	ip, ip
 80100e0:	f1bc 0f18 	cmp.w	ip, #24
 80100e4:	d91e      	bls.n	8010124 <__gethex+0x11c>
 80100e6:	b104      	cbz	r4, 80100ea <__gethex+0xe2>
 80100e8:	4252      	negs	r2, r2
 80100ea:	4417      	add	r7, r2
 80100ec:	f8ca 1000 	str.w	r1, [sl]
 80100f0:	b1ed      	cbz	r5, 801012e <__gethex+0x126>
 80100f2:	f1bb 0f00 	cmp.w	fp, #0
 80100f6:	bf0c      	ite	eq
 80100f8:	2506      	moveq	r5, #6
 80100fa:	2500      	movne	r5, #0
 80100fc:	4628      	mov	r0, r5
 80100fe:	b005      	add	sp, #20
 8010100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010104:	2500      	movs	r5, #0
 8010106:	462c      	mov	r4, r5
 8010108:	e7b1      	b.n	801006e <__gethex+0x66>
 801010a:	2c00      	cmp	r4, #0
 801010c:	d1c8      	bne.n	80100a0 <__gethex+0x98>
 801010e:	4627      	mov	r7, r4
 8010110:	e7c8      	b.n	80100a4 <__gethex+0x9c>
 8010112:	464e      	mov	r6, r9
 8010114:	462f      	mov	r7, r5
 8010116:	2501      	movs	r5, #1
 8010118:	e7c4      	b.n	80100a4 <__gethex+0x9c>
 801011a:	2400      	movs	r4, #0
 801011c:	1cb1      	adds	r1, r6, #2
 801011e:	e7cd      	b.n	80100bc <__gethex+0xb4>
 8010120:	2401      	movs	r4, #1
 8010122:	e7fb      	b.n	801011c <__gethex+0x114>
 8010124:	fb03 0002 	mla	r0, r3, r2, r0
 8010128:	e7cf      	b.n	80100ca <__gethex+0xc2>
 801012a:	4631      	mov	r1, r6
 801012c:	e7de      	b.n	80100ec <__gethex+0xe4>
 801012e:	eba6 0309 	sub.w	r3, r6, r9
 8010132:	4629      	mov	r1, r5
 8010134:	3b01      	subs	r3, #1
 8010136:	2b07      	cmp	r3, #7
 8010138:	dc0a      	bgt.n	8010150 <__gethex+0x148>
 801013a:	9801      	ldr	r0, [sp, #4]
 801013c:	f7fd fff8 	bl	800e130 <_Balloc>
 8010140:	4604      	mov	r4, r0
 8010142:	b940      	cbnz	r0, 8010156 <__gethex+0x14e>
 8010144:	4b5c      	ldr	r3, [pc, #368]	@ (80102b8 <__gethex+0x2b0>)
 8010146:	4602      	mov	r2, r0
 8010148:	21e4      	movs	r1, #228	@ 0xe4
 801014a:	485c      	ldr	r0, [pc, #368]	@ (80102bc <__gethex+0x2b4>)
 801014c:	f7ff fec4 	bl	800fed8 <__assert_func>
 8010150:	3101      	adds	r1, #1
 8010152:	105b      	asrs	r3, r3, #1
 8010154:	e7ef      	b.n	8010136 <__gethex+0x12e>
 8010156:	f100 0a14 	add.w	sl, r0, #20
 801015a:	2300      	movs	r3, #0
 801015c:	4655      	mov	r5, sl
 801015e:	469b      	mov	fp, r3
 8010160:	45b1      	cmp	r9, r6
 8010162:	d337      	bcc.n	80101d4 <__gethex+0x1cc>
 8010164:	f845 bb04 	str.w	fp, [r5], #4
 8010168:	eba5 050a 	sub.w	r5, r5, sl
 801016c:	4658      	mov	r0, fp
 801016e:	10ad      	asrs	r5, r5, #2
 8010170:	6125      	str	r5, [r4, #16]
 8010172:	016d      	lsls	r5, r5, #5
 8010174:	f7fe f8d0 	bl	800e318 <__hi0bits>
 8010178:	f8d8 6000 	ldr.w	r6, [r8]
 801017c:	1a2d      	subs	r5, r5, r0
 801017e:	42b5      	cmp	r5, r6
 8010180:	dd54      	ble.n	801022c <__gethex+0x224>
 8010182:	1bad      	subs	r5, r5, r6
 8010184:	4620      	mov	r0, r4
 8010186:	4629      	mov	r1, r5
 8010188:	f7fe fc6d 	bl	800ea66 <__any_on>
 801018c:	4681      	mov	r9, r0
 801018e:	b178      	cbz	r0, 80101b0 <__gethex+0x1a8>
 8010190:	1e6b      	subs	r3, r5, #1
 8010192:	f04f 0901 	mov.w	r9, #1
 8010196:	1159      	asrs	r1, r3, #5
 8010198:	f003 021f 	and.w	r2, r3, #31
 801019c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80101a0:	fa09 f202 	lsl.w	r2, r9, r2
 80101a4:	420a      	tst	r2, r1
 80101a6:	d003      	beq.n	80101b0 <__gethex+0x1a8>
 80101a8:	454b      	cmp	r3, r9
 80101aa:	dc36      	bgt.n	801021a <__gethex+0x212>
 80101ac:	f04f 0902 	mov.w	r9, #2
 80101b0:	442f      	add	r7, r5
 80101b2:	4629      	mov	r1, r5
 80101b4:	4620      	mov	r0, r4
 80101b6:	f7ff fec1 	bl	800ff3c <rshift>
 80101ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80101be:	42bb      	cmp	r3, r7
 80101c0:	da42      	bge.n	8010248 <__gethex+0x240>
 80101c2:	4621      	mov	r1, r4
 80101c4:	9801      	ldr	r0, [sp, #4]
 80101c6:	f7fd fff3 	bl	800e1b0 <_Bfree>
 80101ca:	2300      	movs	r3, #0
 80101cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80101ce:	25a3      	movs	r5, #163	@ 0xa3
 80101d0:	6013      	str	r3, [r2, #0]
 80101d2:	e793      	b.n	80100fc <__gethex+0xf4>
 80101d4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80101d8:	2a2e      	cmp	r2, #46	@ 0x2e
 80101da:	d012      	beq.n	8010202 <__gethex+0x1fa>
 80101dc:	2b20      	cmp	r3, #32
 80101de:	d104      	bne.n	80101ea <__gethex+0x1e2>
 80101e0:	f845 bb04 	str.w	fp, [r5], #4
 80101e4:	f04f 0b00 	mov.w	fp, #0
 80101e8:	465b      	mov	r3, fp
 80101ea:	7830      	ldrb	r0, [r6, #0]
 80101ec:	9303      	str	r3, [sp, #12]
 80101ee:	f7ff fef6 	bl	800ffde <__hexdig_fun>
 80101f2:	9b03      	ldr	r3, [sp, #12]
 80101f4:	f000 000f 	and.w	r0, r0, #15
 80101f8:	4098      	lsls	r0, r3
 80101fa:	3304      	adds	r3, #4
 80101fc:	ea4b 0b00 	orr.w	fp, fp, r0
 8010200:	e7ae      	b.n	8010160 <__gethex+0x158>
 8010202:	45b1      	cmp	r9, r6
 8010204:	d8ea      	bhi.n	80101dc <__gethex+0x1d4>
 8010206:	2201      	movs	r2, #1
 8010208:	492a      	ldr	r1, [pc, #168]	@ (80102b4 <__gethex+0x2ac>)
 801020a:	4630      	mov	r0, r6
 801020c:	9303      	str	r3, [sp, #12]
 801020e:	f7ff fe16 	bl	800fe3e <strncmp>
 8010212:	9b03      	ldr	r3, [sp, #12]
 8010214:	2800      	cmp	r0, #0
 8010216:	d1e1      	bne.n	80101dc <__gethex+0x1d4>
 8010218:	e7a2      	b.n	8010160 <__gethex+0x158>
 801021a:	1ea9      	subs	r1, r5, #2
 801021c:	4620      	mov	r0, r4
 801021e:	f7fe fc22 	bl	800ea66 <__any_on>
 8010222:	2800      	cmp	r0, #0
 8010224:	d0c2      	beq.n	80101ac <__gethex+0x1a4>
 8010226:	f04f 0903 	mov.w	r9, #3
 801022a:	e7c1      	b.n	80101b0 <__gethex+0x1a8>
 801022c:	da09      	bge.n	8010242 <__gethex+0x23a>
 801022e:	1b75      	subs	r5, r6, r5
 8010230:	4621      	mov	r1, r4
 8010232:	9801      	ldr	r0, [sp, #4]
 8010234:	462a      	mov	r2, r5
 8010236:	1b7f      	subs	r7, r7, r5
 8010238:	f7fe f9d4 	bl	800e5e4 <__lshift>
 801023c:	4604      	mov	r4, r0
 801023e:	f100 0a14 	add.w	sl, r0, #20
 8010242:	f04f 0900 	mov.w	r9, #0
 8010246:	e7b8      	b.n	80101ba <__gethex+0x1b2>
 8010248:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801024c:	42bd      	cmp	r5, r7
 801024e:	dd6f      	ble.n	8010330 <__gethex+0x328>
 8010250:	1bed      	subs	r5, r5, r7
 8010252:	42ae      	cmp	r6, r5
 8010254:	dc34      	bgt.n	80102c0 <__gethex+0x2b8>
 8010256:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801025a:	2b02      	cmp	r3, #2
 801025c:	d022      	beq.n	80102a4 <__gethex+0x29c>
 801025e:	2b03      	cmp	r3, #3
 8010260:	d024      	beq.n	80102ac <__gethex+0x2a4>
 8010262:	2b01      	cmp	r3, #1
 8010264:	d115      	bne.n	8010292 <__gethex+0x28a>
 8010266:	42ae      	cmp	r6, r5
 8010268:	d113      	bne.n	8010292 <__gethex+0x28a>
 801026a:	2e01      	cmp	r6, #1
 801026c:	d10b      	bne.n	8010286 <__gethex+0x27e>
 801026e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010272:	2562      	movs	r5, #98	@ 0x62
 8010274:	9a02      	ldr	r2, [sp, #8]
 8010276:	6013      	str	r3, [r2, #0]
 8010278:	2301      	movs	r3, #1
 801027a:	6123      	str	r3, [r4, #16]
 801027c:	f8ca 3000 	str.w	r3, [sl]
 8010280:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010282:	601c      	str	r4, [r3, #0]
 8010284:	e73a      	b.n	80100fc <__gethex+0xf4>
 8010286:	1e71      	subs	r1, r6, #1
 8010288:	4620      	mov	r0, r4
 801028a:	f7fe fbec 	bl	800ea66 <__any_on>
 801028e:	2800      	cmp	r0, #0
 8010290:	d1ed      	bne.n	801026e <__gethex+0x266>
 8010292:	4621      	mov	r1, r4
 8010294:	9801      	ldr	r0, [sp, #4]
 8010296:	f7fd ff8b 	bl	800e1b0 <_Bfree>
 801029a:	2300      	movs	r3, #0
 801029c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801029e:	2550      	movs	r5, #80	@ 0x50
 80102a0:	6013      	str	r3, [r2, #0]
 80102a2:	e72b      	b.n	80100fc <__gethex+0xf4>
 80102a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d1f3      	bne.n	8010292 <__gethex+0x28a>
 80102aa:	e7e0      	b.n	801026e <__gethex+0x266>
 80102ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d1dd      	bne.n	801026e <__gethex+0x266>
 80102b2:	e7ee      	b.n	8010292 <__gethex+0x28a>
 80102b4:	08010e60 	.word	0x08010e60
 80102b8:	08010cf6 	.word	0x08010cf6
 80102bc:	08010f0d 	.word	0x08010f0d
 80102c0:	1e6f      	subs	r7, r5, #1
 80102c2:	f1b9 0f00 	cmp.w	r9, #0
 80102c6:	d130      	bne.n	801032a <__gethex+0x322>
 80102c8:	b127      	cbz	r7, 80102d4 <__gethex+0x2cc>
 80102ca:	4639      	mov	r1, r7
 80102cc:	4620      	mov	r0, r4
 80102ce:	f7fe fbca 	bl	800ea66 <__any_on>
 80102d2:	4681      	mov	r9, r0
 80102d4:	117a      	asrs	r2, r7, #5
 80102d6:	2301      	movs	r3, #1
 80102d8:	f007 071f 	and.w	r7, r7, #31
 80102dc:	4629      	mov	r1, r5
 80102de:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80102e2:	4620      	mov	r0, r4
 80102e4:	40bb      	lsls	r3, r7
 80102e6:	1b76      	subs	r6, r6, r5
 80102e8:	2502      	movs	r5, #2
 80102ea:	4213      	tst	r3, r2
 80102ec:	bf18      	it	ne
 80102ee:	f049 0902 	orrne.w	r9, r9, #2
 80102f2:	f7ff fe23 	bl	800ff3c <rshift>
 80102f6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80102fa:	f1b9 0f00 	cmp.w	r9, #0
 80102fe:	d047      	beq.n	8010390 <__gethex+0x388>
 8010300:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010304:	2b02      	cmp	r3, #2
 8010306:	d015      	beq.n	8010334 <__gethex+0x32c>
 8010308:	2b03      	cmp	r3, #3
 801030a:	d017      	beq.n	801033c <__gethex+0x334>
 801030c:	2b01      	cmp	r3, #1
 801030e:	d109      	bne.n	8010324 <__gethex+0x31c>
 8010310:	f019 0f02 	tst.w	r9, #2
 8010314:	d006      	beq.n	8010324 <__gethex+0x31c>
 8010316:	f8da 3000 	ldr.w	r3, [sl]
 801031a:	ea49 0903 	orr.w	r9, r9, r3
 801031e:	f019 0f01 	tst.w	r9, #1
 8010322:	d10e      	bne.n	8010342 <__gethex+0x33a>
 8010324:	f045 0510 	orr.w	r5, r5, #16
 8010328:	e032      	b.n	8010390 <__gethex+0x388>
 801032a:	f04f 0901 	mov.w	r9, #1
 801032e:	e7d1      	b.n	80102d4 <__gethex+0x2cc>
 8010330:	2501      	movs	r5, #1
 8010332:	e7e2      	b.n	80102fa <__gethex+0x2f2>
 8010334:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010336:	f1c3 0301 	rsb	r3, r3, #1
 801033a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801033c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801033e:	2b00      	cmp	r3, #0
 8010340:	d0f0      	beq.n	8010324 <__gethex+0x31c>
 8010342:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010346:	f104 0314 	add.w	r3, r4, #20
 801034a:	f04f 0c00 	mov.w	ip, #0
 801034e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010352:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010356:	4618      	mov	r0, r3
 8010358:	f853 2b04 	ldr.w	r2, [r3], #4
 801035c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010360:	d01b      	beq.n	801039a <__gethex+0x392>
 8010362:	3201      	adds	r2, #1
 8010364:	6002      	str	r2, [r0, #0]
 8010366:	2d02      	cmp	r5, #2
 8010368:	f104 0314 	add.w	r3, r4, #20
 801036c:	d13c      	bne.n	80103e8 <__gethex+0x3e0>
 801036e:	f8d8 2000 	ldr.w	r2, [r8]
 8010372:	3a01      	subs	r2, #1
 8010374:	42b2      	cmp	r2, r6
 8010376:	d109      	bne.n	801038c <__gethex+0x384>
 8010378:	1171      	asrs	r1, r6, #5
 801037a:	2201      	movs	r2, #1
 801037c:	f006 061f 	and.w	r6, r6, #31
 8010380:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010384:	fa02 f606 	lsl.w	r6, r2, r6
 8010388:	421e      	tst	r6, r3
 801038a:	d13a      	bne.n	8010402 <__gethex+0x3fa>
 801038c:	f045 0520 	orr.w	r5, r5, #32
 8010390:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010392:	601c      	str	r4, [r3, #0]
 8010394:	9b02      	ldr	r3, [sp, #8]
 8010396:	601f      	str	r7, [r3, #0]
 8010398:	e6b0      	b.n	80100fc <__gethex+0xf4>
 801039a:	4299      	cmp	r1, r3
 801039c:	f843 cc04 	str.w	ip, [r3, #-4]
 80103a0:	d8d9      	bhi.n	8010356 <__gethex+0x34e>
 80103a2:	68a3      	ldr	r3, [r4, #8]
 80103a4:	459b      	cmp	fp, r3
 80103a6:	db17      	blt.n	80103d8 <__gethex+0x3d0>
 80103a8:	6861      	ldr	r1, [r4, #4]
 80103aa:	9801      	ldr	r0, [sp, #4]
 80103ac:	3101      	adds	r1, #1
 80103ae:	f7fd febf 	bl	800e130 <_Balloc>
 80103b2:	4681      	mov	r9, r0
 80103b4:	b918      	cbnz	r0, 80103be <__gethex+0x3b6>
 80103b6:	4b1a      	ldr	r3, [pc, #104]	@ (8010420 <__gethex+0x418>)
 80103b8:	4602      	mov	r2, r0
 80103ba:	2184      	movs	r1, #132	@ 0x84
 80103bc:	e6c5      	b.n	801014a <__gethex+0x142>
 80103be:	6922      	ldr	r2, [r4, #16]
 80103c0:	f104 010c 	add.w	r1, r4, #12
 80103c4:	300c      	adds	r0, #12
 80103c6:	3202      	adds	r2, #2
 80103c8:	0092      	lsls	r2, r2, #2
 80103ca:	f7fc ff4c 	bl	800d266 <memcpy>
 80103ce:	4621      	mov	r1, r4
 80103d0:	464c      	mov	r4, r9
 80103d2:	9801      	ldr	r0, [sp, #4]
 80103d4:	f7fd feec 	bl	800e1b0 <_Bfree>
 80103d8:	6923      	ldr	r3, [r4, #16]
 80103da:	1c5a      	adds	r2, r3, #1
 80103dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80103e0:	6122      	str	r2, [r4, #16]
 80103e2:	2201      	movs	r2, #1
 80103e4:	615a      	str	r2, [r3, #20]
 80103e6:	e7be      	b.n	8010366 <__gethex+0x35e>
 80103e8:	6922      	ldr	r2, [r4, #16]
 80103ea:	455a      	cmp	r2, fp
 80103ec:	dd0b      	ble.n	8010406 <__gethex+0x3fe>
 80103ee:	2101      	movs	r1, #1
 80103f0:	4620      	mov	r0, r4
 80103f2:	f7ff fda3 	bl	800ff3c <rshift>
 80103f6:	3701      	adds	r7, #1
 80103f8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80103fc:	42bb      	cmp	r3, r7
 80103fe:	f6ff aee0 	blt.w	80101c2 <__gethex+0x1ba>
 8010402:	2501      	movs	r5, #1
 8010404:	e7c2      	b.n	801038c <__gethex+0x384>
 8010406:	f016 061f 	ands.w	r6, r6, #31
 801040a:	d0fa      	beq.n	8010402 <__gethex+0x3fa>
 801040c:	4453      	add	r3, sl
 801040e:	f1c6 0620 	rsb	r6, r6, #32
 8010412:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010416:	f7fd ff7f 	bl	800e318 <__hi0bits>
 801041a:	42b0      	cmp	r0, r6
 801041c:	dbe7      	blt.n	80103ee <__gethex+0x3e6>
 801041e:	e7f0      	b.n	8010402 <__gethex+0x3fa>
 8010420:	08010cf6 	.word	0x08010cf6

08010424 <L_shift>:
 8010424:	f1c2 0208 	rsb	r2, r2, #8
 8010428:	0092      	lsls	r2, r2, #2
 801042a:	b570      	push	{r4, r5, r6, lr}
 801042c:	f1c2 0620 	rsb	r6, r2, #32
 8010430:	6843      	ldr	r3, [r0, #4]
 8010432:	6804      	ldr	r4, [r0, #0]
 8010434:	fa03 f506 	lsl.w	r5, r3, r6
 8010438:	40d3      	lsrs	r3, r2
 801043a:	432c      	orrs	r4, r5
 801043c:	6004      	str	r4, [r0, #0]
 801043e:	f840 3f04 	str.w	r3, [r0, #4]!
 8010442:	4288      	cmp	r0, r1
 8010444:	d3f4      	bcc.n	8010430 <L_shift+0xc>
 8010446:	bd70      	pop	{r4, r5, r6, pc}

08010448 <__match>:
 8010448:	6803      	ldr	r3, [r0, #0]
 801044a:	3301      	adds	r3, #1
 801044c:	b530      	push	{r4, r5, lr}
 801044e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010452:	b914      	cbnz	r4, 801045a <__match+0x12>
 8010454:	6003      	str	r3, [r0, #0]
 8010456:	2001      	movs	r0, #1
 8010458:	bd30      	pop	{r4, r5, pc}
 801045a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801045e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010462:	2d19      	cmp	r5, #25
 8010464:	bf98      	it	ls
 8010466:	3220      	addls	r2, #32
 8010468:	42a2      	cmp	r2, r4
 801046a:	d0f0      	beq.n	801044e <__match+0x6>
 801046c:	2000      	movs	r0, #0
 801046e:	e7f3      	b.n	8010458 <__match+0x10>

08010470 <__hexnan>:
 8010470:	680b      	ldr	r3, [r1, #0]
 8010472:	6801      	ldr	r1, [r0, #0]
 8010474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010478:	115e      	asrs	r6, r3, #5
 801047a:	f013 031f 	ands.w	r3, r3, #31
 801047e:	f04f 0500 	mov.w	r5, #0
 8010482:	b087      	sub	sp, #28
 8010484:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010488:	4682      	mov	sl, r0
 801048a:	4690      	mov	r8, r2
 801048c:	46ab      	mov	fp, r5
 801048e:	bf18      	it	ne
 8010490:	3604      	addne	r6, #4
 8010492:	9301      	str	r3, [sp, #4]
 8010494:	9502      	str	r5, [sp, #8]
 8010496:	1f37      	subs	r7, r6, #4
 8010498:	f846 5c04 	str.w	r5, [r6, #-4]
 801049c:	46b9      	mov	r9, r7
 801049e:	463c      	mov	r4, r7
 80104a0:	1c4b      	adds	r3, r1, #1
 80104a2:	784a      	ldrb	r2, [r1, #1]
 80104a4:	9303      	str	r3, [sp, #12]
 80104a6:	b342      	cbz	r2, 80104fa <__hexnan+0x8a>
 80104a8:	4610      	mov	r0, r2
 80104aa:	9105      	str	r1, [sp, #20]
 80104ac:	9204      	str	r2, [sp, #16]
 80104ae:	f7ff fd96 	bl	800ffde <__hexdig_fun>
 80104b2:	2800      	cmp	r0, #0
 80104b4:	d151      	bne.n	801055a <__hexnan+0xea>
 80104b6:	9a04      	ldr	r2, [sp, #16]
 80104b8:	9905      	ldr	r1, [sp, #20]
 80104ba:	2a20      	cmp	r2, #32
 80104bc:	d818      	bhi.n	80104f0 <__hexnan+0x80>
 80104be:	9b02      	ldr	r3, [sp, #8]
 80104c0:	459b      	cmp	fp, r3
 80104c2:	dd13      	ble.n	80104ec <__hexnan+0x7c>
 80104c4:	454c      	cmp	r4, r9
 80104c6:	d206      	bcs.n	80104d6 <__hexnan+0x66>
 80104c8:	2d07      	cmp	r5, #7
 80104ca:	dc04      	bgt.n	80104d6 <__hexnan+0x66>
 80104cc:	462a      	mov	r2, r5
 80104ce:	4649      	mov	r1, r9
 80104d0:	4620      	mov	r0, r4
 80104d2:	f7ff ffa7 	bl	8010424 <L_shift>
 80104d6:	4544      	cmp	r4, r8
 80104d8:	d951      	bls.n	801057e <__hexnan+0x10e>
 80104da:	2300      	movs	r3, #0
 80104dc:	f1a4 0904 	sub.w	r9, r4, #4
 80104e0:	f8cd b008 	str.w	fp, [sp, #8]
 80104e4:	f844 3c04 	str.w	r3, [r4, #-4]
 80104e8:	461d      	mov	r5, r3
 80104ea:	464c      	mov	r4, r9
 80104ec:	9903      	ldr	r1, [sp, #12]
 80104ee:	e7d7      	b.n	80104a0 <__hexnan+0x30>
 80104f0:	2a29      	cmp	r2, #41	@ 0x29
 80104f2:	d156      	bne.n	80105a2 <__hexnan+0x132>
 80104f4:	3102      	adds	r1, #2
 80104f6:	f8ca 1000 	str.w	r1, [sl]
 80104fa:	f1bb 0f00 	cmp.w	fp, #0
 80104fe:	d050      	beq.n	80105a2 <__hexnan+0x132>
 8010500:	454c      	cmp	r4, r9
 8010502:	d206      	bcs.n	8010512 <__hexnan+0xa2>
 8010504:	2d07      	cmp	r5, #7
 8010506:	dc04      	bgt.n	8010512 <__hexnan+0xa2>
 8010508:	462a      	mov	r2, r5
 801050a:	4649      	mov	r1, r9
 801050c:	4620      	mov	r0, r4
 801050e:	f7ff ff89 	bl	8010424 <L_shift>
 8010512:	4544      	cmp	r4, r8
 8010514:	d935      	bls.n	8010582 <__hexnan+0x112>
 8010516:	f1a8 0204 	sub.w	r2, r8, #4
 801051a:	4623      	mov	r3, r4
 801051c:	f853 1b04 	ldr.w	r1, [r3], #4
 8010520:	429f      	cmp	r7, r3
 8010522:	f842 1f04 	str.w	r1, [r2, #4]!
 8010526:	d2f9      	bcs.n	801051c <__hexnan+0xac>
 8010528:	1b3b      	subs	r3, r7, r4
 801052a:	3e03      	subs	r6, #3
 801052c:	3401      	adds	r4, #1
 801052e:	2200      	movs	r2, #0
 8010530:	f023 0303 	bic.w	r3, r3, #3
 8010534:	3304      	adds	r3, #4
 8010536:	42b4      	cmp	r4, r6
 8010538:	bf88      	it	hi
 801053a:	2304      	movhi	r3, #4
 801053c:	4443      	add	r3, r8
 801053e:	f843 2b04 	str.w	r2, [r3], #4
 8010542:	429f      	cmp	r7, r3
 8010544:	d2fb      	bcs.n	801053e <__hexnan+0xce>
 8010546:	683b      	ldr	r3, [r7, #0]
 8010548:	b91b      	cbnz	r3, 8010552 <__hexnan+0xe2>
 801054a:	4547      	cmp	r7, r8
 801054c:	d127      	bne.n	801059e <__hexnan+0x12e>
 801054e:	2301      	movs	r3, #1
 8010550:	603b      	str	r3, [r7, #0]
 8010552:	2005      	movs	r0, #5
 8010554:	b007      	add	sp, #28
 8010556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801055a:	3501      	adds	r5, #1
 801055c:	f10b 0b01 	add.w	fp, fp, #1
 8010560:	2d08      	cmp	r5, #8
 8010562:	dd05      	ble.n	8010570 <__hexnan+0x100>
 8010564:	4544      	cmp	r4, r8
 8010566:	d9c1      	bls.n	80104ec <__hexnan+0x7c>
 8010568:	2300      	movs	r3, #0
 801056a:	3c04      	subs	r4, #4
 801056c:	2501      	movs	r5, #1
 801056e:	6023      	str	r3, [r4, #0]
 8010570:	6822      	ldr	r2, [r4, #0]
 8010572:	f000 000f 	and.w	r0, r0, #15
 8010576:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801057a:	6020      	str	r0, [r4, #0]
 801057c:	e7b6      	b.n	80104ec <__hexnan+0x7c>
 801057e:	2508      	movs	r5, #8
 8010580:	e7b4      	b.n	80104ec <__hexnan+0x7c>
 8010582:	9b01      	ldr	r3, [sp, #4]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d0de      	beq.n	8010546 <__hexnan+0xd6>
 8010588:	f1c3 0320 	rsb	r3, r3, #32
 801058c:	f04f 32ff 	mov.w	r2, #4294967295
 8010590:	40da      	lsrs	r2, r3
 8010592:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010596:	4013      	ands	r3, r2
 8010598:	f846 3c04 	str.w	r3, [r6, #-4]
 801059c:	e7d3      	b.n	8010546 <__hexnan+0xd6>
 801059e:	3f04      	subs	r7, #4
 80105a0:	e7d1      	b.n	8010546 <__hexnan+0xd6>
 80105a2:	2004      	movs	r0, #4
 80105a4:	e7d6      	b.n	8010554 <__hexnan+0xe4>

080105a6 <__ascii_mbtowc>:
 80105a6:	b082      	sub	sp, #8
 80105a8:	b901      	cbnz	r1, 80105ac <__ascii_mbtowc+0x6>
 80105aa:	a901      	add	r1, sp, #4
 80105ac:	b142      	cbz	r2, 80105c0 <__ascii_mbtowc+0x1a>
 80105ae:	b14b      	cbz	r3, 80105c4 <__ascii_mbtowc+0x1e>
 80105b0:	7813      	ldrb	r3, [r2, #0]
 80105b2:	600b      	str	r3, [r1, #0]
 80105b4:	7812      	ldrb	r2, [r2, #0]
 80105b6:	1e10      	subs	r0, r2, #0
 80105b8:	bf18      	it	ne
 80105ba:	2001      	movne	r0, #1
 80105bc:	b002      	add	sp, #8
 80105be:	4770      	bx	lr
 80105c0:	4610      	mov	r0, r2
 80105c2:	e7fb      	b.n	80105bc <__ascii_mbtowc+0x16>
 80105c4:	f06f 0001 	mvn.w	r0, #1
 80105c8:	e7f8      	b.n	80105bc <__ascii_mbtowc+0x16>

080105ca <_realloc_r>:
 80105ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105ce:	4680      	mov	r8, r0
 80105d0:	4615      	mov	r5, r2
 80105d2:	460c      	mov	r4, r1
 80105d4:	b921      	cbnz	r1, 80105e0 <_realloc_r+0x16>
 80105d6:	4611      	mov	r1, r2
 80105d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80105dc:	f7fd bd1c 	b.w	800e018 <_malloc_r>
 80105e0:	b92a      	cbnz	r2, 80105ee <_realloc_r+0x24>
 80105e2:	f7fd fca5 	bl	800df30 <_free_r>
 80105e6:	2400      	movs	r4, #0
 80105e8:	4620      	mov	r0, r4
 80105ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105ee:	f000 f840 	bl	8010672 <_malloc_usable_size_r>
 80105f2:	4285      	cmp	r5, r0
 80105f4:	4606      	mov	r6, r0
 80105f6:	d802      	bhi.n	80105fe <_realloc_r+0x34>
 80105f8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80105fc:	d8f4      	bhi.n	80105e8 <_realloc_r+0x1e>
 80105fe:	4629      	mov	r1, r5
 8010600:	4640      	mov	r0, r8
 8010602:	f7fd fd09 	bl	800e018 <_malloc_r>
 8010606:	4607      	mov	r7, r0
 8010608:	2800      	cmp	r0, #0
 801060a:	d0ec      	beq.n	80105e6 <_realloc_r+0x1c>
 801060c:	42b5      	cmp	r5, r6
 801060e:	462a      	mov	r2, r5
 8010610:	4621      	mov	r1, r4
 8010612:	bf28      	it	cs
 8010614:	4632      	movcs	r2, r6
 8010616:	f7fc fe26 	bl	800d266 <memcpy>
 801061a:	4621      	mov	r1, r4
 801061c:	4640      	mov	r0, r8
 801061e:	463c      	mov	r4, r7
 8010620:	f7fd fc86 	bl	800df30 <_free_r>
 8010624:	e7e0      	b.n	80105e8 <_realloc_r+0x1e>

08010626 <__ascii_wctomb>:
 8010626:	4603      	mov	r3, r0
 8010628:	4608      	mov	r0, r1
 801062a:	b141      	cbz	r1, 801063e <__ascii_wctomb+0x18>
 801062c:	2aff      	cmp	r2, #255	@ 0xff
 801062e:	d904      	bls.n	801063a <__ascii_wctomb+0x14>
 8010630:	228a      	movs	r2, #138	@ 0x8a
 8010632:	f04f 30ff 	mov.w	r0, #4294967295
 8010636:	601a      	str	r2, [r3, #0]
 8010638:	4770      	bx	lr
 801063a:	2001      	movs	r0, #1
 801063c:	700a      	strb	r2, [r1, #0]
 801063e:	4770      	bx	lr

08010640 <fiprintf>:
 8010640:	b40e      	push	{r1, r2, r3}
 8010642:	b503      	push	{r0, r1, lr}
 8010644:	ab03      	add	r3, sp, #12
 8010646:	4601      	mov	r1, r0
 8010648:	4805      	ldr	r0, [pc, #20]	@ (8010660 <fiprintf+0x20>)
 801064a:	f853 2b04 	ldr.w	r2, [r3], #4
 801064e:	6800      	ldr	r0, [r0, #0]
 8010650:	9301      	str	r3, [sp, #4]
 8010652:	f7ff f9b5 	bl	800f9c0 <_vfiprintf_r>
 8010656:	b002      	add	sp, #8
 8010658:	f85d eb04 	ldr.w	lr, [sp], #4
 801065c:	b003      	add	sp, #12
 801065e:	4770      	bx	lr
 8010660:	20000020 	.word	0x20000020

08010664 <abort>:
 8010664:	2006      	movs	r0, #6
 8010666:	b508      	push	{r3, lr}
 8010668:	f000 f834 	bl	80106d4 <raise>
 801066c:	2001      	movs	r0, #1
 801066e:	f7f1 ff1d 	bl	80024ac <_exit>

08010672 <_malloc_usable_size_r>:
 8010672:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010676:	1f18      	subs	r0, r3, #4
 8010678:	2b00      	cmp	r3, #0
 801067a:	bfbc      	itt	lt
 801067c:	580b      	ldrlt	r3, [r1, r0]
 801067e:	18c0      	addlt	r0, r0, r3
 8010680:	4770      	bx	lr

08010682 <_raise_r>:
 8010682:	291f      	cmp	r1, #31
 8010684:	b538      	push	{r3, r4, r5, lr}
 8010686:	4605      	mov	r5, r0
 8010688:	460c      	mov	r4, r1
 801068a:	d904      	bls.n	8010696 <_raise_r+0x14>
 801068c:	2316      	movs	r3, #22
 801068e:	6003      	str	r3, [r0, #0]
 8010690:	f04f 30ff 	mov.w	r0, #4294967295
 8010694:	bd38      	pop	{r3, r4, r5, pc}
 8010696:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010698:	b112      	cbz	r2, 80106a0 <_raise_r+0x1e>
 801069a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801069e:	b94b      	cbnz	r3, 80106b4 <_raise_r+0x32>
 80106a0:	4628      	mov	r0, r5
 80106a2:	f000 f831 	bl	8010708 <_getpid_r>
 80106a6:	4622      	mov	r2, r4
 80106a8:	4601      	mov	r1, r0
 80106aa:	4628      	mov	r0, r5
 80106ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106b0:	f000 b818 	b.w	80106e4 <_kill_r>
 80106b4:	2b01      	cmp	r3, #1
 80106b6:	d00a      	beq.n	80106ce <_raise_r+0x4c>
 80106b8:	1c59      	adds	r1, r3, #1
 80106ba:	d103      	bne.n	80106c4 <_raise_r+0x42>
 80106bc:	2316      	movs	r3, #22
 80106be:	6003      	str	r3, [r0, #0]
 80106c0:	2001      	movs	r0, #1
 80106c2:	e7e7      	b.n	8010694 <_raise_r+0x12>
 80106c4:	2100      	movs	r1, #0
 80106c6:	4620      	mov	r0, r4
 80106c8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80106cc:	4798      	blx	r3
 80106ce:	2000      	movs	r0, #0
 80106d0:	e7e0      	b.n	8010694 <_raise_r+0x12>
	...

080106d4 <raise>:
 80106d4:	4b02      	ldr	r3, [pc, #8]	@ (80106e0 <raise+0xc>)
 80106d6:	4601      	mov	r1, r0
 80106d8:	6818      	ldr	r0, [r3, #0]
 80106da:	f7ff bfd2 	b.w	8010682 <_raise_r>
 80106de:	bf00      	nop
 80106e0:	20000020 	.word	0x20000020

080106e4 <_kill_r>:
 80106e4:	b538      	push	{r3, r4, r5, lr}
 80106e6:	2300      	movs	r3, #0
 80106e8:	4d06      	ldr	r5, [pc, #24]	@ (8010704 <_kill_r+0x20>)
 80106ea:	4604      	mov	r4, r0
 80106ec:	4608      	mov	r0, r1
 80106ee:	4611      	mov	r1, r2
 80106f0:	602b      	str	r3, [r5, #0]
 80106f2:	f7f1 fecb 	bl	800248c <_kill>
 80106f6:	1c43      	adds	r3, r0, #1
 80106f8:	d102      	bne.n	8010700 <_kill_r+0x1c>
 80106fa:	682b      	ldr	r3, [r5, #0]
 80106fc:	b103      	cbz	r3, 8010700 <_kill_r+0x1c>
 80106fe:	6023      	str	r3, [r4, #0]
 8010700:	bd38      	pop	{r3, r4, r5, pc}
 8010702:	bf00      	nop
 8010704:	200007f0 	.word	0x200007f0

08010708 <_getpid_r>:
 8010708:	f7f1 beb8 	b.w	800247c <_getpid>

0801070c <_init>:
 801070c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801070e:	bf00      	nop
 8010710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010712:	bc08      	pop	{r3}
 8010714:	469e      	mov	lr, r3
 8010716:	4770      	bx	lr

08010718 <_fini>:
 8010718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801071a:	bf00      	nop
 801071c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801071e:	bc08      	pop	{r3}
 8010720:	469e      	mov	lr, r3
 8010722:	4770      	bx	lr
