
STM_ESP_BMW_GAUGE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d714  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  0800d96c  0800d96c  0000e96c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db24  0800db24  0000f0ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800db24  0800db24  0000eb24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db2c  0800db2c  0000f0ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db2c  0800db2c  0000eb2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800db30  0800db30  0000eb30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ec  20000000  0800db34  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000604  200000ec  0800dc20  0000f0ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f0  0800dc20  0000f6f0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000f0ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000207e2  00000000  00000000  0000f122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003af5  00000000  00000000  0002f904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a28  00000000  00000000  00033400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000147a  00000000  00000000  00034e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e6a8  00000000  00000000  000362a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000241d7  00000000  00000000  0006494a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00120b56  00000000  00000000  00088b21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a9677  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007904  00000000  00000000  001a96bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001b0fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	200000ec 	.word	0x200000ec
 8000274:	00000000 	.word	0x00000000
 8000278:	0800d954 	.word	0x0800d954

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	200000f0 	.word	0x200000f0
 8000294:	0800d954 	.word	0x0800d954

08000298 <strlen>:
 8000298:	4603      	mov	r3, r0
 800029a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029e:	2a00      	cmp	r2, #0
 80002a0:	d1fb      	bne.n	800029a <strlen+0x2>
 80002a2:	1a18      	subs	r0, r3, r0
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr

080002a8 <__aeabi_drsub>:
 80002a8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002ac:	e002      	b.n	80002b4 <__adddf3>
 80002ae:	bf00      	nop

080002b0 <__aeabi_dsub>:
 80002b0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002b4 <__adddf3>:
 80002b4:	b530      	push	{r4, r5, lr}
 80002b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002be:	ea94 0f05 	teq	r4, r5
 80002c2:	bf08      	it	eq
 80002c4:	ea90 0f02 	teqeq	r0, r2
 80002c8:	bf1f      	itttt	ne
 80002ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002da:	f000 80e2 	beq.w	80004a2 <__adddf3+0x1ee>
 80002de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e6:	bfb8      	it	lt
 80002e8:	426d      	neglt	r5, r5
 80002ea:	dd0c      	ble.n	8000306 <__adddf3+0x52>
 80002ec:	442c      	add	r4, r5
 80002ee:	ea80 0202 	eor.w	r2, r0, r2
 80002f2:	ea81 0303 	eor.w	r3, r1, r3
 80002f6:	ea82 0000 	eor.w	r0, r2, r0
 80002fa:	ea83 0101 	eor.w	r1, r3, r1
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	2d36      	cmp	r5, #54	@ 0x36
 8000308:	bf88      	it	hi
 800030a:	bd30      	pophi	{r4, r5, pc}
 800030c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000310:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000314:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000318:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x70>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000328:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800032c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000330:	d002      	beq.n	8000338 <__adddf3+0x84>
 8000332:	4252      	negs	r2, r2
 8000334:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000338:	ea94 0f05 	teq	r4, r5
 800033c:	f000 80a7 	beq.w	800048e <__adddf3+0x1da>
 8000340:	f1a4 0401 	sub.w	r4, r4, #1
 8000344:	f1d5 0e20 	rsbs	lr, r5, #32
 8000348:	db0d      	blt.n	8000366 <__adddf3+0xb2>
 800034a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034e:	fa22 f205 	lsr.w	r2, r2, r5
 8000352:	1880      	adds	r0, r0, r2
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	fa03 f20e 	lsl.w	r2, r3, lr
 800035c:	1880      	adds	r0, r0, r2
 800035e:	fa43 f305 	asr.w	r3, r3, r5
 8000362:	4159      	adcs	r1, r3
 8000364:	e00e      	b.n	8000384 <__adddf3+0xd0>
 8000366:	f1a5 0520 	sub.w	r5, r5, #32
 800036a:	f10e 0e20 	add.w	lr, lr, #32
 800036e:	2a01      	cmp	r2, #1
 8000370:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000374:	bf28      	it	cs
 8000376:	f04c 0c02 	orrcs.w	ip, ip, #2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	18c0      	adds	r0, r0, r3
 8000380:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000384:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000388:	d507      	bpl.n	800039a <__adddf3+0xe6>
 800038a:	f04f 0e00 	mov.w	lr, #0
 800038e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000392:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000396:	eb6e 0101 	sbc.w	r1, lr, r1
 800039a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800039e:	d31b      	bcc.n	80003d8 <__adddf3+0x124>
 80003a0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003a4:	d30c      	bcc.n	80003c0 <__adddf3+0x10c>
 80003a6:	0849      	lsrs	r1, r1, #1
 80003a8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b0:	f104 0401 	add.w	r4, r4, #1
 80003b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003bc:	f080 809a 	bcs.w	80004f4 <__adddf3+0x240>
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003c4:	bf08      	it	eq
 80003c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ca:	f150 0000 	adcs.w	r0, r0, #0
 80003ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003d2:	ea41 0105 	orr.w	r1, r1, r5
 80003d6:	bd30      	pop	{r4, r5, pc}
 80003d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003dc:	4140      	adcs	r0, r0
 80003de:	eb41 0101 	adc.w	r1, r1, r1
 80003e2:	3c01      	subs	r4, #1
 80003e4:	bf28      	it	cs
 80003e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ea:	d2e9      	bcs.n	80003c0 <__adddf3+0x10c>
 80003ec:	f091 0f00 	teq	r1, #0
 80003f0:	bf04      	itt	eq
 80003f2:	4601      	moveq	r1, r0
 80003f4:	2000      	moveq	r0, #0
 80003f6:	fab1 f381 	clz	r3, r1
 80003fa:	bf08      	it	eq
 80003fc:	3320      	addeq	r3, #32
 80003fe:	f1a3 030b 	sub.w	r3, r3, #11
 8000402:	f1b3 0220 	subs.w	r2, r3, #32
 8000406:	da0c      	bge.n	8000422 <__adddf3+0x16e>
 8000408:	320c      	adds	r2, #12
 800040a:	dd08      	ble.n	800041e <__adddf3+0x16a>
 800040c:	f102 0c14 	add.w	ip, r2, #20
 8000410:	f1c2 020c 	rsb	r2, r2, #12
 8000414:	fa01 f00c 	lsl.w	r0, r1, ip
 8000418:	fa21 f102 	lsr.w	r1, r1, r2
 800041c:	e00c      	b.n	8000438 <__adddf3+0x184>
 800041e:	f102 0214 	add.w	r2, r2, #20
 8000422:	bfd8      	it	le
 8000424:	f1c2 0c20 	rsble	ip, r2, #32
 8000428:	fa01 f102 	lsl.w	r1, r1, r2
 800042c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000430:	bfdc      	itt	le
 8000432:	ea41 010c 	orrle.w	r1, r1, ip
 8000436:	4090      	lslle	r0, r2
 8000438:	1ae4      	subs	r4, r4, r3
 800043a:	bfa2      	ittt	ge
 800043c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000440:	4329      	orrge	r1, r5
 8000442:	bd30      	popge	{r4, r5, pc}
 8000444:	ea6f 0404 	mvn.w	r4, r4
 8000448:	3c1f      	subs	r4, #31
 800044a:	da1c      	bge.n	8000486 <__adddf3+0x1d2>
 800044c:	340c      	adds	r4, #12
 800044e:	dc0e      	bgt.n	800046e <__adddf3+0x1ba>
 8000450:	f104 0414 	add.w	r4, r4, #20
 8000454:	f1c4 0220 	rsb	r2, r4, #32
 8000458:	fa20 f004 	lsr.w	r0, r0, r4
 800045c:	fa01 f302 	lsl.w	r3, r1, r2
 8000460:	ea40 0003 	orr.w	r0, r0, r3
 8000464:	fa21 f304 	lsr.w	r3, r1, r4
 8000468:	ea45 0103 	orr.w	r1, r5, r3
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f1c4 040c 	rsb	r4, r4, #12
 8000472:	f1c4 0220 	rsb	r2, r4, #32
 8000476:	fa20 f002 	lsr.w	r0, r0, r2
 800047a:	fa01 f304 	lsl.w	r3, r1, r4
 800047e:	ea40 0003 	orr.w	r0, r0, r3
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	fa21 f004 	lsr.w	r0, r1, r4
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f094 0f00 	teq	r4, #0
 8000492:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000496:	bf06      	itte	eq
 8000498:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800049c:	3401      	addeq	r4, #1
 800049e:	3d01      	subne	r5, #1
 80004a0:	e74e      	b.n	8000340 <__adddf3+0x8c>
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf18      	it	ne
 80004a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ac:	d029      	beq.n	8000502 <__adddf3+0x24e>
 80004ae:	ea94 0f05 	teq	r4, r5
 80004b2:	bf08      	it	eq
 80004b4:	ea90 0f02 	teqeq	r0, r2
 80004b8:	d005      	beq.n	80004c6 <__adddf3+0x212>
 80004ba:	ea54 0c00 	orrs.w	ip, r4, r0
 80004be:	bf04      	itt	eq
 80004c0:	4619      	moveq	r1, r3
 80004c2:	4610      	moveq	r0, r2
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	ea91 0f03 	teq	r1, r3
 80004ca:	bf1e      	ittt	ne
 80004cc:	2100      	movne	r1, #0
 80004ce:	2000      	movne	r0, #0
 80004d0:	bd30      	popne	{r4, r5, pc}
 80004d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d6:	d105      	bne.n	80004e4 <__adddf3+0x230>
 80004d8:	0040      	lsls	r0, r0, #1
 80004da:	4149      	adcs	r1, r1
 80004dc:	bf28      	it	cs
 80004de:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e8:	bf3c      	itt	cc
 80004ea:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ee:	bd30      	popcc	{r4, r5, pc}
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004fc:	f04f 0000 	mov.w	r0, #0
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000506:	bf1a      	itte	ne
 8000508:	4619      	movne	r1, r3
 800050a:	4610      	movne	r0, r2
 800050c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000510:	bf1c      	itt	ne
 8000512:	460b      	movne	r3, r1
 8000514:	4602      	movne	r2, r0
 8000516:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800051a:	bf06      	itte	eq
 800051c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000520:	ea91 0f03 	teqeq	r1, r3
 8000524:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	bf00      	nop

0800052c <__aeabi_ui2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f04f 0500 	mov.w	r5, #0
 8000544:	f04f 0100 	mov.w	r1, #0
 8000548:	e750      	b.n	80003ec <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_i2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000564:	bf48      	it	mi
 8000566:	4240      	negmi	r0, r0
 8000568:	f04f 0100 	mov.w	r1, #0
 800056c:	e73e      	b.n	80003ec <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_f2d>:
 8000570:	0042      	lsls	r2, r0, #1
 8000572:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000576:	ea4f 0131 	mov.w	r1, r1, rrx
 800057a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057e:	bf1f      	itttt	ne
 8000580:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000584:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000588:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800058c:	4770      	bxne	lr
 800058e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000592:	bf08      	it	eq
 8000594:	4770      	bxeq	lr
 8000596:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800059a:	bf04      	itt	eq
 800059c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ac:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b0:	e71c      	b.n	80003ec <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_ul2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	e00a      	b.n	80005da <__aeabi_l2d+0x16>

080005c4 <__aeabi_l2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005d2:	d502      	bpl.n	80005da <__aeabi_l2d+0x16>
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005de:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e6:	f43f aed8 	beq.w	800039a <__adddf3+0xe6>
 80005ea:	f04f 0203 	mov.w	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	fa00 fc03 	lsl.w	ip, r0, r3
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000612:	ea40 000e 	orr.w	r0, r0, lr
 8000616:	fa21 f102 	lsr.w	r1, r1, r2
 800061a:	4414      	add	r4, r2
 800061c:	e6bd      	b.n	800039a <__adddf3+0xe6>
 800061e:	bf00      	nop

08000620 <__aeabi_dmul>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000626:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062e:	bf1d      	ittte	ne
 8000630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000634:	ea94 0f0c 	teqne	r4, ip
 8000638:	ea95 0f0c 	teqne	r5, ip
 800063c:	f000 f8de 	bleq	80007fc <__aeabi_dmul+0x1dc>
 8000640:	442c      	add	r4, r5
 8000642:	ea81 0603 	eor.w	r6, r1, r3
 8000646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000652:	bf18      	it	ne
 8000654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000660:	d038      	beq.n	80006d4 <__aeabi_dmul+0xb4>
 8000662:	fba0 ce02 	umull	ip, lr, r0, r2
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000676:	f04f 0600 	mov.w	r6, #0
 800067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067e:	f09c 0f00 	teq	ip, #0
 8000682:	bf18      	it	ne
 8000684:	f04e 0e01 	orrne.w	lr, lr, #1
 8000688:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800068c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000690:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000694:	d204      	bcs.n	80006a0 <__aeabi_dmul+0x80>
 8000696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800069a:	416d      	adcs	r5, r5
 800069c:	eb46 0606 	adc.w	r6, r6, r6
 80006a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b8:	bf88      	it	hi
 80006ba:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006be:	d81e      	bhi.n	80006fe <__aeabi_dmul+0xde>
 80006c0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006c4:	bf08      	it	eq
 80006c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ca:	f150 0000 	adcs.w	r0, r0, #0
 80006ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d8:	ea46 0101 	orr.w	r1, r6, r1
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e8:	bfc2      	ittt	gt
 80006ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	popgt	{r4, r5, r6, pc}
 80006f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f8:	f04f 0e00 	mov.w	lr, #0
 80006fc:	3c01      	subs	r4, #1
 80006fe:	f300 80ab 	bgt.w	8000858 <__aeabi_dmul+0x238>
 8000702:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000706:	bfde      	ittt	le
 8000708:	2000      	movle	r0, #0
 800070a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd70      	pople	{r4, r5, r6, pc}
 8000710:	f1c4 0400 	rsb	r4, r4, #0
 8000714:	3c20      	subs	r4, #32
 8000716:	da35      	bge.n	8000784 <__aeabi_dmul+0x164>
 8000718:	340c      	adds	r4, #12
 800071a:	dc1b      	bgt.n	8000754 <__aeabi_dmul+0x134>
 800071c:	f104 0414 	add.w	r4, r4, #20
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f305 	lsl.w	r3, r0, r5
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	fa21 f604 	lsr.w	r6, r1, r4
 8000744:	eb42 0106 	adc.w	r1, r2, r6
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 040c 	rsb	r4, r4, #12
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f304 	lsl.w	r3, r0, r4
 8000760:	fa20 f005 	lsr.w	r0, r0, r5
 8000764:	fa01 f204 	lsl.w	r2, r1, r4
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	f141 0100 	adc.w	r1, r1, #0
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f205 	lsl.w	r2, r0, r5
 800078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000790:	fa20 f304 	lsr.w	r3, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea43 0302 	orr.w	r3, r3, r2
 800079c:	fa21 f004 	lsr.w	r0, r1, r4
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	fa21 f204 	lsr.w	r2, r1, r4
 80007a8:	ea20 0002 	bic.w	r0, r0, r2
 80007ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f094 0f00 	teq	r4, #0
 80007c0:	d10f      	bne.n	80007e2 <__aeabi_dmul+0x1c2>
 80007c2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007c6:	0040      	lsls	r0, r0, #1
 80007c8:	eb41 0101 	adc.w	r1, r1, r1
 80007cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3c01      	subeq	r4, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1a6>
 80007d6:	ea41 0106 	orr.w	r1, r1, r6
 80007da:	f095 0f00 	teq	r5, #0
 80007de:	bf18      	it	ne
 80007e0:	4770      	bxne	lr
 80007e2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	eb43 0303 	adc.w	r3, r3, r3
 80007ec:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3d01      	subeq	r5, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1c6>
 80007f6:	ea43 0306 	orr.w	r3, r3, r6
 80007fa:	4770      	bx	lr
 80007fc:	ea94 0f0c 	teq	r4, ip
 8000800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000804:	bf18      	it	ne
 8000806:	ea95 0f0c 	teqne	r5, ip
 800080a:	d00c      	beq.n	8000826 <__aeabi_dmul+0x206>
 800080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000816:	d1d1      	bne.n	80007bc <__aeabi_dmul+0x19c>
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082a:	bf06      	itte	eq
 800082c:	4610      	moveq	r0, r2
 800082e:	4619      	moveq	r1, r3
 8000830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000834:	d019      	beq.n	800086a <__aeabi_dmul+0x24a>
 8000836:	ea94 0f0c 	teq	r4, ip
 800083a:	d102      	bne.n	8000842 <__aeabi_dmul+0x222>
 800083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000840:	d113      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000842:	ea95 0f0c 	teq	r5, ip
 8000846:	d105      	bne.n	8000854 <__aeabi_dmul+0x234>
 8000848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800084c:	bf1c      	itt	ne
 800084e:	4610      	movne	r0, r2
 8000850:	4619      	movne	r1, r3
 8000852:	d10a      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800085c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000860:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800086e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000872:	bd70      	pop	{r4, r5, r6, pc}

08000874 <__aeabi_ddiv>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800087a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000882:	bf1d      	ittte	ne
 8000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000888:	ea94 0f0c 	teqne	r4, ip
 800088c:	ea95 0f0c 	teqne	r5, ip
 8000890:	f000 f8a7 	bleq	80009e2 <__aeabi_ddiv+0x16e>
 8000894:	eba4 0405 	sub.w	r4, r4, r5
 8000898:	ea81 0e03 	eor.w	lr, r1, r3
 800089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a4:	f000 8088 	beq.w	80009b8 <__aeabi_ddiv+0x144>
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf08      	it	eq
 80008d0:	4296      	cmpeq	r6, r2
 80008d2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008d6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008da:	d202      	bcs.n	80008e2 <__aeabi_ddiv+0x6e>
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	1ab6      	subs	r6, r6, r2
 80008e4:	eb65 0503 	sbc.w	r5, r5, r3
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008f2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 000c 	orrcs.w	r0, r0, ip
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000950:	ea55 0e06 	orrs.w	lr, r5, r6
 8000954:	d018      	beq.n	8000988 <__aeabi_ddiv+0x114>
 8000956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000972:	d1c0      	bne.n	80008f6 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000978:	d10b      	bne.n	8000992 <__aeabi_ddiv+0x11e>
 800097a:	ea41 0100 	orr.w	r1, r1, r0
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000986:	e7b6      	b.n	80008f6 <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800098c:	bf04      	itt	eq
 800098e:	4301      	orreq	r1, r0
 8000990:	2000      	moveq	r0, #0
 8000992:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000996:	bf88      	it	hi
 8000998:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800099c:	f63f aeaf 	bhi.w	80006fe <__aeabi_dmul+0xde>
 80009a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a4:	bf04      	itt	eq
 80009a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ae:	f150 0000 	adcs.w	r0, r0, #0
 80009b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c4:	bfc2      	ittt	gt
 80009c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	popgt	{r4, r5, r6, pc}
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009d4:	f04f 0e00 	mov.w	lr, #0
 80009d8:	3c01      	subs	r4, #1
 80009da:	e690      	b.n	80006fe <__aeabi_dmul+0xde>
 80009dc:	ea45 0e06 	orr.w	lr, r5, r6
 80009e0:	e68d      	b.n	80006fe <__aeabi_dmul+0xde>
 80009e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	bf08      	it	eq
 80009ec:	ea95 0f0c 	teqeq	r5, ip
 80009f0:	f43f af3b 	beq.w	800086a <__aeabi_dmul+0x24a>
 80009f4:	ea94 0f0c 	teq	r4, ip
 80009f8:	d10a      	bne.n	8000a10 <__aeabi_ddiv+0x19c>
 80009fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fe:	f47f af34 	bne.w	800086a <__aeabi_dmul+0x24a>
 8000a02:	ea95 0f0c 	teq	r5, ip
 8000a06:	f47f af25 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e72c      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a10:	ea95 0f0c 	teq	r5, ip
 8000a14:	d106      	bne.n	8000a24 <__aeabi_ddiv+0x1b0>
 8000a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a1a:	f43f aefd 	beq.w	8000818 <__aeabi_dmul+0x1f8>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e722      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	f47f aec5 	bne.w	80007bc <__aeabi_dmul+0x19c>
 8000a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a36:	f47f af0d 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3e:	f47f aeeb 	bne.w	8000818 <__aeabi_dmul+0x1f8>
 8000a42:	e712      	b.n	800086a <__aeabi_dmul+0x24a>

08000a44 <__aeabi_d2uiz>:
 8000a44:	004a      	lsls	r2, r1, #1
 8000a46:	d211      	bcs.n	8000a6c <__aeabi_d2uiz+0x28>
 8000a48:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a4c:	d211      	bcs.n	8000a72 <__aeabi_d2uiz+0x2e>
 8000a4e:	d50d      	bpl.n	8000a6c <__aeabi_d2uiz+0x28>
 8000a50:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a58:	d40e      	bmi.n	8000a78 <__aeabi_d2uiz+0x34>
 8000a5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a66:	fa23 f002 	lsr.w	r0, r3, r2
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a76:	d102      	bne.n	8000a7e <__aeabi_d2uiz+0x3a>
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7c:	4770      	bx	lr
 8000a7e:	f04f 0000 	mov.w	r0, #0
 8000a82:	4770      	bx	lr

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_uldivmod>:
 8000b24:	b953      	cbnz	r3, 8000b3c <__aeabi_uldivmod+0x18>
 8000b26:	b94a      	cbnz	r2, 8000b3c <__aeabi_uldivmod+0x18>
 8000b28:	2900      	cmp	r1, #0
 8000b2a:	bf08      	it	eq
 8000b2c:	2800      	cmpeq	r0, #0
 8000b2e:	bf1c      	itt	ne
 8000b30:	f04f 31ff 	movne.w	r1, #4294967295
 8000b34:	f04f 30ff 	movne.w	r0, #4294967295
 8000b38:	f000 b97e 	b.w	8000e38 <__aeabi_idiv0>
 8000b3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b44:	f000 f806 	bl	8000b54 <__udivmoddi4>
 8000b48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b50:	b004      	add	sp, #16
 8000b52:	4770      	bx	lr

08000b54 <__udivmoddi4>:
 8000b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b58:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000b5a:	460c      	mov	r4, r1
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d14d      	bne.n	8000bfc <__udivmoddi4+0xa8>
 8000b60:	428a      	cmp	r2, r1
 8000b62:	460f      	mov	r7, r1
 8000b64:	4684      	mov	ip, r0
 8000b66:	4696      	mov	lr, r2
 8000b68:	fab2 f382 	clz	r3, r2
 8000b6c:	d960      	bls.n	8000c30 <__udivmoddi4+0xdc>
 8000b6e:	b14b      	cbz	r3, 8000b84 <__udivmoddi4+0x30>
 8000b70:	fa02 fe03 	lsl.w	lr, r2, r3
 8000b74:	f1c3 0220 	rsb	r2, r3, #32
 8000b78:	409f      	lsls	r7, r3
 8000b7a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000b7e:	fa20 f202 	lsr.w	r2, r0, r2
 8000b82:	4317      	orrs	r7, r2
 8000b84:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000b88:	fa1f f48e 	uxth.w	r4, lr
 8000b8c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000b90:	fbb7 f1f6 	udiv	r1, r7, r6
 8000b94:	fb06 7711 	mls	r7, r6, r1, r7
 8000b98:	fb01 f004 	mul.w	r0, r1, r4
 8000b9c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ba0:	4290      	cmp	r0, r2
 8000ba2:	d908      	bls.n	8000bb6 <__udivmoddi4+0x62>
 8000ba4:	eb1e 0202 	adds.w	r2, lr, r2
 8000ba8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bac:	d202      	bcs.n	8000bb4 <__udivmoddi4+0x60>
 8000bae:	4290      	cmp	r0, r2
 8000bb0:	f200 812d 	bhi.w	8000e0e <__udivmoddi4+0x2ba>
 8000bb4:	4639      	mov	r1, r7
 8000bb6:	1a12      	subs	r2, r2, r0
 8000bb8:	fa1f fc8c 	uxth.w	ip, ip
 8000bbc:	fbb2 f0f6 	udiv	r0, r2, r6
 8000bc0:	fb06 2210 	mls	r2, r6, r0, r2
 8000bc4:	fb00 f404 	mul.w	r4, r0, r4
 8000bc8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000bcc:	4564      	cmp	r4, ip
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x8e>
 8000bd0:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000bd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x8c>
 8000bda:	4564      	cmp	r4, ip
 8000bdc:	f200 811a 	bhi.w	8000e14 <__udivmoddi4+0x2c0>
 8000be0:	4610      	mov	r0, r2
 8000be2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000be6:	ebac 0c04 	sub.w	ip, ip, r4
 8000bea:	2100      	movs	r1, #0
 8000bec:	b125      	cbz	r5, 8000bf8 <__udivmoddi4+0xa4>
 8000bee:	fa2c f303 	lsr.w	r3, ip, r3
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	e9c5 3200 	strd	r3, r2, [r5]
 8000bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bfc:	428b      	cmp	r3, r1
 8000bfe:	d905      	bls.n	8000c0c <__udivmoddi4+0xb8>
 8000c00:	b10d      	cbz	r5, 8000c06 <__udivmoddi4+0xb2>
 8000c02:	e9c5 0100 	strd	r0, r1, [r5]
 8000c06:	2100      	movs	r1, #0
 8000c08:	4608      	mov	r0, r1
 8000c0a:	e7f5      	b.n	8000bf8 <__udivmoddi4+0xa4>
 8000c0c:	fab3 f183 	clz	r1, r3
 8000c10:	2900      	cmp	r1, #0
 8000c12:	d14d      	bne.n	8000cb0 <__udivmoddi4+0x15c>
 8000c14:	42a3      	cmp	r3, r4
 8000c16:	f0c0 80f2 	bcc.w	8000dfe <__udivmoddi4+0x2aa>
 8000c1a:	4290      	cmp	r0, r2
 8000c1c:	f080 80ef 	bcs.w	8000dfe <__udivmoddi4+0x2aa>
 8000c20:	4606      	mov	r6, r0
 8000c22:	4623      	mov	r3, r4
 8000c24:	4608      	mov	r0, r1
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	d0e6      	beq.n	8000bf8 <__udivmoddi4+0xa4>
 8000c2a:	e9c5 6300 	strd	r6, r3, [r5]
 8000c2e:	e7e3      	b.n	8000bf8 <__udivmoddi4+0xa4>
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	f040 80a2 	bne.w	8000d7a <__udivmoddi4+0x226>
 8000c36:	1a8a      	subs	r2, r1, r2
 8000c38:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000c3c:	fa1f f68e 	uxth.w	r6, lr
 8000c40:	2101      	movs	r1, #1
 8000c42:	fbb2 f4f7 	udiv	r4, r2, r7
 8000c46:	fb07 2014 	mls	r0, r7, r4, r2
 8000c4a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000c4e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c52:	fb06 f004 	mul.w	r0, r6, r4
 8000c56:	4290      	cmp	r0, r2
 8000c58:	d90f      	bls.n	8000c7a <__udivmoddi4+0x126>
 8000c5a:	eb1e 0202 	adds.w	r2, lr, r2
 8000c5e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000c62:	bf2c      	ite	cs
 8000c64:	f04f 0901 	movcs.w	r9, #1
 8000c68:	f04f 0900 	movcc.w	r9, #0
 8000c6c:	4290      	cmp	r0, r2
 8000c6e:	d903      	bls.n	8000c78 <__udivmoddi4+0x124>
 8000c70:	f1b9 0f00 	cmp.w	r9, #0
 8000c74:	f000 80c8 	beq.w	8000e08 <__udivmoddi4+0x2b4>
 8000c78:	4644      	mov	r4, r8
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	fa1f fc8c 	uxth.w	ip, ip
 8000c80:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c84:	fb07 2210 	mls	r2, r7, r0, r2
 8000c88:	fb00 f606 	mul.w	r6, r0, r6
 8000c8c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000c90:	4566      	cmp	r6, ip
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x152>
 8000c94:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000c98:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9c:	d202      	bcs.n	8000ca4 <__udivmoddi4+0x150>
 8000c9e:	4566      	cmp	r6, ip
 8000ca0:	f200 80bb 	bhi.w	8000e1a <__udivmoddi4+0x2c6>
 8000ca4:	4610      	mov	r0, r2
 8000ca6:	ebac 0c06 	sub.w	ip, ip, r6
 8000caa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cae:	e79d      	b.n	8000bec <__udivmoddi4+0x98>
 8000cb0:	f1c1 0620 	rsb	r6, r1, #32
 8000cb4:	408b      	lsls	r3, r1
 8000cb6:	fa04 fe01 	lsl.w	lr, r4, r1
 8000cba:	fa22 f706 	lsr.w	r7, r2, r6
 8000cbe:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cc2:	40f4      	lsrs	r4, r6
 8000cc4:	408a      	lsls	r2, r1
 8000cc6:	431f      	orrs	r7, r3
 8000cc8:	ea4e 030c 	orr.w	r3, lr, ip
 8000ccc:	fa00 fe01 	lsl.w	lr, r0, r1
 8000cd0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cd4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ce0:	fb08 4410 	mls	r4, r8, r0, r4
 8000ce4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ce8:	fb00 f90c 	mul.w	r9, r0, ip
 8000cec:	45a1      	cmp	r9, r4
 8000cee:	d90e      	bls.n	8000d0e <__udivmoddi4+0x1ba>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000cf6:	bf2c      	ite	cs
 8000cf8:	f04f 0b01 	movcs.w	fp, #1
 8000cfc:	f04f 0b00 	movcc.w	fp, #0
 8000d00:	45a1      	cmp	r9, r4
 8000d02:	d903      	bls.n	8000d0c <__udivmoddi4+0x1b8>
 8000d04:	f1bb 0f00 	cmp.w	fp, #0
 8000d08:	f000 8093 	beq.w	8000e32 <__udivmoddi4+0x2de>
 8000d0c:	4650      	mov	r0, sl
 8000d0e:	eba4 0409 	sub.w	r4, r4, r9
 8000d12:	fa1f f983 	uxth.w	r9, r3
 8000d16:	fbb4 f3f8 	udiv	r3, r4, r8
 8000d1a:	fb08 4413 	mls	r4, r8, r3, r4
 8000d1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d22:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d26:	45a4      	cmp	ip, r4
 8000d28:	d906      	bls.n	8000d38 <__udivmoddi4+0x1e4>
 8000d2a:	193c      	adds	r4, r7, r4
 8000d2c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d30:	d201      	bcs.n	8000d36 <__udivmoddi4+0x1e2>
 8000d32:	45a4      	cmp	ip, r4
 8000d34:	d87a      	bhi.n	8000e2c <__udivmoddi4+0x2d8>
 8000d36:	4643      	mov	r3, r8
 8000d38:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d3c:	eba4 040c 	sub.w	r4, r4, ip
 8000d40:	fba0 9802 	umull	r9, r8, r0, r2
 8000d44:	4544      	cmp	r4, r8
 8000d46:	46cc      	mov	ip, r9
 8000d48:	4643      	mov	r3, r8
 8000d4a:	d302      	bcc.n	8000d52 <__udivmoddi4+0x1fe>
 8000d4c:	d106      	bne.n	8000d5c <__udivmoddi4+0x208>
 8000d4e:	45ce      	cmp	lr, r9
 8000d50:	d204      	bcs.n	8000d5c <__udivmoddi4+0x208>
 8000d52:	3801      	subs	r0, #1
 8000d54:	ebb9 0c02 	subs.w	ip, r9, r2
 8000d58:	eb68 0307 	sbc.w	r3, r8, r7
 8000d5c:	b15d      	cbz	r5, 8000d76 <__udivmoddi4+0x222>
 8000d5e:	ebbe 020c 	subs.w	r2, lr, ip
 8000d62:	eb64 0403 	sbc.w	r4, r4, r3
 8000d66:	fa04 f606 	lsl.w	r6, r4, r6
 8000d6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000d6e:	40cc      	lsrs	r4, r1
 8000d70:	431e      	orrs	r6, r3
 8000d72:	e9c5 6400 	strd	r6, r4, [r5]
 8000d76:	2100      	movs	r1, #0
 8000d78:	e73e      	b.n	8000bf8 <__udivmoddi4+0xa4>
 8000d7a:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d7e:	f1c3 0120 	rsb	r1, r3, #32
 8000d82:	fa04 f203 	lsl.w	r2, r4, r3
 8000d86:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d8a:	40cc      	lsrs	r4, r1
 8000d8c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000d90:	fa20 f101 	lsr.w	r1, r0, r1
 8000d94:	fa1f f68e 	uxth.w	r6, lr
 8000d98:	fbb4 f0f7 	udiv	r0, r4, r7
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	fb07 4410 	mls	r4, r7, r0, r4
 8000da2:	0c11      	lsrs	r1, r2, #16
 8000da4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000da8:	fb00 f406 	mul.w	r4, r0, r6
 8000dac:	428c      	cmp	r4, r1
 8000dae:	d90e      	bls.n	8000dce <__udivmoddi4+0x27a>
 8000db0:	eb1e 0101 	adds.w	r1, lr, r1
 8000db4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000db8:	bf2c      	ite	cs
 8000dba:	f04f 0901 	movcs.w	r9, #1
 8000dbe:	f04f 0900 	movcc.w	r9, #0
 8000dc2:	428c      	cmp	r4, r1
 8000dc4:	d902      	bls.n	8000dcc <__udivmoddi4+0x278>
 8000dc6:	f1b9 0f00 	cmp.w	r9, #0
 8000dca:	d02c      	beq.n	8000e26 <__udivmoddi4+0x2d2>
 8000dcc:	4640      	mov	r0, r8
 8000dce:	1b09      	subs	r1, r1, r4
 8000dd0:	b292      	uxth	r2, r2
 8000dd2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dd6:	fb07 1114 	mls	r1, r7, r4, r1
 8000dda:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dde:	fb04 f106 	mul.w	r1, r4, r6
 8000de2:	4291      	cmp	r1, r2
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x2a2>
 8000de6:	eb1e 0202 	adds.w	r2, lr, r2
 8000dea:	f104 38ff 	add.w	r8, r4, #4294967295
 8000dee:	d201      	bcs.n	8000df4 <__udivmoddi4+0x2a0>
 8000df0:	4291      	cmp	r1, r2
 8000df2:	d815      	bhi.n	8000e20 <__udivmoddi4+0x2cc>
 8000df4:	4644      	mov	r4, r8
 8000df6:	1a52      	subs	r2, r2, r1
 8000df8:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000dfc:	e721      	b.n	8000c42 <__udivmoddi4+0xee>
 8000dfe:	1a86      	subs	r6, r0, r2
 8000e00:	eb64 0303 	sbc.w	r3, r4, r3
 8000e04:	2001      	movs	r0, #1
 8000e06:	e70e      	b.n	8000c26 <__udivmoddi4+0xd2>
 8000e08:	3c02      	subs	r4, #2
 8000e0a:	4472      	add	r2, lr
 8000e0c:	e735      	b.n	8000c7a <__udivmoddi4+0x126>
 8000e0e:	3902      	subs	r1, #2
 8000e10:	4472      	add	r2, lr
 8000e12:	e6d0      	b.n	8000bb6 <__udivmoddi4+0x62>
 8000e14:	44f4      	add	ip, lr
 8000e16:	3802      	subs	r0, #2
 8000e18:	e6e3      	b.n	8000be2 <__udivmoddi4+0x8e>
 8000e1a:	44f4      	add	ip, lr
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	e742      	b.n	8000ca6 <__udivmoddi4+0x152>
 8000e20:	3c02      	subs	r4, #2
 8000e22:	4472      	add	r2, lr
 8000e24:	e7e7      	b.n	8000df6 <__udivmoddi4+0x2a2>
 8000e26:	3802      	subs	r0, #2
 8000e28:	4471      	add	r1, lr
 8000e2a:	e7d0      	b.n	8000dce <__udivmoddi4+0x27a>
 8000e2c:	3b02      	subs	r3, #2
 8000e2e:	443c      	add	r4, r7
 8000e30:	e782      	b.n	8000d38 <__udivmoddi4+0x1e4>
 8000e32:	3802      	subs	r0, #2
 8000e34:	443c      	add	r4, r7
 8000e36:	e76a      	b.n	8000d0e <__udivmoddi4+0x1ba>

08000e38 <__aeabi_idiv0>:
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000e42:	4b30      	ldr	r3, [pc, #192]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e44:	4a30      	ldr	r2, [pc, #192]	@ (8000f08 <MX_FDCAN1_Init+0xcc>)
 8000e46:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000e48:	4b2e      	ldr	r3, [pc, #184]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e4e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000e54:	4b2b      	ldr	r3, [pc, #172]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e60:	4b28      	ldr	r3, [pc, #160]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000e66:	4b27      	ldr	r3, [pc, #156]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000e6c:	4b25      	ldr	r3, [pc, #148]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000e72:	4b24      	ldr	r3, [pc, #144]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 11;
 8000e78:	4b22      	ldr	r3, [pc, #136]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e7a:	220b      	movs	r2, #11
 8000e7c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 8000e7e:	4b21      	ldr	r3, [pc, #132]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e80:	2204      	movs	r2, #4
 8000e82:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e84:	4b1f      	ldr	r3, [pc, #124]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000e90:	4b1c      	ldr	r3, [pc, #112]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000e96:	4b1b      	ldr	r3, [pc, #108]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000e9c:	4b19      	ldr	r3, [pc, #100]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000ea2:	4b18      	ldr	r3, [pc, #96]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ea8:	4b16      	ldr	r3, [pc, #88]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000eae:	4815      	ldr	r0, [pc, #84]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000eb0:	f002 ffcc 	bl	8003e4c <HAL_FDCAN_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000eba:	f001 f859 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterIndex = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x316;
 8000eca:	f240 3316 	movw	r3, #790	@ 0x316
 8000ece:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x1FFFFFFF;
 8000ed0:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8000ed4:	617b      	str	r3, [r7, #20]

	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	4619      	mov	r1, r3
 8000eda:	480a      	ldr	r0, [pc, #40]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000edc:	f003 f910 	bl	8004100 <HAL_FDCAN_ConfigFilter>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d002      	beq.n	8000eec <MX_FDCAN1_Init+0xb0>
	/* Filter configuration Error */
		printf("[CAN] Unable to configure!\n");
 8000ee6:	4809      	ldr	r0, [pc, #36]	@ (8000f0c <MX_FDCAN1_Init+0xd0>)
 8000ee8:	f00b febe 	bl	800cc68 <puts>
	}
	if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 8000eec:	4805      	ldr	r0, [pc, #20]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000eee:	f003 f961 	bl	80041b4 <HAL_FDCAN_Start>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_FDCAN1_Init+0xc0>
	{
		Error_Handler();
 8000ef8:	f001 f83a 	bl	8001f70 <Error_Handler>
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	3718      	adds	r7, #24
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000108 	.word	0x20000108
 8000f08:	4000a400 	.word	0x4000a400
 8000f0c:	0800d96c 	.word	0x0800d96c

08000f10 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b0be      	sub	sp, #248	@ 0xf8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	22d0      	movs	r2, #208	@ 0xd0
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f00b ff79 	bl	800ce28 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a2f      	ldr	r2, [pc, #188]	@ (8000ff8 <HAL_FDCAN_MspInit+0xe8>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d156      	bne.n	8000fee <HAL_FDCAN_MspInit+0xde>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000f40:	f04f 0200 	mov.w	r2, #0
 8000f44:	f04f 0304 	mov.w	r3, #4
 8000f48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f52:	f107 0310 	add.w	r3, r7, #16
 8000f56:	4618      	mov	r0, r3
 8000f58:	f005 f980 	bl	800625c <HAL_RCCEx_PeriphCLKConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8000f62:	f001 f805 	bl	8001f70 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000f66:	4b25      	ldr	r3, [pc, #148]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000f6c:	4a23      	ldr	r2, [pc, #140]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f72:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8000f76:	4b21      	ldr	r3, [pc, #132]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000f7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	4b1d      	ldr	r3, [pc, #116]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f94:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000fa2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000fbc:	2309      	movs	r3, #9
 8000fbe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480d      	ldr	r0, [pc, #52]	@ (8001000 <HAL_FDCAN_MspInit+0xf0>)
 8000fca:	f003 fbd7 	bl	800477c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2027      	movs	r0, #39	@ 0x27
 8000fd4:	f001 ff26 	bl	8002e24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000fd8:	2027      	movs	r0, #39	@ 0x27
 8000fda:	f001 ff3d 	bl	8002e58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2028      	movs	r0, #40	@ 0x28
 8000fe4:	f001 ff1e 	bl	8002e24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000fe8:	2028      	movs	r0, #40	@ 0x28
 8000fea:	f001 ff35 	bl	8002e58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000fee:	bf00      	nop
 8000ff0:	37f8      	adds	r7, #248	@ 0xf8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	4000a400 	.word	0x4000a400
 8000ffc:	44020c00 	.word	0x44020c00
 8001000:	42020000 	.word	0x42020000

08001004 <InitCANFrames>:
  /* USER CODE END FDCAN1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void InitCANFrames() {
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
    for (int i = 0; i < FRAME_COUNT; i++) {
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	e041      	b.n	8001094 <InitCANFrames+0x90>
        frames[i].header.IdType = FDCAN_STANDARD_ID;
 8001010:	4a25      	ldr	r2, [pc, #148]	@ (80010a8 <InitCANFrames+0xa4>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	212c      	movs	r1, #44	@ 0x2c
 8001016:	fb01 f303 	mul.w	r3, r1, r3
 800101a:	4413      	add	r3, r2
 800101c:	3304      	adds	r3, #4
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
        frames[i].header.TxFrameType = FDCAN_DATA_FRAME;
 8001022:	4a21      	ldr	r2, [pc, #132]	@ (80010a8 <InitCANFrames+0xa4>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	212c      	movs	r1, #44	@ 0x2c
 8001028:	fb01 f303 	mul.w	r3, r1, r3
 800102c:	4413      	add	r3, r2
 800102e:	3308      	adds	r3, #8
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
        frames[i].header.DataLength = FDCAN_DLC_BYTES_8;
 8001034:	4a1c      	ldr	r2, [pc, #112]	@ (80010a8 <InitCANFrames+0xa4>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	212c      	movs	r1, #44	@ 0x2c
 800103a:	fb01 f303 	mul.w	r3, r1, r3
 800103e:	4413      	add	r3, r2
 8001040:	330c      	adds	r3, #12
 8001042:	2208      	movs	r2, #8
 8001044:	601a      	str	r2, [r3, #0]
        frames[i].header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001046:	4a18      	ldr	r2, [pc, #96]	@ (80010a8 <InitCANFrames+0xa4>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	212c      	movs	r1, #44	@ 0x2c
 800104c:	fb01 f303 	mul.w	r3, r1, r3
 8001050:	4413      	add	r3, r2
 8001052:	3310      	adds	r3, #16
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
        frames[i].header.BitRateSwitch = FDCAN_BRS_OFF;
 8001058:	4a13      	ldr	r2, [pc, #76]	@ (80010a8 <InitCANFrames+0xa4>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	212c      	movs	r1, #44	@ 0x2c
 800105e:	fb01 f303 	mul.w	r3, r1, r3
 8001062:	4413      	add	r3, r2
 8001064:	3314      	adds	r3, #20
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
        frames[i].header.FDFormat = FDCAN_CLASSIC_CAN;
 800106a:	4a0f      	ldr	r2, [pc, #60]	@ (80010a8 <InitCANFrames+0xa4>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	212c      	movs	r1, #44	@ 0x2c
 8001070:	fb01 f303 	mul.w	r3, r1, r3
 8001074:	4413      	add	r3, r2
 8001076:	3318      	adds	r3, #24
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
        frames[i].header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800107c:	4a0a      	ldr	r2, [pc, #40]	@ (80010a8 <InitCANFrames+0xa4>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	212c      	movs	r1, #44	@ 0x2c
 8001082:	fb01 f303 	mul.w	r3, r1, r3
 8001086:	4413      	add	r3, r2
 8001088:	331c      	adds	r3, #28
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < FRAME_COUNT; i++) {
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3301      	adds	r3, #1
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b02      	cmp	r3, #2
 8001098:	ddba      	ble.n	8001010 <InitCANFrames+0xc>
    }
}
 800109a:	bf00      	nop
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	20000000 	.word	0x20000000

080010ac <SendCANFrame>:

void SendCANFrame(CAN_FrameIndex frameIndex) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
    if (frameIndex >= FRAME_COUNT) {
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d903      	bls.n	80010c4 <SendCANFrame+0x18>
    	printf("Over can frames index");
 80010bc:	480c      	ldr	r0, [pc, #48]	@ (80010f0 <SendCANFrame+0x44>)
 80010be:	f00b fd6b 	bl	800cb98 <iprintf>
        return; // todo add error
 80010c2:	e011      	b.n	80010e8 <SendCANFrame+0x3c>

    }
    HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &frames[frameIndex].header, frames[frameIndex].data);
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	222c      	movs	r2, #44	@ 0x2c
 80010c8:	fb02 f303 	mul.w	r3, r2, r3
 80010cc:	4a09      	ldr	r2, [pc, #36]	@ (80010f4 <SendCANFrame+0x48>)
 80010ce:	1899      	adds	r1, r3, r2
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	222c      	movs	r2, #44	@ 0x2c
 80010d4:	fb02 f303 	mul.w	r3, r2, r3
 80010d8:	3320      	adds	r3, #32
 80010da:	4a06      	ldr	r2, [pc, #24]	@ (80010f4 <SendCANFrame+0x48>)
 80010dc:	4413      	add	r3, r2
 80010de:	3304      	adds	r3, #4
 80010e0:	461a      	mov	r2, r3
 80010e2:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <SendCANFrame+0x4c>)
 80010e4:	f003 f88e 	bl	8004204 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	0800d988 	.word	0x0800d988
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000108 	.word	0x20000108

080010fc <modify_can_frame_byte>:

void modify_can_frame_byte(uint8_t frameIndex,uint8_t byte_num, uint8_t value)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
 8001106:	460b      	mov	r3, r1
 8001108:	71bb      	strb	r3, [r7, #6]
 800110a:	4613      	mov	r3, r2
 800110c:	717b      	strb	r3, [r7, #5]
	//todo add wrong index error
   if (frameIndex >= FRAME_COUNT) {
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d903      	bls.n	800111c <modify_can_frame_byte+0x20>
		printf("Over can frames index");
 8001114:	480c      	ldr	r0, [pc, #48]	@ (8001148 <modify_can_frame_byte+0x4c>)
 8001116:	f00b fd3f 	bl	800cb98 <iprintf>
		return; // todo add error
 800111a:	e011      	b.n	8001140 <modify_can_frame_byte+0x44>
   }

   if (byte_num > 8) {
 800111c:	79bb      	ldrb	r3, [r7, #6]
 800111e:	2b08      	cmp	r3, #8
 8001120:	d903      	bls.n	800112a <modify_can_frame_byte+0x2e>
	   printf("Wrong byte index");
 8001122:	480a      	ldr	r0, [pc, #40]	@ (800114c <modify_can_frame_byte+0x50>)
 8001124:	f00b fd38 	bl	800cb98 <iprintf>
       return;
 8001128:	e00a      	b.n	8001140 <modify_can_frame_byte+0x44>
   }
	frames[frameIndex].data[byte_num] = value;
 800112a:	79fa      	ldrb	r2, [r7, #7]
 800112c:	79bb      	ldrb	r3, [r7, #6]
 800112e:	4908      	ldr	r1, [pc, #32]	@ (8001150 <modify_can_frame_byte+0x54>)
 8001130:	202c      	movs	r0, #44	@ 0x2c
 8001132:	fb00 f202 	mul.w	r2, r0, r2
 8001136:	440a      	add	r2, r1
 8001138:	4413      	add	r3, r2
 800113a:	3324      	adds	r3, #36	@ 0x24
 800113c:	797a      	ldrb	r2, [r7, #5]
 800113e:	701a      	strb	r2, [r3, #0]
}
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	0800d988 	.word	0x0800d988
 800114c:	0800d9a0 	.word	0x0800d9a0
 8001150:	20000000 	.word	0x20000000

08001154 <MX_GPDMA1_Init>:

/* USER CODE END 0 */

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800115a:	4b0d      	ldr	r3, [pc, #52]	@ (8001190 <MX_GPDMA1_Init+0x3c>)
 800115c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001160:	4a0b      	ldr	r2, [pc, #44]	@ (8001190 <MX_GPDMA1_Init+0x3c>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800116a:	4b09      	ldr	r3, [pc, #36]	@ (8001190 <MX_GPDMA1_Init+0x3c>)
 800116c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 1, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2101      	movs	r1, #1
 800117c:	201b      	movs	r0, #27
 800117e:	f001 fe51 	bl	8002e24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8001182:	201b      	movs	r0, #27
 8001184:	f001 fe68 	bl	8002e58 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	44020c00 	.word	0x44020c00

08001194 <MX_GPIO_Init>:
     PH1-OSC_OUT(PH1)   ------> RCC_OSC_OUT
     PA13(JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14(JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	@ 0x28
 8001198:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011aa:	4b46      	ldr	r3, [pc, #280]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011b0:	4a44      	ldr	r2, [pc, #272]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011ba:	4b42      	ldr	r3, [pc, #264]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011c8:	4b3e      	ldr	r3, [pc, #248]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011ce:	4a3d      	ldr	r2, [pc, #244]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011d8:	4b3a      	ldr	r3, [pc, #232]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	4b37      	ldr	r3, [pc, #220]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011ec:	4a35      	ldr	r2, [pc, #212]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011f6:	4b33      	ldr	r3, [pc, #204]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001204:	4b2f      	ldr	r3, [pc, #188]	@ (80012c4 <MX_GPIO_Init+0x130>)
 8001206:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800120a:	4a2e      	ldr	r2, [pc, #184]	@ (80012c4 <MX_GPIO_Init+0x130>)
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001214:	4b2b      	ldr	r3, [pc, #172]	@ (80012c4 <MX_GPIO_Init+0x130>)
 8001216:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(K_BUS_SLP_GPIO_Port, K_BUS_SLP_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001228:	4827      	ldr	r0, [pc, #156]	@ (80012c8 <MX_GPIO_Init+0x134>)
 800122a:	f003 fbf9 	bl	8004a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BACKLIGHT_Pin|BATT_CHARGE_LIGHT_Pin|OIL_LIGHT_Pin|BRAKE_FLU_LIGHT_Pin
 800122e:	2200      	movs	r2, #0
 8001230:	f248 41f0 	movw	r1, #34032	@ 0x84f0
 8001234:	4825      	ldr	r0, [pc, #148]	@ (80012cc <MX_GPIO_Init+0x138>)
 8001236:	f003 fbf3 	bl	8004a20 <HAL_GPIO_WritePin>
                          |TRCVR_MODE_Pin|D3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ABS_Pin|PARKING_BRAKE_Pin|BRAKE_WEAR_SENS_Pin|COOLANT_LVL_SENS_Pin
 800123a:	2200      	movs	r2, #0
 800123c:	f243 413e 	movw	r1, #13374	@ 0x343e
 8001240:	4823      	ldr	r0, [pc, #140]	@ (80012d0 <MX_GPIO_Init+0x13c>)
 8001242:	f003 fbed 	bl	8004a20 <HAL_GPIO_WritePin>
                          |WASHER_FLU_LVL_Pin|D2_Pin|D1_Pin|Fuel_HVC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : STM_ESP_Pin */
  GPIO_InitStruct.Pin = STM_ESP_Pin;
 8001246:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124c:	2300      	movs	r3, #0
 800124e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(STM_ESP_GPIO_Port, &GPIO_InitStruct);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	481b      	ldr	r0, [pc, #108]	@ (80012c8 <MX_GPIO_Init+0x134>)
 800125c:	f003 fa8e 	bl	800477c <HAL_GPIO_Init>

  /*Configure GPIO pin : K_BUS_SLP_Pin */
  GPIO_InitStruct.Pin = K_BUS_SLP_Pin;
 8001260:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001264:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001266:	2301      	movs	r3, #1
 8001268:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(K_BUS_SLP_GPIO_Port, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	4813      	ldr	r0, [pc, #76]	@ (80012c8 <MX_GPIO_Init+0x134>)
 800127a:	f003 fa7f 	bl	800477c <HAL_GPIO_Init>

  /*Configure GPIO pins : BACKLIGHT_Pin BATT_CHARGE_LIGHT_Pin OIL_LIGHT_Pin BRAKE_FLU_LIGHT_Pin
                           TRCVR_MODE_Pin D3_Pin */
  GPIO_InitStruct.Pin = BACKLIGHT_Pin|BATT_CHARGE_LIGHT_Pin|OIL_LIGHT_Pin|BRAKE_FLU_LIGHT_Pin
 800127e:	f248 43f0 	movw	r3, #34032	@ 0x84f0
 8001282:	617b      	str	r3, [r7, #20]
                          |TRCVR_MODE_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001284:	2301      	movs	r3, #1
 8001286:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4619      	mov	r1, r3
 8001296:	480d      	ldr	r0, [pc, #52]	@ (80012cc <MX_GPIO_Init+0x138>)
 8001298:	f003 fa70 	bl	800477c <HAL_GPIO_Init>

  /*Configure GPIO pins : ABS_Pin PARKING_BRAKE_Pin BRAKE_WEAR_SENS_Pin COOLANT_LVL_SENS_Pin
                           WASHER_FLU_LVL_Pin D2_Pin D1_Pin Fuel_HVC_Pin */
  GPIO_InitStruct.Pin = ABS_Pin|PARKING_BRAKE_Pin|BRAKE_WEAR_SENS_Pin|COOLANT_LVL_SENS_Pin
 800129c:	f243 433e 	movw	r3, #13374	@ 0x343e
 80012a0:	617b      	str	r3, [r7, #20]
                          |WASHER_FLU_LVL_Pin|D2_Pin|D1_Pin|Fuel_HVC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a2:	2301      	movs	r3, #1
 80012a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	4619      	mov	r1, r3
 80012b4:	4806      	ldr	r0, [pc, #24]	@ (80012d0 <MX_GPIO_Init+0x13c>)
 80012b6:	f003 fa61 	bl	800477c <HAL_GPIO_Init>

}
 80012ba:	bf00      	nop
 80012bc:	3728      	adds	r7, #40	@ 0x28
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	44020c00 	.word	0x44020c00
 80012c8:	42020800 	.word	0x42020800
 80012cc:	42020000 	.word	0x42020000
 80012d0:	42020400 	.word	0x42020400

080012d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001348 <MX_I2C1_Init+0x74>)
 80012da:	4a1c      	ldr	r2, [pc, #112]	@ (800134c <MX_I2C1_Init+0x78>)
 80012dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60808CD3;
 80012de:	4b1a      	ldr	r3, [pc, #104]	@ (8001348 <MX_I2C1_Init+0x74>)
 80012e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001350 <MX_I2C1_Init+0x7c>)
 80012e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012e4:	4b18      	ldr	r3, [pc, #96]	@ (8001348 <MX_I2C1_Init+0x74>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ea:	4b17      	ldr	r3, [pc, #92]	@ (8001348 <MX_I2C1_Init+0x74>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f0:	4b15      	ldr	r3, [pc, #84]	@ (8001348 <MX_I2C1_Init+0x74>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012f6:	4b14      	ldr	r3, [pc, #80]	@ (8001348 <MX_I2C1_Init+0x74>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012fc:	4b12      	ldr	r3, [pc, #72]	@ (8001348 <MX_I2C1_Init+0x74>)
 80012fe:	2200      	movs	r2, #0
 8001300:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001302:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <MX_I2C1_Init+0x74>)
 8001304:	2200      	movs	r2, #0
 8001306:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001308:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <MX_I2C1_Init+0x74>)
 800130a:	2200      	movs	r2, #0
 800130c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800130e:	480e      	ldr	r0, [pc, #56]	@ (8001348 <MX_I2C1_Init+0x74>)
 8001310:	f003 fbb8 	bl	8004a84 <HAL_I2C_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800131a:	f000 fe29 	bl	8001f70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800131e:	2100      	movs	r1, #0
 8001320:	4809      	ldr	r0, [pc, #36]	@ (8001348 <MX_I2C1_Init+0x74>)
 8001322:	f003 ff59 	bl	80051d8 <HAL_I2CEx_ConfigAnalogFilter>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800132c:	f000 fe20 	bl	8001f70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001330:	2100      	movs	r1, #0
 8001332:	4805      	ldr	r0, [pc, #20]	@ (8001348 <MX_I2C1_Init+0x74>)
 8001334:	f003 ff9b 	bl	800526e <HAL_I2CEx_ConfigDigitalFilter>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800133e:	f000 fe17 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2000016c 	.word	0x2000016c
 800134c:	40005400 	.word	0x40005400
 8001350:	60808cd3 	.word	0x60808cd3

08001354 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b0be      	sub	sp, #248	@ 0xf8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800136c:	f107 0310 	add.w	r3, r7, #16
 8001370:	22d0      	movs	r2, #208	@ 0xd0
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f00b fd57 	bl	800ce28 <memset>
  if(i2cHandle->Instance==I2C1)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a26      	ldr	r2, [pc, #152]	@ (8001418 <HAL_I2C_MspInit+0xc4>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d145      	bne.n	8001410 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001384:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001388:	f04f 0300 	mov.w	r3, #0
 800138c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001390:	2300      	movs	r3, #0
 8001392:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001396:	f107 0310 	add.w	r3, r7, #16
 800139a:	4618      	mov	r0, r3
 800139c:	f004 ff5e 	bl	800625c <HAL_RCCEx_PeriphCLKConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80013a6:	f000 fde3 	bl	8001f70 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013aa:	4b1c      	ldr	r3, [pc, #112]	@ (800141c <HAL_I2C_MspInit+0xc8>)
 80013ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013b0:	4a1a      	ldr	r2, [pc, #104]	@ (800141c <HAL_I2C_MspInit+0xc8>)
 80013b2:	f043 0302 	orr.w	r3, r3, #2
 80013b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013ba:	4b18      	ldr	r3, [pc, #96]	@ (800141c <HAL_I2C_MspInit+0xc8>)
 80013bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013c8:	23c0      	movs	r3, #192	@ 0xc0
 80013ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ce:	2312      	movs	r3, #18
 80013d0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013e0:	2304      	movs	r3, #4
 80013e2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80013ea:	4619      	mov	r1, r3
 80013ec:	480c      	ldr	r0, [pc, #48]	@ (8001420 <HAL_I2C_MspInit+0xcc>)
 80013ee:	f003 f9c5 	bl	800477c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013f2:	4b0a      	ldr	r3, [pc, #40]	@ (800141c <HAL_I2C_MspInit+0xc8>)
 80013f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80013f8:	4a08      	ldr	r2, [pc, #32]	@ (800141c <HAL_I2C_MspInit+0xc8>)
 80013fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013fe:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001402:	4b06      	ldr	r3, [pc, #24]	@ (800141c <HAL_I2C_MspInit+0xc8>)
 8001404:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001408:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001410:	bf00      	nop
 8001412:	37f8      	adds	r7, #248	@ 0xf8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40005400 	.word	0x40005400
 800141c:	44020c00 	.word	0x44020c00
 8001420:	42020400 	.word	0x42020400

08001424 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001428:	2000      	movs	r0, #0
 800142a:	f003 ff6d 	bl	8005308 <HAL_ICACHE_ConfigAssociativityMode>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001434:	f000 fd9c 	bl	8001f70 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001438:	f003 ff86 	bl	8005348 <HAL_ICACHE_Enable>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001442:	f000 fd95 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) //function used to print() in usart
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b0a      	cmp	r3, #10
 8001458:	d102      	bne.n	8001460 <__io_putchar+0x14>
    __io_putchar('\r');
 800145a:	200d      	movs	r0, #13
 800145c:	f7ff fff6 	bl	800144c <__io_putchar>
  }

  HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001460:	1d39      	adds	r1, r7, #4
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	2201      	movs	r2, #1
 8001468:	4803      	ldr	r0, [pc, #12]	@ (8001478 <__io_putchar+0x2c>)
 800146a:	f009 ff8d 	bl	800b388 <HAL_UART_Transmit>

  return 1;
 800146e:	2301      	movs	r3, #1
}
 8001470:	4618      	mov	r0, r3
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000400 	.word	0x20000400
 800147c:	00000000 	.word	0x00000000

08001480 <CalculateWiperValue>:

uint8_t CalculateWiperValue(uint16_t resistance)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	80fb      	strh	r3, [r7, #6]
    if (resistance < R_MIN) resistance = R_MIN;
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	2b4a      	cmp	r3, #74	@ 0x4a
 800148e:	d801      	bhi.n	8001494 <CalculateWiperValue+0x14>
 8001490:	234b      	movs	r3, #75	@ 0x4b
 8001492:	80fb      	strh	r3, [r7, #6]
    if (resistance > (R_TOTAL - R_MIN)) resistance = R_TOTAL - R_MIN;
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	f241 323d 	movw	r2, #4925	@ 0x133d
 800149a:	4293      	cmp	r3, r2
 800149c:	d902      	bls.n	80014a4 <CalculateWiperValue+0x24>
 800149e:	f241 333d 	movw	r3, #4925	@ 0x133d
 80014a2:	80fb      	strh	r3, [r7, #6]

    return (uint8_t)((resistance - R_MIN) / R_STEP);
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	3b4b      	subs	r3, #75	@ 0x4b
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff f84f 	bl	800054c <__aeabi_i2d>
 80014ae:	a308      	add	r3, pc, #32	@ (adr r3, 80014d0 <CalculateWiperValue+0x50>)
 80014b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b4:	f7ff f9de 	bl	8000874 <__aeabi_ddiv>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4610      	mov	r0, r2
 80014be:	4619      	mov	r1, r3
 80014c0:	f7ff fac0 	bl	8000a44 <__aeabi_d2uiz>
 80014c4:	4603      	mov	r3, r0
 80014c6:	b2db      	uxtb	r3, r3
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	cccccccd 	.word	0xcccccccd
 80014d4:	40334ccc 	.word	0x40334ccc

080014d8 <SetResistance>:

void SetResistance(uint16_t resistance)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af02      	add	r7, sp, #8
 80014de:	4603      	mov	r3, r0
 80014e0:	80fb      	strh	r3, [r7, #6]
    uint8_t wiper_value = CalculateWiperValue(resistance);
 80014e2:	88fb      	ldrh	r3, [r7, #6]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ffcb 	bl	8001480 <CalculateWiperValue>
 80014ea:	4603      	mov	r3, r0
 80014ec:	73fb      	strb	r3, [r7, #15]
    uint8_t data[1] = {0x14}; // 0x00 - adres WIPER0
 80014ee:	2314      	movs	r3, #20
 80014f0:	733b      	strb	r3, [r7, #12]
    uint8_t data1[1] = {0x84}; // 0x00 - adres WIPER1
 80014f2:	2384      	movs	r3, #132	@ 0x84
 80014f4:	723b      	strb	r3, [r7, #8]

    if (HAL_I2C_Master_Transmit(&hi2c1, MCP4662_ADDR, data, 1, 100) == HAL_OK)
 80014f6:	f107 020c 	add.w	r2, r7, #12
 80014fa:	2364      	movs	r3, #100	@ 0x64
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	2301      	movs	r3, #1
 8001500:	215a      	movs	r1, #90	@ 0x5a
 8001502:	4815      	ldr	r0, [pc, #84]	@ (8001558 <SetResistance+0x80>)
 8001504:	f003 fb5a 	bl	8004bbc <HAL_I2C_Master_Transmit>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d106      	bne.n	800151c <SetResistance+0x44>
    {
        printf("Ustawiono rezystancję na: %dΩ (wartość rejestru: %d)\r\n", resistance, wiper_value);
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	7bfa      	ldrb	r2, [r7, #15]
 8001512:	4619      	mov	r1, r3
 8001514:	4811      	ldr	r0, [pc, #68]	@ (800155c <SetResistance+0x84>)
 8001516:	f00b fb3f 	bl	800cb98 <iprintf>
 800151a:	e002      	b.n	8001522 <SetResistance+0x4a>
    }
    else
    {
        printf("Błąd ustawiania rezystancji\r\n");
 800151c:	4810      	ldr	r0, [pc, #64]	@ (8001560 <SetResistance+0x88>)
 800151e:	f00b fba3 	bl	800cc68 <puts>
    }
    if (HAL_I2C_Master_Transmit(&hi2c1, MCP4662_ADDR, data1, 1, 100) == HAL_OK)
 8001522:	f107 0208 	add.w	r2, r7, #8
 8001526:	2364      	movs	r3, #100	@ 0x64
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	2301      	movs	r3, #1
 800152c:	215a      	movs	r1, #90	@ 0x5a
 800152e:	480a      	ldr	r0, [pc, #40]	@ (8001558 <SetResistance+0x80>)
 8001530:	f003 fb44 	bl	8004bbc <HAL_I2C_Master_Transmit>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d106      	bne.n	8001548 <SetResistance+0x70>
     {
         printf("Ustawiono rezystancję na: %dΩ (wartość rejestru: %d)\r\n", resistance, wiper_value);
 800153a:	88fb      	ldrh	r3, [r7, #6]
 800153c:	7bfa      	ldrb	r2, [r7, #15]
 800153e:	4619      	mov	r1, r3
 8001540:	4806      	ldr	r0, [pc, #24]	@ (800155c <SetResistance+0x84>)
 8001542:	f00b fb29 	bl	800cb98 <iprintf>
     }
     else
     {
         printf("Błąd ustawiania rezystancji\r\n");
     }
}
 8001546:	e002      	b.n	800154e <SetResistance+0x76>
         printf("Błąd ustawiania rezystancji\r\n");
 8001548:	4805      	ldr	r0, [pc, #20]	@ (8001560 <SetResistance+0x88>)
 800154a:	f00b fb8d 	bl	800cc68 <puts>
}
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	2000016c 	.word	0x2000016c
 800155c:	0800d9c4 	.word	0x0800d9c4
 8001560:	0800da00 	.word	0x0800da00

08001564 <ESP32_SendCommand>:
void ESP32_SendCommand(const char* command) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7fe fe93 	bl	8000298 <strlen>
 8001572:	4603      	mov	r3, r0
 8001574:	b29a      	uxth	r2, r3
 8001576:	f04f 33ff 	mov.w	r3, #4294967295
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	4808      	ldr	r0, [pc, #32]	@ (80015a0 <ESP32_SendCommand+0x3c>)
 800157e:	f009 ff03 	bl	800b388 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);  // Końcówka komendy AT
 8001582:	f04f 33ff 	mov.w	r3, #4294967295
 8001586:	2202      	movs	r2, #2
 8001588:	4906      	ldr	r1, [pc, #24]	@ (80015a4 <ESP32_SendCommand+0x40>)
 800158a:	4805      	ldr	r0, [pc, #20]	@ (80015a0 <ESP32_SendCommand+0x3c>)
 800158c:	f009 fefc 	bl	800b388 <HAL_UART_Transmit>
    HAL_Delay(100);  // Czekaj na odpowiedź
 8001590:	2064      	movs	r0, #100	@ 0x64
 8001592:	f001 fb6b 	bl	8002c6c <HAL_Delay>
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000400 	.word	0x20000400
 80015a4:	0800da20 	.word	0x0800da20

080015a8 <InitAnalogIndicators>:
            printf("Znaleziono urządzenie na adresie: 0x%X\r\n", addr);
        }
    }
}

void InitAnalogIndicators(){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0

	 HAL_GPIO_WritePin(K_BUS_SLP_GPIO_Port, K_BUS_SLP_Pin, SET); //turn off k-bus tranciver sleep mode
 80015ac:	2201      	movs	r2, #1
 80015ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015b2:	481d      	ldr	r0, [pc, #116]	@ (8001628 <InitAnalogIndicators+0x80>)
 80015b4:	f003 fa34 	bl	8004a20 <HAL_GPIO_WritePin>

	 HAL_GPIO_WritePin(WASHER_FLU_LVL_GPIO_Port, WASHER_FLU_LVL_Pin, SET); // SET to off
 80015b8:	2201      	movs	r2, #1
 80015ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015be:	481b      	ldr	r0, [pc, #108]	@ (800162c <InitAnalogIndicators+0x84>)
 80015c0:	f003 fa2e 	bl	8004a20 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(COOLANT_LVL_SENS_GPIO_Port, COOLANT_LVL_SENS_Pin, SET); //SET to off
 80015c4:	2201      	movs	r2, #1
 80015c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015ca:	4818      	ldr	r0, [pc, #96]	@ (800162c <InitAnalogIndicators+0x84>)
 80015cc:	f003 fa28 	bl	8004a20 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(BRAKE_WEAR_SENS_GPIO_Port, BRAKE_WEAR_SENS_Pin, SET);//SET to off
 80015d0:	2201      	movs	r2, #1
 80015d2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015d6:	4815      	ldr	r0, [pc, #84]	@ (800162c <InitAnalogIndicators+0x84>)
 80015d8:	f003 fa22 	bl	8004a20 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(PARKING_BRAKE_GPIO_Port, PARKING_BRAKE_Pin, RESET);//SET to off temp
 80015dc:	2200      	movs	r2, #0
 80015de:	2104      	movs	r1, #4
 80015e0:	4812      	ldr	r0, [pc, #72]	@ (800162c <InitAnalogIndicators+0x84>)
 80015e2:	f003 fa1d 	bl	8004a20 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(ABS_GPIO_Port, ABS_Pin, SET);//SET to off temp
 80015e6:	2201      	movs	r2, #1
 80015e8:	2102      	movs	r1, #2
 80015ea:	4810      	ldr	r0, [pc, #64]	@ (800162c <InitAnalogIndicators+0x84>)
 80015ec:	f003 fa18 	bl	8004a20 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(BRAKE_FLU_LIGHT_GPIO_Port, BRAKE_FLU_LIGHT_Pin, SET);//SET to off
 80015f0:	2201      	movs	r2, #1
 80015f2:	2180      	movs	r1, #128	@ 0x80
 80015f4:	480e      	ldr	r0, [pc, #56]	@ (8001630 <InitAnalogIndicators+0x88>)
 80015f6:	f003 fa13 	bl	8004a20 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(OIL_LIGHT_GPIO_Port, OIL_LIGHT_Pin, RESET);//RESET to off temp
 80015fa:	2200      	movs	r2, #0
 80015fc:	2140      	movs	r1, #64	@ 0x40
 80015fe:	480c      	ldr	r0, [pc, #48]	@ (8001630 <InitAnalogIndicators+0x88>)
 8001600:	f003 fa0e 	bl	8004a20 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(BATT_CHARGE_LIGHT_GPIO_Port, BATT_CHARGE_LIGHT_Pin, RESET);//RESET to off temp
 8001604:	2200      	movs	r2, #0
 8001606:	2120      	movs	r1, #32
 8001608:	4809      	ldr	r0, [pc, #36]	@ (8001630 <InitAnalogIndicators+0x88>)
 800160a:	f003 fa09 	bl	8004a20 <HAL_GPIO_WritePin>

	 //HAL_GPIO_WritePin(BACKLIGHT_GPIO_Port, BACKLIGHT_Pin, RESET);//RESET to off ------------NOT WORKING
	 modify_can_frame_byte(FRAME_316, 0, 0x0D);
 800160e:	220d      	movs	r2, #13
 8001610:	2100      	movs	r1, #0
 8001612:	2000      	movs	r0, #0
 8001614:	f7ff fd72 	bl	80010fc <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_316, 1, 0xff);
 8001618:	22ff      	movs	r2, #255	@ 0xff
 800161a:	2101      	movs	r1, #1
 800161c:	2000      	movs	r0, #0
 800161e:	f7ff fd6d 	bl	80010fc <modify_can_frame_byte>


}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	42020800 	.word	0x42020800
 800162c:	42020400 	.word	0x42020400
 8001630:	42020000 	.word	0x42020000

08001634 <parse_frame>:
    uint16_t fuel_scaled = (uint16_t)((fuel_consumption / max_consumption) * 0xFFFF);
    return fuel_scaled;
}


void parse_frame(uint8_t *buffer) {
 8001634:	b590      	push	{r4, r7, lr}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]


    // Parsowanie danych z FrameBuffer do struktury FrameData
    uint8_t offset = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.time, &buffer[offset], sizeof(frame.time));
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4baf      	ldr	r3, [pc, #700]	@ (8001908 <parse_frame+0x2d4>)
 800164c:	601a      	str	r2, [r3, #0]
    offset += sizeof(frame.time);
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	3304      	adds	r3, #4
 8001652:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.car, &buffer[offset], sizeof(frame.car));
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	4baa      	ldr	r3, [pc, #680]	@ (8001908 <parse_frame+0x2d4>)
 8001660:	605a      	str	r2, [r3, #4]
    offset += sizeof(frame.car);
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	3304      	adds	r3, #4
 8001666:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.flags, &buffer[offset], sizeof(frame.flags));
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	b29a      	uxth	r2, r3
 8001672:	4ba5      	ldr	r3, [pc, #660]	@ (8001908 <parse_frame+0x2d4>)
 8001674:	811a      	strh	r2, [r3, #8]
    offset += sizeof(frame.flags);
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	3302      	adds	r3, #2
 800167a:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.gear, &buffer[offset], sizeof(frame.gear));
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	781a      	ldrb	r2, [r3, #0]
 8001684:	4ba0      	ldr	r3, [pc, #640]	@ (8001908 <parse_frame+0x2d4>)
 8001686:	729a      	strb	r2, [r3, #10]
    offset += sizeof(frame.gear);
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	3301      	adds	r3, #1
 800168c:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.plid, &buffer[offset], sizeof(frame.plid));
 800168e:	7bfb      	ldrb	r3, [r7, #15]
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	4413      	add	r3, r2
 8001694:	781a      	ldrb	r2, [r3, #0]
 8001696:	4b9c      	ldr	r3, [pc, #624]	@ (8001908 <parse_frame+0x2d4>)
 8001698:	72da      	strb	r2, [r3, #11]
    offset += sizeof(frame.plid);
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	3301      	adds	r3, #1
 800169e:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.speed, &buffer[offset], sizeof(frame.speed));
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b97      	ldr	r3, [pc, #604]	@ (8001908 <parse_frame+0x2d4>)
 80016ac:	60da      	str	r2, [r3, #12]
    offset += sizeof(frame.speed);
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	3304      	adds	r3, #4
 80016b2:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.rpm, &buffer[offset], sizeof(frame.rpm));
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	4b92      	ldr	r3, [pc, #584]	@ (8001908 <parse_frame+0x2d4>)
 80016c0:	611a      	str	r2, [r3, #16]
    offset += sizeof(frame.rpm);
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
 80016c4:	3304      	adds	r3, #4
 80016c6:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.turbo, &buffer[offset], sizeof(frame.turbo));
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b8d      	ldr	r3, [pc, #564]	@ (8001908 <parse_frame+0x2d4>)
 80016d4:	615a      	str	r2, [r3, #20]
    offset += sizeof(frame.turbo);
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
 80016d8:	3304      	adds	r3, #4
 80016da:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.engTemp, &buffer[offset], sizeof(frame.engTemp));
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b88      	ldr	r3, [pc, #544]	@ (8001908 <parse_frame+0x2d4>)
 80016e8:	619a      	str	r2, [r3, #24]
    offset += sizeof(frame.engTemp);
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	3304      	adds	r3, #4
 80016ee:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.fuel, &buffer[offset], sizeof(frame.fuel));
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	461a      	mov	r2, r3
 80016fa:	4b83      	ldr	r3, [pc, #524]	@ (8001908 <parse_frame+0x2d4>)
 80016fc:	61da      	str	r2, [r3, #28]
    offset += sizeof(frame.fuel);
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	3304      	adds	r3, #4
 8001702:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.oilPressure, &buffer[offset], sizeof(frame.oilPressure));
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	4b7e      	ldr	r3, [pc, #504]	@ (8001908 <parse_frame+0x2d4>)
 8001710:	621a      	str	r2, [r3, #32]
    offset += sizeof(frame.oilPressure);
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	3304      	adds	r3, #4
 8001716:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.oilTemp, &buffer[offset], sizeof(frame.oilTemp));
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	4b79      	ldr	r3, [pc, #484]	@ (8001908 <parse_frame+0x2d4>)
 8001724:	625a      	str	r2, [r3, #36]	@ 0x24
    offset += sizeof(frame.oilTemp);
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	3304      	adds	r3, #4
 800172a:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.dashLights, &buffer[offset], sizeof(frame.dashLights));
 800172c:	7bfb      	ldrb	r3, [r7, #15]
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	4b74      	ldr	r3, [pc, #464]	@ (8001908 <parse_frame+0x2d4>)
 8001738:	629a      	str	r2, [r3, #40]	@ 0x28
    offset += sizeof(frame.dashLights);
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	3304      	adds	r3, #4
 800173e:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.showLights, &buffer[offset], sizeof(frame.showLights));
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	4413      	add	r3, r2
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4b6f      	ldr	r3, [pc, #444]	@ (8001908 <parse_frame+0x2d4>)
 800174c:	62da      	str	r2, [r3, #44]	@ 0x2c
    offset += sizeof(frame.showLights);
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	3304      	adds	r3, #4
 8001752:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.throttle, &buffer[offset], sizeof(frame.throttle));
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	4b6a      	ldr	r3, [pc, #424]	@ (8001908 <parse_frame+0x2d4>)
 8001760:	631a      	str	r2, [r3, #48]	@ 0x30
    offset += sizeof(frame.throttle);
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	3304      	adds	r3, #4
 8001766:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.brake, &buffer[offset], sizeof(frame.brake));
 8001768:	7bfb      	ldrb	r3, [r7, #15]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	4b65      	ldr	r3, [pc, #404]	@ (8001908 <parse_frame+0x2d4>)
 8001774:	635a      	str	r2, [r3, #52]	@ 0x34
    offset += sizeof(frame.brake);
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	3304      	adds	r3, #4
 800177a:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.clutch, &buffer[offset], sizeof(frame.clutch));
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	4b60      	ldr	r3, [pc, #384]	@ (8001908 <parse_frame+0x2d4>)
 8001788:	639a      	str	r2, [r3, #56]	@ 0x38
    offset += sizeof(frame.clutch);
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	3304      	adds	r3, #4
 800178e:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.display1, &buffer[offset], sizeof(frame.display1));
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	441a      	add	r2, r3
 8001796:	4b5c      	ldr	r3, [pc, #368]	@ (8001908 <parse_frame+0x2d4>)
 8001798:	f103 043c 	add.w	r4, r3, #60	@ 0x3c
 800179c:	4613      	mov	r3, r2
 800179e:	6818      	ldr	r0, [r3, #0]
 80017a0:	6859      	ldr	r1, [r3, #4]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    offset += sizeof(frame.display1);
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	3310      	adds	r3, #16
 80017ac:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.display2, &buffer[offset], sizeof(frame.display2));
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	441a      	add	r2, r3
 80017b4:	4b54      	ldr	r3, [pc, #336]	@ (8001908 <parse_frame+0x2d4>)
 80017b6:	f103 044c 	add.w	r4, r3, #76	@ 0x4c
 80017ba:	4613      	mov	r3, r2
 80017bc:	6818      	ldr	r0, [r3, #0]
 80017be:	6859      	ldr	r1, [r3, #4]
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    offset += sizeof(frame.display2);
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	3310      	adds	r3, #16
 80017ca:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.id, &buffer[offset], sizeof(frame.id));
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	461a      	mov	r2, r3
 80017d6:	4b4c      	ldr	r3, [pc, #304]	@ (8001908 <parse_frame+0x2d4>)
 80017d8:	65da      	str	r2, [r3, #92]	@ 0x5c

    uint16_t hexValue_RPM = (uint16_t)(frame.rpm / 0.15625);  // Rzutowanie na uint16_t
 80017da:	4b4b      	ldr	r3, [pc, #300]	@ (8001908 <parse_frame+0x2d4>)
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe fec6 	bl	8000570 <__aeabi_f2d>
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	4b48      	ldr	r3, [pc, #288]	@ (800190c <parse_frame+0x2d8>)
 80017ea:	f7ff f843 	bl	8000874 <__aeabi_ddiv>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	4610      	mov	r0, r2
 80017f4:	4619      	mov	r1, r3
 80017f6:	f7ff f925 	bl	8000a44 <__aeabi_d2uiz>
 80017fa:	4603      	mov	r3, r0
 80017fc:	81bb      	strh	r3, [r7, #12]
    uint8_t lsb = hexValue_RPM & 0xFF;  // Pobranie 8 najmłodszych bitów
 80017fe:	89bb      	ldrh	r3, [r7, #12]
 8001800:	72fb      	strb	r3, [r7, #11]
    uint8_t msb = (hexValue_RPM >> 8) & 0xFF;  // Pobranie 8 najbardziej znaczących bitów
 8001802:	89bb      	ldrh	r3, [r7, #12]
 8001804:	0a1b      	lsrs	r3, r3, #8
 8001806:	b29b      	uxth	r3, r3
 8001808:	72bb      	strb	r3, [r7, #10]

    uint8_t hexValue_temperature = ((frame.engTemp + 48.0) / 0.75) ;
 800180a:	4b3f      	ldr	r3, [pc, #252]	@ (8001908 <parse_frame+0x2d4>)
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	4618      	mov	r0, r3
 8001810:	f7fe feae 	bl	8000570 <__aeabi_f2d>
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	4b3d      	ldr	r3, [pc, #244]	@ (8001910 <parse_frame+0x2dc>)
 800181a:	f7fe fd4b 	bl	80002b4 <__adddf3>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4610      	mov	r0, r2
 8001824:	4619      	mov	r1, r3
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	4b3a      	ldr	r3, [pc, #232]	@ (8001914 <parse_frame+0x2e0>)
 800182c:	f7ff f822 	bl	8000874 <__aeabi_ddiv>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	f7ff f904 	bl	8000a44 <__aeabi_d2uiz>
 800183c:	4603      	mov	r3, r0
 800183e:	727b      	strb	r3, [r7, #9]

    isTurboActive = frame.flags & OG_TURBO;
 8001840:	4b31      	ldr	r3, [pc, #196]	@ (8001908 <parse_frame+0x2d4>)
 8001842:	891b      	ldrh	r3, [r3, #8]
 8001844:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001848:	2b00      	cmp	r3, #0
 800184a:	bf14      	ite	ne
 800184c:	2301      	movne	r3, #1
 800184e:	2300      	moveq	r3, #0
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4b31      	ldr	r3, [pc, #196]	@ (8001918 <parse_frame+0x2e4>)
 8001854:	701a      	strb	r2, [r3, #0]
    isMetric = frame.flags & OG_KM;
 8001856:	4b2c      	ldr	r3, [pc, #176]	@ (8001908 <parse_frame+0x2d4>)
 8001858:	891b      	ldrh	r3, [r3, #8]
 800185a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800185e:	2b00      	cmp	r3, #0
 8001860:	bf14      	ite	ne
 8001862:	2301      	movne	r3, #1
 8001864:	2300      	moveq	r3, #0
 8001866:	b2da      	uxtb	r2, r3
 8001868:	4b2c      	ldr	r3, [pc, #176]	@ (800191c <parse_frame+0x2e8>)
 800186a:	701a      	strb	r2, [r3, #0]
    prefersBar = frame.flags & OG_BAR;
 800186c:	4b26      	ldr	r3, [pc, #152]	@ (8001908 <parse_frame+0x2d4>)
 800186e:	891b      	ldrh	r3, [r3, #8]
 8001870:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001874:	2b00      	cmp	r3, #0
 8001876:	bf14      	ite	ne
 8001878:	2301      	movne	r3, #1
 800187a:	2300      	moveq	r3, #0
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4b28      	ldr	r3, [pc, #160]	@ (8001920 <parse_frame+0x2ec>)
 8001880:	701a      	strb	r2, [r3, #0]

    isShiftLightOn = frame.showLights & DL_SHIFT;
 8001882:	4b21      	ldr	r3, [pc, #132]	@ (8001908 <parse_frame+0x2d4>)
 8001884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	bf14      	ite	ne
 800188e:	2301      	movne	r3, #1
 8001890:	2300      	moveq	r3, #0
 8001892:	b2da      	uxtb	r2, r3
 8001894:	4b23      	ldr	r3, [pc, #140]	@ (8001924 <parse_frame+0x2f0>)
 8001896:	701a      	strb	r2, [r3, #0]
    isFullBeam = frame.showLights & DL_FULLBEAM;
 8001898:	4b1b      	ldr	r3, [pc, #108]	@ (8001908 <parse_frame+0x2d4>)
 800189a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	bf14      	ite	ne
 80018a4:	2301      	movne	r3, #1
 80018a6:	2300      	moveq	r3, #0
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001928 <parse_frame+0x2f4>)
 80018ac:	701a      	strb	r2, [r3, #0]
    isHandbrakeOn = frame.showLights & DL_HANDBRAKE;
 80018ae:	4b16      	ldr	r3, [pc, #88]	@ (8001908 <parse_frame+0x2d4>)
 80018b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b2:	f003 0304 	and.w	r3, r3, #4
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	bf14      	ite	ne
 80018ba:	2301      	movne	r3, #1
 80018bc:	2300      	moveq	r3, #0
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	4b1a      	ldr	r3, [pc, #104]	@ (800192c <parse_frame+0x2f8>)
 80018c2:	701a      	strb	r2, [r3, #0]
    isTractionCtrl = frame.showLights & DL_TC;
 80018c4:	4b10      	ldr	r3, [pc, #64]	@ (8001908 <parse_frame+0x2d4>)
 80018c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c8:	f003 0310 	and.w	r3, r3, #16
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	bf14      	ite	ne
 80018d0:	2301      	movne	r3, #1
 80018d2:	2300      	moveq	r3, #0
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4b16      	ldr	r3, [pc, #88]	@ (8001930 <parse_frame+0x2fc>)
 80018d8:	701a      	strb	r2, [r3, #0]
    isABSActive = frame.showLights & DL_ABS;
 80018da:	4b0b      	ldr	r3, [pc, #44]	@ (8001908 <parse_frame+0x2d4>)
 80018dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	bf14      	ite	ne
 80018e6:	2301      	movne	r3, #1
 80018e8:	2300      	moveq	r3, #0
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	4b11      	ldr	r3, [pc, #68]	@ (8001934 <parse_frame+0x300>)
 80018ee:	701a      	strb	r2, [r3, #0]
    isOilWarning = frame.showLights & DL_OILWARN;
 80018f0:	4b05      	ldr	r3, [pc, #20]	@ (8001908 <parse_frame+0x2d4>)
 80018f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	bf14      	ite	ne
 80018fc:	2301      	movne	r3, #1
 80018fe:	2300      	moveq	r3, #0
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4b0d      	ldr	r3, [pc, #52]	@ (8001938 <parse_frame+0x304>)
 8001904:	701a      	strb	r2, [r3, #0]
 8001906:	e019      	b.n	800193c <parse_frame+0x308>
 8001908:	200002a4 	.word	0x200002a4
 800190c:	3fc40000 	.word	0x3fc40000
 8001910:	40480000 	.word	0x40480000
 8001914:	3fe80000 	.word	0x3fe80000
 8001918:	20000308 	.word	0x20000308
 800191c:	20000309 	.word	0x20000309
 8001920:	2000030a 	.word	0x2000030a
 8001924:	2000030b 	.word	0x2000030b
 8001928:	2000030c 	.word	0x2000030c
 800192c:	2000030d 	.word	0x2000030d
 8001930:	2000030e 	.word	0x2000030e
 8001934:	2000030f 	.word	0x2000030f
 8001938:	20000310 	.word	0x20000310
    isBatteryWarning = frame.showLights & DL_BATTERY;
 800193c:	4b1d      	ldr	r3, [pc, #116]	@ (80019b4 <parse_frame+0x380>)
 800193e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001940:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001944:	2b00      	cmp	r3, #0
 8001946:	bf14      	ite	ne
 8001948:	2301      	movne	r3, #1
 800194a:	2300      	moveq	r3, #0
 800194c:	b2da      	uxtb	r2, r3
 800194e:	4b1a      	ldr	r3, [pc, #104]	@ (80019b8 <parse_frame+0x384>)
 8001950:	701a      	strb	r2, [r3, #0]
    isLeftSignal = frame.showLights & DL_SIGNAL_L;
 8001952:	4b18      	ldr	r3, [pc, #96]	@ (80019b4 <parse_frame+0x380>)
 8001954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001956:	f003 0320 	and.w	r3, r3, #32
 800195a:	2b00      	cmp	r3, #0
 800195c:	bf14      	ite	ne
 800195e:	2301      	movne	r3, #1
 8001960:	2300      	moveq	r3, #0
 8001962:	b2da      	uxtb	r2, r3
 8001964:	4b15      	ldr	r3, [pc, #84]	@ (80019bc <parse_frame+0x388>)
 8001966:	701a      	strb	r2, [r3, #0]
    isRightSignal = frame.showLights & DL_SIGNAL_R;
 8001968:	4b12      	ldr	r3, [pc, #72]	@ (80019b4 <parse_frame+0x380>)
 800196a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800196c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001970:	2b00      	cmp	r3, #0
 8001972:	bf14      	ite	ne
 8001974:	2301      	movne	r3, #1
 8001976:	2300      	moveq	r3, #0
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4b11      	ldr	r3, [pc, #68]	@ (80019c0 <parse_frame+0x38c>)
 800197c:	701a      	strb	r2, [r3, #0]


    modify_can_frame_byte(FRAME_316, 2, lsb);  // Modyfikacja bajtu w ramce CAN
 800197e:	7afb      	ldrb	r3, [r7, #11]
 8001980:	461a      	mov	r2, r3
 8001982:	2102      	movs	r1, #2
 8001984:	2000      	movs	r0, #0
 8001986:	f7ff fbb9 	bl	80010fc <modify_can_frame_byte>
    modify_can_frame_byte(FRAME_316, 3, msb);  // Modyfikacja bajtu w ramce CAN
 800198a:	7abb      	ldrb	r3, [r7, #10]
 800198c:	461a      	mov	r2, r3
 800198e:	2103      	movs	r1, #3
 8001990:	2000      	movs	r0, #0
 8001992:	f7ff fbb3 	bl	80010fc <modify_can_frame_byte>
    modify_can_frame_byte(FRAME_329, 1, hexValue_temperature);
 8001996:	7a7b      	ldrb	r3, [r7, #9]
 8001998:	461a      	mov	r2, r3
 800199a:	2101      	movs	r1, #1
 800199c:	2001      	movs	r0, #1
 800199e:	f7ff fbad 	bl	80010fc <modify_can_frame_byte>

    HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);  // Diagnostyka
 80019a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019a6:	4807      	ldr	r0, [pc, #28]	@ (80019c4 <parse_frame+0x390>)
 80019a8:	f003 f852 	bl	8004a50 <HAL_GPIO_TogglePin>
//    uint8_t fuel_lsb = fuel_value & 0xFF;
//    uint8_t fuel_msb = (fuel_value >> 8) & 0xFF;
//
//    modify_can_frame_byte(FRAME_545, 1, fuel_lsb);
//    modify_can_frame_byte(FRAME_545, 2, fuel_msb);
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd90      	pop	{r4, r7, pc}
 80019b4:	200002a4 	.word	0x200002a4
 80019b8:	20000311 	.word	0x20000311
 80019bc:	20000312 	.word	0x20000312
 80019c0:	20000313 	.word	0x20000313
 80019c4:	42020000 	.word	0x42020000

080019c8 <calculate_checksum>:


uint8_t calculate_checksum(uint8_t *data, uint8_t length) {
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	70fb      	strb	r3, [r7, #3]
    uint8_t checksum = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; i++) {
 80019d8:	2300      	movs	r3, #0
 80019da:	73bb      	strb	r3, [r7, #14]
 80019dc:	e009      	b.n	80019f2 <calculate_checksum+0x2a>
        checksum ^= data[i];
 80019de:	7bbb      	ldrb	r3, [r7, #14]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	4413      	add	r3, r2
 80019e4:	781a      	ldrb	r2, [r3, #0]
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	4053      	eors	r3, r2
 80019ea:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; i++) {
 80019ec:	7bbb      	ldrb	r3, [r7, #14]
 80019ee:	3301      	adds	r3, #1
 80019f0:	73bb      	strb	r3, [r7, #14]
 80019f2:	7bba      	ldrb	r2, [r7, #14]
 80019f4:	78fb      	ldrb	r3, [r7, #3]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d3f1      	bcc.n	80019de <calculate_checksum+0x16>
    }
    return checksum;
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <Send_KBUS_frame>:

void Send_KBUS_frame(uint8_t Source_ID, uint8_t Dest_ID, uint8_t command, uint8_t Byte1, uint8_t Byte2, uint8_t Byte3, uint8_t Byte4, uint8_t size )
{
 8001a08:	b590      	push	{r4, r7, lr}
 8001a0a:	b087      	sub	sp, #28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4604      	mov	r4, r0
 8001a10:	4608      	mov	r0, r1
 8001a12:	4611      	mov	r1, r2
 8001a14:	461a      	mov	r2, r3
 8001a16:	4623      	mov	r3, r4
 8001a18:	71fb      	strb	r3, [r7, #7]
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71bb      	strb	r3, [r7, #6]
 8001a1e:	460b      	mov	r3, r1
 8001a20:	717b      	strb	r3, [r7, #5]
 8001a22:	4613      	mov	r3, r2
 8001a24:	713b      	strb	r3, [r7, #4]
	uint8_t frame[10];
	//uint8_t lenght;

	frame[0] = Source_ID; //LM 0xd0 → Broadcast 0xbf
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	733b      	strb	r3, [r7, #12]
	//frame[1] = lenght;
	frame[2] = Dest_ID;
 8001a2a:	79bb      	ldrb	r3, [r7, #6]
 8001a2c:	73bb      	strb	r3, [r7, #14]
	frame[3] = command;
 8001a2e:	797b      	ldrb	r3, [r7, #5]
 8001a30:	73fb      	strb	r3, [r7, #15]
	frame[4] = Byte1;
 8001a32:	793b      	ldrb	r3, [r7, #4]
 8001a34:	743b      	strb	r3, [r7, #16]
	frame[5] = Byte2;
 8001a36:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a3a:	747b      	strb	r3, [r7, #17]
	frame[6] = Byte3;
 8001a3c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a40:	74bb      	strb	r3, [r7, #18]
	frame[7] = Byte4;
 8001a42:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001a46:	74fb      	strb	r3, [r7, #19]
	frame[8] = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	753b      	strb	r3, [r7, #20]

	//lenght = sizeof(frame) - 2;
	frame[1] = size; //lenght
 8001a4c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001a50:	737b      	strb	r3, [r7, #13]
	frame[8] = calculate_checksum(frame, size+1);
 8001a52:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001a56:	3301      	adds	r3, #1
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	f107 030c 	add.w	r3, r7, #12
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ffb1 	bl	80019c8 <calculate_checksum>
 8001a66:	4603      	mov	r3, r0
 8001a68:	753b      	strb	r3, [r7, #20]
	frame[9] = '\n';
 8001a6a:	230a      	movs	r3, #10
 8001a6c:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart2, frame, sizeof(frame), 100);
 8001a6e:	f107 010c 	add.w	r1, r7, #12
 8001a72:	2364      	movs	r3, #100	@ 0x64
 8001a74:	220a      	movs	r2, #10
 8001a76:	4803      	ldr	r0, [pc, #12]	@ (8001a84 <Send_KBUS_frame+0x7c>)
 8001a78:	f009 fc86 	bl	800b388 <HAL_UART_Transmit>
}
 8001a7c:	bf00      	nop
 8001a7e:	371c      	adds	r7, #28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd90      	pop	{r4, r7, pc}
 8001a84:	20000494 	.word	0x20000494

08001a88 <process_frame>:


void process_frame(void) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
    if (frameReady) {
 8001a8c:	4b05      	ldr	r3, [pc, #20]	@ (8001aa4 <process_frame+0x1c>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <process_frame+0x18>
        parse_frame(FrameBuffer);
 8001a94:	4804      	ldr	r0, [pc, #16]	@ (8001aa8 <process_frame+0x20>)
 8001a96:	f7ff fdcd 	bl	8001634 <parse_frame>
        frameReady = false;
 8001a9a:	4b02      	ldr	r3, [pc, #8]	@ (8001aa4 <process_frame+0x1c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]
    }
}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	200002a2 	.word	0x200002a2
 8001aa8:	20000240 	.word	0x20000240

08001aac <Set_PWM_Frequency>:

void Set_PWM_Frequency(uint16_t speed_kmh) {
 8001aac:	b480      	push	{r7}
 8001aae:	b087      	sub	sp, #28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	80fb      	strh	r3, [r7, #6]
    uint32_t freq = MIN_FREQ + ((MAX_FREQ - MIN_FREQ) * speed_kmh) / MAX_SPEED;
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	f240 62d1 	movw	r2, #1745	@ 0x6d1
 8001abc:	fb02 f303 	mul.w	r3, r2, r3
 8001ac0:	4a22      	ldr	r2, [pc, #136]	@ (8001b4c <Set_PWM_Frequency+0xa0>)
 8001ac2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ac6:	441a      	add	r2, r3
 8001ac8:	1212      	asrs	r2, r2, #8
 8001aca:	17db      	asrs	r3, r3, #31
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	3319      	adds	r3, #25
 8001ad0:	60fb      	str	r3, [r7, #12]

    uint32_t arr_value, psc_value;

    if (freq < 3800) {
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f640 62d7 	movw	r2, #3799	@ 0xed7
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d817      	bhi.n	8001b0c <Set_PWM_Frequency+0x60>
        psc_value = (250000000 / (65536 * freq));
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	041b      	lsls	r3, r3, #16
 8001ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8001b50 <Set_PWM_Frequency+0xa4>)
 8001ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae6:	613b      	str	r3, [r7, #16]
        if (psc_value > 65535) psc_value = 65535;  // PSC nie może przekroczyć 16 bitów
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aee:	d302      	bcc.n	8001af6 <Set_PWM_Frequency+0x4a>
 8001af0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001af4:	613b      	str	r3, [r7, #16]
        arr_value = (250000000 / ((psc_value + 1) * freq)) - 1;
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	3301      	adds	r3, #1
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	fb02 f303 	mul.w	r3, r2, r3
 8001b00:	4a13      	ldr	r2, [pc, #76]	@ (8001b50 <Set_PWM_Frequency+0xa4>)
 8001b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b06:	3b01      	subs	r3, #1
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	e007      	b.n	8001b1c <Set_PWM_Frequency+0x70>
    } else {
        psc_value = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	613b      	str	r3, [r7, #16]
        arr_value = (250000000 / freq) - 1;
 8001b10:	4a0f      	ldr	r2, [pc, #60]	@ (8001b50 <Set_PWM_Frequency+0xa4>)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	617b      	str	r3, [r7, #20]
    }

    if (arr_value > 65535) arr_value = 65535;  // Ograniczenie ARR do 16 bitów
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b22:	d302      	bcc.n	8001b2a <Set_PWM_Frequency+0x7e>
 8001b24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b28:	617b      	str	r3, [r7, #20]
    //printf("Speed: %d km/h, Freq: %lu Hz, PSC: %lu, ARR: %lu\n", speed_kmh, freq, psc_value, arr_value);

    __HAL_TIM_SET_PRESCALER(&htim1, psc_value);
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b54 <Set_PWM_Frequency+0xa8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_TIM_SET_AUTORELOAD(&htim1, arr_value);
 8001b32:	4b08      	ldr	r3, [pc, #32]	@ (8001b54 <Set_PWM_Frequency+0xa8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001b3a:	4a06      	ldr	r2, [pc, #24]	@ (8001b54 <Set_PWM_Frequency+0xa8>)
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	60d3      	str	r3, [r2, #12]
    //__HAL_TIM_SET_COUNTER(&htim1, 0);

}
 8001b40:	bf00      	nop
 8001b42:	371c      	adds	r7, #28
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	f2b9d649 	.word	0xf2b9d649
 8001b50:	0ee6b280 	.word	0x0ee6b280
 8001b54:	2000031c 	.word	0x2000031c

08001b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b5c:	f000 ffc8 	bl	8002af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b60:	f000 f870 	bl	8001c44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b64:	f7ff fb16 	bl	8001194 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8001b68:	f7ff faf4 	bl	8001154 <MX_GPDMA1_Init>
  MX_USART1_UART_Init();
 8001b6c:	f000 fdf4 	bl	8002758 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001b70:	f000 fbc4 	bl	80022fc <MX_TIM1_Init>
  MX_ICACHE_Init();
 8001b74:	f7ff fc56 	bl	8001424 <MX_ICACHE_Init>
  MX_FDCAN1_Init();
 8001b78:	f7ff f960 	bl	8000e3c <MX_FDCAN1_Init>
  MX_TIM2_Init();
 8001b7c:	f000 fc70 	bl	8002460 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001b80:	f000 fe36 	bl	80027f0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001b84:	f000 fce0 	bl	8002548 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001b88:	f7ff fba4 	bl	80012d4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001b8c:	2104      	movs	r1, #4
 8001b8e:	4824      	ldr	r0, [pc, #144]	@ (8001c20 <main+0xc8>)
 8001b90:	f007 ffb0 	bl	8009af4 <HAL_TIM_PWM_Start>
  ESP32_SendCommand("AT+RST");  // Resetuj ESP32
 8001b94:	4823      	ldr	r0, [pc, #140]	@ (8001c24 <main+0xcc>)
 8001b96:	f7ff fce5 	bl	8001564 <ESP32_SendCommand>
 // HAL_Delay(1000);
 // ESP32_SendCommand("AT+CWMODE=1");  // Ustaw tryb stacji (klient Wi-Fi)
 // HAL_Delay(1000);
 // ESP32_SendCommand("AT+CWJAP=\"PLAY_Swiatlowod_19A1\",\"t8Xv9auf7Z#D\"");  // Połącz z Wi-Fi
  HAL_Delay(5000);
 8001b9a:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001b9e:	f001 f865 	bl	8002c6c <HAL_Delay>
  ESP32_SendCommand("AT+CIPSTART=\"UDP\",\"0.0.0.0\",12345,12345,2");  // Ustaw tryb UDP
 8001ba2:	4821      	ldr	r0, [pc, #132]	@ (8001c28 <main+0xd0>)
 8001ba4:	f7ff fcde 	bl	8001564 <ESP32_SendCommand>
  HAL_Delay(1000);
 8001ba8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bac:	f001 f85e 	bl	8002c6c <HAL_Delay>
  HAL_UART_Receive_DMA(&huart1, UartBuffer, 1);
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	491e      	ldr	r1, [pc, #120]	@ (8001c2c <main+0xd4>)
 8001bb4:	481e      	ldr	r0, [pc, #120]	@ (8001c30 <main+0xd8>)
 8001bb6:	f009 fc85 	bl	800b4c4 <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 8001bba:	481e      	ldr	r0, [pc, #120]	@ (8001c34 <main+0xdc>)
 8001bbc:	f007 fe2a 	bl	8009814 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001bc0:	481d      	ldr	r0, [pc, #116]	@ (8001c38 <main+0xe0>)
 8001bc2:	f007 fe27 	bl	8009814 <HAL_TIM_Base_Start_IT>
  InitCANFrames();
 8001bc6:	f7ff fa1d 	bl	8001004 <InitCANFrames>
  InitAnalogIndicators();
 8001bca:	f7ff fced 	bl	80015a8 <InitAnalogIndicators>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 // process_frame();
	 speed = frame.speed * 3.6;
 8001bce:	4b1b      	ldr	r3, [pc, #108]	@ (8001c3c <main+0xe4>)
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7fe fccc 	bl	8000570 <__aeabi_f2d>
 8001bd8:	a30f      	add	r3, pc, #60	@ (adr r3, 8001c18 <main+0xc0>)
 8001bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bde:	f7fe fd1f 	bl	8000620 <__aeabi_dmul>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4610      	mov	r0, r2
 8001be8:	4619      	mov	r1, r3
 8001bea:	f7fe ff4b 	bl	8000a84 <__aeabi_d2f>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	4a13      	ldr	r2, [pc, #76]	@ (8001c40 <main+0xe8>)
 8001bf2:	6013      	str	r3, [r2, #0]
     Set_PWM_Frequency(speed);
 8001bf4:	4b12      	ldr	r3, [pc, #72]	@ (8001c40 <main+0xe8>)
 8001bf6:	edd3 7a00 	vldr	s15, [r3]
 8001bfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bfe:	ee17 3a90 	vmov	r3, s15
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff51 	bl	8001aac <Set_PWM_Frequency>
     // Send_KBUS_frame(LM,Broadcast, 0x5B,  0x07, 0x83, 0x0a, 0x3f);

     //I2C_Scan();
     SetResistance(500);
 8001c0a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c0e:	f7ff fc63 	bl	80014d8 <SetResistance>
	 speed = frame.speed * 3.6;
 8001c12:	bf00      	nop
 8001c14:	e7db      	b.n	8001bce <main+0x76>
 8001c16:	bf00      	nop
 8001c18:	cccccccd 	.word	0xcccccccd
 8001c1c:	400ccccc 	.word	0x400ccccc
 8001c20:	2000031c 	.word	0x2000031c
 8001c24:	0800da64 	.word	0x0800da64
 8001c28:	0800da6c 	.word	0x0800da6c
 8001c2c:	200001c0 	.word	0x200001c0
 8001c30:	20000400 	.word	0x20000400
 8001c34:	20000368 	.word	0x20000368
 8001c38:	200003b4 	.word	0x200003b4
 8001c3c:	200002a4 	.word	0x200002a4
 8001c40:	20000304 	.word	0x20000304

08001c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b09c      	sub	sp, #112	@ 0x70
 8001c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c4a:	f107 0320 	add.w	r3, r7, #32
 8001c4e:	2250      	movs	r2, #80	@ 0x50
 8001c50:	2100      	movs	r1, #0
 8001c52:	4618      	mov	r0, r3
 8001c54:	f00b f8e8 	bl	800ce28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c58:	f107 0308 	add.w	r3, r7, #8
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
 8001c68:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001c6a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d20 <SystemClock_Config+0xdc>)
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	4a2c      	ldr	r2, [pc, #176]	@ (8001d20 <SystemClock_Config+0xdc>)
 8001c70:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001c74:	6113      	str	r3, [r2, #16]
 8001c76:	4b2a      	ldr	r3, [pc, #168]	@ (8001d20 <SystemClock_Config+0xdc>)
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001c82:	bf00      	nop
 8001c84:	4b26      	ldr	r3, [pc, #152]	@ (8001d20 <SystemClock_Config+0xdc>)
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	d1f9      	bne.n	8001c84 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c90:	2301      	movs	r3, #1
 8001c92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c98:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 62;
 8001ca6:	233e      	movs	r3, #62	@ 0x3e
 8001ca8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001caa:	2302      	movs	r3, #2
 8001cac:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8001cb6:	230c      	movs	r3, #12
 8001cb8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8001cbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cc4:	f107 0320 	add.w	r3, r7, #32
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f003 fb4d 	bl	8005368 <HAL_RCC_OscConfig>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001cd4:	f000 f94c 	bl	8001f70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cd8:	231f      	movs	r3, #31
 8001cda:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001cf0:	f107 0308 	add.w	r3, r7, #8
 8001cf4:	2105      	movs	r1, #5
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f003 ff6e 	bl	8005bd8 <HAL_RCC_ClockConfig>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d02:	f000 f935 	bl	8001f70 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8001d06:	4b07      	ldr	r3, [pc, #28]	@ (8001d24 <SystemClock_Config+0xe0>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001d0e:	4a05      	ldr	r2, [pc, #20]	@ (8001d24 <SystemClock_Config+0xe0>)
 8001d10:	f043 0320 	orr.w	r3, r3, #32
 8001d14:	6013      	str	r3, [r2, #0]
}
 8001d16:	bf00      	nop
 8001d18:	3770      	adds	r7, #112	@ 0x70
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	44020800 	.word	0x44020800
 8001d24:	40022000 	.word	0x40022000

08001d28 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
    static uint8_t byte; // Przechowywany bajt
    HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 8001d30:	2108      	movs	r1, #8
 8001d32:	482e      	ldr	r0, [pc, #184]	@ (8001dec <HAL_UART_RxCpltCallback+0xc4>)
 8001d34:	f002 fe8c 	bl	8004a50 <HAL_GPIO_TogglePin>
    if (huart->Instance == USART1) {
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a2c      	ldr	r2, [pc, #176]	@ (8001df0 <HAL_UART_RxCpltCallback+0xc8>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d150      	bne.n	8001de4 <HAL_UART_RxCpltCallback+0xbc>
        byte = UartBuffer[0]; // Odbieramy bajt po bajcie
 8001d42:	4b2c      	ldr	r3, [pc, #176]	@ (8001df4 <HAL_UART_RxCpltCallback+0xcc>)
 8001d44:	781a      	ldrb	r2, [r3, #0]
 8001d46:	4b2c      	ldr	r3, [pc, #176]	@ (8001df8 <HAL_UART_RxCpltCallback+0xd0>)
 8001d48:	701a      	strb	r2, [r3, #0]

        // Sprawdzamy nagłówek "+IPD"
        if (headerMatch < 4) {
 8001d4a:	4b2c      	ldr	r3, [pc, #176]	@ (8001dfc <HAL_UART_RxCpltCallback+0xd4>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d813      	bhi.n	8001d7a <HAL_UART_RxCpltCallback+0x52>
            if (byte == HEADER[headerMatch]) {
 8001d52:	4b2a      	ldr	r3, [pc, #168]	@ (8001dfc <HAL_UART_RxCpltCallback+0xd4>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	4b29      	ldr	r3, [pc, #164]	@ (8001e00 <HAL_UART_RxCpltCallback+0xd8>)
 8001d5a:	5c9a      	ldrb	r2, [r3, r2]
 8001d5c:	4b26      	ldr	r3, [pc, #152]	@ (8001df8 <HAL_UART_RxCpltCallback+0xd0>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d106      	bne.n	8001d72 <HAL_UART_RxCpltCallback+0x4a>
                headerMatch++;
 8001d64:	4b25      	ldr	r3, [pc, #148]	@ (8001dfc <HAL_UART_RxCpltCallback+0xd4>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	4b23      	ldr	r3, [pc, #140]	@ (8001dfc <HAL_UART_RxCpltCallback+0xd4>)
 8001d6e:	701a      	strb	r2, [r3, #0]
 8001d70:	e033      	b.n	8001dda <HAL_UART_RxCpltCallback+0xb2>
            } else {
                headerMatch = 0; // Reset, jeśli się nie zgadza
 8001d72:	4b22      	ldr	r3, [pc, #136]	@ (8001dfc <HAL_UART_RxCpltCallback+0xd4>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
 8001d78:	e02f      	b.n	8001dda <HAL_UART_RxCpltCallback+0xb2>
            }
        } else if (headerMatch == 4) {
 8001d7a:	4b20      	ldr	r3, [pc, #128]	@ (8001dfc <HAL_UART_RxCpltCallback+0xd4>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d10d      	bne.n	8001d9e <HAL_UART_RxCpltCallback+0x76>
            // Oczekujemy na długość ramki, pomijamy "xx:"
            if (byte == ':') {
 8001d82:	4b1d      	ldr	r3, [pc, #116]	@ (8001df8 <HAL_UART_RxCpltCallback+0xd0>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b3a      	cmp	r3, #58	@ 0x3a
 8001d88:	d127      	bne.n	8001dda <HAL_UART_RxCpltCallback+0xb2>
                headerMatch++; // Przechodzimy do odbioru danych
 8001d8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dfc <HAL_UART_RxCpltCallback+0xd4>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4b1a      	ldr	r3, [pc, #104]	@ (8001dfc <HAL_UART_RxCpltCallback+0xd4>)
 8001d94:	701a      	strb	r2, [r3, #0]
                frameIndex = 0;
 8001d96:	4b1b      	ldr	r3, [pc, #108]	@ (8001e04 <HAL_UART_RxCpltCallback+0xdc>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	701a      	strb	r2, [r3, #0]
 8001d9c:	e01d      	b.n	8001dda <HAL_UART_RxCpltCallback+0xb2>
            }
        } else {
            // Odbiór danych ramki
            if (frameIndex < 96 ) {
 8001d9e:	4b19      	ldr	r3, [pc, #100]	@ (8001e04 <HAL_UART_RxCpltCallback+0xdc>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b5f      	cmp	r3, #95	@ 0x5f
 8001da4:	d80a      	bhi.n	8001dbc <HAL_UART_RxCpltCallback+0x94>
                FrameBuffer[frameIndex++] = byte;
 8001da6:	4b17      	ldr	r3, [pc, #92]	@ (8001e04 <HAL_UART_RxCpltCallback+0xdc>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	1c5a      	adds	r2, r3, #1
 8001dac:	b2d1      	uxtb	r1, r2
 8001dae:	4a15      	ldr	r2, [pc, #84]	@ (8001e04 <HAL_UART_RxCpltCallback+0xdc>)
 8001db0:	7011      	strb	r1, [r2, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	4b10      	ldr	r3, [pc, #64]	@ (8001df8 <HAL_UART_RxCpltCallback+0xd0>)
 8001db6:	7819      	ldrb	r1, [r3, #0]
 8001db8:	4b13      	ldr	r3, [pc, #76]	@ (8001e08 <HAL_UART_RxCpltCallback+0xe0>)
 8001dba:	5499      	strb	r1, [r3, r2]
            }

            if (frameIndex >= 96 ) {
 8001dbc:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <HAL_UART_RxCpltCallback+0xdc>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b5f      	cmp	r3, #95	@ 0x5f
 8001dc2:	d90a      	bls.n	8001dda <HAL_UART_RxCpltCallback+0xb2>
                frameReady = true;  // Pełna ramka odebrana
 8001dc4:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <HAL_UART_RxCpltCallback+0xe4>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	701a      	strb	r2, [r3, #0]
                process_frame();
 8001dca:	f7ff fe5d 	bl	8001a88 <process_frame>
                headerMatch = 0;    // Reset detekcji nagłówka
 8001dce:	4b0b      	ldr	r3, [pc, #44]	@ (8001dfc <HAL_UART_RxCpltCallback+0xd4>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]
                frameIndex = 0;     // Reset indeksu bufora ramki
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <HAL_UART_RxCpltCallback+0xdc>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	701a      	strb	r2, [r3, #0]
            }}
        HAL_UART_Receive_DMA(&huart1, UartBuffer, 1);
 8001dda:	2201      	movs	r2, #1
 8001ddc:	4905      	ldr	r1, [pc, #20]	@ (8001df4 <HAL_UART_RxCpltCallback+0xcc>)
 8001dde:	480c      	ldr	r0, [pc, #48]	@ (8001e10 <HAL_UART_RxCpltCallback+0xe8>)
 8001de0:	f009 fb70 	bl	800b4c4 <HAL_UART_Receive_DMA>
    }
}
 8001de4:	bf00      	nop
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	42020400 	.word	0x42020400
 8001df0:	40013800 	.word	0x40013800
 8001df4:	200001c0 	.word	0x200001c0
 8001df8:	20000314 	.word	0x20000314
 8001dfc:	200002a0 	.word	0x200002a0
 8001e00:	0800da98 	.word	0x0800da98
 8001e04:	200002a1 	.word	0x200002a1
 8001e08:	20000240 	.word	0x20000240
 8001e0c:	200002a2 	.word	0x200002a2
 8001e10:	20000400 	.word	0x20000400

08001e14 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af04      	add	r7, sp, #16
 8001e1a:	6078      	str	r0, [r7, #4]
	 if (htim == &htim2)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a49      	ldr	r2, [pc, #292]	@ (8001f44 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d108      	bne.n	8001e36 <HAL_TIM_PeriodElapsedCallback+0x22>
	 {
	     SendCANFrame(FRAME_316);  // Wysyła ramkę o ID 0x316
 8001e24:	2000      	movs	r0, #0
 8001e26:	f7ff f941 	bl	80010ac <SendCANFrame>
	     SendCANFrame(FRAME_329);  // Wysyła ramkę o ID 0x329
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	f7ff f93e 	bl	80010ac <SendCANFrame>
	     SendCANFrame(FRAME_545);  // Wysyła ramkę o ID 0x545
 8001e30:	2002      	movs	r0, #2
 8001e32:	f7ff f93b 	bl	80010ac <SendCANFrame>

	 }
	 if (htim == &htim3)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a43      	ldr	r2, [pc, #268]	@ (8001f48 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d17d      	bne.n	8001f3a <HAL_TIM_PeriodElapsedCallback+0x126>
	 {
		bool anyConditionMet = false;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	73fb      	strb	r3, [r7, #15]
		uint8_t command = 0x00;  // Domyślnie brak sygnału
 8001e42:	2300      	movs	r3, #0
 8001e44:	73bb      	strb	r3, [r7, #14]
		if (isFullBeam) {
 8001e46:	4b41      	ldr	r3, [pc, #260]	@ (8001f4c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_TIM_PeriodElapsedCallback+0x42>
			command = BEAM_LOW | PARKING | BEAM_HIGH;
 8001e4e:	2307      	movs	r3, #7
 8001e50:	73bb      	strb	r3, [r7, #14]
			anyConditionMet = true;
 8001e52:	2301      	movs	r3, #1
 8001e54:	73fb      	strb	r3, [r7, #15]
		}
		if (isLeftSignal) {
 8001e56:	4b3e      	ldr	r3, [pc, #248]	@ (8001f50 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d005      	beq.n	8001e6a <HAL_TIM_PeriodElapsedCallback+0x56>
			command = command | TURN_LEFT;
 8001e5e:	7bbb      	ldrb	r3, [r7, #14]
 8001e60:	f043 0320 	orr.w	r3, r3, #32
 8001e64:	73bb      	strb	r3, [r7, #14]
			anyConditionMet = true;
 8001e66:	2301      	movs	r3, #1
 8001e68:	73fb      	strb	r3, [r7, #15]
		}
		if (isRightSignal) {
 8001e6a:	4b3a      	ldr	r3, [pc, #232]	@ (8001f54 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d005      	beq.n	8001e7e <HAL_TIM_PeriodElapsedCallback+0x6a>
			command = command | TURN_RIGHT;
 8001e72:	7bbb      	ldrb	r3, [r7, #14]
 8001e74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e78:	73bb      	strb	r3, [r7, #14]
			anyConditionMet = true;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	73fb      	strb	r3, [r7, #15]
		}
		if (!anyConditionMet) {
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
 8001e80:	f083 0301 	eor.w	r3, r3, #1
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00d      	beq.n	8001ea6 <HAL_TIM_PeriodElapsedCallback+0x92>
			Send_KBUS_frame(LM, Broadcast, 0x5B, 0x00, 0x00, 0x00, 0x00, 0x07);//, 0x83, 0x0a, 0x3f
 8001e8a:	2307      	movs	r3, #7
 8001e8c:	9303      	str	r3, [sp, #12]
 8001e8e:	2300      	movs	r3, #0
 8001e90:	9302      	str	r3, [sp, #8]
 8001e92:	2300      	movs	r3, #0
 8001e94:	9301      	str	r3, [sp, #4]
 8001e96:	2300      	movs	r3, #0
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	225b      	movs	r2, #91	@ 0x5b
 8001e9e:	21bf      	movs	r1, #191	@ 0xbf
 8001ea0:	20d0      	movs	r0, #208	@ 0xd0
 8001ea2:	f7ff fdb1 	bl	8001a08 <Send_KBUS_frame>
		}
		Send_KBUS_frame(LM, Broadcast, 0x5B, command, 0x00, 0x00, 0x00, 0x07);
 8001ea6:	7bbb      	ldrb	r3, [r7, #14]
 8001ea8:	2207      	movs	r2, #7
 8001eaa:	9203      	str	r2, [sp, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	9202      	str	r2, [sp, #8]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	9201      	str	r2, [sp, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	9200      	str	r2, [sp, #0]
 8001eb8:	225b      	movs	r2, #91	@ 0x5b
 8001eba:	21bf      	movs	r1, #191	@ 0xbf
 8001ebc:	20d0      	movs	r0, #208	@ 0xd0
 8001ebe:	f7ff fda3 	bl	8001a08 <Send_KBUS_frame>

		if (isHandbrakeOn) {
 8001ec2:	4b25      	ldr	r3, [pc, #148]	@ (8001f58 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d005      	beq.n	8001ed6 <HAL_TIM_PeriodElapsedCallback+0xc2>
			HAL_GPIO_WritePin(PARKING_BRAKE_GPIO_Port, PARKING_BRAKE_Pin, SET);//SET to off temp
 8001eca:	2201      	movs	r2, #1
 8001ecc:	2104      	movs	r1, #4
 8001ece:	4823      	ldr	r0, [pc, #140]	@ (8001f5c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001ed0:	f002 fda6 	bl	8004a20 <HAL_GPIO_WritePin>
 8001ed4:	e004      	b.n	8001ee0 <HAL_TIM_PeriodElapsedCallback+0xcc>
		}else
			HAL_GPIO_WritePin(PARKING_BRAKE_GPIO_Port, PARKING_BRAKE_Pin, RESET);//SET to off temp
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2104      	movs	r1, #4
 8001eda:	4820      	ldr	r0, [pc, #128]	@ (8001f5c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001edc:	f002 fda0 	bl	8004a20 <HAL_GPIO_WritePin>
		if (isOilWarning) {
 8001ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f60 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <HAL_TIM_PeriodElapsedCallback+0xe0>
			HAL_GPIO_WritePin(OIL_LIGHT_GPIO_Port, OIL_LIGHT_Pin, SET); //SET on
 8001ee8:	2201      	movs	r2, #1
 8001eea:	2140      	movs	r1, #64	@ 0x40
 8001eec:	481d      	ldr	r0, [pc, #116]	@ (8001f64 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001eee:	f002 fd97 	bl	8004a20 <HAL_GPIO_WritePin>
 8001ef2:	e004      	b.n	8001efe <HAL_TIM_PeriodElapsedCallback+0xea>
		}else
			HAL_GPIO_WritePin(OIL_LIGHT_GPIO_Port, OIL_LIGHT_Pin, RESET); //SET to off temp
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2140      	movs	r1, #64	@ 0x40
 8001ef8:	481a      	ldr	r0, [pc, #104]	@ (8001f64 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001efa:	f002 fd91 	bl	8004a20 <HAL_GPIO_WritePin>
		if (isBatteryWarning) {
 8001efe:	4b1a      	ldr	r3, [pc, #104]	@ (8001f68 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d005      	beq.n	8001f12 <HAL_TIM_PeriodElapsedCallback+0xfe>
			HAL_GPIO_WritePin(BATT_CHARGE_LIGHT_GPIO_Port, BATT_CHARGE_LIGHT_Pin, SET);
 8001f06:	2201      	movs	r2, #1
 8001f08:	2120      	movs	r1, #32
 8001f0a:	4816      	ldr	r0, [pc, #88]	@ (8001f64 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001f0c:	f002 fd88 	bl	8004a20 <HAL_GPIO_WritePin>
 8001f10:	e004      	b.n	8001f1c <HAL_TIM_PeriodElapsedCallback+0x108>
		}else
			HAL_GPIO_WritePin(BATT_CHARGE_LIGHT_GPIO_Port, BATT_CHARGE_LIGHT_Pin, RESET);
 8001f12:	2200      	movs	r2, #0
 8001f14:	2120      	movs	r1, #32
 8001f16:	4813      	ldr	r0, [pc, #76]	@ (8001f64 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001f18:	f002 fd82 	bl	8004a20 <HAL_GPIO_WritePin>
		if (isABSActive) {
 8001f1c:	4b13      	ldr	r3, [pc, #76]	@ (8001f6c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <HAL_TIM_PeriodElapsedCallback+0x11c>
			HAL_GPIO_WritePin(ABS_GPIO_Port, ABS_Pin, RESET);
 8001f24:	2200      	movs	r2, #0
 8001f26:	2102      	movs	r1, #2
 8001f28:	480c      	ldr	r0, [pc, #48]	@ (8001f5c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001f2a:	f002 fd79 	bl	8004a20 <HAL_GPIO_WritePin>
		}else
			HAL_GPIO_WritePin(ABS_GPIO_Port, ABS_Pin, SET);
	 }
}
 8001f2e:	e004      	b.n	8001f3a <HAL_TIM_PeriodElapsedCallback+0x126>
			HAL_GPIO_WritePin(ABS_GPIO_Port, ABS_Pin, SET);
 8001f30:	2201      	movs	r2, #1
 8001f32:	2102      	movs	r1, #2
 8001f34:	4809      	ldr	r0, [pc, #36]	@ (8001f5c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001f36:	f002 fd73 	bl	8004a20 <HAL_GPIO_WritePin>
}
 8001f3a:	bf00      	nop
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000368 	.word	0x20000368
 8001f48:	200003b4 	.word	0x200003b4
 8001f4c:	2000030c 	.word	0x2000030c
 8001f50:	20000312 	.word	0x20000312
 8001f54:	20000313 	.word	0x20000313
 8001f58:	2000030d 	.word	0x2000030d
 8001f5c:	42020400 	.word	0x42020400
 8001f60:	20000310 	.word	0x20000310
 8001f64:	42020000 	.word	0x42020000
 8001f68:	20000311 	.word	0x20000311
 8001f6c:	2000030f 	.word	0x2000030f

08001f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f74:	b672      	cpsid	i
}
 8001f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);  // Diagnostyka
 8001f78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f7c:	4801      	ldr	r0, [pc, #4]	@ (8001f84 <Error_Handler+0x14>)
 8001f7e:	f002 fd67 	bl	8004a50 <HAL_GPIO_TogglePin>
 8001f82:	e7f9      	b.n	8001f78 <Error_Handler+0x8>
 8001f84:	42020000 	.word	0x42020000

08001f88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f9a:	bf00      	nop
 8001f9c:	e7fd      	b.n	8001f9a <NMI_Handler+0x4>

08001f9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fa2:	bf00      	nop
 8001fa4:	e7fd      	b.n	8001fa2 <HardFault_Handler+0x4>

08001fa6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001faa:	bf00      	nop
 8001fac:	e7fd      	b.n	8001faa <MemManage_Handler+0x4>

08001fae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fb2:	bf00      	nop
 8001fb4:	e7fd      	b.n	8001fb2 <BusFault_Handler+0x4>

08001fb6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fba:	bf00      	nop
 8001fbc:	e7fd      	b.n	8001fba <UsageFault_Handler+0x4>

08001fbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fec:	f000 fe1e 	bl	8002c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ff0:	bf00      	nop
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8001ff8:	4802      	ldr	r0, [pc, #8]	@ (8002004 <GPDMA1_Channel0_IRQHandler+0x10>)
 8001ffa:	f001 fa1c 	bl	8003436 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000528 	.word	0x20000528

08002008 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800200c:	4802      	ldr	r0, [pc, #8]	@ (8002018 <FDCAN1_IT0_IRQHandler+0x10>)
 800200e:	f002 f93d 	bl	800428c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000108 	.word	0x20000108

0800201c <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002020:	4802      	ldr	r0, [pc, #8]	@ (800202c <FDCAN1_IT1_IRQHandler+0x10>)
 8002022:	f002 f933 	bl	800428c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000108 	.word	0x20000108

08002030 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 Break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002034:	4802      	ldr	r0, [pc, #8]	@ (8002040 <TIM1_BRK_IRQHandler+0x10>)
 8002036:	f007 fea1 	bl	8009d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	2000031c 	.word	0x2000031c

08002044 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002048:	4802      	ldr	r0, [pc, #8]	@ (8002054 <TIM1_UP_IRQHandler+0x10>)
 800204a:	f007 fe97 	bl	8009d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	2000031c 	.word	0x2000031c

08002058 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 Trigger and Commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800205c:	4802      	ldr	r0, [pc, #8]	@ (8002068 <TIM1_TRG_COM_IRQHandler+0x10>)
 800205e:	f007 fe8d 	bl	8009d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	2000031c 	.word	0x2000031c

0800206c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 Capture Compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002070:	4802      	ldr	r0, [pc, #8]	@ (800207c <TIM1_CC_IRQHandler+0x10>)
 8002072:	f007 fe83 	bl	8009d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	2000031c 	.word	0x2000031c

08002080 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002084:	4802      	ldr	r0, [pc, #8]	@ (8002090 <TIM2_IRQHandler+0x10>)
 8002086:	f007 fe79 	bl	8009d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000368 	.word	0x20000368

08002094 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002098:	4802      	ldr	r0, [pc, #8]	@ (80020a4 <TIM3_IRQHandler+0x10>)
 800209a:	f007 fe6f 	bl	8009d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	200003b4 	.word	0x200003b4

080020a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020ac:	4802      	ldr	r0, [pc, #8]	@ (80020b8 <USART1_IRQHandler+0x10>)
 80020ae:	f009 fa5b 	bl	800b568 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000400 	.word	0x20000400

080020bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	e00a      	b.n	80020e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020ce:	f3af 8000 	nop.w
 80020d2:	4601      	mov	r1, r0
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	60ba      	str	r2, [r7, #8]
 80020da:	b2ca      	uxtb	r2, r1
 80020dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	3301      	adds	r3, #1
 80020e2:	617b      	str	r3, [r7, #20]
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	dbf0      	blt.n	80020ce <_read+0x12>
  }

  return len;
 80020ec:	687b      	ldr	r3, [r7, #4]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b086      	sub	sp, #24
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	60f8      	str	r0, [r7, #12]
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	e009      	b.n	800211c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	60ba      	str	r2, [r7, #8]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff f99b 	bl	800144c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	3301      	adds	r3, #1
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	429a      	cmp	r2, r3
 8002122:	dbf1      	blt.n	8002108 <_write+0x12>
  }
  return len;
 8002124:	687b      	ldr	r3, [r7, #4]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <_close>:

int _close(int file)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002136:	f04f 33ff 	mov.w	r3, #4294967295
}
 800213a:	4618      	mov	r0, r3
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002156:	605a      	str	r2, [r3, #4]
  return 0;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <_isatty>:

int _isatty(int file)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800216e:	2301      	movs	r3, #1
}
 8002170:	4618      	mov	r0, r3
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
	...

08002198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021a0:	4a14      	ldr	r2, [pc, #80]	@ (80021f4 <_sbrk+0x5c>)
 80021a2:	4b15      	ldr	r3, [pc, #84]	@ (80021f8 <_sbrk+0x60>)
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021ac:	4b13      	ldr	r3, [pc, #76]	@ (80021fc <_sbrk+0x64>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d102      	bne.n	80021ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021b4:	4b11      	ldr	r3, [pc, #68]	@ (80021fc <_sbrk+0x64>)
 80021b6:	4a12      	ldr	r2, [pc, #72]	@ (8002200 <_sbrk+0x68>)
 80021b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ba:	4b10      	ldr	r3, [pc, #64]	@ (80021fc <_sbrk+0x64>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d207      	bcs.n	80021d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021c8:	f00a fe7c 	bl	800cec4 <__errno>
 80021cc:	4603      	mov	r3, r0
 80021ce:	220c      	movs	r2, #12
 80021d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021d2:	f04f 33ff 	mov.w	r3, #4294967295
 80021d6:	e009      	b.n	80021ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021d8:	4b08      	ldr	r3, [pc, #32]	@ (80021fc <_sbrk+0x64>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021de:	4b07      	ldr	r3, [pc, #28]	@ (80021fc <_sbrk+0x64>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4413      	add	r3, r2
 80021e6:	4a05      	ldr	r2, [pc, #20]	@ (80021fc <_sbrk+0x64>)
 80021e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ea:	68fb      	ldr	r3, [r7, #12]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20044000 	.word	0x20044000
 80021f8:	00000400 	.word	0x00000400
 80021fc:	20000318 	.word	0x20000318
 8002200:	200006f0 	.word	0x200006f0

08002204 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800220a:	4b35      	ldr	r3, [pc, #212]	@ (80022e0 <SystemInit+0xdc>)
 800220c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002210:	4a33      	ldr	r2, [pc, #204]	@ (80022e0 <SystemInit+0xdc>)
 8002212:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002216:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800221a:	4b32      	ldr	r3, [pc, #200]	@ (80022e4 <SystemInit+0xe0>)
 800221c:	2201      	movs	r2, #1
 800221e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002220:	4b30      	ldr	r3, [pc, #192]	@ (80022e4 <SystemInit+0xe0>)
 8002222:	2200      	movs	r2, #0
 8002224:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002226:	4b2f      	ldr	r3, [pc, #188]	@ (80022e4 <SystemInit+0xe0>)
 8002228:	2200      	movs	r2, #0
 800222a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800222c:	4b2d      	ldr	r3, [pc, #180]	@ (80022e4 <SystemInit+0xe0>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	492c      	ldr	r1, [pc, #176]	@ (80022e4 <SystemInit+0xe0>)
 8002232:	4b2d      	ldr	r3, [pc, #180]	@ (80022e8 <SystemInit+0xe4>)
 8002234:	4013      	ands	r3, r2
 8002236:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8002238:	4b2a      	ldr	r3, [pc, #168]	@ (80022e4 <SystemInit+0xe0>)
 800223a:	2200      	movs	r2, #0
 800223c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800223e:	4b29      	ldr	r3, [pc, #164]	@ (80022e4 <SystemInit+0xe0>)
 8002240:	2200      	movs	r2, #0
 8002242:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8002244:	4b27      	ldr	r3, [pc, #156]	@ (80022e4 <SystemInit+0xe0>)
 8002246:	2200      	movs	r2, #0
 8002248:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800224a:	4b26      	ldr	r3, [pc, #152]	@ (80022e4 <SystemInit+0xe0>)
 800224c:	4a27      	ldr	r2, [pc, #156]	@ (80022ec <SystemInit+0xe8>)
 800224e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8002250:	4b24      	ldr	r3, [pc, #144]	@ (80022e4 <SystemInit+0xe0>)
 8002252:	2200      	movs	r2, #0
 8002254:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8002256:	4b23      	ldr	r3, [pc, #140]	@ (80022e4 <SystemInit+0xe0>)
 8002258:	4a24      	ldr	r2, [pc, #144]	@ (80022ec <SystemInit+0xe8>)
 800225a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800225c:	4b21      	ldr	r3, [pc, #132]	@ (80022e4 <SystemInit+0xe0>)
 800225e:	2200      	movs	r2, #0
 8002260:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8002262:	4b20      	ldr	r3, [pc, #128]	@ (80022e4 <SystemInit+0xe0>)
 8002264:	4a21      	ldr	r2, [pc, #132]	@ (80022ec <SystemInit+0xe8>)
 8002266:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8002268:	4b1e      	ldr	r3, [pc, #120]	@ (80022e4 <SystemInit+0xe0>)
 800226a:	2200      	movs	r2, #0
 800226c:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800226e:	4b1d      	ldr	r3, [pc, #116]	@ (80022e4 <SystemInit+0xe0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a1c      	ldr	r2, [pc, #112]	@ (80022e4 <SystemInit+0xe0>)
 8002274:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002278:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800227a:	4b1a      	ldr	r3, [pc, #104]	@ (80022e4 <SystemInit+0xe0>)
 800227c:	2200      	movs	r2, #0
 800227e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002280:	4b17      	ldr	r3, [pc, #92]	@ (80022e0 <SystemInit+0xdc>)
 8002282:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002286:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8002288:	4b19      	ldr	r3, [pc, #100]	@ (80022f0 <SystemInit+0xec>)
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8002290:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8002298:	d003      	beq.n	80022a2 <SystemInit+0x9e>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80022a0:	d117      	bne.n	80022d2 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80022a2:	4b13      	ldr	r3, [pc, #76]	@ (80022f0 <SystemInit+0xec>)
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d005      	beq.n	80022ba <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80022ae:	4b10      	ldr	r3, [pc, #64]	@ (80022f0 <SystemInit+0xec>)
 80022b0:	4a10      	ldr	r2, [pc, #64]	@ (80022f4 <SystemInit+0xf0>)
 80022b2:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80022b4:	4b0e      	ldr	r3, [pc, #56]	@ (80022f0 <SystemInit+0xec>)
 80022b6:	4a10      	ldr	r2, [pc, #64]	@ (80022f8 <SystemInit+0xf4>)
 80022b8:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80022ba:	4b0d      	ldr	r3, [pc, #52]	@ (80022f0 <SystemInit+0xec>)
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	4a0c      	ldr	r2, [pc, #48]	@ (80022f0 <SystemInit+0xec>)
 80022c0:	f043 0302 	orr.w	r3, r3, #2
 80022c4:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80022c6:	4b0a      	ldr	r3, [pc, #40]	@ (80022f0 <SystemInit+0xec>)
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	4a09      	ldr	r2, [pc, #36]	@ (80022f0 <SystemInit+0xec>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	61d3      	str	r3, [r2, #28]
  }
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	e000ed00 	.word	0xe000ed00
 80022e4:	44020c00 	.word	0x44020c00
 80022e8:	eae2eae3 	.word	0xeae2eae3
 80022ec:	01010280 	.word	0x01010280
 80022f0:	40022000 	.word	0x40022000
 80022f4:	08192a3b 	.word	0x08192a3b
 80022f8:	4c5d6e7f 	.word	0x4c5d6e7f

080022fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b09c      	sub	sp, #112	@ 0x70
 8002300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002302:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	605a      	str	r2, [r3, #4]
 800230c:	609a      	str	r2, [r3, #8]
 800230e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002310:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800231c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	611a      	str	r2, [r3, #16]
 800232c:	615a      	str	r2, [r3, #20]
 800232e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002330:	1d3b      	adds	r3, r7, #4
 8002332:	2234      	movs	r2, #52	@ 0x34
 8002334:	2100      	movs	r1, #0
 8002336:	4618      	mov	r0, r3
 8002338:	f00a fd76 	bl	800ce28 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800233c:	4b46      	ldr	r3, [pc, #280]	@ (8002458 <MX_TIM1_Init+0x15c>)
 800233e:	4a47      	ldr	r2, [pc, #284]	@ (800245c <MX_TIM1_Init+0x160>)
 8002340:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 49;
 8002342:	4b45      	ldr	r3, [pc, #276]	@ (8002458 <MX_TIM1_Init+0x15c>)
 8002344:	2231      	movs	r2, #49	@ 0x31
 8002346:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002348:	4b43      	ldr	r3, [pc, #268]	@ (8002458 <MX_TIM1_Init+0x15c>)
 800234a:	2200      	movs	r2, #0
 800234c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800234e:	4b42      	ldr	r3, [pc, #264]	@ (8002458 <MX_TIM1_Init+0x15c>)
 8002350:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002354:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002356:	4b40      	ldr	r3, [pc, #256]	@ (8002458 <MX_TIM1_Init+0x15c>)
 8002358:	2200      	movs	r2, #0
 800235a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800235c:	4b3e      	ldr	r3, [pc, #248]	@ (8002458 <MX_TIM1_Init+0x15c>)
 800235e:	2200      	movs	r2, #0
 8002360:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002362:	4b3d      	ldr	r3, [pc, #244]	@ (8002458 <MX_TIM1_Init+0x15c>)
 8002364:	2280      	movs	r2, #128	@ 0x80
 8002366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002368:	483b      	ldr	r0, [pc, #236]	@ (8002458 <MX_TIM1_Init+0x15c>)
 800236a:	f007 f9fb 	bl	8009764 <HAL_TIM_Base_Init>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002374:	f7ff fdfc 	bl	8001f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002378:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800237c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800237e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002382:	4619      	mov	r1, r3
 8002384:	4834      	ldr	r0, [pc, #208]	@ (8002458 <MX_TIM1_Init+0x15c>)
 8002386:	f007 ffd7 	bl	800a338 <HAL_TIM_ConfigClockSource>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002390:	f7ff fdee 	bl	8001f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002394:	4830      	ldr	r0, [pc, #192]	@ (8002458 <MX_TIM1_Init+0x15c>)
 8002396:	f007 fb4c 	bl	8009a32 <HAL_TIM_PWM_Init>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80023a0:	f7ff fde6 	bl	8001f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023a4:	2300      	movs	r3, #0
 80023a6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80023a8:	2300      	movs	r3, #0
 80023aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ac:	2300      	movs	r3, #0
 80023ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80023b4:	4619      	mov	r1, r3
 80023b6:	4828      	ldr	r0, [pc, #160]	@ (8002458 <MX_TIM1_Init+0x15c>)
 80023b8:	f008 fde6 	bl	800af88 <HAL_TIMEx_MasterConfigSynchronization>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80023c2:	f7ff fdd5 	bl	8001f70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023c6:	2360      	movs	r3, #96	@ 0x60
 80023c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 5000;
 80023ca:	f241 3388 	movw	r3, #5000	@ 0x1388
 80023ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023d0:	2300      	movs	r3, #0
 80023d2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023d4:	2300      	movs	r3, #0
 80023d6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023d8:	2300      	movs	r3, #0
 80023da:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023dc:	2300      	movs	r3, #0
 80023de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023e0:	2300      	movs	r3, #0
 80023e2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023e4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80023e8:	2204      	movs	r2, #4
 80023ea:	4619      	mov	r1, r3
 80023ec:	481a      	ldr	r0, [pc, #104]	@ (8002458 <MX_TIM1_Init+0x15c>)
 80023ee:	f007 fe8f 	bl	800a110 <HAL_TIM_PWM_ConfigChannel>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80023f8:	f7ff fdba 	bl	8001f70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023fc:	2300      	movs	r3, #0
 80023fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002400:	2300      	movs	r3, #0
 8002402:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002404:	2300      	movs	r3, #0
 8002406:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002408:	2300      	movs	r3, #0
 800240a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002410:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002414:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800241a:	2300      	movs	r3, #0
 800241c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800241e:	2300      	movs	r3, #0
 8002420:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002422:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002426:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002428:	2300      	movs	r3, #0
 800242a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800242c:	2300      	movs	r3, #0
 800242e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002430:	2300      	movs	r3, #0
 8002432:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002434:	1d3b      	adds	r3, r7, #4
 8002436:	4619      	mov	r1, r3
 8002438:	4807      	ldr	r0, [pc, #28]	@ (8002458 <MX_TIM1_Init+0x15c>)
 800243a:	f008 fe75 	bl	800b128 <HAL_TIMEx_ConfigBreakDeadTime>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8002444:	f7ff fd94 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002448:	4803      	ldr	r0, [pc, #12]	@ (8002458 <MX_TIM1_Init+0x15c>)
 800244a:	f000 f949 	bl	80026e0 <HAL_TIM_MspPostInit>

}
 800244e:	bf00      	nop
 8002450:	3770      	adds	r7, #112	@ 0x70
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	2000031c 	.word	0x2000031c
 800245c:	40012c00 	.word	0x40012c00

08002460 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08e      	sub	sp, #56	@ 0x38
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002466:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	605a      	str	r2, [r3, #4]
 8002470:	609a      	str	r2, [r3, #8]
 8002472:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002474:	f107 031c 	add.w	r3, r7, #28
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	605a      	str	r2, [r3, #4]
 800247e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002480:	463b      	mov	r3, r7
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	605a      	str	r2, [r3, #4]
 8002488:	609a      	str	r2, [r3, #8]
 800248a:	60da      	str	r2, [r3, #12]
 800248c:	611a      	str	r2, [r3, #16]
 800248e:	615a      	str	r2, [r3, #20]
 8002490:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002492:	4b2c      	ldr	r3, [pc, #176]	@ (8002544 <MX_TIM2_Init+0xe4>)
 8002494:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002498:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 49;
 800249a:	4b2a      	ldr	r3, [pc, #168]	@ (8002544 <MX_TIM2_Init+0xe4>)
 800249c:	2231      	movs	r2, #49	@ 0x31
 800249e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a0:	4b28      	ldr	r3, [pc, #160]	@ (8002544 <MX_TIM2_Init+0xe4>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 80024a6:	4b27      	ldr	r3, [pc, #156]	@ (8002544 <MX_TIM2_Init+0xe4>)
 80024a8:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80024ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ae:	4b25      	ldr	r3, [pc, #148]	@ (8002544 <MX_TIM2_Init+0xe4>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b4:	4b23      	ldr	r3, [pc, #140]	@ (8002544 <MX_TIM2_Init+0xe4>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024ba:	4822      	ldr	r0, [pc, #136]	@ (8002544 <MX_TIM2_Init+0xe4>)
 80024bc:	f007 f952 	bl	8009764 <HAL_TIM_Base_Init>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80024c6:	f7ff fd53 	bl	8001f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024d4:	4619      	mov	r1, r3
 80024d6:	481b      	ldr	r0, [pc, #108]	@ (8002544 <MX_TIM2_Init+0xe4>)
 80024d8:	f007 ff2e 	bl	800a338 <HAL_TIM_ConfigClockSource>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80024e2:	f7ff fd45 	bl	8001f70 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80024e6:	4817      	ldr	r0, [pc, #92]	@ (8002544 <MX_TIM2_Init+0xe4>)
 80024e8:	f007 fa42 	bl	8009970 <HAL_TIM_OC_Init>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80024f2:	f7ff fd3d 	bl	8001f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024fa:	2300      	movs	r3, #0
 80024fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024fe:	f107 031c 	add.w	r3, r7, #28
 8002502:	4619      	mov	r1, r3
 8002504:	480f      	ldr	r0, [pc, #60]	@ (8002544 <MX_TIM2_Init+0xe4>)
 8002506:	f008 fd3f 	bl	800af88 <HAL_TIMEx_MasterConfigSynchronization>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002510:	f7ff fd2e 	bl	8001f70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002514:	2300      	movs	r3, #0
 8002516:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002518:	2300      	movs	r3, #0
 800251a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800251c:	2300      	movs	r3, #0
 800251e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002520:	2300      	movs	r3, #0
 8002522:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002524:	463b      	mov	r3, r7
 8002526:	2204      	movs	r2, #4
 8002528:	4619      	mov	r1, r3
 800252a:	4806      	ldr	r0, [pc, #24]	@ (8002544 <MX_TIM2_Init+0xe4>)
 800252c:	f007 fd76 	bl	800a01c <HAL_TIM_OC_ConfigChannel>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002536:	f7ff fd1b 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800253a:	bf00      	nop
 800253c:	3738      	adds	r7, #56	@ 0x38
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000368 	.word	0x20000368

08002548 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b088      	sub	sp, #32
 800254c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800254e:	f107 0310 	add.w	r3, r7, #16
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	605a      	str	r2, [r3, #4]
 8002558:	609a      	str	r2, [r3, #8]
 800255a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800255c:	1d3b      	adds	r3, r7, #4
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	605a      	str	r2, [r3, #4]
 8002564:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002566:	4b1e      	ldr	r3, [pc, #120]	@ (80025e0 <MX_TIM3_Init+0x98>)
 8002568:	4a1e      	ldr	r2, [pc, #120]	@ (80025e4 <MX_TIM3_Init+0x9c>)
 800256a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 800256c:	4b1c      	ldr	r3, [pc, #112]	@ (80025e0 <MX_TIM3_Init+0x98>)
 800256e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002572:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002574:	4b1a      	ldr	r3, [pc, #104]	@ (80025e0 <MX_TIM3_Init+0x98>)
 8002576:	2200      	movs	r2, #0
 8002578:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 800257a:	4b19      	ldr	r3, [pc, #100]	@ (80025e0 <MX_TIM3_Init+0x98>)
 800257c:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8002580:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002582:	4b17      	ldr	r3, [pc, #92]	@ (80025e0 <MX_TIM3_Init+0x98>)
 8002584:	2200      	movs	r2, #0
 8002586:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002588:	4b15      	ldr	r3, [pc, #84]	@ (80025e0 <MX_TIM3_Init+0x98>)
 800258a:	2200      	movs	r2, #0
 800258c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800258e:	4814      	ldr	r0, [pc, #80]	@ (80025e0 <MX_TIM3_Init+0x98>)
 8002590:	f007 f8e8 	bl	8009764 <HAL_TIM_Base_Init>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800259a:	f7ff fce9 	bl	8001f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800259e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025a4:	f107 0310 	add.w	r3, r7, #16
 80025a8:	4619      	mov	r1, r3
 80025aa:	480d      	ldr	r0, [pc, #52]	@ (80025e0 <MX_TIM3_Init+0x98>)
 80025ac:	f007 fec4 	bl	800a338 <HAL_TIM_ConfigClockSource>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80025b6:	f7ff fcdb 	bl	8001f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ba:	2300      	movs	r3, #0
 80025bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025c2:	1d3b      	adds	r3, r7, #4
 80025c4:	4619      	mov	r1, r3
 80025c6:	4806      	ldr	r0, [pc, #24]	@ (80025e0 <MX_TIM3_Init+0x98>)
 80025c8:	f008 fcde 	bl	800af88 <HAL_TIMEx_MasterConfigSynchronization>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80025d2:	f7ff fccd 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80025d6:	bf00      	nop
 80025d8:	3720      	adds	r7, #32
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	200003b4 	.word	0x200003b4
 80025e4:	40000400 	.word	0x40000400

080025e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a37      	ldr	r2, [pc, #220]	@ (80026d4 <HAL_TIM_Base_MspInit+0xec>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d12f      	bne.n	800265a <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025fa:	4b37      	ldr	r3, [pc, #220]	@ (80026d8 <HAL_TIM_Base_MspInit+0xf0>)
 80025fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002600:	4a35      	ldr	r2, [pc, #212]	@ (80026d8 <HAL_TIM_Base_MspInit+0xf0>)
 8002602:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002606:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800260a:	4b33      	ldr	r3, [pc, #204]	@ (80026d8 <HAL_TIM_Base_MspInit+0xf0>)
 800260c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002610:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002614:	617b      	str	r3, [r7, #20]
 8002616:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002618:	2200      	movs	r2, #0
 800261a:	2100      	movs	r1, #0
 800261c:	2029      	movs	r0, #41	@ 0x29
 800261e:	f000 fc01 	bl	8002e24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002622:	2029      	movs	r0, #41	@ 0x29
 8002624:	f000 fc18 	bl	8002e58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 2, 0);
 8002628:	2200      	movs	r2, #0
 800262a:	2102      	movs	r1, #2
 800262c:	202a      	movs	r0, #42	@ 0x2a
 800262e:	f000 fbf9 	bl	8002e24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002632:	202a      	movs	r0, #42	@ 0x2a
 8002634:	f000 fc10 	bl	8002e58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 2, 0);
 8002638:	2200      	movs	r2, #0
 800263a:	2102      	movs	r1, #2
 800263c:	202b      	movs	r0, #43	@ 0x2b
 800263e:	f000 fbf1 	bl	8002e24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002642:	202b      	movs	r0, #43	@ 0x2b
 8002644:	f000 fc08 	bl	8002e58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 2, 0);
 8002648:	2200      	movs	r2, #0
 800264a:	2102      	movs	r1, #2
 800264c:	202c      	movs	r0, #44	@ 0x2c
 800264e:	f000 fbe9 	bl	8002e24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002652:	202c      	movs	r0, #44	@ 0x2c
 8002654:	f000 fc00 	bl	8002e58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002658:	e038      	b.n	80026cc <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM2)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002662:	d117      	bne.n	8002694 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002664:	4b1c      	ldr	r3, [pc, #112]	@ (80026d8 <HAL_TIM_Base_MspInit+0xf0>)
 8002666:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800266a:	4a1b      	ldr	r2, [pc, #108]	@ (80026d8 <HAL_TIM_Base_MspInit+0xf0>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002674:	4b18      	ldr	r3, [pc, #96]	@ (80026d8 <HAL_TIM_Base_MspInit+0xf0>)
 8002676:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8002682:	2200      	movs	r2, #0
 8002684:	2103      	movs	r1, #3
 8002686:	202d      	movs	r0, #45	@ 0x2d
 8002688:	f000 fbcc 	bl	8002e24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800268c:	202d      	movs	r0, #45	@ 0x2d
 800268e:	f000 fbe3 	bl	8002e58 <HAL_NVIC_EnableIRQ>
}
 8002692:	e01b      	b.n	80026cc <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM3)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a10      	ldr	r2, [pc, #64]	@ (80026dc <HAL_TIM_Base_MspInit+0xf4>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d116      	bne.n	80026cc <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800269e:	4b0e      	ldr	r3, [pc, #56]	@ (80026d8 <HAL_TIM_Base_MspInit+0xf0>)
 80026a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026a4:	4a0c      	ldr	r2, [pc, #48]	@ (80026d8 <HAL_TIM_Base_MspInit+0xf0>)
 80026a6:	f043 0302 	orr.w	r3, r3, #2
 80026aa:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80026ae:	4b0a      	ldr	r3, [pc, #40]	@ (80026d8 <HAL_TIM_Base_MspInit+0xf0>)
 80026b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 80026bc:	2200      	movs	r2, #0
 80026be:	2106      	movs	r1, #6
 80026c0:	202e      	movs	r0, #46	@ 0x2e
 80026c2:	f000 fbaf 	bl	8002e24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026c6:	202e      	movs	r0, #46	@ 0x2e
 80026c8:	f000 fbc6 	bl	8002e58 <HAL_NVIC_EnableIRQ>
}
 80026cc:	bf00      	nop
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40012c00 	.word	0x40012c00
 80026d8:	44020c00 	.word	0x44020c00
 80026dc:	40000400 	.word	0x40000400

080026e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e8:	f107 030c 	add.w	r3, r7, #12
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	605a      	str	r2, [r3, #4]
 80026f2:	609a      	str	r2, [r3, #8]
 80026f4:	60da      	str	r2, [r3, #12]
 80026f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a13      	ldr	r2, [pc, #76]	@ (800274c <HAL_TIM_MspPostInit+0x6c>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d11f      	bne.n	8002742 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002702:	4b13      	ldr	r3, [pc, #76]	@ (8002750 <HAL_TIM_MspPostInit+0x70>)
 8002704:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002708:	4a11      	ldr	r2, [pc, #68]	@ (8002750 <HAL_TIM_MspPostInit+0x70>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002712:	4b0f      	ldr	r3, [pc, #60]	@ (8002750 <HAL_TIM_MspPostInit+0x70>)
 8002714:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002720:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002724:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002726:	2302      	movs	r3, #2
 8002728:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272e:	2300      	movs	r3, #0
 8002730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002732:	2301      	movs	r3, #1
 8002734:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002736:	f107 030c 	add.w	r3, r7, #12
 800273a:	4619      	mov	r1, r3
 800273c:	4805      	ldr	r0, [pc, #20]	@ (8002754 <HAL_TIM_MspPostInit+0x74>)
 800273e:	f002 f81d 	bl	800477c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002742:	bf00      	nop
 8002744:	3720      	adds	r7, #32
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40012c00 	.word	0x40012c00
 8002750:	44020c00 	.word	0x44020c00
 8002754:	42020000 	.word	0x42020000

08002758 <MX_USART1_UART_Init>:
DMA_HandleTypeDef handle_GPDMA1_Channel0;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800275c:	4b22      	ldr	r3, [pc, #136]	@ (80027e8 <MX_USART1_UART_Init+0x90>)
 800275e:	4a23      	ldr	r2, [pc, #140]	@ (80027ec <MX_USART1_UART_Init+0x94>)
 8002760:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002762:	4b21      	ldr	r3, [pc, #132]	@ (80027e8 <MX_USART1_UART_Init+0x90>)
 8002764:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002768:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800276a:	4b1f      	ldr	r3, [pc, #124]	@ (80027e8 <MX_USART1_UART_Init+0x90>)
 800276c:	2200      	movs	r2, #0
 800276e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002770:	4b1d      	ldr	r3, [pc, #116]	@ (80027e8 <MX_USART1_UART_Init+0x90>)
 8002772:	2200      	movs	r2, #0
 8002774:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002776:	4b1c      	ldr	r3, [pc, #112]	@ (80027e8 <MX_USART1_UART_Init+0x90>)
 8002778:	2200      	movs	r2, #0
 800277a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800277c:	4b1a      	ldr	r3, [pc, #104]	@ (80027e8 <MX_USART1_UART_Init+0x90>)
 800277e:	220c      	movs	r2, #12
 8002780:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002782:	4b19      	ldr	r3, [pc, #100]	@ (80027e8 <MX_USART1_UART_Init+0x90>)
 8002784:	2200      	movs	r2, #0
 8002786:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002788:	4b17      	ldr	r3, [pc, #92]	@ (80027e8 <MX_USART1_UART_Init+0x90>)
 800278a:	2200      	movs	r2, #0
 800278c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800278e:	4b16      	ldr	r3, [pc, #88]	@ (80027e8 <MX_USART1_UART_Init+0x90>)
 8002790:	2200      	movs	r2, #0
 8002792:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002794:	4b14      	ldr	r3, [pc, #80]	@ (80027e8 <MX_USART1_UART_Init+0x90>)
 8002796:	2200      	movs	r2, #0
 8002798:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800279a:	4b13      	ldr	r3, [pc, #76]	@ (80027e8 <MX_USART1_UART_Init+0x90>)
 800279c:	2200      	movs	r2, #0
 800279e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027a0:	4811      	ldr	r0, [pc, #68]	@ (80027e8 <MX_USART1_UART_Init+0x90>)
 80027a2:	f008 fda1 	bl	800b2e8 <HAL_UART_Init>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80027ac:	f7ff fbe0 	bl	8001f70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027b0:	2100      	movs	r1, #0
 80027b2:	480d      	ldr	r0, [pc, #52]	@ (80027e8 <MX_USART1_UART_Init+0x90>)
 80027b4:	f00a f863 	bl	800c87e <HAL_UARTEx_SetTxFifoThreshold>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80027be:	f7ff fbd7 	bl	8001f70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027c2:	2100      	movs	r1, #0
 80027c4:	4808      	ldr	r0, [pc, #32]	@ (80027e8 <MX_USART1_UART_Init+0x90>)
 80027c6:	f00a f898 	bl	800c8fa <HAL_UARTEx_SetRxFifoThreshold>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80027d0:	f7ff fbce 	bl	8001f70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80027d4:	4804      	ldr	r0, [pc, #16]	@ (80027e8 <MX_USART1_UART_Init+0x90>)
 80027d6:	f00a f819 	bl	800c80c <HAL_UARTEx_DisableFifoMode>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80027e0:	f7ff fbc6 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027e4:	bf00      	nop
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20000400 	.word	0x20000400
 80027ec:	40013800 	.word	0x40013800

080027f0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027f4:	4b23      	ldr	r3, [pc, #140]	@ (8002884 <MX_USART2_UART_Init+0x94>)
 80027f6:	4a24      	ldr	r2, [pc, #144]	@ (8002888 <MX_USART2_UART_Init+0x98>)
 80027f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80027fa:	4b22      	ldr	r3, [pc, #136]	@ (8002884 <MX_USART2_UART_Init+0x94>)
 80027fc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002800:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002802:	4b20      	ldr	r3, [pc, #128]	@ (8002884 <MX_USART2_UART_Init+0x94>)
 8002804:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002808:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800280a:	4b1e      	ldr	r3, [pc, #120]	@ (8002884 <MX_USART2_UART_Init+0x94>)
 800280c:	2200      	movs	r2, #0
 800280e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002810:	4b1c      	ldr	r3, [pc, #112]	@ (8002884 <MX_USART2_UART_Init+0x94>)
 8002812:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002816:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002818:	4b1a      	ldr	r3, [pc, #104]	@ (8002884 <MX_USART2_UART_Init+0x94>)
 800281a:	220c      	movs	r2, #12
 800281c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800281e:	4b19      	ldr	r3, [pc, #100]	@ (8002884 <MX_USART2_UART_Init+0x94>)
 8002820:	2200      	movs	r2, #0
 8002822:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002824:	4b17      	ldr	r3, [pc, #92]	@ (8002884 <MX_USART2_UART_Init+0x94>)
 8002826:	2200      	movs	r2, #0
 8002828:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800282a:	4b16      	ldr	r3, [pc, #88]	@ (8002884 <MX_USART2_UART_Init+0x94>)
 800282c:	2200      	movs	r2, #0
 800282e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002830:	4b14      	ldr	r3, [pc, #80]	@ (8002884 <MX_USART2_UART_Init+0x94>)
 8002832:	2200      	movs	r2, #0
 8002834:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002836:	4b13      	ldr	r3, [pc, #76]	@ (8002884 <MX_USART2_UART_Init+0x94>)
 8002838:	2200      	movs	r2, #0
 800283a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800283c:	4811      	ldr	r0, [pc, #68]	@ (8002884 <MX_USART2_UART_Init+0x94>)
 800283e:	f008 fd53 	bl	800b2e8 <HAL_UART_Init>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8002848:	f7ff fb92 	bl	8001f70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800284c:	2100      	movs	r1, #0
 800284e:	480d      	ldr	r0, [pc, #52]	@ (8002884 <MX_USART2_UART_Init+0x94>)
 8002850:	f00a f815 	bl	800c87e <HAL_UARTEx_SetTxFifoThreshold>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 800285a:	f7ff fb89 	bl	8001f70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800285e:	2100      	movs	r1, #0
 8002860:	4808      	ldr	r0, [pc, #32]	@ (8002884 <MX_USART2_UART_Init+0x94>)
 8002862:	f00a f84a 	bl	800c8fa <HAL_UARTEx_SetRxFifoThreshold>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 800286c:	f7ff fb80 	bl	8001f70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002870:	4804      	ldr	r0, [pc, #16]	@ (8002884 <MX_USART2_UART_Init+0x94>)
 8002872:	f009 ffcb 	bl	800c80c <HAL_UARTEx_DisableFifoMode>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 800287c:	f7ff fb78 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002880:	bf00      	nop
 8002882:	bd80      	pop	{r7, pc}
 8002884:	20000494 	.word	0x20000494
 8002888:	40004400 	.word	0x40004400

0800288c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b0c0      	sub	sp, #256	@ 0x100
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002894:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	60da      	str	r2, [r3, #12]
 80028a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028a4:	f107 0318 	add.w	r3, r7, #24
 80028a8:	22d0      	movs	r2, #208	@ 0xd0
 80028aa:	2100      	movs	r1, #0
 80028ac:	4618      	mov	r0, r3
 80028ae:	f00a fabb 	bl	800ce28 <memset>
  if(uartHandle->Instance==USART1)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a72      	ldr	r2, [pc, #456]	@ (8002a80 <HAL_UART_MspInit+0x1f4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	f040 8091 	bne.w	80029e0 <HAL_UART_MspInit+0x154>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80028be:	f04f 0201 	mov.w	r2, #1
 80028c2:	f04f 0300 	mov.w	r3, #0
 80028c6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80028ca:	2300      	movs	r3, #0
 80028cc:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028ce:	f107 0318 	add.w	r3, r7, #24
 80028d2:	4618      	mov	r0, r3
 80028d4:	f003 fcc2 	bl	800625c <HAL_RCCEx_PeriphCLKConfig>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80028de:	f7ff fb47 	bl	8001f70 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028e2:	4b68      	ldr	r3, [pc, #416]	@ (8002a84 <HAL_UART_MspInit+0x1f8>)
 80028e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80028e8:	4a66      	ldr	r2, [pc, #408]	@ (8002a84 <HAL_UART_MspInit+0x1f8>)
 80028ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028ee:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80028f2:	4b64      	ldr	r3, [pc, #400]	@ (8002a84 <HAL_UART_MspInit+0x1f8>)
 80028f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80028f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002900:	4b60      	ldr	r3, [pc, #384]	@ (8002a84 <HAL_UART_MspInit+0x1f8>)
 8002902:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002906:	4a5f      	ldr	r2, [pc, #380]	@ (8002a84 <HAL_UART_MspInit+0x1f8>)
 8002908:	f043 0302 	orr.w	r3, r3, #2
 800290c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002910:	4b5c      	ldr	r3, [pc, #368]	@ (8002a84 <HAL_UART_MspInit+0x1f8>)
 8002912:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	613b      	str	r3, [r7, #16]
 800291c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800291e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002922:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002926:	2302      	movs	r3, #2
 8002928:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292c:	2300      	movs	r3, #0
 800292e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002932:	2300      	movs	r3, #0
 8002934:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002938:	2304      	movs	r3, #4
 800293a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800293e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002942:	4619      	mov	r1, r3
 8002944:	4850      	ldr	r0, [pc, #320]	@ (8002a88 <HAL_UART_MspInit+0x1fc>)
 8002946:	f001 ff19 	bl	800477c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* GPDMA1_REQUEST_USART1_RX Init */
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 800294a:	4b50      	ldr	r3, [pc, #320]	@ (8002a8c <HAL_UART_MspInit+0x200>)
 800294c:	4a50      	ldr	r2, [pc, #320]	@ (8002a90 <HAL_UART_MspInit+0x204>)
 800294e:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_USART1_RX;
 8002950:	4b4e      	ldr	r3, [pc, #312]	@ (8002a8c <HAL_UART_MspInit+0x200>)
 8002952:	2215      	movs	r2, #21
 8002954:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002956:	4b4d      	ldr	r3, [pc, #308]	@ (8002a8c <HAL_UART_MspInit+0x200>)
 8002958:	2200      	movs	r2, #0
 800295a:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800295c:	4b4b      	ldr	r3, [pc, #300]	@ (8002a8c <HAL_UART_MspInit+0x200>)
 800295e:	2200      	movs	r2, #0
 8002960:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 8002962:	4b4a      	ldr	r3, [pc, #296]	@ (8002a8c <HAL_UART_MspInit+0x200>)
 8002964:	2200      	movs	r2, #0
 8002966:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_FIXED;
 8002968:	4b48      	ldr	r3, [pc, #288]	@ (8002a8c <HAL_UART_MspInit+0x200>)
 800296a:	2200      	movs	r2, #0
 800296c:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 800296e:	4b47      	ldr	r3, [pc, #284]	@ (8002a8c <HAL_UART_MspInit+0x200>)
 8002970:	2200      	movs	r2, #0
 8002972:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8002974:	4b45      	ldr	r3, [pc, #276]	@ (8002a8c <HAL_UART_MspInit+0x200>)
 8002976:	2200      	movs	r2, #0
 8002978:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800297a:	4b44      	ldr	r3, [pc, #272]	@ (8002a8c <HAL_UART_MspInit+0x200>)
 800297c:	2200      	movs	r2, #0
 800297e:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 8002980:	4b42      	ldr	r3, [pc, #264]	@ (8002a8c <HAL_UART_MspInit+0x200>)
 8002982:	2201      	movs	r2, #1
 8002984:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 8002986:	4b41      	ldr	r3, [pc, #260]	@ (8002a8c <HAL_UART_MspInit+0x200>)
 8002988:	2201      	movs	r2, #1
 800298a:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800298c:	4b3f      	ldr	r3, [pc, #252]	@ (8002a8c <HAL_UART_MspInit+0x200>)
 800298e:	2200      	movs	r2, #0
 8002990:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002992:	4b3e      	ldr	r3, [pc, #248]	@ (8002a8c <HAL_UART_MspInit+0x200>)
 8002994:	2200      	movs	r2, #0
 8002996:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 8002998:	4b3c      	ldr	r3, [pc, #240]	@ (8002a8c <HAL_UART_MspInit+0x200>)
 800299a:	2200      	movs	r2, #0
 800299c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 800299e:	483b      	ldr	r0, [pc, #236]	@ (8002a8c <HAL_UART_MspInit+0x200>)
 80029a0:	f000 fb18 	bl	8002fd4 <HAL_DMA_Init>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_UART_MspInit+0x122>
    {
      Error_Handler();
 80029aa:	f7ff fae1 	bl	8001f70 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmarx, handle_GPDMA1_Channel0);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a36      	ldr	r2, [pc, #216]	@ (8002a8c <HAL_UART_MspInit+0x200>)
 80029b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80029b6:	4a35      	ldr	r2, [pc, #212]	@ (8002a8c <HAL_UART_MspInit+0x200>)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 80029bc:	2110      	movs	r1, #16
 80029be:	4833      	ldr	r0, [pc, #204]	@ (8002a8c <HAL_UART_MspInit+0x200>)
 80029c0:	f000 fe9a 	bl	80036f8 <HAL_DMA_ConfigChannelAttributes>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 80029ca:	f7ff fad1 	bl	8001f70 <Error_Handler>
    }

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80029ce:	2200      	movs	r2, #0
 80029d0:	2101      	movs	r1, #1
 80029d2:	203a      	movs	r0, #58	@ 0x3a
 80029d4:	f000 fa26 	bl	8002e24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80029d8:	203a      	movs	r0, #58	@ 0x3a
 80029da:	f000 fa3d 	bl	8002e58 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80029de:	e049      	b.n	8002a74 <HAL_UART_MspInit+0x1e8>
  else if(uartHandle->Instance==USART2)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a2b      	ldr	r2, [pc, #172]	@ (8002a94 <HAL_UART_MspInit+0x208>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d144      	bne.n	8002a74 <HAL_UART_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80029ea:	f04f 0202 	mov.w	r2, #2
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80029f6:	2300      	movs	r3, #0
 80029f8:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029fa:	f107 0318 	add.w	r3, r7, #24
 80029fe:	4618      	mov	r0, r3
 8002a00:	f003 fc2c 	bl	800625c <HAL_RCCEx_PeriphCLKConfig>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_UART_MspInit+0x182>
      Error_Handler();
 8002a0a:	f7ff fab1 	bl	8001f70 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002a84 <HAL_UART_MspInit+0x1f8>)
 8002a10:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a14:	4a1b      	ldr	r2, [pc, #108]	@ (8002a84 <HAL_UART_MspInit+0x1f8>)
 8002a16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a1a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002a1e:	4b19      	ldr	r3, [pc, #100]	@ (8002a84 <HAL_UART_MspInit+0x1f8>)
 8002a20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2c:	4b15      	ldr	r3, [pc, #84]	@ (8002a84 <HAL_UART_MspInit+0x1f8>)
 8002a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a32:	4a14      	ldr	r2, [pc, #80]	@ (8002a84 <HAL_UART_MspInit+0x1f8>)
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a3c:	4b11      	ldr	r3, [pc, #68]	@ (8002a84 <HAL_UART_MspInit+0x1f8>)
 8002a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a4a:	230c      	movs	r3, #12
 8002a4c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a50:	2302      	movs	r3, #2
 8002a52:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a56:	2300      	movs	r3, #0
 8002a58:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a62:	2307      	movs	r3, #7
 8002a64:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a68:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	480a      	ldr	r0, [pc, #40]	@ (8002a98 <HAL_UART_MspInit+0x20c>)
 8002a70:	f001 fe84 	bl	800477c <HAL_GPIO_Init>
}
 8002a74:	bf00      	nop
 8002a76:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40013800 	.word	0x40013800
 8002a84:	44020c00 	.word	0x44020c00
 8002a88:	42020400 	.word	0x42020400
 8002a8c:	20000528 	.word	0x20000528
 8002a90:	40020050 	.word	0x40020050
 8002a94:	40004400 	.word	0x40004400
 8002a98:	42020000 	.word	0x42020000

08002a9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a9c:	480d      	ldr	r0, [pc, #52]	@ (8002ad4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a9e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002aa0:	f7ff fbb0 	bl	8002204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002aa4:	480c      	ldr	r0, [pc, #48]	@ (8002ad8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002aa6:	490d      	ldr	r1, [pc, #52]	@ (8002adc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002aa8:	4a0d      	ldr	r2, [pc, #52]	@ (8002ae0 <LoopForever+0xe>)
  movs r3, #0
 8002aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002aac:	e002      	b.n	8002ab4 <LoopCopyDataInit>

08002aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ab2:	3304      	adds	r3, #4

08002ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ab8:	d3f9      	bcc.n	8002aae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aba:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002abc:	4c0a      	ldr	r4, [pc, #40]	@ (8002ae8 <LoopForever+0x16>)
  movs r3, #0
 8002abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ac0:	e001      	b.n	8002ac6 <LoopFillZerobss>

08002ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ac4:	3204      	adds	r2, #4

08002ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ac8:	d3fb      	bcc.n	8002ac2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002aca:	f00a fa01 	bl	800ced0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ace:	f7ff f843 	bl	8001b58 <main>

08002ad2 <LoopForever>:

LoopForever:
    b LoopForever
 8002ad2:	e7fe      	b.n	8002ad2 <LoopForever>
  ldr   r0, =_estack
 8002ad4:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8002ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002adc:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8002ae0:	0800db34 	.word	0x0800db34
  ldr r2, =_sbss
 8002ae4:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8002ae8:	200006f0 	.word	0x200006f0

08002aec <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002aec:	e7fe      	b.n	8002aec <ADC1_IRQHandler>
	...

08002af0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002af4:	2003      	movs	r0, #3
 8002af6:	f000 f98a 	bl	8002e0e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002afa:	f003 fa25 	bl	8005f48 <HAL_RCC_GetSysClockFreq>
 8002afe:	4602      	mov	r2, r0
 8002b00:	4b0c      	ldr	r3, [pc, #48]	@ (8002b34 <HAL_Init+0x44>)
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	f003 030f 	and.w	r3, r3, #15
 8002b08:	490b      	ldr	r1, [pc, #44]	@ (8002b38 <HAL_Init+0x48>)
 8002b0a:	5ccb      	ldrb	r3, [r1, r3]
 8002b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b10:	4a0a      	ldr	r2, [pc, #40]	@ (8002b3c <HAL_Init+0x4c>)
 8002b12:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002b14:	2004      	movs	r0, #4
 8002b16:	f000 f9cf 	bl	8002eb8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b1a:	2000      	movs	r0, #0
 8002b1c:	f000 f810 	bl	8002b40 <HAL_InitTick>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e002      	b.n	8002b30 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b2a:	f7ff fa2d 	bl	8001f88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	44020c00 	.word	0x44020c00
 8002b38:	0800daa0 	.word	0x0800daa0
 8002b3c:	20000084 	.word	0x20000084

08002b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002b4c:	4b33      	ldr	r3, [pc, #204]	@ (8002c1c <HAL_InitTick+0xdc>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e05c      	b.n	8002c12 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002b58:	4b31      	ldr	r3, [pc, #196]	@ (8002c20 <HAL_InitTick+0xe0>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d10c      	bne.n	8002b7e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002b64:	4b2f      	ldr	r3, [pc, #188]	@ (8002c24 <HAL_InitTick+0xe4>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4b2c      	ldr	r3, [pc, #176]	@ (8002c1c <HAL_InitTick+0xdc>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	e037      	b.n	8002bee <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002b7e:	f000 f9f3 	bl	8002f68 <HAL_SYSTICK_GetCLKSourceConfig>
 8002b82:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d023      	beq.n	8002bd2 <HAL_InitTick+0x92>
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d82d      	bhi.n	8002bec <HAL_InitTick+0xac>
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_InitTick+0x5e>
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d00d      	beq.n	8002bb8 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002b9c:	e026      	b.n	8002bec <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002b9e:	4b21      	ldr	r3, [pc, #132]	@ (8002c24 <HAL_InitTick+0xe4>)
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c1c <HAL_InitTick+0xdc>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002bac:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb4:	60fb      	str	r3, [r7, #12]
        break;
 8002bb6:	e01a      	b.n	8002bee <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002bb8:	4b18      	ldr	r3, [pc, #96]	@ (8002c1c <HAL_InitTick+0xdc>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bc6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bce:	60fb      	str	r3, [r7, #12]
        break;
 8002bd0:	e00d      	b.n	8002bee <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002bd2:	4b12      	ldr	r3, [pc, #72]	@ (8002c1c <HAL_InitTick+0xdc>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002be0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be8:	60fb      	str	r3, [r7, #12]
        break;
 8002bea:	e000      	b.n	8002bee <HAL_InitTick+0xae>
        break;
 8002bec:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 f940 	bl	8002e74 <HAL_SYSTICK_Config>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e009      	b.n	8002c12 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bfe:	2200      	movs	r2, #0
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	f04f 30ff 	mov.w	r0, #4294967295
 8002c06:	f000 f90d 	bl	8002e24 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002c0a:	4a07      	ldr	r2, [pc, #28]	@ (8002c28 <HAL_InitTick+0xe8>)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	2000008c 	.word	0x2000008c
 8002c20:	e000e010 	.word	0xe000e010
 8002c24:	20000084 	.word	0x20000084
 8002c28:	20000088 	.word	0x20000088

08002c2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c30:	4b06      	ldr	r3, [pc, #24]	@ (8002c4c <HAL_IncTick+0x20>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	461a      	mov	r2, r3
 8002c36:	4b06      	ldr	r3, [pc, #24]	@ (8002c50 <HAL_IncTick+0x24>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	4a04      	ldr	r2, [pc, #16]	@ (8002c50 <HAL_IncTick+0x24>)
 8002c3e:	6013      	str	r3, [r2, #0]
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	2000008c 	.word	0x2000008c
 8002c50:	200005a0 	.word	0x200005a0

08002c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  return uwTick;
 8002c58:	4b03      	ldr	r3, [pc, #12]	@ (8002c68 <HAL_GetTick+0x14>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	200005a0 	.word	0x200005a0

08002c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c74:	f7ff ffee 	bl	8002c54 <HAL_GetTick>
 8002c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c84:	d005      	beq.n	8002c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c86:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb0 <HAL_Delay+0x44>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4413      	add	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c92:	bf00      	nop
 8002c94:	f7ff ffde 	bl	8002c54 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d8f7      	bhi.n	8002c94 <HAL_Delay+0x28>
  {
  }
}
 8002ca4:	bf00      	nop
 8002ca6:	bf00      	nop
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	2000008c 	.word	0x2000008c

08002cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8002cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ce0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ce6:	4a04      	ldr	r2, [pc, #16]	@ (8002cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	60d3      	str	r3, [r2, #12]
}
 8002cec:	bf00      	nop
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	e000ed00 	.word	0xe000ed00

08002cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d00:	4b04      	ldr	r3, [pc, #16]	@ (8002d14 <__NVIC_GetPriorityGrouping+0x18>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	0a1b      	lsrs	r3, r3, #8
 8002d06:	f003 0307 	and.w	r3, r3, #7
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	e000ed00 	.word	0xe000ed00

08002d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	db0b      	blt.n	8002d42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	f003 021f 	and.w	r2, r3, #31
 8002d30:	4907      	ldr	r1, [pc, #28]	@ (8002d50 <__NVIC_EnableIRQ+0x38>)
 8002d32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	2001      	movs	r0, #1
 8002d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	e000e100 	.word	0xe000e100

08002d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	6039      	str	r1, [r7, #0]
 8002d5e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	db0a      	blt.n	8002d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	490c      	ldr	r1, [pc, #48]	@ (8002da0 <__NVIC_SetPriority+0x4c>)
 8002d6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d72:	0112      	lsls	r2, r2, #4
 8002d74:	b2d2      	uxtb	r2, r2
 8002d76:	440b      	add	r3, r1
 8002d78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d7c:	e00a      	b.n	8002d94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	4908      	ldr	r1, [pc, #32]	@ (8002da4 <__NVIC_SetPriority+0x50>)
 8002d84:	88fb      	ldrh	r3, [r7, #6]
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	3b04      	subs	r3, #4
 8002d8c:	0112      	lsls	r2, r2, #4
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	440b      	add	r3, r1
 8002d92:	761a      	strb	r2, [r3, #24]
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	e000e100 	.word	0xe000e100
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b089      	sub	sp, #36	@ 0x24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f1c3 0307 	rsb	r3, r3, #7
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	bf28      	it	cs
 8002dc6:	2304      	movcs	r3, #4
 8002dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3304      	adds	r3, #4
 8002dce:	2b06      	cmp	r3, #6
 8002dd0:	d902      	bls.n	8002dd8 <NVIC_EncodePriority+0x30>
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	3b03      	subs	r3, #3
 8002dd6:	e000      	b.n	8002dda <NVIC_EncodePriority+0x32>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	43da      	mvns	r2, r3
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	401a      	ands	r2, r3
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002df0:	f04f 31ff 	mov.w	r1, #4294967295
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfa:	43d9      	mvns	r1, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e00:	4313      	orrs	r3, r2
         );
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3724      	adds	r7, #36	@ 0x24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7ff ff4c 	bl	8002cb4 <__NVIC_SetPriorityGrouping>
}
 8002e1c:	bf00      	nop
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
 8002e30:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e32:	f7ff ff63 	bl	8002cfc <__NVIC_GetPriorityGrouping>
 8002e36:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	68b9      	ldr	r1, [r7, #8]
 8002e3c:	6978      	ldr	r0, [r7, #20]
 8002e3e:	f7ff ffb3 	bl	8002da8 <NVIC_EncodePriority>
 8002e42:	4602      	mov	r2, r0
 8002e44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e48:	4611      	mov	r1, r2
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff ff82 	bl	8002d54 <__NVIC_SetPriority>
}
 8002e50:	bf00      	nop
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff ff56 	bl	8002d18 <__NVIC_EnableIRQ>
}
 8002e6c:	bf00      	nop
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e84:	d301      	bcc.n	8002e8a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002e86:	2301      	movs	r3, #1
 8002e88:	e00d      	b.n	8002ea6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002eb4 <HAL_SYSTICK_Config+0x40>)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002e92:	4b08      	ldr	r3, [pc, #32]	@ (8002eb4 <HAL_SYSTICK_Config+0x40>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002e98:	4b06      	ldr	r3, [pc, #24]	@ (8002eb4 <HAL_SYSTICK_Config+0x40>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a05      	ldr	r2, [pc, #20]	@ (8002eb4 <HAL_SYSTICK_Config+0x40>)
 8002e9e:	f043 0303 	orr.w	r3, r3, #3
 8002ea2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	e000e010 	.word	0xe000e010

08002eb8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d844      	bhi.n	8002f50 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8002ecc <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ecc:	08002eef 	.word	0x08002eef
 8002ed0:	08002f0d 	.word	0x08002f0d
 8002ed4:	08002f2f 	.word	0x08002f2f
 8002ed8:	08002f51 	.word	0x08002f51
 8002edc:	08002ee1 	.word	0x08002ee1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8002f60 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a1e      	ldr	r2, [pc, #120]	@ (8002f60 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002ee6:	f043 0304 	orr.w	r3, r3, #4
 8002eea:	6013      	str	r3, [r2, #0]
      break;
 8002eec:	e031      	b.n	8002f52 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002eee:	4b1c      	ldr	r3, [pc, #112]	@ (8002f60 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a1b      	ldr	r2, [pc, #108]	@ (8002f60 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002ef4:	f023 0304 	bic.w	r3, r3, #4
 8002ef8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8002efa:	4b1a      	ldr	r3, [pc, #104]	@ (8002f64 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002efc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002f00:	4a18      	ldr	r2, [pc, #96]	@ (8002f64 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002f02:	f023 030c 	bic.w	r3, r3, #12
 8002f06:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002f0a:	e022      	b.n	8002f52 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002f0c:	4b14      	ldr	r3, [pc, #80]	@ (8002f60 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a13      	ldr	r2, [pc, #76]	@ (8002f60 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002f12:	f023 0304 	bic.w	r3, r3, #4
 8002f16:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8002f18:	4b12      	ldr	r3, [pc, #72]	@ (8002f64 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002f1a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002f1e:	f023 030c 	bic.w	r3, r3, #12
 8002f22:	4a10      	ldr	r2, [pc, #64]	@ (8002f64 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002f24:	f043 0304 	orr.w	r3, r3, #4
 8002f28:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002f2c:	e011      	b.n	8002f52 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002f60 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a0b      	ldr	r2, [pc, #44]	@ (8002f60 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002f34:	f023 0304 	bic.w	r3, r3, #4
 8002f38:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8002f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f64 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002f3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002f40:	f023 030c 	bic.w	r3, r3, #12
 8002f44:	4a07      	ldr	r2, [pc, #28]	@ (8002f64 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002f46:	f043 0308 	orr.w	r3, r3, #8
 8002f4a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002f4e:	e000      	b.n	8002f52 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002f50:	bf00      	nop
  }
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	e000e010 	.word	0xe000e010
 8002f64:	44020c00 	.word	0x44020c00

08002f68 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002f6e:	4b17      	ldr	r3, [pc, #92]	@ (8002fcc <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002f7a:	2304      	movs	r3, #4
 8002f7c:	607b      	str	r3, [r7, #4]
 8002f7e:	e01e      	b.n	8002fbe <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8002f80:	4b13      	ldr	r3, [pc, #76]	@ (8002fd0 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8002f82:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002f86:	f003 030c 	and.w	r3, r3, #12
 8002f8a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	2b08      	cmp	r3, #8
 8002f90:	d00f      	beq.n	8002fb2 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d80f      	bhi.n	8002fb8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	2b04      	cmp	r3, #4
 8002fa2:	d003      	beq.n	8002fac <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002fa4:	e008      	b.n	8002fb8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	607b      	str	r3, [r7, #4]
        break;
 8002faa:	e008      	b.n	8002fbe <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002fac:	2301      	movs	r3, #1
 8002fae:	607b      	str	r3, [r7, #4]
        break;
 8002fb0:	e005      	b.n	8002fbe <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	607b      	str	r3, [r7, #4]
        break;
 8002fb6:	e002      	b.n	8002fbe <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	607b      	str	r3, [r7, #4]
        break;
 8002fbc:	bf00      	nop
    }
  }
  return systick_source;
 8002fbe:	687b      	ldr	r3, [r7, #4]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	e000e010 	.word	0xe000e010
 8002fd0:	44020c00 	.word	0x44020c00

08002fd4 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8002fdc:	f7ff fe3a 	bl	8002c54 <HAL_GetTick>
 8002fe0:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e0db      	b.n	80031a4 <HAL_DMA_Init+0x1d0>
  if (hdma->Init.Mode == DMA_PFCTRL)
  {
    assert_param(IS_DMA_PFREQ_INSTANCE(hdma->Instance));
  }
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a6e      	ldr	r2, [pc, #440]	@ (80031ac <HAL_DMA_Init+0x1d8>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	f000 809f 	beq.w	8003136 <HAL_DMA_Init+0x162>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a6c      	ldr	r2, [pc, #432]	@ (80031b0 <HAL_DMA_Init+0x1dc>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	f000 8099 	beq.w	8003136 <HAL_DMA_Init+0x162>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a6a      	ldr	r2, [pc, #424]	@ (80031b4 <HAL_DMA_Init+0x1e0>)
 800300a:	4293      	cmp	r3, r2
 800300c:	f000 8093 	beq.w	8003136 <HAL_DMA_Init+0x162>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a68      	ldr	r2, [pc, #416]	@ (80031b8 <HAL_DMA_Init+0x1e4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	f000 808d 	beq.w	8003136 <HAL_DMA_Init+0x162>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a66      	ldr	r2, [pc, #408]	@ (80031bc <HAL_DMA_Init+0x1e8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	f000 8087 	beq.w	8003136 <HAL_DMA_Init+0x162>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a64      	ldr	r2, [pc, #400]	@ (80031c0 <HAL_DMA_Init+0x1ec>)
 800302e:	4293      	cmp	r3, r2
 8003030:	f000 8081 	beq.w	8003136 <HAL_DMA_Init+0x162>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a62      	ldr	r2, [pc, #392]	@ (80031c4 <HAL_DMA_Init+0x1f0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d07b      	beq.n	8003136 <HAL_DMA_Init+0x162>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a61      	ldr	r2, [pc, #388]	@ (80031c8 <HAL_DMA_Init+0x1f4>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d076      	beq.n	8003136 <HAL_DMA_Init+0x162>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a5f      	ldr	r2, [pc, #380]	@ (80031cc <HAL_DMA_Init+0x1f8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d071      	beq.n	8003136 <HAL_DMA_Init+0x162>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a5e      	ldr	r2, [pc, #376]	@ (80031d0 <HAL_DMA_Init+0x1fc>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d06c      	beq.n	8003136 <HAL_DMA_Init+0x162>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a5c      	ldr	r2, [pc, #368]	@ (80031d4 <HAL_DMA_Init+0x200>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d067      	beq.n	8003136 <HAL_DMA_Init+0x162>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a5b      	ldr	r2, [pc, #364]	@ (80031d8 <HAL_DMA_Init+0x204>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d062      	beq.n	8003136 <HAL_DMA_Init+0x162>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a59      	ldr	r2, [pc, #356]	@ (80031dc <HAL_DMA_Init+0x208>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d05d      	beq.n	8003136 <HAL_DMA_Init+0x162>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a58      	ldr	r2, [pc, #352]	@ (80031e0 <HAL_DMA_Init+0x20c>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d058      	beq.n	8003136 <HAL_DMA_Init+0x162>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a56      	ldr	r2, [pc, #344]	@ (80031e4 <HAL_DMA_Init+0x210>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d053      	beq.n	8003136 <HAL_DMA_Init+0x162>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a55      	ldr	r2, [pc, #340]	@ (80031e8 <HAL_DMA_Init+0x214>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d04e      	beq.n	8003136 <HAL_DMA_Init+0x162>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a53      	ldr	r2, [pc, #332]	@ (80031ec <HAL_DMA_Init+0x218>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d049      	beq.n	8003136 <HAL_DMA_Init+0x162>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a52      	ldr	r2, [pc, #328]	@ (80031f0 <HAL_DMA_Init+0x21c>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d044      	beq.n	8003136 <HAL_DMA_Init+0x162>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a50      	ldr	r2, [pc, #320]	@ (80031f4 <HAL_DMA_Init+0x220>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d03f      	beq.n	8003136 <HAL_DMA_Init+0x162>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a4f      	ldr	r2, [pc, #316]	@ (80031f8 <HAL_DMA_Init+0x224>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d03a      	beq.n	8003136 <HAL_DMA_Init+0x162>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a4d      	ldr	r2, [pc, #308]	@ (80031fc <HAL_DMA_Init+0x228>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d035      	beq.n	8003136 <HAL_DMA_Init+0x162>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a4c      	ldr	r2, [pc, #304]	@ (8003200 <HAL_DMA_Init+0x22c>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d030      	beq.n	8003136 <HAL_DMA_Init+0x162>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a4a      	ldr	r2, [pc, #296]	@ (8003204 <HAL_DMA_Init+0x230>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d02b      	beq.n	8003136 <HAL_DMA_Init+0x162>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a49      	ldr	r2, [pc, #292]	@ (8003208 <HAL_DMA_Init+0x234>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d026      	beq.n	8003136 <HAL_DMA_Init+0x162>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a47      	ldr	r2, [pc, #284]	@ (800320c <HAL_DMA_Init+0x238>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d021      	beq.n	8003136 <HAL_DMA_Init+0x162>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a46      	ldr	r2, [pc, #280]	@ (8003210 <HAL_DMA_Init+0x23c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d01c      	beq.n	8003136 <HAL_DMA_Init+0x162>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a44      	ldr	r2, [pc, #272]	@ (8003214 <HAL_DMA_Init+0x240>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d017      	beq.n	8003136 <HAL_DMA_Init+0x162>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a43      	ldr	r2, [pc, #268]	@ (8003218 <HAL_DMA_Init+0x244>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d012      	beq.n	8003136 <HAL_DMA_Init+0x162>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a41      	ldr	r2, [pc, #260]	@ (800321c <HAL_DMA_Init+0x248>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d00d      	beq.n	8003136 <HAL_DMA_Init+0x162>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a40      	ldr	r2, [pc, #256]	@ (8003220 <HAL_DMA_Init+0x24c>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d008      	beq.n	8003136 <HAL_DMA_Init+0x162>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a3e      	ldr	r2, [pc, #248]	@ (8003224 <HAL_DMA_Init+0x250>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d003      	beq.n	8003136 <HAL_DMA_Init+0x162>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a3d      	ldr	r2, [pc, #244]	@ (8003228 <HAL_DMA_Init+0x254>)
 8003134:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2202      	movs	r2, #2
 8003142:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	695a      	ldr	r2, [r3, #20]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f042 0206 	orr.w	r2, r2, #6
 8003154:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003156:	e00f      	b.n	8003178 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003158:	f7ff fd7c 	bl	8002c54 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b05      	cmp	r3, #5
 8003164:	d908      	bls.n	8003178 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2210      	movs	r2, #16
 800316a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2203      	movs	r2, #3
 8003170:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e015      	b.n	80031a4 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1e8      	bne.n	8003158 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 fb18 	bl	80037bc <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40020050 	.word	0x40020050
 80031b0:	50020050 	.word	0x50020050
 80031b4:	400200d0 	.word	0x400200d0
 80031b8:	500200d0 	.word	0x500200d0
 80031bc:	40020150 	.word	0x40020150
 80031c0:	50020150 	.word	0x50020150
 80031c4:	400201d0 	.word	0x400201d0
 80031c8:	500201d0 	.word	0x500201d0
 80031cc:	40020250 	.word	0x40020250
 80031d0:	50020250 	.word	0x50020250
 80031d4:	400202d0 	.word	0x400202d0
 80031d8:	500202d0 	.word	0x500202d0
 80031dc:	40020350 	.word	0x40020350
 80031e0:	50020350 	.word	0x50020350
 80031e4:	400203d0 	.word	0x400203d0
 80031e8:	500203d0 	.word	0x500203d0
 80031ec:	40021050 	.word	0x40021050
 80031f0:	50021050 	.word	0x50021050
 80031f4:	400210d0 	.word	0x400210d0
 80031f8:	500210d0 	.word	0x500210d0
 80031fc:	40021150 	.word	0x40021150
 8003200:	50021150 	.word	0x50021150
 8003204:	400211d0 	.word	0x400211d0
 8003208:	500211d0 	.word	0x500211d0
 800320c:	40021250 	.word	0x40021250
 8003210:	50021250 	.word	0x50021250
 8003214:	400212d0 	.word	0x400212d0
 8003218:	500212d0 	.word	0x500212d0
 800321c:	40021350 	.word	0x40021350
 8003220:	50021350 	.word	0x50021350
 8003224:	400213d0 	.word	0x400213d0
 8003228:	500213d0 	.word	0x500213d0

0800322c <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
 8003238:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e04f      	b.n	80032e4 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800324a:	2b01      	cmp	r3, #1
 800324c:	d101      	bne.n	8003252 <HAL_DMA_Start_IT+0x26>
 800324e:	2302      	movs	r3, #2
 8003250:	e048      	b.n	80032e4 <HAL_DMA_Start_IT+0xb8>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b01      	cmp	r3, #1
 8003264:	d136      	bne.n	80032d4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2202      	movs	r2, #2
 800326a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	68b9      	ldr	r1, [r7, #8]
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 fa78 	bl	8003770 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	695a      	ldr	r2, [r3, #20]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800328e:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003294:	2b00      	cmp	r3, #0
 8003296:	d007      	beq.n	80032a8 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695a      	ldr	r2, [r3, #20]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032a6:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d007      	beq.n	80032c0 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695a      	ldr	r2, [r3, #20]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032be:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	695a      	ldr	r2, [r3, #20]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0201 	orr.w	r2, r2, #1
 80032ce:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
 80032d2:	e007      	b.n	80032e4 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2240      	movs	r2, #64	@ 0x40
 80032d8:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80032f4:	f7ff fcae 	bl	8002c54 <HAL_GetTick>
 80032f8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e06b      	b.n	80033dc <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d008      	beq.n	8003322 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2220      	movs	r2, #32
 8003314:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e05c      	b.n	80033dc <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695a      	ldr	r2, [r3, #20]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f042 0204 	orr.w	r2, r2, #4
 8003330:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2205      	movs	r2, #5
 8003336:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800333a:	e020      	b.n	800337e <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800333c:	f7ff fc8a 	bl	8002c54 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b05      	cmp	r3, #5
 8003348:	d919      	bls.n	800337e <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800334e:	f043 0210 	orr.w	r2, r3, #16
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2203      	movs	r2, #3
 800335a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800336e:	2201      	movs	r2, #1
 8003370:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e02e      	b.n	80033dc <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0d7      	beq.n	800333c <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	695a      	ldr	r2, [r3, #20]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0202 	orr.w	r2, r2, #2
 800339a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2204      	movs	r2, #4
 80033a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80033ac:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d007      	beq.n	80033d2 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033c6:	2201      	movs	r2, #1
 80033c8:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2200      	movs	r2, #0
 80033d0:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e019      	b.n	800342a <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d004      	beq.n	800340c <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2220      	movs	r2, #32
 8003406:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e00e      	b.n	800342a <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2204      	movs	r2, #4
 8003410:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6812      	ldr	r2, [r2, #0]
 800341e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003422:	f043 0304 	orr.w	r3, r3, #4
 8003426:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b086      	sub	sp, #24
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003446:	f023 030f 	bic.w	r3, r3, #15
 800344a:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003454:	3b50      	subs	r3, #80	@ 0x50
 8003456:	09db      	lsrs	r3, r3, #7
 8003458:	f003 031f 	and.w	r3, r3, #31
 800345c:	2201      	movs	r2, #1
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4013      	ands	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 813b 	beq.w	80036ec <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003480:	2b00      	cmp	r3, #0
 8003482:	d011      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800349a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a0:	f043 0201 	orr.w	r2, r3, #1
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d011      	beq.n	80034da <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034cc:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d2:	f043 0202 	orr.w	r2, r3, #2
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d011      	beq.n	800350c <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80034fe:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003504:	f043 0204 	orr.w	r2, r3, #4
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d011      	beq.n	800353e <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00a      	beq.n	800353e <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003530:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003536:	f043 0208 	orr.w	r2, r3, #8
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003548:	2b00      	cmp	r3, #0
 800354a:	d013      	beq.n	8003574 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00c      	beq.n	8003574 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003562:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d04c      	beq.n	800361c <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d045      	beq.n	800361c <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003598:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d12e      	bne.n	8003604 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695a      	ldr	r2, [r3, #20]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035b4:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695a      	ldr	r2, [r3, #20]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f042 0202 	orr.w	r2, r2, #2
 80035c4:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d007      	beq.n	80035ea <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035de:	2201      	movs	r2, #1
 80035e0:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2200      	movs	r2, #0
 80035e8:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d07a      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	4798      	blx	r3
        }

        return;
 8003602:	e075      	b.n	80036f0 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2205      	movs	r2, #5
 8003608:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003626:	2b00      	cmp	r3, #0
 8003628:	d039      	beq.n	800369e <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003634:	2b00      	cmp	r3, #0
 8003636:	d032      	beq.n	800369e <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800363c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003640:	2b00      	cmp	r3, #0
 8003642:	d012      	beq.n	800366a <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800364a:	2b00      	cmp	r3, #0
 800364c:	d116      	bne.n	800367c <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003654:	2b00      	cmp	r3, #0
 8003656:	d111      	bne.n	800367c <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003664:	2201      	movs	r2, #1
 8003666:	731a      	strb	r2, [r3, #12]
 8003668:	e008      	b.n	800367c <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003670:	2b00      	cmp	r3, #0
 8003672:	d103      	bne.n	800367c <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003684:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d025      	beq.n	80036f2 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695a      	ldr	r2, [r3, #20]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f042 0202 	orr.w	r2, r2, #2
 80036b4:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ce:	2201      	movs	r2, #1
 80036d0:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d007      	beq.n	80036f2 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	4798      	blx	r3
 80036ea:	e002      	b.n	80036f2 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 80036ec:	bf00      	nop
 80036ee:	e000      	b.n	80036f2 <HAL_DMA_IRQHandler+0x2bc>
        return;
 80036f0:	bf00      	nop
    }
  }
}
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e02b      	b.n	8003764 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003714:	f023 030f 	bic.w	r3, r3, #15
 8003718:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003722:	3b50      	subs	r3, #80	@ 0x50
 8003724:	09db      	lsrs	r3, r3, #7
 8003726:	f003 031f 	and.w	r3, r3, #31
 800372a:	2201      	movs	r2, #1
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	f003 0310 	and.w	r3, r3, #16
 8003738:	2b00      	cmp	r3, #0
 800373a:	d012      	beq.n	8003762 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	f003 0311 	and.w	r3, r3, #17
 8003742:	2b11      	cmp	r3, #17
 8003744:	d106      	bne.n	8003754 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	431a      	orrs	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	605a      	str	r2, [r3, #4]
 8003752:	e006      	b.n	8003762 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	43db      	mvns	r3, r3
 800375c:	401a      	ands	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
 800377c:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003784:	0c1b      	lsrs	r3, r3, #16
 8003786:	041b      	lsls	r3, r3, #16
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	b291      	uxth	r1, r2
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	6812      	ldr	r2, [r2, #0]
 8003790:	430b      	orrs	r3, r1
 8003792:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 800379c:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80037ae:	bf00      	nop
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
	...

080037bc <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	430a      	orrs	r2, r1
 80037dc:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	695a      	ldr	r2, [r3, #20]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a53      	ldr	r2, [pc, #332]	@ (8003948 <DMA_Init+0x18c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	f000 80a0 	beq.w	8003942 <DMA_Init+0x186>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a51      	ldr	r2, [pc, #324]	@ (800394c <DMA_Init+0x190>)
 8003808:	4293      	cmp	r3, r2
 800380a:	f000 809a 	beq.w	8003942 <DMA_Init+0x186>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a4f      	ldr	r2, [pc, #316]	@ (8003950 <DMA_Init+0x194>)
 8003814:	4293      	cmp	r3, r2
 8003816:	f000 8094 	beq.w	8003942 <DMA_Init+0x186>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a4d      	ldr	r2, [pc, #308]	@ (8003954 <DMA_Init+0x198>)
 8003820:	4293      	cmp	r3, r2
 8003822:	f000 808e 	beq.w	8003942 <DMA_Init+0x186>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a4b      	ldr	r2, [pc, #300]	@ (8003958 <DMA_Init+0x19c>)
 800382c:	4293      	cmp	r3, r2
 800382e:	f000 8088 	beq.w	8003942 <DMA_Init+0x186>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a49      	ldr	r2, [pc, #292]	@ (800395c <DMA_Init+0x1a0>)
 8003838:	4293      	cmp	r3, r2
 800383a:	f000 8082 	beq.w	8003942 <DMA_Init+0x186>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a47      	ldr	r2, [pc, #284]	@ (8003960 <DMA_Init+0x1a4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d07c      	beq.n	8003942 <DMA_Init+0x186>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a45      	ldr	r2, [pc, #276]	@ (8003964 <DMA_Init+0x1a8>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d077      	beq.n	8003942 <DMA_Init+0x186>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a44      	ldr	r2, [pc, #272]	@ (8003968 <DMA_Init+0x1ac>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d072      	beq.n	8003942 <DMA_Init+0x186>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a42      	ldr	r2, [pc, #264]	@ (800396c <DMA_Init+0x1b0>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d06d      	beq.n	8003942 <DMA_Init+0x186>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a41      	ldr	r2, [pc, #260]	@ (8003970 <DMA_Init+0x1b4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d068      	beq.n	8003942 <DMA_Init+0x186>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a3f      	ldr	r2, [pc, #252]	@ (8003974 <DMA_Init+0x1b8>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d063      	beq.n	8003942 <DMA_Init+0x186>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a3e      	ldr	r2, [pc, #248]	@ (8003978 <DMA_Init+0x1bc>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d05e      	beq.n	8003942 <DMA_Init+0x186>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a3c      	ldr	r2, [pc, #240]	@ (800397c <DMA_Init+0x1c0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d059      	beq.n	8003942 <DMA_Init+0x186>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a3b      	ldr	r2, [pc, #236]	@ (8003980 <DMA_Init+0x1c4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d054      	beq.n	8003942 <DMA_Init+0x186>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a39      	ldr	r2, [pc, #228]	@ (8003984 <DMA_Init+0x1c8>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d04f      	beq.n	8003942 <DMA_Init+0x186>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a38      	ldr	r2, [pc, #224]	@ (8003988 <DMA_Init+0x1cc>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d04a      	beq.n	8003942 <DMA_Init+0x186>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a36      	ldr	r2, [pc, #216]	@ (800398c <DMA_Init+0x1d0>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d045      	beq.n	8003942 <DMA_Init+0x186>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a35      	ldr	r2, [pc, #212]	@ (8003990 <DMA_Init+0x1d4>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d040      	beq.n	8003942 <DMA_Init+0x186>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a33      	ldr	r2, [pc, #204]	@ (8003994 <DMA_Init+0x1d8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d03b      	beq.n	8003942 <DMA_Init+0x186>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a32      	ldr	r2, [pc, #200]	@ (8003998 <DMA_Init+0x1dc>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d036      	beq.n	8003942 <DMA_Init+0x186>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a30      	ldr	r2, [pc, #192]	@ (800399c <DMA_Init+0x1e0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d031      	beq.n	8003942 <DMA_Init+0x186>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a2f      	ldr	r2, [pc, #188]	@ (80039a0 <DMA_Init+0x1e4>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d02c      	beq.n	8003942 <DMA_Init+0x186>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a2d      	ldr	r2, [pc, #180]	@ (80039a4 <DMA_Init+0x1e8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d027      	beq.n	8003942 <DMA_Init+0x186>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a2c      	ldr	r2, [pc, #176]	@ (80039a8 <DMA_Init+0x1ec>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d022      	beq.n	8003942 <DMA_Init+0x186>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a2a      	ldr	r2, [pc, #168]	@ (80039ac <DMA_Init+0x1f0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d01d      	beq.n	8003942 <DMA_Init+0x186>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a29      	ldr	r2, [pc, #164]	@ (80039b0 <DMA_Init+0x1f4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d018      	beq.n	8003942 <DMA_Init+0x186>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a27      	ldr	r2, [pc, #156]	@ (80039b4 <DMA_Init+0x1f8>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d013      	beq.n	8003942 <DMA_Init+0x186>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a26      	ldr	r2, [pc, #152]	@ (80039b8 <DMA_Init+0x1fc>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d00e      	beq.n	8003942 <DMA_Init+0x186>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a24      	ldr	r2, [pc, #144]	@ (80039bc <DMA_Init+0x200>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d009      	beq.n	8003942 <DMA_Init+0x186>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a23      	ldr	r2, [pc, #140]	@ (80039c0 <DMA_Init+0x204>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d004      	beq.n	8003942 <DMA_Init+0x186>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a21      	ldr	r2, [pc, #132]	@ (80039c4 <DMA_Init+0x208>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d142      	bne.n	80039c8 <DMA_Init+0x20c>
 8003942:	2301      	movs	r3, #1
 8003944:	e041      	b.n	80039ca <DMA_Init+0x20e>
 8003946:	bf00      	nop
 8003948:	40020050 	.word	0x40020050
 800394c:	50020050 	.word	0x50020050
 8003950:	400200d0 	.word	0x400200d0
 8003954:	500200d0 	.word	0x500200d0
 8003958:	40020150 	.word	0x40020150
 800395c:	50020150 	.word	0x50020150
 8003960:	400201d0 	.word	0x400201d0
 8003964:	500201d0 	.word	0x500201d0
 8003968:	40020250 	.word	0x40020250
 800396c:	50020250 	.word	0x50020250
 8003970:	400202d0 	.word	0x400202d0
 8003974:	500202d0 	.word	0x500202d0
 8003978:	40020350 	.word	0x40020350
 800397c:	50020350 	.word	0x50020350
 8003980:	400203d0 	.word	0x400203d0
 8003984:	500203d0 	.word	0x500203d0
 8003988:	40021050 	.word	0x40021050
 800398c:	50021050 	.word	0x50021050
 8003990:	400210d0 	.word	0x400210d0
 8003994:	500210d0 	.word	0x500210d0
 8003998:	40021150 	.word	0x40021150
 800399c:	50021150 	.word	0x50021150
 80039a0:	400211d0 	.word	0x400211d0
 80039a4:	500211d0 	.word	0x500211d0
 80039a8:	40021250 	.word	0x40021250
 80039ac:	50021250 	.word	0x50021250
 80039b0:	400212d0 	.word	0x400212d0
 80039b4:	500212d0 	.word	0x500212d0
 80039b8:	40021350 	.word	0x40021350
 80039bc:	50021350 	.word	0x50021350
 80039c0:	400213d0 	.word	0x400213d0
 80039c4:	500213d0 	.word	0x500213d0
 80039c8:	2300      	movs	r3, #0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d012      	beq.n	80039f4 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d6:	3b01      	subs	r3, #1
 80039d8:	051b      	lsls	r3, r3, #20
 80039da:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80039de:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e4:	3b01      	subs	r3, #1
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80039ec:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fa:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	641a      	str	r2, [r3, #64]	@ 0x40
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
#endif /* DMA_CTR1_SSEC */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a24:	f040 80b0 	bne.w	8003b88 <DMA_Init+0x3cc>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a84      	ldr	r2, [pc, #528]	@ (8003c40 <DMA_Init+0x484>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	f000 80a0 	beq.w	8003b74 <DMA_Init+0x3b8>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a82      	ldr	r2, [pc, #520]	@ (8003c44 <DMA_Init+0x488>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	f000 809a 	beq.w	8003b74 <DMA_Init+0x3b8>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a80      	ldr	r2, [pc, #512]	@ (8003c48 <DMA_Init+0x48c>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	f000 8094 	beq.w	8003b74 <DMA_Init+0x3b8>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a7e      	ldr	r2, [pc, #504]	@ (8003c4c <DMA_Init+0x490>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	f000 808e 	beq.w	8003b74 <DMA_Init+0x3b8>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a7c      	ldr	r2, [pc, #496]	@ (8003c50 <DMA_Init+0x494>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	f000 8088 	beq.w	8003b74 <DMA_Init+0x3b8>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a7a      	ldr	r2, [pc, #488]	@ (8003c54 <DMA_Init+0x498>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	f000 8082 	beq.w	8003b74 <DMA_Init+0x3b8>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a78      	ldr	r2, [pc, #480]	@ (8003c58 <DMA_Init+0x49c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d07c      	beq.n	8003b74 <DMA_Init+0x3b8>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a77      	ldr	r2, [pc, #476]	@ (8003c5c <DMA_Init+0x4a0>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d077      	beq.n	8003b74 <DMA_Init+0x3b8>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a75      	ldr	r2, [pc, #468]	@ (8003c60 <DMA_Init+0x4a4>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d072      	beq.n	8003b74 <DMA_Init+0x3b8>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a74      	ldr	r2, [pc, #464]	@ (8003c64 <DMA_Init+0x4a8>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d06d      	beq.n	8003b74 <DMA_Init+0x3b8>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a72      	ldr	r2, [pc, #456]	@ (8003c68 <DMA_Init+0x4ac>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d068      	beq.n	8003b74 <DMA_Init+0x3b8>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a71      	ldr	r2, [pc, #452]	@ (8003c6c <DMA_Init+0x4b0>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d063      	beq.n	8003b74 <DMA_Init+0x3b8>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a6f      	ldr	r2, [pc, #444]	@ (8003c70 <DMA_Init+0x4b4>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d05e      	beq.n	8003b74 <DMA_Init+0x3b8>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a6e      	ldr	r2, [pc, #440]	@ (8003c74 <DMA_Init+0x4b8>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d059      	beq.n	8003b74 <DMA_Init+0x3b8>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a6c      	ldr	r2, [pc, #432]	@ (8003c78 <DMA_Init+0x4bc>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d054      	beq.n	8003b74 <DMA_Init+0x3b8>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a6b      	ldr	r2, [pc, #428]	@ (8003c7c <DMA_Init+0x4c0>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d04f      	beq.n	8003b74 <DMA_Init+0x3b8>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a69      	ldr	r2, [pc, #420]	@ (8003c80 <DMA_Init+0x4c4>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d04a      	beq.n	8003b74 <DMA_Init+0x3b8>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a68      	ldr	r2, [pc, #416]	@ (8003c84 <DMA_Init+0x4c8>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d045      	beq.n	8003b74 <DMA_Init+0x3b8>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a66      	ldr	r2, [pc, #408]	@ (8003c88 <DMA_Init+0x4cc>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d040      	beq.n	8003b74 <DMA_Init+0x3b8>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a65      	ldr	r2, [pc, #404]	@ (8003c8c <DMA_Init+0x4d0>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d03b      	beq.n	8003b74 <DMA_Init+0x3b8>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a63      	ldr	r2, [pc, #396]	@ (8003c90 <DMA_Init+0x4d4>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d036      	beq.n	8003b74 <DMA_Init+0x3b8>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a62      	ldr	r2, [pc, #392]	@ (8003c94 <DMA_Init+0x4d8>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d031      	beq.n	8003b74 <DMA_Init+0x3b8>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a60      	ldr	r2, [pc, #384]	@ (8003c98 <DMA_Init+0x4dc>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d02c      	beq.n	8003b74 <DMA_Init+0x3b8>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a5f      	ldr	r2, [pc, #380]	@ (8003c9c <DMA_Init+0x4e0>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d027      	beq.n	8003b74 <DMA_Init+0x3b8>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a5d      	ldr	r2, [pc, #372]	@ (8003ca0 <DMA_Init+0x4e4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d022      	beq.n	8003b74 <DMA_Init+0x3b8>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a5c      	ldr	r2, [pc, #368]	@ (8003ca4 <DMA_Init+0x4e8>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d01d      	beq.n	8003b74 <DMA_Init+0x3b8>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a5a      	ldr	r2, [pc, #360]	@ (8003ca8 <DMA_Init+0x4ec>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d018      	beq.n	8003b74 <DMA_Init+0x3b8>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a59      	ldr	r2, [pc, #356]	@ (8003cac <DMA_Init+0x4f0>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d013      	beq.n	8003b74 <DMA_Init+0x3b8>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a57      	ldr	r2, [pc, #348]	@ (8003cb0 <DMA_Init+0x4f4>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d00e      	beq.n	8003b74 <DMA_Init+0x3b8>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a56      	ldr	r2, [pc, #344]	@ (8003cb4 <DMA_Init+0x4f8>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d009      	beq.n	8003b74 <DMA_Init+0x3b8>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a54      	ldr	r2, [pc, #336]	@ (8003cb8 <DMA_Init+0x4fc>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d004      	beq.n	8003b74 <DMA_Init+0x3b8>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a53      	ldr	r2, [pc, #332]	@ (8003cbc <DMA_Init+0x500>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d101      	bne.n	8003b78 <DMA_Init+0x3bc>
 8003b74:	2301      	movs	r3, #1
 8003b76:	e000      	b.n	8003b7a <DMA_Init+0x3be>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00d      	beq.n	8003b9a <DMA_Init+0x3de>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b84:	60fb      	str	r3, [r7, #12]
 8003b86:	e008      	b.n	8003b9a <DMA_Init+0x3de>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b90:	d103      	bne.n	8003b9a <DMA_Init+0x3de>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b98:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Set DMA channel operation mode */
  tmpreg |= hdma->Init.Mode;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003baa:	4b45      	ldr	r3, [pc, #276]	@ (8003cc0 <DMA_Init+0x504>)
 8003bac:	4013      	ands	r3, r2
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6812      	ldr	r2, [r2, #0]
 8003bb2:	68f9      	ldr	r1, [r7, #12]
 8003bb4:	430b      	orrs	r3, r1
 8003bb6:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a2a      	ldr	r2, [pc, #168]	@ (8003c70 <DMA_Init+0x4b4>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d022      	beq.n	8003c10 <DMA_Init+0x454>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a29      	ldr	r2, [pc, #164]	@ (8003c74 <DMA_Init+0x4b8>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d01d      	beq.n	8003c10 <DMA_Init+0x454>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a27      	ldr	r2, [pc, #156]	@ (8003c78 <DMA_Init+0x4bc>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d018      	beq.n	8003c10 <DMA_Init+0x454>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a26      	ldr	r2, [pc, #152]	@ (8003c7c <DMA_Init+0x4c0>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d013      	beq.n	8003c10 <DMA_Init+0x454>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a30      	ldr	r2, [pc, #192]	@ (8003cb0 <DMA_Init+0x4f4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d00e      	beq.n	8003c10 <DMA_Init+0x454>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a2f      	ldr	r2, [pc, #188]	@ (8003cb4 <DMA_Init+0x4f8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d009      	beq.n	8003c10 <DMA_Init+0x454>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a2d      	ldr	r2, [pc, #180]	@ (8003cb8 <DMA_Init+0x4fc>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d004      	beq.n	8003c10 <DMA_Init+0x454>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a2c      	ldr	r2, [pc, #176]	@ (8003cbc <DMA_Init+0x500>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d101      	bne.n	8003c14 <DMA_Init+0x458>
 8003c10:	2301      	movs	r3, #1
 8003c12:	e000      	b.n	8003c16 <DMA_Init+0x45a>
 8003c14:	2300      	movs	r3, #0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d007      	beq.n	8003c2a <DMA_Init+0x46e>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2200      	movs	r2, #0
 8003c28:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003c32:	bf00      	nop
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	40020050 	.word	0x40020050
 8003c44:	50020050 	.word	0x50020050
 8003c48:	400200d0 	.word	0x400200d0
 8003c4c:	500200d0 	.word	0x500200d0
 8003c50:	40020150 	.word	0x40020150
 8003c54:	50020150 	.word	0x50020150
 8003c58:	400201d0 	.word	0x400201d0
 8003c5c:	500201d0 	.word	0x500201d0
 8003c60:	40020250 	.word	0x40020250
 8003c64:	50020250 	.word	0x50020250
 8003c68:	400202d0 	.word	0x400202d0
 8003c6c:	500202d0 	.word	0x500202d0
 8003c70:	40020350 	.word	0x40020350
 8003c74:	50020350 	.word	0x50020350
 8003c78:	400203d0 	.word	0x400203d0
 8003c7c:	500203d0 	.word	0x500203d0
 8003c80:	40021050 	.word	0x40021050
 8003c84:	50021050 	.word	0x50021050
 8003c88:	400210d0 	.word	0x400210d0
 8003c8c:	500210d0 	.word	0x500210d0
 8003c90:	40021150 	.word	0x40021150
 8003c94:	50021150 	.word	0x50021150
 8003c98:	400211d0 	.word	0x400211d0
 8003c9c:	500211d0 	.word	0x500211d0
 8003ca0:	40021250 	.word	0x40021250
 8003ca4:	50021250 	.word	0x50021250
 8003ca8:	400212d0 	.word	0x400212d0
 8003cac:	500212d0 	.word	0x500212d0
 8003cb0:	40021350 	.word	0x40021350
 8003cb4:	50021350 	.word	0x50021350
 8003cb8:	400213d0 	.word	0x400213d0
 8003cbc:	500213d0 	.word	0x500213d0
 8003cc0:	3cc02100 	.word	0x3cc02100

08003cc4 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_DMAEx_List_Start_IT+0x16>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e082      	b.n	8003de4 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003ce4:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cf0:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8003cf2:	7dfb      	ldrb	r3, [r7, #23]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d005      	beq.n	8003d04 <HAL_DMAEx_List_Start_IT+0x40>
 8003cf8:	7dfb      	ldrb	r3, [r7, #23]
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d16a      	bne.n	8003dd4 <HAL_DMAEx_List_Start_IT+0x110>
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d067      	beq.n	8003dd4 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d157      	bne.n	8003dc0 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d101      	bne.n	8003d1e <HAL_DMAEx_List_Start_IT+0x5a>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	e062      	b.n	8003de4 <HAL_DMAEx_List_Start_IT+0x120>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2202      	movs	r2, #2
 8003d2a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d32:	2202      	movs	r2, #2
 8003d34:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d40:	2200      	movs	r2, #0
 8003d42:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695a      	ldr	r2, [r3, #20]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8003d52:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d007      	beq.n	8003d6c <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695a      	ldr	r2, [r3, #20]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d6a:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d007      	beq.n	8003d84 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695a      	ldr	r2, [r3, #20]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d82:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f107 010c 	add.w	r1, r7, #12
 8003d8e:	2200      	movs	r2, #0
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 f82b 	bl	8003dec <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	0c0b      	lsrs	r3, r1, #16
 8003da4:	041b      	lsls	r3, r3, #16
 8003da6:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	461a      	mov	r2, r3
 8003db0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003db4:	4013      	ands	r3, r2
 8003db6:	68f9      	ldr	r1, [r7, #12]
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6812      	ldr	r2, [r2, #0]
 8003dbc:	430b      	orrs	r3, r1
 8003dbe:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695a      	ldr	r2, [r3, #20]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0201 	orr.w	r2, r2, #1
 8003dce:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	e007      	b.n	8003de4 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2240      	movs	r2, #64	@ 0x40
 8003dd8:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3718      	adds	r7, #24
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00c      	beq.n	8003e1e <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8003e44 <DMA_List_GetCLLRNodeInfo+0x58>)
 8003e0e:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00f      	beq.n	8003e36 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2207      	movs	r2, #7
 8003e1a:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8003e1c:	e00b      	b.n	8003e36 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d002      	beq.n	8003e2a <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	4a08      	ldr	r2, [pc, #32]	@ (8003e48 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8003e28:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d002      	beq.n	8003e36 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2205      	movs	r2, #5
 8003e34:	601a      	str	r2, [r3, #0]
}
 8003e36:	bf00      	nop
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	fe010000 	.word	0xfe010000
 8003e48:	f8010000 	.word	0xf8010000

08003e4c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e147      	b.n	80040ee <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d106      	bne.n	8003e78 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7fd f84c 	bl	8000f10 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	699a      	ldr	r2, [r3, #24]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0210 	bic.w	r2, r2, #16
 8003e86:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e88:	f7fe fee4 	bl	8002c54 <HAL_GetTick>
 8003e8c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003e8e:	e012      	b.n	8003eb6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003e90:	f7fe fee0 	bl	8002c54 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b0a      	cmp	r3, #10
 8003e9c:	d90b      	bls.n	8003eb6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ea2:	f043 0201 	orr.w	r2, r3, #1
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2203      	movs	r2, #3
 8003eae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e11b      	b.n	80040ee <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	f003 0308 	and.w	r3, r3, #8
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d0e5      	beq.n	8003e90 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	699a      	ldr	r2, [r3, #24]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0201 	orr.w	r2, r2, #1
 8003ed2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ed4:	f7fe febe 	bl	8002c54 <HAL_GetTick>
 8003ed8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003eda:	e012      	b.n	8003f02 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003edc:	f7fe feba 	bl	8002c54 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b0a      	cmp	r3, #10
 8003ee8:	d90b      	bls.n	8003f02 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eee:	f043 0201 	orr.w	r2, r3, #1
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2203      	movs	r2, #3
 8003efa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e0f5      	b.n	80040ee <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0e5      	beq.n	8003edc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	699a      	ldr	r2, [r3, #24]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f042 0202 	orr.w	r2, r2, #2
 8003f1e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a74      	ldr	r2, [pc, #464]	@ (80040f8 <HAL_FDCAN_Init+0x2ac>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d103      	bne.n	8003f32 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003f2a:	4a74      	ldr	r2, [pc, #464]	@ (80040fc <HAL_FDCAN_Init+0x2b0>)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	7c1b      	ldrb	r3, [r3, #16]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d108      	bne.n	8003f4c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	699a      	ldr	r2, [r3, #24]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f48:	619a      	str	r2, [r3, #24]
 8003f4a:	e007      	b.n	8003f5c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699a      	ldr	r2, [r3, #24]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f5a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	7c5b      	ldrb	r3, [r3, #17]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d108      	bne.n	8003f76 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	699a      	ldr	r2, [r3, #24]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f72:	619a      	str	r2, [r3, #24]
 8003f74:	e007      	b.n	8003f86 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	699a      	ldr	r2, [r3, #24]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003f84:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	7c9b      	ldrb	r3, [r3, #18]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d108      	bne.n	8003fa0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	699a      	ldr	r2, [r3, #24]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f9c:	619a      	str	r2, [r3, #24]
 8003f9e:	e007      	b.n	8003fb0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	699a      	ldr	r2, [r3, #24]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003fae:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	699a      	ldr	r2, [r3, #24]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003fd4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	691a      	ldr	r2, [r3, #16]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 0210 	bic.w	r2, r2, #16
 8003fe4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d108      	bne.n	8004000 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	699a      	ldr	r2, [r3, #24]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f042 0204 	orr.w	r2, r2, #4
 8003ffc:	619a      	str	r2, [r3, #24]
 8003ffe:	e02c      	b.n	800405a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d028      	beq.n	800405a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	2b02      	cmp	r3, #2
 800400e:	d01c      	beq.n	800404a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699a      	ldr	r2, [r3, #24]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800401e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	691a      	ldr	r2, [r3, #16]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0210 	orr.w	r2, r2, #16
 800402e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	2b03      	cmp	r3, #3
 8004036:	d110      	bne.n	800405a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	699a      	ldr	r2, [r3, #24]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 0220 	orr.w	r2, r2, #32
 8004046:	619a      	str	r2, [r3, #24]
 8004048:	e007      	b.n	800405a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	699a      	ldr	r2, [r3, #24]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f042 0220 	orr.w	r2, r2, #32
 8004058:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	3b01      	subs	r3, #1
 8004060:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	3b01      	subs	r3, #1
 8004068:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800406a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004072:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	3b01      	subs	r3, #1
 800407c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004082:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004084:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800408e:	d115      	bne.n	80040bc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004094:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409a:	3b01      	subs	r3, #1
 800409c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800409e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a4:	3b01      	subs	r3, #1
 80040a6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80040a8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b0:	3b01      	subs	r3, #1
 80040b2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80040b8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80040ba:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 fa74 	bl	80045c0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	4000a400 	.word	0x4000a400
 80040fc:	4000a500 	.word	0x4000a500

08004100 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8004100:	b480      	push	{r7}
 8004102:	b087      	sub	sp, #28
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004110:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004112:	7dfb      	ldrb	r3, [r7, #23]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d002      	beq.n	800411e <HAL_FDCAN_ConfigFilter+0x1e>
 8004118:	7dfb      	ldrb	r3, [r7, #23]
 800411a:	2b02      	cmp	r3, #2
 800411c:	d13d      	bne.n	800419a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d119      	bne.n	800415a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004132:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800413a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004140:	4313      	orrs	r3, r2
 8004142:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	e01d      	b.n	8004196 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	075a      	lsls	r2, r3, #29
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	4313      	orrs	r3, r2
 8004166:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	079a      	lsls	r2, r3, #30
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	4313      	orrs	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	4413      	add	r3, r2
 8004182:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	3304      	adds	r3, #4
 800418e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8004196:	2300      	movs	r3, #0
 8004198:	e006      	b.n	80041a8 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800419e:	f043 0202 	orr.w	r2, r3, #2
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
  }
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	371c      	adds	r7, #28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d110      	bne.n	80041ea <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	699a      	ldr	r2, [r3, #24]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0201 	bic.w	r2, r2, #1
 80041de:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	e006      	b.n	80041f8 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ee:	f043 0204 	orr.w	r2, r3, #4
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
  }
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d12c      	bne.n	8004276 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004224:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d007      	beq.n	800423c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004230:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e023      	b.n	8004284 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004244:	0c1b      	lsrs	r3, r3, #16
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	68b9      	ldr	r1, [r7, #8]
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 fa16 	bl	8004684 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2101      	movs	r1, #1
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	fa01 f202 	lsl.w	r2, r1, r2
 8004264:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004268:	2201      	movs	r2, #1
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	409a      	lsls	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	e006      	b.n	8004284 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800427a:	f043 0208 	orr.w	r2, r3, #8
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
  }
}
 8004284:	4618      	mov	r0, r3
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b08c      	sub	sp, #48	@ 0x30
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800429a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800429e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042a8:	4013      	ands	r3, r2
 80042aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042c0:	4013      	ands	r3, r2
 80042c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042ce:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042d8:	4013      	ands	r3, r2
 80042da:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042e2:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80042e6:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ee:	6a3a      	ldr	r2, [r7, #32]
 80042f0:	4013      	ands	r3, r2
 80042f2:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042fa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80042fe:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004306:	69fa      	ldr	r2, [r7, #28]
 8004308:	4013      	ands	r3, r2
 800430a:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004312:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800431a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00b      	beq.n	800433e <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800432c:	2b00      	cmp	r3, #0
 800432e:	d006      	beq.n	800433e <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2240      	movs	r2, #64	@ 0x40
 8004336:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f921 	bl	8004580 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004344:	2b00      	cmp	r3, #0
 8004346:	d019      	beq.n	800437c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800434e:	2b00      	cmp	r3, #0
 8004350:	d014      	beq.n	800437c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800435a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	4013      	ands	r3, r2
 8004368:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004372:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004374:	6939      	ldr	r1, [r7, #16]
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f8e3 	bl	8004542 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800437c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800437e:	2b00      	cmp	r3, #0
 8004380:	d007      	beq.n	8004392 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004388:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800438a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f8a2 	bl	80044d6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004394:	2b00      	cmp	r3, #0
 8004396:	d007      	beq.n	80043a8 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800439e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80043a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f8a2 	bl	80044ec <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80043a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d007      	beq.n	80043be <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043b4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80043b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 f8a2 	bl	8004502 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00c      	beq.n	80043e2 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d007      	beq.n	80043e2 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043da:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f89b 	bl	8004518 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d018      	beq.n	800441e <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d013      	beq.n	800441e <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80043fe:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	4013      	ands	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2280      	movs	r2, #128	@ 0x80
 8004414:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004416:	68f9      	ldr	r1, [r7, #12]
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 f887 	bl	800452c <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00c      	beq.n	8004442 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d007      	beq.n	8004442 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800443a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f88b 	bl	8004558 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00c      	beq.n	8004466 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d007      	beq.n	8004466 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800445e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 f883 	bl	800456c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00f      	beq.n	8004490 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00a      	beq.n	8004490 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004482:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004488:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d007      	beq.n	80044a6 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	69fa      	ldr	r2, [r7, #28]
 800449c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800449e:	69f9      	ldr	r1, [r7, #28]
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f881 	bl	80045a8 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80044a6:	6a3b      	ldr	r3, [r7, #32]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d009      	beq.n	80044c0 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6a3a      	ldr	r2, [r7, #32]
 80044b2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	431a      	orrs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d002      	beq.n	80044ce <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f863 	bl	8004594 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80044ce:	bf00      	nop
 80044d0:	3730      	adds	r7, #48	@ 0x30
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
 80044de:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004502:	b480      	push	{r7}
 8004504:	b083      	sub	sp, #12
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
 800450a:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
 800454a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80045b2:	bf00      	nop
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
	...

080045c0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80045c8:	4b2c      	ldr	r3, [pc, #176]	@ (800467c <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 80045ca:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a2b      	ldr	r2, [pc, #172]	@ (8004680 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d103      	bne.n	80045de <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80045dc:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045ec:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045f4:	041a      	lsls	r2, r3, #16
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004612:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800461a:	061a      	lsls	r2, r3, #24
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	60fb      	str	r3, [r7, #12]
 8004652:	e005      	b.n	8004660 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	3304      	adds	r3, #4
 800465e:	60fb      	str	r3, [r7, #12]
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	429a      	cmp	r2, r3
 800466a:	d3f3      	bcc.n	8004654 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 800466c:	bf00      	nop
 800466e:	bf00      	nop
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	4000ac00 	.word	0x4000ac00
 8004680:	4000a800 	.word	0x4000a800

08004684 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8004684:	b480      	push	{r7}
 8004686:	b089      	sub	sp, #36	@ 0x24
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
 8004690:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10a      	bne.n	80046b0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80046a2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80046aa:	4313      	orrs	r3, r2
 80046ac:	61fb      	str	r3, [r7, #28]
 80046ae:	e00a      	b.n	80046c6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80046b8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80046be:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80046c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80046c4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80046d0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80046d6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80046dc:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80046e4:	4313      	orrs	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	4613      	mov	r3, r2
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	4413      	add	r3, r2
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	440b      	add	r3, r1
 80046f8:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	69fa      	ldr	r2, [r7, #28]
 80046fe:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	3304      	adds	r3, #4
 8004704:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	3304      	adds	r3, #4
 8004710:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004712:	2300      	movs	r3, #0
 8004714:	617b      	str	r3, [r7, #20]
 8004716:	e020      	b.n	800475a <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	3303      	adds	r3, #3
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	4413      	add	r3, r2
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	3302      	adds	r3, #2
 8004728:	6879      	ldr	r1, [r7, #4]
 800472a:	440b      	add	r3, r1
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004730:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	3301      	adds	r3, #1
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	440b      	add	r3, r1
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800473e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004740:	6879      	ldr	r1, [r7, #4]
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	440a      	add	r2, r1
 8004746:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004748:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	3304      	adds	r3, #4
 8004752:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	3304      	adds	r3, #4
 8004758:	617b      	str	r3, [r7, #20]
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	4a06      	ldr	r2, [pc, #24]	@ (8004778 <FDCAN_CopyMessageToRAM+0xf4>)
 8004760:	5cd3      	ldrb	r3, [r2, r3]
 8004762:	461a      	mov	r2, r3
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	4293      	cmp	r3, r2
 8004768:	d3d6      	bcc.n	8004718 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800476a:	bf00      	nop
 800476c:	bf00      	nop
 800476e:	3724      	adds	r7, #36	@ 0x24
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	0800dab8 	.word	0x0800dab8

0800477c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800477c:	b480      	push	{r7}
 800477e:	b087      	sub	sp, #28
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8004786:	2300      	movs	r3, #0
 8004788:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800478a:	e136      	b.n	80049fa <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	2101      	movs	r1, #1
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	fa01 f303 	lsl.w	r3, r1, r3
 8004798:	4013      	ands	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 8128 	beq.w	80049f4 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d003      	beq.n	80047b4 <HAL_GPIO_Init+0x38>
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	2b12      	cmp	r3, #18
 80047b2:	d125      	bne.n	8004800 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	08da      	lsrs	r2, r3, #3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3208      	adds	r2, #8
 80047bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047c0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	220f      	movs	r2, #15
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	43db      	mvns	r3, r3
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	4013      	ands	r3, r2
 80047d6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	f003 020f 	and.w	r2, r3, #15
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	08da      	lsrs	r2, r3, #3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	3208      	adds	r2, #8
 80047fa:	6979      	ldr	r1, [r7, #20]
 80047fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	2203      	movs	r2, #3
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	43db      	mvns	r3, r3
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	4013      	ands	r3, r2
 8004816:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f003 0203 	and.w	r2, r3, #3
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	4313      	orrs	r3, r2
 800482c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d00b      	beq.n	8004854 <HAL_GPIO_Init+0xd8>
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	2b02      	cmp	r3, #2
 8004842:	d007      	beq.n	8004854 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004848:	2b11      	cmp	r3, #17
 800484a:	d003      	beq.n	8004854 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2b12      	cmp	r3, #18
 8004852:	d130      	bne.n	80048b6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	2203      	movs	r2, #3
 8004860:	fa02 f303 	lsl.w	r3, r2, r3
 8004864:	43db      	mvns	r3, r3
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	4013      	ands	r3, r2
 800486a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	68da      	ldr	r2, [r3, #12]
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	4313      	orrs	r3, r2
 800487c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800488a:	2201      	movs	r2, #1
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	43db      	mvns	r3, r3
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	4013      	ands	r3, r2
 8004898:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	091b      	lsrs	r3, r3, #4
 80048a0:	f003 0201 	and.w	r2, r3, #1
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	fa02 f303 	lsl.w	r3, r2, r3
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2b03      	cmp	r3, #3
 80048bc:	d017      	beq.n	80048ee <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	2203      	movs	r2, #3
 80048ca:	fa02 f303 	lsl.w	r3, r2, r3
 80048ce:	43db      	mvns	r3, r3
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	4013      	ands	r3, r2
 80048d4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	689a      	ldr	r2, [r3, #8]
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	fa02 f303 	lsl.w	r3, r2, r3
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d07c      	beq.n	80049f4 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80048fa:	4a47      	ldr	r2, [pc, #284]	@ (8004a18 <HAL_GPIO_Init+0x29c>)
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	089b      	lsrs	r3, r3, #2
 8004900:	3318      	adds	r3, #24
 8004902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004906:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	f003 0303 	and.w	r3, r3, #3
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	220f      	movs	r2, #15
 8004912:	fa02 f303 	lsl.w	r3, r2, r3
 8004916:	43db      	mvns	r3, r3
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	4013      	ands	r3, r2
 800491c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	0a9a      	lsrs	r2, r3, #10
 8004922:	4b3e      	ldr	r3, [pc, #248]	@ (8004a1c <HAL_GPIO_Init+0x2a0>)
 8004924:	4013      	ands	r3, r2
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	f002 0203 	and.w	r2, r2, #3
 800492c:	00d2      	lsls	r2, r2, #3
 800492e:	4093      	lsls	r3, r2
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	4313      	orrs	r3, r2
 8004934:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004936:	4938      	ldr	r1, [pc, #224]	@ (8004a18 <HAL_GPIO_Init+0x29c>)
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	089b      	lsrs	r3, r3, #2
 800493c:	3318      	adds	r3, #24
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004944:	4b34      	ldr	r3, [pc, #208]	@ (8004a18 <HAL_GPIO_Init+0x29c>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	43db      	mvns	r3, r3
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	4013      	ands	r3, r2
 8004952:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4313      	orrs	r3, r2
 8004966:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8004968:	4a2b      	ldr	r2, [pc, #172]	@ (8004a18 <HAL_GPIO_Init+0x29c>)
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800496e:	4b2a      	ldr	r3, [pc, #168]	@ (8004a18 <HAL_GPIO_Init+0x29c>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	43db      	mvns	r3, r3
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	4013      	ands	r3, r2
 800497c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4313      	orrs	r3, r2
 8004990:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8004992:	4a21      	ldr	r2, [pc, #132]	@ (8004a18 <HAL_GPIO_Init+0x29c>)
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004998:	4b1f      	ldr	r3, [pc, #124]	@ (8004a18 <HAL_GPIO_Init+0x29c>)
 800499a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800499e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	43db      	mvns	r3, r3
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	4013      	ands	r3, r2
 80049a8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80049be:	4a16      	ldr	r2, [pc, #88]	@ (8004a18 <HAL_GPIO_Init+0x29c>)
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80049c6:	4b14      	ldr	r3, [pc, #80]	@ (8004a18 <HAL_GPIO_Init+0x29c>)
 80049c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049cc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	43db      	mvns	r3, r3
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	4013      	ands	r3, r2
 80049d6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80049ec:	4a0a      	ldr	r2, [pc, #40]	@ (8004a18 <HAL_GPIO_Init+0x29c>)
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	3301      	adds	r3, #1
 80049f8:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	fa22 f303 	lsr.w	r3, r2, r3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f47f aec1 	bne.w	800478c <HAL_GPIO_Init+0x10>
  }
}
 8004a0a:	bf00      	nop
 8004a0c:	bf00      	nop
 8004a0e:	371c      	adds	r7, #28
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	44022000 	.word	0x44022000
 8004a1c:	002f7f7f 	.word	0x002f7f7f

08004a20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	460b      	mov	r3, r1
 8004a2a:	807b      	strh	r3, [r7, #2]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a30:	787b      	ldrb	r3, [r7, #1]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d003      	beq.n	8004a3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a36:	887a      	ldrh	r2, [r7, #2]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a3c:	e002      	b.n	8004a44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a3e:	887a      	ldrh	r2, [r7, #2]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a62:	887a      	ldrh	r2, [r7, #2]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4013      	ands	r3, r2
 8004a68:	041a      	lsls	r2, r3, #16
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	43d9      	mvns	r1, r3
 8004a6e:	887b      	ldrh	r3, [r7, #2]
 8004a70:	400b      	ands	r3, r1
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	619a      	str	r2, [r3, #24]
}
 8004a78:	bf00      	nop
 8004a7a:	3714      	adds	r7, #20
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e08d      	b.n	8004bb2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7fc fc52 	bl	8001354 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2224      	movs	r2, #36	@ 0x24
 8004ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0201 	bic.w	r2, r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004ad4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ae4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d107      	bne.n	8004afe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689a      	ldr	r2, [r3, #8]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004afa:	609a      	str	r2, [r3, #8]
 8004afc:	e006      	b.n	8004b0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004b0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d108      	bne.n	8004b26 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b22:	605a      	str	r2, [r3, #4]
 8004b24:	e007      	b.n	8004b36 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6812      	ldr	r2, [r2, #0]
 8004b40:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004b44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68da      	ldr	r2, [r3, #12]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691a      	ldr	r2, [r3, #16]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	69d9      	ldr	r1, [r3, #28]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a1a      	ldr	r2, [r3, #32]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0201 	orr.w	r2, r2, #1
 8004b92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
	...

08004bbc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b088      	sub	sp, #32
 8004bc0:	af02      	add	r7, sp, #8
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	607a      	str	r2, [r7, #4]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	460b      	mov	r3, r1
 8004bca:	817b      	strh	r3, [r7, #10]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b20      	cmp	r3, #32
 8004bda:	f040 80da 	bne.w	8004d92 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d101      	bne.n	8004bec <HAL_I2C_Master_Transmit+0x30>
 8004be8:	2302      	movs	r3, #2
 8004bea:	e0d3      	b.n	8004d94 <HAL_I2C_Master_Transmit+0x1d8>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004bf4:	f7fe f82e 	bl	8002c54 <HAL_GetTick>
 8004bf8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	2319      	movs	r3, #25
 8004c00:	2201      	movs	r2, #1
 8004c02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 f8f0 	bl	8004dec <I2C_WaitOnFlagUntilTimeout>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e0be      	b.n	8004d94 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2221      	movs	r2, #33	@ 0x21
 8004c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2210      	movs	r2, #16
 8004c22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	893a      	ldrh	r2, [r7, #8]
 8004c36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	2bff      	cmp	r3, #255	@ 0xff
 8004c46:	d90e      	bls.n	8004c66 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	22ff      	movs	r2, #255	@ 0xff
 8004c4c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c52:	b2da      	uxtb	r2, r3
 8004c54:	8979      	ldrh	r1, [r7, #10]
 8004c56:	4b51      	ldr	r3, [pc, #324]	@ (8004d9c <HAL_I2C_Master_Transmit+0x1e0>)
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 fa88 	bl	8005174 <I2C_TransferConfig>
 8004c64:	e06c      	b.n	8004d40 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	8979      	ldrh	r1, [r7, #10]
 8004c78:	4b48      	ldr	r3, [pc, #288]	@ (8004d9c <HAL_I2C_Master_Transmit+0x1e0>)
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 fa77 	bl	8005174 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004c86:	e05b      	b.n	8004d40 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	6a39      	ldr	r1, [r7, #32]
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 f906 	bl	8004e9e <I2C_WaitOnTXISFlagUntilTimeout>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e07b      	b.n	8004d94 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca0:	781a      	ldrb	r2, [r3, #0]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cac:	1c5a      	adds	r2, r3, #1
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d034      	beq.n	8004d40 <HAL_I2C_Master_Transmit+0x184>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d130      	bne.n	8004d40 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	2180      	movs	r1, #128	@ 0x80
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 f87f 	bl	8004dec <I2C_WaitOnFlagUntilTimeout>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e04d      	b.n	8004d94 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	2bff      	cmp	r3, #255	@ 0xff
 8004d00:	d90e      	bls.n	8004d20 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	22ff      	movs	r2, #255	@ 0xff
 8004d06:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d0c:	b2da      	uxtb	r2, r3
 8004d0e:	8979      	ldrh	r1, [r7, #10]
 8004d10:	2300      	movs	r3, #0
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f000 fa2b 	bl	8005174 <I2C_TransferConfig>
 8004d1e:	e00f      	b.n	8004d40 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	8979      	ldrh	r1, [r7, #10]
 8004d32:	2300      	movs	r3, #0
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 fa1a 	bl	8005174 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d19e      	bne.n	8004c88 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	6a39      	ldr	r1, [r7, #32]
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f000 f8ec 	bl	8004f2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e01a      	b.n	8004d94 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2220      	movs	r2, #32
 8004d64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6859      	ldr	r1, [r3, #4]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	4b0b      	ldr	r3, [pc, #44]	@ (8004da0 <HAL_I2C_Master_Transmit+0x1e4>)
 8004d72:	400b      	ands	r3, r1
 8004d74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	e000      	b.n	8004d94 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004d92:	2302      	movs	r3, #2
  }
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3718      	adds	r7, #24
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	80002000 	.word	0x80002000
 8004da0:	fe00e800 	.word	0xfe00e800

08004da4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d103      	bne.n	8004dc2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d007      	beq.n	8004de0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	699a      	ldr	r2, [r3, #24]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f042 0201 	orr.w	r2, r2, #1
 8004dde:	619a      	str	r2, [r3, #24]
  }
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	603b      	str	r3, [r7, #0]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dfc:	e03b      	b.n	8004e76 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	6839      	ldr	r1, [r7, #0]
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 f8d6 	bl	8004fb4 <I2C_IsErrorOccurred>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e041      	b.n	8004e96 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e18:	d02d      	beq.n	8004e76 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e1a:	f7fd ff1b 	bl	8002c54 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d302      	bcc.n	8004e30 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d122      	bne.n	8004e76 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	699a      	ldr	r2, [r3, #24]
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	4013      	ands	r3, r2
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	bf0c      	ite	eq
 8004e40:	2301      	moveq	r3, #1
 8004e42:	2300      	movne	r3, #0
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	461a      	mov	r2, r3
 8004e48:	79fb      	ldrb	r3, [r7, #7]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d113      	bne.n	8004e76 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e52:	f043 0220 	orr.w	r2, r3, #32
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e00f      	b.n	8004e96 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	699a      	ldr	r2, [r3, #24]
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	bf0c      	ite	eq
 8004e86:	2301      	moveq	r3, #1
 8004e88:	2300      	movne	r3, #0
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	79fb      	ldrb	r3, [r7, #7]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d0b4      	beq.n	8004dfe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b084      	sub	sp, #16
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	60f8      	str	r0, [r7, #12]
 8004ea6:	60b9      	str	r1, [r7, #8]
 8004ea8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004eaa:	e033      	b.n	8004f14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	68b9      	ldr	r1, [r7, #8]
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f000 f87f 	bl	8004fb4 <I2C_IsErrorOccurred>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e031      	b.n	8004f24 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec6:	d025      	beq.n	8004f14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec8:	f7fd fec4 	bl	8002c54 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d302      	bcc.n	8004ede <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d11a      	bne.n	8004f14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d013      	beq.n	8004f14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ef0:	f043 0220 	orr.w	r2, r3, #32
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2220      	movs	r2, #32
 8004efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e007      	b.n	8004f24 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d1c4      	bne.n	8004eac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f38:	e02f      	b.n	8004f9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	68b9      	ldr	r1, [r7, #8]
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f000 f838 	bl	8004fb4 <I2C_IsErrorOccurred>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e02d      	b.n	8004faa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f4e:	f7fd fe81 	bl	8002c54 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d302      	bcc.n	8004f64 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d11a      	bne.n	8004f9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b20      	cmp	r3, #32
 8004f70:	d013      	beq.n	8004f9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f76:	f043 0220 	orr.w	r2, r3, #32
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2220      	movs	r2, #32
 8004f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e007      	b.n	8004faa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	f003 0320 	and.w	r3, r3, #32
 8004fa4:	2b20      	cmp	r3, #32
 8004fa6:	d1c8      	bne.n	8004f3a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
	...

08004fb4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b08a      	sub	sp, #40	@ 0x28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	f003 0310 	and.w	r3, r3, #16
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d068      	beq.n	80050b2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2210      	movs	r2, #16
 8004fe6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004fe8:	e049      	b.n	800507e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff0:	d045      	beq.n	800507e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ff2:	f7fd fe2f 	bl	8002c54 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d302      	bcc.n	8005008 <I2C_IsErrorOccurred+0x54>
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d13a      	bne.n	800507e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005012:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800501a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005026:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800502a:	d121      	bne.n	8005070 <I2C_IsErrorOccurred+0xbc>
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005032:	d01d      	beq.n	8005070 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005034:	7cfb      	ldrb	r3, [r7, #19]
 8005036:	2b20      	cmp	r3, #32
 8005038:	d01a      	beq.n	8005070 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005048:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800504a:	f7fd fe03 	bl	8002c54 <HAL_GetTick>
 800504e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005050:	e00e      	b.n	8005070 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005052:	f7fd fdff 	bl	8002c54 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b19      	cmp	r3, #25
 800505e:	d907      	bls.n	8005070 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005060:	6a3b      	ldr	r3, [r7, #32]
 8005062:	f043 0320 	orr.w	r3, r3, #32
 8005066:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800506e:	e006      	b.n	800507e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	f003 0320 	and.w	r3, r3, #32
 800507a:	2b20      	cmp	r3, #32
 800507c:	d1e9      	bne.n	8005052 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	f003 0320 	and.w	r3, r3, #32
 8005088:	2b20      	cmp	r3, #32
 800508a:	d003      	beq.n	8005094 <I2C_IsErrorOccurred+0xe0>
 800508c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005090:	2b00      	cmp	r3, #0
 8005092:	d0aa      	beq.n	8004fea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005094:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005098:	2b00      	cmp	r3, #0
 800509a:	d103      	bne.n	80050a4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2220      	movs	r2, #32
 80050a2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	f043 0304 	orr.w	r3, r3, #4
 80050aa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00b      	beq.n	80050dc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	f043 0301 	orr.w	r3, r3, #1
 80050ca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80050d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00b      	beq.n	80050fe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	f043 0308 	orr.w	r3, r3, #8
 80050ec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80050f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00b      	beq.n	8005120 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005108:	6a3b      	ldr	r3, [r7, #32]
 800510a:	f043 0302 	orr.w	r3, r3, #2
 800510e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005118:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005120:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005124:	2b00      	cmp	r3, #0
 8005126:	d01c      	beq.n	8005162 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f7ff fe3b 	bl	8004da4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6859      	ldr	r1, [r3, #4]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	4b0d      	ldr	r3, [pc, #52]	@ (8005170 <I2C_IsErrorOccurred+0x1bc>)
 800513a:	400b      	ands	r3, r1
 800513c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	431a      	orrs	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2220      	movs	r2, #32
 800514e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005162:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005166:	4618      	mov	r0, r3
 8005168:	3728      	adds	r7, #40	@ 0x28
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	fe00e800 	.word	0xfe00e800

08005174 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005174:	b480      	push	{r7}
 8005176:	b087      	sub	sp, #28
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	607b      	str	r3, [r7, #4]
 800517e:	460b      	mov	r3, r1
 8005180:	817b      	strh	r3, [r7, #10]
 8005182:	4613      	mov	r3, r2
 8005184:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005186:	897b      	ldrh	r3, [r7, #10]
 8005188:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800518c:	7a7b      	ldrb	r3, [r7, #9]
 800518e:	041b      	lsls	r3, r3, #16
 8005190:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005194:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	4313      	orrs	r3, r2
 800519e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80051a2:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	0d5b      	lsrs	r3, r3, #21
 80051ae:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80051b2:	4b08      	ldr	r3, [pc, #32]	@ (80051d4 <I2C_TransferConfig+0x60>)
 80051b4:	430b      	orrs	r3, r1
 80051b6:	43db      	mvns	r3, r3
 80051b8:	ea02 0103 	and.w	r1, r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80051c6:	bf00      	nop
 80051c8:	371c      	adds	r7, #28
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	03ff63ff 	.word	0x03ff63ff

080051d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b20      	cmp	r3, #32
 80051ec:	d138      	bne.n	8005260 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d101      	bne.n	80051fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80051f8:	2302      	movs	r3, #2
 80051fa:	e032      	b.n	8005262 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2224      	movs	r2, #36	@ 0x24
 8005208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 0201 	bic.w	r2, r2, #1
 800521a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800522a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6819      	ldr	r1, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	430a      	orrs	r2, r1
 800523a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f042 0201 	orr.w	r2, r2, #1
 800524a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2220      	movs	r2, #32
 8005250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800525c:	2300      	movs	r3, #0
 800525e:	e000      	b.n	8005262 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005260:	2302      	movs	r3, #2
  }
}
 8005262:	4618      	mov	r0, r3
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr

0800526e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800526e:	b480      	push	{r7}
 8005270:	b085      	sub	sp, #20
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
 8005276:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b20      	cmp	r3, #32
 8005282:	d139      	bne.n	80052f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800528a:	2b01      	cmp	r3, #1
 800528c:	d101      	bne.n	8005292 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800528e:	2302      	movs	r3, #2
 8005290:	e033      	b.n	80052fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2224      	movs	r2, #36	@ 0x24
 800529e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 0201 	bic.w	r2, r2, #1
 80052b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80052c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	021b      	lsls	r3, r3, #8
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0201 	orr.w	r2, r2, #1
 80052e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2220      	movs	r2, #32
 80052e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80052f4:	2300      	movs	r3, #0
 80052f6:	e000      	b.n	80052fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80052f8:	2302      	movs	r3, #2
  }
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
	...

08005308 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005310:	2300      	movs	r3, #0
 8005312:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005314:	4b0b      	ldr	r3, [pc, #44]	@ (8005344 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b00      	cmp	r3, #0
 800531e:	d002      	beq.n	8005326 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	73fb      	strb	r3, [r7, #15]
 8005324:	e007      	b.n	8005336 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8005326:	4b07      	ldr	r3, [pc, #28]	@ (8005344 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f023 0204 	bic.w	r2, r3, #4
 800532e:	4905      	ldr	r1, [pc, #20]	@ (8005344 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4313      	orrs	r3, r2
 8005334:	600b      	str	r3, [r1, #0]
  }

  return status;
 8005336:	7bfb      	ldrb	r3, [r7, #15]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	40030400 	.word	0x40030400

08005348 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800534c:	4b05      	ldr	r3, [pc, #20]	@ (8005364 <HAL_ICACHE_Enable+0x1c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a04      	ldr	r2, [pc, #16]	@ (8005364 <HAL_ICACHE_Enable+0x1c>)
 8005352:	f043 0301 	orr.w	r3, r3, #1
 8005356:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	40030400 	.word	0x40030400

08005368 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b088      	sub	sp, #32
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d102      	bne.n	800537c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	f000 bc28 	b.w	8005bcc <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800537c:	4b94      	ldr	r3, [pc, #592]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	f003 0318 	and.w	r3, r3, #24
 8005384:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8005386:	4b92      	ldr	r3, [pc, #584]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 8005388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0310 	and.w	r3, r3, #16
 8005398:	2b00      	cmp	r3, #0
 800539a:	d05b      	beq.n	8005454 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	2b08      	cmp	r3, #8
 80053a0:	d005      	beq.n	80053ae <HAL_RCC_OscConfig+0x46>
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	2b18      	cmp	r3, #24
 80053a6:	d114      	bne.n	80053d2 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d111      	bne.n	80053d2 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d102      	bne.n	80053bc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	f000 bc08 	b.w	8005bcc <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80053bc:	4b84      	ldr	r3, [pc, #528]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a1b      	ldr	r3, [r3, #32]
 80053c8:	041b      	lsls	r3, r3, #16
 80053ca:	4981      	ldr	r1, [pc, #516]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80053d0:	e040      	b.n	8005454 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d023      	beq.n	8005422 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80053da:	4b7d      	ldr	r3, [pc, #500]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a7c      	ldr	r2, [pc, #496]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 80053e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e6:	f7fd fc35 	bl	8002c54 <HAL_GetTick>
 80053ea:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80053ec:	e008      	b.n	8005400 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80053ee:	f7fd fc31 	bl	8002c54 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d901      	bls.n	8005400 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e3e5      	b.n	8005bcc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005400:	4b73      	ldr	r3, [pc, #460]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005408:	2b00      	cmp	r3, #0
 800540a:	d0f0      	beq.n	80053ee <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800540c:	4b70      	ldr	r3, [pc, #448]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	041b      	lsls	r3, r3, #16
 800541a:	496d      	ldr	r1, [pc, #436]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 800541c:	4313      	orrs	r3, r2
 800541e:	618b      	str	r3, [r1, #24]
 8005420:	e018      	b.n	8005454 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005422:	4b6b      	ldr	r3, [pc, #428]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a6a      	ldr	r2, [pc, #424]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 8005428:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800542c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800542e:	f7fd fc11 	bl	8002c54 <HAL_GetTick>
 8005432:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005434:	e008      	b.n	8005448 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8005436:	f7fd fc0d 	bl	8002c54 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	2b02      	cmp	r3, #2
 8005442:	d901      	bls.n	8005448 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e3c1      	b.n	8005bcc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005448:	4b61      	ldr	r3, [pc, #388]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1f0      	bne.n	8005436 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 80a0 	beq.w	80055a2 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	2b10      	cmp	r3, #16
 8005466:	d005      	beq.n	8005474 <HAL_RCC_OscConfig+0x10c>
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	2b18      	cmp	r3, #24
 800546c:	d109      	bne.n	8005482 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	2b03      	cmp	r3, #3
 8005472:	d106      	bne.n	8005482 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	f040 8092 	bne.w	80055a2 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e3a4      	b.n	8005bcc <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800548a:	d106      	bne.n	800549a <HAL_RCC_OscConfig+0x132>
 800548c:	4b50      	ldr	r3, [pc, #320]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a4f      	ldr	r2, [pc, #316]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 8005492:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005496:	6013      	str	r3, [r2, #0]
 8005498:	e058      	b.n	800554c <HAL_RCC_OscConfig+0x1e4>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d112      	bne.n	80054c8 <HAL_RCC_OscConfig+0x160>
 80054a2:	4b4b      	ldr	r3, [pc, #300]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a4a      	ldr	r2, [pc, #296]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 80054a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	4b48      	ldr	r3, [pc, #288]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a47      	ldr	r2, [pc, #284]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 80054b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80054b8:	6013      	str	r3, [r2, #0]
 80054ba:	4b45      	ldr	r3, [pc, #276]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a44      	ldr	r2, [pc, #272]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 80054c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054c4:	6013      	str	r3, [r2, #0]
 80054c6:	e041      	b.n	800554c <HAL_RCC_OscConfig+0x1e4>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054d0:	d112      	bne.n	80054f8 <HAL_RCC_OscConfig+0x190>
 80054d2:	4b3f      	ldr	r3, [pc, #252]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a3e      	ldr	r2, [pc, #248]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 80054d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054dc:	6013      	str	r3, [r2, #0]
 80054de:	4b3c      	ldr	r3, [pc, #240]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a3b      	ldr	r2, [pc, #236]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 80054e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80054e8:	6013      	str	r3, [r2, #0]
 80054ea:	4b39      	ldr	r3, [pc, #228]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a38      	ldr	r2, [pc, #224]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 80054f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054f4:	6013      	str	r3, [r2, #0]
 80054f6:	e029      	b.n	800554c <HAL_RCC_OscConfig+0x1e4>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005500:	d112      	bne.n	8005528 <HAL_RCC_OscConfig+0x1c0>
 8005502:	4b33      	ldr	r3, [pc, #204]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a32      	ldr	r2, [pc, #200]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 8005508:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800550c:	6013      	str	r3, [r2, #0]
 800550e:	4b30      	ldr	r3, [pc, #192]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a2f      	ldr	r2, [pc, #188]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 8005514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005518:	6013      	str	r3, [r2, #0]
 800551a:	4b2d      	ldr	r3, [pc, #180]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a2c      	ldr	r2, [pc, #176]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 8005520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005524:	6013      	str	r3, [r2, #0]
 8005526:	e011      	b.n	800554c <HAL_RCC_OscConfig+0x1e4>
 8005528:	4b29      	ldr	r3, [pc, #164]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a28      	ldr	r2, [pc, #160]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 800552e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005532:	6013      	str	r3, [r2, #0]
 8005534:	4b26      	ldr	r3, [pc, #152]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a25      	ldr	r2, [pc, #148]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 800553a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800553e:	6013      	str	r3, [r2, #0]
 8005540:	4b23      	ldr	r3, [pc, #140]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a22      	ldr	r2, [pc, #136]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 8005546:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800554a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d013      	beq.n	800557c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005554:	f7fd fb7e 	bl	8002c54 <HAL_GetTick>
 8005558:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800555a:	e008      	b.n	800556e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800555c:	f7fd fb7a 	bl	8002c54 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b64      	cmp	r3, #100	@ 0x64
 8005568:	d901      	bls.n	800556e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e32e      	b.n	8005bcc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800556e:	4b18      	ldr	r3, [pc, #96]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d0f0      	beq.n	800555c <HAL_RCC_OscConfig+0x1f4>
 800557a:	e012      	b.n	80055a2 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800557c:	f7fd fb6a 	bl	8002c54 <HAL_GetTick>
 8005580:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005582:	e008      	b.n	8005596 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005584:	f7fd fb66 	bl	8002c54 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b64      	cmp	r3, #100	@ 0x64
 8005590:	d901      	bls.n	8005596 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e31a      	b.n	8005bcc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005596:	4b0e      	ldr	r3, [pc, #56]	@ (80055d0 <HAL_RCC_OscConfig+0x268>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1f0      	bne.n	8005584 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 809a 	beq.w	80056e4 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d005      	beq.n	80055c2 <HAL_RCC_OscConfig+0x25a>
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	2b18      	cmp	r3, #24
 80055ba:	d149      	bne.n	8005650 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d146      	bne.n	8005650 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d104      	bne.n	80055d4 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e2fe      	b.n	8005bcc <HAL_RCC_OscConfig+0x864>
 80055ce:	bf00      	nop
 80055d0:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d11c      	bne.n	8005614 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80055da:	4b9a      	ldr	r3, [pc, #616]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0218 	and.w	r2, r3, #24
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d014      	beq.n	8005614 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80055ea:	4b96      	ldr	r3, [pc, #600]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f023 0218 	bic.w	r2, r3, #24
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	4993      	ldr	r1, [pc, #588]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80055fc:	f000 fdd0 	bl	80061a0 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005600:	4b91      	ldr	r3, [pc, #580]	@ (8005848 <HAL_RCC_OscConfig+0x4e0>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4618      	mov	r0, r3
 8005606:	f7fd fa9b 	bl	8002b40 <HAL_InitTick>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e2db      	b.n	8005bcc <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005614:	f7fd fb1e 	bl	8002c54 <HAL_GetTick>
 8005618:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800561a:	e008      	b.n	800562e <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800561c:	f7fd fb1a 	bl	8002c54 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b02      	cmp	r3, #2
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e2ce      	b.n	8005bcc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800562e:	4b85      	ldr	r3, [pc, #532]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d0f0      	beq.n	800561c <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800563a:	4b82      	ldr	r3, [pc, #520]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	041b      	lsls	r3, r3, #16
 8005648:	497e      	ldr	r1, [pc, #504]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 800564a:	4313      	orrs	r3, r2
 800564c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800564e:	e049      	b.n	80056e4 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d02c      	beq.n	80056b2 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8005658:	4b7a      	ldr	r3, [pc, #488]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f023 0218 	bic.w	r2, r3, #24
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	4977      	ldr	r1, [pc, #476]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 8005666:	4313      	orrs	r3, r2
 8005668:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800566a:	4b76      	ldr	r3, [pc, #472]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a75      	ldr	r2, [pc, #468]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 8005670:	f043 0301 	orr.w	r3, r3, #1
 8005674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005676:	f7fd faed 	bl	8002c54 <HAL_GetTick>
 800567a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800567c:	e008      	b.n	8005690 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800567e:	f7fd fae9 	bl	8002c54 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	2b02      	cmp	r3, #2
 800568a:	d901      	bls.n	8005690 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e29d      	b.n	8005bcc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005690:	4b6c      	ldr	r3, [pc, #432]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0302 	and.w	r3, r3, #2
 8005698:	2b00      	cmp	r3, #0
 800569a:	d0f0      	beq.n	800567e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800569c:	4b69      	ldr	r3, [pc, #420]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	041b      	lsls	r3, r3, #16
 80056aa:	4966      	ldr	r1, [pc, #408]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	610b      	str	r3, [r1, #16]
 80056b0:	e018      	b.n	80056e4 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056b2:	4b64      	ldr	r3, [pc, #400]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a63      	ldr	r2, [pc, #396]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 80056b8:	f023 0301 	bic.w	r3, r3, #1
 80056bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056be:	f7fd fac9 	bl	8002c54 <HAL_GetTick>
 80056c2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056c4:	e008      	b.n	80056d8 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80056c6:	f7fd fac5 	bl	8002c54 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e279      	b.n	8005bcc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056d8:	4b5a      	ldr	r3, [pc, #360]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1f0      	bne.n	80056c6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0308 	and.w	r3, r3, #8
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d03c      	beq.n	800576a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d01c      	beq.n	8005732 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056f8:	4b52      	ldr	r3, [pc, #328]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 80056fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056fe:	4a51      	ldr	r2, [pc, #324]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 8005700:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005704:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005708:	f7fd faa4 	bl	8002c54 <HAL_GetTick>
 800570c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800570e:	e008      	b.n	8005722 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005710:	f7fd faa0 	bl	8002c54 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	2b02      	cmp	r3, #2
 800571c:	d901      	bls.n	8005722 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e254      	b.n	8005bcc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005722:	4b48      	ldr	r3, [pc, #288]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 8005724:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005728:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d0ef      	beq.n	8005710 <HAL_RCC_OscConfig+0x3a8>
 8005730:	e01b      	b.n	800576a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005732:	4b44      	ldr	r3, [pc, #272]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 8005734:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005738:	4a42      	ldr	r2, [pc, #264]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 800573a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800573e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005742:	f7fd fa87 	bl	8002c54 <HAL_GetTick>
 8005746:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005748:	e008      	b.n	800575c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800574a:	f7fd fa83 	bl	8002c54 <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	2b02      	cmp	r3, #2
 8005756:	d901      	bls.n	800575c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e237      	b.n	8005bcc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800575c:	4b39      	ldr	r3, [pc, #228]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 800575e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005762:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1ef      	bne.n	800574a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0304 	and.w	r3, r3, #4
 8005772:	2b00      	cmp	r3, #0
 8005774:	f000 80d2 	beq.w	800591c <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005778:	4b34      	ldr	r3, [pc, #208]	@ (800584c <HAL_RCC_OscConfig+0x4e4>)
 800577a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	2b00      	cmp	r3, #0
 8005782:	d118      	bne.n	80057b6 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8005784:	4b31      	ldr	r3, [pc, #196]	@ (800584c <HAL_RCC_OscConfig+0x4e4>)
 8005786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005788:	4a30      	ldr	r2, [pc, #192]	@ (800584c <HAL_RCC_OscConfig+0x4e4>)
 800578a:	f043 0301 	orr.w	r3, r3, #1
 800578e:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005790:	f7fd fa60 	bl	8002c54 <HAL_GetTick>
 8005794:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005796:	e008      	b.n	80057aa <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005798:	f7fd fa5c 	bl	8002c54 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e210      	b.n	8005bcc <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80057aa:	4b28      	ldr	r3, [pc, #160]	@ (800584c <HAL_RCC_OscConfig+0x4e4>)
 80057ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d0f0      	beq.n	8005798 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d108      	bne.n	80057d0 <HAL_RCC_OscConfig+0x468>
 80057be:	4b21      	ldr	r3, [pc, #132]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 80057c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057c4:	4a1f      	ldr	r2, [pc, #124]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 80057c6:	f043 0301 	orr.w	r3, r3, #1
 80057ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80057ce:	e074      	b.n	80058ba <HAL_RCC_OscConfig+0x552>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d118      	bne.n	800580a <HAL_RCC_OscConfig+0x4a2>
 80057d8:	4b1a      	ldr	r3, [pc, #104]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 80057da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057de:	4a19      	ldr	r2, [pc, #100]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 80057e0:	f023 0301 	bic.w	r3, r3, #1
 80057e4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80057e8:	4b16      	ldr	r3, [pc, #88]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 80057ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057ee:	4a15      	ldr	r2, [pc, #84]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 80057f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057f4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80057f8:	4b12      	ldr	r3, [pc, #72]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 80057fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057fe:	4a11      	ldr	r2, [pc, #68]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 8005800:	f023 0304 	bic.w	r3, r3, #4
 8005804:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005808:	e057      	b.n	80058ba <HAL_RCC_OscConfig+0x552>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	2b05      	cmp	r3, #5
 8005810:	d11e      	bne.n	8005850 <HAL_RCC_OscConfig+0x4e8>
 8005812:	4b0c      	ldr	r3, [pc, #48]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 8005814:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005818:	4a0a      	ldr	r2, [pc, #40]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 800581a:	f043 0304 	orr.w	r3, r3, #4
 800581e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005822:	4b08      	ldr	r3, [pc, #32]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 8005824:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005828:	4a06      	ldr	r2, [pc, #24]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 800582a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800582e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005832:	4b04      	ldr	r3, [pc, #16]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 8005834:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005838:	4a02      	ldr	r2, [pc, #8]	@ (8005844 <HAL_RCC_OscConfig+0x4dc>)
 800583a:	f043 0301 	orr.w	r3, r3, #1
 800583e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005842:	e03a      	b.n	80058ba <HAL_RCC_OscConfig+0x552>
 8005844:	44020c00 	.word	0x44020c00
 8005848:	20000088 	.word	0x20000088
 800584c:	44020800 	.word	0x44020800
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	2b85      	cmp	r3, #133	@ 0x85
 8005856:	d118      	bne.n	800588a <HAL_RCC_OscConfig+0x522>
 8005858:	4ba2      	ldr	r3, [pc, #648]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 800585a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800585e:	4aa1      	ldr	r2, [pc, #644]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 8005860:	f043 0304 	orr.w	r3, r3, #4
 8005864:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005868:	4b9e      	ldr	r3, [pc, #632]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 800586a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800586e:	4a9d      	ldr	r2, [pc, #628]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 8005870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005874:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005878:	4b9a      	ldr	r3, [pc, #616]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 800587a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800587e:	4a99      	ldr	r2, [pc, #612]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 8005880:	f043 0301 	orr.w	r3, r3, #1
 8005884:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005888:	e017      	b.n	80058ba <HAL_RCC_OscConfig+0x552>
 800588a:	4b96      	ldr	r3, [pc, #600]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 800588c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005890:	4a94      	ldr	r2, [pc, #592]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 8005892:	f023 0301 	bic.w	r3, r3, #1
 8005896:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800589a:	4b92      	ldr	r3, [pc, #584]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 800589c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058a0:	4a90      	ldr	r2, [pc, #576]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 80058a2:	f023 0304 	bic.w	r3, r3, #4
 80058a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80058aa:	4b8e      	ldr	r3, [pc, #568]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 80058ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058b0:	4a8c      	ldr	r2, [pc, #560]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 80058b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d016      	beq.n	80058f0 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c2:	f7fd f9c7 	bl	8002c54 <HAL_GetTick>
 80058c6:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058c8:	e00a      	b.n	80058e0 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ca:	f7fd f9c3 	bl	8002c54 <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058d8:	4293      	cmp	r3, r2
 80058da:	d901      	bls.n	80058e0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e175      	b.n	8005bcc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058e0:	4b80      	ldr	r3, [pc, #512]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 80058e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0ed      	beq.n	80058ca <HAL_RCC_OscConfig+0x562>
 80058ee:	e015      	b.n	800591c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f0:	f7fd f9b0 	bl	8002c54 <HAL_GetTick>
 80058f4:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058f6:	e00a      	b.n	800590e <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058f8:	f7fd f9ac 	bl	8002c54 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005906:	4293      	cmp	r3, r2
 8005908:	d901      	bls.n	800590e <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e15e      	b.n	8005bcc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800590e:	4b75      	ldr	r3, [pc, #468]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 8005910:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005914:	f003 0302 	and.w	r3, r3, #2
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1ed      	bne.n	80058f8 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0320 	and.w	r3, r3, #32
 8005924:	2b00      	cmp	r3, #0
 8005926:	d036      	beq.n	8005996 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800592c:	2b00      	cmp	r3, #0
 800592e:	d019      	beq.n	8005964 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005930:	4b6c      	ldr	r3, [pc, #432]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a6b      	ldr	r2, [pc, #428]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 8005936:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800593a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800593c:	f7fd f98a 	bl	8002c54 <HAL_GetTick>
 8005940:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005942:	e008      	b.n	8005956 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8005944:	f7fd f986 	bl	8002c54 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d901      	bls.n	8005956 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e13a      	b.n	8005bcc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005956:	4b63      	ldr	r3, [pc, #396]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d0f0      	beq.n	8005944 <HAL_RCC_OscConfig+0x5dc>
 8005962:	e018      	b.n	8005996 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005964:	4b5f      	ldr	r3, [pc, #380]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a5e      	ldr	r2, [pc, #376]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 800596a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800596e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005970:	f7fd f970 	bl	8002c54 <HAL_GetTick>
 8005974:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005976:	e008      	b.n	800598a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8005978:	f7fd f96c 	bl	8002c54 <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	2b02      	cmp	r3, #2
 8005984:	d901      	bls.n	800598a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e120      	b.n	8005bcc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800598a:	4b56      	ldr	r3, [pc, #344]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1f0      	bne.n	8005978 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800599a:	2b00      	cmp	r3, #0
 800599c:	f000 8115 	beq.w	8005bca <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	2b18      	cmp	r3, #24
 80059a4:	f000 80af 	beq.w	8005b06 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	f040 8086 	bne.w	8005abe <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80059b2:	4b4c      	ldr	r3, [pc, #304]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a4b      	ldr	r2, [pc, #300]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 80059b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059be:	f7fd f949 	bl	8002c54 <HAL_GetTick>
 80059c2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80059c4:	e008      	b.n	80059d8 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80059c6:	f7fd f945 	bl	8002c54 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d901      	bls.n	80059d8 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e0f9      	b.n	8005bcc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80059d8:	4b42      	ldr	r3, [pc, #264]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1f0      	bne.n	80059c6 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80059e4:	4b3f      	ldr	r3, [pc, #252]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 80059e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80059ec:	f023 0303 	bic.w	r3, r3, #3
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80059f8:	0212      	lsls	r2, r2, #8
 80059fa:	430a      	orrs	r2, r1
 80059fc:	4939      	ldr	r1, [pc, #228]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	628b      	str	r3, [r1, #40]	@ 0x28
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a06:	3b01      	subs	r3, #1
 8005a08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a10:	3b01      	subs	r3, #1
 8005a12:	025b      	lsls	r3, r3, #9
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	431a      	orrs	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	041b      	lsls	r3, r3, #16
 8005a20:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005a24:	431a      	orrs	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	061b      	lsls	r3, r3, #24
 8005a2e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005a32:	492c      	ldr	r1, [pc, #176]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8005a38:	4b2a      	ldr	r3, [pc, #168]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 8005a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a3c:	4a29      	ldr	r2, [pc, #164]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 8005a3e:	f023 0310 	bic.w	r3, r3, #16
 8005a42:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a48:	4a26      	ldr	r2, [pc, #152]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8005a4e:	4b25      	ldr	r3, [pc, #148]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 8005a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a52:	4a24      	ldr	r2, [pc, #144]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 8005a54:	f043 0310 	orr.w	r3, r3, #16
 8005a58:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8005a5a:	4b22      	ldr	r3, [pc, #136]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 8005a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a5e:	f023 020c 	bic.w	r2, r3, #12
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a66:	491f      	ldr	r1, [pc, #124]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8005a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 8005a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a70:	f023 0220 	bic.w	r2, r3, #32
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a78:	491a      	ldr	r1, [pc, #104]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a7e:	4b19      	ldr	r3, [pc, #100]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 8005a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a82:	4a18      	ldr	r2, [pc, #96]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 8005a84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a88:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8005a8a:	4b16      	ldr	r3, [pc, #88]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a15      	ldr	r2, [pc, #84]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 8005a90:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a96:	f7fd f8dd 	bl	8002c54 <HAL_GetTick>
 8005a9a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005a9c:	e008      	b.n	8005ab0 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8005a9e:	f7fd f8d9 	bl	8002c54 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d901      	bls.n	8005ab0 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e08d      	b.n	8005bcc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0f0      	beq.n	8005a9e <HAL_RCC_OscConfig+0x736>
 8005abc:	e085      	b.n	8005bca <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8005abe:	4b09      	ldr	r3, [pc, #36]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a08      	ldr	r2, [pc, #32]	@ (8005ae4 <HAL_RCC_OscConfig+0x77c>)
 8005ac4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aca:	f7fd f8c3 	bl	8002c54 <HAL_GetTick>
 8005ace:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005ad0:	e00a      	b.n	8005ae8 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8005ad2:	f7fd f8bf 	bl	8002c54 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d903      	bls.n	8005ae8 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e073      	b.n	8005bcc <HAL_RCC_OscConfig+0x864>
 8005ae4:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005ae8:	4b3a      	ldr	r3, [pc, #232]	@ (8005bd4 <HAL_RCC_OscConfig+0x86c>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1ee      	bne.n	8005ad2 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005af4:	4b37      	ldr	r3, [pc, #220]	@ (8005bd4 <HAL_RCC_OscConfig+0x86c>)
 8005af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af8:	4a36      	ldr	r2, [pc, #216]	@ (8005bd4 <HAL_RCC_OscConfig+0x86c>)
 8005afa:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005afe:	f023 0303 	bic.w	r3, r3, #3
 8005b02:	6293      	str	r3, [r2, #40]	@ 0x28
 8005b04:	e061      	b.n	8005bca <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005b06:	4b33      	ldr	r3, [pc, #204]	@ (8005bd4 <HAL_RCC_OscConfig+0x86c>)
 8005b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b0a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005b0c:	4b31      	ldr	r3, [pc, #196]	@ (8005bd4 <HAL_RCC_OscConfig+0x86c>)
 8005b0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b10:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d031      	beq.n	8005b7e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	f003 0203 	and.w	r2, r3, #3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d12a      	bne.n	8005b7e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	0a1b      	lsrs	r3, r3, #8
 8005b2c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d122      	bne.n	8005b7e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b42:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d11a      	bne.n	8005b7e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	0a5b      	lsrs	r3, r3, #9
 8005b4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b54:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d111      	bne.n	8005b7e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	0c1b      	lsrs	r3, r3, #16
 8005b5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b66:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d108      	bne.n	8005b7e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	0e1b      	lsrs	r3, r3, #24
 8005b70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b78:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d001      	beq.n	8005b82 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e024      	b.n	8005bcc <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005b82:	4b14      	ldr	r3, [pc, #80]	@ (8005bd4 <HAL_RCC_OscConfig+0x86c>)
 8005b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b86:	08db      	lsrs	r3, r3, #3
 8005b88:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d01a      	beq.n	8005bca <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8005b94:	4b0f      	ldr	r3, [pc, #60]	@ (8005bd4 <HAL_RCC_OscConfig+0x86c>)
 8005b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b98:	4a0e      	ldr	r2, [pc, #56]	@ (8005bd4 <HAL_RCC_OscConfig+0x86c>)
 8005b9a:	f023 0310 	bic.w	r3, r3, #16
 8005b9e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba0:	f7fd f858 	bl	8002c54 <HAL_GetTick>
 8005ba4:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8005ba6:	bf00      	nop
 8005ba8:	f7fd f854 	bl	8002c54 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d0f9      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bb8:	4a06      	ldr	r2, [pc, #24]	@ (8005bd4 <HAL_RCC_OscConfig+0x86c>)
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8005bbe:	4b05      	ldr	r3, [pc, #20]	@ (8005bd4 <HAL_RCC_OscConfig+0x86c>)
 8005bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bc2:	4a04      	ldr	r2, [pc, #16]	@ (8005bd4 <HAL_RCC_OscConfig+0x86c>)
 8005bc4:	f043 0310 	orr.w	r3, r3, #16
 8005bc8:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3720      	adds	r7, #32
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	44020c00 	.word	0x44020c00

08005bd8 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e19e      	b.n	8005f2a <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bec:	4b83      	ldr	r3, [pc, #524]	@ (8005dfc <HAL_RCC_ClockConfig+0x224>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 030f 	and.w	r3, r3, #15
 8005bf4:	683a      	ldr	r2, [r7, #0]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d910      	bls.n	8005c1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bfa:	4b80      	ldr	r3, [pc, #512]	@ (8005dfc <HAL_RCC_ClockConfig+0x224>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f023 020f 	bic.w	r2, r3, #15
 8005c02:	497e      	ldr	r1, [pc, #504]	@ (8005dfc <HAL_RCC_ClockConfig+0x224>)
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c0a:	4b7c      	ldr	r3, [pc, #496]	@ (8005dfc <HAL_RCC_ClockConfig+0x224>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 030f 	and.w	r3, r3, #15
 8005c12:	683a      	ldr	r2, [r7, #0]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d001      	beq.n	8005c1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e186      	b.n	8005f2a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0310 	and.w	r3, r3, #16
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d012      	beq.n	8005c4e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	695a      	ldr	r2, [r3, #20]
 8005c2c:	4b74      	ldr	r3, [pc, #464]	@ (8005e00 <HAL_RCC_ClockConfig+0x228>)
 8005c2e:	6a1b      	ldr	r3, [r3, #32]
 8005c30:	0a1b      	lsrs	r3, r3, #8
 8005c32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d909      	bls.n	8005c4e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8005c3a:	4b71      	ldr	r3, [pc, #452]	@ (8005e00 <HAL_RCC_ClockConfig+0x228>)
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	021b      	lsls	r3, r3, #8
 8005c48:	496d      	ldr	r1, [pc, #436]	@ (8005e00 <HAL_RCC_ClockConfig+0x228>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0308 	and.w	r3, r3, #8
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d012      	beq.n	8005c80 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691a      	ldr	r2, [r3, #16]
 8005c5e:	4b68      	ldr	r3, [pc, #416]	@ (8005e00 <HAL_RCC_ClockConfig+0x228>)
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	091b      	lsrs	r3, r3, #4
 8005c64:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d909      	bls.n	8005c80 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8005c6c:	4b64      	ldr	r3, [pc, #400]	@ (8005e00 <HAL_RCC_ClockConfig+0x228>)
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	011b      	lsls	r3, r3, #4
 8005c7a:	4961      	ldr	r1, [pc, #388]	@ (8005e00 <HAL_RCC_ClockConfig+0x228>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0304 	and.w	r3, r3, #4
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d010      	beq.n	8005cae <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68da      	ldr	r2, [r3, #12]
 8005c90:	4b5b      	ldr	r3, [pc, #364]	@ (8005e00 <HAL_RCC_ClockConfig+0x228>)
 8005c92:	6a1b      	ldr	r3, [r3, #32]
 8005c94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d908      	bls.n	8005cae <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8005c9c:	4b58      	ldr	r3, [pc, #352]	@ (8005e00 <HAL_RCC_ClockConfig+0x228>)
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	4955      	ldr	r1, [pc, #340]	@ (8005e00 <HAL_RCC_ClockConfig+0x228>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d010      	beq.n	8005cdc <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689a      	ldr	r2, [r3, #8]
 8005cbe:	4b50      	ldr	r3, [pc, #320]	@ (8005e00 <HAL_RCC_ClockConfig+0x228>)
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	f003 030f 	and.w	r3, r3, #15
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d908      	bls.n	8005cdc <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8005cca:	4b4d      	ldr	r3, [pc, #308]	@ (8005e00 <HAL_RCC_ClockConfig+0x228>)
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	f023 020f 	bic.w	r2, r3, #15
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	494a      	ldr	r1, [pc, #296]	@ (8005e00 <HAL_RCC_ClockConfig+0x228>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0301 	and.w	r3, r3, #1
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f000 8093 	beq.w	8005e10 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	2b03      	cmp	r3, #3
 8005cf0:	d107      	bne.n	8005d02 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005cf2:	4b43      	ldr	r3, [pc, #268]	@ (8005e00 <HAL_RCC_ClockConfig+0x228>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d121      	bne.n	8005d42 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e113      	b.n	8005f2a <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d107      	bne.n	8005d1a <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d0a:	4b3d      	ldr	r3, [pc, #244]	@ (8005e00 <HAL_RCC_ClockConfig+0x228>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d115      	bne.n	8005d42 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e107      	b.n	8005f2a <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d107      	bne.n	8005d32 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005d22:	4b37      	ldr	r3, [pc, #220]	@ (8005e00 <HAL_RCC_ClockConfig+0x228>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d109      	bne.n	8005d42 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e0fb      	b.n	8005f2a <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d32:	4b33      	ldr	r3, [pc, #204]	@ (8005e00 <HAL_RCC_ClockConfig+0x228>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0302 	and.w	r3, r3, #2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e0f3      	b.n	8005f2a <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8005d42:	4b2f      	ldr	r3, [pc, #188]	@ (8005e00 <HAL_RCC_ClockConfig+0x228>)
 8005d44:	69db      	ldr	r3, [r3, #28]
 8005d46:	f023 0203 	bic.w	r2, r3, #3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	492c      	ldr	r1, [pc, #176]	@ (8005e00 <HAL_RCC_ClockConfig+0x228>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d54:	f7fc ff7e 	bl	8002c54 <HAL_GetTick>
 8005d58:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	2b03      	cmp	r3, #3
 8005d60:	d112      	bne.n	8005d88 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d62:	e00a      	b.n	8005d7a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005d64:	f7fc ff76 	bl	8002c54 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d901      	bls.n	8005d7a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e0d7      	b.n	8005f2a <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d7a:	4b21      	ldr	r3, [pc, #132]	@ (8005e00 <HAL_RCC_ClockConfig+0x228>)
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	f003 0318 	and.w	r3, r3, #24
 8005d82:	2b18      	cmp	r3, #24
 8005d84:	d1ee      	bne.n	8005d64 <HAL_RCC_ClockConfig+0x18c>
 8005d86:	e043      	b.n	8005e10 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d112      	bne.n	8005db6 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d90:	e00a      	b.n	8005da8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005d92:	f7fc ff5f 	bl	8002c54 <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d901      	bls.n	8005da8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e0c0      	b.n	8005f2a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005da8:	4b15      	ldr	r3, [pc, #84]	@ (8005e00 <HAL_RCC_ClockConfig+0x228>)
 8005daa:	69db      	ldr	r3, [r3, #28]
 8005dac:	f003 0318 	and.w	r3, r3, #24
 8005db0:	2b10      	cmp	r3, #16
 8005db2:	d1ee      	bne.n	8005d92 <HAL_RCC_ClockConfig+0x1ba>
 8005db4:	e02c      	b.n	8005e10 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d122      	bne.n	8005e04 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8005dbe:	e00a      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005dc0:	f7fc ff48 	bl	8002c54 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e0a9      	b.n	8005f2a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8005dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8005e00 <HAL_RCC_ClockConfig+0x228>)
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	f003 0318 	and.w	r3, r3, #24
 8005dde:	2b08      	cmp	r3, #8
 8005de0:	d1ee      	bne.n	8005dc0 <HAL_RCC_ClockConfig+0x1e8>
 8005de2:	e015      	b.n	8005e10 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005de4:	f7fc ff36 	bl	8002c54 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d906      	bls.n	8005e04 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e097      	b.n	8005f2a <HAL_RCC_ClockConfig+0x352>
 8005dfa:	bf00      	nop
 8005dfc:	40022000 	.word	0x40022000
 8005e00:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e04:	4b4b      	ldr	r3, [pc, #300]	@ (8005f34 <HAL_RCC_ClockConfig+0x35c>)
 8005e06:	69db      	ldr	r3, [r3, #28]
 8005e08:	f003 0318 	and.w	r3, r3, #24
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1e9      	bne.n	8005de4 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0302 	and.w	r3, r3, #2
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d010      	beq.n	8005e3e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689a      	ldr	r2, [r3, #8]
 8005e20:	4b44      	ldr	r3, [pc, #272]	@ (8005f34 <HAL_RCC_ClockConfig+0x35c>)
 8005e22:	6a1b      	ldr	r3, [r3, #32]
 8005e24:	f003 030f 	and.w	r3, r3, #15
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d208      	bcs.n	8005e3e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8005e2c:	4b41      	ldr	r3, [pc, #260]	@ (8005f34 <HAL_RCC_ClockConfig+0x35c>)
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	f023 020f 	bic.w	r2, r3, #15
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	493e      	ldr	r1, [pc, #248]	@ (8005f34 <HAL_RCC_ClockConfig+0x35c>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e3e:	4b3e      	ldr	r3, [pc, #248]	@ (8005f38 <HAL_RCC_ClockConfig+0x360>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 030f 	and.w	r3, r3, #15
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d210      	bcs.n	8005e6e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e4c:	4b3a      	ldr	r3, [pc, #232]	@ (8005f38 <HAL_RCC_ClockConfig+0x360>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f023 020f 	bic.w	r2, r3, #15
 8005e54:	4938      	ldr	r1, [pc, #224]	@ (8005f38 <HAL_RCC_ClockConfig+0x360>)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e5c:	4b36      	ldr	r3, [pc, #216]	@ (8005f38 <HAL_RCC_ClockConfig+0x360>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 030f 	and.w	r3, r3, #15
 8005e64:	683a      	ldr	r2, [r7, #0]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d001      	beq.n	8005e6e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e05d      	b.n	8005f2a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0304 	and.w	r3, r3, #4
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d010      	beq.n	8005e9c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68da      	ldr	r2, [r3, #12]
 8005e7e:	4b2d      	ldr	r3, [pc, #180]	@ (8005f34 <HAL_RCC_ClockConfig+0x35c>)
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d208      	bcs.n	8005e9c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8005e8a:	4b2a      	ldr	r3, [pc, #168]	@ (8005f34 <HAL_RCC_ClockConfig+0x35c>)
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	4927      	ldr	r1, [pc, #156]	@ (8005f34 <HAL_RCC_ClockConfig+0x35c>)
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0308 	and.w	r3, r3, #8
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d012      	beq.n	8005ece <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	691a      	ldr	r2, [r3, #16]
 8005eac:	4b21      	ldr	r3, [pc, #132]	@ (8005f34 <HAL_RCC_ClockConfig+0x35c>)
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	091b      	lsrs	r3, r3, #4
 8005eb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d209      	bcs.n	8005ece <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8005eba:	4b1e      	ldr	r3, [pc, #120]	@ (8005f34 <HAL_RCC_ClockConfig+0x35c>)
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	011b      	lsls	r3, r3, #4
 8005ec8:	491a      	ldr	r1, [pc, #104]	@ (8005f34 <HAL_RCC_ClockConfig+0x35c>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0310 	and.w	r3, r3, #16
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d012      	beq.n	8005f00 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	695a      	ldr	r2, [r3, #20]
 8005ede:	4b15      	ldr	r3, [pc, #84]	@ (8005f34 <HAL_RCC_ClockConfig+0x35c>)
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	0a1b      	lsrs	r3, r3, #8
 8005ee4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d209      	bcs.n	8005f00 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8005eec:	4b11      	ldr	r3, [pc, #68]	@ (8005f34 <HAL_RCC_ClockConfig+0x35c>)
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	021b      	lsls	r3, r3, #8
 8005efa:	490e      	ldr	r1, [pc, #56]	@ (8005f34 <HAL_RCC_ClockConfig+0x35c>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005f00:	f000 f822 	bl	8005f48 <HAL_RCC_GetSysClockFreq>
 8005f04:	4602      	mov	r2, r0
 8005f06:	4b0b      	ldr	r3, [pc, #44]	@ (8005f34 <HAL_RCC_ClockConfig+0x35c>)
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	f003 030f 	and.w	r3, r3, #15
 8005f0e:	490b      	ldr	r1, [pc, #44]	@ (8005f3c <HAL_RCC_ClockConfig+0x364>)
 8005f10:	5ccb      	ldrb	r3, [r1, r3]
 8005f12:	fa22 f303 	lsr.w	r3, r2, r3
 8005f16:	4a0a      	ldr	r2, [pc, #40]	@ (8005f40 <HAL_RCC_ClockConfig+0x368>)
 8005f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8005f44 <HAL_RCC_ClockConfig+0x36c>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7fc fe0e 	bl	8002b40 <HAL_InitTick>
 8005f24:	4603      	mov	r3, r0
 8005f26:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8005f28:	7afb      	ldrb	r3, [r7, #11]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	44020c00 	.word	0x44020c00
 8005f38:	40022000 	.word	0x40022000
 8005f3c:	0800daa0 	.word	0x0800daa0
 8005f40:	20000084 	.word	0x20000084
 8005f44:	20000088 	.word	0x20000088

08005f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b089      	sub	sp, #36	@ 0x24
 8005f4c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8005f4e:	4b8c      	ldr	r3, [pc, #560]	@ (8006180 <HAL_RCC_GetSysClockFreq+0x238>)
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	f003 0318 	and.w	r3, r3, #24
 8005f56:	2b08      	cmp	r3, #8
 8005f58:	d102      	bne.n	8005f60 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005f5a:	4b8a      	ldr	r3, [pc, #552]	@ (8006184 <HAL_RCC_GetSysClockFreq+0x23c>)
 8005f5c:	61fb      	str	r3, [r7, #28]
 8005f5e:	e107      	b.n	8006170 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f60:	4b87      	ldr	r3, [pc, #540]	@ (8006180 <HAL_RCC_GetSysClockFreq+0x238>)
 8005f62:	69db      	ldr	r3, [r3, #28]
 8005f64:	f003 0318 	and.w	r3, r3, #24
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d112      	bne.n	8005f92 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8005f6c:	4b84      	ldr	r3, [pc, #528]	@ (8006180 <HAL_RCC_GetSysClockFreq+0x238>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0320 	and.w	r3, r3, #32
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d009      	beq.n	8005f8c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005f78:	4b81      	ldr	r3, [pc, #516]	@ (8006180 <HAL_RCC_GetSysClockFreq+0x238>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	08db      	lsrs	r3, r3, #3
 8005f7e:	f003 0303 	and.w	r3, r3, #3
 8005f82:	4a81      	ldr	r2, [pc, #516]	@ (8006188 <HAL_RCC_GetSysClockFreq+0x240>)
 8005f84:	fa22 f303 	lsr.w	r3, r2, r3
 8005f88:	61fb      	str	r3, [r7, #28]
 8005f8a:	e0f1      	b.n	8006170 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8005f8c:	4b7e      	ldr	r3, [pc, #504]	@ (8006188 <HAL_RCC_GetSysClockFreq+0x240>)
 8005f8e:	61fb      	str	r3, [r7, #28]
 8005f90:	e0ee      	b.n	8006170 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f92:	4b7b      	ldr	r3, [pc, #492]	@ (8006180 <HAL_RCC_GetSysClockFreq+0x238>)
 8005f94:	69db      	ldr	r3, [r3, #28]
 8005f96:	f003 0318 	and.w	r3, r3, #24
 8005f9a:	2b10      	cmp	r3, #16
 8005f9c:	d102      	bne.n	8005fa4 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f9e:	4b7b      	ldr	r3, [pc, #492]	@ (800618c <HAL_RCC_GetSysClockFreq+0x244>)
 8005fa0:	61fb      	str	r3, [r7, #28]
 8005fa2:	e0e5      	b.n	8006170 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fa4:	4b76      	ldr	r3, [pc, #472]	@ (8006180 <HAL_RCC_GetSysClockFreq+0x238>)
 8005fa6:	69db      	ldr	r3, [r3, #28]
 8005fa8:	f003 0318 	and.w	r3, r3, #24
 8005fac:	2b18      	cmp	r3, #24
 8005fae:	f040 80dd 	bne.w	800616c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005fb2:	4b73      	ldr	r3, [pc, #460]	@ (8006180 <HAL_RCC_GetSysClockFreq+0x238>)
 8005fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb6:	f003 0303 	and.w	r3, r3, #3
 8005fba:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005fbc:	4b70      	ldr	r3, [pc, #448]	@ (8006180 <HAL_RCC_GetSysClockFreq+0x238>)
 8005fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc0:	0a1b      	lsrs	r3, r3, #8
 8005fc2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005fc6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005fc8:	4b6d      	ldr	r3, [pc, #436]	@ (8006180 <HAL_RCC_GetSysClockFreq+0x238>)
 8005fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fcc:	091b      	lsrs	r3, r3, #4
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8005fd4:	4b6a      	ldr	r3, [pc, #424]	@ (8006180 <HAL_RCC_GetSysClockFreq+0x238>)
 8005fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8005fd8:	08db      	lsrs	r3, r3, #3
 8005fda:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	fb02 f303 	mul.w	r3, r2, r3
 8005fe4:	ee07 3a90 	vmov	s15, r3
 8005fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fec:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f000 80b7 	beq.w	8006166 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d003      	beq.n	8006006 <HAL_RCC_GetSysClockFreq+0xbe>
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	2b03      	cmp	r3, #3
 8006002:	d056      	beq.n	80060b2 <HAL_RCC_GetSysClockFreq+0x16a>
 8006004:	e077      	b.n	80060f6 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8006006:	4b5e      	ldr	r3, [pc, #376]	@ (8006180 <HAL_RCC_GetSysClockFreq+0x238>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0320 	and.w	r3, r3, #32
 800600e:	2b00      	cmp	r3, #0
 8006010:	d02d      	beq.n	800606e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006012:	4b5b      	ldr	r3, [pc, #364]	@ (8006180 <HAL_RCC_GetSysClockFreq+0x238>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	08db      	lsrs	r3, r3, #3
 8006018:	f003 0303 	and.w	r3, r3, #3
 800601c:	4a5a      	ldr	r2, [pc, #360]	@ (8006188 <HAL_RCC_GetSysClockFreq+0x240>)
 800601e:	fa22 f303 	lsr.w	r3, r2, r3
 8006022:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	ee07 3a90 	vmov	s15, r3
 800602a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	ee07 3a90 	vmov	s15, r3
 8006034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006038:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800603c:	4b50      	ldr	r3, [pc, #320]	@ (8006180 <HAL_RCC_GetSysClockFreq+0x238>)
 800603e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006044:	ee07 3a90 	vmov	s15, r3
 8006048:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800604c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006050:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8006190 <HAL_RCC_GetSysClockFreq+0x248>
 8006054:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006058:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800605c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006060:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006068:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 800606c:	e065      	b.n	800613a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	ee07 3a90 	vmov	s15, r3
 8006074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006078:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8006194 <HAL_RCC_GetSysClockFreq+0x24c>
 800607c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006080:	4b3f      	ldr	r3, [pc, #252]	@ (8006180 <HAL_RCC_GetSysClockFreq+0x238>)
 8006082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006088:	ee07 3a90 	vmov	s15, r3
 800608c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8006090:	ed97 6a02 	vldr	s12, [r7, #8]
 8006094:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006190 <HAL_RCC_GetSysClockFreq+0x248>
 8006098:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800609c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80060a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80060a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ac:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80060b0:	e043      	b.n	800613a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	ee07 3a90 	vmov	s15, r3
 80060b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060bc:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8006198 <HAL_RCC_GetSysClockFreq+0x250>
 80060c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060c4:	4b2e      	ldr	r3, [pc, #184]	@ (8006180 <HAL_RCC_GetSysClockFreq+0x238>)
 80060c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060cc:	ee07 3a90 	vmov	s15, r3
 80060d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80060d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80060d8:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8006190 <HAL_RCC_GetSysClockFreq+0x248>
 80060dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80060e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80060e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80060ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060f0:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80060f4:	e021      	b.n	800613a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	ee07 3a90 	vmov	s15, r3
 80060fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006100:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800619c <HAL_RCC_GetSysClockFreq+0x254>
 8006104:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006108:	4b1d      	ldr	r3, [pc, #116]	@ (8006180 <HAL_RCC_GetSysClockFreq+0x238>)
 800610a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800610c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006110:	ee07 3a90 	vmov	s15, r3
 8006114:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006118:	ed97 6a02 	vldr	s12, [r7, #8]
 800611c:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8006190 <HAL_RCC_GetSysClockFreq+0x248>
 8006120:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006124:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006128:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800612c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006130:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006134:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8006138:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800613a:	4b11      	ldr	r3, [pc, #68]	@ (8006180 <HAL_RCC_GetSysClockFreq+0x238>)
 800613c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800613e:	0a5b      	lsrs	r3, r3, #9
 8006140:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006144:	3301      	adds	r3, #1
 8006146:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	ee07 3a90 	vmov	s15, r3
 800614e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006152:	edd7 6a06 	vldr	s13, [r7, #24]
 8006156:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800615a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800615e:	ee17 3a90 	vmov	r3, s15
 8006162:	61fb      	str	r3, [r7, #28]
 8006164:	e004      	b.n	8006170 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8006166:	2300      	movs	r3, #0
 8006168:	61fb      	str	r3, [r7, #28]
 800616a:	e001      	b.n	8006170 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800616c:	4b06      	ldr	r3, [pc, #24]	@ (8006188 <HAL_RCC_GetSysClockFreq+0x240>)
 800616e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8006170:	69fb      	ldr	r3, [r7, #28]
}
 8006172:	4618      	mov	r0, r3
 8006174:	3724      	adds	r7, #36	@ 0x24
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	44020c00 	.word	0x44020c00
 8006184:	003d0900 	.word	0x003d0900
 8006188:	03d09000 	.word	0x03d09000
 800618c:	007a1200 	.word	0x007a1200
 8006190:	46000000 	.word	0x46000000
 8006194:	4c742400 	.word	0x4c742400
 8006198:	4af42400 	.word	0x4af42400
 800619c:	4a742400 	.word	0x4a742400

080061a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80061a4:	f7ff fed0 	bl	8005f48 <HAL_RCC_GetSysClockFreq>
 80061a8:	4602      	mov	r2, r0
 80061aa:	4b08      	ldr	r3, [pc, #32]	@ (80061cc <HAL_RCC_GetHCLKFreq+0x2c>)
 80061ac:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80061ae:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80061b2:	4907      	ldr	r1, [pc, #28]	@ (80061d0 <HAL_RCC_GetHCLKFreq+0x30>)
 80061b4:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80061b6:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80061ba:	fa22 f303 	lsr.w	r3, r2, r3
 80061be:	4a05      	ldr	r2, [pc, #20]	@ (80061d4 <HAL_RCC_GetHCLKFreq+0x34>)
 80061c0:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80061c2:	4b04      	ldr	r3, [pc, #16]	@ (80061d4 <HAL_RCC_GetHCLKFreq+0x34>)
 80061c4:	681b      	ldr	r3, [r3, #0]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	44020c00 	.word	0x44020c00
 80061d0:	0800daa0 	.word	0x0800daa0
 80061d4:	20000084 	.word	0x20000084

080061d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80061dc:	f7ff ffe0 	bl	80061a0 <HAL_RCC_GetHCLKFreq>
 80061e0:	4602      	mov	r2, r0
 80061e2:	4b06      	ldr	r3, [pc, #24]	@ (80061fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	091b      	lsrs	r3, r3, #4
 80061e8:	f003 0307 	and.w	r3, r3, #7
 80061ec:	4904      	ldr	r1, [pc, #16]	@ (8006200 <HAL_RCC_GetPCLK1Freq+0x28>)
 80061ee:	5ccb      	ldrb	r3, [r1, r3]
 80061f0:	f003 031f 	and.w	r3, r3, #31
 80061f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	44020c00 	.word	0x44020c00
 8006200:	0800dab0 	.word	0x0800dab0

08006204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8006208:	f7ff ffca 	bl	80061a0 <HAL_RCC_GetHCLKFreq>
 800620c:	4602      	mov	r2, r0
 800620e:	4b06      	ldr	r3, [pc, #24]	@ (8006228 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	0a1b      	lsrs	r3, r3, #8
 8006214:	f003 0307 	and.w	r3, r3, #7
 8006218:	4904      	ldr	r1, [pc, #16]	@ (800622c <HAL_RCC_GetPCLK2Freq+0x28>)
 800621a:	5ccb      	ldrb	r3, [r1, r3]
 800621c:	f003 031f 	and.w	r3, r3, #31
 8006220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006224:	4618      	mov	r0, r3
 8006226:	bd80      	pop	{r7, pc}
 8006228:	44020c00 	.word	0x44020c00
 800622c:	0800dab0 	.word	0x0800dab0

08006230 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8006234:	f7ff ffb4 	bl	80061a0 <HAL_RCC_GetHCLKFreq>
 8006238:	4602      	mov	r2, r0
 800623a:	4b06      	ldr	r3, [pc, #24]	@ (8006254 <HAL_RCC_GetPCLK3Freq+0x24>)
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	0b1b      	lsrs	r3, r3, #12
 8006240:	f003 0307 	and.w	r3, r3, #7
 8006244:	4904      	ldr	r1, [pc, #16]	@ (8006258 <HAL_RCC_GetPCLK3Freq+0x28>)
 8006246:	5ccb      	ldrb	r3, [r1, r3]
 8006248:	f003 031f 	and.w	r3, r3, #31
 800624c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006250:	4618      	mov	r0, r3
 8006252:	bd80      	pop	{r7, pc}
 8006254:	44020c00 	.word	0x44020c00
 8006258:	0800dab0 	.word	0x0800dab0

0800625c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800625c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006260:	b0ba      	sub	sp, #232	@ 0xe8
 8006262:	af00      	add	r7, sp, #0
 8006264:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006268:	2300      	movs	r3, #0
 800626a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800626e:	2300      	movs	r3, #0
 8006270:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006274:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627c:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8006280:	2500      	movs	r5, #0
 8006282:	ea54 0305 	orrs.w	r3, r4, r5
 8006286:	d00b      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8006288:	4bcd      	ldr	r3, [pc, #820]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800628a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800628e:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8006292:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006298:	4ac9      	ldr	r2, [pc, #804]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800629a:	430b      	orrs	r3, r1
 800629c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80062a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a8:	f002 0801 	and.w	r8, r2, #1
 80062ac:	f04f 0900 	mov.w	r9, #0
 80062b0:	ea58 0309 	orrs.w	r3, r8, r9
 80062b4:	d042      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80062b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062bc:	2b05      	cmp	r3, #5
 80062be:	d823      	bhi.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80062c0:	a201      	add	r2, pc, #4	@ (adr r2, 80062c8 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80062c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c6:	bf00      	nop
 80062c8:	08006311 	.word	0x08006311
 80062cc:	080062e1 	.word	0x080062e1
 80062d0:	080062f5 	.word	0x080062f5
 80062d4:	08006311 	.word	0x08006311
 80062d8:	08006311 	.word	0x08006311
 80062dc:	08006311 	.word	0x08006311
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80062e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062e4:	3308      	adds	r3, #8
 80062e6:	4618      	mov	r0, r3
 80062e8:	f003 f90c 	bl	8009504 <RCCEx_PLL2_Config>
 80062ec:	4603      	mov	r3, r0
 80062ee:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 80062f2:	e00e      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80062f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062f8:	3330      	adds	r3, #48	@ 0x30
 80062fa:	4618      	mov	r0, r3
 80062fc:	f003 f99a 	bl	8009634 <RCCEx_PLL3_Config>
 8006300:	4603      	mov	r3, r0
 8006302:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8006306:	e004      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800630e:	e000      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8006310:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006312:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d10c      	bne.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800631a:	4ba9      	ldr	r3, [pc, #676]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800631c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006320:	f023 0107 	bic.w	r1, r3, #7
 8006324:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800632a:	4aa5      	ldr	r2, [pc, #660]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800632c:	430b      	orrs	r3, r1
 800632e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006332:	e003      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006334:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006338:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800633c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006344:	f002 0a02 	and.w	sl, r2, #2
 8006348:	f04f 0b00 	mov.w	fp, #0
 800634c:	ea5a 030b 	orrs.w	r3, sl, fp
 8006350:	f000 8088 	beq.w	8006464 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8006354:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800635a:	2b28      	cmp	r3, #40	@ 0x28
 800635c:	d868      	bhi.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800635e:	a201      	add	r2, pc, #4	@ (adr r2, 8006364 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8006360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006364:	08006439 	.word	0x08006439
 8006368:	08006431 	.word	0x08006431
 800636c:	08006431 	.word	0x08006431
 8006370:	08006431 	.word	0x08006431
 8006374:	08006431 	.word	0x08006431
 8006378:	08006431 	.word	0x08006431
 800637c:	08006431 	.word	0x08006431
 8006380:	08006431 	.word	0x08006431
 8006384:	08006409 	.word	0x08006409
 8006388:	08006431 	.word	0x08006431
 800638c:	08006431 	.word	0x08006431
 8006390:	08006431 	.word	0x08006431
 8006394:	08006431 	.word	0x08006431
 8006398:	08006431 	.word	0x08006431
 800639c:	08006431 	.word	0x08006431
 80063a0:	08006431 	.word	0x08006431
 80063a4:	0800641d 	.word	0x0800641d
 80063a8:	08006431 	.word	0x08006431
 80063ac:	08006431 	.word	0x08006431
 80063b0:	08006431 	.word	0x08006431
 80063b4:	08006431 	.word	0x08006431
 80063b8:	08006431 	.word	0x08006431
 80063bc:	08006431 	.word	0x08006431
 80063c0:	08006431 	.word	0x08006431
 80063c4:	08006439 	.word	0x08006439
 80063c8:	08006431 	.word	0x08006431
 80063cc:	08006431 	.word	0x08006431
 80063d0:	08006431 	.word	0x08006431
 80063d4:	08006431 	.word	0x08006431
 80063d8:	08006431 	.word	0x08006431
 80063dc:	08006431 	.word	0x08006431
 80063e0:	08006431 	.word	0x08006431
 80063e4:	08006439 	.word	0x08006439
 80063e8:	08006431 	.word	0x08006431
 80063ec:	08006431 	.word	0x08006431
 80063f0:	08006431 	.word	0x08006431
 80063f4:	08006431 	.word	0x08006431
 80063f8:	08006431 	.word	0x08006431
 80063fc:	08006431 	.word	0x08006431
 8006400:	08006431 	.word	0x08006431
 8006404:	08006439 	.word	0x08006439
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006408:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800640c:	3308      	adds	r3, #8
 800640e:	4618      	mov	r0, r3
 8006410:	f003 f878 	bl	8009504 <RCCEx_PLL2_Config>
 8006414:	4603      	mov	r3, r0
 8006416:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 800641a:	e00e      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800641c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006420:	3330      	adds	r3, #48	@ 0x30
 8006422:	4618      	mov	r0, r3
 8006424:	f003 f906 	bl	8009634 <RCCEx_PLL3_Config>
 8006428:	4603      	mov	r3, r0
 800642a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 800642e:	e004      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006436:	e000      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8006438:	bf00      	nop
    }

    if (ret == HAL_OK)
 800643a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10c      	bne.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8006442:	4b5f      	ldr	r3, [pc, #380]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006444:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006448:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800644c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006452:	4a5b      	ldr	r2, [pc, #364]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006454:	430b      	orrs	r3, r1
 8006456:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800645a:	e003      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800645c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006460:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006464:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646c:	f002 0304 	and.w	r3, r2, #4
 8006470:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006474:	2300      	movs	r3, #0
 8006476:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800647a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800647e:	460b      	mov	r3, r1
 8006480:	4313      	orrs	r3, r2
 8006482:	d04e      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8006484:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006488:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800648a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800648e:	d02c      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8006490:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006494:	d825      	bhi.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006496:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800649a:	d028      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x292>
 800649c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064a0:	d81f      	bhi.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80064a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80064a4:	d025      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80064a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80064a8:	d81b      	bhi.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80064aa:	2b80      	cmp	r3, #128	@ 0x80
 80064ac:	d00f      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x272>
 80064ae:	2b80      	cmp	r3, #128	@ 0x80
 80064b0:	d817      	bhi.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d01f      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80064b6:	2b40      	cmp	r3, #64	@ 0x40
 80064b8:	d113      	bne.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80064ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064be:	3308      	adds	r3, #8
 80064c0:	4618      	mov	r0, r3
 80064c2:	f003 f81f 	bl	8009504 <RCCEx_PLL2_Config>
 80064c6:	4603      	mov	r3, r0
 80064c8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 80064cc:	e014      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80064ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064d2:	3330      	adds	r3, #48	@ 0x30
 80064d4:	4618      	mov	r0, r3
 80064d6:	f003 f8ad 	bl	8009634 <RCCEx_PLL3_Config>
 80064da:	4603      	mov	r3, r0
 80064dc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 80064e0:	e00a      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80064e8:	e006      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80064ea:	bf00      	nop
 80064ec:	e004      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80064ee:	bf00      	nop
 80064f0:	e002      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80064f2:	bf00      	nop
 80064f4:	e000      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80064f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064f8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10c      	bne.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006500:	4b2f      	ldr	r3, [pc, #188]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006502:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006506:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800650a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800650e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006510:	4a2b      	ldr	r2, [pc, #172]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006512:	430b      	orrs	r3, r1
 8006514:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006518:	e003      	b.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800651a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800651e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006522:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652a:	f002 0308 	and.w	r3, r2, #8
 800652e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006532:	2300      	movs	r3, #0
 8006534:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006538:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800653c:	460b      	mov	r3, r1
 800653e:	4313      	orrs	r3, r2
 8006540:	d056      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8006542:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006546:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006548:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800654c:	d031      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800654e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006552:	d82a      	bhi.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006554:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006558:	d02d      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800655a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800655e:	d824      	bhi.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006560:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006564:	d029      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8006566:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800656a:	d81e      	bhi.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800656c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006570:	d011      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8006572:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006576:	d818      	bhi.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006578:	2b00      	cmp	r3, #0
 800657a:	d023      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800657c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006580:	d113      	bne.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006586:	3308      	adds	r3, #8
 8006588:	4618      	mov	r0, r3
 800658a:	f002 ffbb 	bl	8009504 <RCCEx_PLL2_Config>
 800658e:	4603      	mov	r3, r0
 8006590:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8006594:	e017      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006596:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800659a:	3330      	adds	r3, #48	@ 0x30
 800659c:	4618      	mov	r0, r3
 800659e:	f003 f849 	bl	8009634 <RCCEx_PLL3_Config>
 80065a2:	4603      	mov	r3, r0
 80065a4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 80065a8:	e00d      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80065b0:	e009      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80065b2:	bf00      	nop
 80065b4:	e007      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80065b6:	bf00      	nop
 80065b8:	e005      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80065ba:	bf00      	nop
 80065bc:	e003      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80065be:	bf00      	nop
 80065c0:	44020c00 	.word	0x44020c00
        break;
 80065c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065c6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10c      	bne.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80065ce:	4bb9      	ldr	r3, [pc, #740]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80065d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80065d4:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80065d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065de:	4ab5      	ldr	r2, [pc, #724]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80065e0:	430b      	orrs	r3, r1
 80065e2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80065e6:	e003      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80065ec:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80065f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f8:	f002 0310 	and.w	r3, r2, #16
 80065fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006600:	2300      	movs	r3, #0
 8006602:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006606:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800660a:	460b      	mov	r3, r1
 800660c:	4313      	orrs	r3, r2
 800660e:	d053      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8006610:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006614:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006616:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800661a:	d031      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800661c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006620:	d82a      	bhi.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006622:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006626:	d02d      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8006628:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800662c:	d824      	bhi.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800662e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006632:	d029      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8006634:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006638:	d81e      	bhi.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800663a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800663e:	d011      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006640:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006644:	d818      	bhi.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006646:	2b00      	cmp	r3, #0
 8006648:	d020      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x430>
 800664a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800664e:	d113      	bne.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006650:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006654:	3308      	adds	r3, #8
 8006656:	4618      	mov	r0, r3
 8006658:	f002 ff54 	bl	8009504 <RCCEx_PLL2_Config>
 800665c:	4603      	mov	r3, r0
 800665e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8006662:	e014      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006664:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006668:	3330      	adds	r3, #48	@ 0x30
 800666a:	4618      	mov	r0, r3
 800666c:	f002 ffe2 	bl	8009634 <RCCEx_PLL3_Config>
 8006670:	4603      	mov	r3, r0
 8006672:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8006676:	e00a      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800667e:	e006      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006680:	bf00      	nop
 8006682:	e004      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006684:	bf00      	nop
 8006686:	e002      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006688:	bf00      	nop
 800668a:	e000      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800668c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800668e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10c      	bne.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8006696:	4b87      	ldr	r3, [pc, #540]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006698:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800669c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80066a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066a6:	4a83      	ldr	r2, [pc, #524]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80066a8:	430b      	orrs	r3, r1
 80066aa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80066ae:	e003      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80066b4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80066b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c0:	f002 0320 	and.w	r3, r2, #32
 80066c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80066c8:	2300      	movs	r3, #0
 80066ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80066ce:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80066d2:	460b      	mov	r3, r1
 80066d4:	4313      	orrs	r3, r2
 80066d6:	d053      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80066d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066de:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80066e2:	d031      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80066e4:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80066e8:	d82a      	bhi.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80066ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066ee:	d02d      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80066f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066f4:	d824      	bhi.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80066f6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80066fa:	d029      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80066fc:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006700:	d81e      	bhi.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006702:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006706:	d011      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800670c:	d818      	bhi.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800670e:	2b00      	cmp	r3, #0
 8006710:	d020      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8006712:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006716:	d113      	bne.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006718:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800671c:	3308      	adds	r3, #8
 800671e:	4618      	mov	r0, r3
 8006720:	f002 fef0 	bl	8009504 <RCCEx_PLL2_Config>
 8006724:	4603      	mov	r3, r0
 8006726:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 800672a:	e014      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800672c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006730:	3330      	adds	r3, #48	@ 0x30
 8006732:	4618      	mov	r0, r3
 8006734:	f002 ff7e 	bl	8009634 <RCCEx_PLL3_Config>
 8006738:	4603      	mov	r3, r0
 800673a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 800673e:	e00a      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006746:	e006      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006748:	bf00      	nop
 800674a:	e004      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800674c:	bf00      	nop
 800674e:	e002      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006750:	bf00      	nop
 8006752:	e000      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006754:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006756:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10c      	bne.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800675e:	4b55      	ldr	r3, [pc, #340]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006760:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006764:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8006768:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800676c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800676e:	4a51      	ldr	r2, [pc, #324]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006770:	430b      	orrs	r3, r1
 8006772:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006776:	e003      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006778:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800677c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006780:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006788:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800678c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006790:	2300      	movs	r3, #0
 8006792:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006796:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800679a:	460b      	mov	r3, r1
 800679c:	4313      	orrs	r3, r2
 800679e:	d053      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80067a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067a6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80067aa:	d031      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80067ac:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80067b0:	d82a      	bhi.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80067b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80067b6:	d02d      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80067b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80067bc:	d824      	bhi.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80067be:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80067c2:	d029      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80067c4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80067c8:	d81e      	bhi.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80067ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80067ce:	d011      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80067d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80067d4:	d818      	bhi.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d020      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80067da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80067de:	d113      	bne.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80067e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067e4:	3308      	adds	r3, #8
 80067e6:	4618      	mov	r0, r3
 80067e8:	f002 fe8c 	bl	8009504 <RCCEx_PLL2_Config>
 80067ec:	4603      	mov	r3, r0
 80067ee:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80067f2:	e014      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80067f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067f8:	3330      	adds	r3, #48	@ 0x30
 80067fa:	4618      	mov	r0, r3
 80067fc:	f002 ff1a 	bl	8009634 <RCCEx_PLL3_Config>
 8006800:	4603      	mov	r3, r0
 8006802:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8006806:	e00a      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800680e:	e006      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006810:	bf00      	nop
 8006812:	e004      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006814:	bf00      	nop
 8006816:	e002      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006818:	bf00      	nop
 800681a:	e000      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800681c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800681e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10c      	bne.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006826:	4b23      	ldr	r3, [pc, #140]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800682c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006830:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006836:	4a1f      	ldr	r2, [pc, #124]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006838:	430b      	orrs	r3, r1
 800683a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800683e:	e003      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006840:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006844:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006848:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800684c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006850:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006854:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006858:	2300      	movs	r3, #0
 800685a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800685e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006862:	460b      	mov	r3, r1
 8006864:	4313      	orrs	r3, r2
 8006866:	d03d      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8006868:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800686c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800686e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006872:	d01b      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x650>
 8006874:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006878:	d814      	bhi.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x648>
 800687a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800687e:	d017      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8006880:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006884:	d80e      	bhi.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8006886:	2b00      	cmp	r3, #0
 8006888:	d016      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 800688a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800688e:	d109      	bne.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006890:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006894:	3330      	adds	r3, #48	@ 0x30
 8006896:	4618      	mov	r0, r3
 8006898:	f002 fecc 	bl	8009634 <RCCEx_PLL3_Config>
 800689c:	4603      	mov	r3, r0
 800689e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80068a2:	e00a      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80068aa:	e006      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 80068ac:	bf00      	nop
 80068ae:	e004      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 80068b0:	bf00      	nop
 80068b2:	e002      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x65e>
 80068b4:	44020c00 	.word	0x44020c00
        break;
 80068b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068ba:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10c      	bne.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80068c2:	4b99      	ldr	r3, [pc, #612]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80068c8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80068cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068d2:	4a95      	ldr	r2, [pc, #596]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068d4:	430b      	orrs	r3, r1
 80068d6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80068da:	e003      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068dc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80068e0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80068e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ec:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80068f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80068f4:	2300      	movs	r3, #0
 80068f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80068fa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80068fe:	460b      	mov	r3, r1
 8006900:	4313      	orrs	r3, r2
 8006902:	d03b      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8006904:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006908:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800690a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800690e:	d01b      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8006910:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006914:	d814      	bhi.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8006916:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800691a:	d017      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 800691c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006920:	d80e      	bhi.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8006922:	2b00      	cmp	r3, #0
 8006924:	d014      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8006926:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800692a:	d109      	bne.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800692c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006930:	3330      	adds	r3, #48	@ 0x30
 8006932:	4618      	mov	r0, r3
 8006934:	f002 fe7e 	bl	8009634 <RCCEx_PLL3_Config>
 8006938:	4603      	mov	r3, r0
 800693a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800693e:	e008      	b.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006946:	e004      	b.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8006948:	bf00      	nop
 800694a:	e002      	b.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 800694c:	bf00      	nop
 800694e:	e000      	b.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8006950:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006952:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10c      	bne.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800695a:	4b73      	ldr	r3, [pc, #460]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800695c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006960:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8006964:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006968:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800696a:	4a6f      	ldr	r2, [pc, #444]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800696c:	430b      	orrs	r3, r1
 800696e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006972:	e003      	b.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006974:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006978:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800697c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006984:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006988:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800698c:	2300      	movs	r3, #0
 800698e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006992:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006996:	460b      	mov	r3, r1
 8006998:	4313      	orrs	r3, r2
 800699a:	d03d      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800699c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069a8:	d01b      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x786>
 80069aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069ae:	d814      	bhi.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80069b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069b4:	d017      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x78a>
 80069b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069ba:	d80e      	bhi.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d014      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x78e>
 80069c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069c4:	d109      	bne.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80069c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069ca:	3330      	adds	r3, #48	@ 0x30
 80069cc:	4618      	mov	r0, r3
 80069ce:	f002 fe31 	bl	8009634 <RCCEx_PLL3_Config>
 80069d2:	4603      	mov	r3, r0
 80069d4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 80069d8:	e008      	b.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80069e0:	e004      	b.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80069e2:	bf00      	nop
 80069e4:	e002      	b.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80069e6:	bf00      	nop
 80069e8:	e000      	b.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80069ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069ec:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d10d      	bne.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80069f4:	4b4c      	ldr	r3, [pc, #304]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80069fa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80069fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a06:	4a48      	ldr	r2, [pc, #288]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a08:	430b      	orrs	r3, r1
 8006a0a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006a0e:	e003      	b.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a10:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006a14:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8006a18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a20:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006a24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006a28:	2300      	movs	r3, #0
 8006a2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006a2e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006a32:	460b      	mov	r3, r1
 8006a34:	4313      	orrs	r3, r2
 8006a36:	d035      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8006a38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a44:	d015      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8006a46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a4a:	d80e      	bhi.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d012      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8006a50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a54:	d109      	bne.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006a56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a5a:	3330      	adds	r3, #48	@ 0x30
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f002 fde9 	bl	8009634 <RCCEx_PLL3_Config>
 8006a62:	4603      	mov	r3, r0
 8006a64:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8006a68:	e006      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006a70:	e002      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8006a72:	bf00      	nop
 8006a74:	e000      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8006a76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a78:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d10d      	bne.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8006a80:	4b29      	ldr	r3, [pc, #164]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a82:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a86:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8006a8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a92:	4a25      	ldr	r2, [pc, #148]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a94:	430b      	orrs	r3, r1
 8006a96:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006a9a:	e003      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a9c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006aa0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8006aa4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aac:	2100      	movs	r1, #0
 8006aae:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8006ab2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006ab6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006aba:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	d037      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8006ac4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006acc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ad0:	d015      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8006ad2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ad6:	d80e      	bhi.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d012      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8006adc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ae0:	d109      	bne.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006ae2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ae6:	3330      	adds	r3, #48	@ 0x30
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f002 fda3 	bl	8009634 <RCCEx_PLL3_Config>
 8006aee:	4603      	mov	r3, r0
 8006af0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8006af4:	e006      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006afc:	e002      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8006afe:	bf00      	nop
 8006b00:	e000      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8006b02:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006b04:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10f      	bne.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8006b0c:	4b06      	ldr	r3, [pc, #24]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b0e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006b12:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006b16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b1e:	4a02      	ldr	r2, [pc, #8]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b20:	430b      	orrs	r3, r1
 8006b22:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006b26:	e005      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 8006b28:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b2c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006b30:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006b34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	67b9      	str	r1, [r7, #120]	@ 0x78
 8006b40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006b46:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	d00e      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8006b50:	4bb8      	ldr	r3, [pc, #736]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	4ab7      	ldr	r2, [pc, #732]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006b56:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b5a:	61d3      	str	r3, [r2, #28]
 8006b5c:	4bb5      	ldr	r3, [pc, #724]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006b5e:	69d9      	ldr	r1, [r3, #28]
 8006b60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b64:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006b68:	4ab2      	ldr	r2, [pc, #712]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006b6a:	430b      	orrs	r3, r1
 8006b6c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b76:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006b7a:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006b80:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006b84:	460b      	mov	r3, r1
 8006b86:	4313      	orrs	r3, r2
 8006b88:	d055      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8006b8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b92:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006b96:	d031      	beq.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8006b98:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006b9c:	d82a      	bhi.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8006b9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ba2:	d02d      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8006ba4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ba8:	d824      	bhi.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8006baa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bae:	d029      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8006bb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bb4:	d81e      	bhi.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8006bb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bba:	d011      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006bbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bc0:	d818      	bhi.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d020      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 8006bc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bca:	d113      	bne.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006bcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006bd0:	3308      	adds	r3, #8
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f002 fc96 	bl	8009504 <RCCEx_PLL2_Config>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8006bde:	e014      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006be0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006be4:	3330      	adds	r3, #48	@ 0x30
 8006be6:	4618      	mov	r0, r3
 8006be8:	f002 fd24 	bl	8009634 <RCCEx_PLL3_Config>
 8006bec:	4603      	mov	r3, r0
 8006bee:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8006bf2:	e00a      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006bfa:	e006      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8006bfc:	bf00      	nop
 8006bfe:	e004      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8006c00:	bf00      	nop
 8006c02:	e002      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8006c04:	bf00      	nop
 8006c06:	e000      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8006c08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c0a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10d      	bne.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8006c12:	4b88      	ldr	r3, [pc, #544]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006c14:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006c18:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006c1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c24:	4a83      	ldr	r2, [pc, #524]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006c26:	430b      	orrs	r3, r1
 8006c28:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006c2c:	e003      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c2e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006c32:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006c36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006c42:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c44:	2300      	movs	r3, #0
 8006c46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006c48:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	d055      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8006c52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c5a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006c5e:	d031      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8006c60:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006c64:	d82a      	bhi.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8006c66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c6a:	d02d      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8006c6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c70:	d824      	bhi.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8006c72:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c76:	d029      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006c78:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c7c:	d81e      	bhi.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8006c7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c82:	d011      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8006c84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c88:	d818      	bhi.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d020      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006c8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c92:	d113      	bne.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c98:	3308      	adds	r3, #8
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f002 fc32 	bl	8009504 <RCCEx_PLL2_Config>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8006ca6:	e014      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006ca8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006cac:	3330      	adds	r3, #48	@ 0x30
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f002 fcc0 	bl	8009634 <RCCEx_PLL3_Config>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8006cba:	e00a      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006cc2:	e006      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8006cc4:	bf00      	nop
 8006cc6:	e004      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8006cc8:	bf00      	nop
 8006cca:	e002      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8006ccc:	bf00      	nop
 8006cce:	e000      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8006cd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cd2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d10d      	bne.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006cda:	4b56      	ldr	r3, [pc, #344]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006cdc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006ce0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006ce4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cec:	4a51      	ldr	r2, [pc, #324]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006cee:	430b      	orrs	r3, r1
 8006cf0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006cf4:	e003      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cf6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006cfa:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006cfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d06:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006d0a:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d10:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006d14:	460b      	mov	r3, r1
 8006d16:	4313      	orrs	r3, r2
 8006d18:	d032      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006d1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006d22:	2b05      	cmp	r3, #5
 8006d24:	d80f      	bhi.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8006d26:	2b03      	cmp	r3, #3
 8006d28:	d211      	bcs.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d911      	bls.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d109      	bne.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006d32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d36:	3308      	adds	r3, #8
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f002 fbe3 	bl	8009504 <RCCEx_PLL2_Config>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006d44:	e006      	b.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006d4c:	e002      	b.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8006d4e:	bf00      	nop
 8006d50:	e000      	b.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8006d52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d54:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10d      	bne.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006d5c:	4b35      	ldr	r3, [pc, #212]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006d5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d62:	f023 0107 	bic.w	r1, r3, #7
 8006d66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006d6e:	4a31      	ldr	r2, [pc, #196]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006d70:	430b      	orrs	r3, r1
 8006d72:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006d76:	e003      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d78:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006d7c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8006d80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d88:	2100      	movs	r1, #0
 8006d8a:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006d8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d92:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006d96:	460b      	mov	r3, r1
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	d024      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8006d9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006da0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d005      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8006da8:	2b08      	cmp	r3, #8
 8006daa:	d005      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006db2:	e002      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8006db4:	bf00      	nop
 8006db6:	e000      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8006db8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dba:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d10d      	bne.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8006dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006dc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006dc8:	f023 0108 	bic.w	r1, r3, #8
 8006dcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006dd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006dd4:	4a17      	ldr	r2, [pc, #92]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006dd6:	430b      	orrs	r3, r1
 8006dd8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006ddc:	e003      	b.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dde:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006de2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006de6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dee:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006df2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006df4:	2300      	movs	r3, #0
 8006df6:	657b      	str	r3, [r7, #84]	@ 0x54
 8006df8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	f000 80b9 	beq.w	8006f76 <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8006e04:	4b0c      	ldr	r3, [pc, #48]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8006e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e08:	4a0b      	ldr	r2, [pc, #44]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8006e0a:	f043 0301 	orr.w	r3, r3, #1
 8006e0e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e10:	f7fb ff20 	bl	8002c54 <HAL_GetTick>
 8006e14:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006e18:	e010      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e1a:	f7fb ff1b 	bl	8002c54 <HAL_GetTick>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d908      	bls.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006e30:	e00a      	b.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8006e32:	bf00      	nop
 8006e34:	44020c00 	.word	0x44020c00
 8006e38:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006e3c:	4bba      	ldr	r3, [pc, #744]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e40:	f003 0301 	and.w	r3, r3, #1
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d0e8      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 8006e48:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f040 808e 	bne.w	8006f6e <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006e52:	4bb6      	ldr	r3, [pc, #728]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006e54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e5c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d023      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8006e68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e6c:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8006e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d01b      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006e78:	4bac      	ldr	r3, [pc, #688]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006e7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e86:	4ba9      	ldr	r3, [pc, #676]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006e88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e8c:	4aa7      	ldr	r2, [pc, #668]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006e8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e96:	4ba5      	ldr	r3, [pc, #660]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006e98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e9c:	4aa3      	ldr	r2, [pc, #652]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006e9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ea2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006ea6:	4aa1      	ldr	r2, [pc, #644]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d019      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ebc:	f7fb feca 	bl	8002c54 <HAL_GetTick>
 8006ec0:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ec4:	e00d      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ec6:	f7fb fec5 	bl	8002c54 <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ed0:	1ad2      	subs	r2, r2, r3
 8006ed2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d903      	bls.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8006ee0:	e006      	b.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ee2:	4b92      	ldr	r3, [pc, #584]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006ee4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ee8:	f003 0302 	and.w	r3, r3, #2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d0ea      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8006ef0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d135      	bne.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006ef8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006efc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006f00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f08:	d110      	bne.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 8006f0a:	4b88      	ldr	r3, [pc, #544]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006f0c:	69db      	ldr	r3, [r3, #28]
 8006f0e:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006f12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f16:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006f1a:	091b      	lsrs	r3, r3, #4
 8006f1c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006f20:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8006f24:	4a81      	ldr	r2, [pc, #516]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006f26:	430b      	orrs	r3, r1
 8006f28:	61d3      	str	r3, [r2, #28]
 8006f2a:	e005      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8006f2c:	4b7f      	ldr	r3, [pc, #508]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006f2e:	69db      	ldr	r3, [r3, #28]
 8006f30:	4a7e      	ldr	r2, [pc, #504]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006f32:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006f36:	61d3      	str	r3, [r2, #28]
 8006f38:	4b7c      	ldr	r3, [pc, #496]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006f3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f3e:	4a7b      	ldr	r2, [pc, #492]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006f40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f44:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006f48:	4b78      	ldr	r3, [pc, #480]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006f4a:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8006f4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f52:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006f56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f5a:	4a74      	ldr	r2, [pc, #464]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006f5c:	430b      	orrs	r3, r1
 8006f5e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006f62:	e008      	b.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f64:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006f68:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8006f6c:	e003      	b.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f6e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006f72:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006f76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006f82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f84:	2300      	movs	r3, #0
 8006f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f88:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	d035      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006f92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f9a:	2b30      	cmp	r3, #48	@ 0x30
 8006f9c:	d014      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 8006f9e:	2b30      	cmp	r3, #48	@ 0x30
 8006fa0:	d80e      	bhi.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8006fa2:	2b20      	cmp	r3, #32
 8006fa4:	d012      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8006fa6:	2b20      	cmp	r3, #32
 8006fa8:	d80a      	bhi.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d010      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 8006fae:	2b10      	cmp	r3, #16
 8006fb0:	d106      	bne.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fb2:	4b5e      	ldr	r3, [pc, #376]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fb6:	4a5d      	ldr	r2, [pc, #372]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006fb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fbc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8006fbe:	e008      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006fc6:	e004      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8006fc8:	bf00      	nop
 8006fca:	e002      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8006fcc:	bf00      	nop
 8006fce:	e000      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8006fd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fd2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10d      	bne.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006fda:	4b54      	ldr	r3, [pc, #336]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006fdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006fe0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006fe4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006fe8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006fec:	4a4f      	ldr	r2, [pc, #316]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006fee:	430b      	orrs	r3, r1
 8006ff0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006ff4:	e003      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ff6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006ffa:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006ffe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007006:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800700a:	643b      	str	r3, [r7, #64]	@ 0x40
 800700c:	2300      	movs	r3, #0
 800700e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007010:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007014:	460b      	mov	r3, r1
 8007016:	4313      	orrs	r3, r2
 8007018:	d033      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800701a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800701e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007022:	2b00      	cmp	r3, #0
 8007024:	d002      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 8007026:	2b40      	cmp	r3, #64	@ 0x40
 8007028:	d007      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800702a:	e010      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800702c:	4b3f      	ldr	r3, [pc, #252]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800702e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007030:	4a3e      	ldr	r2, [pc, #248]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007032:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007036:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8007038:	e00d      	b.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800703a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800703e:	3308      	adds	r3, #8
 8007040:	4618      	mov	r0, r3
 8007042:	f002 fa5f 	bl	8009504 <RCCEx_PLL2_Config>
 8007046:	4603      	mov	r3, r0
 8007048:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800704c:	e003      	b.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007054:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007056:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800705a:	2b00      	cmp	r3, #0
 800705c:	d10d      	bne.n	800707a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800705e:	4b33      	ldr	r3, [pc, #204]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007060:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007064:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8007068:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800706c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007070:	4a2e      	ldr	r2, [pc, #184]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007072:	430b      	orrs	r3, r1
 8007074:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007078:	e003      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800707a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800707e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8007082:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708a:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800708e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007090:	2300      	movs	r3, #0
 8007092:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007094:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007098:	460b      	mov	r3, r1
 800709a:	4313      	orrs	r3, r2
 800709c:	d04c      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800709e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80070a6:	2b04      	cmp	r3, #4
 80070a8:	d827      	bhi.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80070aa:	a201      	add	r2, pc, #4	@ (adr r2, 80070b0 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 80070ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b0:	080070c5 	.word	0x080070c5
 80070b4:	080070d3 	.word	0x080070d3
 80070b8:	080070e7 	.word	0x080070e7
 80070bc:	08007103 	.word	0x08007103
 80070c0:	08007103 	.word	0x08007103
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070c4:	4b19      	ldr	r3, [pc, #100]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80070c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c8:	4a18      	ldr	r2, [pc, #96]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80070ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070ce:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80070d0:	e018      	b.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80070d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070d6:	3308      	adds	r3, #8
 80070d8:	4618      	mov	r0, r3
 80070da:	f002 fa13 	bl	8009504 <RCCEx_PLL2_Config>
 80070de:	4603      	mov	r3, r0
 80070e0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80070e4:	e00e      	b.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80070e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070ea:	3330      	adds	r3, #48	@ 0x30
 80070ec:	4618      	mov	r0, r3
 80070ee:	f002 faa1 	bl	8009634 <RCCEx_PLL3_Config>
 80070f2:	4603      	mov	r3, r0
 80070f4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80070f8:	e004      	b.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007100:	e000      	b.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 8007102:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007104:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007108:	2b00      	cmp	r3, #0
 800710a:	d111      	bne.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800710c:	4b07      	ldr	r3, [pc, #28]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800710e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007112:	f023 0107 	bic.w	r1, r3, #7
 8007116:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800711a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800711e:	4a03      	ldr	r2, [pc, #12]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007120:	430b      	orrs	r3, r1
 8007122:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007126:	e007      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8007128:	44020800 	.word	0x44020800
 800712c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007130:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007134:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8007138:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800713c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007140:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007144:	633b      	str	r3, [r7, #48]	@ 0x30
 8007146:	2300      	movs	r3, #0
 8007148:	637b      	str	r3, [r7, #52]	@ 0x34
 800714a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800714e:	460b      	mov	r3, r1
 8007150:	4313      	orrs	r3, r2
 8007152:	f000 8081 	beq.w	8007258 <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8007156:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800715a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800715e:	2b20      	cmp	r3, #32
 8007160:	d85f      	bhi.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8007162:	a201      	add	r2, pc, #4	@ (adr r2, 8007168 <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8007164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007168:	080071ed 	.word	0x080071ed
 800716c:	08007223 	.word	0x08007223
 8007170:	08007223 	.word	0x08007223
 8007174:	08007223 	.word	0x08007223
 8007178:	08007223 	.word	0x08007223
 800717c:	08007223 	.word	0x08007223
 8007180:	08007223 	.word	0x08007223
 8007184:	08007223 	.word	0x08007223
 8007188:	080071fb 	.word	0x080071fb
 800718c:	08007223 	.word	0x08007223
 8007190:	08007223 	.word	0x08007223
 8007194:	08007223 	.word	0x08007223
 8007198:	08007223 	.word	0x08007223
 800719c:	08007223 	.word	0x08007223
 80071a0:	08007223 	.word	0x08007223
 80071a4:	08007223 	.word	0x08007223
 80071a8:	0800720f 	.word	0x0800720f
 80071ac:	08007223 	.word	0x08007223
 80071b0:	08007223 	.word	0x08007223
 80071b4:	08007223 	.word	0x08007223
 80071b8:	08007223 	.word	0x08007223
 80071bc:	08007223 	.word	0x08007223
 80071c0:	08007223 	.word	0x08007223
 80071c4:	08007223 	.word	0x08007223
 80071c8:	0800722b 	.word	0x0800722b
 80071cc:	08007223 	.word	0x08007223
 80071d0:	08007223 	.word	0x08007223
 80071d4:	08007223 	.word	0x08007223
 80071d8:	08007223 	.word	0x08007223
 80071dc:	08007223 	.word	0x08007223
 80071e0:	08007223 	.word	0x08007223
 80071e4:	08007223 	.word	0x08007223
 80071e8:	0800722b 	.word	0x0800722b
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071ec:	4bb9      	ldr	r3, [pc, #740]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80071ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071f0:	4ab8      	ldr	r2, [pc, #736]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80071f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071f6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80071f8:	e018      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80071fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071fe:	3308      	adds	r3, #8
 8007200:	4618      	mov	r0, r3
 8007202:	f002 f97f 	bl	8009504 <RCCEx_PLL2_Config>
 8007206:	4603      	mov	r3, r0
 8007208:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800720c:	e00e      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800720e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007212:	3330      	adds	r3, #48	@ 0x30
 8007214:	4618      	mov	r0, r3
 8007216:	f002 fa0d 	bl	8009634 <RCCEx_PLL3_Config>
 800721a:	4603      	mov	r3, r0
 800721c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007220:	e004      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007228:	e000      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 800722a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800722c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10d      	bne.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8007234:	4ba7      	ldr	r3, [pc, #668]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800723a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800723e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007242:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007246:	4aa3      	ldr	r2, [pc, #652]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007248:	430b      	orrs	r3, r1
 800724a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800724e:	e003      	b.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007250:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007254:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8007258:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800725c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007260:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007264:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007266:	2300      	movs	r3, #0
 8007268:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800726a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800726e:	460b      	mov	r3, r1
 8007270:	4313      	orrs	r3, r2
 8007272:	d04e      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8007274:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007278:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800727c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007280:	d02e      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007282:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007286:	d827      	bhi.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007288:	2bc0      	cmp	r3, #192	@ 0xc0
 800728a:	d02b      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 800728c:	2bc0      	cmp	r3, #192	@ 0xc0
 800728e:	d823      	bhi.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007290:	2b80      	cmp	r3, #128	@ 0x80
 8007292:	d017      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 8007294:	2b80      	cmp	r3, #128	@ 0x80
 8007296:	d81f      	bhi.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007298:	2b00      	cmp	r3, #0
 800729a:	d002      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x1046>
 800729c:	2b40      	cmp	r3, #64	@ 0x40
 800729e:	d007      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 80072a0:	e01a      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072a2:	4b8c      	ldr	r3, [pc, #560]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80072a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072a6:	4a8b      	ldr	r2, [pc, #556]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80072a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072ac:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80072ae:	e01a      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80072b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072b4:	3308      	adds	r3, #8
 80072b6:	4618      	mov	r0, r3
 80072b8:	f002 f924 	bl	8009504 <RCCEx_PLL2_Config>
 80072bc:	4603      	mov	r3, r0
 80072be:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80072c2:	e010      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80072c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072c8:	3330      	adds	r3, #48	@ 0x30
 80072ca:	4618      	mov	r0, r3
 80072cc:	f002 f9b2 	bl	8009634 <RCCEx_PLL3_Config>
 80072d0:	4603      	mov	r3, r0
 80072d2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80072d6:	e006      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80072de:	e002      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 80072e0:	bf00      	nop
 80072e2:	e000      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 80072e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072e6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10d      	bne.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80072ee:	4b79      	ldr	r3, [pc, #484]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80072f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80072f4:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 80072f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007300:	4974      	ldr	r1, [pc, #464]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007302:	4313      	orrs	r3, r2
 8007304:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007308:	e003      	b.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800730a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800730e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8007312:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800731e:	623b      	str	r3, [r7, #32]
 8007320:	2300      	movs	r3, #0
 8007322:	627b      	str	r3, [r7, #36]	@ 0x24
 8007324:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007328:	460b      	mov	r3, r1
 800732a:	4313      	orrs	r3, r2
 800732c:	d055      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800732e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007332:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007336:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800733a:	d031      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 800733c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007340:	d82a      	bhi.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8007342:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007346:	d02d      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8007348:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800734c:	d824      	bhi.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800734e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007352:	d029      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x114c>
 8007354:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007358:	d81e      	bhi.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800735a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800735e:	d011      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8007360:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007364:	d818      	bhi.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8007366:	2b00      	cmp	r3, #0
 8007368:	d020      	beq.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x1150>
 800736a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800736e:	d113      	bne.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007370:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007374:	3308      	adds	r3, #8
 8007376:	4618      	mov	r0, r3
 8007378:	f002 f8c4 	bl	8009504 <RCCEx_PLL2_Config>
 800737c:	4603      	mov	r3, r0
 800737e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8007382:	e014      	b.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007384:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007388:	3330      	adds	r3, #48	@ 0x30
 800738a:	4618      	mov	r0, r3
 800738c:	f002 f952 	bl	8009634 <RCCEx_PLL3_Config>
 8007390:	4603      	mov	r3, r0
 8007392:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8007396:	e00a      	b.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800739e:	e006      	b.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80073a0:	bf00      	nop
 80073a2:	e004      	b.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80073a4:	bf00      	nop
 80073a6:	e002      	b.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80073a8:	bf00      	nop
 80073aa:	e000      	b.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80073ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073ae:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d10d      	bne.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80073b6:	4b47      	ldr	r3, [pc, #284]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80073b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80073bc:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 80073c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80073c8:	4942      	ldr	r1, [pc, #264]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80073d0:	e003      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073d2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80073d6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80073da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e2:	2100      	movs	r1, #0
 80073e4:	61b9      	str	r1, [r7, #24]
 80073e6:	f003 0302 	and.w	r3, r3, #2
 80073ea:	61fb      	str	r3, [r7, #28]
 80073ec:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80073f0:	460b      	mov	r3, r1
 80073f2:	4313      	orrs	r3, r2
 80073f4:	d03c      	beq.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 80073f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80073fe:	2b03      	cmp	r3, #3
 8007400:	d81b      	bhi.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x11de>
 8007402:	a201      	add	r2, pc, #4	@ (adr r2, 8007408 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 8007404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007408:	08007443 	.word	0x08007443
 800740c:	08007419 	.word	0x08007419
 8007410:	08007427 	.word	0x08007427
 8007414:	08007443 	.word	0x08007443
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007418:	4b2e      	ldr	r3, [pc, #184]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800741a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800741c:	4a2d      	ldr	r2, [pc, #180]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800741e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007422:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007424:	e00e      	b.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007426:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800742a:	3308      	adds	r3, #8
 800742c:	4618      	mov	r0, r3
 800742e:	f002 f869 	bl	8009504 <RCCEx_PLL2_Config>
 8007432:	4603      	mov	r3, r0
 8007434:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8007438:	e004      	b.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007440:	e000      	b.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 8007442:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007444:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007448:	2b00      	cmp	r3, #0
 800744a:	d10d      	bne.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800744c:	4b21      	ldr	r3, [pc, #132]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800744e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007452:	f023 0203 	bic.w	r2, r3, #3
 8007456:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800745a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800745e:	491d      	ldr	r1, [pc, #116]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007460:	4313      	orrs	r3, r2
 8007462:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007466:	e003      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007468:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800746c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007470:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007478:	2100      	movs	r1, #0
 800747a:	6139      	str	r1, [r7, #16]
 800747c:	f003 0304 	and.w	r3, r3, #4
 8007480:	617b      	str	r3, [r7, #20]
 8007482:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007486:	460b      	mov	r3, r1
 8007488:	4313      	orrs	r3, r2
 800748a:	d03c      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800748c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007490:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007494:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007498:	d00e      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 800749a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800749e:	d815      	bhi.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x1270>
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d019      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x127c>
 80074a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074a8:	d110      	bne.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074aa:	4b0a      	ldr	r3, [pc, #40]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80074ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ae:	4a09      	ldr	r2, [pc, #36]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80074b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074b4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80074b6:	e010      	b.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80074b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074bc:	3308      	adds	r3, #8
 80074be:	4618      	mov	r0, r3
 80074c0:	f002 f820 	bl	8009504 <RCCEx_PLL2_Config>
 80074c4:	4603      	mov	r3, r0
 80074c6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80074ca:	e006      	b.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80074d2:	e002      	b.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x127e>
 80074d4:	44020c00 	.word	0x44020c00
        break;
 80074d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074da:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d10d      	bne.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80074e2:	4b3d      	ldr	r3, [pc, #244]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80074e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80074e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80074ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074f4:	4938      	ldr	r1, [pc, #224]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80074f6:	4313      	orrs	r3, r2
 80074f8:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80074fc:	e003      	b.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074fe:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007502:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007506:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800750a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750e:	2100      	movs	r1, #0
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	f003 0310 	and.w	r3, r3, #16
 8007516:	60fb      	str	r3, [r7, #12]
 8007518:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800751c:	460b      	mov	r3, r1
 800751e:	4313      	orrs	r3, r2
 8007520:	d038      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8007522:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007526:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800752a:	2b30      	cmp	r3, #48	@ 0x30
 800752c:	d01b      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x130a>
 800752e:	2b30      	cmp	r3, #48	@ 0x30
 8007530:	d815      	bhi.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x1302>
 8007532:	2b10      	cmp	r3, #16
 8007534:	d002      	beq.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 8007536:	2b20      	cmp	r3, #32
 8007538:	d007      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 800753a:	e010      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800753c:	4b26      	ldr	r3, [pc, #152]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800753e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007540:	4a25      	ldr	r2, [pc, #148]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007542:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007546:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8007548:	e00e      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800754a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800754e:	3330      	adds	r3, #48	@ 0x30
 8007550:	4618      	mov	r0, r3
 8007552:	f002 f86f 	bl	8009634 <RCCEx_PLL3_Config>
 8007556:	4603      	mov	r3, r0
 8007558:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 800755c:	e004      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007564:	e000      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 8007566:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007568:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800756c:	2b00      	cmp	r3, #0
 800756e:	d10d      	bne.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8007570:	4b19      	ldr	r3, [pc, #100]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007572:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007576:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800757a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800757e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007582:	4915      	ldr	r1, [pc, #84]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007584:	4313      	orrs	r3, r2
 8007586:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800758a:	e003      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800758c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007590:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007594:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759c:	2100      	movs	r1, #0
 800759e:	6039      	str	r1, [r7, #0]
 80075a0:	f003 0308 	and.w	r3, r3, #8
 80075a4:	607b      	str	r3, [r7, #4]
 80075a6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80075aa:	460b      	mov	r3, r1
 80075ac:	4313      	orrs	r3, r2
 80075ae:	d00c      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80075b0:	4b09      	ldr	r3, [pc, #36]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80075b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80075b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80075ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075be:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80075c2:	4905      	ldr	r1, [pc, #20]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80075c4:	4313      	orrs	r3, r2
 80075c6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 80075ca:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	37e8      	adds	r7, #232	@ 0xe8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075d8:	44020c00 	.word	0x44020c00

080075dc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80075dc:	b480      	push	{r7}
 80075de:	b08b      	sub	sp, #44	@ 0x2c
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80075e4:	4bae      	ldr	r3, [pc, #696]	@ (80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80075e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ec:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80075ee:	4bac      	ldr	r3, [pc, #688]	@ (80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80075f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075f2:	f003 0303 	and.w	r3, r3, #3
 80075f6:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80075f8:	4ba9      	ldr	r3, [pc, #676]	@ (80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80075fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fc:	0a1b      	lsrs	r3, r3, #8
 80075fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007602:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007604:	4ba6      	ldr	r3, [pc, #664]	@ (80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007608:	091b      	lsrs	r3, r3, #4
 800760a:	f003 0301 	and.w	r3, r3, #1
 800760e:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007610:	4ba3      	ldr	r3, [pc, #652]	@ (80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007614:	08db      	lsrs	r3, r3, #3
 8007616:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800761a:	697a      	ldr	r2, [r7, #20]
 800761c:	fb02 f303 	mul.w	r3, r2, r3
 8007620:	ee07 3a90 	vmov	s15, r3
 8007624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007628:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	2b00      	cmp	r3, #0
 8007630:	f000 8126 	beq.w	8007880 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	2b03      	cmp	r3, #3
 8007638:	d053      	beq.n	80076e2 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	2b03      	cmp	r3, #3
 800763e:	d86f      	bhi.n	8007720 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	2b01      	cmp	r3, #1
 8007644:	d003      	beq.n	800764e <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	2b02      	cmp	r3, #2
 800764a:	d02b      	beq.n	80076a4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800764c:	e068      	b.n	8007720 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800764e:	4b94      	ldr	r3, [pc, #592]	@ (80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	08db      	lsrs	r3, r3, #3
 8007654:	f003 0303 	and.w	r3, r3, #3
 8007658:	4a92      	ldr	r2, [pc, #584]	@ (80078a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800765a:	fa22 f303 	lsr.w	r3, r2, r3
 800765e:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	ee07 3a90 	vmov	s15, r3
 8007666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	ee07 3a90 	vmov	s15, r3
 8007670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007674:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007678:	6a3b      	ldr	r3, [r7, #32]
 800767a:	ee07 3a90 	vmov	s15, r3
 800767e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007682:	ed97 6a04 	vldr	s12, [r7, #16]
 8007686:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80078a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800768a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800768e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007692:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800769a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800769e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80076a2:	e068      	b.n	8007776 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	ee07 3a90 	vmov	s15, r3
 80076aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ae:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80078ac <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80076b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076b6:	6a3b      	ldr	r3, [r7, #32]
 80076b8:	ee07 3a90 	vmov	s15, r3
 80076bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076c0:	ed97 6a04 	vldr	s12, [r7, #16]
 80076c4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80078a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80076c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076dc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80076e0:	e049      	b.n	8007776 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	ee07 3a90 	vmov	s15, r3
 80076e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ec:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80078b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 80076f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076f4:	6a3b      	ldr	r3, [r7, #32]
 80076f6:	ee07 3a90 	vmov	s15, r3
 80076fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076fe:	ed97 6a04 	vldr	s12, [r7, #16]
 8007702:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80078a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800770a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800770e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800771a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800771e:	e02a      	b.n	8007776 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007720:	4b5f      	ldr	r3, [pc, #380]	@ (80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	08db      	lsrs	r3, r3, #3
 8007726:	f003 0303 	and.w	r3, r3, #3
 800772a:	4a5e      	ldr	r2, [pc, #376]	@ (80078a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800772c:	fa22 f303 	lsr.w	r3, r2, r3
 8007730:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	ee07 3a90 	vmov	s15, r3
 8007738:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	ee07 3a90 	vmov	s15, r3
 8007742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800774a:	6a3b      	ldr	r3, [r7, #32]
 800774c:	ee07 3a90 	vmov	s15, r3
 8007750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007754:	ed97 6a04 	vldr	s12, [r7, #16]
 8007758:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80078a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800775c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007760:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007764:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007768:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800776c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007770:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007774:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007776:	4b4a      	ldr	r3, [pc, #296]	@ (80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800777e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007782:	d121      	bne.n	80077c8 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8007784:	4b46      	ldr	r3, [pc, #280]	@ (80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007788:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d017      	beq.n	80077c0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007790:	4b43      	ldr	r3, [pc, #268]	@ (80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007792:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007794:	0a5b      	lsrs	r3, r3, #9
 8007796:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800779a:	ee07 3a90 	vmov	s15, r3
 800779e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80077a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077a6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80077aa:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80077ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077b6:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	601a      	str	r2, [r3, #0]
 80077be:	e006      	b.n	80077ce <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	601a      	str	r2, [r3, #0]
 80077c6:	e002      	b.n	80077ce <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80077ce:	4b34      	ldr	r3, [pc, #208]	@ (80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80077da:	d121      	bne.n	8007820 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80077dc:	4b30      	ldr	r3, [pc, #192]	@ (80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80077de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d017      	beq.n	8007818 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80077e8:	4b2d      	ldr	r3, [pc, #180]	@ (80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80077ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077ec:	0c1b      	lsrs	r3, r3, #16
 80077ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077f2:	ee07 3a90 	vmov	s15, r3
 80077f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80077fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077fe:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007802:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800780a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800780e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	605a      	str	r2, [r3, #4]
 8007816:	e006      	b.n	8007826 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	605a      	str	r2, [r3, #4]
 800781e:	e002      	b.n	8007826 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007826:	4b1e      	ldr	r3, [pc, #120]	@ (80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800782e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007832:	d121      	bne.n	8007878 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8007834:	4b1a      	ldr	r3, [pc, #104]	@ (80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007838:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800783c:	2b00      	cmp	r3, #0
 800783e:	d017      	beq.n	8007870 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007840:	4b17      	ldr	r3, [pc, #92]	@ (80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007844:	0e1b      	lsrs	r3, r3, #24
 8007846:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800784a:	ee07 3a90 	vmov	s15, r3
 800784e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8007852:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007856:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800785a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800785e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007862:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007866:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800786e:	e010      	b.n	8007892 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	609a      	str	r2, [r3, #8]
}
 8007876:	e00c      	b.n	8007892 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	609a      	str	r2, [r3, #8]
}
 800787e:	e008      	b.n	8007892 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	609a      	str	r2, [r3, #8]
}
 8007892:	bf00      	nop
 8007894:	372c      	adds	r7, #44	@ 0x2c
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	44020c00 	.word	0x44020c00
 80078a4:	03d09000 	.word	0x03d09000
 80078a8:	46000000 	.word	0x46000000
 80078ac:	4a742400 	.word	0x4a742400
 80078b0:	4af42400 	.word	0x4af42400

080078b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b08b      	sub	sp, #44	@ 0x2c
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80078bc:	4bae      	ldr	r3, [pc, #696]	@ (8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80078be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078c4:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80078c6:	4bac      	ldr	r3, [pc, #688]	@ (8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80078c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ca:	f003 0303 	and.w	r3, r3, #3
 80078ce:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80078d0:	4ba9      	ldr	r3, [pc, #676]	@ (8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80078d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d4:	0a1b      	lsrs	r3, r3, #8
 80078d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078da:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80078dc:	4ba6      	ldr	r3, [pc, #664]	@ (8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80078de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e0:	091b      	lsrs	r3, r3, #4
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80078e8:	4ba3      	ldr	r3, [pc, #652]	@ (8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80078ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ec:	08db      	lsrs	r3, r3, #3
 80078ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	fb02 f303 	mul.w	r3, r2, r3
 80078f8:	ee07 3a90 	vmov	s15, r3
 80078fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007900:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	2b00      	cmp	r3, #0
 8007908:	f000 8126 	beq.w	8007b58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	2b03      	cmp	r3, #3
 8007910:	d053      	beq.n	80079ba <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	2b03      	cmp	r3, #3
 8007916:	d86f      	bhi.n	80079f8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d003      	beq.n	8007926 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	2b02      	cmp	r3, #2
 8007922:	d02b      	beq.n	800797c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8007924:	e068      	b.n	80079f8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007926:	4b94      	ldr	r3, [pc, #592]	@ (8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	08db      	lsrs	r3, r3, #3
 800792c:	f003 0303 	and.w	r3, r3, #3
 8007930:	4a92      	ldr	r2, [pc, #584]	@ (8007b7c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8007932:	fa22 f303 	lsr.w	r3, r2, r3
 8007936:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	ee07 3a90 	vmov	s15, r3
 800793e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	ee07 3a90 	vmov	s15, r3
 8007948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800794c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007950:	6a3b      	ldr	r3, [r7, #32]
 8007952:	ee07 3a90 	vmov	s15, r3
 8007956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800795a:	ed97 6a04 	vldr	s12, [r7, #16]
 800795e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8007b80 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800796a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800796e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007976:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800797a:	e068      	b.n	8007a4e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	ee07 3a90 	vmov	s15, r3
 8007982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007986:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800798a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800798e:	6a3b      	ldr	r3, [r7, #32]
 8007990:	ee07 3a90 	vmov	s15, r3
 8007994:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007998:	ed97 6a04 	vldr	s12, [r7, #16]
 800799c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007b80 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80079a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079b4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80079b8:	e049      	b.n	8007a4e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	ee07 3a90 	vmov	s15, r3
 80079c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079c4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007b88 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 80079c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079cc:	6a3b      	ldr	r3, [r7, #32]
 80079ce:	ee07 3a90 	vmov	s15, r3
 80079d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079d6:	ed97 6a04 	vldr	s12, [r7, #16]
 80079da:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8007b80 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80079de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079f2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80079f6:	e02a      	b.n	8007a4e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80079f8:	4b5f      	ldr	r3, [pc, #380]	@ (8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	08db      	lsrs	r3, r3, #3
 80079fe:	f003 0303 	and.w	r3, r3, #3
 8007a02:	4a5e      	ldr	r2, [pc, #376]	@ (8007b7c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8007a04:	fa22 f303 	lsr.w	r3, r2, r3
 8007a08:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	ee07 3a90 	vmov	s15, r3
 8007a10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	ee07 3a90 	vmov	s15, r3
 8007a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a22:	6a3b      	ldr	r3, [r7, #32]
 8007a24:	ee07 3a90 	vmov	s15, r3
 8007a28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a2c:	ed97 6a04 	vldr	s12, [r7, #16]
 8007a30:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007b80 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007a34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a48:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007a4c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a4e:	4b4a      	ldr	r3, [pc, #296]	@ (8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a5a:	d121      	bne.n	8007aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007a5c:	4b46      	ldr	r3, [pc, #280]	@ (8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d017      	beq.n	8007a98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007a68:	4b43      	ldr	r3, [pc, #268]	@ (8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a6c:	0a5b      	lsrs	r3, r3, #9
 8007a6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a72:	ee07 3a90 	vmov	s15, r3
 8007a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8007a7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a7e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007a82:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a8e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	601a      	str	r2, [r3, #0]
 8007a96:	e006      	b.n	8007aa6 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	601a      	str	r2, [r3, #0]
 8007a9e:	e002      	b.n	8007aa6 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007aa6:	4b34      	ldr	r3, [pc, #208]	@ (8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007aae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ab2:	d121      	bne.n	8007af8 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8007ab4:	4b30      	ldr	r3, [pc, #192]	@ (8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d017      	beq.n	8007af0 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007ac0:	4b2d      	ldr	r3, [pc, #180]	@ (8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ac4:	0c1b      	lsrs	r3, r3, #16
 8007ac6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007aca:	ee07 3a90 	vmov	s15, r3
 8007ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8007ad2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ad6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007ada:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007ade:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ae2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ae6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	605a      	str	r2, [r3, #4]
 8007aee:	e006      	b.n	8007afe <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	605a      	str	r2, [r3, #4]
 8007af6:	e002      	b.n	8007afe <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007afe:	4b1e      	ldr	r3, [pc, #120]	@ (8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b0a:	d121      	bne.n	8007b50 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007b0c:	4b1a      	ldr	r3, [pc, #104]	@ (8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d017      	beq.n	8007b48 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007b18:	4b17      	ldr	r3, [pc, #92]	@ (8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b1c:	0e1b      	lsrs	r3, r3, #24
 8007b1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b22:	ee07 3a90 	vmov	s15, r3
 8007b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8007b2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b2e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007b32:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007b36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b3e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007b46:	e010      	b.n	8007b6a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	609a      	str	r2, [r3, #8]
}
 8007b4e:	e00c      	b.n	8007b6a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	609a      	str	r2, [r3, #8]
}
 8007b56:	e008      	b.n	8007b6a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	609a      	str	r2, [r3, #8]
}
 8007b6a:	bf00      	nop
 8007b6c:	372c      	adds	r7, #44	@ 0x2c
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	44020c00 	.word	0x44020c00
 8007b7c:	03d09000 	.word	0x03d09000
 8007b80:	46000000 	.word	0x46000000
 8007b84:	4a742400 	.word	0x4a742400
 8007b88:	4af42400 	.word	0x4af42400

08007b8c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b08b      	sub	sp, #44	@ 0x2c
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007b94:	4bae      	ldr	r3, [pc, #696]	@ (8007e50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007b96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b9c:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8007b9e:	4bac      	ldr	r3, [pc, #688]	@ (8007e50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ba2:	f003 0303 	and.w	r3, r3, #3
 8007ba6:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8007ba8:	4ba9      	ldr	r3, [pc, #676]	@ (8007e50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bac:	0a1b      	lsrs	r3, r3, #8
 8007bae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007bb2:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8007bb4:	4ba6      	ldr	r3, [pc, #664]	@ (8007e50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bb8:	091b      	lsrs	r3, r3, #4
 8007bba:	f003 0301 	and.w	r3, r3, #1
 8007bbe:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007bc0:	4ba3      	ldr	r3, [pc, #652]	@ (8007e50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007bc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bc4:	08db      	lsrs	r3, r3, #3
 8007bc6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	fb02 f303 	mul.w	r3, r2, r3
 8007bd0:	ee07 3a90 	vmov	s15, r3
 8007bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bd8:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f000 8126 	beq.w	8007e30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	2b03      	cmp	r3, #3
 8007be8:	d053      	beq.n	8007c92 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	2b03      	cmp	r3, #3
 8007bee:	d86f      	bhi.n	8007cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d003      	beq.n	8007bfe <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	d02b      	beq.n	8007c54 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8007bfc:	e068      	b.n	8007cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007bfe:	4b94      	ldr	r3, [pc, #592]	@ (8007e50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	08db      	lsrs	r3, r3, #3
 8007c04:	f003 0303 	and.w	r3, r3, #3
 8007c08:	4a92      	ldr	r2, [pc, #584]	@ (8007e54 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c0e:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	ee07 3a90 	vmov	s15, r3
 8007c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	ee07 3a90 	vmov	s15, r3
 8007c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c28:	6a3b      	ldr	r3, [r7, #32]
 8007c2a:	ee07 3a90 	vmov	s15, r3
 8007c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c32:	ed97 6a04 	vldr	s12, [r7, #16]
 8007c36:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8007e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c4e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007c52:	e068      	b.n	8007d26 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	ee07 3a90 	vmov	s15, r3
 8007c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c5e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007e5c <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8007c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c66:	6a3b      	ldr	r3, [r7, #32]
 8007c68:	ee07 3a90 	vmov	s15, r3
 8007c6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c70:	ed97 6a04 	vldr	s12, [r7, #16]
 8007c74:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007c78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c8c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007c90:	e049      	b.n	8007d26 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	ee07 3a90 	vmov	s15, r3
 8007c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c9c:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007e60 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8007ca0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ca4:	6a3b      	ldr	r3, [r7, #32]
 8007ca6:	ee07 3a90 	vmov	s15, r3
 8007caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cae:	ed97 6a04 	vldr	s12, [r7, #16]
 8007cb2:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8007e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cca:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007cce:	e02a      	b.n	8007d26 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007cd0:	4b5f      	ldr	r3, [pc, #380]	@ (8007e50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	08db      	lsrs	r3, r3, #3
 8007cd6:	f003 0303 	and.w	r3, r3, #3
 8007cda:	4a5e      	ldr	r2, [pc, #376]	@ (8007e54 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8007ce0:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	ee07 3a90 	vmov	s15, r3
 8007ce8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	ee07 3a90 	vmov	s15, r3
 8007cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cfa:	6a3b      	ldr	r3, [r7, #32]
 8007cfc:	ee07 3a90 	vmov	s15, r3
 8007d00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d04:	ed97 6a04 	vldr	s12, [r7, #16]
 8007d08:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007d0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d20:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007d24:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d26:	4b4a      	ldr	r3, [pc, #296]	@ (8007e50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d32:	d121      	bne.n	8007d78 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007d34:	4b46      	ldr	r3, [pc, #280]	@ (8007e50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d017      	beq.n	8007d70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007d40:	4b43      	ldr	r3, [pc, #268]	@ (8007e50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d44:	0a5b      	lsrs	r3, r3, #9
 8007d46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d4a:	ee07 3a90 	vmov	s15, r3
 8007d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8007d52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d56:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007d5a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007d5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d66:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	601a      	str	r2, [r3, #0]
 8007d6e:	e006      	b.n	8007d7e <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	601a      	str	r2, [r3, #0]
 8007d76:	e002      	b.n	8007d7e <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d7e:	4b34      	ldr	r3, [pc, #208]	@ (8007e50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d8a:	d121      	bne.n	8007dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007d8c:	4b30      	ldr	r3, [pc, #192]	@ (8007e50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d017      	beq.n	8007dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007d98:	4b2d      	ldr	r3, [pc, #180]	@ (8007e50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d9c:	0c1b      	lsrs	r3, r3, #16
 8007d9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007da2:	ee07 3a90 	vmov	s15, r3
 8007da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007daa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007dae:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007db2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007db6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dbe:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	605a      	str	r2, [r3, #4]
 8007dc6:	e006      	b.n	8007dd6 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	605a      	str	r2, [r3, #4]
 8007dce:	e002      	b.n	8007dd6 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007dd6:	4b1e      	ldr	r3, [pc, #120]	@ (8007e50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007dde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007de2:	d121      	bne.n	8007e28 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007de4:	4b1a      	ldr	r3, [pc, #104]	@ (8007e50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007de8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d017      	beq.n	8007e20 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007df0:	4b17      	ldr	r3, [pc, #92]	@ (8007e50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007df2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007df4:	0e1b      	lsrs	r3, r3, #24
 8007df6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dfa:	ee07 3a90 	vmov	s15, r3
 8007dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8007e02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e06:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007e0a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e16:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8007e1e:	e010      	b.n	8007e42 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	609a      	str	r2, [r3, #8]
}
 8007e26:	e00c      	b.n	8007e42 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	609a      	str	r2, [r3, #8]
}
 8007e2e:	e008      	b.n	8007e42 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	609a      	str	r2, [r3, #8]
}
 8007e42:	bf00      	nop
 8007e44:	372c      	adds	r7, #44	@ 0x2c
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr
 8007e4e:	bf00      	nop
 8007e50:	44020c00 	.word	0x44020c00
 8007e54:	03d09000 	.word	0x03d09000
 8007e58:	46000000 	.word	0x46000000
 8007e5c:	4a742400 	.word	0x4a742400
 8007e60:	4af42400 	.word	0x4af42400

08007e64 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007e64:	b590      	push	{r4, r7, lr}
 8007e66:	b08f      	sub	sp, #60	@ 0x3c
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8007e6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e72:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8007e76:	4321      	orrs	r1, r4
 8007e78:	d150      	bne.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007e7a:	4b26      	ldr	r3, [pc, #152]	@ (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007e7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e84:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007e86:	4b23      	ldr	r3, [pc, #140]	@ (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007e88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e8c:	f003 0302 	and.w	r3, r3, #2
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d108      	bne.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e9a:	d104      	bne.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007e9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ea0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ea2:	f001 bb20 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007ea8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007eac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007eb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007eb4:	d108      	bne.n	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8007eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ebc:	d104      	bne.n	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8007ebe:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007ec2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ec4:	f001 bb0f 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8007ec8:	4b12      	ldr	r3, [pc, #72]	@ (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ed0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ed4:	d119      	bne.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007edc:	d115      	bne.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007ede:	4b0d      	ldr	r3, [pc, #52]	@ (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007ee0:	69db      	ldr	r3, [r3, #28]
 8007ee2:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8007ee6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007eea:	d30a      	bcc.n	8007f02 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8007eec:	4b09      	ldr	r3, [pc, #36]	@ (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007eee:	69db      	ldr	r3, [r3, #28]
 8007ef0:	0a1b      	lsrs	r3, r3, #8
 8007ef2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ef6:	4a08      	ldr	r2, [pc, #32]	@ (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007efc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007efe:	f001 baf2 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 8007f02:	2300      	movs	r3, #0
 8007f04:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007f06:	f001 baee 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f0e:	f001 baea 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007f12:	bf00      	nop
 8007f14:	44020c00 	.word	0x44020c00
 8007f18:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8007f1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f20:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 8007f24:	ea50 0104 	orrs.w	r1, r0, r4
 8007f28:	f000 8615 	beq.w	8008b56 <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 8007f2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f30:	2801      	cmp	r0, #1
 8007f32:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 8007f36:	f081 82d3 	bcs.w	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007f3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f3e:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8007f42:	ea50 0104 	orrs.w	r1, r0, r4
 8007f46:	f000 84d8 	beq.w	80088fa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8007f4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f4e:	2801      	cmp	r0, #1
 8007f50:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8007f54:	f081 82c4 	bcs.w	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007f58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f5c:	f1a1 0410 	sub.w	r4, r1, #16
 8007f60:	ea50 0104 	orrs.w	r1, r0, r4
 8007f64:	f001 8288 	beq.w	8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 8007f68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f6c:	2801      	cmp	r0, #1
 8007f6e:	f171 0110 	sbcs.w	r1, r1, #16
 8007f72:	f081 82b5 	bcs.w	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007f76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f7a:	f1a1 0408 	sub.w	r4, r1, #8
 8007f7e:	ea50 0104 	orrs.w	r1, r0, r4
 8007f82:	f001 81fe 	beq.w	8009382 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 8007f86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f8a:	2801      	cmp	r0, #1
 8007f8c:	f171 0108 	sbcs.w	r1, r1, #8
 8007f90:	f081 82a6 	bcs.w	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007f94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f98:	1f0c      	subs	r4, r1, #4
 8007f9a:	ea50 0104 	orrs.w	r1, r0, r4
 8007f9e:	f000 8753 	beq.w	8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 8007fa2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fa6:	2801      	cmp	r0, #1
 8007fa8:	f171 0104 	sbcs.w	r1, r1, #4
 8007fac:	f081 8298 	bcs.w	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007fb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fb4:	1e8c      	subs	r4, r1, #2
 8007fb6:	ea50 0104 	orrs.w	r1, r0, r4
 8007fba:	f001 8173 	beq.w	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 8007fbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fc2:	2801      	cmp	r0, #1
 8007fc4:	f171 0102 	sbcs.w	r1, r1, #2
 8007fc8:	f081 828a 	bcs.w	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007fcc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fd0:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8007fd4:	4321      	orrs	r1, r4
 8007fd6:	f001 80fe 	beq.w	80091d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8007fda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fde:	4ccb      	ldr	r4, [pc, #812]	@ (800830c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8007fe0:	42a0      	cmp	r0, r4
 8007fe2:	f171 0100 	sbcs.w	r1, r1, #0
 8007fe6:	f081 827b 	bcs.w	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007fea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fee:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8007ff2:	4321      	orrs	r1, r4
 8007ff4:	f001 8076 	beq.w	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 8007ff8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ffc:	4cc4      	ldr	r4, [pc, #784]	@ (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8007ffe:	42a0      	cmp	r0, r4
 8008000:	f171 0100 	sbcs.w	r1, r1, #0
 8008004:	f081 826c 	bcs.w	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008008:	e9d7 0100 	ldrd	r0, r1, [r7]
 800800c:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8008010:	4321      	orrs	r1, r4
 8008012:	f000 87b5 	beq.w	8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 8008016:	e9d7 0100 	ldrd	r0, r1, [r7]
 800801a:	4cbe      	ldr	r4, [pc, #760]	@ (8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 800801c:	42a0      	cmp	r0, r4
 800801e:	f171 0100 	sbcs.w	r1, r1, #0
 8008022:	f081 825d 	bcs.w	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008026:	e9d7 0100 	ldrd	r0, r1, [r7]
 800802a:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 800802e:	4321      	orrs	r1, r4
 8008030:	f000 8738 	beq.w	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8008034:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008038:	4cb7      	ldr	r4, [pc, #732]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 800803a:	42a0      	cmp	r0, r4
 800803c:	f171 0100 	sbcs.w	r1, r1, #0
 8008040:	f081 824e 	bcs.w	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008044:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008048:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 800804c:	4321      	orrs	r1, r4
 800804e:	f001 81cd 	beq.w	80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 8008052:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008056:	4cb1      	ldr	r4, [pc, #708]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 8008058:	42a0      	cmp	r0, r4
 800805a:	f171 0100 	sbcs.w	r1, r1, #0
 800805e:	f081 823f 	bcs.w	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008062:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008066:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 800806a:	4321      	orrs	r1, r4
 800806c:	f000 80d9 	beq.w	8008222 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008070:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008074:	4caa      	ldr	r4, [pc, #680]	@ (8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 8008076:	42a0      	cmp	r0, r4
 8008078:	f171 0100 	sbcs.w	r1, r1, #0
 800807c:	f081 8230 	bcs.w	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008080:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008084:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8008088:	4321      	orrs	r1, r4
 800808a:	f000 83da 	beq.w	8008842 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 800808e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008092:	4ca4      	ldr	r4, [pc, #656]	@ (8008324 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 8008094:	42a0      	cmp	r0, r4
 8008096:	f171 0100 	sbcs.w	r1, r1, #0
 800809a:	f081 8221 	bcs.w	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800809e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080a2:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 80080a6:	4321      	orrs	r1, r4
 80080a8:	f000 8627 	beq.w	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 80080ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080b0:	4c9d      	ldr	r4, [pc, #628]	@ (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 80080b2:	42a0      	cmp	r0, r4
 80080b4:	f171 0100 	sbcs.w	r1, r1, #0
 80080b8:	f081 8212 	bcs.w	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80080bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080c0:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 80080c4:	4321      	orrs	r1, r4
 80080c6:	f000 857a 	beq.w	8008bbe <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80080ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080ce:	4c97      	ldr	r4, [pc, #604]	@ (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 80080d0:	42a0      	cmp	r0, r4
 80080d2:	f171 0100 	sbcs.w	r1, r1, #0
 80080d6:	f081 8203 	bcs.w	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80080da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080de:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 80080e2:	4321      	orrs	r1, r4
 80080e4:	f000 84fb 	beq.w	8008ade <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 80080e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080ec:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 80080f0:	f171 0100 	sbcs.w	r1, r1, #0
 80080f4:	f081 81f4 	bcs.w	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80080f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080fc:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8008100:	4321      	orrs	r1, r4
 8008102:	f000 84a9 	beq.w	8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8008106:	e9d7 0100 	ldrd	r0, r1, [r7]
 800810a:	f248 0401 	movw	r4, #32769	@ 0x8001
 800810e:	42a0      	cmp	r0, r4
 8008110:	f171 0100 	sbcs.w	r1, r1, #0
 8008114:	f081 81e4 	bcs.w	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008118:	e9d7 0100 	ldrd	r0, r1, [r7]
 800811c:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8008120:	4321      	orrs	r1, r4
 8008122:	f000 8456 	beq.w	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 8008126:	e9d7 0100 	ldrd	r0, r1, [r7]
 800812a:	f244 0401 	movw	r4, #16385	@ 0x4001
 800812e:	42a0      	cmp	r0, r4
 8008130:	f171 0100 	sbcs.w	r1, r1, #0
 8008134:	f081 81d4 	bcs.w	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008138:	e9d7 0100 	ldrd	r0, r1, [r7]
 800813c:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8008140:	4321      	orrs	r1, r4
 8008142:	f000 8403 	beq.w	800894c <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8008146:	e9d7 0100 	ldrd	r0, r1, [r7]
 800814a:	f242 0401 	movw	r4, #8193	@ 0x2001
 800814e:	42a0      	cmp	r0, r4
 8008150:	f171 0100 	sbcs.w	r1, r1, #0
 8008154:	f081 81c4 	bcs.w	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008158:	e9d7 0100 	ldrd	r0, r1, [r7]
 800815c:	2821      	cmp	r0, #33	@ 0x21
 800815e:	f171 0100 	sbcs.w	r1, r1, #0
 8008162:	d255      	bcs.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8008164:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008168:	4301      	orrs	r1, r0
 800816a:	f001 81b9 	beq.w	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800816e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008172:	1e42      	subs	r2, r0, #1
 8008174:	f141 33ff 	adc.w	r3, r1, #4294967295
 8008178:	2a20      	cmp	r2, #32
 800817a:	f173 0100 	sbcs.w	r1, r3, #0
 800817e:	f081 81af 	bcs.w	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008182:	2a1f      	cmp	r2, #31
 8008184:	f201 81ac 	bhi.w	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008188:	a101      	add	r1, pc, #4	@ (adr r1, 8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 800818a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800818e:	bf00      	nop
 8008190:	08008267 	.word	0x08008267
 8008194:	08008365 	.word	0x08008365
 8008198:	080094e1 	.word	0x080094e1
 800819c:	08008425 	.word	0x08008425
 80081a0:	080094e1 	.word	0x080094e1
 80081a4:	080094e1 	.word	0x080094e1
 80081a8:	080094e1 	.word	0x080094e1
 80081ac:	080084f5 	.word	0x080084f5
 80081b0:	080094e1 	.word	0x080094e1
 80081b4:	080094e1 	.word	0x080094e1
 80081b8:	080094e1 	.word	0x080094e1
 80081bc:	080094e1 	.word	0x080094e1
 80081c0:	080094e1 	.word	0x080094e1
 80081c4:	080094e1 	.word	0x080094e1
 80081c8:	080094e1 	.word	0x080094e1
 80081cc:	080085d9 	.word	0x080085d9
 80081d0:	080094e1 	.word	0x080094e1
 80081d4:	080094e1 	.word	0x080094e1
 80081d8:	080094e1 	.word	0x080094e1
 80081dc:	080094e1 	.word	0x080094e1
 80081e0:	080094e1 	.word	0x080094e1
 80081e4:	080094e1 	.word	0x080094e1
 80081e8:	080094e1 	.word	0x080094e1
 80081ec:	080094e1 	.word	0x080094e1
 80081f0:	080094e1 	.word	0x080094e1
 80081f4:	080094e1 	.word	0x080094e1
 80081f8:	080094e1 	.word	0x080094e1
 80081fc:	080094e1 	.word	0x080094e1
 8008200:	080094e1 	.word	0x080094e1
 8008204:	080094e1 	.word	0x080094e1
 8008208:	080094e1 	.word	0x080094e1
 800820c:	080086af 	.word	0x080086af
 8008210:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008214:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008218:	430b      	orrs	r3, r1
 800821a:	f000 82b3 	beq.w	8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 800821e:	f001 b95f 	b.w	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8008222:	4b43      	ldr	r3, [pc, #268]	@ (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8008224:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800822c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800822e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008230:	2b00      	cmp	r3, #0
 8008232:	d108      	bne.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008234:	f107 0320 	add.w	r3, r7, #32
 8008238:	4618      	mov	r0, r3
 800823a:	f7ff f9cf 	bl	80075dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800823e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008240:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008242:	f001 b950 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8008246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008248:	2b40      	cmp	r3, #64	@ 0x40
 800824a:	d108      	bne.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800824c:	f107 0314 	add.w	r3, r7, #20
 8008250:	4618      	mov	r0, r3
 8008252:	f7ff fb2f 	bl	80078b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800825a:	f001 b944 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 800825e:	2300      	movs	r3, #0
 8008260:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008262:	f001 b940 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008266:	4b32      	ldr	r3, [pc, #200]	@ (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8008268:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800826c:	f003 0307 	and.w	r3, r3, #7
 8008270:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008274:	2b00      	cmp	r3, #0
 8008276:	d104      	bne.n	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008278:	f7fd ffc4 	bl	8006204 <HAL_RCC_GetPCLK2Freq>
 800827c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800827e:	f001 b932 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8008282:	4b2b      	ldr	r3, [pc, #172]	@ (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800828a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800828e:	d10a      	bne.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8008290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008292:	2b01      	cmp	r3, #1
 8008294:	d107      	bne.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008296:	f107 0314 	add.w	r3, r7, #20
 800829a:	4618      	mov	r0, r3
 800829c:	f7ff fb0a 	bl	80078b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80082a4:	e05c      	b.n	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 80082a6:	4b22      	ldr	r3, [pc, #136]	@ (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80082ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082b2:	d10a      	bne.n	80082ca <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80082b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d107      	bne.n	80082ca <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082ba:	f107 0308 	add.w	r3, r7, #8
 80082be:	4618      	mov	r0, r3
 80082c0:	f7ff fc64 	bl	8007b8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80082c8:	e04a      	b.n	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80082ca:	4b19      	ldr	r3, [pc, #100]	@ (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 0302 	and.w	r3, r3, #2
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	d10c      	bne.n	80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 80082d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d8:	2b03      	cmp	r3, #3
 80082da:	d109      	bne.n	80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80082dc:	4b14      	ldr	r3, [pc, #80]	@ (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	08db      	lsrs	r3, r3, #3
 80082e2:	f003 0303 	and.w	r3, r3, #3
 80082e6:	4a13      	ldr	r2, [pc, #76]	@ (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 80082e8:	fa22 f303 	lsr.w	r3, r2, r3
 80082ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80082ee:	e037      	b.n	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80082f0:	4b0f      	ldr	r3, [pc, #60]	@ (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80082f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082fc:	d11e      	bne.n	800833c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 80082fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008300:	2b04      	cmp	r3, #4
 8008302:	d11b      	bne.n	800833c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 8008304:	4b0c      	ldr	r3, [pc, #48]	@ (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 8008306:	637b      	str	r3, [r7, #52]	@ 0x34
 8008308:	e02a      	b.n	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 800830a:	bf00      	nop
 800830c:	40000001 	.word	0x40000001
 8008310:	20000001 	.word	0x20000001
 8008314:	10000001 	.word	0x10000001
 8008318:	08000001 	.word	0x08000001
 800831c:	04000001 	.word	0x04000001
 8008320:	00400001 	.word	0x00400001
 8008324:	00200001 	.word	0x00200001
 8008328:	00040001 	.word	0x00040001
 800832c:	00020001 	.word	0x00020001
 8008330:	44020c00 	.word	0x44020c00
 8008334:	03d09000 	.word	0x03d09000
 8008338:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800833c:	4ba3      	ldr	r3, [pc, #652]	@ (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800833e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008342:	f003 0302 	and.w	r3, r3, #2
 8008346:	2b02      	cmp	r3, #2
 8008348:	d106      	bne.n	8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800834a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800834c:	2b05      	cmp	r3, #5
 800834e:	d103      	bne.n	8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 8008350:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008354:	637b      	str	r3, [r7, #52]	@ 0x34
 8008356:	e003      	b.n	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 8008358:	2300      	movs	r3, #0
 800835a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800835c:	f001 b8c3 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008360:	f001 b8c1 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008364:	4b99      	ldr	r3, [pc, #612]	@ (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008366:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800836a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800836e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008372:	2b00      	cmp	r3, #0
 8008374:	d104      	bne.n	8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008376:	f7fd ff2f 	bl	80061d8 <HAL_RCC_GetPCLK1Freq>
 800837a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800837c:	f001 b8b3 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8008380:	4b92      	ldr	r3, [pc, #584]	@ (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008388:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800838c:	d10a      	bne.n	80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 800838e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008390:	2b08      	cmp	r3, #8
 8008392:	d107      	bne.n	80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008394:	f107 0314 	add.w	r3, r7, #20
 8008398:	4618      	mov	r0, r3
 800839a:	f7ff fa8b 	bl	80078b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80083a2:	e03d      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 80083a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a6:	2b10      	cmp	r3, #16
 80083a8:	d108      	bne.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083aa:	f107 0308 	add.w	r3, r7, #8
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7ff fbec 	bl	8007b8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80083b8:	f001 b895 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80083bc:	4b83      	ldr	r3, [pc, #524]	@ (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 0302 	and.w	r3, r3, #2
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	d10c      	bne.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 80083c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ca:	2b18      	cmp	r3, #24
 80083cc:	d109      	bne.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80083ce:	4b7f      	ldr	r3, [pc, #508]	@ (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	08db      	lsrs	r3, r3, #3
 80083d4:	f003 0303 	and.w	r3, r3, #3
 80083d8:	4a7d      	ldr	r2, [pc, #500]	@ (80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80083da:	fa22 f303 	lsr.w	r3, r2, r3
 80083de:	637b      	str	r3, [r7, #52]	@ 0x34
 80083e0:	e01e      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80083e2:	4b7a      	ldr	r3, [pc, #488]	@ (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083ee:	d105      	bne.n	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 80083f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f2:	2b20      	cmp	r3, #32
 80083f4:	d102      	bne.n	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 80083f6:	4b77      	ldr	r3, [pc, #476]	@ (80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80083f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80083fa:	e011      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80083fc:	4b73      	ldr	r3, [pc, #460]	@ (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80083fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008402:	f003 0302 	and.w	r3, r3, #2
 8008406:	2b02      	cmp	r3, #2
 8008408:	d106      	bne.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800840a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800840c:	2b28      	cmp	r3, #40	@ 0x28
 800840e:	d103      	bne.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 8008410:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008414:	637b      	str	r3, [r7, #52]	@ 0x34
 8008416:	e003      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 8008418:	2300      	movs	r3, #0
 800841a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800841c:	f001 b863 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008420:	f001 b861 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008424:	4b69      	ldr	r3, [pc, #420]	@ (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008426:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800842a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800842e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008432:	2b00      	cmp	r3, #0
 8008434:	d104      	bne.n	8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008436:	f7fd fecf 	bl	80061d8 <HAL_RCC_GetPCLK1Freq>
 800843a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800843c:	f001 b853 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8008440:	4b62      	ldr	r3, [pc, #392]	@ (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008448:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800844c:	d10a      	bne.n	8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 800844e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008450:	2b40      	cmp	r3, #64	@ 0x40
 8008452:	d107      	bne.n	8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008454:	f107 0314 	add.w	r3, r7, #20
 8008458:	4618      	mov	r0, r3
 800845a:	f7ff fa2b 	bl	80078b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	637b      	str	r3, [r7, #52]	@ 0x34
 8008462:	e045      	b.n	80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8008464:	4b59      	ldr	r3, [pc, #356]	@ (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800846c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008470:	d10a      	bne.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8008472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008474:	2b80      	cmp	r3, #128	@ 0x80
 8008476:	d107      	bne.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008478:	f107 0308 	add.w	r3, r7, #8
 800847c:	4618      	mov	r0, r3
 800847e:	f7ff fb85 	bl	8007b8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	637b      	str	r3, [r7, #52]	@ 0x34
 8008486:	e033      	b.n	80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008488:	4b50      	ldr	r3, [pc, #320]	@ (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 0302 	and.w	r3, r3, #2
 8008490:	2b02      	cmp	r3, #2
 8008492:	d10c      	bne.n	80084ae <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8008494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008496:	2bc0      	cmp	r3, #192	@ 0xc0
 8008498:	d109      	bne.n	80084ae <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800849a:	4b4c      	ldr	r3, [pc, #304]	@ (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	08db      	lsrs	r3, r3, #3
 80084a0:	f003 0303 	and.w	r3, r3, #3
 80084a4:	4a4a      	ldr	r2, [pc, #296]	@ (80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80084a6:	fa22 f303 	lsr.w	r3, r2, r3
 80084aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80084ac:	e020      	b.n	80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80084ae:	4b47      	ldr	r3, [pc, #284]	@ (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80084b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084ba:	d106      	bne.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 80084bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084c2:	d102      	bne.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 80084c4:	4b43      	ldr	r3, [pc, #268]	@ (80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80084c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80084c8:	e012      	b.n	80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80084ca:	4b40      	ldr	r3, [pc, #256]	@ (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80084cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084d0:	f003 0302 	and.w	r3, r3, #2
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	d107      	bne.n	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80084d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084da:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80084de:	d103      	bne.n	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 80084e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80084e6:	e003      	b.n	80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 80084e8:	2300      	movs	r3, #0
 80084ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80084ec:	f000 bffb 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80084f0:	f000 bff9 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80084f4:	4b35      	ldr	r3, [pc, #212]	@ (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80084f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80084fa:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80084fe:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008502:	2b00      	cmp	r3, #0
 8008504:	d104      	bne.n	8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008506:	f7fd fe67 	bl	80061d8 <HAL_RCC_GetPCLK1Freq>
 800850a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 800850c:	f000 bfeb 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8008510:	4b2e      	ldr	r3, [pc, #184]	@ (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008518:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800851c:	d10b      	bne.n	8008536 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 800851e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008524:	d107      	bne.n	8008536 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008526:	f107 0314 	add.w	r3, r7, #20
 800852a:	4618      	mov	r0, r3
 800852c:	f7ff f9c2 	bl	80078b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008530:	69bb      	ldr	r3, [r7, #24]
 8008532:	637b      	str	r3, [r7, #52]	@ 0x34
 8008534:	e047      	b.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8008536:	4b25      	ldr	r3, [pc, #148]	@ (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800853e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008542:	d10b      	bne.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008546:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800854a:	d107      	bne.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800854c:	f107 0308 	add.w	r3, r7, #8
 8008550:	4618      	mov	r0, r3
 8008552:	f7ff fb1b 	bl	8007b8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	637b      	str	r3, [r7, #52]	@ 0x34
 800855a:	e034      	b.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800855c:	4b1b      	ldr	r3, [pc, #108]	@ (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 0302 	and.w	r3, r3, #2
 8008564:	2b02      	cmp	r3, #2
 8008566:	d10d      	bne.n	8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8008568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800856a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800856e:	d109      	bne.n	8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008570:	4b16      	ldr	r3, [pc, #88]	@ (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	08db      	lsrs	r3, r3, #3
 8008576:	f003 0303 	and.w	r3, r3, #3
 800857a:	4a15      	ldr	r2, [pc, #84]	@ (80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 800857c:	fa22 f303 	lsr.w	r3, r2, r3
 8008580:	637b      	str	r3, [r7, #52]	@ 0x34
 8008582:	e020      	b.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8008584:	4b11      	ldr	r3, [pc, #68]	@ (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800858c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008590:	d106      	bne.n	80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8008592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008594:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008598:	d102      	bne.n	80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 800859a:	4b0e      	ldr	r3, [pc, #56]	@ (80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 800859c:	637b      	str	r3, [r7, #52]	@ 0x34
 800859e:	e012      	b.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80085a0:	4b0a      	ldr	r3, [pc, #40]	@ (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80085a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085a6:	f003 0302 	and.w	r3, r3, #2
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	d107      	bne.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 80085ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80085b4:	d103      	bne.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 80085b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80085bc:	e003      	b.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 80085be:	2300      	movs	r3, #0
 80085c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085c2:	f000 bf90 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80085c6:	f000 bf8e 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80085ca:	bf00      	nop
 80085cc:	44020c00 	.word	0x44020c00
 80085d0:	03d09000 	.word	0x03d09000
 80085d4:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80085d8:	4ba5      	ldr	r3, [pc, #660]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80085da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80085de:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80085e2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80085e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d104      	bne.n	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80085ea:	f7fd fdf5 	bl	80061d8 <HAL_RCC_GetPCLK1Freq>
 80085ee:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 80085f0:	f000 bf79 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80085f4:	4b9e      	ldr	r3, [pc, #632]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008600:	d10b      	bne.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8008602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008604:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008608:	d107      	bne.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800860a:	f107 0314 	add.w	r3, r7, #20
 800860e:	4618      	mov	r0, r3
 8008610:	f7ff f950 	bl	80078b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008614:	69bb      	ldr	r3, [r7, #24]
 8008616:	637b      	str	r3, [r7, #52]	@ 0x34
 8008618:	e047      	b.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800861a:	4b95      	ldr	r3, [pc, #596]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008622:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008626:	d10b      	bne.n	8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8008628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800862e:	d107      	bne.n	8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008630:	f107 0308 	add.w	r3, r7, #8
 8008634:	4618      	mov	r0, r3
 8008636:	f7ff faa9 	bl	8007b8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	637b      	str	r3, [r7, #52]	@ 0x34
 800863e:	e034      	b.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8008640:	4b8b      	ldr	r3, [pc, #556]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f003 0302 	and.w	r3, r3, #2
 8008648:	2b02      	cmp	r3, #2
 800864a:	d10d      	bne.n	8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 800864c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008652:	d109      	bne.n	8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008654:	4b86      	ldr	r3, [pc, #536]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	08db      	lsrs	r3, r3, #3
 800865a:	f003 0303 	and.w	r3, r3, #3
 800865e:	4a85      	ldr	r2, [pc, #532]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8008660:	fa22 f303 	lsr.w	r3, r2, r3
 8008664:	637b      	str	r3, [r7, #52]	@ 0x34
 8008666:	e020      	b.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8008668:	4b81      	ldr	r3, [pc, #516]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008670:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008674:	d106      	bne.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8008676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008678:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800867c:	d102      	bne.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 800867e:	4b7e      	ldr	r3, [pc, #504]	@ (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8008680:	637b      	str	r3, [r7, #52]	@ 0x34
 8008682:	e012      	b.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8008684:	4b7a      	ldr	r3, [pc, #488]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008686:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800868a:	f003 0302 	and.w	r3, r3, #2
 800868e:	2b02      	cmp	r3, #2
 8008690:	d107      	bne.n	80086a2 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 8008692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008694:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008698:	d103      	bne.n	80086a2 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 800869a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800869e:	637b      	str	r3, [r7, #52]	@ 0x34
 80086a0:	e003      	b.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 80086a2:	2300      	movs	r3, #0
 80086a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086a6:	f000 bf1e 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80086aa:	f000 bf1c 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 80086ae:	4b70      	ldr	r3, [pc, #448]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80086b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80086b4:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 80086b8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 80086ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d104      	bne.n	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80086c0:	f7fd fd8a 	bl	80061d8 <HAL_RCC_GetPCLK1Freq>
 80086c4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 80086c6:	f000 bf0e 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 80086ca:	4b69      	ldr	r3, [pc, #420]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086d6:	d10b      	bne.n	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 80086d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086de:	d107      	bne.n	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086e0:	f107 0314 	add.w	r3, r7, #20
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7ff f8e5 	bl	80078b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80086ee:	e047      	b.n	8008780 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80086f0:	4b5f      	ldr	r3, [pc, #380]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086fc:	d10b      	bne.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80086fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008704:	d107      	bne.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008706:	f107 0308 	add.w	r3, r7, #8
 800870a:	4618      	mov	r0, r3
 800870c:	f7ff fa3e 	bl	8007b8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	637b      	str	r3, [r7, #52]	@ 0x34
 8008714:	e034      	b.n	8008780 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8008716:	4b56      	ldr	r3, [pc, #344]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f003 0302 	and.w	r3, r3, #2
 800871e:	2b02      	cmp	r3, #2
 8008720:	d10d      	bne.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8008722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008724:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8008728:	d109      	bne.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800872a:	4b51      	ldr	r3, [pc, #324]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	08db      	lsrs	r3, r3, #3
 8008730:	f003 0303 	and.w	r3, r3, #3
 8008734:	4a4f      	ldr	r2, [pc, #316]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8008736:	fa22 f303 	lsr.w	r3, r2, r3
 800873a:	637b      	str	r3, [r7, #52]	@ 0x34
 800873c:	e020      	b.n	8008780 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800873e:	4b4c      	ldr	r3, [pc, #304]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008746:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800874a:	d106      	bne.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 800874c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800874e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008752:	d102      	bne.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 8008754:	4b48      	ldr	r3, [pc, #288]	@ (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8008756:	637b      	str	r3, [r7, #52]	@ 0x34
 8008758:	e012      	b.n	8008780 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800875a:	4b45      	ldr	r3, [pc, #276]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800875c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008760:	f003 0302 	and.w	r3, r3, #2
 8008764:	2b02      	cmp	r3, #2
 8008766:	d107      	bne.n	8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8008768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800876a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800876e:	d103      	bne.n	8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8008770:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008774:	637b      	str	r3, [r7, #52]	@ 0x34
 8008776:	e003      	b.n	8008780 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8008778:	2300      	movs	r3, #0
 800877a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800877c:	f000 beb3 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008780:	f000 beb1 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008784:	4b3a      	ldr	r3, [pc, #232]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800878a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800878e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8008790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008792:	2b00      	cmp	r3, #0
 8008794:	d104      	bne.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008796:	f7fd fd4b 	bl	8006230 <HAL_RCC_GetPCLK3Freq>
 800879a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800879c:	f000 bea3 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80087a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80087a6:	d108      	bne.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087a8:	f107 0314 	add.w	r3, r7, #20
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7ff f881 	bl	80078b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087b6:	f000 be96 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 80087ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80087c0:	d108      	bne.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087c2:	f107 0308 	add.w	r3, r7, #8
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7ff f9e0 	bl	8007b8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087d0:	f000 be89 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80087d4:	4b26      	ldr	r3, [pc, #152]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 0302 	and.w	r3, r3, #2
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d10d      	bne.n	80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 80087e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80087e6:	d109      	bne.n	80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80087e8:	4b21      	ldr	r3, [pc, #132]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	08db      	lsrs	r3, r3, #3
 80087ee:	f003 0303 	and.w	r3, r3, #3
 80087f2:	4a20      	ldr	r2, [pc, #128]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 80087f4:	fa22 f303 	lsr.w	r3, r2, r3
 80087f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80087fa:	e020      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80087fc:	4b1c      	ldr	r3, [pc, #112]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008804:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008808:	d106      	bne.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 800880a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800880c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008810:	d102      	bne.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 8008812:	4b19      	ldr	r3, [pc, #100]	@ (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8008814:	637b      	str	r3, [r7, #52]	@ 0x34
 8008816:	e012      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008818:	4b15      	ldr	r3, [pc, #84]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800881a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800881e:	f003 0302 	and.w	r3, r3, #2
 8008822:	2b02      	cmp	r3, #2
 8008824:	d107      	bne.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8008826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008828:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800882c:	d103      	bne.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 800882e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008832:	637b      	str	r3, [r7, #52]	@ 0x34
 8008834:	e003      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 8008836:	2300      	movs	r3, #0
 8008838:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800883a:	f000 be54 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800883e:	f000 be52 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008842:	4b0b      	ldr	r3, [pc, #44]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008844:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008848:	f003 0307 	and.w	r3, r3, #7
 800884c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800884e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008850:	2b00      	cmp	r3, #0
 8008852:	d104      	bne.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8008854:	f7fd fca4 	bl	80061a0 <HAL_RCC_GetHCLKFreq>
 8008858:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800885a:	f000 be44 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800885e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008860:	2b01      	cmp	r3, #1
 8008862:	d10b      	bne.n	800887c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 8008864:	f7fd fb70 	bl	8005f48 <HAL_RCC_GetSysClockFreq>
 8008868:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800886a:	f000 be3c 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800886e:	bf00      	nop
 8008870:	44020c00 	.word	0x44020c00
 8008874:	03d09000 	.word	0x03d09000
 8008878:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800887c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800887e:	2b02      	cmp	r3, #2
 8008880:	d108      	bne.n	8008894 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008882:	f107 0314 	add.w	r3, r7, #20
 8008886:	4618      	mov	r0, r3
 8008888:	f7ff f814 	bl	80078b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008890:	f000 be29 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008894:	4b9f      	ldr	r3, [pc, #636]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800889c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088a0:	d105      	bne.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 80088a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a4:	2b03      	cmp	r3, #3
 80088a6:	d102      	bne.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 80088a8:	4b9b      	ldr	r3, [pc, #620]	@ (8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 80088aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80088ac:	e023      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80088ae:	4b99      	ldr	r3, [pc, #612]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 0302 	and.w	r3, r3, #2
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	d10c      	bne.n	80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80088ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088bc:	2b04      	cmp	r3, #4
 80088be:	d109      	bne.n	80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80088c0:	4b94      	ldr	r3, [pc, #592]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	08db      	lsrs	r3, r3, #3
 80088c6:	f003 0303 	and.w	r3, r3, #3
 80088ca:	4a94      	ldr	r2, [pc, #592]	@ (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80088cc:	fa22 f303 	lsr.w	r3, r2, r3
 80088d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80088d2:	e010      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 80088d4:	4b8f      	ldr	r3, [pc, #572]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80088dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088e0:	d105      	bne.n	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 80088e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e4:	2b05      	cmp	r3, #5
 80088e6:	d102      	bne.n	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 80088e8:	4b8d      	ldr	r3, [pc, #564]	@ (8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80088ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80088ec:	e003      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 80088ee:	2300      	movs	r3, #0
 80088f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088f2:	f000 bdf8 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80088f6:	f000 bdf6 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80088fa:	4b86      	ldr	r3, [pc, #536]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80088fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008900:	f003 0308 	and.w	r3, r3, #8
 8008904:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8008906:	4b83      	ldr	r3, [pc, #524]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008908:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800890c:	f003 0302 	and.w	r3, r3, #2
 8008910:	2b02      	cmp	r3, #2
 8008912:	d106      	bne.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8008914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008916:	2b00      	cmp	r3, #0
 8008918:	d103      	bne.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 800891a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800891e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008920:	e012      	b.n	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8008922:	4b7c      	ldr	r3, [pc, #496]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008924:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008928:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800892c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008930:	d106      	bne.n	8008940 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 8008932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008934:	2b08      	cmp	r3, #8
 8008936:	d103      	bne.n	8008940 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 8008938:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800893c:	637b      	str	r3, [r7, #52]	@ 0x34
 800893e:	e003      	b.n	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8008940:	2300      	movs	r3, #0
 8008942:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8008944:	f000 bdcf 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008948:	f000 bdcd 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800894c:	4b71      	ldr	r3, [pc, #452]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800894e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008952:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008956:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800895a:	2b00      	cmp	r3, #0
 800895c:	d104      	bne.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800895e:	f7fd fc3b 	bl	80061d8 <HAL_RCC_GetPCLK1Freq>
 8008962:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008964:	f000 bdbf 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8008968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800896a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800896e:	d108      	bne.n	8008982 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008970:	f107 0308 	add.w	r3, r7, #8
 8008974:	4618      	mov	r0, r3
 8008976:	f7ff f909 	bl	8007b8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800897e:	f000 bdb2 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008982:	4b64      	ldr	r3, [pc, #400]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f003 0302 	and.w	r3, r3, #2
 800898a:	2b02      	cmp	r3, #2
 800898c:	d10d      	bne.n	80089aa <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 800898e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008990:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008994:	d109      	bne.n	80089aa <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008996:	4b5f      	ldr	r3, [pc, #380]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	08db      	lsrs	r3, r3, #3
 800899c:	f003 0303 	and.w	r3, r3, #3
 80089a0:	4a5e      	ldr	r2, [pc, #376]	@ (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80089a2:	fa22 f303 	lsr.w	r3, r2, r3
 80089a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80089a8:	e011      	b.n	80089ce <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 80089aa:	4b5a      	ldr	r3, [pc, #360]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80089b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089b6:	d106      	bne.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 80089b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80089be:	d102      	bne.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 80089c0:	4b57      	ldr	r3, [pc, #348]	@ (8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80089c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80089c4:	e003      	b.n	80089ce <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 80089c6:	2300      	movs	r3, #0
 80089c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089ca:	f000 bd8c 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80089ce:	f000 bd8a 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80089d2:	4b50      	ldr	r3, [pc, #320]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80089d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80089d8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80089dc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80089de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d104      	bne.n	80089ee <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80089e4:	f7fd fbf8 	bl	80061d8 <HAL_RCC_GetPCLK1Freq>
 80089e8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80089ea:	f000 bd7c 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 80089ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80089f4:	d108      	bne.n	8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089f6:	f107 0308 	add.w	r3, r7, #8
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7ff f8c6 	bl	8007b8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a04:	f000 bd6f 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8008a08:	4b42      	ldr	r3, [pc, #264]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f003 0302 	and.w	r3, r3, #2
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	d10d      	bne.n	8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 8008a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a16:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008a1a:	d109      	bne.n	8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a1c:	4b3d      	ldr	r3, [pc, #244]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	08db      	lsrs	r3, r3, #3
 8008a22:	f003 0303 	and.w	r3, r3, #3
 8008a26:	4a3d      	ldr	r2, [pc, #244]	@ (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8008a28:	fa22 f303 	lsr.w	r3, r2, r3
 8008a2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a2e:	e011      	b.n	8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8008a30:	4b38      	ldr	r3, [pc, #224]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a3c:	d106      	bne.n	8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 8008a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a40:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008a44:	d102      	bne.n	8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 8008a46:	4b36      	ldr	r3, [pc, #216]	@ (8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8008a48:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a4a:	e003      	b.n	8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a50:	f000 bd49 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008a54:	f000 bd47 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008a58:	4b2e      	ldr	r3, [pc, #184]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008a5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008a5e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008a62:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8008a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d104      	bne.n	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008a6a:	f7fd fbe1 	bl	8006230 <HAL_RCC_GetPCLK3Freq>
 8008a6e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008a70:	f000 bd39 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8008a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a7a:	d108      	bne.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a7c:	f107 0308 	add.w	r3, r7, #8
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7ff f883 	bl	8007b8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a8a:	f000 bd2c 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8008a8e:	4b21      	ldr	r3, [pc, #132]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f003 0302 	and.w	r3, r3, #2
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	d10d      	bne.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8008a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008aa0:	d109      	bne.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	08db      	lsrs	r3, r3, #3
 8008aa8:	f003 0303 	and.w	r3, r3, #3
 8008aac:	4a1b      	ldr	r2, [pc, #108]	@ (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8008aae:	fa22 f303 	lsr.w	r3, r2, r3
 8008ab2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ab4:	e011      	b.n	8008ada <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8008ab6:	4b17      	ldr	r3, [pc, #92]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008abe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ac2:	d106      	bne.n	8008ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 8008ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008aca:	d102      	bne.n	8008ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 8008acc:	4b14      	ldr	r3, [pc, #80]	@ (8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8008ace:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ad0:	e003      	b.n	8008ada <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ad6:	f000 bd06 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008ada:	f000 bd04 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8008ade:	4b0d      	ldr	r3, [pc, #52]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008ae0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008ae4:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8008ae8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8008aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d104      	bne.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008af0:	f7fd fb72 	bl	80061d8 <HAL_RCC_GetPCLK1Freq>
 8008af4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008af6:	f000 bcf6 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8008afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b00:	d110      	bne.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b02:	f107 0308 	add.w	r3, r7, #8
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7ff f840 	bl	8007b8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b10:	f000 bce9 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008b14:	44020c00 	.word	0x44020c00
 8008b18:	007a1200 	.word	0x007a1200
 8008b1c:	03d09000 	.word	0x03d09000
 8008b20:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8008b24:	4ba4      	ldr	r3, [pc, #656]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 0302 	and.w	r3, r3, #2
 8008b2c:	2b02      	cmp	r3, #2
 8008b2e:	d10e      	bne.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 8008b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b36:	d10a      	bne.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b38:	4b9f      	ldr	r3, [pc, #636]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	08db      	lsrs	r3, r3, #3
 8008b3e:	f003 0303 	and.w	r3, r3, #3
 8008b42:	4a9e      	ldr	r2, [pc, #632]	@ (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8008b44:	fa22 f303 	lsr.w	r3, r2, r3
 8008b48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b4a:	f000 bccc 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b52:	f000 bcc8 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8008b56:	4b98      	ldr	r3, [pc, #608]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008b58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008b5c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008b60:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8008b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d104      	bne.n	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008b68:	f7fd fb62 	bl	8006230 <HAL_RCC_GetPCLK3Freq>
 8008b6c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008b6e:	f000 bcba 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 8008b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008b78:	d108      	bne.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b7a:	f107 0308 	add.w	r3, r7, #8
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7ff f804 	bl	8007b8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b88:	f000 bcad 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8008b8c:	4b8a      	ldr	r3, [pc, #552]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f003 0302 	and.w	r3, r3, #2
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	d10e      	bne.n	8008bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8008b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b9e:	d10a      	bne.n	8008bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ba0:	4b85      	ldr	r3, [pc, #532]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	08db      	lsrs	r3, r3, #3
 8008ba6:	f003 0303 	and.w	r3, r3, #3
 8008baa:	4a84      	ldr	r2, [pc, #528]	@ (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8008bac:	fa22 f303 	lsr.w	r3, r2, r3
 8008bb0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008bb2:	f000 bc98 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008bba:	f000 bc94 	b.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008bbe:	4b7e      	ldr	r3, [pc, #504]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008bc0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008bc4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008bc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8008bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bcc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008bd0:	d056      	beq.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 8008bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008bd8:	f200 808b 	bhi.w	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8008bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008be2:	d03e      	beq.n	8008c62 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 8008be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bea:	f200 8082 	bhi.w	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8008bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008bf4:	d027      	beq.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8008bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008bfc:	d879      	bhi.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8008bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c04:	d017      	beq.n	8008c36 <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 8008c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c0c:	d871      	bhi.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8008c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d004      	beq.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8008c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c1a:	d004      	beq.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 8008c1c:	e069      	b.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008c1e:	f7fd fb07 	bl	8006230 <HAL_RCC_GetPCLK3Freq>
 8008c22:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008c24:	e068      	b.n	8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c26:	f107 0314 	add.w	r3, r7, #20
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7fe fe42 	bl	80078b4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008c34:	e060      	b.n	8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c36:	f107 0308 	add.w	r3, r7, #8
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7fe ffa6 	bl	8007b8c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008c44:	e058      	b.n	8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008c46:	4b5c      	ldr	r3, [pc, #368]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008c48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c4c:	f003 0302 	and.w	r3, r3, #2
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d103      	bne.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 8008c54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c58:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008c5a:	e04d      	b.n	8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008c60:	e04a      	b.n	8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008c62:	4b55      	ldr	r3, [pc, #340]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008c64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c70:	d103      	bne.n	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 8008c72:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008c76:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008c78:	e03e      	b.n	8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008c7e:	e03b      	b.n	8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008c80:	4b4d      	ldr	r3, [pc, #308]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008c82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008c86:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c8c:	4b4a      	ldr	r3, [pc, #296]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 0302 	and.w	r3, r3, #2
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d10c      	bne.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 8008c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d109      	bne.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c9e:	4b46      	ldr	r3, [pc, #280]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	08db      	lsrs	r3, r3, #3
 8008ca4:	f003 0303 	and.w	r3, r3, #3
 8008ca8:	4a44      	ldr	r2, [pc, #272]	@ (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8008caa:	fa22 f303 	lsr.w	r3, r2, r3
 8008cae:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cb0:	e01e      	b.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008cb2:	4b41      	ldr	r3, [pc, #260]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008cba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cbe:	d106      	bne.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8008cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cc6:	d102      	bne.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008cc8:	4b3d      	ldr	r3, [pc, #244]	@ (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8008cca:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ccc:	e010      	b.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008cce:	4b3a      	ldr	r3, [pc, #232]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cd6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cda:	d106      	bne.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 8008cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cde:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ce2:	d102      	bne.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008ce4:	4b37      	ldr	r3, [pc, #220]	@ (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 8008ce6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ce8:	e002      	b.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008cea:	2300      	movs	r3, #0
 8008cec:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008cee:	e003      	b.n	8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8008cf0:	e002      	b.n	8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008cf6:	bf00      	nop
          }
        }
        break;
 8008cf8:	e3f5      	b.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008cfa:	4b2f      	ldr	r3, [pc, #188]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008cfc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008d00:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008d04:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d08:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008d0c:	d05f      	beq.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 8008d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d10:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008d14:	f200 8094 	bhi.w	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8008d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008d1e:	d03f      	beq.n	8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 8008d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008d26:	f200 808b 	bhi.w	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8008d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008d30:	d028      	beq.n	8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8008d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008d38:	f200 8082 	bhi.w	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8008d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d42:	d017      	beq.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 8008d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d4a:	d879      	bhi.n	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8008d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d004      	beq.n	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8008d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d58:	d004      	beq.n	8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 8008d5a:	e071      	b.n	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8008d5c:	f7fd fa3c 	bl	80061d8 <HAL_RCC_GetPCLK1Freq>
 8008d60:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008d62:	e070      	b.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d64:	f107 0314 	add.w	r3, r7, #20
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7fe fda3 	bl	80078b4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008d72:	e068      	b.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d74:	f107 0308 	add.w	r3, r7, #8
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f7fe ff07 	bl	8007b8c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008d82:	e060      	b.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008d84:	4b0c      	ldr	r3, [pc, #48]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008d86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d8a:	f003 0302 	and.w	r3, r3, #2
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	d103      	bne.n	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 8008d92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d96:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008d98:	e055      	b.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008d9e:	e052      	b.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008da0:	4b05      	ldr	r3, [pc, #20]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008da2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008da6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008daa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008dae:	d10b      	bne.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 8008db0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008db4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008db6:	e046      	b.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8008db8:	44020c00 	.word	0x44020c00
 8008dbc:	03d09000 	.word	0x03d09000
 8008dc0:	003d0900 	.word	0x003d0900
 8008dc4:	007a1200 	.word	0x007a1200
              frequency = 0;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008dcc:	e03b      	b.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008dce:	4bae      	ldr	r3, [pc, #696]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008dd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008dd4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008dda:	4bab      	ldr	r3, [pc, #684]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f003 0302 	and.w	r3, r3, #2
 8008de2:	2b02      	cmp	r3, #2
 8008de4:	d10c      	bne.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 8008de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d109      	bne.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008dec:	4ba6      	ldr	r3, [pc, #664]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	08db      	lsrs	r3, r3, #3
 8008df2:	f003 0303 	and.w	r3, r3, #3
 8008df6:	4aa5      	ldr	r2, [pc, #660]	@ (800908c <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8008df8:	fa22 f303 	lsr.w	r3, r2, r3
 8008dfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dfe:	e01e      	b.n	8008e3e <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e00:	4ba1      	ldr	r3, [pc, #644]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e0c:	d106      	bne.n	8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 8008e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e14:	d102      	bne.n	8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008e16:	4b9e      	ldr	r3, [pc, #632]	@ (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8008e18:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e1a:	e010      	b.n	8008e3e <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e1c:	4b9a      	ldr	r3, [pc, #616]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e28:	d106      	bne.n	8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 8008e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e30:	d102      	bne.n	8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008e32:	4b98      	ldr	r3, [pc, #608]	@ (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8008e34:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e36:	e002      	b.n	8008e3e <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008e3c:	e003      	b.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8008e3e:	e002      	b.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 8008e40:	2300      	movs	r3, #0
 8008e42:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e44:	bf00      	nop
          }
        }
        break;
 8008e46:	e34e      	b.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008e48:	4b8f      	ldr	r3, [pc, #572]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008e4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008e4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e52:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8008e54:	4b8c      	ldr	r3, [pc, #560]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e60:	d105      	bne.n	8008e6e <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 8008e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d102      	bne.n	8008e6e <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 8008e68:	4b8a      	ldr	r3, [pc, #552]	@ (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8008e6a:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8008e6c:	e33b      	b.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8008e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e74:	d107      	bne.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e76:	f107 0320 	add.w	r3, r7, #32
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7fe fbae 	bl	80075dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e84:	e32f      	b.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8008e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e8c:	d107      	bne.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e8e:	f107 0314 	add.w	r3, r7, #20
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7fe fd0e 	bl	80078b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e9c:	e323      	b.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ea2:	e320      	b.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8008ea4:	4b78      	ldr	r3, [pc, #480]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008eaa:	f003 0307 	and.w	r3, r3, #7
 8008eae:	633b      	str	r3, [r7, #48]	@ 0x30
 8008eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb2:	2b04      	cmp	r3, #4
 8008eb4:	d860      	bhi.n	8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 8008eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8008eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ebc:	08008ed1 	.word	0x08008ed1
 8008ec0:	08008ee1 	.word	0x08008ee1
 8008ec4:	08008ef1 	.word	0x08008ef1
 8008ec8:	08008f01 	.word	0x08008f01
 8008ecc:	08008f07 	.word	0x08008f07
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ed0:	f107 0320 	add.w	r3, r7, #32
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7fe fb81 	bl	80075dc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008edc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ede:	e04e      	b.n	8008f7e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ee0:	f107 0314 	add.w	r3, r7, #20
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7fe fce5 	bl	80078b4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008eee:	e046      	b.n	8008f7e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ef0:	f107 0308 	add.w	r3, r7, #8
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7fe fe49 	bl	8007b8c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008efe:	e03e      	b.n	8008f7e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008f00:	4b65      	ldr	r3, [pc, #404]	@ (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8008f02:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f04:	e03b      	b.n	8008f7e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f06:	4b60      	ldr	r3, [pc, #384]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008f08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008f0c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008f10:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f12:	4b5d      	ldr	r3, [pc, #372]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f003 0302 	and.w	r3, r3, #2
 8008f1a:	2b02      	cmp	r3, #2
 8008f1c:	d10c      	bne.n	8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 8008f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d109      	bne.n	8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f24:	4b58      	ldr	r3, [pc, #352]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	08db      	lsrs	r3, r3, #3
 8008f2a:	f003 0303 	and.w	r3, r3, #3
 8008f2e:	4a57      	ldr	r2, [pc, #348]	@ (800908c <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8008f30:	fa22 f303 	lsr.w	r3, r2, r3
 8008f34:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f36:	e01e      	b.n	8008f76 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f38:	4b53      	ldr	r3, [pc, #332]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f44:	d106      	bne.n	8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 8008f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f4c:	d102      	bne.n	8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008f4e:	4b50      	ldr	r3, [pc, #320]	@ (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8008f50:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f52:	e010      	b.n	8008f76 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f54:	4b4c      	ldr	r3, [pc, #304]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f60:	d106      	bne.n	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 8008f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f68:	d102      	bne.n	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008f6a:	4b4a      	ldr	r3, [pc, #296]	@ (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8008f6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f6e:	e002      	b.n	8008f76 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008f70:	2300      	movs	r3, #0
 8008f72:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008f74:	e003      	b.n	8008f7e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8008f76:	e002      	b.n	8008f7e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f7c:	bf00      	nop
          }
        }
        break;
 8008f7e:	e2b2      	b.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008f80:	4b41      	ldr	r3, [pc, #260]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f8e:	2b20      	cmp	r3, #32
 8008f90:	f200 80a4 	bhi.w	80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 8008f94:	a201      	add	r2, pc, #4	@ (adr r2, 8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 8008f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f9a:	bf00      	nop
 8008f9c:	08009021 	.word	0x08009021
 8008fa0:	080090dd 	.word	0x080090dd
 8008fa4:	080090dd 	.word	0x080090dd
 8008fa8:	080090dd 	.word	0x080090dd
 8008fac:	080090dd 	.word	0x080090dd
 8008fb0:	080090dd 	.word	0x080090dd
 8008fb4:	080090dd 	.word	0x080090dd
 8008fb8:	080090dd 	.word	0x080090dd
 8008fbc:	08009031 	.word	0x08009031
 8008fc0:	080090dd 	.word	0x080090dd
 8008fc4:	080090dd 	.word	0x080090dd
 8008fc8:	080090dd 	.word	0x080090dd
 8008fcc:	080090dd 	.word	0x080090dd
 8008fd0:	080090dd 	.word	0x080090dd
 8008fd4:	080090dd 	.word	0x080090dd
 8008fd8:	080090dd 	.word	0x080090dd
 8008fdc:	08009041 	.word	0x08009041
 8008fe0:	080090dd 	.word	0x080090dd
 8008fe4:	080090dd 	.word	0x080090dd
 8008fe8:	080090dd 	.word	0x080090dd
 8008fec:	080090dd 	.word	0x080090dd
 8008ff0:	080090dd 	.word	0x080090dd
 8008ff4:	080090dd 	.word	0x080090dd
 8008ff8:	080090dd 	.word	0x080090dd
 8008ffc:	08009051 	.word	0x08009051
 8009000:	080090dd 	.word	0x080090dd
 8009004:	080090dd 	.word	0x080090dd
 8009008:	080090dd 	.word	0x080090dd
 800900c:	080090dd 	.word	0x080090dd
 8009010:	080090dd 	.word	0x080090dd
 8009014:	080090dd 	.word	0x080090dd
 8009018:	080090dd 	.word	0x080090dd
 800901c:	08009057 	.word	0x08009057
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009020:	f107 0320 	add.w	r3, r7, #32
 8009024:	4618      	mov	r0, r3
 8009026:	f7fe fad9 	bl	80075dc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800902a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800902c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800902e:	e058      	b.n	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009030:	f107 0314 	add.w	r3, r7, #20
 8009034:	4618      	mov	r0, r3
 8009036:	f7fe fc3d 	bl	80078b4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800903e:	e050      	b.n	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009040:	f107 0308 	add.w	r3, r7, #8
 8009044:	4618      	mov	r0, r3
 8009046:	f7fe fda1 	bl	8007b8c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800904e:	e048      	b.n	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009050:	4b11      	ldr	r3, [pc, #68]	@ (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8009052:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009054:	e045      	b.n	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009056:	4b0c      	ldr	r3, [pc, #48]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009058:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800905c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009060:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009062:	4b09      	ldr	r3, [pc, #36]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f003 0302 	and.w	r3, r3, #2
 800906a:	2b02      	cmp	r3, #2
 800906c:	d116      	bne.n	800909c <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 800906e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009070:	2b00      	cmp	r3, #0
 8009072:	d113      	bne.n	800909c <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009074:	4b04      	ldr	r3, [pc, #16]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	08db      	lsrs	r3, r3, #3
 800907a:	f003 0303 	and.w	r3, r3, #3
 800907e:	4a03      	ldr	r2, [pc, #12]	@ (800908c <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8009080:	fa22 f303 	lsr.w	r3, r2, r3
 8009084:	637b      	str	r3, [r7, #52]	@ 0x34
 8009086:	e028      	b.n	80090da <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8009088:	44020c00 	.word	0x44020c00
 800908c:	03d09000 	.word	0x03d09000
 8009090:	003d0900 	.word	0x003d0900
 8009094:	007a1200 	.word	0x007a1200
 8009098:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800909c:	4b95      	ldr	r3, [pc, #596]	@ (80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80090a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090a8:	d106      	bne.n	80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 80090aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090b0:	d102      	bne.n	80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80090b2:	4b91      	ldr	r3, [pc, #580]	@ (80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80090b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80090b6:	e010      	b.n	80090da <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80090b8:	4b8e      	ldr	r3, [pc, #568]	@ (80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090c4:	d106      	bne.n	80090d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 80090c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090cc:	d102      	bne.n	80090d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80090ce:	4b8b      	ldr	r3, [pc, #556]	@ (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80090d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80090d2:	e002      	b.n	80090da <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80090d4:	2300      	movs	r3, #0
 80090d6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80090d8:	e003      	b.n	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 80090da:	e002      	b.n	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 80090dc:	2300      	movs	r3, #0
 80090de:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80090e0:	bf00      	nop
          }
        }
        break;
 80090e2:	e200      	b.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80090e4:	4b83      	ldr	r3, [pc, #524]	@ (80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80090e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80090ea:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80090ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80090f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090f6:	d031      	beq.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 80090f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090fe:	d866      	bhi.n	80091ce <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8009100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009102:	2bc0      	cmp	r3, #192	@ 0xc0
 8009104:	d027      	beq.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 8009106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009108:	2bc0      	cmp	r3, #192	@ 0xc0
 800910a:	d860      	bhi.n	80091ce <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 800910c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800910e:	2b80      	cmp	r3, #128	@ 0x80
 8009110:	d019      	beq.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 8009112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009114:	2b80      	cmp	r3, #128	@ 0x80
 8009116:	d85a      	bhi.n	80091ce <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8009118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800911a:	2b00      	cmp	r3, #0
 800911c:	d003      	beq.n	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 800911e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009120:	2b40      	cmp	r3, #64	@ 0x40
 8009122:	d008      	beq.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 8009124:	e053      	b.n	80091ce <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009126:	f107 0320 	add.w	r3, r7, #32
 800912a:	4618      	mov	r0, r3
 800912c:	f7fe fa56 	bl	80075dc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009132:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009134:	e04e      	b.n	80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009136:	f107 0314 	add.w	r3, r7, #20
 800913a:	4618      	mov	r0, r3
 800913c:	f7fe fbba 	bl	80078b4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009144:	e046      	b.n	80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009146:	f107 0308 	add.w	r3, r7, #8
 800914a:	4618      	mov	r0, r3
 800914c:	f7fe fd1e 	bl	8007b8c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009154:	e03e      	b.n	80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009156:	4b6a      	ldr	r3, [pc, #424]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 8009158:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800915a:	e03b      	b.n	80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800915c:	4b65      	ldr	r3, [pc, #404]	@ (80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800915e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009162:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009166:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009168:	4b62      	ldr	r3, [pc, #392]	@ (80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f003 0302 	and.w	r3, r3, #2
 8009170:	2b02      	cmp	r3, #2
 8009172:	d10c      	bne.n	800918e <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8009174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009176:	2b00      	cmp	r3, #0
 8009178:	d109      	bne.n	800918e <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800917a:	4b5e      	ldr	r3, [pc, #376]	@ (80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	08db      	lsrs	r3, r3, #3
 8009180:	f003 0303 	and.w	r3, r3, #3
 8009184:	4a5f      	ldr	r2, [pc, #380]	@ (8009304 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8009186:	fa22 f303 	lsr.w	r3, r2, r3
 800918a:	637b      	str	r3, [r7, #52]	@ 0x34
 800918c:	e01e      	b.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800918e:	4b59      	ldr	r3, [pc, #356]	@ (80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009196:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800919a:	d106      	bne.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 800919c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800919e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091a2:	d102      	bne.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80091a4:	4b54      	ldr	r3, [pc, #336]	@ (80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80091a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80091a8:	e010      	b.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80091aa:	4b52      	ldr	r3, [pc, #328]	@ (80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091b6:	d106      	bne.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 80091b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80091be:	d102      	bne.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80091c0:	4b4e      	ldr	r3, [pc, #312]	@ (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80091c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80091c4:	e002      	b.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80091c6:	2300      	movs	r3, #0
 80091c8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80091ca:	e003      	b.n	80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 80091cc:	e002      	b.n	80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 80091ce:	2300      	movs	r3, #0
 80091d0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80091d2:	bf00      	nop
          }
        }
        break;
 80091d4:	e187      	b.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80091d6:	4b47      	ldr	r3, [pc, #284]	@ (80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80091d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80091dc:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80091e0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80091e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d103      	bne.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80091e8:	f7fd f80c 	bl	8006204 <HAL_RCC_GetPCLK2Freq>
 80091ec:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80091ee:	e17a      	b.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80091f0:	4b40      	ldr	r3, [pc, #256]	@ (80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091fc:	d10b      	bne.n	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 80091fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009200:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009204:	d107      	bne.n	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009206:	f107 0314 	add.w	r3, r7, #20
 800920a:	4618      	mov	r0, r3
 800920c:	f7fe fb52 	bl	80078b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009210:	69bb      	ldr	r3, [r7, #24]
 8009212:	637b      	str	r3, [r7, #52]	@ 0x34
 8009214:	e045      	b.n	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8009216:	4b37      	ldr	r3, [pc, #220]	@ (80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800921e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009222:	d10b      	bne.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 8009224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800922a:	d107      	bne.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800922c:	f107 0308 	add.w	r3, r7, #8
 8009230:	4618      	mov	r0, r3
 8009232:	f7fe fcab 	bl	8007b8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	637b      	str	r3, [r7, #52]	@ 0x34
 800923a:	e032      	b.n	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800923c:	4b2d      	ldr	r3, [pc, #180]	@ (80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f003 0302 	and.w	r3, r3, #2
 8009244:	2b02      	cmp	r3, #2
 8009246:	d10d      	bne.n	8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 8009248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800924a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800924e:	d109      	bne.n	8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009250:	4b28      	ldr	r3, [pc, #160]	@ (80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	08db      	lsrs	r3, r3, #3
 8009256:	f003 0303 	and.w	r3, r3, #3
 800925a:	4a2a      	ldr	r2, [pc, #168]	@ (8009304 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 800925c:	fa22 f303 	lsr.w	r3, r2, r3
 8009260:	637b      	str	r3, [r7, #52]	@ 0x34
 8009262:	e01e      	b.n	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8009264:	4b23      	ldr	r3, [pc, #140]	@ (80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800926c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009270:	d106      	bne.n	8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 8009272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009274:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009278:	d102      	bne.n	8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 800927a:	4b1f      	ldr	r3, [pc, #124]	@ (80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 800927c:	637b      	str	r3, [r7, #52]	@ 0x34
 800927e:	e010      	b.n	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8009280:	4b1c      	ldr	r3, [pc, #112]	@ (80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009288:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800928c:	d106      	bne.n	800929c <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 800928e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009290:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009294:	d102      	bne.n	800929c <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 8009296:	4b19      	ldr	r3, [pc, #100]	@ (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8009298:	637b      	str	r3, [r7, #52]	@ 0x34
 800929a:	e002      	b.n	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 800929c:	2300      	movs	r3, #0
 800929e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092a0:	e121      	b.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80092a2:	e120      	b.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80092a4:	4b13      	ldr	r3, [pc, #76]	@ (80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80092a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80092aa:	f003 0303 	and.w	r3, r3, #3
 80092ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80092b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b2:	2b03      	cmp	r3, #3
 80092b4:	d861      	bhi.n	800937a <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 80092b6:	a201      	add	r2, pc, #4	@ (adr r2, 80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 80092b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092bc:	080092cd 	.word	0x080092cd
 80092c0:	080092d5 	.word	0x080092d5
 80092c4:	080092e5 	.word	0x080092e5
 80092c8:	08009309 	.word	0x08009309

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 80092cc:	f7fc ff68 	bl	80061a0 <HAL_RCC_GetHCLKFreq>
 80092d0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80092d2:	e055      	b.n	8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092d4:	f107 0320 	add.w	r3, r7, #32
 80092d8:	4618      	mov	r0, r3
 80092da:	f7fe f97f 	bl	80075dc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80092de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80092e2:	e04d      	b.n	8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092e4:	f107 0314 	add.w	r3, r7, #20
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7fe fae3 	bl	80078b4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80092f2:	e045      	b.n	8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 80092f4:	44020c00 	.word	0x44020c00
 80092f8:	003d0900 	.word	0x003d0900
 80092fc:	007a1200 	.word	0x007a1200
 8009300:	00bb8000 	.word	0x00bb8000
 8009304:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009308:	4b79      	ldr	r3, [pc, #484]	@ (80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800930a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800930e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009312:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009314:	4b76      	ldr	r3, [pc, #472]	@ (80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f003 0302 	and.w	r3, r3, #2
 800931c:	2b02      	cmp	r3, #2
 800931e:	d10c      	bne.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 8009320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009322:	2b00      	cmp	r3, #0
 8009324:	d109      	bne.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009326:	4b72      	ldr	r3, [pc, #456]	@ (80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	08db      	lsrs	r3, r3, #3
 800932c:	f003 0303 	and.w	r3, r3, #3
 8009330:	4a70      	ldr	r2, [pc, #448]	@ (80094f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 8009332:	fa22 f303 	lsr.w	r3, r2, r3
 8009336:	637b      	str	r3, [r7, #52]	@ 0x34
 8009338:	e01e      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800933a:	4b6d      	ldr	r3, [pc, #436]	@ (80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009342:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009346:	d106      	bne.n	8009356 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 8009348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800934a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800934e:	d102      	bne.n	8009356 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009350:	4b69      	ldr	r3, [pc, #420]	@ (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 8009352:	637b      	str	r3, [r7, #52]	@ 0x34
 8009354:	e010      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009356:	4b66      	ldr	r3, [pc, #408]	@ (80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800935e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009362:	d106      	bne.n	8009372 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8009364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009366:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800936a:	d102      	bne.n	8009372 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800936c:	4b63      	ldr	r3, [pc, #396]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 800936e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009370:	e002      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8009372:	2300      	movs	r3, #0
 8009374:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009376:	e003      	b.n	8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8009378:	e002      	b.n	8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 800937a:	2300      	movs	r3, #0
 800937c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800937e:	bf00      	nop
          }
        }
        break;
 8009380:	e0b1      	b.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8009382:	4b5b      	ldr	r3, [pc, #364]	@ (80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009384:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009388:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800938c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800938e:	4b58      	ldr	r3, [pc, #352]	@ (80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009390:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009394:	f003 0302 	and.w	r3, r3, #2
 8009398:	2b02      	cmp	r3, #2
 800939a:	d106      	bne.n	80093aa <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 800939c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d103      	bne.n	80093aa <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 80093a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80093a8:	e01f      	b.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 80093aa:	4b51      	ldr	r3, [pc, #324]	@ (80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80093ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093b8:	d106      	bne.n	80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 80093ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093bc:	2b40      	cmp	r3, #64	@ 0x40
 80093be:	d103      	bne.n	80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 80093c0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80093c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80093c6:	e010      	b.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 80093c8:	4b49      	ldr	r3, [pc, #292]	@ (80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80093d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093d4:	d106      	bne.n	80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 80093d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d8:	2b80      	cmp	r3, #128	@ 0x80
 80093da:	d103      	bne.n	80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 80093dc:	f248 0312 	movw	r3, #32786	@ 0x8012
 80093e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80093e2:	e002      	b.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 80093e4:	2300      	movs	r3, #0
 80093e6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80093e8:	e07d      	b.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80093ea:	e07c      	b.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80093ec:	4b40      	ldr	r3, [pc, #256]	@ (80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80093ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80093f2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80093f6:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80093f8:	4b3d      	ldr	r3, [pc, #244]	@ (80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009400:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009404:	d105      	bne.n	8009412 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 8009406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009408:	2b00      	cmp	r3, #0
 800940a:	d102      	bne.n	8009412 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 800940c:	4b3c      	ldr	r3, [pc, #240]	@ (8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 800940e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009410:	e031      	b.n	8009476 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8009412:	4b37      	ldr	r3, [pc, #220]	@ (80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800941a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800941e:	d10a      	bne.n	8009436 <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 8009420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009422:	2b10      	cmp	r3, #16
 8009424:	d107      	bne.n	8009436 <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009426:	f107 0320 	add.w	r3, r7, #32
 800942a:	4618      	mov	r0, r3
 800942c:	f7fe f8d6 	bl	80075dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009432:	637b      	str	r3, [r7, #52]	@ 0x34
 8009434:	e01f      	b.n	8009476 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8009436:	4b2e      	ldr	r3, [pc, #184]	@ (80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009438:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800943c:	f003 0302 	and.w	r3, r3, #2
 8009440:	2b02      	cmp	r3, #2
 8009442:	d106      	bne.n	8009452 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 8009444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009446:	2b20      	cmp	r3, #32
 8009448:	d103      	bne.n	8009452 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 800944a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800944e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009450:	e011      	b.n	8009476 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8009452:	4b27      	ldr	r3, [pc, #156]	@ (80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009454:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009458:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800945c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009460:	d106      	bne.n	8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 8009462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009464:	2b30      	cmp	r3, #48	@ 0x30
 8009466:	d103      	bne.n	8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 8009468:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800946c:	637b      	str	r3, [r7, #52]	@ 0x34
 800946e:	e002      	b.n	8009476 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8009470:	2300      	movs	r3, #0
 8009472:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009474:	e037      	b.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009476:	e036      	b.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8009478:	4b1d      	ldr	r3, [pc, #116]	@ (80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800947a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800947e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009482:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8009484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009486:	2b10      	cmp	r3, #16
 8009488:	d107      	bne.n	800949a <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800948a:	f107 0320 	add.w	r3, r7, #32
 800948e:	4618      	mov	r0, r3
 8009490:	f7fe f8a4 	bl	80075dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009496:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009498:	e025      	b.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800949a:	4b15      	ldr	r3, [pc, #84]	@ (80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80094a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094a6:	d10a      	bne.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 80094a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094aa:	2b20      	cmp	r3, #32
 80094ac:	d107      	bne.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094ae:	f107 0308 	add.w	r3, r7, #8
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7fe fb6a 	bl	8007b8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80094bc:	e00f      	b.n	80094de <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80094be:	4b0c      	ldr	r3, [pc, #48]	@ (80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80094c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094ca:	d105      	bne.n	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 80094cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ce:	2b30      	cmp	r3, #48	@ 0x30
 80094d0:	d102      	bne.n	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 80094d2:	4b0b      	ldr	r3, [pc, #44]	@ (8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 80094d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80094d6:	e002      	b.n	80094de <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 80094d8:	2300      	movs	r3, #0
 80094da:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 80094dc:	e003      	b.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80094de:	e002      	b.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 80094e0:	2300      	movs	r3, #0
 80094e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80094e4:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 80094e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	373c      	adds	r7, #60	@ 0x3c
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd90      	pop	{r4, r7, pc}
 80094f0:	44020c00 	.word	0x44020c00
 80094f4:	03d09000 	.word	0x03d09000
 80094f8:	003d0900 	.word	0x003d0900
 80094fc:	007a1200 	.word	0x007a1200
 8009500:	02dc6c00 	.word	0x02dc6c00

08009504 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800950c:	4b48      	ldr	r3, [pc, #288]	@ (8009630 <RCCEx_PLL2_Config+0x12c>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a47      	ldr	r2, [pc, #284]	@ (8009630 <RCCEx_PLL2_Config+0x12c>)
 8009512:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009516:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009518:	f7f9 fb9c 	bl	8002c54 <HAL_GetTick>
 800951c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800951e:	e008      	b.n	8009532 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009520:	f7f9 fb98 	bl	8002c54 <HAL_GetTick>
 8009524:	4602      	mov	r2, r0
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	1ad3      	subs	r3, r2, r3
 800952a:	2b02      	cmp	r3, #2
 800952c:	d901      	bls.n	8009532 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800952e:	2303      	movs	r3, #3
 8009530:	e07a      	b.n	8009628 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009532:	4b3f      	ldr	r3, [pc, #252]	@ (8009630 <RCCEx_PLL2_Config+0x12c>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800953a:	2b00      	cmp	r3, #0
 800953c:	d1f0      	bne.n	8009520 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800953e:	4b3c      	ldr	r3, [pc, #240]	@ (8009630 <RCCEx_PLL2_Config+0x12c>)
 8009540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009542:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009546:	f023 0303 	bic.w	r3, r3, #3
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	6811      	ldr	r1, [r2, #0]
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	6852      	ldr	r2, [r2, #4]
 8009552:	0212      	lsls	r2, r2, #8
 8009554:	430a      	orrs	r2, r1
 8009556:	4936      	ldr	r1, [pc, #216]	@ (8009630 <RCCEx_PLL2_Config+0x12c>)
 8009558:	4313      	orrs	r3, r2
 800955a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	3b01      	subs	r3, #1
 8009562:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	3b01      	subs	r3, #1
 800956c:	025b      	lsls	r3, r3, #9
 800956e:	b29b      	uxth	r3, r3
 8009570:	431a      	orrs	r2, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	691b      	ldr	r3, [r3, #16]
 8009576:	3b01      	subs	r3, #1
 8009578:	041b      	lsls	r3, r3, #16
 800957a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800957e:	431a      	orrs	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	695b      	ldr	r3, [r3, #20]
 8009584:	3b01      	subs	r3, #1
 8009586:	061b      	lsls	r3, r3, #24
 8009588:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800958c:	4928      	ldr	r1, [pc, #160]	@ (8009630 <RCCEx_PLL2_Config+0x12c>)
 800958e:	4313      	orrs	r3, r2
 8009590:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8009592:	4b27      	ldr	r3, [pc, #156]	@ (8009630 <RCCEx_PLL2_Config+0x12c>)
 8009594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009596:	f023 020c 	bic.w	r2, r3, #12
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	699b      	ldr	r3, [r3, #24]
 800959e:	4924      	ldr	r1, [pc, #144]	@ (8009630 <RCCEx_PLL2_Config+0x12c>)
 80095a0:	4313      	orrs	r3, r2
 80095a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80095a4:	4b22      	ldr	r3, [pc, #136]	@ (8009630 <RCCEx_PLL2_Config+0x12c>)
 80095a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095a8:	f023 0220 	bic.w	r2, r3, #32
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	69db      	ldr	r3, [r3, #28]
 80095b0:	491f      	ldr	r1, [pc, #124]	@ (8009630 <RCCEx_PLL2_Config+0x12c>)
 80095b2:	4313      	orrs	r3, r2
 80095b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80095b6:	4b1e      	ldr	r3, [pc, #120]	@ (8009630 <RCCEx_PLL2_Config+0x12c>)
 80095b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095be:	491c      	ldr	r1, [pc, #112]	@ (8009630 <RCCEx_PLL2_Config+0x12c>)
 80095c0:	4313      	orrs	r3, r2
 80095c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80095c4:	4b1a      	ldr	r3, [pc, #104]	@ (8009630 <RCCEx_PLL2_Config+0x12c>)
 80095c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095c8:	4a19      	ldr	r2, [pc, #100]	@ (8009630 <RCCEx_PLL2_Config+0x12c>)
 80095ca:	f023 0310 	bic.w	r3, r3, #16
 80095ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80095d0:	4b17      	ldr	r3, [pc, #92]	@ (8009630 <RCCEx_PLL2_Config+0x12c>)
 80095d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095d4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80095d8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	6a12      	ldr	r2, [r2, #32]
 80095e0:	00d2      	lsls	r2, r2, #3
 80095e2:	4913      	ldr	r1, [pc, #76]	@ (8009630 <RCCEx_PLL2_Config+0x12c>)
 80095e4:	4313      	orrs	r3, r2
 80095e6:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80095e8:	4b11      	ldr	r3, [pc, #68]	@ (8009630 <RCCEx_PLL2_Config+0x12c>)
 80095ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ec:	4a10      	ldr	r2, [pc, #64]	@ (8009630 <RCCEx_PLL2_Config+0x12c>)
 80095ee:	f043 0310 	orr.w	r3, r3, #16
 80095f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80095f4:	4b0e      	ldr	r3, [pc, #56]	@ (8009630 <RCCEx_PLL2_Config+0x12c>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a0d      	ldr	r2, [pc, #52]	@ (8009630 <RCCEx_PLL2_Config+0x12c>)
 80095fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80095fe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009600:	f7f9 fb28 	bl	8002c54 <HAL_GetTick>
 8009604:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009606:	e008      	b.n	800961a <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009608:	f7f9 fb24 	bl	8002c54 <HAL_GetTick>
 800960c:	4602      	mov	r2, r0
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	1ad3      	subs	r3, r2, r3
 8009612:	2b02      	cmp	r3, #2
 8009614:	d901      	bls.n	800961a <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8009616:	2303      	movs	r3, #3
 8009618:	e006      	b.n	8009628 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800961a:	4b05      	ldr	r3, [pc, #20]	@ (8009630 <RCCEx_PLL2_Config+0x12c>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009622:	2b00      	cmp	r3, #0
 8009624:	d0f0      	beq.n	8009608 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8009626:	2300      	movs	r3, #0

}
 8009628:	4618      	mov	r0, r3
 800962a:	3710      	adds	r7, #16
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}
 8009630:	44020c00 	.word	0x44020c00

08009634 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800963c:	4b48      	ldr	r3, [pc, #288]	@ (8009760 <RCCEx_PLL3_Config+0x12c>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a47      	ldr	r2, [pc, #284]	@ (8009760 <RCCEx_PLL3_Config+0x12c>)
 8009642:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009646:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009648:	f7f9 fb04 	bl	8002c54 <HAL_GetTick>
 800964c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800964e:	e008      	b.n	8009662 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009650:	f7f9 fb00 	bl	8002c54 <HAL_GetTick>
 8009654:	4602      	mov	r2, r0
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	1ad3      	subs	r3, r2, r3
 800965a:	2b02      	cmp	r3, #2
 800965c:	d901      	bls.n	8009662 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800965e:	2303      	movs	r3, #3
 8009660:	e07a      	b.n	8009758 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009662:	4b3f      	ldr	r3, [pc, #252]	@ (8009760 <RCCEx_PLL3_Config+0x12c>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800966a:	2b00      	cmp	r3, #0
 800966c:	d1f0      	bne.n	8009650 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800966e:	4b3c      	ldr	r3, [pc, #240]	@ (8009760 <RCCEx_PLL3_Config+0x12c>)
 8009670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009672:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009676:	f023 0303 	bic.w	r3, r3, #3
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	6811      	ldr	r1, [r2, #0]
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	6852      	ldr	r2, [r2, #4]
 8009682:	0212      	lsls	r2, r2, #8
 8009684:	430a      	orrs	r2, r1
 8009686:	4936      	ldr	r1, [pc, #216]	@ (8009760 <RCCEx_PLL3_Config+0x12c>)
 8009688:	4313      	orrs	r3, r2
 800968a:	630b      	str	r3, [r1, #48]	@ 0x30
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	3b01      	subs	r3, #1
 8009692:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	3b01      	subs	r3, #1
 800969c:	025b      	lsls	r3, r3, #9
 800969e:	b29b      	uxth	r3, r3
 80096a0:	431a      	orrs	r2, r3
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	691b      	ldr	r3, [r3, #16]
 80096a6:	3b01      	subs	r3, #1
 80096a8:	041b      	lsls	r3, r3, #16
 80096aa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80096ae:	431a      	orrs	r2, r3
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	695b      	ldr	r3, [r3, #20]
 80096b4:	3b01      	subs	r3, #1
 80096b6:	061b      	lsls	r3, r3, #24
 80096b8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80096bc:	4928      	ldr	r1, [pc, #160]	@ (8009760 <RCCEx_PLL3_Config+0x12c>)
 80096be:	4313      	orrs	r3, r2
 80096c0:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80096c2:	4b27      	ldr	r3, [pc, #156]	@ (8009760 <RCCEx_PLL3_Config+0x12c>)
 80096c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096c6:	f023 020c 	bic.w	r2, r3, #12
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	699b      	ldr	r3, [r3, #24]
 80096ce:	4924      	ldr	r1, [pc, #144]	@ (8009760 <RCCEx_PLL3_Config+0x12c>)
 80096d0:	4313      	orrs	r3, r2
 80096d2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 80096d4:	4b22      	ldr	r3, [pc, #136]	@ (8009760 <RCCEx_PLL3_Config+0x12c>)
 80096d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096d8:	f023 0220 	bic.w	r2, r3, #32
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	69db      	ldr	r3, [r3, #28]
 80096e0:	491f      	ldr	r1, [pc, #124]	@ (8009760 <RCCEx_PLL3_Config+0x12c>)
 80096e2:	4313      	orrs	r3, r2
 80096e4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80096e6:	4b1e      	ldr	r3, [pc, #120]	@ (8009760 <RCCEx_PLL3_Config+0x12c>)
 80096e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ee:	491c      	ldr	r1, [pc, #112]	@ (8009760 <RCCEx_PLL3_Config+0x12c>)
 80096f0:	4313      	orrs	r3, r2
 80096f2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 80096f4:	4b1a      	ldr	r3, [pc, #104]	@ (8009760 <RCCEx_PLL3_Config+0x12c>)
 80096f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096f8:	4a19      	ldr	r2, [pc, #100]	@ (8009760 <RCCEx_PLL3_Config+0x12c>)
 80096fa:	f023 0310 	bic.w	r3, r3, #16
 80096fe:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8009700:	4b17      	ldr	r3, [pc, #92]	@ (8009760 <RCCEx_PLL3_Config+0x12c>)
 8009702:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009704:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009708:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	6a12      	ldr	r2, [r2, #32]
 8009710:	00d2      	lsls	r2, r2, #3
 8009712:	4913      	ldr	r1, [pc, #76]	@ (8009760 <RCCEx_PLL3_Config+0x12c>)
 8009714:	4313      	orrs	r3, r2
 8009716:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8009718:	4b11      	ldr	r3, [pc, #68]	@ (8009760 <RCCEx_PLL3_Config+0x12c>)
 800971a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800971c:	4a10      	ldr	r2, [pc, #64]	@ (8009760 <RCCEx_PLL3_Config+0x12c>)
 800971e:	f043 0310 	orr.w	r3, r3, #16
 8009722:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8009724:	4b0e      	ldr	r3, [pc, #56]	@ (8009760 <RCCEx_PLL3_Config+0x12c>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a0d      	ldr	r2, [pc, #52]	@ (8009760 <RCCEx_PLL3_Config+0x12c>)
 800972a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800972e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009730:	f7f9 fa90 	bl	8002c54 <HAL_GetTick>
 8009734:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009736:	e008      	b.n	800974a <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009738:	f7f9 fa8c 	bl	8002c54 <HAL_GetTick>
 800973c:	4602      	mov	r2, r0
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	2b02      	cmp	r3, #2
 8009744:	d901      	bls.n	800974a <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8009746:	2303      	movs	r3, #3
 8009748:	e006      	b.n	8009758 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800974a:	4b05      	ldr	r3, [pc, #20]	@ (8009760 <RCCEx_PLL3_Config+0x12c>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009752:	2b00      	cmp	r3, #0
 8009754:	d0f0      	beq.n	8009738 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8009756:	2300      	movs	r3, #0
}
 8009758:	4618      	mov	r0, r3
 800975a:	3710      	adds	r7, #16
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	44020c00 	.word	0x44020c00

08009764 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d101      	bne.n	8009776 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	e049      	b.n	800980a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800977c:	b2db      	uxtb	r3, r3
 800977e:	2b00      	cmp	r3, #0
 8009780:	d106      	bne.n	8009790 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2200      	movs	r2, #0
 8009786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f7f8 ff2c 	bl	80025e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2202      	movs	r2, #2
 8009794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	3304      	adds	r3, #4
 80097a0:	4619      	mov	r1, r3
 80097a2:	4610      	mov	r0, r2
 80097a4:	f000 ff0e 	bl	800a5c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2201      	movs	r2, #1
 80097ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2201      	movs	r2, #1
 80097b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2201      	movs	r2, #1
 80097bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2201      	movs	r2, #1
 80097dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2201      	movs	r2, #1
 8009804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009808:	2300      	movs	r3, #0
}
 800980a:	4618      	mov	r0, r3
 800980c:	3708      	adds	r7, #8
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
	...

08009814 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009814:	b480      	push	{r7}
 8009816:	b085      	sub	sp, #20
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009822:	b2db      	uxtb	r3, r3
 8009824:	2b01      	cmp	r3, #1
 8009826:	d001      	beq.n	800982c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009828:	2301      	movs	r3, #1
 800982a:	e07c      	b.n	8009926 <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2202      	movs	r2, #2
 8009830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	68da      	ldr	r2, [r3, #12]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f042 0201 	orr.w	r2, r2, #1
 8009842:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a3a      	ldr	r2, [pc, #232]	@ (8009934 <HAL_TIM_Base_Start_IT+0x120>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d04a      	beq.n	80098e4 <HAL_TIM_Base_Start_IT+0xd0>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a39      	ldr	r2, [pc, #228]	@ (8009938 <HAL_TIM_Base_Start_IT+0x124>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d045      	beq.n	80098e4 <HAL_TIM_Base_Start_IT+0xd0>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009860:	d040      	beq.n	80098e4 <HAL_TIM_Base_Start_IT+0xd0>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800986a:	d03b      	beq.n	80098e4 <HAL_TIM_Base_Start_IT+0xd0>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a32      	ldr	r2, [pc, #200]	@ (800993c <HAL_TIM_Base_Start_IT+0x128>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d036      	beq.n	80098e4 <HAL_TIM_Base_Start_IT+0xd0>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a31      	ldr	r2, [pc, #196]	@ (8009940 <HAL_TIM_Base_Start_IT+0x12c>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d031      	beq.n	80098e4 <HAL_TIM_Base_Start_IT+0xd0>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a2f      	ldr	r2, [pc, #188]	@ (8009944 <HAL_TIM_Base_Start_IT+0x130>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d02c      	beq.n	80098e4 <HAL_TIM_Base_Start_IT+0xd0>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a2e      	ldr	r2, [pc, #184]	@ (8009948 <HAL_TIM_Base_Start_IT+0x134>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d027      	beq.n	80098e4 <HAL_TIM_Base_Start_IT+0xd0>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a2c      	ldr	r2, [pc, #176]	@ (800994c <HAL_TIM_Base_Start_IT+0x138>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d022      	beq.n	80098e4 <HAL_TIM_Base_Start_IT+0xd0>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a2b      	ldr	r2, [pc, #172]	@ (8009950 <HAL_TIM_Base_Start_IT+0x13c>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d01d      	beq.n	80098e4 <HAL_TIM_Base_Start_IT+0xd0>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a29      	ldr	r2, [pc, #164]	@ (8009954 <HAL_TIM_Base_Start_IT+0x140>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d018      	beq.n	80098e4 <HAL_TIM_Base_Start_IT+0xd0>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a28      	ldr	r2, [pc, #160]	@ (8009958 <HAL_TIM_Base_Start_IT+0x144>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d013      	beq.n	80098e4 <HAL_TIM_Base_Start_IT+0xd0>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a26      	ldr	r2, [pc, #152]	@ (800995c <HAL_TIM_Base_Start_IT+0x148>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d00e      	beq.n	80098e4 <HAL_TIM_Base_Start_IT+0xd0>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a25      	ldr	r2, [pc, #148]	@ (8009960 <HAL_TIM_Base_Start_IT+0x14c>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d009      	beq.n	80098e4 <HAL_TIM_Base_Start_IT+0xd0>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a23      	ldr	r2, [pc, #140]	@ (8009964 <HAL_TIM_Base_Start_IT+0x150>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d004      	beq.n	80098e4 <HAL_TIM_Base_Start_IT+0xd0>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a22      	ldr	r2, [pc, #136]	@ (8009968 <HAL_TIM_Base_Start_IT+0x154>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d115      	bne.n	8009910 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	689a      	ldr	r2, [r3, #8]
 80098ea:	4b20      	ldr	r3, [pc, #128]	@ (800996c <HAL_TIM_Base_Start_IT+0x158>)
 80098ec:	4013      	ands	r3, r2
 80098ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2b06      	cmp	r3, #6
 80098f4:	d015      	beq.n	8009922 <HAL_TIM_Base_Start_IT+0x10e>
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098fc:	d011      	beq.n	8009922 <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f042 0201 	orr.w	r2, r2, #1
 800990c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800990e:	e008      	b.n	8009922 <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f042 0201 	orr.w	r2, r2, #1
 800991e:	601a      	str	r2, [r3, #0]
 8009920:	e000      	b.n	8009924 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009922:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009924:	2300      	movs	r3, #0
}
 8009926:	4618      	mov	r0, r3
 8009928:	3714      	adds	r7, #20
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	40012c00 	.word	0x40012c00
 8009938:	50012c00 	.word	0x50012c00
 800993c:	40000400 	.word	0x40000400
 8009940:	50000400 	.word	0x50000400
 8009944:	40000800 	.word	0x40000800
 8009948:	50000800 	.word	0x50000800
 800994c:	40000c00 	.word	0x40000c00
 8009950:	50000c00 	.word	0x50000c00
 8009954:	40013400 	.word	0x40013400
 8009958:	50013400 	.word	0x50013400
 800995c:	40001800 	.word	0x40001800
 8009960:	50001800 	.word	0x50001800
 8009964:	40014000 	.word	0x40014000
 8009968:	50014000 	.word	0x50014000
 800996c:	00010007 	.word	0x00010007

08009970 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d101      	bne.n	8009982 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	e049      	b.n	8009a16 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009988:	b2db      	uxtb	r3, r3
 800998a:	2b00      	cmp	r3, #0
 800998c:	d106      	bne.n	800999c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2200      	movs	r2, #0
 8009992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 f841 	bl	8009a1e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2202      	movs	r2, #2
 80099a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	3304      	adds	r3, #4
 80099ac:	4619      	mov	r1, r3
 80099ae:	4610      	mov	r0, r2
 80099b0:	f000 fe08 	bl	800a5c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2201      	movs	r2, #1
 80099e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2201      	movs	r2, #1
 8009a00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2201      	movs	r2, #1
 8009a08:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3708      	adds	r7, #8
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009a1e:	b480      	push	{r7}
 8009a20:	b083      	sub	sp, #12
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009a26:	bf00      	nop
 8009a28:	370c      	adds	r7, #12
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr

08009a32 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b082      	sub	sp, #8
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d101      	bne.n	8009a44 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009a40:	2301      	movs	r3, #1
 8009a42:	e049      	b.n	8009ad8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d106      	bne.n	8009a5e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 f841 	bl	8009ae0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2202      	movs	r2, #2
 8009a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	3304      	adds	r3, #4
 8009a6e:	4619      	mov	r1, r3
 8009a70:	4610      	mov	r0, r2
 8009a72:	f000 fda7 	bl	800a5c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2201      	movs	r2, #1
 8009a7a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2201      	movs	r2, #1
 8009a82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2201      	movs	r2, #1
 8009a8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2201      	movs	r2, #1
 8009a92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2201      	movs	r2, #1
 8009a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2201      	movs	r2, #1
 8009aba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009ad6:	2300      	movs	r3, #0
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3708      	adds	r7, #8
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009ae8:	bf00      	nop
 8009aea:	370c      	adds	r7, #12
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d109      	bne.n	8009b18 <HAL_TIM_PWM_Start+0x24>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	bf14      	ite	ne
 8009b10:	2301      	movne	r3, #1
 8009b12:	2300      	moveq	r3, #0
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	e03c      	b.n	8009b92 <HAL_TIM_PWM_Start+0x9e>
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	2b04      	cmp	r3, #4
 8009b1c:	d109      	bne.n	8009b32 <HAL_TIM_PWM_Start+0x3e>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	bf14      	ite	ne
 8009b2a:	2301      	movne	r3, #1
 8009b2c:	2300      	moveq	r3, #0
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	e02f      	b.n	8009b92 <HAL_TIM_PWM_Start+0x9e>
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	2b08      	cmp	r3, #8
 8009b36:	d109      	bne.n	8009b4c <HAL_TIM_PWM_Start+0x58>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	bf14      	ite	ne
 8009b44:	2301      	movne	r3, #1
 8009b46:	2300      	moveq	r3, #0
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	e022      	b.n	8009b92 <HAL_TIM_PWM_Start+0x9e>
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	2b0c      	cmp	r3, #12
 8009b50:	d109      	bne.n	8009b66 <HAL_TIM_PWM_Start+0x72>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b58:	b2db      	uxtb	r3, r3
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	bf14      	ite	ne
 8009b5e:	2301      	movne	r3, #1
 8009b60:	2300      	moveq	r3, #0
 8009b62:	b2db      	uxtb	r3, r3
 8009b64:	e015      	b.n	8009b92 <HAL_TIM_PWM_Start+0x9e>
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	2b10      	cmp	r3, #16
 8009b6a:	d109      	bne.n	8009b80 <HAL_TIM_PWM_Start+0x8c>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	bf14      	ite	ne
 8009b78:	2301      	movne	r3, #1
 8009b7a:	2300      	moveq	r3, #0
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	e008      	b.n	8009b92 <HAL_TIM_PWM_Start+0x9e>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009b86:	b2db      	uxtb	r3, r3
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	bf14      	ite	ne
 8009b8c:	2301      	movne	r3, #1
 8009b8e:	2300      	moveq	r3, #0
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d001      	beq.n	8009b9a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009b96:	2301      	movs	r3, #1
 8009b98:	e0ce      	b.n	8009d38 <HAL_TIM_PWM_Start+0x244>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d104      	bne.n	8009baa <HAL_TIM_PWM_Start+0xb6>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2202      	movs	r2, #2
 8009ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009ba8:	e023      	b.n	8009bf2 <HAL_TIM_PWM_Start+0xfe>
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	2b04      	cmp	r3, #4
 8009bae:	d104      	bne.n	8009bba <HAL_TIM_PWM_Start+0xc6>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2202      	movs	r2, #2
 8009bb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009bb8:	e01b      	b.n	8009bf2 <HAL_TIM_PWM_Start+0xfe>
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	2b08      	cmp	r3, #8
 8009bbe:	d104      	bne.n	8009bca <HAL_TIM_PWM_Start+0xd6>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2202      	movs	r2, #2
 8009bc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009bc8:	e013      	b.n	8009bf2 <HAL_TIM_PWM_Start+0xfe>
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	2b0c      	cmp	r3, #12
 8009bce:	d104      	bne.n	8009bda <HAL_TIM_PWM_Start+0xe6>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2202      	movs	r2, #2
 8009bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009bd8:	e00b      	b.n	8009bf2 <HAL_TIM_PWM_Start+0xfe>
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	2b10      	cmp	r3, #16
 8009bde:	d104      	bne.n	8009bea <HAL_TIM_PWM_Start+0xf6>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2202      	movs	r2, #2
 8009be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009be8:	e003      	b.n	8009bf2 <HAL_TIM_PWM_Start+0xfe>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2202      	movs	r2, #2
 8009bee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	6839      	ldr	r1, [r7, #0]
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f001 f99e 	bl	800af3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a4e      	ldr	r2, [pc, #312]	@ (8009d40 <HAL_TIM_PWM_Start+0x24c>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d018      	beq.n	8009c3c <HAL_TIM_PWM_Start+0x148>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a4d      	ldr	r2, [pc, #308]	@ (8009d44 <HAL_TIM_PWM_Start+0x250>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d013      	beq.n	8009c3c <HAL_TIM_PWM_Start+0x148>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a4b      	ldr	r2, [pc, #300]	@ (8009d48 <HAL_TIM_PWM_Start+0x254>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d00e      	beq.n	8009c3c <HAL_TIM_PWM_Start+0x148>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4a4a      	ldr	r2, [pc, #296]	@ (8009d4c <HAL_TIM_PWM_Start+0x258>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d009      	beq.n	8009c3c <HAL_TIM_PWM_Start+0x148>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a48      	ldr	r2, [pc, #288]	@ (8009d50 <HAL_TIM_PWM_Start+0x25c>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d004      	beq.n	8009c3c <HAL_TIM_PWM_Start+0x148>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4a47      	ldr	r2, [pc, #284]	@ (8009d54 <HAL_TIM_PWM_Start+0x260>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d101      	bne.n	8009c40 <HAL_TIM_PWM_Start+0x14c>
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	e000      	b.n	8009c42 <HAL_TIM_PWM_Start+0x14e>
 8009c40:	2300      	movs	r3, #0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d007      	beq.n	8009c56 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009c54:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a39      	ldr	r2, [pc, #228]	@ (8009d40 <HAL_TIM_PWM_Start+0x24c>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d04a      	beq.n	8009cf6 <HAL_TIM_PWM_Start+0x202>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a37      	ldr	r2, [pc, #220]	@ (8009d44 <HAL_TIM_PWM_Start+0x250>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d045      	beq.n	8009cf6 <HAL_TIM_PWM_Start+0x202>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c72:	d040      	beq.n	8009cf6 <HAL_TIM_PWM_Start+0x202>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009c7c:	d03b      	beq.n	8009cf6 <HAL_TIM_PWM_Start+0x202>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4a35      	ldr	r2, [pc, #212]	@ (8009d58 <HAL_TIM_PWM_Start+0x264>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d036      	beq.n	8009cf6 <HAL_TIM_PWM_Start+0x202>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a33      	ldr	r2, [pc, #204]	@ (8009d5c <HAL_TIM_PWM_Start+0x268>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d031      	beq.n	8009cf6 <HAL_TIM_PWM_Start+0x202>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a32      	ldr	r2, [pc, #200]	@ (8009d60 <HAL_TIM_PWM_Start+0x26c>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d02c      	beq.n	8009cf6 <HAL_TIM_PWM_Start+0x202>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a30      	ldr	r2, [pc, #192]	@ (8009d64 <HAL_TIM_PWM_Start+0x270>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d027      	beq.n	8009cf6 <HAL_TIM_PWM_Start+0x202>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a2f      	ldr	r2, [pc, #188]	@ (8009d68 <HAL_TIM_PWM_Start+0x274>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d022      	beq.n	8009cf6 <HAL_TIM_PWM_Start+0x202>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a2d      	ldr	r2, [pc, #180]	@ (8009d6c <HAL_TIM_PWM_Start+0x278>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d01d      	beq.n	8009cf6 <HAL_TIM_PWM_Start+0x202>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a22      	ldr	r2, [pc, #136]	@ (8009d48 <HAL_TIM_PWM_Start+0x254>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d018      	beq.n	8009cf6 <HAL_TIM_PWM_Start+0x202>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a20      	ldr	r2, [pc, #128]	@ (8009d4c <HAL_TIM_PWM_Start+0x258>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d013      	beq.n	8009cf6 <HAL_TIM_PWM_Start+0x202>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4a27      	ldr	r2, [pc, #156]	@ (8009d70 <HAL_TIM_PWM_Start+0x27c>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d00e      	beq.n	8009cf6 <HAL_TIM_PWM_Start+0x202>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a25      	ldr	r2, [pc, #148]	@ (8009d74 <HAL_TIM_PWM_Start+0x280>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d009      	beq.n	8009cf6 <HAL_TIM_PWM_Start+0x202>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a1a      	ldr	r2, [pc, #104]	@ (8009d50 <HAL_TIM_PWM_Start+0x25c>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d004      	beq.n	8009cf6 <HAL_TIM_PWM_Start+0x202>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a18      	ldr	r2, [pc, #96]	@ (8009d54 <HAL_TIM_PWM_Start+0x260>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d115      	bne.n	8009d22 <HAL_TIM_PWM_Start+0x22e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	689a      	ldr	r2, [r3, #8]
 8009cfc:	4b1e      	ldr	r3, [pc, #120]	@ (8009d78 <HAL_TIM_PWM_Start+0x284>)
 8009cfe:	4013      	ands	r3, r2
 8009d00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2b06      	cmp	r3, #6
 8009d06:	d015      	beq.n	8009d34 <HAL_TIM_PWM_Start+0x240>
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d0e:	d011      	beq.n	8009d34 <HAL_TIM_PWM_Start+0x240>
    {
      __HAL_TIM_ENABLE(htim);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f042 0201 	orr.w	r2, r2, #1
 8009d1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d20:	e008      	b.n	8009d34 <HAL_TIM_PWM_Start+0x240>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f042 0201 	orr.w	r2, r2, #1
 8009d30:	601a      	str	r2, [r3, #0]
 8009d32:	e000      	b.n	8009d36 <HAL_TIM_PWM_Start+0x242>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d34:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3710      	adds	r7, #16
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	40012c00 	.word	0x40012c00
 8009d44:	50012c00 	.word	0x50012c00
 8009d48:	40013400 	.word	0x40013400
 8009d4c:	50013400 	.word	0x50013400
 8009d50:	40014000 	.word	0x40014000
 8009d54:	50014000 	.word	0x50014000
 8009d58:	40000400 	.word	0x40000400
 8009d5c:	50000400 	.word	0x50000400
 8009d60:	40000800 	.word	0x40000800
 8009d64:	50000800 	.word	0x50000800
 8009d68:	40000c00 	.word	0x40000c00
 8009d6c:	50000c00 	.word	0x50000c00
 8009d70:	40001800 	.word	0x40001800
 8009d74:	50001800 	.word	0x50001800
 8009d78:	00010007 	.word	0x00010007

08009d7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	68db      	ldr	r3, [r3, #12]
 8009d8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	691b      	ldr	r3, [r3, #16]
 8009d92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	f003 0302 	and.w	r3, r3, #2
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d020      	beq.n	8009de0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f003 0302 	and.w	r3, r3, #2
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d01b      	beq.n	8009de0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f06f 0202 	mvn.w	r2, #2
 8009db0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2201      	movs	r2, #1
 8009db6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	699b      	ldr	r3, [r3, #24]
 8009dbe:	f003 0303 	and.w	r3, r3, #3
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d003      	beq.n	8009dce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 fbde 	bl	800a588 <HAL_TIM_IC_CaptureCallback>
 8009dcc:	e005      	b.n	8009dda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 fbd0 	bl	800a574 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 fbe1 	bl	800a59c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	f003 0304 	and.w	r3, r3, #4
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d020      	beq.n	8009e2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f003 0304 	and.w	r3, r3, #4
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d01b      	beq.n	8009e2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f06f 0204 	mvn.w	r2, #4
 8009dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2202      	movs	r2, #2
 8009e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	699b      	ldr	r3, [r3, #24]
 8009e0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d003      	beq.n	8009e1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 fbb8 	bl	800a588 <HAL_TIM_IC_CaptureCallback>
 8009e18:	e005      	b.n	8009e26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 fbaa 	bl	800a574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 fbbb 	bl	800a59c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	f003 0308 	and.w	r3, r3, #8
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d020      	beq.n	8009e78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	f003 0308 	and.w	r3, r3, #8
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d01b      	beq.n	8009e78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f06f 0208 	mvn.w	r2, #8
 8009e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2204      	movs	r2, #4
 8009e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	69db      	ldr	r3, [r3, #28]
 8009e56:	f003 0303 	and.w	r3, r3, #3
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d003      	beq.n	8009e66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 fb92 	bl	800a588 <HAL_TIM_IC_CaptureCallback>
 8009e64:	e005      	b.n	8009e72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 fb84 	bl	800a574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 fb95 	bl	800a59c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2200      	movs	r2, #0
 8009e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	f003 0310 	and.w	r3, r3, #16
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d020      	beq.n	8009ec4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f003 0310 	and.w	r3, r3, #16
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d01b      	beq.n	8009ec4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f06f 0210 	mvn.w	r2, #16
 8009e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2208      	movs	r2, #8
 8009e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	69db      	ldr	r3, [r3, #28]
 8009ea2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d003      	beq.n	8009eb2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 fb6c 	bl	800a588 <HAL_TIM_IC_CaptureCallback>
 8009eb0:	e005      	b.n	8009ebe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 fb5e 	bl	800a574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 fb6f 	bl	800a59c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	f003 0301 	and.w	r3, r3, #1
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d00c      	beq.n	8009ee8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	f003 0301 	and.w	r3, r3, #1
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d007      	beq.n	8009ee8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f06f 0201 	mvn.w	r2, #1
 8009ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f7f7 ff96 	bl	8001e14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d104      	bne.n	8009efc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00c      	beq.n	8009f16 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d007      	beq.n	8009f16 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f001 f9ad 	bl	800b270 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d00c      	beq.n	8009f3a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d007      	beq.n	8009f3a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f001 f9a5 	bl	800b284 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d00c      	beq.n	8009f5e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d007      	beq.n	8009f5e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 fb29 	bl	800a5b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	f003 0320 	and.w	r3, r3, #32
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d00c      	beq.n	8009f82 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f003 0320 	and.w	r3, r3, #32
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d007      	beq.n	8009f82 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f06f 0220 	mvn.w	r2, #32
 8009f7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f001 f96d 	bl	800b25c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d00c      	beq.n	8009fa6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d007      	beq.n	8009fa6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009f9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f001 f979 	bl	800b298 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d00c      	beq.n	8009fca <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d007      	beq.n	8009fca <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f001 f971 	bl	800b2ac <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d00c      	beq.n	8009fee <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d007      	beq.n	8009fee <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f001 f969 	bl	800b2c0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d00c      	beq.n	800a012 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d007      	beq.n	800a012 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a00a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f001 f961 	bl	800b2d4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a012:	bf00      	nop
 800a014:	3710      	adds	r7, #16
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
	...

0800a01c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b086      	sub	sp, #24
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a028:	2300      	movs	r3, #0
 800a02a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a032:	2b01      	cmp	r3, #1
 800a034:	d101      	bne.n	800a03a <HAL_TIM_OC_ConfigChannel+0x1e>
 800a036:	2302      	movs	r3, #2
 800a038:	e066      	b.n	800a108 <HAL_TIM_OC_ConfigChannel+0xec>
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2201      	movs	r2, #1
 800a03e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2b14      	cmp	r3, #20
 800a046:	d857      	bhi.n	800a0f8 <HAL_TIM_OC_ConfigChannel+0xdc>
 800a048:	a201      	add	r2, pc, #4	@ (adr r2, 800a050 <HAL_TIM_OC_ConfigChannel+0x34>)
 800a04a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a04e:	bf00      	nop
 800a050:	0800a0a5 	.word	0x0800a0a5
 800a054:	0800a0f9 	.word	0x0800a0f9
 800a058:	0800a0f9 	.word	0x0800a0f9
 800a05c:	0800a0f9 	.word	0x0800a0f9
 800a060:	0800a0b3 	.word	0x0800a0b3
 800a064:	0800a0f9 	.word	0x0800a0f9
 800a068:	0800a0f9 	.word	0x0800a0f9
 800a06c:	0800a0f9 	.word	0x0800a0f9
 800a070:	0800a0c1 	.word	0x0800a0c1
 800a074:	0800a0f9 	.word	0x0800a0f9
 800a078:	0800a0f9 	.word	0x0800a0f9
 800a07c:	0800a0f9 	.word	0x0800a0f9
 800a080:	0800a0cf 	.word	0x0800a0cf
 800a084:	0800a0f9 	.word	0x0800a0f9
 800a088:	0800a0f9 	.word	0x0800a0f9
 800a08c:	0800a0f9 	.word	0x0800a0f9
 800a090:	0800a0dd 	.word	0x0800a0dd
 800a094:	0800a0f9 	.word	0x0800a0f9
 800a098:	0800a0f9 	.word	0x0800a0f9
 800a09c:	0800a0f9 	.word	0x0800a0f9
 800a0a0:	0800a0eb 	.word	0x0800a0eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	68b9      	ldr	r1, [r7, #8]
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f000 fb74 	bl	800a798 <TIM_OC1_SetConfig>
      break;
 800a0b0:	e025      	b.n	800a0fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	68b9      	ldr	r1, [r7, #8]
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f000 fc07 	bl	800a8cc <TIM_OC2_SetConfig>
      break;
 800a0be:	e01e      	b.n	800a0fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	68b9      	ldr	r1, [r7, #8]
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f000 fc98 	bl	800a9fc <TIM_OC3_SetConfig>
      break;
 800a0cc:	e017      	b.n	800a0fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	68b9      	ldr	r1, [r7, #8]
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f000 fd27 	bl	800ab28 <TIM_OC4_SetConfig>
      break;
 800a0da:	e010      	b.n	800a0fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	68b9      	ldr	r1, [r7, #8]
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f000 fdb8 	bl	800ac58 <TIM_OC5_SetConfig>
      break;
 800a0e8:	e009      	b.n	800a0fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	68b9      	ldr	r1, [r7, #8]
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f000 fe1b 	bl	800ad2c <TIM_OC6_SetConfig>
      break;
 800a0f6:	e002      	b.n	800a0fe <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	75fb      	strb	r3, [r7, #23]
      break;
 800a0fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2200      	movs	r2, #0
 800a102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a106:	7dfb      	ldrb	r3, [r7, #23]
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3718      	adds	r7, #24
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b086      	sub	sp, #24
 800a114:	af00      	add	r7, sp, #0
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a11c:	2300      	movs	r3, #0
 800a11e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a126:	2b01      	cmp	r3, #1
 800a128:	d101      	bne.n	800a12e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a12a:	2302      	movs	r3, #2
 800a12c:	e0ff      	b.n	800a32e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2201      	movs	r2, #1
 800a132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2b14      	cmp	r3, #20
 800a13a:	f200 80f0 	bhi.w	800a31e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a13e:	a201      	add	r2, pc, #4	@ (adr r2, 800a144 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a144:	0800a199 	.word	0x0800a199
 800a148:	0800a31f 	.word	0x0800a31f
 800a14c:	0800a31f 	.word	0x0800a31f
 800a150:	0800a31f 	.word	0x0800a31f
 800a154:	0800a1d9 	.word	0x0800a1d9
 800a158:	0800a31f 	.word	0x0800a31f
 800a15c:	0800a31f 	.word	0x0800a31f
 800a160:	0800a31f 	.word	0x0800a31f
 800a164:	0800a21b 	.word	0x0800a21b
 800a168:	0800a31f 	.word	0x0800a31f
 800a16c:	0800a31f 	.word	0x0800a31f
 800a170:	0800a31f 	.word	0x0800a31f
 800a174:	0800a25b 	.word	0x0800a25b
 800a178:	0800a31f 	.word	0x0800a31f
 800a17c:	0800a31f 	.word	0x0800a31f
 800a180:	0800a31f 	.word	0x0800a31f
 800a184:	0800a29d 	.word	0x0800a29d
 800a188:	0800a31f 	.word	0x0800a31f
 800a18c:	0800a31f 	.word	0x0800a31f
 800a190:	0800a31f 	.word	0x0800a31f
 800a194:	0800a2dd 	.word	0x0800a2dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	68b9      	ldr	r1, [r7, #8]
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f000 fafa 	bl	800a798 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	699a      	ldr	r2, [r3, #24]
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f042 0208 	orr.w	r2, r2, #8
 800a1b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	699a      	ldr	r2, [r3, #24]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f022 0204 	bic.w	r2, r2, #4
 800a1c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	6999      	ldr	r1, [r3, #24]
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	691a      	ldr	r2, [r3, #16]
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	430a      	orrs	r2, r1
 800a1d4:	619a      	str	r2, [r3, #24]
      break;
 800a1d6:	e0a5      	b.n	800a324 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	68b9      	ldr	r1, [r7, #8]
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f000 fb74 	bl	800a8cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	699a      	ldr	r2, [r3, #24]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a1f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	699a      	ldr	r2, [r3, #24]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a202:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	6999      	ldr	r1, [r3, #24]
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	691b      	ldr	r3, [r3, #16]
 800a20e:	021a      	lsls	r2, r3, #8
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	430a      	orrs	r2, r1
 800a216:	619a      	str	r2, [r3, #24]
      break;
 800a218:	e084      	b.n	800a324 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	68b9      	ldr	r1, [r7, #8]
 800a220:	4618      	mov	r0, r3
 800a222:	f000 fbeb 	bl	800a9fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	69da      	ldr	r2, [r3, #28]
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f042 0208 	orr.w	r2, r2, #8
 800a234:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	69da      	ldr	r2, [r3, #28]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f022 0204 	bic.w	r2, r2, #4
 800a244:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	69d9      	ldr	r1, [r3, #28]
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	691a      	ldr	r2, [r3, #16]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	430a      	orrs	r2, r1
 800a256:	61da      	str	r2, [r3, #28]
      break;
 800a258:	e064      	b.n	800a324 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	68b9      	ldr	r1, [r7, #8]
 800a260:	4618      	mov	r0, r3
 800a262:	f000 fc61 	bl	800ab28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	69da      	ldr	r2, [r3, #28]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a274:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	69da      	ldr	r2, [r3, #28]
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a284:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	69d9      	ldr	r1, [r3, #28]
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	691b      	ldr	r3, [r3, #16]
 800a290:	021a      	lsls	r2, r3, #8
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	430a      	orrs	r2, r1
 800a298:	61da      	str	r2, [r3, #28]
      break;
 800a29a:	e043      	b.n	800a324 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	68b9      	ldr	r1, [r7, #8]
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f000 fcd8 	bl	800ac58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f042 0208 	orr.w	r2, r2, #8
 800a2b6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f022 0204 	bic.w	r2, r2, #4
 800a2c6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	691a      	ldr	r2, [r3, #16]
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	430a      	orrs	r2, r1
 800a2d8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a2da:	e023      	b.n	800a324 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	68b9      	ldr	r1, [r7, #8]
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f000 fd22 	bl	800ad2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a2f6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a306:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	691b      	ldr	r3, [r3, #16]
 800a312:	021a      	lsls	r2, r3, #8
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	430a      	orrs	r2, r1
 800a31a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a31c:	e002      	b.n	800a324 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a31e:	2301      	movs	r3, #1
 800a320:	75fb      	strb	r3, [r7, #23]
      break;
 800a322:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2200      	movs	r2, #0
 800a328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a32c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3718      	adds	r7, #24
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop

0800a338 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a342:	2300      	movs	r3, #0
 800a344:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a34c:	2b01      	cmp	r3, #1
 800a34e:	d101      	bne.n	800a354 <HAL_TIM_ConfigClockSource+0x1c>
 800a350:	2302      	movs	r3, #2
 800a352:	e0fe      	b.n	800a552 <HAL_TIM_ConfigClockSource+0x21a>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2201      	movs	r2, #1
 800a358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2202      	movs	r2, #2
 800a360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a372:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a376:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a37e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	68ba      	ldr	r2, [r7, #8]
 800a386:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a390:	f000 80c9 	beq.w	800a526 <HAL_TIM_ConfigClockSource+0x1ee>
 800a394:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a398:	f200 80ce 	bhi.w	800a538 <HAL_TIM_ConfigClockSource+0x200>
 800a39c:	4a6f      	ldr	r2, [pc, #444]	@ (800a55c <HAL_TIM_ConfigClockSource+0x224>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	f000 80c1 	beq.w	800a526 <HAL_TIM_ConfigClockSource+0x1ee>
 800a3a4:	4a6d      	ldr	r2, [pc, #436]	@ (800a55c <HAL_TIM_ConfigClockSource+0x224>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	f200 80c6 	bhi.w	800a538 <HAL_TIM_ConfigClockSource+0x200>
 800a3ac:	4a6c      	ldr	r2, [pc, #432]	@ (800a560 <HAL_TIM_ConfigClockSource+0x228>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	f000 80b9 	beq.w	800a526 <HAL_TIM_ConfigClockSource+0x1ee>
 800a3b4:	4a6a      	ldr	r2, [pc, #424]	@ (800a560 <HAL_TIM_ConfigClockSource+0x228>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	f200 80be 	bhi.w	800a538 <HAL_TIM_ConfigClockSource+0x200>
 800a3bc:	4a69      	ldr	r2, [pc, #420]	@ (800a564 <HAL_TIM_ConfigClockSource+0x22c>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	f000 80b1 	beq.w	800a526 <HAL_TIM_ConfigClockSource+0x1ee>
 800a3c4:	4a67      	ldr	r2, [pc, #412]	@ (800a564 <HAL_TIM_ConfigClockSource+0x22c>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	f200 80b6 	bhi.w	800a538 <HAL_TIM_ConfigClockSource+0x200>
 800a3cc:	4a66      	ldr	r2, [pc, #408]	@ (800a568 <HAL_TIM_ConfigClockSource+0x230>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	f000 80a9 	beq.w	800a526 <HAL_TIM_ConfigClockSource+0x1ee>
 800a3d4:	4a64      	ldr	r2, [pc, #400]	@ (800a568 <HAL_TIM_ConfigClockSource+0x230>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	f200 80ae 	bhi.w	800a538 <HAL_TIM_ConfigClockSource+0x200>
 800a3dc:	4a63      	ldr	r2, [pc, #396]	@ (800a56c <HAL_TIM_ConfigClockSource+0x234>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	f000 80a1 	beq.w	800a526 <HAL_TIM_ConfigClockSource+0x1ee>
 800a3e4:	4a61      	ldr	r2, [pc, #388]	@ (800a56c <HAL_TIM_ConfigClockSource+0x234>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	f200 80a6 	bhi.w	800a538 <HAL_TIM_ConfigClockSource+0x200>
 800a3ec:	4a60      	ldr	r2, [pc, #384]	@ (800a570 <HAL_TIM_ConfigClockSource+0x238>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	f000 8099 	beq.w	800a526 <HAL_TIM_ConfigClockSource+0x1ee>
 800a3f4:	4a5e      	ldr	r2, [pc, #376]	@ (800a570 <HAL_TIM_ConfigClockSource+0x238>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	f200 809e 	bhi.w	800a538 <HAL_TIM_ConfigClockSource+0x200>
 800a3fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a400:	f000 8091 	beq.w	800a526 <HAL_TIM_ConfigClockSource+0x1ee>
 800a404:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a408:	f200 8096 	bhi.w	800a538 <HAL_TIM_ConfigClockSource+0x200>
 800a40c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a410:	f000 8089 	beq.w	800a526 <HAL_TIM_ConfigClockSource+0x1ee>
 800a414:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a418:	f200 808e 	bhi.w	800a538 <HAL_TIM_ConfigClockSource+0x200>
 800a41c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a420:	d03e      	beq.n	800a4a0 <HAL_TIM_ConfigClockSource+0x168>
 800a422:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a426:	f200 8087 	bhi.w	800a538 <HAL_TIM_ConfigClockSource+0x200>
 800a42a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a42e:	f000 8086 	beq.w	800a53e <HAL_TIM_ConfigClockSource+0x206>
 800a432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a436:	d87f      	bhi.n	800a538 <HAL_TIM_ConfigClockSource+0x200>
 800a438:	2b70      	cmp	r3, #112	@ 0x70
 800a43a:	d01a      	beq.n	800a472 <HAL_TIM_ConfigClockSource+0x13a>
 800a43c:	2b70      	cmp	r3, #112	@ 0x70
 800a43e:	d87b      	bhi.n	800a538 <HAL_TIM_ConfigClockSource+0x200>
 800a440:	2b60      	cmp	r3, #96	@ 0x60
 800a442:	d050      	beq.n	800a4e6 <HAL_TIM_ConfigClockSource+0x1ae>
 800a444:	2b60      	cmp	r3, #96	@ 0x60
 800a446:	d877      	bhi.n	800a538 <HAL_TIM_ConfigClockSource+0x200>
 800a448:	2b50      	cmp	r3, #80	@ 0x50
 800a44a:	d03c      	beq.n	800a4c6 <HAL_TIM_ConfigClockSource+0x18e>
 800a44c:	2b50      	cmp	r3, #80	@ 0x50
 800a44e:	d873      	bhi.n	800a538 <HAL_TIM_ConfigClockSource+0x200>
 800a450:	2b40      	cmp	r3, #64	@ 0x40
 800a452:	d058      	beq.n	800a506 <HAL_TIM_ConfigClockSource+0x1ce>
 800a454:	2b40      	cmp	r3, #64	@ 0x40
 800a456:	d86f      	bhi.n	800a538 <HAL_TIM_ConfigClockSource+0x200>
 800a458:	2b30      	cmp	r3, #48	@ 0x30
 800a45a:	d064      	beq.n	800a526 <HAL_TIM_ConfigClockSource+0x1ee>
 800a45c:	2b30      	cmp	r3, #48	@ 0x30
 800a45e:	d86b      	bhi.n	800a538 <HAL_TIM_ConfigClockSource+0x200>
 800a460:	2b20      	cmp	r3, #32
 800a462:	d060      	beq.n	800a526 <HAL_TIM_ConfigClockSource+0x1ee>
 800a464:	2b20      	cmp	r3, #32
 800a466:	d867      	bhi.n	800a538 <HAL_TIM_ConfigClockSource+0x200>
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d05c      	beq.n	800a526 <HAL_TIM_ConfigClockSource+0x1ee>
 800a46c:	2b10      	cmp	r3, #16
 800a46e:	d05a      	beq.n	800a526 <HAL_TIM_ConfigClockSource+0x1ee>
 800a470:	e062      	b.n	800a538 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a482:	f000 fd3b 	bl	800aefc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a494:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	68ba      	ldr	r2, [r7, #8]
 800a49c:	609a      	str	r2, [r3, #8]
      break;
 800a49e:	e04f      	b.n	800a540 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a4b0:	f000 fd24 	bl	800aefc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	689a      	ldr	r2, [r3, #8]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a4c2:	609a      	str	r2, [r3, #8]
      break;
 800a4c4:	e03c      	b.n	800a540 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	f000 fc96 	bl	800ae04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	2150      	movs	r1, #80	@ 0x50
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f000 fcef 	bl	800aec2 <TIM_ITRx_SetConfig>
      break;
 800a4e4:	e02c      	b.n	800a540 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	f000 fcb5 	bl	800ae62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	2160      	movs	r1, #96	@ 0x60
 800a4fe:	4618      	mov	r0, r3
 800a500:	f000 fcdf 	bl	800aec2 <TIM_ITRx_SetConfig>
      break;
 800a504:	e01c      	b.n	800a540 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a512:	461a      	mov	r2, r3
 800a514:	f000 fc76 	bl	800ae04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	2140      	movs	r1, #64	@ 0x40
 800a51e:	4618      	mov	r0, r3
 800a520:	f000 fccf 	bl	800aec2 <TIM_ITRx_SetConfig>
      break;
 800a524:	e00c      	b.n	800a540 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681a      	ldr	r2, [r3, #0]
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4619      	mov	r1, r3
 800a530:	4610      	mov	r0, r2
 800a532:	f000 fcc6 	bl	800aec2 <TIM_ITRx_SetConfig>
      break;
 800a536:	e003      	b.n	800a540 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	73fb      	strb	r3, [r7, #15]
      break;
 800a53c:	e000      	b.n	800a540 <HAL_TIM_ConfigClockSource+0x208>
      break;
 800a53e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2201      	movs	r2, #1
 800a544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2200      	movs	r2, #0
 800a54c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a550:	7bfb      	ldrb	r3, [r7, #15]
}
 800a552:	4618      	mov	r0, r3
 800a554:	3710      	adds	r7, #16
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
 800a55a:	bf00      	nop
 800a55c:	00100070 	.word	0x00100070
 800a560:	00100060 	.word	0x00100060
 800a564:	00100050 	.word	0x00100050
 800a568:	00100040 	.word	0x00100040
 800a56c:	00100030 	.word	0x00100030
 800a570:	00100020 	.word	0x00100020

0800a574 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a574:	b480      	push	{r7}
 800a576:	b083      	sub	sp, #12
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a57c:	bf00      	nop
 800a57e:	370c      	adds	r7, #12
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr

0800a588 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a588:	b480      	push	{r7}
 800a58a:	b083      	sub	sp, #12
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a590:	bf00      	nop
 800a592:	370c      	adds	r7, #12
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr

0800a59c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a5a4:	bf00      	nop
 800a5a6:	370c      	adds	r7, #12
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b083      	sub	sp, #12
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a5b8:	bf00      	nop
 800a5ba:	370c      	adds	r7, #12
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr

0800a5c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b085      	sub	sp, #20
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	4a62      	ldr	r2, [pc, #392]	@ (800a760 <TIM_Base_SetConfig+0x19c>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d02b      	beq.n	800a634 <TIM_Base_SetConfig+0x70>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	4a61      	ldr	r2, [pc, #388]	@ (800a764 <TIM_Base_SetConfig+0x1a0>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d027      	beq.n	800a634 <TIM_Base_SetConfig+0x70>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5ea:	d023      	beq.n	800a634 <TIM_Base_SetConfig+0x70>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a5f2:	d01f      	beq.n	800a634 <TIM_Base_SetConfig+0x70>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	4a5c      	ldr	r2, [pc, #368]	@ (800a768 <TIM_Base_SetConfig+0x1a4>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d01b      	beq.n	800a634 <TIM_Base_SetConfig+0x70>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	4a5b      	ldr	r2, [pc, #364]	@ (800a76c <TIM_Base_SetConfig+0x1a8>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d017      	beq.n	800a634 <TIM_Base_SetConfig+0x70>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	4a5a      	ldr	r2, [pc, #360]	@ (800a770 <TIM_Base_SetConfig+0x1ac>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d013      	beq.n	800a634 <TIM_Base_SetConfig+0x70>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	4a59      	ldr	r2, [pc, #356]	@ (800a774 <TIM_Base_SetConfig+0x1b0>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d00f      	beq.n	800a634 <TIM_Base_SetConfig+0x70>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	4a58      	ldr	r2, [pc, #352]	@ (800a778 <TIM_Base_SetConfig+0x1b4>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d00b      	beq.n	800a634 <TIM_Base_SetConfig+0x70>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	4a57      	ldr	r2, [pc, #348]	@ (800a77c <TIM_Base_SetConfig+0x1b8>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d007      	beq.n	800a634 <TIM_Base_SetConfig+0x70>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	4a56      	ldr	r2, [pc, #344]	@ (800a780 <TIM_Base_SetConfig+0x1bc>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d003      	beq.n	800a634 <TIM_Base_SetConfig+0x70>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	4a55      	ldr	r2, [pc, #340]	@ (800a784 <TIM_Base_SetConfig+0x1c0>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d108      	bne.n	800a646 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a63a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	68fa      	ldr	r2, [r7, #12]
 800a642:	4313      	orrs	r3, r2
 800a644:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	4a45      	ldr	r2, [pc, #276]	@ (800a760 <TIM_Base_SetConfig+0x19c>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d03b      	beq.n	800a6c6 <TIM_Base_SetConfig+0x102>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	4a44      	ldr	r2, [pc, #272]	@ (800a764 <TIM_Base_SetConfig+0x1a0>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d037      	beq.n	800a6c6 <TIM_Base_SetConfig+0x102>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a65c:	d033      	beq.n	800a6c6 <TIM_Base_SetConfig+0x102>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a664:	d02f      	beq.n	800a6c6 <TIM_Base_SetConfig+0x102>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	4a3f      	ldr	r2, [pc, #252]	@ (800a768 <TIM_Base_SetConfig+0x1a4>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d02b      	beq.n	800a6c6 <TIM_Base_SetConfig+0x102>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	4a3e      	ldr	r2, [pc, #248]	@ (800a76c <TIM_Base_SetConfig+0x1a8>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d027      	beq.n	800a6c6 <TIM_Base_SetConfig+0x102>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	4a3d      	ldr	r2, [pc, #244]	@ (800a770 <TIM_Base_SetConfig+0x1ac>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d023      	beq.n	800a6c6 <TIM_Base_SetConfig+0x102>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	4a3c      	ldr	r2, [pc, #240]	@ (800a774 <TIM_Base_SetConfig+0x1b0>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d01f      	beq.n	800a6c6 <TIM_Base_SetConfig+0x102>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	4a3b      	ldr	r2, [pc, #236]	@ (800a778 <TIM_Base_SetConfig+0x1b4>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d01b      	beq.n	800a6c6 <TIM_Base_SetConfig+0x102>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	4a3a      	ldr	r2, [pc, #232]	@ (800a77c <TIM_Base_SetConfig+0x1b8>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d017      	beq.n	800a6c6 <TIM_Base_SetConfig+0x102>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	4a39      	ldr	r2, [pc, #228]	@ (800a780 <TIM_Base_SetConfig+0x1bc>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d013      	beq.n	800a6c6 <TIM_Base_SetConfig+0x102>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	4a38      	ldr	r2, [pc, #224]	@ (800a784 <TIM_Base_SetConfig+0x1c0>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d00f      	beq.n	800a6c6 <TIM_Base_SetConfig+0x102>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	4a37      	ldr	r2, [pc, #220]	@ (800a788 <TIM_Base_SetConfig+0x1c4>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d00b      	beq.n	800a6c6 <TIM_Base_SetConfig+0x102>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	4a36      	ldr	r2, [pc, #216]	@ (800a78c <TIM_Base_SetConfig+0x1c8>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d007      	beq.n	800a6c6 <TIM_Base_SetConfig+0x102>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	4a35      	ldr	r2, [pc, #212]	@ (800a790 <TIM_Base_SetConfig+0x1cc>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d003      	beq.n	800a6c6 <TIM_Base_SetConfig+0x102>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	4a34      	ldr	r2, [pc, #208]	@ (800a794 <TIM_Base_SetConfig+0x1d0>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d108      	bne.n	800a6d8 <TIM_Base_SetConfig+0x114>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a6cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	68db      	ldr	r3, [r3, #12]
 800a6d2:	68fa      	ldr	r2, [r7, #12]
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	695b      	ldr	r3, [r3, #20]
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	68fa      	ldr	r2, [r7, #12]
 800a6ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	689a      	ldr	r2, [r3, #8]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	4a18      	ldr	r2, [pc, #96]	@ (800a760 <TIM_Base_SetConfig+0x19c>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d013      	beq.n	800a72c <TIM_Base_SetConfig+0x168>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	4a17      	ldr	r2, [pc, #92]	@ (800a764 <TIM_Base_SetConfig+0x1a0>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d00f      	beq.n	800a72c <TIM_Base_SetConfig+0x168>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	4a1c      	ldr	r2, [pc, #112]	@ (800a780 <TIM_Base_SetConfig+0x1bc>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d00b      	beq.n	800a72c <TIM_Base_SetConfig+0x168>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	4a1b      	ldr	r2, [pc, #108]	@ (800a784 <TIM_Base_SetConfig+0x1c0>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d007      	beq.n	800a72c <TIM_Base_SetConfig+0x168>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	4a1c      	ldr	r2, [pc, #112]	@ (800a790 <TIM_Base_SetConfig+0x1cc>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d003      	beq.n	800a72c <TIM_Base_SetConfig+0x168>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	4a1b      	ldr	r2, [pc, #108]	@ (800a794 <TIM_Base_SetConfig+0x1d0>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d103      	bne.n	800a734 <TIM_Base_SetConfig+0x170>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	691a      	ldr	r2, [r3, #16]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2201      	movs	r2, #1
 800a738:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	691b      	ldr	r3, [r3, #16]
 800a73e:	f003 0301 	and.w	r3, r3, #1
 800a742:	2b01      	cmp	r3, #1
 800a744:	d105      	bne.n	800a752 <TIM_Base_SetConfig+0x18e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	691b      	ldr	r3, [r3, #16]
 800a74a:	f023 0201 	bic.w	r2, r3, #1
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	611a      	str	r2, [r3, #16]
  }
}
 800a752:	bf00      	nop
 800a754:	3714      	adds	r7, #20
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr
 800a75e:	bf00      	nop
 800a760:	40012c00 	.word	0x40012c00
 800a764:	50012c00 	.word	0x50012c00
 800a768:	40000400 	.word	0x40000400
 800a76c:	50000400 	.word	0x50000400
 800a770:	40000800 	.word	0x40000800
 800a774:	50000800 	.word	0x50000800
 800a778:	40000c00 	.word	0x40000c00
 800a77c:	50000c00 	.word	0x50000c00
 800a780:	40013400 	.word	0x40013400
 800a784:	50013400 	.word	0x50013400
 800a788:	40001800 	.word	0x40001800
 800a78c:	50001800 	.word	0x50001800
 800a790:	40014000 	.word	0x40014000
 800a794:	50014000 	.word	0x50014000

0800a798 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a798:	b480      	push	{r7}
 800a79a:	b087      	sub	sp, #28
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6a1b      	ldr	r3, [r3, #32]
 800a7a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6a1b      	ldr	r3, [r3, #32]
 800a7ac:	f023 0201 	bic.w	r2, r3, #1
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	699b      	ldr	r3, [r3, #24]
 800a7be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a7c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f023 0303 	bic.w	r3, r3, #3
 800a7d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	68fa      	ldr	r2, [r7, #12]
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	f023 0302 	bic.w	r3, r3, #2
 800a7e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	689b      	ldr	r3, [r3, #8]
 800a7ea:	697a      	ldr	r2, [r7, #20]
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	4a30      	ldr	r2, [pc, #192]	@ (800a8b4 <TIM_OC1_SetConfig+0x11c>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d013      	beq.n	800a820 <TIM_OC1_SetConfig+0x88>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	4a2f      	ldr	r2, [pc, #188]	@ (800a8b8 <TIM_OC1_SetConfig+0x120>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d00f      	beq.n	800a820 <TIM_OC1_SetConfig+0x88>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	4a2e      	ldr	r2, [pc, #184]	@ (800a8bc <TIM_OC1_SetConfig+0x124>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d00b      	beq.n	800a820 <TIM_OC1_SetConfig+0x88>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	4a2d      	ldr	r2, [pc, #180]	@ (800a8c0 <TIM_OC1_SetConfig+0x128>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d007      	beq.n	800a820 <TIM_OC1_SetConfig+0x88>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	4a2c      	ldr	r2, [pc, #176]	@ (800a8c4 <TIM_OC1_SetConfig+0x12c>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d003      	beq.n	800a820 <TIM_OC1_SetConfig+0x88>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	4a2b      	ldr	r2, [pc, #172]	@ (800a8c8 <TIM_OC1_SetConfig+0x130>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d10c      	bne.n	800a83a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	f023 0308 	bic.w	r3, r3, #8
 800a826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	68db      	ldr	r3, [r3, #12]
 800a82c:	697a      	ldr	r2, [r7, #20]
 800a82e:	4313      	orrs	r3, r2
 800a830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	f023 0304 	bic.w	r3, r3, #4
 800a838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	4a1d      	ldr	r2, [pc, #116]	@ (800a8b4 <TIM_OC1_SetConfig+0x11c>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d013      	beq.n	800a86a <TIM_OC1_SetConfig+0xd2>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4a1c      	ldr	r2, [pc, #112]	@ (800a8b8 <TIM_OC1_SetConfig+0x120>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d00f      	beq.n	800a86a <TIM_OC1_SetConfig+0xd2>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	4a1b      	ldr	r2, [pc, #108]	@ (800a8bc <TIM_OC1_SetConfig+0x124>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d00b      	beq.n	800a86a <TIM_OC1_SetConfig+0xd2>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	4a1a      	ldr	r2, [pc, #104]	@ (800a8c0 <TIM_OC1_SetConfig+0x128>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d007      	beq.n	800a86a <TIM_OC1_SetConfig+0xd2>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	4a19      	ldr	r2, [pc, #100]	@ (800a8c4 <TIM_OC1_SetConfig+0x12c>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d003      	beq.n	800a86a <TIM_OC1_SetConfig+0xd2>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	4a18      	ldr	r2, [pc, #96]	@ (800a8c8 <TIM_OC1_SetConfig+0x130>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d111      	bne.n	800a88e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a870:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a878:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	695b      	ldr	r3, [r3, #20]
 800a87e:	693a      	ldr	r2, [r7, #16]
 800a880:	4313      	orrs	r3, r2
 800a882:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	699b      	ldr	r3, [r3, #24]
 800a888:	693a      	ldr	r2, [r7, #16]
 800a88a:	4313      	orrs	r3, r2
 800a88c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	693a      	ldr	r2, [r7, #16]
 800a892:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	68fa      	ldr	r2, [r7, #12]
 800a898:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	685a      	ldr	r2, [r3, #4]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	697a      	ldr	r2, [r7, #20]
 800a8a6:	621a      	str	r2, [r3, #32]
}
 800a8a8:	bf00      	nop
 800a8aa:	371c      	adds	r7, #28
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr
 800a8b4:	40012c00 	.word	0x40012c00
 800a8b8:	50012c00 	.word	0x50012c00
 800a8bc:	40013400 	.word	0x40013400
 800a8c0:	50013400 	.word	0x50013400
 800a8c4:	40014000 	.word	0x40014000
 800a8c8:	50014000 	.word	0x50014000

0800a8cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b087      	sub	sp, #28
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a1b      	ldr	r3, [r3, #32]
 800a8da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6a1b      	ldr	r3, [r3, #32]
 800a8e0:	f023 0210 	bic.w	r2, r3, #16
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	699b      	ldr	r3, [r3, #24]
 800a8f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a8fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a8fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a906:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	021b      	lsls	r3, r3, #8
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	4313      	orrs	r3, r2
 800a912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	f023 0320 	bic.w	r3, r3, #32
 800a91a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	011b      	lsls	r3, r3, #4
 800a922:	697a      	ldr	r2, [r7, #20]
 800a924:	4313      	orrs	r3, r2
 800a926:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	4a2e      	ldr	r2, [pc, #184]	@ (800a9e4 <TIM_OC2_SetConfig+0x118>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d00b      	beq.n	800a948 <TIM_OC2_SetConfig+0x7c>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	4a2d      	ldr	r2, [pc, #180]	@ (800a9e8 <TIM_OC2_SetConfig+0x11c>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d007      	beq.n	800a948 <TIM_OC2_SetConfig+0x7c>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	4a2c      	ldr	r2, [pc, #176]	@ (800a9ec <TIM_OC2_SetConfig+0x120>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d003      	beq.n	800a948 <TIM_OC2_SetConfig+0x7c>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	4a2b      	ldr	r2, [pc, #172]	@ (800a9f0 <TIM_OC2_SetConfig+0x124>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d10d      	bne.n	800a964 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a94e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	011b      	lsls	r3, r3, #4
 800a956:	697a      	ldr	r2, [r7, #20]
 800a958:	4313      	orrs	r3, r2
 800a95a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a962:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	4a1f      	ldr	r2, [pc, #124]	@ (800a9e4 <TIM_OC2_SetConfig+0x118>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d013      	beq.n	800a994 <TIM_OC2_SetConfig+0xc8>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	4a1e      	ldr	r2, [pc, #120]	@ (800a9e8 <TIM_OC2_SetConfig+0x11c>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d00f      	beq.n	800a994 <TIM_OC2_SetConfig+0xc8>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	4a1d      	ldr	r2, [pc, #116]	@ (800a9ec <TIM_OC2_SetConfig+0x120>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d00b      	beq.n	800a994 <TIM_OC2_SetConfig+0xc8>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	4a1c      	ldr	r2, [pc, #112]	@ (800a9f0 <TIM_OC2_SetConfig+0x124>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d007      	beq.n	800a994 <TIM_OC2_SetConfig+0xc8>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	4a1b      	ldr	r2, [pc, #108]	@ (800a9f4 <TIM_OC2_SetConfig+0x128>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d003      	beq.n	800a994 <TIM_OC2_SetConfig+0xc8>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	4a1a      	ldr	r2, [pc, #104]	@ (800a9f8 <TIM_OC2_SetConfig+0x12c>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d113      	bne.n	800a9bc <TIM_OC2_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a99a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a9a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	695b      	ldr	r3, [r3, #20]
 800a9a8:	009b      	lsls	r3, r3, #2
 800a9aa:	693a      	ldr	r2, [r7, #16]
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	699b      	ldr	r3, [r3, #24]
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	693a      	ldr	r2, [r7, #16]
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	693a      	ldr	r2, [r7, #16]
 800a9c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	68fa      	ldr	r2, [r7, #12]
 800a9c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	685a      	ldr	r2, [r3, #4]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	697a      	ldr	r2, [r7, #20]
 800a9d4:	621a      	str	r2, [r3, #32]
}
 800a9d6:	bf00      	nop
 800a9d8:	371c      	adds	r7, #28
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	40012c00 	.word	0x40012c00
 800a9e8:	50012c00 	.word	0x50012c00
 800a9ec:	40013400 	.word	0x40013400
 800a9f0:	50013400 	.word	0x50013400
 800a9f4:	40014000 	.word	0x40014000
 800a9f8:	50014000 	.word	0x50014000

0800a9fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b087      	sub	sp, #28
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6a1b      	ldr	r3, [r3, #32]
 800aa0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6a1b      	ldr	r3, [r3, #32]
 800aa10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	69db      	ldr	r3, [r3, #28]
 800aa22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f023 0303 	bic.w	r3, r3, #3
 800aa36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	68fa      	ldr	r2, [r7, #12]
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800aa48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	689b      	ldr	r3, [r3, #8]
 800aa4e:	021b      	lsls	r3, r3, #8
 800aa50:	697a      	ldr	r2, [r7, #20]
 800aa52:	4313      	orrs	r3, r2
 800aa54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	4a2d      	ldr	r2, [pc, #180]	@ (800ab10 <TIM_OC3_SetConfig+0x114>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d00b      	beq.n	800aa76 <TIM_OC3_SetConfig+0x7a>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	4a2c      	ldr	r2, [pc, #176]	@ (800ab14 <TIM_OC3_SetConfig+0x118>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d007      	beq.n	800aa76 <TIM_OC3_SetConfig+0x7a>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	4a2b      	ldr	r2, [pc, #172]	@ (800ab18 <TIM_OC3_SetConfig+0x11c>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d003      	beq.n	800aa76 <TIM_OC3_SetConfig+0x7a>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	4a2a      	ldr	r2, [pc, #168]	@ (800ab1c <TIM_OC3_SetConfig+0x120>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d10d      	bne.n	800aa92 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800aa7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	68db      	ldr	r3, [r3, #12]
 800aa82:	021b      	lsls	r3, r3, #8
 800aa84:	697a      	ldr	r2, [r7, #20]
 800aa86:	4313      	orrs	r3, r2
 800aa88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800aa90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	4a1e      	ldr	r2, [pc, #120]	@ (800ab10 <TIM_OC3_SetConfig+0x114>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d013      	beq.n	800aac2 <TIM_OC3_SetConfig+0xc6>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4a1d      	ldr	r2, [pc, #116]	@ (800ab14 <TIM_OC3_SetConfig+0x118>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d00f      	beq.n	800aac2 <TIM_OC3_SetConfig+0xc6>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	4a1c      	ldr	r2, [pc, #112]	@ (800ab18 <TIM_OC3_SetConfig+0x11c>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d00b      	beq.n	800aac2 <TIM_OC3_SetConfig+0xc6>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	4a1b      	ldr	r2, [pc, #108]	@ (800ab1c <TIM_OC3_SetConfig+0x120>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d007      	beq.n	800aac2 <TIM_OC3_SetConfig+0xc6>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	4a1a      	ldr	r2, [pc, #104]	@ (800ab20 <TIM_OC3_SetConfig+0x124>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d003      	beq.n	800aac2 <TIM_OC3_SetConfig+0xc6>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	4a19      	ldr	r2, [pc, #100]	@ (800ab24 <TIM_OC3_SetConfig+0x128>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d113      	bne.n	800aaea <TIM_OC3_SetConfig+0xee>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	695b      	ldr	r3, [r3, #20]
 800aad6:	011b      	lsls	r3, r3, #4
 800aad8:	693a      	ldr	r2, [r7, #16]
 800aada:	4313      	orrs	r3, r2
 800aadc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	699b      	ldr	r3, [r3, #24]
 800aae2:	011b      	lsls	r3, r3, #4
 800aae4:	693a      	ldr	r2, [r7, #16]
 800aae6:	4313      	orrs	r3, r2
 800aae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	693a      	ldr	r2, [r7, #16]
 800aaee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	68fa      	ldr	r2, [r7, #12]
 800aaf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	685a      	ldr	r2, [r3, #4]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	697a      	ldr	r2, [r7, #20]
 800ab02:	621a      	str	r2, [r3, #32]
}
 800ab04:	bf00      	nop
 800ab06:	371c      	adds	r7, #28
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr
 800ab10:	40012c00 	.word	0x40012c00
 800ab14:	50012c00 	.word	0x50012c00
 800ab18:	40013400 	.word	0x40013400
 800ab1c:	50013400 	.word	0x50013400
 800ab20:	40014000 	.word	0x40014000
 800ab24:	50014000 	.word	0x50014000

0800ab28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b087      	sub	sp, #28
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6a1b      	ldr	r3, [r3, #32]
 800ab36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6a1b      	ldr	r3, [r3, #32]
 800ab3c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	69db      	ldr	r3, [r3, #28]
 800ab4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ab56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	021b      	lsls	r3, r3, #8
 800ab6a:	68fa      	ldr	r2, [r7, #12]
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ab76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	689b      	ldr	r3, [r3, #8]
 800ab7c:	031b      	lsls	r3, r3, #12
 800ab7e:	697a      	ldr	r2, [r7, #20]
 800ab80:	4313      	orrs	r3, r2
 800ab82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	4a2e      	ldr	r2, [pc, #184]	@ (800ac40 <TIM_OC4_SetConfig+0x118>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d00b      	beq.n	800aba4 <TIM_OC4_SetConfig+0x7c>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	4a2d      	ldr	r2, [pc, #180]	@ (800ac44 <TIM_OC4_SetConfig+0x11c>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d007      	beq.n	800aba4 <TIM_OC4_SetConfig+0x7c>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	4a2c      	ldr	r2, [pc, #176]	@ (800ac48 <TIM_OC4_SetConfig+0x120>)
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d003      	beq.n	800aba4 <TIM_OC4_SetConfig+0x7c>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	4a2b      	ldr	r2, [pc, #172]	@ (800ac4c <TIM_OC4_SetConfig+0x124>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d10d      	bne.n	800abc0 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800abaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	68db      	ldr	r3, [r3, #12]
 800abb0:	031b      	lsls	r3, r3, #12
 800abb2:	697a      	ldr	r2, [r7, #20]
 800abb4:	4313      	orrs	r3, r2
 800abb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800abbe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	4a1f      	ldr	r2, [pc, #124]	@ (800ac40 <TIM_OC4_SetConfig+0x118>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d013      	beq.n	800abf0 <TIM_OC4_SetConfig+0xc8>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	4a1e      	ldr	r2, [pc, #120]	@ (800ac44 <TIM_OC4_SetConfig+0x11c>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d00f      	beq.n	800abf0 <TIM_OC4_SetConfig+0xc8>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	4a1d      	ldr	r2, [pc, #116]	@ (800ac48 <TIM_OC4_SetConfig+0x120>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d00b      	beq.n	800abf0 <TIM_OC4_SetConfig+0xc8>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	4a1c      	ldr	r2, [pc, #112]	@ (800ac4c <TIM_OC4_SetConfig+0x124>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d007      	beq.n	800abf0 <TIM_OC4_SetConfig+0xc8>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	4a1b      	ldr	r2, [pc, #108]	@ (800ac50 <TIM_OC4_SetConfig+0x128>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d003      	beq.n	800abf0 <TIM_OC4_SetConfig+0xc8>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	4a1a      	ldr	r2, [pc, #104]	@ (800ac54 <TIM_OC4_SetConfig+0x12c>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d113      	bne.n	800ac18 <TIM_OC4_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800abf6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800abfe:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	695b      	ldr	r3, [r3, #20]
 800ac04:	019b      	lsls	r3, r3, #6
 800ac06:	693a      	ldr	r2, [r7, #16]
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	699b      	ldr	r3, [r3, #24]
 800ac10:	019b      	lsls	r3, r3, #6
 800ac12:	693a      	ldr	r2, [r7, #16]
 800ac14:	4313      	orrs	r3, r2
 800ac16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	693a      	ldr	r2, [r7, #16]
 800ac1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	68fa      	ldr	r2, [r7, #12]
 800ac22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	685a      	ldr	r2, [r3, #4]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	697a      	ldr	r2, [r7, #20]
 800ac30:	621a      	str	r2, [r3, #32]
}
 800ac32:	bf00      	nop
 800ac34:	371c      	adds	r7, #28
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	40012c00 	.word	0x40012c00
 800ac44:	50012c00 	.word	0x50012c00
 800ac48:	40013400 	.word	0x40013400
 800ac4c:	50013400 	.word	0x50013400
 800ac50:	40014000 	.word	0x40014000
 800ac54:	50014000 	.word	0x50014000

0800ac58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b087      	sub	sp, #28
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6a1b      	ldr	r3, [r3, #32]
 800ac66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6a1b      	ldr	r3, [r3, #32]
 800ac6c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ac86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	68fa      	ldr	r2, [r7, #12]
 800ac92:	4313      	orrs	r3, r2
 800ac94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ac9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	689b      	ldr	r3, [r3, #8]
 800aca2:	041b      	lsls	r3, r3, #16
 800aca4:	693a      	ldr	r2, [r7, #16]
 800aca6:	4313      	orrs	r3, r2
 800aca8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	4a19      	ldr	r2, [pc, #100]	@ (800ad14 <TIM_OC5_SetConfig+0xbc>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d013      	beq.n	800acda <TIM_OC5_SetConfig+0x82>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	4a18      	ldr	r2, [pc, #96]	@ (800ad18 <TIM_OC5_SetConfig+0xc0>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d00f      	beq.n	800acda <TIM_OC5_SetConfig+0x82>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	4a17      	ldr	r2, [pc, #92]	@ (800ad1c <TIM_OC5_SetConfig+0xc4>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d00b      	beq.n	800acda <TIM_OC5_SetConfig+0x82>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	4a16      	ldr	r2, [pc, #88]	@ (800ad20 <TIM_OC5_SetConfig+0xc8>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d007      	beq.n	800acda <TIM_OC5_SetConfig+0x82>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	4a15      	ldr	r2, [pc, #84]	@ (800ad24 <TIM_OC5_SetConfig+0xcc>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d003      	beq.n	800acda <TIM_OC5_SetConfig+0x82>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4a14      	ldr	r2, [pc, #80]	@ (800ad28 <TIM_OC5_SetConfig+0xd0>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d109      	bne.n	800acee <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ace0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	695b      	ldr	r3, [r3, #20]
 800ace6:	021b      	lsls	r3, r3, #8
 800ace8:	697a      	ldr	r2, [r7, #20]
 800acea:	4313      	orrs	r3, r2
 800acec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	697a      	ldr	r2, [r7, #20]
 800acf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	68fa      	ldr	r2, [r7, #12]
 800acf8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	685a      	ldr	r2, [r3, #4]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	693a      	ldr	r2, [r7, #16]
 800ad06:	621a      	str	r2, [r3, #32]
}
 800ad08:	bf00      	nop
 800ad0a:	371c      	adds	r7, #28
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr
 800ad14:	40012c00 	.word	0x40012c00
 800ad18:	50012c00 	.word	0x50012c00
 800ad1c:	40013400 	.word	0x40013400
 800ad20:	50013400 	.word	0x50013400
 800ad24:	40014000 	.word	0x40014000
 800ad28:	50014000 	.word	0x50014000

0800ad2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b087      	sub	sp, #28
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6a1b      	ldr	r3, [r3, #32]
 800ad3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6a1b      	ldr	r3, [r3, #32]
 800ad40:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ad5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	021b      	lsls	r3, r3, #8
 800ad66:	68fa      	ldr	r2, [r7, #12]
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ad72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	689b      	ldr	r3, [r3, #8]
 800ad78:	051b      	lsls	r3, r3, #20
 800ad7a:	693a      	ldr	r2, [r7, #16]
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	4a1a      	ldr	r2, [pc, #104]	@ (800adec <TIM_OC6_SetConfig+0xc0>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d013      	beq.n	800adb0 <TIM_OC6_SetConfig+0x84>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	4a19      	ldr	r2, [pc, #100]	@ (800adf0 <TIM_OC6_SetConfig+0xc4>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d00f      	beq.n	800adb0 <TIM_OC6_SetConfig+0x84>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	4a18      	ldr	r2, [pc, #96]	@ (800adf4 <TIM_OC6_SetConfig+0xc8>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d00b      	beq.n	800adb0 <TIM_OC6_SetConfig+0x84>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	4a17      	ldr	r2, [pc, #92]	@ (800adf8 <TIM_OC6_SetConfig+0xcc>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d007      	beq.n	800adb0 <TIM_OC6_SetConfig+0x84>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	4a16      	ldr	r2, [pc, #88]	@ (800adfc <TIM_OC6_SetConfig+0xd0>)
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d003      	beq.n	800adb0 <TIM_OC6_SetConfig+0x84>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	4a15      	ldr	r2, [pc, #84]	@ (800ae00 <TIM_OC6_SetConfig+0xd4>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d109      	bne.n	800adc4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800adb6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	695b      	ldr	r3, [r3, #20]
 800adbc:	029b      	lsls	r3, r3, #10
 800adbe:	697a      	ldr	r2, [r7, #20]
 800adc0:	4313      	orrs	r3, r2
 800adc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	697a      	ldr	r2, [r7, #20]
 800adc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	68fa      	ldr	r2, [r7, #12]
 800adce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	685a      	ldr	r2, [r3, #4]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	693a      	ldr	r2, [r7, #16]
 800addc:	621a      	str	r2, [r3, #32]
}
 800adde:	bf00      	nop
 800ade0:	371c      	adds	r7, #28
 800ade2:	46bd      	mov	sp, r7
 800ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade8:	4770      	bx	lr
 800adea:	bf00      	nop
 800adec:	40012c00 	.word	0x40012c00
 800adf0:	50012c00 	.word	0x50012c00
 800adf4:	40013400 	.word	0x40013400
 800adf8:	50013400 	.word	0x50013400
 800adfc:	40014000 	.word	0x40014000
 800ae00:	50014000 	.word	0x50014000

0800ae04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b087      	sub	sp, #28
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	60f8      	str	r0, [r7, #12]
 800ae0c:	60b9      	str	r1, [r7, #8]
 800ae0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	6a1b      	ldr	r3, [r3, #32]
 800ae14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	6a1b      	ldr	r3, [r3, #32]
 800ae1a:	f023 0201 	bic.w	r2, r3, #1
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	699b      	ldr	r3, [r3, #24]
 800ae26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ae2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	011b      	lsls	r3, r3, #4
 800ae34:	693a      	ldr	r2, [r7, #16]
 800ae36:	4313      	orrs	r3, r2
 800ae38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	f023 030a 	bic.w	r3, r3, #10
 800ae40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ae42:	697a      	ldr	r2, [r7, #20]
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	4313      	orrs	r3, r2
 800ae48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	693a      	ldr	r2, [r7, #16]
 800ae4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	697a      	ldr	r2, [r7, #20]
 800ae54:	621a      	str	r2, [r3, #32]
}
 800ae56:	bf00      	nop
 800ae58:	371c      	adds	r7, #28
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr

0800ae62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae62:	b480      	push	{r7}
 800ae64:	b087      	sub	sp, #28
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	60f8      	str	r0, [r7, #12]
 800ae6a:	60b9      	str	r1, [r7, #8]
 800ae6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	6a1b      	ldr	r3, [r3, #32]
 800ae72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	6a1b      	ldr	r3, [r3, #32]
 800ae78:	f023 0210 	bic.w	r2, r3, #16
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	699b      	ldr	r3, [r3, #24]
 800ae84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ae8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	031b      	lsls	r3, r3, #12
 800ae92:	693a      	ldr	r2, [r7, #16]
 800ae94:	4313      	orrs	r3, r2
 800ae96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ae9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	011b      	lsls	r3, r3, #4
 800aea4:	697a      	ldr	r2, [r7, #20]
 800aea6:	4313      	orrs	r3, r2
 800aea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	693a      	ldr	r2, [r7, #16]
 800aeae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	697a      	ldr	r2, [r7, #20]
 800aeb4:	621a      	str	r2, [r3, #32]
}
 800aeb6:	bf00      	nop
 800aeb8:	371c      	adds	r7, #28
 800aeba:	46bd      	mov	sp, r7
 800aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec0:	4770      	bx	lr

0800aec2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aec2:	b480      	push	{r7}
 800aec4:	b085      	sub	sp, #20
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	6078      	str	r0, [r7, #4]
 800aeca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	689b      	ldr	r3, [r3, #8]
 800aed0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800aed8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aedc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aede:	683a      	ldr	r2, [r7, #0]
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	4313      	orrs	r3, r2
 800aee4:	f043 0307 	orr.w	r3, r3, #7
 800aee8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	68fa      	ldr	r2, [r7, #12]
 800aeee:	609a      	str	r2, [r3, #8]
}
 800aef0:	bf00      	nop
 800aef2:	3714      	adds	r7, #20
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr

0800aefc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b087      	sub	sp, #28
 800af00:	af00      	add	r7, sp, #0
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	60b9      	str	r1, [r7, #8]
 800af06:	607a      	str	r2, [r7, #4]
 800af08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	689b      	ldr	r3, [r3, #8]
 800af0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800af16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	021a      	lsls	r2, r3, #8
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	431a      	orrs	r2, r3
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	4313      	orrs	r3, r2
 800af24:	697a      	ldr	r2, [r7, #20]
 800af26:	4313      	orrs	r3, r2
 800af28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	697a      	ldr	r2, [r7, #20]
 800af2e:	609a      	str	r2, [r3, #8]
}
 800af30:	bf00      	nop
 800af32:	371c      	adds	r7, #28
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr

0800af3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800af3c:	b480      	push	{r7}
 800af3e:	b087      	sub	sp, #28
 800af40:	af00      	add	r7, sp, #0
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	60b9      	str	r1, [r7, #8]
 800af46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	f003 031f 	and.w	r3, r3, #31
 800af4e:	2201      	movs	r2, #1
 800af50:	fa02 f303 	lsl.w	r3, r2, r3
 800af54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	6a1a      	ldr	r2, [r3, #32]
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	43db      	mvns	r3, r3
 800af5e:	401a      	ands	r2, r3
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	6a1a      	ldr	r2, [r3, #32]
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	f003 031f 	and.w	r3, r3, #31
 800af6e:	6879      	ldr	r1, [r7, #4]
 800af70:	fa01 f303 	lsl.w	r3, r1, r3
 800af74:	431a      	orrs	r2, r3
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	621a      	str	r2, [r3, #32]
}
 800af7a:	bf00      	nop
 800af7c:	371c      	adds	r7, #28
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr
	...

0800af88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800af88:	b480      	push	{r7}
 800af8a:	b085      	sub	sp, #20
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af98:	2b01      	cmp	r3, #1
 800af9a:	d101      	bne.n	800afa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af9c:	2302      	movs	r3, #2
 800af9e:	e0a1      	b.n	800b0e4 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2201      	movs	r2, #1
 800afa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2202      	movs	r2, #2
 800afac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	689b      	ldr	r3, [r3, #8]
 800afbe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4a4a      	ldr	r2, [pc, #296]	@ (800b0f0 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d00e      	beq.n	800afe8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	4a49      	ldr	r2, [pc, #292]	@ (800b0f4 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d009      	beq.n	800afe8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4a47      	ldr	r2, [pc, #284]	@ (800b0f8 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d004      	beq.n	800afe8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	4a46      	ldr	r2, [pc, #280]	@ (800b0fc <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d108      	bne.n	800affa <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800afee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	68fa      	ldr	r2, [r7, #12]
 800aff6:	4313      	orrs	r3, r2
 800aff8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800b000:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b004:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	68fa      	ldr	r2, [r7, #12]
 800b00c:	4313      	orrs	r3, r2
 800b00e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	68fa      	ldr	r2, [r7, #12]
 800b016:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4a34      	ldr	r2, [pc, #208]	@ (800b0f0 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d04a      	beq.n	800b0b8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	4a33      	ldr	r2, [pc, #204]	@ (800b0f4 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800b028:	4293      	cmp	r3, r2
 800b02a:	d045      	beq.n	800b0b8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b034:	d040      	beq.n	800b0b8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b03e:	d03b      	beq.n	800b0b8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4a2e      	ldr	r2, [pc, #184]	@ (800b100 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d036      	beq.n	800b0b8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	4a2d      	ldr	r2, [pc, #180]	@ (800b104 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d031      	beq.n	800b0b8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4a2b      	ldr	r2, [pc, #172]	@ (800b108 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d02c      	beq.n	800b0b8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	4a2a      	ldr	r2, [pc, #168]	@ (800b10c <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d027      	beq.n	800b0b8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4a28      	ldr	r2, [pc, #160]	@ (800b110 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d022      	beq.n	800b0b8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4a27      	ldr	r2, [pc, #156]	@ (800b114 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d01d      	beq.n	800b0b8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a1d      	ldr	r2, [pc, #116]	@ (800b0f8 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d018      	beq.n	800b0b8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4a1c      	ldr	r2, [pc, #112]	@ (800b0fc <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d013      	beq.n	800b0b8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	4a20      	ldr	r2, [pc, #128]	@ (800b118 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d00e      	beq.n	800b0b8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	4a1f      	ldr	r2, [pc, #124]	@ (800b11c <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d009      	beq.n	800b0b8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4a1d      	ldr	r2, [pc, #116]	@ (800b120 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d004      	beq.n	800b0b8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	4a1c      	ldr	r2, [pc, #112]	@ (800b124 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d10c      	bne.n	800b0d2 <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b0be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	689b      	ldr	r3, [r3, #8]
 800b0c4:	68ba      	ldr	r2, [r7, #8]
 800b0c6:	4313      	orrs	r3, r2
 800b0c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	68ba      	ldr	r2, [r7, #8]
 800b0d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b0e2:	2300      	movs	r3, #0
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3714      	adds	r7, #20
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr
 800b0f0:	40012c00 	.word	0x40012c00
 800b0f4:	50012c00 	.word	0x50012c00
 800b0f8:	40013400 	.word	0x40013400
 800b0fc:	50013400 	.word	0x50013400
 800b100:	40000400 	.word	0x40000400
 800b104:	50000400 	.word	0x50000400
 800b108:	40000800 	.word	0x40000800
 800b10c:	50000800 	.word	0x50000800
 800b110:	40000c00 	.word	0x40000c00
 800b114:	50000c00 	.word	0x50000c00
 800b118:	40001800 	.word	0x40001800
 800b11c:	50001800 	.word	0x50001800
 800b120:	40014000 	.word	0x40014000
 800b124:	50014000 	.word	0x50014000

0800b128 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b128:	b480      	push	{r7}
 800b12a:	b085      	sub	sp, #20
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b132:	2300      	movs	r3, #0
 800b134:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d101      	bne.n	800b144 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b140:	2302      	movs	r3, #2
 800b142:	e07d      	b.n	800b240 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2201      	movs	r2, #1
 800b148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	68db      	ldr	r3, [r3, #12]
 800b156:	4313      	orrs	r3, r2
 800b158:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	4313      	orrs	r3, r2
 800b166:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	4313      	orrs	r3, r2
 800b174:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4313      	orrs	r3, r2
 800b182:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	691b      	ldr	r3, [r3, #16]
 800b18e:	4313      	orrs	r3, r2
 800b190:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	695b      	ldr	r3, [r3, #20]
 800b19c:	4313      	orrs	r3, r2
 800b19e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1aa:	4313      	orrs	r3, r2
 800b1ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	699b      	ldr	r3, [r3, #24]
 800b1b8:	041b      	lsls	r3, r3, #16
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	69db      	ldr	r3, [r3, #28]
 800b1c8:	4313      	orrs	r3, r2
 800b1ca:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	4a1e      	ldr	r2, [pc, #120]	@ (800b24c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d00e      	beq.n	800b1f4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	4a1d      	ldr	r2, [pc, #116]	@ (800b250 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d009      	beq.n	800b1f4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4a1b      	ldr	r2, [pc, #108]	@ (800b254 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d004      	beq.n	800b1f4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4a1a      	ldr	r2, [pc, #104]	@ (800b258 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d11c      	bne.n	800b22e <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1fe:	051b      	lsls	r3, r3, #20
 800b200:	4313      	orrs	r3, r2
 800b202:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	6a1b      	ldr	r3, [r3, #32]
 800b20e:	4313      	orrs	r3, r2
 800b210:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b21c:	4313      	orrs	r3, r2
 800b21e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b22a:	4313      	orrs	r3, r2
 800b22c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	68fa      	ldr	r2, [r7, #12]
 800b234:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2200      	movs	r2, #0
 800b23a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b23e:	2300      	movs	r3, #0
}
 800b240:	4618      	mov	r0, r3
 800b242:	3714      	adds	r7, #20
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr
 800b24c:	40012c00 	.word	0x40012c00
 800b250:	50012c00 	.word	0x50012c00
 800b254:	40013400 	.word	0x40013400
 800b258:	50013400 	.word	0x50013400

0800b25c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b083      	sub	sp, #12
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b264:	bf00      	nop
 800b266:	370c      	adds	r7, #12
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr

0800b270 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b270:	b480      	push	{r7}
 800b272:	b083      	sub	sp, #12
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b278:	bf00      	nop
 800b27a:	370c      	adds	r7, #12
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr

0800b284 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b284:	b480      	push	{r7}
 800b286:	b083      	sub	sp, #12
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b28c:	bf00      	nop
 800b28e:	370c      	adds	r7, #12
 800b290:	46bd      	mov	sp, r7
 800b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b296:	4770      	bx	lr

0800b298 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b298:	b480      	push	{r7}
 800b29a:	b083      	sub	sp, #12
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b2a0:	bf00      	nop
 800b2a2:	370c      	adds	r7, #12
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr

0800b2ac <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b083      	sub	sp, #12
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b2b4:	bf00      	nop
 800b2b6:	370c      	adds	r7, #12
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr

0800b2c0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b083      	sub	sp, #12
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b2c8:	bf00      	nop
 800b2ca:	370c      	adds	r7, #12
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr

0800b2d4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b083      	sub	sp, #12
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b2dc:	bf00      	nop
 800b2de:	370c      	adds	r7, #12
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr

0800b2e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b082      	sub	sp, #8
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d101      	bne.n	800b2fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	e042      	b.n	800b380 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b300:	2b00      	cmp	r3, #0
 800b302:	d106      	bne.n	800b312 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f7f7 fabd 	bl	800288c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2224      	movs	r2, #36	@ 0x24
 800b316:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	681a      	ldr	r2, [r3, #0]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f022 0201 	bic.w	r2, r2, #1
 800b328:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d002      	beq.n	800b338 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f000 fdde 	bl	800bef4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 fc2d 	bl	800bb98 <UART_SetConfig>
 800b33e:	4603      	mov	r3, r0
 800b340:	2b01      	cmp	r3, #1
 800b342:	d101      	bne.n	800b348 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b344:	2301      	movs	r3, #1
 800b346:	e01b      	b.n	800b380 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	685a      	ldr	r2, [r3, #4]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b356:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	689a      	ldr	r2, [r3, #8]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b366:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	681a      	ldr	r2, [r3, #0]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f042 0201 	orr.w	r2, r2, #1
 800b376:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f000 fe5d 	bl	800c038 <UART_CheckIdleState>
 800b37e:	4603      	mov	r3, r0
}
 800b380:	4618      	mov	r0, r3
 800b382:	3708      	adds	r7, #8
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b08a      	sub	sp, #40	@ 0x28
 800b38c:	af02      	add	r7, sp, #8
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	60b9      	str	r1, [r7, #8]
 800b392:	603b      	str	r3, [r7, #0]
 800b394:	4613      	mov	r3, r2
 800b396:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b39e:	2b20      	cmp	r3, #32
 800b3a0:	f040 808b 	bne.w	800b4ba <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d002      	beq.n	800b3b0 <HAL_UART_Transmit+0x28>
 800b3aa:	88fb      	ldrh	r3, [r7, #6]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d101      	bne.n	800b3b4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	e083      	b.n	800b4bc <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	689b      	ldr	r3, [r3, #8]
 800b3ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3be:	2b80      	cmp	r3, #128	@ 0x80
 800b3c0:	d107      	bne.n	800b3d2 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	689a      	ldr	r2, [r3, #8]
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b3d0:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	2221      	movs	r2, #33	@ 0x21
 800b3de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b3e2:	f7f7 fc37 	bl	8002c54 <HAL_GetTick>
 800b3e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	88fa      	ldrh	r2, [r7, #6]
 800b3ec:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	88fa      	ldrh	r2, [r7, #6]
 800b3f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	689b      	ldr	r3, [r3, #8]
 800b3fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b400:	d108      	bne.n	800b414 <HAL_UART_Transmit+0x8c>
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	691b      	ldr	r3, [r3, #16]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d104      	bne.n	800b414 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800b40a:	2300      	movs	r3, #0
 800b40c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	61bb      	str	r3, [r7, #24]
 800b412:	e003      	b.n	800b41c <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b418:	2300      	movs	r3, #0
 800b41a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b41c:	e030      	b.n	800b480 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	9300      	str	r3, [sp, #0]
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	2200      	movs	r2, #0
 800b426:	2180      	movs	r1, #128	@ 0x80
 800b428:	68f8      	ldr	r0, [r7, #12]
 800b42a:	f000 feaf 	bl	800c18c <UART_WaitOnFlagUntilTimeout>
 800b42e:	4603      	mov	r3, r0
 800b430:	2b00      	cmp	r3, #0
 800b432:	d005      	beq.n	800b440 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2220      	movs	r2, #32
 800b438:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b43c:	2303      	movs	r3, #3
 800b43e:	e03d      	b.n	800b4bc <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800b440:	69fb      	ldr	r3, [r7, #28]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d10b      	bne.n	800b45e <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b446:	69bb      	ldr	r3, [r7, #24]
 800b448:	881b      	ldrh	r3, [r3, #0]
 800b44a:	461a      	mov	r2, r3
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b454:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b456:	69bb      	ldr	r3, [r7, #24]
 800b458:	3302      	adds	r3, #2
 800b45a:	61bb      	str	r3, [r7, #24]
 800b45c:	e007      	b.n	800b46e <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b45e:	69fb      	ldr	r3, [r7, #28]
 800b460:	781a      	ldrb	r2, [r3, #0]
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b468:	69fb      	ldr	r3, [r7, #28]
 800b46a:	3301      	adds	r3, #1
 800b46c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b474:	b29b      	uxth	r3, r3
 800b476:	3b01      	subs	r3, #1
 800b478:	b29a      	uxth	r2, r3
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b486:	b29b      	uxth	r3, r3
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d1c8      	bne.n	800b41e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	9300      	str	r3, [sp, #0]
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	2200      	movs	r2, #0
 800b494:	2140      	movs	r1, #64	@ 0x40
 800b496:	68f8      	ldr	r0, [r7, #12]
 800b498:	f000 fe78 	bl	800c18c <UART_WaitOnFlagUntilTimeout>
 800b49c:	4603      	mov	r3, r0
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d005      	beq.n	800b4ae <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2220      	movs	r2, #32
 800b4a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b4aa:	2303      	movs	r3, #3
 800b4ac:	e006      	b.n	800b4bc <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2220      	movs	r2, #32
 800b4b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	e000      	b.n	800b4bc <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800b4ba:	2302      	movs	r3, #2
  }
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3720      	adds	r7, #32
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}

0800b4c4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b08a      	sub	sp, #40	@ 0x28
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	60b9      	str	r1, [r7, #8]
 800b4ce:	4613      	mov	r3, r2
 800b4d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b4d8:	2b20      	cmp	r3, #32
 800b4da:	d13c      	bne.n	800b556 <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d002      	beq.n	800b4e8 <HAL_UART_Receive_DMA+0x24>
 800b4e2:	88fb      	ldrh	r3, [r7, #6]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d101      	bne.n	800b4ec <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	e035      	b.n	800b558 <HAL_UART_Receive_DMA+0x94>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	4a1a      	ldr	r2, [pc, #104]	@ (800b560 <HAL_UART_Receive_DMA+0x9c>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d024      	beq.n	800b546 <HAL_UART_Receive_DMA+0x82>
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4a18      	ldr	r2, [pc, #96]	@ (800b564 <HAL_UART_Receive_DMA+0xa0>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d01f      	beq.n	800b546 <HAL_UART_Receive_DMA+0x82>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b510:	2b00      	cmp	r3, #0
 800b512:	d018      	beq.n	800b546 <HAL_UART_Receive_DMA+0x82>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	e853 3f00 	ldrex	r3, [r3]
 800b520:	613b      	str	r3, [r7, #16]
   return(result);
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b528:	627b      	str	r3, [r7, #36]	@ 0x24
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	461a      	mov	r2, r3
 800b530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b532:	623b      	str	r3, [r7, #32]
 800b534:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b536:	69f9      	ldr	r1, [r7, #28]
 800b538:	6a3a      	ldr	r2, [r7, #32]
 800b53a:	e841 2300 	strex	r3, r2, [r1]
 800b53e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b540:	69bb      	ldr	r3, [r7, #24]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d1e6      	bne.n	800b514 <HAL_UART_Receive_DMA+0x50>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b546:	88fb      	ldrh	r3, [r7, #6]
 800b548:	461a      	mov	r2, r3
 800b54a:	68b9      	ldr	r1, [r7, #8]
 800b54c:	68f8      	ldr	r0, [r7, #12]
 800b54e:	f000 fe8b 	bl	800c268 <UART_Start_Receive_DMA>
 800b552:	4603      	mov	r3, r0
 800b554:	e000      	b.n	800b558 <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b556:	2302      	movs	r3, #2
  }
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3728      	adds	r7, #40	@ 0x28
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	44002400 	.word	0x44002400
 800b564:	54002400 	.word	0x54002400

0800b568 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b0ae      	sub	sp, #184	@ 0xb8
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	69db      	ldr	r3, [r3, #28]
 800b576:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	689b      	ldr	r3, [r3, #8]
 800b58a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b58e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b592:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b596:	4013      	ands	r3, r2
 800b598:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 800b59c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d11b      	bne.n	800b5dc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b5a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b5a8:	f003 0320 	and.w	r3, r3, #32
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d015      	beq.n	800b5dc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b5b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b5b4:	f003 0320 	and.w	r3, r3, #32
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d105      	bne.n	800b5c8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b5bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b5c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d009      	beq.n	800b5dc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	f000 82ac 	beq.w	800bb2a <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	4798      	blx	r3
      }
      return;
 800b5da:	e2a6      	b.n	800bb2a <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b5dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	f000 80fd 	beq.w	800b7e0 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b5e6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b5ea:	4b7a      	ldr	r3, [pc, #488]	@ (800b7d4 <HAL_UART_IRQHandler+0x26c>)
 800b5ec:	4013      	ands	r3, r2
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d106      	bne.n	800b600 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b5f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b5f6:	4b78      	ldr	r3, [pc, #480]	@ (800b7d8 <HAL_UART_IRQHandler+0x270>)
 800b5f8:	4013      	ands	r3, r2
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	f000 80f0 	beq.w	800b7e0 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b600:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b604:	f003 0301 	and.w	r3, r3, #1
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d011      	beq.n	800b630 <HAL_UART_IRQHandler+0xc8>
 800b60c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b614:	2b00      	cmp	r3, #0
 800b616:	d00b      	beq.n	800b630 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	2201      	movs	r2, #1
 800b61e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b626:	f043 0201 	orr.w	r2, r3, #1
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b630:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b634:	f003 0302 	and.w	r3, r3, #2
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d011      	beq.n	800b660 <HAL_UART_IRQHandler+0xf8>
 800b63c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b640:	f003 0301 	and.w	r3, r3, #1
 800b644:	2b00      	cmp	r3, #0
 800b646:	d00b      	beq.n	800b660 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	2202      	movs	r2, #2
 800b64e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b656:	f043 0204 	orr.w	r2, r3, #4
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b660:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b664:	f003 0304 	and.w	r3, r3, #4
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d011      	beq.n	800b690 <HAL_UART_IRQHandler+0x128>
 800b66c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b670:	f003 0301 	and.w	r3, r3, #1
 800b674:	2b00      	cmp	r3, #0
 800b676:	d00b      	beq.n	800b690 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	2204      	movs	r2, #4
 800b67e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b686:	f043 0202 	orr.w	r2, r3, #2
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b690:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b694:	f003 0308 	and.w	r3, r3, #8
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d017      	beq.n	800b6cc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b69c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b6a0:	f003 0320 	and.w	r3, r3, #32
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d105      	bne.n	800b6b4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b6a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b6ac:	4b49      	ldr	r3, [pc, #292]	@ (800b7d4 <HAL_UART_IRQHandler+0x26c>)
 800b6ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d00b      	beq.n	800b6cc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	2208      	movs	r2, #8
 800b6ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6c2:	f043 0208 	orr.w	r2, r3, #8
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b6cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b6d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d012      	beq.n	800b6fe <HAL_UART_IRQHandler+0x196>
 800b6d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b6dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d00c      	beq.n	800b6fe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b6ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6f4:	f043 0220 	orr.w	r2, r3, #32
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b704:	2b00      	cmp	r3, #0
 800b706:	f000 8212 	beq.w	800bb2e <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b70a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b70e:	f003 0320 	and.w	r3, r3, #32
 800b712:	2b00      	cmp	r3, #0
 800b714:	d013      	beq.n	800b73e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b716:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b71a:	f003 0320 	and.w	r3, r3, #32
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d105      	bne.n	800b72e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b722:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d007      	beq.n	800b73e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b732:	2b00      	cmp	r3, #0
 800b734:	d003      	beq.n	800b73e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b744:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	689b      	ldr	r3, [r3, #8]
 800b74e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b752:	2b40      	cmp	r3, #64	@ 0x40
 800b754:	d005      	beq.n	800b762 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b756:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b75a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d02e      	beq.n	800b7c0 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 feb9 	bl	800c4da <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	689b      	ldr	r3, [r3, #8]
 800b76e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b772:	2b40      	cmp	r3, #64	@ 0x40
 800b774:	d120      	bne.n	800b7b8 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d017      	beq.n	800b7b0 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b786:	4a15      	ldr	r2, [pc, #84]	@ (800b7dc <HAL_UART_IRQHandler+0x274>)
 800b788:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b790:	4618      	mov	r0, r3
 800b792:	f7f7 fe27 	bl	80033e4 <HAL_DMA_Abort_IT>
 800b796:	4603      	mov	r3, r0
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d019      	beq.n	800b7d0 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b7aa:	4610      	mov	r0, r2
 800b7ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7ae:	e00f      	b.n	800b7d0 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f000 f9db 	bl	800bb6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7b6:	e00b      	b.n	800b7d0 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f000 f9d7 	bl	800bb6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7be:	e007      	b.n	800b7d0 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f000 f9d3 	bl	800bb6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b7ce:	e1ae      	b.n	800bb2e <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7d0:	bf00      	nop
    return;
 800b7d2:	e1ac      	b.n	800bb2e <HAL_UART_IRQHandler+0x5c6>
 800b7d4:	10000001 	.word	0x10000001
 800b7d8:	04000120 	.word	0x04000120
 800b7dc:	0800c757 	.word	0x0800c757

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	f040 8142 	bne.w	800ba6e <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b7ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b7ee:	f003 0310 	and.w	r3, r3, #16
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	f000 813b 	beq.w	800ba6e <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b7f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b7fc:	f003 0310 	and.w	r3, r3, #16
 800b800:	2b00      	cmp	r3, #0
 800b802:	f000 8134 	beq.w	800ba6e <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	2210      	movs	r2, #16
 800b80c:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	689b      	ldr	r3, [r3, #8]
 800b814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b818:	2b40      	cmp	r3, #64	@ 0x40
 800b81a:	f040 80aa 	bne.w	800b972 <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b828:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 800b82c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b830:	2b00      	cmp	r3, #0
 800b832:	f000 8084 	beq.w	800b93e <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b83c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800b840:	429a      	cmp	r2, r3
 800b842:	d27c      	bcs.n	800b93e <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800b84a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b854:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b856:	2b81      	cmp	r3, #129	@ 0x81
 800b858:	d060      	beq.n	800b91c <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b860:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b862:	e853 3f00 	ldrex	r3, [r3]
 800b866:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b868:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b86a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b86e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	461a      	mov	r2, r3
 800b878:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b87c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b880:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b882:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b884:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b888:	e841 2300 	strex	r3, r2, [r1]
 800b88c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b88e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b890:	2b00      	cmp	r3, #0
 800b892:	d1e2      	bne.n	800b85a <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	3308      	adds	r3, #8
 800b89a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b89c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b89e:	e853 3f00 	ldrex	r3, [r3]
 800b8a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b8a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b8a6:	f023 0301 	bic.w	r3, r3, #1
 800b8aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	3308      	adds	r3, #8
 800b8b4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b8b8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b8ba:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8bc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b8be:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b8c0:	e841 2300 	strex	r3, r2, [r1]
 800b8c4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b8c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d1e3      	bne.n	800b894 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2220      	movs	r2, #32
 800b8d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8e2:	e853 3f00 	ldrex	r3, [r3]
 800b8e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b8e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b8ea:	f023 0310 	bic.w	r3, r3, #16
 800b8ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b8fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b8fe:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b900:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b902:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b904:	e841 2300 	strex	r3, r2, [r1]
 800b908:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b90a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d1e4      	bne.n	800b8da <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b916:	4618      	mov	r0, r3
 800b918:	f7f7 fce8 	bl	80032ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2202      	movs	r2, #2
 800b920:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b92e:	b29b      	uxth	r3, r3
 800b930:	1ad3      	subs	r3, r2, r3
 800b932:	b29b      	uxth	r3, r3
 800b934:	4619      	mov	r1, r3
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f000 f922 	bl	800bb80 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b93c:	e0f9      	b.n	800bb32 <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b944:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800b948:	429a      	cmp	r2, r3
 800b94a:	f040 80f2 	bne.w	800bb32 <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b956:	2b81      	cmp	r3, #129	@ 0x81
 800b958:	f040 80eb 	bne.w	800bb32 <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2202      	movs	r2, #2
 800b960:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b968:	4619      	mov	r1, r3
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 f908 	bl	800bb80 <HAL_UARTEx_RxEventCallback>
      return;
 800b970:	e0df      	b.n	800bb32 <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b97e:	b29b      	uxth	r3, r3
 800b980:	1ad3      	subs	r3, r2, r3
 800b982:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b98c:	b29b      	uxth	r3, r3
 800b98e:	2b00      	cmp	r3, #0
 800b990:	f000 80d1 	beq.w	800bb36 <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 800b994:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800b998:	2b00      	cmp	r3, #0
 800b99a:	f000 80cc 	beq.w	800bb36 <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9a6:	e853 3f00 	ldrex	r3, [r3]
 800b9aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b9ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b9b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b9c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b9c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b9c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b9c8:	e841 2300 	strex	r3, r2, [r1]
 800b9cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b9ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d1e4      	bne.n	800b99e <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	3308      	adds	r3, #8
 800b9da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9de:	e853 3f00 	ldrex	r3, [r3]
 800b9e2:	623b      	str	r3, [r7, #32]
   return(result);
 800b9e4:	6a3b      	ldr	r3, [r7, #32]
 800b9e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b9ea:	f023 0301 	bic.w	r3, r3, #1
 800b9ee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	3308      	adds	r3, #8
 800b9f8:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b9fc:	633a      	str	r2, [r7, #48]	@ 0x30
 800b9fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ba02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba04:	e841 2300 	strex	r3, r2, [r1]
 800ba08:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ba0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d1e1      	bne.n	800b9d4 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2220      	movs	r2, #32
 800ba14:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2200      	movs	r2, #0
 800ba22:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	e853 3f00 	ldrex	r3, [r3]
 800ba30:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	f023 0310 	bic.w	r3, r3, #16
 800ba38:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	461a      	mov	r2, r3
 800ba42:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ba46:	61fb      	str	r3, [r7, #28]
 800ba48:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba4a:	69b9      	ldr	r1, [r7, #24]
 800ba4c:	69fa      	ldr	r2, [r7, #28]
 800ba4e:	e841 2300 	strex	r3, r2, [r1]
 800ba52:	617b      	str	r3, [r7, #20]
   return(result);
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d1e4      	bne.n	800ba24 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2202      	movs	r2, #2
 800ba5e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ba60:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800ba64:	4619      	mov	r1, r3
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f000 f88a 	bl	800bb80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ba6c:	e063      	b.n	800bb36 <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ba6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ba72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d00e      	beq.n	800ba98 <HAL_UART_IRQHandler+0x530>
 800ba7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ba7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d008      	beq.n	800ba98 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ba8e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f000 fe9d 	bl	800c7d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ba96:	e051      	b.n	800bb3c <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ba98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ba9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d014      	beq.n	800bace <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800baa4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800baa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800baac:	2b00      	cmp	r3, #0
 800baae:	d105      	bne.n	800babc <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bab0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bab4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d008      	beq.n	800bace <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d03a      	beq.n	800bb3a <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	4798      	blx	r3
    }
    return;
 800bacc:	e035      	b.n	800bb3a <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bace:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d009      	beq.n	800baee <HAL_UART_IRQHandler+0x586>
 800bada:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d003      	beq.n	800baee <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 fe47 	bl	800c77a <UART_EndTransmit_IT>
    return;
 800baec:	e026      	b.n	800bb3c <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800baee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800baf2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d009      	beq.n	800bb0e <HAL_UART_IRQHandler+0x5a6>
 800bafa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bafe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d003      	beq.n	800bb0e <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f000 fe76 	bl	800c7f8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bb0c:	e016      	b.n	800bb3c <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bb0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bb12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d010      	beq.n	800bb3c <HAL_UART_IRQHandler+0x5d4>
 800bb1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	da0c      	bge.n	800bb3c <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 fe5e 	bl	800c7e4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bb28:	e008      	b.n	800bb3c <HAL_UART_IRQHandler+0x5d4>
      return;
 800bb2a:	bf00      	nop
 800bb2c:	e006      	b.n	800bb3c <HAL_UART_IRQHandler+0x5d4>
    return;
 800bb2e:	bf00      	nop
 800bb30:	e004      	b.n	800bb3c <HAL_UART_IRQHandler+0x5d4>
      return;
 800bb32:	bf00      	nop
 800bb34:	e002      	b.n	800bb3c <HAL_UART_IRQHandler+0x5d4>
      return;
 800bb36:	bf00      	nop
 800bb38:	e000      	b.n	800bb3c <HAL_UART_IRQHandler+0x5d4>
    return;
 800bb3a:	bf00      	nop
  }
}
 800bb3c:	37b8      	adds	r7, #184	@ 0xb8
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}
 800bb42:	bf00      	nop

0800bb44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b083      	sub	sp, #12
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bb4c:	bf00      	nop
 800bb4e:	370c      	adds	r7, #12
 800bb50:	46bd      	mov	sp, r7
 800bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb56:	4770      	bx	lr

0800bb58 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b083      	sub	sp, #12
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bb60:	bf00      	nop
 800bb62:	370c      	adds	r7, #12
 800bb64:	46bd      	mov	sp, r7
 800bb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6a:	4770      	bx	lr

0800bb6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b083      	sub	sp, #12
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bb74:	bf00      	nop
 800bb76:	370c      	adds	r7, #12
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7e:	4770      	bx	lr

0800bb80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b083      	sub	sp, #12
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	460b      	mov	r3, r1
 800bb8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bb8c:	bf00      	nop
 800bb8e:	370c      	adds	r7, #12
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr

0800bb98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb9c:	b094      	sub	sp, #80	@ 0x50
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bba2:	2300      	movs	r3, #0
 800bba4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800bba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbaa:	681a      	ldr	r2, [r3, #0]
 800bbac:	4b83      	ldr	r3, [pc, #524]	@ (800bdbc <UART_SetConfig+0x224>)
 800bbae:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bbb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbb2:	689a      	ldr	r2, [r3, #8]
 800bbb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbb6:	691b      	ldr	r3, [r3, #16]
 800bbb8:	431a      	orrs	r2, r3
 800bbba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbbc:	695b      	ldr	r3, [r3, #20]
 800bbbe:	431a      	orrs	r2, r3
 800bbc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbc2:	69db      	ldr	r3, [r3, #28]
 800bbc4:	4313      	orrs	r3, r2
 800bbc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bbc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	497c      	ldr	r1, [pc, #496]	@ (800bdc0 <UART_SetConfig+0x228>)
 800bbd0:	4019      	ands	r1, r3
 800bbd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbd4:	681a      	ldr	r2, [r3, #0]
 800bbd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbd8:	430b      	orrs	r3, r1
 800bbda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bbdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	685b      	ldr	r3, [r3, #4]
 800bbe2:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800bbe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbe8:	68d9      	ldr	r1, [r3, #12]
 800bbea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbec:	681a      	ldr	r2, [r3, #0]
 800bbee:	ea40 0301 	orr.w	r3, r0, r1
 800bbf2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bbf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbf6:	699b      	ldr	r3, [r3, #24]
 800bbf8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bbfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbfc:	681a      	ldr	r2, [r3, #0]
 800bbfe:	4b6f      	ldr	r3, [pc, #444]	@ (800bdbc <UART_SetConfig+0x224>)
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d009      	beq.n	800bc18 <UART_SetConfig+0x80>
 800bc04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc06:	681a      	ldr	r2, [r3, #0]
 800bc08:	4b6e      	ldr	r3, [pc, #440]	@ (800bdc4 <UART_SetConfig+0x22c>)
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d004      	beq.n	800bc18 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bc0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc10:	6a1a      	ldr	r2, [r3, #32]
 800bc12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc14:	4313      	orrs	r3, r2
 800bc16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bc18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	689b      	ldr	r3, [r3, #8]
 800bc1e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800bc22:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800bc26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc28:	681a      	ldr	r2, [r3, #0]
 800bc2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc2c:	430b      	orrs	r3, r1
 800bc2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bc30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc36:	f023 000f 	bic.w	r0, r3, #15
 800bc3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc3c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800bc3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	ea40 0301 	orr.w	r3, r0, r1
 800bc46:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bc48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc4a:	681a      	ldr	r2, [r3, #0]
 800bc4c:	4b5e      	ldr	r3, [pc, #376]	@ (800bdc8 <UART_SetConfig+0x230>)
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d102      	bne.n	800bc58 <UART_SetConfig+0xc0>
 800bc52:	2301      	movs	r3, #1
 800bc54:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc56:	e032      	b.n	800bcbe <UART_SetConfig+0x126>
 800bc58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc5a:	681a      	ldr	r2, [r3, #0]
 800bc5c:	4b5b      	ldr	r3, [pc, #364]	@ (800bdcc <UART_SetConfig+0x234>)
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d102      	bne.n	800bc68 <UART_SetConfig+0xd0>
 800bc62:	2302      	movs	r3, #2
 800bc64:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc66:	e02a      	b.n	800bcbe <UART_SetConfig+0x126>
 800bc68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc6a:	681a      	ldr	r2, [r3, #0]
 800bc6c:	4b58      	ldr	r3, [pc, #352]	@ (800bdd0 <UART_SetConfig+0x238>)
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d102      	bne.n	800bc78 <UART_SetConfig+0xe0>
 800bc72:	2304      	movs	r3, #4
 800bc74:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc76:	e022      	b.n	800bcbe <UART_SetConfig+0x126>
 800bc78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc7a:	681a      	ldr	r2, [r3, #0]
 800bc7c:	4b55      	ldr	r3, [pc, #340]	@ (800bdd4 <UART_SetConfig+0x23c>)
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d102      	bne.n	800bc88 <UART_SetConfig+0xf0>
 800bc82:	2308      	movs	r3, #8
 800bc84:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc86:	e01a      	b.n	800bcbe <UART_SetConfig+0x126>
 800bc88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	4b52      	ldr	r3, [pc, #328]	@ (800bdd8 <UART_SetConfig+0x240>)
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d102      	bne.n	800bc98 <UART_SetConfig+0x100>
 800bc92:	2310      	movs	r3, #16
 800bc94:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc96:	e012      	b.n	800bcbe <UART_SetConfig+0x126>
 800bc98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc9a:	681a      	ldr	r2, [r3, #0]
 800bc9c:	4b4f      	ldr	r3, [pc, #316]	@ (800bddc <UART_SetConfig+0x244>)
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d102      	bne.n	800bca8 <UART_SetConfig+0x110>
 800bca2:	2320      	movs	r3, #32
 800bca4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bca6:	e00a      	b.n	800bcbe <UART_SetConfig+0x126>
 800bca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcaa:	681a      	ldr	r2, [r3, #0]
 800bcac:	4b43      	ldr	r3, [pc, #268]	@ (800bdbc <UART_SetConfig+0x224>)
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d103      	bne.n	800bcba <UART_SetConfig+0x122>
 800bcb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bcb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bcb8:	e001      	b.n	800bcbe <UART_SetConfig+0x126>
 800bcba:	2300      	movs	r3, #0
 800bcbc:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bcbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcc0:	681a      	ldr	r2, [r3, #0]
 800bcc2:	4b3e      	ldr	r3, [pc, #248]	@ (800bdbc <UART_SetConfig+0x224>)
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d005      	beq.n	800bcd4 <UART_SetConfig+0x13c>
 800bcc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	4b3d      	ldr	r3, [pc, #244]	@ (800bdc4 <UART_SetConfig+0x22c>)
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	f040 8088 	bne.w	800bde4 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bcd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	623b      	str	r3, [r7, #32]
 800bcda:	627a      	str	r2, [r7, #36]	@ 0x24
 800bcdc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800bce0:	f7fc f8c0 	bl	8007e64 <HAL_RCCEx_GetPeriphCLKFreq>
 800bce4:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800bce6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	f000 80eb 	beq.w	800bec4 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bcee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcf2:	4a3b      	ldr	r2, [pc, #236]	@ (800bde0 <UART_SetConfig+0x248>)
 800bcf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcf8:	461a      	mov	r2, r3
 800bcfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcfc:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd00:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bd02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd04:	685a      	ldr	r2, [r3, #4]
 800bd06:	4613      	mov	r3, r2
 800bd08:	005b      	lsls	r3, r3, #1
 800bd0a:	4413      	add	r3, r2
 800bd0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d305      	bcc.n	800bd1e <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bd12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bd18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	d903      	bls.n	800bd26 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800bd1e:	2301      	movs	r3, #1
 800bd20:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bd24:	e048      	b.n	800bdb8 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd28:	2200      	movs	r2, #0
 800bd2a:	61bb      	str	r3, [r7, #24]
 800bd2c:	61fa      	str	r2, [r7, #28]
 800bd2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd32:	4a2b      	ldr	r2, [pc, #172]	@ (800bde0 <UART_SetConfig+0x248>)
 800bd34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd38:	b29b      	uxth	r3, r3
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	613b      	str	r3, [r7, #16]
 800bd3e:	617a      	str	r2, [r7, #20]
 800bd40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bd44:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800bd48:	f7f4 feec 	bl	8000b24 <__aeabi_uldivmod>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	460b      	mov	r3, r1
 800bd50:	4610      	mov	r0, r2
 800bd52:	4619      	mov	r1, r3
 800bd54:	f04f 0200 	mov.w	r2, #0
 800bd58:	f04f 0300 	mov.w	r3, #0
 800bd5c:	020b      	lsls	r3, r1, #8
 800bd5e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bd62:	0202      	lsls	r2, r0, #8
 800bd64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bd66:	6849      	ldr	r1, [r1, #4]
 800bd68:	0849      	lsrs	r1, r1, #1
 800bd6a:	2000      	movs	r0, #0
 800bd6c:	460c      	mov	r4, r1
 800bd6e:	4605      	mov	r5, r0
 800bd70:	eb12 0804 	adds.w	r8, r2, r4
 800bd74:	eb43 0905 	adc.w	r9, r3, r5
 800bd78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	60bb      	str	r3, [r7, #8]
 800bd80:	60fa      	str	r2, [r7, #12]
 800bd82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bd86:	4640      	mov	r0, r8
 800bd88:	4649      	mov	r1, r9
 800bd8a:	f7f4 fecb 	bl	8000b24 <__aeabi_uldivmod>
 800bd8e:	4602      	mov	r2, r0
 800bd90:	460b      	mov	r3, r1
 800bd92:	4613      	mov	r3, r2
 800bd94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bd96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bd9c:	d308      	bcc.n	800bdb0 <UART_SetConfig+0x218>
 800bd9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bda0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bda4:	d204      	bcs.n	800bdb0 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800bda6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bdac:	60da      	str	r2, [r3, #12]
 800bdae:	e003      	b.n	800bdb8 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800bdb6:	e085      	b.n	800bec4 <UART_SetConfig+0x32c>
 800bdb8:	e084      	b.n	800bec4 <UART_SetConfig+0x32c>
 800bdba:	bf00      	nop
 800bdbc:	44002400 	.word	0x44002400
 800bdc0:	cfff69f3 	.word	0xcfff69f3
 800bdc4:	54002400 	.word	0x54002400
 800bdc8:	40013800 	.word	0x40013800
 800bdcc:	40004400 	.word	0x40004400
 800bdd0:	40004800 	.word	0x40004800
 800bdd4:	40004c00 	.word	0x40004c00
 800bdd8:	40005000 	.word	0x40005000
 800bddc:	40006400 	.word	0x40006400
 800bde0:	0800dac8 	.word	0x0800dac8
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bde4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bde6:	69db      	ldr	r3, [r3, #28]
 800bde8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bdec:	d13c      	bne.n	800be68 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bdee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	603b      	str	r3, [r7, #0]
 800bdf4:	607a      	str	r2, [r7, #4]
 800bdf6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bdfa:	f7fc f833 	bl	8007e64 <HAL_RCCEx_GetPeriphCLKFreq>
 800bdfe:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800be00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be02:	2b00      	cmp	r3, #0
 800be04:	d05e      	beq.n	800bec4 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be0a:	4a39      	ldr	r2, [pc, #228]	@ (800bef0 <UART_SetConfig+0x358>)
 800be0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be10:	461a      	mov	r2, r3
 800be12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be14:	fbb3 f3f2 	udiv	r3, r3, r2
 800be18:	005a      	lsls	r2, r3, #1
 800be1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	085b      	lsrs	r3, r3, #1
 800be20:	441a      	add	r2, r3
 800be22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be24:	685b      	ldr	r3, [r3, #4]
 800be26:	fbb2 f3f3 	udiv	r3, r2, r3
 800be2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be2e:	2b0f      	cmp	r3, #15
 800be30:	d916      	bls.n	800be60 <UART_SetConfig+0x2c8>
 800be32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be38:	d212      	bcs.n	800be60 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800be3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be3c:	b29b      	uxth	r3, r3
 800be3e:	f023 030f 	bic.w	r3, r3, #15
 800be42:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800be44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be46:	085b      	lsrs	r3, r3, #1
 800be48:	b29b      	uxth	r3, r3
 800be4a:	f003 0307 	and.w	r3, r3, #7
 800be4e:	b29a      	uxth	r2, r3
 800be50:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800be52:	4313      	orrs	r3, r2
 800be54:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800be56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800be5c:	60da      	str	r2, [r3, #12]
 800be5e:	e031      	b.n	800bec4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800be60:	2301      	movs	r3, #1
 800be62:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800be66:	e02d      	b.n	800bec4 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800be68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be6a:	2200      	movs	r2, #0
 800be6c:	469a      	mov	sl, r3
 800be6e:	4693      	mov	fp, r2
 800be70:	4650      	mov	r0, sl
 800be72:	4659      	mov	r1, fp
 800be74:	f7fb fff6 	bl	8007e64 <HAL_RCCEx_GetPeriphCLKFreq>
 800be78:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800be7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d021      	beq.n	800bec4 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be84:	4a1a      	ldr	r2, [pc, #104]	@ (800bef0 <UART_SetConfig+0x358>)
 800be86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be8a:	461a      	mov	r2, r3
 800be8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be8e:	fbb3 f2f2 	udiv	r2, r3, r2
 800be92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	085b      	lsrs	r3, r3, #1
 800be98:	441a      	add	r2, r3
 800be9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bea4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bea6:	2b0f      	cmp	r3, #15
 800bea8:	d909      	bls.n	800bebe <UART_SetConfig+0x326>
 800beaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800beac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800beb0:	d205      	bcs.n	800bebe <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800beb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800beb4:	b29a      	uxth	r2, r3
 800beb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	60da      	str	r2, [r3, #12]
 800bebc:	e002      	b.n	800bec4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800bebe:	2301      	movs	r3, #1
 800bec0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bec6:	2201      	movs	r2, #1
 800bec8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800becc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bece:	2201      	movs	r2, #1
 800bed0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bed6:	2200      	movs	r2, #0
 800bed8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800beda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bedc:	2200      	movs	r2, #0
 800bede:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bee0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3750      	adds	r7, #80	@ 0x50
 800bee8:	46bd      	mov	sp, r7
 800beea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800beee:	bf00      	nop
 800bef0:	0800dac8 	.word	0x0800dac8

0800bef4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b083      	sub	sp, #12
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf00:	f003 0308 	and.w	r3, r3, #8
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d00a      	beq.n	800bf1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	685b      	ldr	r3, [r3, #4]
 800bf0e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	430a      	orrs	r2, r1
 800bf1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf22:	f003 0301 	and.w	r3, r3, #1
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d00a      	beq.n	800bf40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	430a      	orrs	r2, r1
 800bf3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf44:	f003 0302 	and.w	r3, r3, #2
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d00a      	beq.n	800bf62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	430a      	orrs	r2, r1
 800bf60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf66:	f003 0304 	and.w	r3, r3, #4
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d00a      	beq.n	800bf84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	430a      	orrs	r2, r1
 800bf82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf88:	f003 0310 	and.w	r3, r3, #16
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d00a      	beq.n	800bfa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	689b      	ldr	r3, [r3, #8]
 800bf96:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	430a      	orrs	r2, r1
 800bfa4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfaa:	f003 0320 	and.w	r3, r3, #32
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d00a      	beq.n	800bfc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	689b      	ldr	r3, [r3, #8]
 800bfb8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	430a      	orrs	r2, r1
 800bfc6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d01a      	beq.n	800c00a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	685b      	ldr	r3, [r3, #4]
 800bfda:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	430a      	orrs	r2, r1
 800bfe8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bff2:	d10a      	bne.n	800c00a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	685b      	ldr	r3, [r3, #4]
 800bffa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	430a      	orrs	r2, r1
 800c008:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c00e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c012:	2b00      	cmp	r3, #0
 800c014:	d00a      	beq.n	800c02c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	685b      	ldr	r3, [r3, #4]
 800c01c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	430a      	orrs	r2, r1
 800c02a:	605a      	str	r2, [r3, #4]
  }
}
 800c02c:	bf00      	nop
 800c02e:	370c      	adds	r7, #12
 800c030:	46bd      	mov	sp, r7
 800c032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c036:	4770      	bx	lr

0800c038 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b098      	sub	sp, #96	@ 0x60
 800c03c:	af02      	add	r7, sp, #8
 800c03e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2200      	movs	r2, #0
 800c044:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c048:	f7f6 fe04 	bl	8002c54 <HAL_GetTick>
 800c04c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f003 0308 	and.w	r3, r3, #8
 800c058:	2b08      	cmp	r3, #8
 800c05a:	d12f      	bne.n	800c0bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c05c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c060:	9300      	str	r3, [sp, #0]
 800c062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c064:	2200      	movs	r2, #0
 800c066:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 f88e 	bl	800c18c <UART_WaitOnFlagUntilTimeout>
 800c070:	4603      	mov	r3, r0
 800c072:	2b00      	cmp	r3, #0
 800c074:	d022      	beq.n	800c0bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c07c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c07e:	e853 3f00 	ldrex	r3, [r3]
 800c082:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c086:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c08a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	461a      	mov	r2, r3
 800c092:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c094:	647b      	str	r3, [r7, #68]	@ 0x44
 800c096:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c098:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c09a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c09c:	e841 2300 	strex	r3, r2, [r1]
 800c0a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c0a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d1e6      	bne.n	800c076 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2220      	movs	r2, #32
 800c0ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c0b8:	2303      	movs	r3, #3
 800c0ba:	e063      	b.n	800c184 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f003 0304 	and.w	r3, r3, #4
 800c0c6:	2b04      	cmp	r3, #4
 800c0c8:	d149      	bne.n	800c15e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c0ca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c0ce:	9300      	str	r3, [sp, #0]
 800c0d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f000 f857 	bl	800c18c <UART_WaitOnFlagUntilTimeout>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d03c      	beq.n	800c15e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ec:	e853 3f00 	ldrex	r3, [r3]
 800c0f0:	623b      	str	r3, [r7, #32]
   return(result);
 800c0f2:	6a3b      	ldr	r3, [r7, #32]
 800c0f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c0f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	461a      	mov	r2, r3
 800c100:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c102:	633b      	str	r3, [r7, #48]	@ 0x30
 800c104:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c106:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c108:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c10a:	e841 2300 	strex	r3, r2, [r1]
 800c10e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c112:	2b00      	cmp	r3, #0
 800c114:	d1e6      	bne.n	800c0e4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	3308      	adds	r3, #8
 800c11c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	e853 3f00 	ldrex	r3, [r3]
 800c124:	60fb      	str	r3, [r7, #12]
   return(result);
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	f023 0301 	bic.w	r3, r3, #1
 800c12c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	3308      	adds	r3, #8
 800c134:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c136:	61fa      	str	r2, [r7, #28]
 800c138:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c13a:	69b9      	ldr	r1, [r7, #24]
 800c13c:	69fa      	ldr	r2, [r7, #28]
 800c13e:	e841 2300 	strex	r3, r2, [r1]
 800c142:	617b      	str	r3, [r7, #20]
   return(result);
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d1e5      	bne.n	800c116 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2220      	movs	r2, #32
 800c14e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2200      	movs	r2, #0
 800c156:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c15a:	2303      	movs	r3, #3
 800c15c:	e012      	b.n	800c184 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2220      	movs	r2, #32
 800c162:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2220      	movs	r2, #32
 800c16a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2200      	movs	r2, #0
 800c172:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2200      	movs	r2, #0
 800c178:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2200      	movs	r2, #0
 800c17e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c182:	2300      	movs	r3, #0
}
 800c184:	4618      	mov	r0, r3
 800c186:	3758      	adds	r7, #88	@ 0x58
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b084      	sub	sp, #16
 800c190:	af00      	add	r7, sp, #0
 800c192:	60f8      	str	r0, [r7, #12]
 800c194:	60b9      	str	r1, [r7, #8]
 800c196:	603b      	str	r3, [r7, #0]
 800c198:	4613      	mov	r3, r2
 800c19a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c19c:	e04f      	b.n	800c23e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c19e:	69bb      	ldr	r3, [r7, #24]
 800c1a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1a4:	d04b      	beq.n	800c23e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1a6:	f7f6 fd55 	bl	8002c54 <HAL_GetTick>
 800c1aa:	4602      	mov	r2, r0
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	1ad3      	subs	r3, r2, r3
 800c1b0:	69ba      	ldr	r2, [r7, #24]
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d302      	bcc.n	800c1bc <UART_WaitOnFlagUntilTimeout+0x30>
 800c1b6:	69bb      	ldr	r3, [r7, #24]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d101      	bne.n	800c1c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c1bc:	2303      	movs	r3, #3
 800c1be:	e04e      	b.n	800c25e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f003 0304 	and.w	r3, r3, #4
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d037      	beq.n	800c23e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	2b80      	cmp	r3, #128	@ 0x80
 800c1d2:	d034      	beq.n	800c23e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	2b40      	cmp	r3, #64	@ 0x40
 800c1d8:	d031      	beq.n	800c23e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	69db      	ldr	r3, [r3, #28]
 800c1e0:	f003 0308 	and.w	r3, r3, #8
 800c1e4:	2b08      	cmp	r3, #8
 800c1e6:	d110      	bne.n	800c20a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	2208      	movs	r2, #8
 800c1ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c1f0:	68f8      	ldr	r0, [r7, #12]
 800c1f2:	f000 f972 	bl	800c4da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	2208      	movs	r2, #8
 800c1fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	2200      	movs	r2, #0
 800c202:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c206:	2301      	movs	r3, #1
 800c208:	e029      	b.n	800c25e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	69db      	ldr	r3, [r3, #28]
 800c210:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c214:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c218:	d111      	bne.n	800c23e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c222:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c224:	68f8      	ldr	r0, [r7, #12]
 800c226:	f000 f958 	bl	800c4da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2220      	movs	r2, #32
 800c22e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	2200      	movs	r2, #0
 800c236:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c23a:	2303      	movs	r3, #3
 800c23c:	e00f      	b.n	800c25e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	69da      	ldr	r2, [r3, #28]
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	4013      	ands	r3, r2
 800c248:	68ba      	ldr	r2, [r7, #8]
 800c24a:	429a      	cmp	r2, r3
 800c24c:	bf0c      	ite	eq
 800c24e:	2301      	moveq	r3, #1
 800c250:	2300      	movne	r3, #0
 800c252:	b2db      	uxtb	r3, r3
 800c254:	461a      	mov	r2, r3
 800c256:	79fb      	ldrb	r3, [r7, #7]
 800c258:	429a      	cmp	r2, r3
 800c25a:	d0a0      	beq.n	800c19e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c25c:	2300      	movs	r3, #0
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3710      	adds	r7, #16
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
	...

0800c268 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b098      	sub	sp, #96	@ 0x60
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	60f8      	str	r0, [r7, #12]
 800c270:	60b9      	str	r1, [r7, #8]
 800c272:	4613      	mov	r3, r2
 800c274:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 800c276:	88fb      	ldrh	r3, [r7, #6]
 800c278:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

  huart->pRxBuffPtr = pData;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	68ba      	ldr	r2, [r7, #8]
 800c280:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	88fa      	ldrh	r2, [r7, #6]
 800c286:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	2200      	movs	r2, #0
 800c28e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	2222      	movs	r2, #34	@ 0x22
 800c296:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d07c      	beq.n	800c39e <UART_Start_Receive_DMA+0x136>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2aa:	4a68      	ldr	r2, [pc, #416]	@ (800c44c <UART_Start_Receive_DMA+0x1e4>)
 800c2ac:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2b4:	4a66      	ldr	r2, [pc, #408]	@ (800c450 <UART_Start_Receive_DMA+0x1e8>)
 800c2b6:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2be:	4a65      	ldr	r2, [pc, #404]	@ (800c454 <UART_Start_Receive_DMA+0x1ec>)
 800c2c0:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	689b      	ldr	r3, [r3, #8]
 800c2d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c2d4:	d107      	bne.n	800c2e6 <UART_Start_Receive_DMA+0x7e>
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	691b      	ldr	r3, [r3, #16]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d103      	bne.n	800c2e6 <UART_Start_Receive_DMA+0x7e>
    {
      nbByte = Size * 2U;
 800c2de:	88fb      	ldrh	r3, [r7, #6]
 800c2e0:	005b      	lsls	r3, r3, #1
 800c2e2:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }

    /* Check linked list mode */
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c2ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d034      	beq.n	800c360 <UART_Start_Receive_DMA+0xf8>
    {
      if ((huart->hdmarx->LinkedListQueue != NULL) && (huart->hdmarx->LinkedListQueue->Head != NULL))
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d02a      	beq.n	800c358 <UART_Start_Receive_DMA+0xf0>
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c308:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d023      	beq.n	800c358 <UART_Start_Receive_DMA+0xf0>
      {
        /* Set DMA data size */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c316:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 800c31e:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
          (uint32_t)&huart->Instance->RDR;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	f103 0224 	add.w	r2, r3, #36	@ 0x24
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c32e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)huart->pRxBuffPtr;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c33e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	611a      	str	r2, [r3, #16]

        /* Enable the UART receive DMA channel */
        status = HAL_DMAEx_List_Start_IT(huart->hdmarx);
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c34a:	4618      	mov	r0, r3
 800c34c:	f7f7 fcba 	bl	8003cc4 <HAL_DMAEx_List_Start_IT>
 800c350:	4603      	mov	r3, r0
 800c352:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c356:	e014      	b.n	800c382 <UART_Start_Receive_DMA+0x11a>
      }
      else
      {
        /* Update status */
        status = HAL_ERROR;
 800c358:	2301      	movs	r3, #1
 800c35a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c35e:	e010      	b.n	800c382 <UART_Start_Receive_DMA+0x11a>
      }
    }
    else
    {
      /* Enable the UART receive DMA channel */
      status = HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, nbByte);
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	3324      	adds	r3, #36	@ 0x24
 800c36c:	4619      	mov	r1, r3
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c372:	461a      	mov	r2, r3
 800c374:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800c378:	f7f6 ff58 	bl	800322c <HAL_DMA_Start_IT>
 800c37c:	4603      	mov	r3, r0
 800c37e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    }

    if (status != HAL_OK)
 800c382:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c386:	2b00      	cmp	r3, #0
 800c388:	d009      	beq.n	800c39e <UART_Start_Receive_DMA+0x136>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	2210      	movs	r2, #16
 800c38e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	2220      	movs	r2, #32
 800c396:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800c39a:	2301      	movs	r3, #1
 800c39c:	e051      	b.n	800c442 <UART_Start_Receive_DMA+0x1da>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	691b      	ldr	r3, [r3, #16]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d018      	beq.n	800c3d8 <UART_Start_Receive_DMA+0x170>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3ae:	e853 3f00 	ldrex	r3, [r3]
 800c3b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c3b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c3ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	461a      	mov	r2, r3
 800c3c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c3c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c3c6:	64ba      	str	r2, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3c8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800c3ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c3cc:	e841 2300 	strex	r3, r2, [r1]
 800c3d0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c3d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d1e6      	bne.n	800c3a6 <UART_Start_Receive_DMA+0x13e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	3308      	adds	r3, #8
 800c3de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3e2:	e853 3f00 	ldrex	r3, [r3]
 800c3e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c3e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3ea:	f043 0301 	orr.w	r3, r3, #1
 800c3ee:	657b      	str	r3, [r7, #84]	@ 0x54
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	3308      	adds	r3, #8
 800c3f6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c3f8:	63ba      	str	r2, [r7, #56]	@ 0x38
 800c3fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3fc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c3fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c400:	e841 2300 	strex	r3, r2, [r1]
 800c404:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d1e5      	bne.n	800c3d8 <UART_Start_Receive_DMA+0x170>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	3308      	adds	r3, #8
 800c412:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c414:	69bb      	ldr	r3, [r7, #24]
 800c416:	e853 3f00 	ldrex	r3, [r3]
 800c41a:	617b      	str	r3, [r7, #20]
   return(result);
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c422:	653b      	str	r3, [r7, #80]	@ 0x50
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	3308      	adds	r3, #8
 800c42a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c42c:	627a      	str	r2, [r7, #36]	@ 0x24
 800c42e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c430:	6a39      	ldr	r1, [r7, #32]
 800c432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c434:	e841 2300 	strex	r3, r2, [r1]
 800c438:	61fb      	str	r3, [r7, #28]
   return(result);
 800c43a:	69fb      	ldr	r3, [r7, #28]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d1e5      	bne.n	800c40c <UART_Start_Receive_DMA+0x1a4>

  return HAL_OK;
 800c440:	2300      	movs	r3, #0
}
 800c442:	4618      	mov	r0, r3
 800c444:	3760      	adds	r7, #96	@ 0x60
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
 800c44a:	bf00      	nop
 800c44c:	0800c5a7 	.word	0x0800c5a7
 800c450:	0800c699 	.word	0x0800c699
 800c454:	0800c6d7 	.word	0x0800c6d7

0800c458 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c458:	b480      	push	{r7}
 800c45a:	b08f      	sub	sp, #60	@ 0x3c
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c466:	6a3b      	ldr	r3, [r7, #32]
 800c468:	e853 3f00 	ldrex	r3, [r3]
 800c46c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c46e:	69fb      	ldr	r3, [r7, #28]
 800c470:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c474:	637b      	str	r3, [r7, #52]	@ 0x34
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	461a      	mov	r2, r3
 800c47c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c47e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c480:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c482:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c484:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c486:	e841 2300 	strex	r3, r2, [r1]
 800c48a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c48c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d1e6      	bne.n	800c460 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	3308      	adds	r3, #8
 800c498:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	e853 3f00 	ldrex	r3, [r3]
 800c4a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c4a8:	633b      	str	r3, [r7, #48]	@ 0x30
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	3308      	adds	r3, #8
 800c4b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4b2:	61ba      	str	r2, [r7, #24]
 800c4b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4b6:	6979      	ldr	r1, [r7, #20]
 800c4b8:	69ba      	ldr	r2, [r7, #24]
 800c4ba:	e841 2300 	strex	r3, r2, [r1]
 800c4be:	613b      	str	r3, [r7, #16]
   return(result);
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d1e5      	bne.n	800c492 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2220      	movs	r2, #32
 800c4ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c4ce:	bf00      	nop
 800c4d0:	373c      	adds	r7, #60	@ 0x3c
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d8:	4770      	bx	lr

0800c4da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c4da:	b480      	push	{r7}
 800c4dc:	b095      	sub	sp, #84	@ 0x54
 800c4de:	af00      	add	r7, sp, #0
 800c4e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4ea:	e853 3f00 	ldrex	r3, [r3]
 800c4ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c4f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c4f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	461a      	mov	r2, r3
 800c4fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c500:	643b      	str	r3, [r7, #64]	@ 0x40
 800c502:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c504:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c506:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c508:	e841 2300 	strex	r3, r2, [r1]
 800c50c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c50e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c510:	2b00      	cmp	r3, #0
 800c512:	d1e6      	bne.n	800c4e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	3308      	adds	r3, #8
 800c51a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c51c:	6a3b      	ldr	r3, [r7, #32]
 800c51e:	e853 3f00 	ldrex	r3, [r3]
 800c522:	61fb      	str	r3, [r7, #28]
   return(result);
 800c524:	69fb      	ldr	r3, [r7, #28]
 800c526:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c52a:	f023 0301 	bic.w	r3, r3, #1
 800c52e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	3308      	adds	r3, #8
 800c536:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c538:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c53a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c53c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c53e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c540:	e841 2300 	strex	r3, r2, [r1]
 800c544:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d1e3      	bne.n	800c514 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c550:	2b01      	cmp	r3, #1
 800c552:	d118      	bne.n	800c586 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	e853 3f00 	ldrex	r3, [r3]
 800c560:	60bb      	str	r3, [r7, #8]
   return(result);
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	f023 0310 	bic.w	r3, r3, #16
 800c568:	647b      	str	r3, [r7, #68]	@ 0x44
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	461a      	mov	r2, r3
 800c570:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c572:	61bb      	str	r3, [r7, #24]
 800c574:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c576:	6979      	ldr	r1, [r7, #20]
 800c578:	69ba      	ldr	r2, [r7, #24]
 800c57a:	e841 2300 	strex	r3, r2, [r1]
 800c57e:	613b      	str	r3, [r7, #16]
   return(result);
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d1e6      	bne.n	800c554 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2220      	movs	r2, #32
 800c58a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2200      	movs	r2, #0
 800c592:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2200      	movs	r2, #0
 800c598:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c59a:	bf00      	nop
 800c59c:	3754      	adds	r7, #84	@ 0x54
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a4:	4770      	bx	lr

0800c5a6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c5a6:	b580      	push	{r7, lr}
 800c5a8:	b096      	sub	sp, #88	@ 0x58
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c5b2:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5b8:	2b81      	cmp	r3, #129	@ 0x81
 800c5ba:	d057      	beq.n	800c66c <UART_DMAReceiveCplt+0xc6>
  {
    huart->RxXferCount = 0U;
 800c5bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5be:	2200      	movs	r2, #0
 800c5c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c5c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5cc:	e853 3f00 	ldrex	r3, [r3]
 800c5d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c5d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c5d8:	653b      	str	r3, [r7, #80]	@ 0x50
 800c5da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	461a      	mov	r2, r3
 800c5e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c5e2:	647b      	str	r3, [r7, #68]	@ 0x44
 800c5e4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c5e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c5ea:	e841 2300 	strex	r3, r2, [r1]
 800c5ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c5f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d1e6      	bne.n	800c5c4 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	3308      	adds	r3, #8
 800c5fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c600:	e853 3f00 	ldrex	r3, [r3]
 800c604:	623b      	str	r3, [r7, #32]
   return(result);
 800c606:	6a3b      	ldr	r3, [r7, #32]
 800c608:	f023 0301 	bic.w	r3, r3, #1
 800c60c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c60e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	3308      	adds	r3, #8
 800c614:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c616:	633a      	str	r2, [r7, #48]	@ 0x30
 800c618:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c61a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c61c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c61e:	e841 2300 	strex	r3, r2, [r1]
 800c622:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c626:	2b00      	cmp	r3, #0
 800c628:	d1e5      	bne.n	800c5f6 <UART_DMAReceiveCplt+0x50>
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c62a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c62c:	2220      	movs	r2, #32
 800c62e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c634:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c636:	2b01      	cmp	r3, #1
 800c638:	d118      	bne.n	800c66c <UART_DMAReceiveCplt+0xc6>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c63a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	e853 3f00 	ldrex	r3, [r3]
 800c646:	60fb      	str	r3, [r7, #12]
   return(result);
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	f023 0310 	bic.w	r3, r3, #16
 800c64e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	461a      	mov	r2, r3
 800c656:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c658:	61fb      	str	r3, [r7, #28]
 800c65a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c65c:	69b9      	ldr	r1, [r7, #24]
 800c65e:	69fa      	ldr	r2, [r7, #28]
 800c660:	e841 2300 	strex	r3, r2, [r1]
 800c664:	617b      	str	r3, [r7, #20]
   return(result);
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d1e6      	bne.n	800c63a <UART_DMAReceiveCplt+0x94>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c66c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c66e:	2200      	movs	r2, #0
 800c670:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c672:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c674:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c676:	2b01      	cmp	r3, #1
 800c678:	d107      	bne.n	800c68a <UART_DMAReceiveCplt+0xe4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c67a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c67c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c680:	4619      	mov	r1, r3
 800c682:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c684:	f7ff fa7c 	bl	800bb80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c688:	e002      	b.n	800c690 <UART_DMAReceiveCplt+0xea>
    HAL_UART_RxCpltCallback(huart);
 800c68a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c68c:	f7f5 fb4c 	bl	8001d28 <HAL_UART_RxCpltCallback>
}
 800c690:	bf00      	nop
 800c692:	3758      	adds	r7, #88	@ 0x58
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}

0800c698 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b084      	sub	sp, #16
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c6a4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	2201      	movs	r2, #1
 800c6aa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c6b0:	2b01      	cmp	r3, #1
 800c6b2:	d109      	bne.n	800c6c8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c6ba:	085b      	lsrs	r3, r3, #1
 800c6bc:	b29b      	uxth	r3, r3
 800c6be:	4619      	mov	r1, r3
 800c6c0:	68f8      	ldr	r0, [r7, #12]
 800c6c2:	f7ff fa5d 	bl	800bb80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c6c6:	e002      	b.n	800c6ce <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c6c8:	68f8      	ldr	r0, [r7, #12]
 800c6ca:	f7ff fa45 	bl	800bb58 <HAL_UART_RxHalfCpltCallback>
}
 800c6ce:	bf00      	nop
 800c6d0:	3710      	adds	r7, #16
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}

0800c6d6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c6d6:	b580      	push	{r7, lr}
 800c6d8:	b086      	sub	sp, #24
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c6e2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c6ea:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c6f2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	689b      	ldr	r3, [r3, #8]
 800c6fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c6fe:	2b80      	cmp	r3, #128	@ 0x80
 800c700:	d109      	bne.n	800c716 <UART_DMAError+0x40>
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	2b21      	cmp	r3, #33	@ 0x21
 800c706:	d106      	bne.n	800c716 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	2200      	movs	r2, #0
 800c70c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c710:	6978      	ldr	r0, [r7, #20]
 800c712:	f7ff fea1 	bl	800c458 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	689b      	ldr	r3, [r3, #8]
 800c71c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c720:	2b40      	cmp	r3, #64	@ 0x40
 800c722:	d109      	bne.n	800c738 <UART_DMAError+0x62>
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	2b22      	cmp	r3, #34	@ 0x22
 800c728:	d106      	bne.n	800c738 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	2200      	movs	r2, #0
 800c72e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c732:	6978      	ldr	r0, [r7, #20]
 800c734:	f7ff fed1 	bl	800c4da <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c73e:	f043 0210 	orr.w	r2, r3, #16
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c748:	6978      	ldr	r0, [r7, #20]
 800c74a:	f7ff fa0f 	bl	800bb6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c74e:	bf00      	nop
 800c750:	3718      	adds	r7, #24
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}

0800c756 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c756:	b580      	push	{r7, lr}
 800c758:	b084      	sub	sp, #16
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c762:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	2200      	movs	r2, #0
 800c768:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c76c:	68f8      	ldr	r0, [r7, #12]
 800c76e:	f7ff f9fd 	bl	800bb6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c772:	bf00      	nop
 800c774:	3710      	adds	r7, #16
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}

0800c77a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c77a:	b580      	push	{r7, lr}
 800c77c:	b088      	sub	sp, #32
 800c77e:	af00      	add	r7, sp, #0
 800c780:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	e853 3f00 	ldrex	r3, [r3]
 800c78e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c796:	61fb      	str	r3, [r7, #28]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	461a      	mov	r2, r3
 800c79e:	69fb      	ldr	r3, [r7, #28]
 800c7a0:	61bb      	str	r3, [r7, #24]
 800c7a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7a4:	6979      	ldr	r1, [r7, #20]
 800c7a6:	69ba      	ldr	r2, [r7, #24]
 800c7a8:	e841 2300 	strex	r3, r2, [r1]
 800c7ac:	613b      	str	r3, [r7, #16]
   return(result);
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d1e6      	bne.n	800c782 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2220      	movs	r2, #32
 800c7b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f7ff f9be 	bl	800bb44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c7c8:	bf00      	nop
 800c7ca:	3720      	adds	r7, #32
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}

0800c7d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b083      	sub	sp, #12
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c7d8:	bf00      	nop
 800c7da:	370c      	adds	r7, #12
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e2:	4770      	bx	lr

0800c7e4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b083      	sub	sp, #12
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c7ec:	bf00      	nop
 800c7ee:	370c      	adds	r7, #12
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f6:	4770      	bx	lr

0800c7f8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b083      	sub	sp, #12
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c800:	bf00      	nop
 800c802:	370c      	adds	r7, #12
 800c804:	46bd      	mov	sp, r7
 800c806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80a:	4770      	bx	lr

0800c80c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c80c:	b480      	push	{r7}
 800c80e:	b085      	sub	sp, #20
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c81a:	2b01      	cmp	r3, #1
 800c81c:	d101      	bne.n	800c822 <HAL_UARTEx_DisableFifoMode+0x16>
 800c81e:	2302      	movs	r3, #2
 800c820:	e027      	b.n	800c872 <HAL_UARTEx_DisableFifoMode+0x66>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2201      	movs	r2, #1
 800c826:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2224      	movs	r2, #36	@ 0x24
 800c82e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f022 0201 	bic.w	r2, r2, #1
 800c848:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c850:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2200      	movs	r2, #0
 800c856:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	68fa      	ldr	r2, [r7, #12]
 800c85e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2220      	movs	r2, #32
 800c864:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2200      	movs	r2, #0
 800c86c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c870:	2300      	movs	r3, #0
}
 800c872:	4618      	mov	r0, r3
 800c874:	3714      	adds	r7, #20
 800c876:	46bd      	mov	sp, r7
 800c878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87c:	4770      	bx	lr

0800c87e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c87e:	b580      	push	{r7, lr}
 800c880:	b084      	sub	sp, #16
 800c882:	af00      	add	r7, sp, #0
 800c884:	6078      	str	r0, [r7, #4]
 800c886:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c88e:	2b01      	cmp	r3, #1
 800c890:	d101      	bne.n	800c896 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c892:	2302      	movs	r3, #2
 800c894:	e02d      	b.n	800c8f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2201      	movs	r2, #1
 800c89a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2224      	movs	r2, #36	@ 0x24
 800c8a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	681a      	ldr	r2, [r3, #0]
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f022 0201 	bic.w	r2, r2, #1
 800c8bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	689b      	ldr	r3, [r3, #8]
 800c8c4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	683a      	ldr	r2, [r7, #0]
 800c8ce:	430a      	orrs	r2, r1
 800c8d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f000 f850 	bl	800c978 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	68fa      	ldr	r2, [r7, #12]
 800c8de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2220      	movs	r2, #32
 800c8e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c8f0:	2300      	movs	r3, #0
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3710      	adds	r7, #16
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}

0800c8fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c8fa:	b580      	push	{r7, lr}
 800c8fc:	b084      	sub	sp, #16
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	6078      	str	r0, [r7, #4]
 800c902:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c90a:	2b01      	cmp	r3, #1
 800c90c:	d101      	bne.n	800c912 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c90e:	2302      	movs	r3, #2
 800c910:	e02d      	b.n	800c96e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2201      	movs	r2, #1
 800c916:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2224      	movs	r2, #36	@ 0x24
 800c91e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	681a      	ldr	r2, [r3, #0]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	f022 0201 	bic.w	r2, r2, #1
 800c938:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	689b      	ldr	r3, [r3, #8]
 800c940:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	683a      	ldr	r2, [r7, #0]
 800c94a:	430a      	orrs	r2, r1
 800c94c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f000 f812 	bl	800c978 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	68fa      	ldr	r2, [r7, #12]
 800c95a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2220      	movs	r2, #32
 800c960:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2200      	movs	r2, #0
 800c968:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c96c:	2300      	movs	r3, #0
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3710      	adds	r7, #16
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}
	...

0800c978 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c978:	b480      	push	{r7}
 800c97a:	b085      	sub	sp, #20
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c984:	2b00      	cmp	r3, #0
 800c986:	d108      	bne.n	800c99a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2201      	movs	r2, #1
 800c98c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2201      	movs	r2, #1
 800c994:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c998:	e031      	b.n	800c9fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c99a:	2308      	movs	r3, #8
 800c99c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c99e:	2308      	movs	r3, #8
 800c9a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	689b      	ldr	r3, [r3, #8]
 800c9a8:	0e5b      	lsrs	r3, r3, #25
 800c9aa:	b2db      	uxtb	r3, r3
 800c9ac:	f003 0307 	and.w	r3, r3, #7
 800c9b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	689b      	ldr	r3, [r3, #8]
 800c9b8:	0f5b      	lsrs	r3, r3, #29
 800c9ba:	b2db      	uxtb	r3, r3
 800c9bc:	f003 0307 	and.w	r3, r3, #7
 800c9c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c9c2:	7bbb      	ldrb	r3, [r7, #14]
 800c9c4:	7b3a      	ldrb	r2, [r7, #12]
 800c9c6:	4911      	ldr	r1, [pc, #68]	@ (800ca0c <UARTEx_SetNbDataToProcess+0x94>)
 800c9c8:	5c8a      	ldrb	r2, [r1, r2]
 800c9ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c9ce:	7b3a      	ldrb	r2, [r7, #12]
 800c9d0:	490f      	ldr	r1, [pc, #60]	@ (800ca10 <UARTEx_SetNbDataToProcess+0x98>)
 800c9d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c9d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800c9d8:	b29a      	uxth	r2, r3
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c9e0:	7bfb      	ldrb	r3, [r7, #15]
 800c9e2:	7b7a      	ldrb	r2, [r7, #13]
 800c9e4:	4909      	ldr	r1, [pc, #36]	@ (800ca0c <UARTEx_SetNbDataToProcess+0x94>)
 800c9e6:	5c8a      	ldrb	r2, [r1, r2]
 800c9e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c9ec:	7b7a      	ldrb	r2, [r7, #13]
 800c9ee:	4908      	ldr	r1, [pc, #32]	@ (800ca10 <UARTEx_SetNbDataToProcess+0x98>)
 800c9f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c9f2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c9f6:	b29a      	uxth	r2, r3
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c9fe:	bf00      	nop
 800ca00:	3714      	adds	r7, #20
 800ca02:	46bd      	mov	sp, r7
 800ca04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca08:	4770      	bx	lr
 800ca0a:	bf00      	nop
 800ca0c:	0800dae0 	.word	0x0800dae0
 800ca10:	0800dae8 	.word	0x0800dae8

0800ca14 <std>:
 800ca14:	2300      	movs	r3, #0
 800ca16:	b510      	push	{r4, lr}
 800ca18:	4604      	mov	r4, r0
 800ca1a:	6083      	str	r3, [r0, #8]
 800ca1c:	8181      	strh	r1, [r0, #12]
 800ca1e:	4619      	mov	r1, r3
 800ca20:	6643      	str	r3, [r0, #100]	@ 0x64
 800ca22:	81c2      	strh	r2, [r0, #14]
 800ca24:	2208      	movs	r2, #8
 800ca26:	6183      	str	r3, [r0, #24]
 800ca28:	e9c0 3300 	strd	r3, r3, [r0]
 800ca2c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ca30:	305c      	adds	r0, #92	@ 0x5c
 800ca32:	f000 f9f9 	bl	800ce28 <memset>
 800ca36:	4b0d      	ldr	r3, [pc, #52]	@ (800ca6c <std+0x58>)
 800ca38:	6224      	str	r4, [r4, #32]
 800ca3a:	6263      	str	r3, [r4, #36]	@ 0x24
 800ca3c:	4b0c      	ldr	r3, [pc, #48]	@ (800ca70 <std+0x5c>)
 800ca3e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ca40:	4b0c      	ldr	r3, [pc, #48]	@ (800ca74 <std+0x60>)
 800ca42:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ca44:	4b0c      	ldr	r3, [pc, #48]	@ (800ca78 <std+0x64>)
 800ca46:	6323      	str	r3, [r4, #48]	@ 0x30
 800ca48:	4b0c      	ldr	r3, [pc, #48]	@ (800ca7c <std+0x68>)
 800ca4a:	429c      	cmp	r4, r3
 800ca4c:	d006      	beq.n	800ca5c <std+0x48>
 800ca4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ca52:	4294      	cmp	r4, r2
 800ca54:	d002      	beq.n	800ca5c <std+0x48>
 800ca56:	33d0      	adds	r3, #208	@ 0xd0
 800ca58:	429c      	cmp	r4, r3
 800ca5a:	d105      	bne.n	800ca68 <std+0x54>
 800ca5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ca60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca64:	f000 ba58 	b.w	800cf18 <__retarget_lock_init_recursive>
 800ca68:	bd10      	pop	{r4, pc}
 800ca6a:	bf00      	nop
 800ca6c:	0800cc79 	.word	0x0800cc79
 800ca70:	0800cc9b 	.word	0x0800cc9b
 800ca74:	0800ccd3 	.word	0x0800ccd3
 800ca78:	0800ccf7 	.word	0x0800ccf7
 800ca7c:	200005a4 	.word	0x200005a4

0800ca80 <stdio_exit_handler>:
 800ca80:	4a02      	ldr	r2, [pc, #8]	@ (800ca8c <stdio_exit_handler+0xc>)
 800ca82:	4903      	ldr	r1, [pc, #12]	@ (800ca90 <stdio_exit_handler+0x10>)
 800ca84:	4803      	ldr	r0, [pc, #12]	@ (800ca94 <stdio_exit_handler+0x14>)
 800ca86:	f000 b869 	b.w	800cb5c <_fwalk_sglue>
 800ca8a:	bf00      	nop
 800ca8c:	20000090 	.word	0x20000090
 800ca90:	0800d7c1 	.word	0x0800d7c1
 800ca94:	200000a0 	.word	0x200000a0

0800ca98 <cleanup_stdio>:
 800ca98:	6841      	ldr	r1, [r0, #4]
 800ca9a:	4b0c      	ldr	r3, [pc, #48]	@ (800cacc <cleanup_stdio+0x34>)
 800ca9c:	4299      	cmp	r1, r3
 800ca9e:	b510      	push	{r4, lr}
 800caa0:	4604      	mov	r4, r0
 800caa2:	d001      	beq.n	800caa8 <cleanup_stdio+0x10>
 800caa4:	f000 fe8c 	bl	800d7c0 <_fflush_r>
 800caa8:	68a1      	ldr	r1, [r4, #8]
 800caaa:	4b09      	ldr	r3, [pc, #36]	@ (800cad0 <cleanup_stdio+0x38>)
 800caac:	4299      	cmp	r1, r3
 800caae:	d002      	beq.n	800cab6 <cleanup_stdio+0x1e>
 800cab0:	4620      	mov	r0, r4
 800cab2:	f000 fe85 	bl	800d7c0 <_fflush_r>
 800cab6:	68e1      	ldr	r1, [r4, #12]
 800cab8:	4b06      	ldr	r3, [pc, #24]	@ (800cad4 <cleanup_stdio+0x3c>)
 800caba:	4299      	cmp	r1, r3
 800cabc:	d004      	beq.n	800cac8 <cleanup_stdio+0x30>
 800cabe:	4620      	mov	r0, r4
 800cac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cac4:	f000 be7c 	b.w	800d7c0 <_fflush_r>
 800cac8:	bd10      	pop	{r4, pc}
 800caca:	bf00      	nop
 800cacc:	200005a4 	.word	0x200005a4
 800cad0:	2000060c 	.word	0x2000060c
 800cad4:	20000674 	.word	0x20000674

0800cad8 <global_stdio_init.part.0>:
 800cad8:	b510      	push	{r4, lr}
 800cada:	4b0b      	ldr	r3, [pc, #44]	@ (800cb08 <global_stdio_init.part.0+0x30>)
 800cadc:	2104      	movs	r1, #4
 800cade:	4c0b      	ldr	r4, [pc, #44]	@ (800cb0c <global_stdio_init.part.0+0x34>)
 800cae0:	4a0b      	ldr	r2, [pc, #44]	@ (800cb10 <global_stdio_init.part.0+0x38>)
 800cae2:	4620      	mov	r0, r4
 800cae4:	601a      	str	r2, [r3, #0]
 800cae6:	2200      	movs	r2, #0
 800cae8:	f7ff ff94 	bl	800ca14 <std>
 800caec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800caf0:	2201      	movs	r2, #1
 800caf2:	2109      	movs	r1, #9
 800caf4:	f7ff ff8e 	bl	800ca14 <std>
 800caf8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cafc:	2202      	movs	r2, #2
 800cafe:	2112      	movs	r1, #18
 800cb00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb04:	f7ff bf86 	b.w	800ca14 <std>
 800cb08:	200006dc 	.word	0x200006dc
 800cb0c:	200005a4 	.word	0x200005a4
 800cb10:	0800ca81 	.word	0x0800ca81

0800cb14 <__sfp_lock_acquire>:
 800cb14:	4801      	ldr	r0, [pc, #4]	@ (800cb1c <__sfp_lock_acquire+0x8>)
 800cb16:	f000 ba00 	b.w	800cf1a <__retarget_lock_acquire_recursive>
 800cb1a:	bf00      	nop
 800cb1c:	200006e5 	.word	0x200006e5

0800cb20 <__sfp_lock_release>:
 800cb20:	4801      	ldr	r0, [pc, #4]	@ (800cb28 <__sfp_lock_release+0x8>)
 800cb22:	f000 b9fb 	b.w	800cf1c <__retarget_lock_release_recursive>
 800cb26:	bf00      	nop
 800cb28:	200006e5 	.word	0x200006e5

0800cb2c <__sinit>:
 800cb2c:	b510      	push	{r4, lr}
 800cb2e:	4604      	mov	r4, r0
 800cb30:	f7ff fff0 	bl	800cb14 <__sfp_lock_acquire>
 800cb34:	6a23      	ldr	r3, [r4, #32]
 800cb36:	b11b      	cbz	r3, 800cb40 <__sinit+0x14>
 800cb38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb3c:	f7ff bff0 	b.w	800cb20 <__sfp_lock_release>
 800cb40:	4b04      	ldr	r3, [pc, #16]	@ (800cb54 <__sinit+0x28>)
 800cb42:	6223      	str	r3, [r4, #32]
 800cb44:	4b04      	ldr	r3, [pc, #16]	@ (800cb58 <__sinit+0x2c>)
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d1f5      	bne.n	800cb38 <__sinit+0xc>
 800cb4c:	f7ff ffc4 	bl	800cad8 <global_stdio_init.part.0>
 800cb50:	e7f2      	b.n	800cb38 <__sinit+0xc>
 800cb52:	bf00      	nop
 800cb54:	0800ca99 	.word	0x0800ca99
 800cb58:	200006dc 	.word	0x200006dc

0800cb5c <_fwalk_sglue>:
 800cb5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb60:	4607      	mov	r7, r0
 800cb62:	4688      	mov	r8, r1
 800cb64:	4614      	mov	r4, r2
 800cb66:	2600      	movs	r6, #0
 800cb68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cb6c:	f1b9 0901 	subs.w	r9, r9, #1
 800cb70:	d505      	bpl.n	800cb7e <_fwalk_sglue+0x22>
 800cb72:	6824      	ldr	r4, [r4, #0]
 800cb74:	2c00      	cmp	r4, #0
 800cb76:	d1f7      	bne.n	800cb68 <_fwalk_sglue+0xc>
 800cb78:	4630      	mov	r0, r6
 800cb7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb7e:	89ab      	ldrh	r3, [r5, #12]
 800cb80:	2b01      	cmp	r3, #1
 800cb82:	d907      	bls.n	800cb94 <_fwalk_sglue+0x38>
 800cb84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb88:	3301      	adds	r3, #1
 800cb8a:	d003      	beq.n	800cb94 <_fwalk_sglue+0x38>
 800cb8c:	4629      	mov	r1, r5
 800cb8e:	4638      	mov	r0, r7
 800cb90:	47c0      	blx	r8
 800cb92:	4306      	orrs	r6, r0
 800cb94:	3568      	adds	r5, #104	@ 0x68
 800cb96:	e7e9      	b.n	800cb6c <_fwalk_sglue+0x10>

0800cb98 <iprintf>:
 800cb98:	b40f      	push	{r0, r1, r2, r3}
 800cb9a:	b507      	push	{r0, r1, r2, lr}
 800cb9c:	4906      	ldr	r1, [pc, #24]	@ (800cbb8 <iprintf+0x20>)
 800cb9e:	ab04      	add	r3, sp, #16
 800cba0:	6808      	ldr	r0, [r1, #0]
 800cba2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cba6:	6881      	ldr	r1, [r0, #8]
 800cba8:	9301      	str	r3, [sp, #4]
 800cbaa:	f000 fadb 	bl	800d164 <_vfiprintf_r>
 800cbae:	b003      	add	sp, #12
 800cbb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbb4:	b004      	add	sp, #16
 800cbb6:	4770      	bx	lr
 800cbb8:	2000009c 	.word	0x2000009c

0800cbbc <_puts_r>:
 800cbbc:	6a03      	ldr	r3, [r0, #32]
 800cbbe:	b570      	push	{r4, r5, r6, lr}
 800cbc0:	4605      	mov	r5, r0
 800cbc2:	460e      	mov	r6, r1
 800cbc4:	6884      	ldr	r4, [r0, #8]
 800cbc6:	b90b      	cbnz	r3, 800cbcc <_puts_r+0x10>
 800cbc8:	f7ff ffb0 	bl	800cb2c <__sinit>
 800cbcc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cbce:	07db      	lsls	r3, r3, #31
 800cbd0:	d405      	bmi.n	800cbde <_puts_r+0x22>
 800cbd2:	89a3      	ldrh	r3, [r4, #12]
 800cbd4:	0598      	lsls	r0, r3, #22
 800cbd6:	d402      	bmi.n	800cbde <_puts_r+0x22>
 800cbd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cbda:	f000 f99e 	bl	800cf1a <__retarget_lock_acquire_recursive>
 800cbde:	89a3      	ldrh	r3, [r4, #12]
 800cbe0:	0719      	lsls	r1, r3, #28
 800cbe2:	d502      	bpl.n	800cbea <_puts_r+0x2e>
 800cbe4:	6923      	ldr	r3, [r4, #16]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d135      	bne.n	800cc56 <_puts_r+0x9a>
 800cbea:	4621      	mov	r1, r4
 800cbec:	4628      	mov	r0, r5
 800cbee:	f000 f8c5 	bl	800cd7c <__swsetup_r>
 800cbf2:	b380      	cbz	r0, 800cc56 <_puts_r+0x9a>
 800cbf4:	f04f 35ff 	mov.w	r5, #4294967295
 800cbf8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cbfa:	07da      	lsls	r2, r3, #31
 800cbfc:	d405      	bmi.n	800cc0a <_puts_r+0x4e>
 800cbfe:	89a3      	ldrh	r3, [r4, #12]
 800cc00:	059b      	lsls	r3, r3, #22
 800cc02:	d402      	bmi.n	800cc0a <_puts_r+0x4e>
 800cc04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc06:	f000 f989 	bl	800cf1c <__retarget_lock_release_recursive>
 800cc0a:	4628      	mov	r0, r5
 800cc0c:	bd70      	pop	{r4, r5, r6, pc}
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	da04      	bge.n	800cc1c <_puts_r+0x60>
 800cc12:	69a2      	ldr	r2, [r4, #24]
 800cc14:	429a      	cmp	r2, r3
 800cc16:	dc17      	bgt.n	800cc48 <_puts_r+0x8c>
 800cc18:	290a      	cmp	r1, #10
 800cc1a:	d015      	beq.n	800cc48 <_puts_r+0x8c>
 800cc1c:	6823      	ldr	r3, [r4, #0]
 800cc1e:	1c5a      	adds	r2, r3, #1
 800cc20:	6022      	str	r2, [r4, #0]
 800cc22:	7019      	strb	r1, [r3, #0]
 800cc24:	68a3      	ldr	r3, [r4, #8]
 800cc26:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cc2a:	3b01      	subs	r3, #1
 800cc2c:	60a3      	str	r3, [r4, #8]
 800cc2e:	2900      	cmp	r1, #0
 800cc30:	d1ed      	bne.n	800cc0e <_puts_r+0x52>
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	da11      	bge.n	800cc5a <_puts_r+0x9e>
 800cc36:	4622      	mov	r2, r4
 800cc38:	210a      	movs	r1, #10
 800cc3a:	4628      	mov	r0, r5
 800cc3c:	f000 f85f 	bl	800ccfe <__swbuf_r>
 800cc40:	3001      	adds	r0, #1
 800cc42:	d0d7      	beq.n	800cbf4 <_puts_r+0x38>
 800cc44:	250a      	movs	r5, #10
 800cc46:	e7d7      	b.n	800cbf8 <_puts_r+0x3c>
 800cc48:	4622      	mov	r2, r4
 800cc4a:	4628      	mov	r0, r5
 800cc4c:	f000 f857 	bl	800ccfe <__swbuf_r>
 800cc50:	3001      	adds	r0, #1
 800cc52:	d1e7      	bne.n	800cc24 <_puts_r+0x68>
 800cc54:	e7ce      	b.n	800cbf4 <_puts_r+0x38>
 800cc56:	3e01      	subs	r6, #1
 800cc58:	e7e4      	b.n	800cc24 <_puts_r+0x68>
 800cc5a:	6823      	ldr	r3, [r4, #0]
 800cc5c:	1c5a      	adds	r2, r3, #1
 800cc5e:	6022      	str	r2, [r4, #0]
 800cc60:	220a      	movs	r2, #10
 800cc62:	701a      	strb	r2, [r3, #0]
 800cc64:	e7ee      	b.n	800cc44 <_puts_r+0x88>
	...

0800cc68 <puts>:
 800cc68:	4b02      	ldr	r3, [pc, #8]	@ (800cc74 <puts+0xc>)
 800cc6a:	4601      	mov	r1, r0
 800cc6c:	6818      	ldr	r0, [r3, #0]
 800cc6e:	f7ff bfa5 	b.w	800cbbc <_puts_r>
 800cc72:	bf00      	nop
 800cc74:	2000009c 	.word	0x2000009c

0800cc78 <__sread>:
 800cc78:	b510      	push	{r4, lr}
 800cc7a:	460c      	mov	r4, r1
 800cc7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc80:	f000 f8fc 	bl	800ce7c <_read_r>
 800cc84:	2800      	cmp	r0, #0
 800cc86:	bfab      	itete	ge
 800cc88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cc8a:	89a3      	ldrhlt	r3, [r4, #12]
 800cc8c:	181b      	addge	r3, r3, r0
 800cc8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cc92:	bfac      	ite	ge
 800cc94:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cc96:	81a3      	strhlt	r3, [r4, #12]
 800cc98:	bd10      	pop	{r4, pc}

0800cc9a <__swrite>:
 800cc9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc9e:	461f      	mov	r7, r3
 800cca0:	898b      	ldrh	r3, [r1, #12]
 800cca2:	4605      	mov	r5, r0
 800cca4:	460c      	mov	r4, r1
 800cca6:	05db      	lsls	r3, r3, #23
 800cca8:	4616      	mov	r6, r2
 800ccaa:	d505      	bpl.n	800ccb8 <__swrite+0x1e>
 800ccac:	2302      	movs	r3, #2
 800ccae:	2200      	movs	r2, #0
 800ccb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccb4:	f000 f8d0 	bl	800ce58 <_lseek_r>
 800ccb8:	89a3      	ldrh	r3, [r4, #12]
 800ccba:	4632      	mov	r2, r6
 800ccbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ccc0:	4628      	mov	r0, r5
 800ccc2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ccc6:	81a3      	strh	r3, [r4, #12]
 800ccc8:	463b      	mov	r3, r7
 800ccca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccce:	f000 b8e7 	b.w	800cea0 <_write_r>

0800ccd2 <__sseek>:
 800ccd2:	b510      	push	{r4, lr}
 800ccd4:	460c      	mov	r4, r1
 800ccd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccda:	f000 f8bd 	bl	800ce58 <_lseek_r>
 800ccde:	1c43      	adds	r3, r0, #1
 800cce0:	89a3      	ldrh	r3, [r4, #12]
 800cce2:	bf15      	itete	ne
 800cce4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cce6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ccea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ccee:	81a3      	strheq	r3, [r4, #12]
 800ccf0:	bf18      	it	ne
 800ccf2:	81a3      	strhne	r3, [r4, #12]
 800ccf4:	bd10      	pop	{r4, pc}

0800ccf6 <__sclose>:
 800ccf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccfa:	f000 b89d 	b.w	800ce38 <_close_r>

0800ccfe <__swbuf_r>:
 800ccfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd00:	460e      	mov	r6, r1
 800cd02:	4614      	mov	r4, r2
 800cd04:	4605      	mov	r5, r0
 800cd06:	b118      	cbz	r0, 800cd10 <__swbuf_r+0x12>
 800cd08:	6a03      	ldr	r3, [r0, #32]
 800cd0a:	b90b      	cbnz	r3, 800cd10 <__swbuf_r+0x12>
 800cd0c:	f7ff ff0e 	bl	800cb2c <__sinit>
 800cd10:	69a3      	ldr	r3, [r4, #24]
 800cd12:	60a3      	str	r3, [r4, #8]
 800cd14:	89a3      	ldrh	r3, [r4, #12]
 800cd16:	071a      	lsls	r2, r3, #28
 800cd18:	d501      	bpl.n	800cd1e <__swbuf_r+0x20>
 800cd1a:	6923      	ldr	r3, [r4, #16]
 800cd1c:	b943      	cbnz	r3, 800cd30 <__swbuf_r+0x32>
 800cd1e:	4621      	mov	r1, r4
 800cd20:	4628      	mov	r0, r5
 800cd22:	f000 f82b 	bl	800cd7c <__swsetup_r>
 800cd26:	b118      	cbz	r0, 800cd30 <__swbuf_r+0x32>
 800cd28:	f04f 37ff 	mov.w	r7, #4294967295
 800cd2c:	4638      	mov	r0, r7
 800cd2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd30:	6823      	ldr	r3, [r4, #0]
 800cd32:	b2f6      	uxtb	r6, r6
 800cd34:	6922      	ldr	r2, [r4, #16]
 800cd36:	4637      	mov	r7, r6
 800cd38:	1a98      	subs	r0, r3, r2
 800cd3a:	6963      	ldr	r3, [r4, #20]
 800cd3c:	4283      	cmp	r3, r0
 800cd3e:	dc05      	bgt.n	800cd4c <__swbuf_r+0x4e>
 800cd40:	4621      	mov	r1, r4
 800cd42:	4628      	mov	r0, r5
 800cd44:	f000 fd3c 	bl	800d7c0 <_fflush_r>
 800cd48:	2800      	cmp	r0, #0
 800cd4a:	d1ed      	bne.n	800cd28 <__swbuf_r+0x2a>
 800cd4c:	68a3      	ldr	r3, [r4, #8]
 800cd4e:	3b01      	subs	r3, #1
 800cd50:	60a3      	str	r3, [r4, #8]
 800cd52:	6823      	ldr	r3, [r4, #0]
 800cd54:	1c5a      	adds	r2, r3, #1
 800cd56:	6022      	str	r2, [r4, #0]
 800cd58:	701e      	strb	r6, [r3, #0]
 800cd5a:	1c43      	adds	r3, r0, #1
 800cd5c:	6962      	ldr	r2, [r4, #20]
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d004      	beq.n	800cd6c <__swbuf_r+0x6e>
 800cd62:	89a3      	ldrh	r3, [r4, #12]
 800cd64:	07db      	lsls	r3, r3, #31
 800cd66:	d5e1      	bpl.n	800cd2c <__swbuf_r+0x2e>
 800cd68:	2e0a      	cmp	r6, #10
 800cd6a:	d1df      	bne.n	800cd2c <__swbuf_r+0x2e>
 800cd6c:	4621      	mov	r1, r4
 800cd6e:	4628      	mov	r0, r5
 800cd70:	f000 fd26 	bl	800d7c0 <_fflush_r>
 800cd74:	2800      	cmp	r0, #0
 800cd76:	d0d9      	beq.n	800cd2c <__swbuf_r+0x2e>
 800cd78:	e7d6      	b.n	800cd28 <__swbuf_r+0x2a>
	...

0800cd7c <__swsetup_r>:
 800cd7c:	b538      	push	{r3, r4, r5, lr}
 800cd7e:	4b29      	ldr	r3, [pc, #164]	@ (800ce24 <__swsetup_r+0xa8>)
 800cd80:	4605      	mov	r5, r0
 800cd82:	460c      	mov	r4, r1
 800cd84:	6818      	ldr	r0, [r3, #0]
 800cd86:	b118      	cbz	r0, 800cd90 <__swsetup_r+0x14>
 800cd88:	6a03      	ldr	r3, [r0, #32]
 800cd8a:	b90b      	cbnz	r3, 800cd90 <__swsetup_r+0x14>
 800cd8c:	f7ff fece 	bl	800cb2c <__sinit>
 800cd90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd94:	0719      	lsls	r1, r3, #28
 800cd96:	d422      	bmi.n	800cdde <__swsetup_r+0x62>
 800cd98:	06da      	lsls	r2, r3, #27
 800cd9a:	d407      	bmi.n	800cdac <__swsetup_r+0x30>
 800cd9c:	2209      	movs	r2, #9
 800cd9e:	602a      	str	r2, [r5, #0]
 800cda0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cda4:	f04f 30ff 	mov.w	r0, #4294967295
 800cda8:	81a3      	strh	r3, [r4, #12]
 800cdaa:	e033      	b.n	800ce14 <__swsetup_r+0x98>
 800cdac:	0758      	lsls	r0, r3, #29
 800cdae:	d512      	bpl.n	800cdd6 <__swsetup_r+0x5a>
 800cdb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cdb2:	b141      	cbz	r1, 800cdc6 <__swsetup_r+0x4a>
 800cdb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cdb8:	4299      	cmp	r1, r3
 800cdba:	d002      	beq.n	800cdc2 <__swsetup_r+0x46>
 800cdbc:	4628      	mov	r0, r5
 800cdbe:	f000 f8af 	bl	800cf20 <_free_r>
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	6363      	str	r3, [r4, #52]	@ 0x34
 800cdc6:	89a3      	ldrh	r3, [r4, #12]
 800cdc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cdcc:	81a3      	strh	r3, [r4, #12]
 800cdce:	2300      	movs	r3, #0
 800cdd0:	6063      	str	r3, [r4, #4]
 800cdd2:	6923      	ldr	r3, [r4, #16]
 800cdd4:	6023      	str	r3, [r4, #0]
 800cdd6:	89a3      	ldrh	r3, [r4, #12]
 800cdd8:	f043 0308 	orr.w	r3, r3, #8
 800cddc:	81a3      	strh	r3, [r4, #12]
 800cdde:	6923      	ldr	r3, [r4, #16]
 800cde0:	b94b      	cbnz	r3, 800cdf6 <__swsetup_r+0x7a>
 800cde2:	89a3      	ldrh	r3, [r4, #12]
 800cde4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cde8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cdec:	d003      	beq.n	800cdf6 <__swsetup_r+0x7a>
 800cdee:	4621      	mov	r1, r4
 800cdf0:	4628      	mov	r0, r5
 800cdf2:	f000 fd32 	bl	800d85a <__smakebuf_r>
 800cdf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdfa:	f013 0201 	ands.w	r2, r3, #1
 800cdfe:	d00a      	beq.n	800ce16 <__swsetup_r+0x9a>
 800ce00:	2200      	movs	r2, #0
 800ce02:	60a2      	str	r2, [r4, #8]
 800ce04:	6962      	ldr	r2, [r4, #20]
 800ce06:	4252      	negs	r2, r2
 800ce08:	61a2      	str	r2, [r4, #24]
 800ce0a:	6922      	ldr	r2, [r4, #16]
 800ce0c:	b942      	cbnz	r2, 800ce20 <__swsetup_r+0xa4>
 800ce0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ce12:	d1c5      	bne.n	800cda0 <__swsetup_r+0x24>
 800ce14:	bd38      	pop	{r3, r4, r5, pc}
 800ce16:	0799      	lsls	r1, r3, #30
 800ce18:	bf58      	it	pl
 800ce1a:	6962      	ldrpl	r2, [r4, #20]
 800ce1c:	60a2      	str	r2, [r4, #8]
 800ce1e:	e7f4      	b.n	800ce0a <__swsetup_r+0x8e>
 800ce20:	2000      	movs	r0, #0
 800ce22:	e7f7      	b.n	800ce14 <__swsetup_r+0x98>
 800ce24:	2000009c 	.word	0x2000009c

0800ce28 <memset>:
 800ce28:	4402      	add	r2, r0
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d100      	bne.n	800ce32 <memset+0xa>
 800ce30:	4770      	bx	lr
 800ce32:	f803 1b01 	strb.w	r1, [r3], #1
 800ce36:	e7f9      	b.n	800ce2c <memset+0x4>

0800ce38 <_close_r>:
 800ce38:	b538      	push	{r3, r4, r5, lr}
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	4d05      	ldr	r5, [pc, #20]	@ (800ce54 <_close_r+0x1c>)
 800ce3e:	4604      	mov	r4, r0
 800ce40:	4608      	mov	r0, r1
 800ce42:	602b      	str	r3, [r5, #0]
 800ce44:	f7f5 f973 	bl	800212e <_close>
 800ce48:	1c43      	adds	r3, r0, #1
 800ce4a:	d102      	bne.n	800ce52 <_close_r+0x1a>
 800ce4c:	682b      	ldr	r3, [r5, #0]
 800ce4e:	b103      	cbz	r3, 800ce52 <_close_r+0x1a>
 800ce50:	6023      	str	r3, [r4, #0]
 800ce52:	bd38      	pop	{r3, r4, r5, pc}
 800ce54:	200006e0 	.word	0x200006e0

0800ce58 <_lseek_r>:
 800ce58:	b538      	push	{r3, r4, r5, lr}
 800ce5a:	4604      	mov	r4, r0
 800ce5c:	4d06      	ldr	r5, [pc, #24]	@ (800ce78 <_lseek_r+0x20>)
 800ce5e:	4608      	mov	r0, r1
 800ce60:	4611      	mov	r1, r2
 800ce62:	2200      	movs	r2, #0
 800ce64:	602a      	str	r2, [r5, #0]
 800ce66:	461a      	mov	r2, r3
 800ce68:	f7f5 f988 	bl	800217c <_lseek>
 800ce6c:	1c43      	adds	r3, r0, #1
 800ce6e:	d102      	bne.n	800ce76 <_lseek_r+0x1e>
 800ce70:	682b      	ldr	r3, [r5, #0]
 800ce72:	b103      	cbz	r3, 800ce76 <_lseek_r+0x1e>
 800ce74:	6023      	str	r3, [r4, #0]
 800ce76:	bd38      	pop	{r3, r4, r5, pc}
 800ce78:	200006e0 	.word	0x200006e0

0800ce7c <_read_r>:
 800ce7c:	b538      	push	{r3, r4, r5, lr}
 800ce7e:	4604      	mov	r4, r0
 800ce80:	4d06      	ldr	r5, [pc, #24]	@ (800ce9c <_read_r+0x20>)
 800ce82:	4608      	mov	r0, r1
 800ce84:	4611      	mov	r1, r2
 800ce86:	2200      	movs	r2, #0
 800ce88:	602a      	str	r2, [r5, #0]
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	f7f5 f916 	bl	80020bc <_read>
 800ce90:	1c43      	adds	r3, r0, #1
 800ce92:	d102      	bne.n	800ce9a <_read_r+0x1e>
 800ce94:	682b      	ldr	r3, [r5, #0]
 800ce96:	b103      	cbz	r3, 800ce9a <_read_r+0x1e>
 800ce98:	6023      	str	r3, [r4, #0]
 800ce9a:	bd38      	pop	{r3, r4, r5, pc}
 800ce9c:	200006e0 	.word	0x200006e0

0800cea0 <_write_r>:
 800cea0:	b538      	push	{r3, r4, r5, lr}
 800cea2:	4604      	mov	r4, r0
 800cea4:	4d06      	ldr	r5, [pc, #24]	@ (800cec0 <_write_r+0x20>)
 800cea6:	4608      	mov	r0, r1
 800cea8:	4611      	mov	r1, r2
 800ceaa:	2200      	movs	r2, #0
 800ceac:	602a      	str	r2, [r5, #0]
 800ceae:	461a      	mov	r2, r3
 800ceb0:	f7f5 f921 	bl	80020f6 <_write>
 800ceb4:	1c43      	adds	r3, r0, #1
 800ceb6:	d102      	bne.n	800cebe <_write_r+0x1e>
 800ceb8:	682b      	ldr	r3, [r5, #0]
 800ceba:	b103      	cbz	r3, 800cebe <_write_r+0x1e>
 800cebc:	6023      	str	r3, [r4, #0]
 800cebe:	bd38      	pop	{r3, r4, r5, pc}
 800cec0:	200006e0 	.word	0x200006e0

0800cec4 <__errno>:
 800cec4:	4b01      	ldr	r3, [pc, #4]	@ (800cecc <__errno+0x8>)
 800cec6:	6818      	ldr	r0, [r3, #0]
 800cec8:	4770      	bx	lr
 800ceca:	bf00      	nop
 800cecc:	2000009c 	.word	0x2000009c

0800ced0 <__libc_init_array>:
 800ced0:	b570      	push	{r4, r5, r6, lr}
 800ced2:	4d0d      	ldr	r5, [pc, #52]	@ (800cf08 <__libc_init_array+0x38>)
 800ced4:	2600      	movs	r6, #0
 800ced6:	4c0d      	ldr	r4, [pc, #52]	@ (800cf0c <__libc_init_array+0x3c>)
 800ced8:	1b64      	subs	r4, r4, r5
 800ceda:	10a4      	asrs	r4, r4, #2
 800cedc:	42a6      	cmp	r6, r4
 800cede:	d109      	bne.n	800cef4 <__libc_init_array+0x24>
 800cee0:	4d0b      	ldr	r5, [pc, #44]	@ (800cf10 <__libc_init_array+0x40>)
 800cee2:	2600      	movs	r6, #0
 800cee4:	4c0b      	ldr	r4, [pc, #44]	@ (800cf14 <__libc_init_array+0x44>)
 800cee6:	f000 fd35 	bl	800d954 <_init>
 800ceea:	1b64      	subs	r4, r4, r5
 800ceec:	10a4      	asrs	r4, r4, #2
 800ceee:	42a6      	cmp	r6, r4
 800cef0:	d105      	bne.n	800cefe <__libc_init_array+0x2e>
 800cef2:	bd70      	pop	{r4, r5, r6, pc}
 800cef4:	f855 3b04 	ldr.w	r3, [r5], #4
 800cef8:	3601      	adds	r6, #1
 800cefa:	4798      	blx	r3
 800cefc:	e7ee      	b.n	800cedc <__libc_init_array+0xc>
 800cefe:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf02:	3601      	adds	r6, #1
 800cf04:	4798      	blx	r3
 800cf06:	e7f2      	b.n	800ceee <__libc_init_array+0x1e>
 800cf08:	0800db2c 	.word	0x0800db2c
 800cf0c:	0800db2c 	.word	0x0800db2c
 800cf10:	0800db2c 	.word	0x0800db2c
 800cf14:	0800db30 	.word	0x0800db30

0800cf18 <__retarget_lock_init_recursive>:
 800cf18:	4770      	bx	lr

0800cf1a <__retarget_lock_acquire_recursive>:
 800cf1a:	4770      	bx	lr

0800cf1c <__retarget_lock_release_recursive>:
 800cf1c:	4770      	bx	lr
	...

0800cf20 <_free_r>:
 800cf20:	b538      	push	{r3, r4, r5, lr}
 800cf22:	4605      	mov	r5, r0
 800cf24:	2900      	cmp	r1, #0
 800cf26:	d041      	beq.n	800cfac <_free_r+0x8c>
 800cf28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf2c:	1f0c      	subs	r4, r1, #4
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	bfb8      	it	lt
 800cf32:	18e4      	addlt	r4, r4, r3
 800cf34:	f000 f8e0 	bl	800d0f8 <__malloc_lock>
 800cf38:	4a1d      	ldr	r2, [pc, #116]	@ (800cfb0 <_free_r+0x90>)
 800cf3a:	6813      	ldr	r3, [r2, #0]
 800cf3c:	b933      	cbnz	r3, 800cf4c <_free_r+0x2c>
 800cf3e:	6063      	str	r3, [r4, #4]
 800cf40:	6014      	str	r4, [r2, #0]
 800cf42:	4628      	mov	r0, r5
 800cf44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf48:	f000 b8dc 	b.w	800d104 <__malloc_unlock>
 800cf4c:	42a3      	cmp	r3, r4
 800cf4e:	d908      	bls.n	800cf62 <_free_r+0x42>
 800cf50:	6820      	ldr	r0, [r4, #0]
 800cf52:	1821      	adds	r1, r4, r0
 800cf54:	428b      	cmp	r3, r1
 800cf56:	bf01      	itttt	eq
 800cf58:	6819      	ldreq	r1, [r3, #0]
 800cf5a:	685b      	ldreq	r3, [r3, #4]
 800cf5c:	1809      	addeq	r1, r1, r0
 800cf5e:	6021      	streq	r1, [r4, #0]
 800cf60:	e7ed      	b.n	800cf3e <_free_r+0x1e>
 800cf62:	461a      	mov	r2, r3
 800cf64:	685b      	ldr	r3, [r3, #4]
 800cf66:	b10b      	cbz	r3, 800cf6c <_free_r+0x4c>
 800cf68:	42a3      	cmp	r3, r4
 800cf6a:	d9fa      	bls.n	800cf62 <_free_r+0x42>
 800cf6c:	6811      	ldr	r1, [r2, #0]
 800cf6e:	1850      	adds	r0, r2, r1
 800cf70:	42a0      	cmp	r0, r4
 800cf72:	d10b      	bne.n	800cf8c <_free_r+0x6c>
 800cf74:	6820      	ldr	r0, [r4, #0]
 800cf76:	4401      	add	r1, r0
 800cf78:	1850      	adds	r0, r2, r1
 800cf7a:	6011      	str	r1, [r2, #0]
 800cf7c:	4283      	cmp	r3, r0
 800cf7e:	d1e0      	bne.n	800cf42 <_free_r+0x22>
 800cf80:	6818      	ldr	r0, [r3, #0]
 800cf82:	685b      	ldr	r3, [r3, #4]
 800cf84:	4408      	add	r0, r1
 800cf86:	6053      	str	r3, [r2, #4]
 800cf88:	6010      	str	r0, [r2, #0]
 800cf8a:	e7da      	b.n	800cf42 <_free_r+0x22>
 800cf8c:	d902      	bls.n	800cf94 <_free_r+0x74>
 800cf8e:	230c      	movs	r3, #12
 800cf90:	602b      	str	r3, [r5, #0]
 800cf92:	e7d6      	b.n	800cf42 <_free_r+0x22>
 800cf94:	6820      	ldr	r0, [r4, #0]
 800cf96:	1821      	adds	r1, r4, r0
 800cf98:	428b      	cmp	r3, r1
 800cf9a:	bf02      	ittt	eq
 800cf9c:	6819      	ldreq	r1, [r3, #0]
 800cf9e:	685b      	ldreq	r3, [r3, #4]
 800cfa0:	1809      	addeq	r1, r1, r0
 800cfa2:	6063      	str	r3, [r4, #4]
 800cfa4:	bf08      	it	eq
 800cfa6:	6021      	streq	r1, [r4, #0]
 800cfa8:	6054      	str	r4, [r2, #4]
 800cfaa:	e7ca      	b.n	800cf42 <_free_r+0x22>
 800cfac:	bd38      	pop	{r3, r4, r5, pc}
 800cfae:	bf00      	nop
 800cfb0:	200006ec 	.word	0x200006ec

0800cfb4 <sbrk_aligned>:
 800cfb4:	b570      	push	{r4, r5, r6, lr}
 800cfb6:	4e0f      	ldr	r6, [pc, #60]	@ (800cff4 <sbrk_aligned+0x40>)
 800cfb8:	460c      	mov	r4, r1
 800cfba:	4605      	mov	r5, r0
 800cfbc:	6831      	ldr	r1, [r6, #0]
 800cfbe:	b911      	cbnz	r1, 800cfc6 <sbrk_aligned+0x12>
 800cfc0:	f000 fcaa 	bl	800d918 <_sbrk_r>
 800cfc4:	6030      	str	r0, [r6, #0]
 800cfc6:	4621      	mov	r1, r4
 800cfc8:	4628      	mov	r0, r5
 800cfca:	f000 fca5 	bl	800d918 <_sbrk_r>
 800cfce:	1c43      	adds	r3, r0, #1
 800cfd0:	d103      	bne.n	800cfda <sbrk_aligned+0x26>
 800cfd2:	f04f 34ff 	mov.w	r4, #4294967295
 800cfd6:	4620      	mov	r0, r4
 800cfd8:	bd70      	pop	{r4, r5, r6, pc}
 800cfda:	1cc4      	adds	r4, r0, #3
 800cfdc:	f024 0403 	bic.w	r4, r4, #3
 800cfe0:	42a0      	cmp	r0, r4
 800cfe2:	d0f8      	beq.n	800cfd6 <sbrk_aligned+0x22>
 800cfe4:	1a21      	subs	r1, r4, r0
 800cfe6:	4628      	mov	r0, r5
 800cfe8:	f000 fc96 	bl	800d918 <_sbrk_r>
 800cfec:	3001      	adds	r0, #1
 800cfee:	d1f2      	bne.n	800cfd6 <sbrk_aligned+0x22>
 800cff0:	e7ef      	b.n	800cfd2 <sbrk_aligned+0x1e>
 800cff2:	bf00      	nop
 800cff4:	200006e8 	.word	0x200006e8

0800cff8 <_malloc_r>:
 800cff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cffc:	1ccd      	adds	r5, r1, #3
 800cffe:	4606      	mov	r6, r0
 800d000:	f025 0503 	bic.w	r5, r5, #3
 800d004:	3508      	adds	r5, #8
 800d006:	2d0c      	cmp	r5, #12
 800d008:	bf38      	it	cc
 800d00a:	250c      	movcc	r5, #12
 800d00c:	2d00      	cmp	r5, #0
 800d00e:	db01      	blt.n	800d014 <_malloc_r+0x1c>
 800d010:	42a9      	cmp	r1, r5
 800d012:	d904      	bls.n	800d01e <_malloc_r+0x26>
 800d014:	230c      	movs	r3, #12
 800d016:	6033      	str	r3, [r6, #0]
 800d018:	2000      	movs	r0, #0
 800d01a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d01e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d0f4 <_malloc_r+0xfc>
 800d022:	f000 f869 	bl	800d0f8 <__malloc_lock>
 800d026:	f8d8 3000 	ldr.w	r3, [r8]
 800d02a:	461c      	mov	r4, r3
 800d02c:	bb44      	cbnz	r4, 800d080 <_malloc_r+0x88>
 800d02e:	4629      	mov	r1, r5
 800d030:	4630      	mov	r0, r6
 800d032:	f7ff ffbf 	bl	800cfb4 <sbrk_aligned>
 800d036:	1c43      	adds	r3, r0, #1
 800d038:	4604      	mov	r4, r0
 800d03a:	d158      	bne.n	800d0ee <_malloc_r+0xf6>
 800d03c:	f8d8 4000 	ldr.w	r4, [r8]
 800d040:	4627      	mov	r7, r4
 800d042:	2f00      	cmp	r7, #0
 800d044:	d143      	bne.n	800d0ce <_malloc_r+0xd6>
 800d046:	2c00      	cmp	r4, #0
 800d048:	d04b      	beq.n	800d0e2 <_malloc_r+0xea>
 800d04a:	6823      	ldr	r3, [r4, #0]
 800d04c:	4639      	mov	r1, r7
 800d04e:	4630      	mov	r0, r6
 800d050:	eb04 0903 	add.w	r9, r4, r3
 800d054:	f000 fc60 	bl	800d918 <_sbrk_r>
 800d058:	4581      	cmp	r9, r0
 800d05a:	d142      	bne.n	800d0e2 <_malloc_r+0xea>
 800d05c:	6821      	ldr	r1, [r4, #0]
 800d05e:	4630      	mov	r0, r6
 800d060:	1a6d      	subs	r5, r5, r1
 800d062:	4629      	mov	r1, r5
 800d064:	f7ff ffa6 	bl	800cfb4 <sbrk_aligned>
 800d068:	3001      	adds	r0, #1
 800d06a:	d03a      	beq.n	800d0e2 <_malloc_r+0xea>
 800d06c:	6823      	ldr	r3, [r4, #0]
 800d06e:	442b      	add	r3, r5
 800d070:	6023      	str	r3, [r4, #0]
 800d072:	f8d8 3000 	ldr.w	r3, [r8]
 800d076:	685a      	ldr	r2, [r3, #4]
 800d078:	bb62      	cbnz	r2, 800d0d4 <_malloc_r+0xdc>
 800d07a:	f8c8 7000 	str.w	r7, [r8]
 800d07e:	e00f      	b.n	800d0a0 <_malloc_r+0xa8>
 800d080:	6822      	ldr	r2, [r4, #0]
 800d082:	1b52      	subs	r2, r2, r5
 800d084:	d420      	bmi.n	800d0c8 <_malloc_r+0xd0>
 800d086:	2a0b      	cmp	r2, #11
 800d088:	d917      	bls.n	800d0ba <_malloc_r+0xc2>
 800d08a:	1961      	adds	r1, r4, r5
 800d08c:	42a3      	cmp	r3, r4
 800d08e:	6025      	str	r5, [r4, #0]
 800d090:	bf18      	it	ne
 800d092:	6059      	strne	r1, [r3, #4]
 800d094:	6863      	ldr	r3, [r4, #4]
 800d096:	bf08      	it	eq
 800d098:	f8c8 1000 	streq.w	r1, [r8]
 800d09c:	5162      	str	r2, [r4, r5]
 800d09e:	604b      	str	r3, [r1, #4]
 800d0a0:	4630      	mov	r0, r6
 800d0a2:	f000 f82f 	bl	800d104 <__malloc_unlock>
 800d0a6:	f104 000b 	add.w	r0, r4, #11
 800d0aa:	1d23      	adds	r3, r4, #4
 800d0ac:	f020 0007 	bic.w	r0, r0, #7
 800d0b0:	1ac2      	subs	r2, r0, r3
 800d0b2:	bf1c      	itt	ne
 800d0b4:	1a1b      	subne	r3, r3, r0
 800d0b6:	50a3      	strne	r3, [r4, r2]
 800d0b8:	e7af      	b.n	800d01a <_malloc_r+0x22>
 800d0ba:	6862      	ldr	r2, [r4, #4]
 800d0bc:	42a3      	cmp	r3, r4
 800d0be:	bf0c      	ite	eq
 800d0c0:	f8c8 2000 	streq.w	r2, [r8]
 800d0c4:	605a      	strne	r2, [r3, #4]
 800d0c6:	e7eb      	b.n	800d0a0 <_malloc_r+0xa8>
 800d0c8:	4623      	mov	r3, r4
 800d0ca:	6864      	ldr	r4, [r4, #4]
 800d0cc:	e7ae      	b.n	800d02c <_malloc_r+0x34>
 800d0ce:	463c      	mov	r4, r7
 800d0d0:	687f      	ldr	r7, [r7, #4]
 800d0d2:	e7b6      	b.n	800d042 <_malloc_r+0x4a>
 800d0d4:	461a      	mov	r2, r3
 800d0d6:	685b      	ldr	r3, [r3, #4]
 800d0d8:	42a3      	cmp	r3, r4
 800d0da:	d1fb      	bne.n	800d0d4 <_malloc_r+0xdc>
 800d0dc:	2300      	movs	r3, #0
 800d0de:	6053      	str	r3, [r2, #4]
 800d0e0:	e7de      	b.n	800d0a0 <_malloc_r+0xa8>
 800d0e2:	230c      	movs	r3, #12
 800d0e4:	4630      	mov	r0, r6
 800d0e6:	6033      	str	r3, [r6, #0]
 800d0e8:	f000 f80c 	bl	800d104 <__malloc_unlock>
 800d0ec:	e794      	b.n	800d018 <_malloc_r+0x20>
 800d0ee:	6005      	str	r5, [r0, #0]
 800d0f0:	e7d6      	b.n	800d0a0 <_malloc_r+0xa8>
 800d0f2:	bf00      	nop
 800d0f4:	200006ec 	.word	0x200006ec

0800d0f8 <__malloc_lock>:
 800d0f8:	4801      	ldr	r0, [pc, #4]	@ (800d100 <__malloc_lock+0x8>)
 800d0fa:	f7ff bf0e 	b.w	800cf1a <__retarget_lock_acquire_recursive>
 800d0fe:	bf00      	nop
 800d100:	200006e4 	.word	0x200006e4

0800d104 <__malloc_unlock>:
 800d104:	4801      	ldr	r0, [pc, #4]	@ (800d10c <__malloc_unlock+0x8>)
 800d106:	f7ff bf09 	b.w	800cf1c <__retarget_lock_release_recursive>
 800d10a:	bf00      	nop
 800d10c:	200006e4 	.word	0x200006e4

0800d110 <__sfputc_r>:
 800d110:	6893      	ldr	r3, [r2, #8]
 800d112:	3b01      	subs	r3, #1
 800d114:	2b00      	cmp	r3, #0
 800d116:	6093      	str	r3, [r2, #8]
 800d118:	b410      	push	{r4}
 800d11a:	da08      	bge.n	800d12e <__sfputc_r+0x1e>
 800d11c:	6994      	ldr	r4, [r2, #24]
 800d11e:	42a3      	cmp	r3, r4
 800d120:	db01      	blt.n	800d126 <__sfputc_r+0x16>
 800d122:	290a      	cmp	r1, #10
 800d124:	d103      	bne.n	800d12e <__sfputc_r+0x1e>
 800d126:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d12a:	f7ff bde8 	b.w	800ccfe <__swbuf_r>
 800d12e:	6813      	ldr	r3, [r2, #0]
 800d130:	1c58      	adds	r0, r3, #1
 800d132:	6010      	str	r0, [r2, #0]
 800d134:	4608      	mov	r0, r1
 800d136:	7019      	strb	r1, [r3, #0]
 800d138:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d13c:	4770      	bx	lr

0800d13e <__sfputs_r>:
 800d13e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d140:	4606      	mov	r6, r0
 800d142:	460f      	mov	r7, r1
 800d144:	4614      	mov	r4, r2
 800d146:	18d5      	adds	r5, r2, r3
 800d148:	42ac      	cmp	r4, r5
 800d14a:	d101      	bne.n	800d150 <__sfputs_r+0x12>
 800d14c:	2000      	movs	r0, #0
 800d14e:	e007      	b.n	800d160 <__sfputs_r+0x22>
 800d150:	463a      	mov	r2, r7
 800d152:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d156:	4630      	mov	r0, r6
 800d158:	f7ff ffda 	bl	800d110 <__sfputc_r>
 800d15c:	1c43      	adds	r3, r0, #1
 800d15e:	d1f3      	bne.n	800d148 <__sfputs_r+0xa>
 800d160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d164 <_vfiprintf_r>:
 800d164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d168:	460d      	mov	r5, r1
 800d16a:	b09d      	sub	sp, #116	@ 0x74
 800d16c:	4614      	mov	r4, r2
 800d16e:	4698      	mov	r8, r3
 800d170:	4606      	mov	r6, r0
 800d172:	b118      	cbz	r0, 800d17c <_vfiprintf_r+0x18>
 800d174:	6a03      	ldr	r3, [r0, #32]
 800d176:	b90b      	cbnz	r3, 800d17c <_vfiprintf_r+0x18>
 800d178:	f7ff fcd8 	bl	800cb2c <__sinit>
 800d17c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d17e:	07d9      	lsls	r1, r3, #31
 800d180:	d405      	bmi.n	800d18e <_vfiprintf_r+0x2a>
 800d182:	89ab      	ldrh	r3, [r5, #12]
 800d184:	059a      	lsls	r2, r3, #22
 800d186:	d402      	bmi.n	800d18e <_vfiprintf_r+0x2a>
 800d188:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d18a:	f7ff fec6 	bl	800cf1a <__retarget_lock_acquire_recursive>
 800d18e:	89ab      	ldrh	r3, [r5, #12]
 800d190:	071b      	lsls	r3, r3, #28
 800d192:	d501      	bpl.n	800d198 <_vfiprintf_r+0x34>
 800d194:	692b      	ldr	r3, [r5, #16]
 800d196:	b99b      	cbnz	r3, 800d1c0 <_vfiprintf_r+0x5c>
 800d198:	4629      	mov	r1, r5
 800d19a:	4630      	mov	r0, r6
 800d19c:	f7ff fdee 	bl	800cd7c <__swsetup_r>
 800d1a0:	b170      	cbz	r0, 800d1c0 <_vfiprintf_r+0x5c>
 800d1a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d1a4:	07dc      	lsls	r4, r3, #31
 800d1a6:	d504      	bpl.n	800d1b2 <_vfiprintf_r+0x4e>
 800d1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d1ac:	b01d      	add	sp, #116	@ 0x74
 800d1ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1b2:	89ab      	ldrh	r3, [r5, #12]
 800d1b4:	0598      	lsls	r0, r3, #22
 800d1b6:	d4f7      	bmi.n	800d1a8 <_vfiprintf_r+0x44>
 800d1b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d1ba:	f7ff feaf 	bl	800cf1c <__retarget_lock_release_recursive>
 800d1be:	e7f3      	b.n	800d1a8 <_vfiprintf_r+0x44>
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1c6:	f04f 0901 	mov.w	r9, #1
 800d1ca:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800d380 <_vfiprintf_r+0x21c>
 800d1ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1d0:	2320      	movs	r3, #32
 800d1d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d1d6:	2330      	movs	r3, #48	@ 0x30
 800d1d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d1dc:	4623      	mov	r3, r4
 800d1de:	469a      	mov	sl, r3
 800d1e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1e4:	b10a      	cbz	r2, 800d1ea <_vfiprintf_r+0x86>
 800d1e6:	2a25      	cmp	r2, #37	@ 0x25
 800d1e8:	d1f9      	bne.n	800d1de <_vfiprintf_r+0x7a>
 800d1ea:	ebba 0b04 	subs.w	fp, sl, r4
 800d1ee:	d00b      	beq.n	800d208 <_vfiprintf_r+0xa4>
 800d1f0:	465b      	mov	r3, fp
 800d1f2:	4622      	mov	r2, r4
 800d1f4:	4629      	mov	r1, r5
 800d1f6:	4630      	mov	r0, r6
 800d1f8:	f7ff ffa1 	bl	800d13e <__sfputs_r>
 800d1fc:	3001      	adds	r0, #1
 800d1fe:	f000 80a7 	beq.w	800d350 <_vfiprintf_r+0x1ec>
 800d202:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d204:	445a      	add	r2, fp
 800d206:	9209      	str	r2, [sp, #36]	@ 0x24
 800d208:	f89a 3000 	ldrb.w	r3, [sl]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	f000 809f 	beq.w	800d350 <_vfiprintf_r+0x1ec>
 800d212:	2300      	movs	r3, #0
 800d214:	f04f 32ff 	mov.w	r2, #4294967295
 800d218:	f10a 0a01 	add.w	sl, sl, #1
 800d21c:	9304      	str	r3, [sp, #16]
 800d21e:	9307      	str	r3, [sp, #28]
 800d220:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d224:	931a      	str	r3, [sp, #104]	@ 0x68
 800d226:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d22a:	4654      	mov	r4, sl
 800d22c:	2205      	movs	r2, #5
 800d22e:	4854      	ldr	r0, [pc, #336]	@ (800d380 <_vfiprintf_r+0x21c>)
 800d230:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d234:	f000 fb80 	bl	800d938 <memchr>
 800d238:	9a04      	ldr	r2, [sp, #16]
 800d23a:	b9d8      	cbnz	r0, 800d274 <_vfiprintf_r+0x110>
 800d23c:	06d1      	lsls	r1, r2, #27
 800d23e:	bf44      	itt	mi
 800d240:	2320      	movmi	r3, #32
 800d242:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d246:	0713      	lsls	r3, r2, #28
 800d248:	bf44      	itt	mi
 800d24a:	232b      	movmi	r3, #43	@ 0x2b
 800d24c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d250:	f89a 3000 	ldrb.w	r3, [sl]
 800d254:	2b2a      	cmp	r3, #42	@ 0x2a
 800d256:	d015      	beq.n	800d284 <_vfiprintf_r+0x120>
 800d258:	9a07      	ldr	r2, [sp, #28]
 800d25a:	4654      	mov	r4, sl
 800d25c:	2000      	movs	r0, #0
 800d25e:	f04f 0c0a 	mov.w	ip, #10
 800d262:	4621      	mov	r1, r4
 800d264:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d268:	3b30      	subs	r3, #48	@ 0x30
 800d26a:	2b09      	cmp	r3, #9
 800d26c:	d94b      	bls.n	800d306 <_vfiprintf_r+0x1a2>
 800d26e:	b1b0      	cbz	r0, 800d29e <_vfiprintf_r+0x13a>
 800d270:	9207      	str	r2, [sp, #28]
 800d272:	e014      	b.n	800d29e <_vfiprintf_r+0x13a>
 800d274:	eba0 0308 	sub.w	r3, r0, r8
 800d278:	46a2      	mov	sl, r4
 800d27a:	fa09 f303 	lsl.w	r3, r9, r3
 800d27e:	4313      	orrs	r3, r2
 800d280:	9304      	str	r3, [sp, #16]
 800d282:	e7d2      	b.n	800d22a <_vfiprintf_r+0xc6>
 800d284:	9b03      	ldr	r3, [sp, #12]
 800d286:	1d19      	adds	r1, r3, #4
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	9103      	str	r1, [sp, #12]
 800d28e:	bfbb      	ittet	lt
 800d290:	425b      	neglt	r3, r3
 800d292:	f042 0202 	orrlt.w	r2, r2, #2
 800d296:	9307      	strge	r3, [sp, #28]
 800d298:	9307      	strlt	r3, [sp, #28]
 800d29a:	bfb8      	it	lt
 800d29c:	9204      	strlt	r2, [sp, #16]
 800d29e:	7823      	ldrb	r3, [r4, #0]
 800d2a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800d2a2:	d10a      	bne.n	800d2ba <_vfiprintf_r+0x156>
 800d2a4:	7863      	ldrb	r3, [r4, #1]
 800d2a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2a8:	d132      	bne.n	800d310 <_vfiprintf_r+0x1ac>
 800d2aa:	9b03      	ldr	r3, [sp, #12]
 800d2ac:	3402      	adds	r4, #2
 800d2ae:	1d1a      	adds	r2, r3, #4
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d2b6:	9203      	str	r2, [sp, #12]
 800d2b8:	9305      	str	r3, [sp, #20]
 800d2ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d390 <_vfiprintf_r+0x22c>
 800d2be:	2203      	movs	r2, #3
 800d2c0:	7821      	ldrb	r1, [r4, #0]
 800d2c2:	4650      	mov	r0, sl
 800d2c4:	f000 fb38 	bl	800d938 <memchr>
 800d2c8:	b138      	cbz	r0, 800d2da <_vfiprintf_r+0x176>
 800d2ca:	eba0 000a 	sub.w	r0, r0, sl
 800d2ce:	2240      	movs	r2, #64	@ 0x40
 800d2d0:	9b04      	ldr	r3, [sp, #16]
 800d2d2:	3401      	adds	r4, #1
 800d2d4:	4082      	lsls	r2, r0
 800d2d6:	4313      	orrs	r3, r2
 800d2d8:	9304      	str	r3, [sp, #16]
 800d2da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2de:	2206      	movs	r2, #6
 800d2e0:	4828      	ldr	r0, [pc, #160]	@ (800d384 <_vfiprintf_r+0x220>)
 800d2e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d2e6:	f000 fb27 	bl	800d938 <memchr>
 800d2ea:	2800      	cmp	r0, #0
 800d2ec:	d03f      	beq.n	800d36e <_vfiprintf_r+0x20a>
 800d2ee:	4b26      	ldr	r3, [pc, #152]	@ (800d388 <_vfiprintf_r+0x224>)
 800d2f0:	bb1b      	cbnz	r3, 800d33a <_vfiprintf_r+0x1d6>
 800d2f2:	9b03      	ldr	r3, [sp, #12]
 800d2f4:	3307      	adds	r3, #7
 800d2f6:	f023 0307 	bic.w	r3, r3, #7
 800d2fa:	3308      	adds	r3, #8
 800d2fc:	9303      	str	r3, [sp, #12]
 800d2fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d300:	443b      	add	r3, r7
 800d302:	9309      	str	r3, [sp, #36]	@ 0x24
 800d304:	e76a      	b.n	800d1dc <_vfiprintf_r+0x78>
 800d306:	fb0c 3202 	mla	r2, ip, r2, r3
 800d30a:	460c      	mov	r4, r1
 800d30c:	2001      	movs	r0, #1
 800d30e:	e7a8      	b.n	800d262 <_vfiprintf_r+0xfe>
 800d310:	2300      	movs	r3, #0
 800d312:	3401      	adds	r4, #1
 800d314:	f04f 0c0a 	mov.w	ip, #10
 800d318:	4619      	mov	r1, r3
 800d31a:	9305      	str	r3, [sp, #20]
 800d31c:	4620      	mov	r0, r4
 800d31e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d322:	3a30      	subs	r2, #48	@ 0x30
 800d324:	2a09      	cmp	r2, #9
 800d326:	d903      	bls.n	800d330 <_vfiprintf_r+0x1cc>
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d0c6      	beq.n	800d2ba <_vfiprintf_r+0x156>
 800d32c:	9105      	str	r1, [sp, #20]
 800d32e:	e7c4      	b.n	800d2ba <_vfiprintf_r+0x156>
 800d330:	fb0c 2101 	mla	r1, ip, r1, r2
 800d334:	4604      	mov	r4, r0
 800d336:	2301      	movs	r3, #1
 800d338:	e7f0      	b.n	800d31c <_vfiprintf_r+0x1b8>
 800d33a:	ab03      	add	r3, sp, #12
 800d33c:	462a      	mov	r2, r5
 800d33e:	a904      	add	r1, sp, #16
 800d340:	4630      	mov	r0, r6
 800d342:	9300      	str	r3, [sp, #0]
 800d344:	4b11      	ldr	r3, [pc, #68]	@ (800d38c <_vfiprintf_r+0x228>)
 800d346:	f3af 8000 	nop.w
 800d34a:	4607      	mov	r7, r0
 800d34c:	1c78      	adds	r0, r7, #1
 800d34e:	d1d6      	bne.n	800d2fe <_vfiprintf_r+0x19a>
 800d350:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d352:	07d9      	lsls	r1, r3, #31
 800d354:	d405      	bmi.n	800d362 <_vfiprintf_r+0x1fe>
 800d356:	89ab      	ldrh	r3, [r5, #12]
 800d358:	059a      	lsls	r2, r3, #22
 800d35a:	d402      	bmi.n	800d362 <_vfiprintf_r+0x1fe>
 800d35c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d35e:	f7ff fddd 	bl	800cf1c <__retarget_lock_release_recursive>
 800d362:	89ab      	ldrh	r3, [r5, #12]
 800d364:	065b      	lsls	r3, r3, #25
 800d366:	f53f af1f 	bmi.w	800d1a8 <_vfiprintf_r+0x44>
 800d36a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d36c:	e71e      	b.n	800d1ac <_vfiprintf_r+0x48>
 800d36e:	ab03      	add	r3, sp, #12
 800d370:	462a      	mov	r2, r5
 800d372:	a904      	add	r1, sp, #16
 800d374:	4630      	mov	r0, r6
 800d376:	9300      	str	r3, [sp, #0]
 800d378:	4b04      	ldr	r3, [pc, #16]	@ (800d38c <_vfiprintf_r+0x228>)
 800d37a:	f000 f87d 	bl	800d478 <_printf_i>
 800d37e:	e7e4      	b.n	800d34a <_vfiprintf_r+0x1e6>
 800d380:	0800daf0 	.word	0x0800daf0
 800d384:	0800dafa 	.word	0x0800dafa
 800d388:	00000000 	.word	0x00000000
 800d38c:	0800d13f 	.word	0x0800d13f
 800d390:	0800daf6 	.word	0x0800daf6

0800d394 <_printf_common>:
 800d394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d398:	4616      	mov	r6, r2
 800d39a:	4698      	mov	r8, r3
 800d39c:	688a      	ldr	r2, [r1, #8]
 800d39e:	4607      	mov	r7, r0
 800d3a0:	690b      	ldr	r3, [r1, #16]
 800d3a2:	460c      	mov	r4, r1
 800d3a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d3a8:	4293      	cmp	r3, r2
 800d3aa:	bfb8      	it	lt
 800d3ac:	4613      	movlt	r3, r2
 800d3ae:	6033      	str	r3, [r6, #0]
 800d3b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d3b4:	b10a      	cbz	r2, 800d3ba <_printf_common+0x26>
 800d3b6:	3301      	adds	r3, #1
 800d3b8:	6033      	str	r3, [r6, #0]
 800d3ba:	6823      	ldr	r3, [r4, #0]
 800d3bc:	0699      	lsls	r1, r3, #26
 800d3be:	bf42      	ittt	mi
 800d3c0:	6833      	ldrmi	r3, [r6, #0]
 800d3c2:	3302      	addmi	r3, #2
 800d3c4:	6033      	strmi	r3, [r6, #0]
 800d3c6:	6825      	ldr	r5, [r4, #0]
 800d3c8:	f015 0506 	ands.w	r5, r5, #6
 800d3cc:	d106      	bne.n	800d3dc <_printf_common+0x48>
 800d3ce:	f104 0a19 	add.w	sl, r4, #25
 800d3d2:	68e3      	ldr	r3, [r4, #12]
 800d3d4:	6832      	ldr	r2, [r6, #0]
 800d3d6:	1a9b      	subs	r3, r3, r2
 800d3d8:	42ab      	cmp	r3, r5
 800d3da:	dc2b      	bgt.n	800d434 <_printf_common+0xa0>
 800d3dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d3e0:	6822      	ldr	r2, [r4, #0]
 800d3e2:	3b00      	subs	r3, #0
 800d3e4:	bf18      	it	ne
 800d3e6:	2301      	movne	r3, #1
 800d3e8:	0692      	lsls	r2, r2, #26
 800d3ea:	d430      	bmi.n	800d44e <_printf_common+0xba>
 800d3ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d3f0:	4641      	mov	r1, r8
 800d3f2:	4638      	mov	r0, r7
 800d3f4:	47c8      	blx	r9
 800d3f6:	3001      	adds	r0, #1
 800d3f8:	d023      	beq.n	800d442 <_printf_common+0xae>
 800d3fa:	6823      	ldr	r3, [r4, #0]
 800d3fc:	341a      	adds	r4, #26
 800d3fe:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800d402:	f003 0306 	and.w	r3, r3, #6
 800d406:	2b04      	cmp	r3, #4
 800d408:	bf0a      	itet	eq
 800d40a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800d40e:	2500      	movne	r5, #0
 800d410:	6833      	ldreq	r3, [r6, #0]
 800d412:	f04f 0600 	mov.w	r6, #0
 800d416:	bf08      	it	eq
 800d418:	1aed      	subeq	r5, r5, r3
 800d41a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d41e:	bf08      	it	eq
 800d420:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d424:	4293      	cmp	r3, r2
 800d426:	bfc4      	itt	gt
 800d428:	1a9b      	subgt	r3, r3, r2
 800d42a:	18ed      	addgt	r5, r5, r3
 800d42c:	42b5      	cmp	r5, r6
 800d42e:	d11a      	bne.n	800d466 <_printf_common+0xd2>
 800d430:	2000      	movs	r0, #0
 800d432:	e008      	b.n	800d446 <_printf_common+0xb2>
 800d434:	2301      	movs	r3, #1
 800d436:	4652      	mov	r2, sl
 800d438:	4641      	mov	r1, r8
 800d43a:	4638      	mov	r0, r7
 800d43c:	47c8      	blx	r9
 800d43e:	3001      	adds	r0, #1
 800d440:	d103      	bne.n	800d44a <_printf_common+0xb6>
 800d442:	f04f 30ff 	mov.w	r0, #4294967295
 800d446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d44a:	3501      	adds	r5, #1
 800d44c:	e7c1      	b.n	800d3d2 <_printf_common+0x3e>
 800d44e:	18e1      	adds	r1, r4, r3
 800d450:	1c5a      	adds	r2, r3, #1
 800d452:	2030      	movs	r0, #48	@ 0x30
 800d454:	3302      	adds	r3, #2
 800d456:	4422      	add	r2, r4
 800d458:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d45c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d460:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d464:	e7c2      	b.n	800d3ec <_printf_common+0x58>
 800d466:	2301      	movs	r3, #1
 800d468:	4622      	mov	r2, r4
 800d46a:	4641      	mov	r1, r8
 800d46c:	4638      	mov	r0, r7
 800d46e:	47c8      	blx	r9
 800d470:	3001      	adds	r0, #1
 800d472:	d0e6      	beq.n	800d442 <_printf_common+0xae>
 800d474:	3601      	adds	r6, #1
 800d476:	e7d9      	b.n	800d42c <_printf_common+0x98>

0800d478 <_printf_i>:
 800d478:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d47c:	7e0f      	ldrb	r7, [r1, #24]
 800d47e:	4691      	mov	r9, r2
 800d480:	4680      	mov	r8, r0
 800d482:	460c      	mov	r4, r1
 800d484:	2f78      	cmp	r7, #120	@ 0x78
 800d486:	469a      	mov	sl, r3
 800d488:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d48a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d48e:	d807      	bhi.n	800d4a0 <_printf_i+0x28>
 800d490:	2f62      	cmp	r7, #98	@ 0x62
 800d492:	d80a      	bhi.n	800d4aa <_printf_i+0x32>
 800d494:	2f00      	cmp	r7, #0
 800d496:	f000 80d2 	beq.w	800d63e <_printf_i+0x1c6>
 800d49a:	2f58      	cmp	r7, #88	@ 0x58
 800d49c:	f000 80b9 	beq.w	800d612 <_printf_i+0x19a>
 800d4a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d4a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d4a8:	e03a      	b.n	800d520 <_printf_i+0xa8>
 800d4aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d4ae:	2b15      	cmp	r3, #21
 800d4b0:	d8f6      	bhi.n	800d4a0 <_printf_i+0x28>
 800d4b2:	a101      	add	r1, pc, #4	@ (adr r1, 800d4b8 <_printf_i+0x40>)
 800d4b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d4b8:	0800d511 	.word	0x0800d511
 800d4bc:	0800d525 	.word	0x0800d525
 800d4c0:	0800d4a1 	.word	0x0800d4a1
 800d4c4:	0800d4a1 	.word	0x0800d4a1
 800d4c8:	0800d4a1 	.word	0x0800d4a1
 800d4cc:	0800d4a1 	.word	0x0800d4a1
 800d4d0:	0800d525 	.word	0x0800d525
 800d4d4:	0800d4a1 	.word	0x0800d4a1
 800d4d8:	0800d4a1 	.word	0x0800d4a1
 800d4dc:	0800d4a1 	.word	0x0800d4a1
 800d4e0:	0800d4a1 	.word	0x0800d4a1
 800d4e4:	0800d625 	.word	0x0800d625
 800d4e8:	0800d54f 	.word	0x0800d54f
 800d4ec:	0800d5df 	.word	0x0800d5df
 800d4f0:	0800d4a1 	.word	0x0800d4a1
 800d4f4:	0800d4a1 	.word	0x0800d4a1
 800d4f8:	0800d647 	.word	0x0800d647
 800d4fc:	0800d4a1 	.word	0x0800d4a1
 800d500:	0800d54f 	.word	0x0800d54f
 800d504:	0800d4a1 	.word	0x0800d4a1
 800d508:	0800d4a1 	.word	0x0800d4a1
 800d50c:	0800d5e7 	.word	0x0800d5e7
 800d510:	6833      	ldr	r3, [r6, #0]
 800d512:	1d1a      	adds	r2, r3, #4
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	6032      	str	r2, [r6, #0]
 800d518:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d51c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d520:	2301      	movs	r3, #1
 800d522:	e09d      	b.n	800d660 <_printf_i+0x1e8>
 800d524:	6833      	ldr	r3, [r6, #0]
 800d526:	6820      	ldr	r0, [r4, #0]
 800d528:	1d19      	adds	r1, r3, #4
 800d52a:	6031      	str	r1, [r6, #0]
 800d52c:	0606      	lsls	r6, r0, #24
 800d52e:	d501      	bpl.n	800d534 <_printf_i+0xbc>
 800d530:	681d      	ldr	r5, [r3, #0]
 800d532:	e003      	b.n	800d53c <_printf_i+0xc4>
 800d534:	0645      	lsls	r5, r0, #25
 800d536:	d5fb      	bpl.n	800d530 <_printf_i+0xb8>
 800d538:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d53c:	2d00      	cmp	r5, #0
 800d53e:	da03      	bge.n	800d548 <_printf_i+0xd0>
 800d540:	232d      	movs	r3, #45	@ 0x2d
 800d542:	426d      	negs	r5, r5
 800d544:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d548:	4859      	ldr	r0, [pc, #356]	@ (800d6b0 <_printf_i+0x238>)
 800d54a:	230a      	movs	r3, #10
 800d54c:	e011      	b.n	800d572 <_printf_i+0xfa>
 800d54e:	6821      	ldr	r1, [r4, #0]
 800d550:	6833      	ldr	r3, [r6, #0]
 800d552:	0608      	lsls	r0, r1, #24
 800d554:	f853 5b04 	ldr.w	r5, [r3], #4
 800d558:	d402      	bmi.n	800d560 <_printf_i+0xe8>
 800d55a:	0649      	lsls	r1, r1, #25
 800d55c:	bf48      	it	mi
 800d55e:	b2ad      	uxthmi	r5, r5
 800d560:	2f6f      	cmp	r7, #111	@ 0x6f
 800d562:	6033      	str	r3, [r6, #0]
 800d564:	4852      	ldr	r0, [pc, #328]	@ (800d6b0 <_printf_i+0x238>)
 800d566:	bf14      	ite	ne
 800d568:	230a      	movne	r3, #10
 800d56a:	2308      	moveq	r3, #8
 800d56c:	2100      	movs	r1, #0
 800d56e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d572:	6866      	ldr	r6, [r4, #4]
 800d574:	2e00      	cmp	r6, #0
 800d576:	60a6      	str	r6, [r4, #8]
 800d578:	bfa2      	ittt	ge
 800d57a:	6821      	ldrge	r1, [r4, #0]
 800d57c:	f021 0104 	bicge.w	r1, r1, #4
 800d580:	6021      	strge	r1, [r4, #0]
 800d582:	b90d      	cbnz	r5, 800d588 <_printf_i+0x110>
 800d584:	2e00      	cmp	r6, #0
 800d586:	d04b      	beq.n	800d620 <_printf_i+0x1a8>
 800d588:	4616      	mov	r6, r2
 800d58a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d58e:	fb03 5711 	mls	r7, r3, r1, r5
 800d592:	5dc7      	ldrb	r7, [r0, r7]
 800d594:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d598:	462f      	mov	r7, r5
 800d59a:	460d      	mov	r5, r1
 800d59c:	42bb      	cmp	r3, r7
 800d59e:	d9f4      	bls.n	800d58a <_printf_i+0x112>
 800d5a0:	2b08      	cmp	r3, #8
 800d5a2:	d10b      	bne.n	800d5bc <_printf_i+0x144>
 800d5a4:	6823      	ldr	r3, [r4, #0]
 800d5a6:	07df      	lsls	r7, r3, #31
 800d5a8:	d508      	bpl.n	800d5bc <_printf_i+0x144>
 800d5aa:	6923      	ldr	r3, [r4, #16]
 800d5ac:	6861      	ldr	r1, [r4, #4]
 800d5ae:	4299      	cmp	r1, r3
 800d5b0:	bfde      	ittt	le
 800d5b2:	2330      	movle	r3, #48	@ 0x30
 800d5b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d5b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d5bc:	1b92      	subs	r2, r2, r6
 800d5be:	6122      	str	r2, [r4, #16]
 800d5c0:	464b      	mov	r3, r9
 800d5c2:	aa03      	add	r2, sp, #12
 800d5c4:	4621      	mov	r1, r4
 800d5c6:	4640      	mov	r0, r8
 800d5c8:	f8cd a000 	str.w	sl, [sp]
 800d5cc:	f7ff fee2 	bl	800d394 <_printf_common>
 800d5d0:	3001      	adds	r0, #1
 800d5d2:	d14a      	bne.n	800d66a <_printf_i+0x1f2>
 800d5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5d8:	b004      	add	sp, #16
 800d5da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5de:	6823      	ldr	r3, [r4, #0]
 800d5e0:	f043 0320 	orr.w	r3, r3, #32
 800d5e4:	6023      	str	r3, [r4, #0]
 800d5e6:	2778      	movs	r7, #120	@ 0x78
 800d5e8:	4832      	ldr	r0, [pc, #200]	@ (800d6b4 <_printf_i+0x23c>)
 800d5ea:	6823      	ldr	r3, [r4, #0]
 800d5ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d5f0:	061f      	lsls	r7, r3, #24
 800d5f2:	6831      	ldr	r1, [r6, #0]
 800d5f4:	f851 5b04 	ldr.w	r5, [r1], #4
 800d5f8:	d402      	bmi.n	800d600 <_printf_i+0x188>
 800d5fa:	065f      	lsls	r7, r3, #25
 800d5fc:	bf48      	it	mi
 800d5fe:	b2ad      	uxthmi	r5, r5
 800d600:	6031      	str	r1, [r6, #0]
 800d602:	07d9      	lsls	r1, r3, #31
 800d604:	bf44      	itt	mi
 800d606:	f043 0320 	orrmi.w	r3, r3, #32
 800d60a:	6023      	strmi	r3, [r4, #0]
 800d60c:	b11d      	cbz	r5, 800d616 <_printf_i+0x19e>
 800d60e:	2310      	movs	r3, #16
 800d610:	e7ac      	b.n	800d56c <_printf_i+0xf4>
 800d612:	4827      	ldr	r0, [pc, #156]	@ (800d6b0 <_printf_i+0x238>)
 800d614:	e7e9      	b.n	800d5ea <_printf_i+0x172>
 800d616:	6823      	ldr	r3, [r4, #0]
 800d618:	f023 0320 	bic.w	r3, r3, #32
 800d61c:	6023      	str	r3, [r4, #0]
 800d61e:	e7f6      	b.n	800d60e <_printf_i+0x196>
 800d620:	4616      	mov	r6, r2
 800d622:	e7bd      	b.n	800d5a0 <_printf_i+0x128>
 800d624:	6833      	ldr	r3, [r6, #0]
 800d626:	6825      	ldr	r5, [r4, #0]
 800d628:	1d18      	adds	r0, r3, #4
 800d62a:	6961      	ldr	r1, [r4, #20]
 800d62c:	6030      	str	r0, [r6, #0]
 800d62e:	062e      	lsls	r6, r5, #24
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	d501      	bpl.n	800d638 <_printf_i+0x1c0>
 800d634:	6019      	str	r1, [r3, #0]
 800d636:	e002      	b.n	800d63e <_printf_i+0x1c6>
 800d638:	0668      	lsls	r0, r5, #25
 800d63a:	d5fb      	bpl.n	800d634 <_printf_i+0x1bc>
 800d63c:	8019      	strh	r1, [r3, #0]
 800d63e:	2300      	movs	r3, #0
 800d640:	4616      	mov	r6, r2
 800d642:	6123      	str	r3, [r4, #16]
 800d644:	e7bc      	b.n	800d5c0 <_printf_i+0x148>
 800d646:	6833      	ldr	r3, [r6, #0]
 800d648:	2100      	movs	r1, #0
 800d64a:	1d1a      	adds	r2, r3, #4
 800d64c:	6032      	str	r2, [r6, #0]
 800d64e:	681e      	ldr	r6, [r3, #0]
 800d650:	6862      	ldr	r2, [r4, #4]
 800d652:	4630      	mov	r0, r6
 800d654:	f000 f970 	bl	800d938 <memchr>
 800d658:	b108      	cbz	r0, 800d65e <_printf_i+0x1e6>
 800d65a:	1b80      	subs	r0, r0, r6
 800d65c:	6060      	str	r0, [r4, #4]
 800d65e:	6863      	ldr	r3, [r4, #4]
 800d660:	6123      	str	r3, [r4, #16]
 800d662:	2300      	movs	r3, #0
 800d664:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d668:	e7aa      	b.n	800d5c0 <_printf_i+0x148>
 800d66a:	6923      	ldr	r3, [r4, #16]
 800d66c:	4632      	mov	r2, r6
 800d66e:	4649      	mov	r1, r9
 800d670:	4640      	mov	r0, r8
 800d672:	47d0      	blx	sl
 800d674:	3001      	adds	r0, #1
 800d676:	d0ad      	beq.n	800d5d4 <_printf_i+0x15c>
 800d678:	6823      	ldr	r3, [r4, #0]
 800d67a:	079b      	lsls	r3, r3, #30
 800d67c:	d413      	bmi.n	800d6a6 <_printf_i+0x22e>
 800d67e:	68e0      	ldr	r0, [r4, #12]
 800d680:	9b03      	ldr	r3, [sp, #12]
 800d682:	4298      	cmp	r0, r3
 800d684:	bfb8      	it	lt
 800d686:	4618      	movlt	r0, r3
 800d688:	e7a6      	b.n	800d5d8 <_printf_i+0x160>
 800d68a:	2301      	movs	r3, #1
 800d68c:	4632      	mov	r2, r6
 800d68e:	4649      	mov	r1, r9
 800d690:	4640      	mov	r0, r8
 800d692:	47d0      	blx	sl
 800d694:	3001      	adds	r0, #1
 800d696:	d09d      	beq.n	800d5d4 <_printf_i+0x15c>
 800d698:	3501      	adds	r5, #1
 800d69a:	68e3      	ldr	r3, [r4, #12]
 800d69c:	9903      	ldr	r1, [sp, #12]
 800d69e:	1a5b      	subs	r3, r3, r1
 800d6a0:	42ab      	cmp	r3, r5
 800d6a2:	dcf2      	bgt.n	800d68a <_printf_i+0x212>
 800d6a4:	e7eb      	b.n	800d67e <_printf_i+0x206>
 800d6a6:	2500      	movs	r5, #0
 800d6a8:	f104 0619 	add.w	r6, r4, #25
 800d6ac:	e7f5      	b.n	800d69a <_printf_i+0x222>
 800d6ae:	bf00      	nop
 800d6b0:	0800db01 	.word	0x0800db01
 800d6b4:	0800db12 	.word	0x0800db12

0800d6b8 <__sflush_r>:
 800d6b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6c0:	0716      	lsls	r6, r2, #28
 800d6c2:	4605      	mov	r5, r0
 800d6c4:	460c      	mov	r4, r1
 800d6c6:	d454      	bmi.n	800d772 <__sflush_r+0xba>
 800d6c8:	684b      	ldr	r3, [r1, #4]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	dc02      	bgt.n	800d6d4 <__sflush_r+0x1c>
 800d6ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	dd48      	ble.n	800d766 <__sflush_r+0xae>
 800d6d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d6d6:	2e00      	cmp	r6, #0
 800d6d8:	d045      	beq.n	800d766 <__sflush_r+0xae>
 800d6da:	2300      	movs	r3, #0
 800d6dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d6e0:	682f      	ldr	r7, [r5, #0]
 800d6e2:	6a21      	ldr	r1, [r4, #32]
 800d6e4:	602b      	str	r3, [r5, #0]
 800d6e6:	d030      	beq.n	800d74a <__sflush_r+0x92>
 800d6e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d6ea:	89a3      	ldrh	r3, [r4, #12]
 800d6ec:	0759      	lsls	r1, r3, #29
 800d6ee:	d505      	bpl.n	800d6fc <__sflush_r+0x44>
 800d6f0:	6863      	ldr	r3, [r4, #4]
 800d6f2:	1ad2      	subs	r2, r2, r3
 800d6f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d6f6:	b10b      	cbz	r3, 800d6fc <__sflush_r+0x44>
 800d6f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d6fa:	1ad2      	subs	r2, r2, r3
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d700:	6a21      	ldr	r1, [r4, #32]
 800d702:	4628      	mov	r0, r5
 800d704:	47b0      	blx	r6
 800d706:	1c43      	adds	r3, r0, #1
 800d708:	89a3      	ldrh	r3, [r4, #12]
 800d70a:	d106      	bne.n	800d71a <__sflush_r+0x62>
 800d70c:	6829      	ldr	r1, [r5, #0]
 800d70e:	291d      	cmp	r1, #29
 800d710:	d82b      	bhi.n	800d76a <__sflush_r+0xb2>
 800d712:	4a2a      	ldr	r2, [pc, #168]	@ (800d7bc <__sflush_r+0x104>)
 800d714:	410a      	asrs	r2, r1
 800d716:	07d6      	lsls	r6, r2, #31
 800d718:	d427      	bmi.n	800d76a <__sflush_r+0xb2>
 800d71a:	2200      	movs	r2, #0
 800d71c:	04d9      	lsls	r1, r3, #19
 800d71e:	6062      	str	r2, [r4, #4]
 800d720:	6922      	ldr	r2, [r4, #16]
 800d722:	6022      	str	r2, [r4, #0]
 800d724:	d504      	bpl.n	800d730 <__sflush_r+0x78>
 800d726:	1c42      	adds	r2, r0, #1
 800d728:	d101      	bne.n	800d72e <__sflush_r+0x76>
 800d72a:	682b      	ldr	r3, [r5, #0]
 800d72c:	b903      	cbnz	r3, 800d730 <__sflush_r+0x78>
 800d72e:	6560      	str	r0, [r4, #84]	@ 0x54
 800d730:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d732:	602f      	str	r7, [r5, #0]
 800d734:	b1b9      	cbz	r1, 800d766 <__sflush_r+0xae>
 800d736:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d73a:	4299      	cmp	r1, r3
 800d73c:	d002      	beq.n	800d744 <__sflush_r+0x8c>
 800d73e:	4628      	mov	r0, r5
 800d740:	f7ff fbee 	bl	800cf20 <_free_r>
 800d744:	2300      	movs	r3, #0
 800d746:	6363      	str	r3, [r4, #52]	@ 0x34
 800d748:	e00d      	b.n	800d766 <__sflush_r+0xae>
 800d74a:	2301      	movs	r3, #1
 800d74c:	4628      	mov	r0, r5
 800d74e:	47b0      	blx	r6
 800d750:	4602      	mov	r2, r0
 800d752:	1c50      	adds	r0, r2, #1
 800d754:	d1c9      	bne.n	800d6ea <__sflush_r+0x32>
 800d756:	682b      	ldr	r3, [r5, #0]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d0c6      	beq.n	800d6ea <__sflush_r+0x32>
 800d75c:	2b1d      	cmp	r3, #29
 800d75e:	d001      	beq.n	800d764 <__sflush_r+0xac>
 800d760:	2b16      	cmp	r3, #22
 800d762:	d11d      	bne.n	800d7a0 <__sflush_r+0xe8>
 800d764:	602f      	str	r7, [r5, #0]
 800d766:	2000      	movs	r0, #0
 800d768:	e021      	b.n	800d7ae <__sflush_r+0xf6>
 800d76a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d76e:	b21b      	sxth	r3, r3
 800d770:	e01a      	b.n	800d7a8 <__sflush_r+0xf0>
 800d772:	690f      	ldr	r7, [r1, #16]
 800d774:	2f00      	cmp	r7, #0
 800d776:	d0f6      	beq.n	800d766 <__sflush_r+0xae>
 800d778:	0793      	lsls	r3, r2, #30
 800d77a:	680e      	ldr	r6, [r1, #0]
 800d77c:	600f      	str	r7, [r1, #0]
 800d77e:	bf0c      	ite	eq
 800d780:	694b      	ldreq	r3, [r1, #20]
 800d782:	2300      	movne	r3, #0
 800d784:	eba6 0807 	sub.w	r8, r6, r7
 800d788:	608b      	str	r3, [r1, #8]
 800d78a:	f1b8 0f00 	cmp.w	r8, #0
 800d78e:	ddea      	ble.n	800d766 <__sflush_r+0xae>
 800d790:	4643      	mov	r3, r8
 800d792:	463a      	mov	r2, r7
 800d794:	6a21      	ldr	r1, [r4, #32]
 800d796:	4628      	mov	r0, r5
 800d798:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d79a:	47b0      	blx	r6
 800d79c:	2800      	cmp	r0, #0
 800d79e:	dc08      	bgt.n	800d7b2 <__sflush_r+0xfa>
 800d7a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d7ac:	81a3      	strh	r3, [r4, #12]
 800d7ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7b2:	4407      	add	r7, r0
 800d7b4:	eba8 0800 	sub.w	r8, r8, r0
 800d7b8:	e7e7      	b.n	800d78a <__sflush_r+0xd2>
 800d7ba:	bf00      	nop
 800d7bc:	dfbffffe 	.word	0xdfbffffe

0800d7c0 <_fflush_r>:
 800d7c0:	b538      	push	{r3, r4, r5, lr}
 800d7c2:	690b      	ldr	r3, [r1, #16]
 800d7c4:	4605      	mov	r5, r0
 800d7c6:	460c      	mov	r4, r1
 800d7c8:	b913      	cbnz	r3, 800d7d0 <_fflush_r+0x10>
 800d7ca:	2500      	movs	r5, #0
 800d7cc:	4628      	mov	r0, r5
 800d7ce:	bd38      	pop	{r3, r4, r5, pc}
 800d7d0:	b118      	cbz	r0, 800d7da <_fflush_r+0x1a>
 800d7d2:	6a03      	ldr	r3, [r0, #32]
 800d7d4:	b90b      	cbnz	r3, 800d7da <_fflush_r+0x1a>
 800d7d6:	f7ff f9a9 	bl	800cb2c <__sinit>
 800d7da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d0f3      	beq.n	800d7ca <_fflush_r+0xa>
 800d7e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d7e4:	07d0      	lsls	r0, r2, #31
 800d7e6:	d404      	bmi.n	800d7f2 <_fflush_r+0x32>
 800d7e8:	0599      	lsls	r1, r3, #22
 800d7ea:	d402      	bmi.n	800d7f2 <_fflush_r+0x32>
 800d7ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d7ee:	f7ff fb94 	bl	800cf1a <__retarget_lock_acquire_recursive>
 800d7f2:	4628      	mov	r0, r5
 800d7f4:	4621      	mov	r1, r4
 800d7f6:	f7ff ff5f 	bl	800d6b8 <__sflush_r>
 800d7fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d7fc:	4605      	mov	r5, r0
 800d7fe:	07da      	lsls	r2, r3, #31
 800d800:	d4e4      	bmi.n	800d7cc <_fflush_r+0xc>
 800d802:	89a3      	ldrh	r3, [r4, #12]
 800d804:	059b      	lsls	r3, r3, #22
 800d806:	d4e1      	bmi.n	800d7cc <_fflush_r+0xc>
 800d808:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d80a:	f7ff fb87 	bl	800cf1c <__retarget_lock_release_recursive>
 800d80e:	e7dd      	b.n	800d7cc <_fflush_r+0xc>

0800d810 <__swhatbuf_r>:
 800d810:	b570      	push	{r4, r5, r6, lr}
 800d812:	460c      	mov	r4, r1
 800d814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d818:	b096      	sub	sp, #88	@ 0x58
 800d81a:	4615      	mov	r5, r2
 800d81c:	2900      	cmp	r1, #0
 800d81e:	461e      	mov	r6, r3
 800d820:	da0c      	bge.n	800d83c <__swhatbuf_r+0x2c>
 800d822:	89a3      	ldrh	r3, [r4, #12]
 800d824:	2100      	movs	r1, #0
 800d826:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d82a:	bf14      	ite	ne
 800d82c:	2340      	movne	r3, #64	@ 0x40
 800d82e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d832:	2000      	movs	r0, #0
 800d834:	6031      	str	r1, [r6, #0]
 800d836:	602b      	str	r3, [r5, #0]
 800d838:	b016      	add	sp, #88	@ 0x58
 800d83a:	bd70      	pop	{r4, r5, r6, pc}
 800d83c:	466a      	mov	r2, sp
 800d83e:	f000 f849 	bl	800d8d4 <_fstat_r>
 800d842:	2800      	cmp	r0, #0
 800d844:	dbed      	blt.n	800d822 <__swhatbuf_r+0x12>
 800d846:	9901      	ldr	r1, [sp, #4]
 800d848:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d84c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d850:	4259      	negs	r1, r3
 800d852:	4159      	adcs	r1, r3
 800d854:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d858:	e7eb      	b.n	800d832 <__swhatbuf_r+0x22>

0800d85a <__smakebuf_r>:
 800d85a:	898b      	ldrh	r3, [r1, #12]
 800d85c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d85e:	079d      	lsls	r5, r3, #30
 800d860:	4606      	mov	r6, r0
 800d862:	460c      	mov	r4, r1
 800d864:	d507      	bpl.n	800d876 <__smakebuf_r+0x1c>
 800d866:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d86a:	6023      	str	r3, [r4, #0]
 800d86c:	6123      	str	r3, [r4, #16]
 800d86e:	2301      	movs	r3, #1
 800d870:	6163      	str	r3, [r4, #20]
 800d872:	b003      	add	sp, #12
 800d874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d876:	ab01      	add	r3, sp, #4
 800d878:	466a      	mov	r2, sp
 800d87a:	f7ff ffc9 	bl	800d810 <__swhatbuf_r>
 800d87e:	9f00      	ldr	r7, [sp, #0]
 800d880:	4605      	mov	r5, r0
 800d882:	4630      	mov	r0, r6
 800d884:	4639      	mov	r1, r7
 800d886:	f7ff fbb7 	bl	800cff8 <_malloc_r>
 800d88a:	b948      	cbnz	r0, 800d8a0 <__smakebuf_r+0x46>
 800d88c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d890:	059a      	lsls	r2, r3, #22
 800d892:	d4ee      	bmi.n	800d872 <__smakebuf_r+0x18>
 800d894:	f023 0303 	bic.w	r3, r3, #3
 800d898:	f043 0302 	orr.w	r3, r3, #2
 800d89c:	81a3      	strh	r3, [r4, #12]
 800d89e:	e7e2      	b.n	800d866 <__smakebuf_r+0xc>
 800d8a0:	89a3      	ldrh	r3, [r4, #12]
 800d8a2:	6020      	str	r0, [r4, #0]
 800d8a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d8a8:	81a3      	strh	r3, [r4, #12]
 800d8aa:	9b01      	ldr	r3, [sp, #4]
 800d8ac:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d8b0:	b15b      	cbz	r3, 800d8ca <__smakebuf_r+0x70>
 800d8b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8b6:	4630      	mov	r0, r6
 800d8b8:	f000 f81e 	bl	800d8f8 <_isatty_r>
 800d8bc:	b128      	cbz	r0, 800d8ca <__smakebuf_r+0x70>
 800d8be:	89a3      	ldrh	r3, [r4, #12]
 800d8c0:	f023 0303 	bic.w	r3, r3, #3
 800d8c4:	f043 0301 	orr.w	r3, r3, #1
 800d8c8:	81a3      	strh	r3, [r4, #12]
 800d8ca:	89a3      	ldrh	r3, [r4, #12]
 800d8cc:	431d      	orrs	r5, r3
 800d8ce:	81a5      	strh	r5, [r4, #12]
 800d8d0:	e7cf      	b.n	800d872 <__smakebuf_r+0x18>
	...

0800d8d4 <_fstat_r>:
 800d8d4:	b538      	push	{r3, r4, r5, lr}
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	4d06      	ldr	r5, [pc, #24]	@ (800d8f4 <_fstat_r+0x20>)
 800d8da:	4604      	mov	r4, r0
 800d8dc:	4608      	mov	r0, r1
 800d8de:	4611      	mov	r1, r2
 800d8e0:	602b      	str	r3, [r5, #0]
 800d8e2:	f7f4 fc30 	bl	8002146 <_fstat>
 800d8e6:	1c43      	adds	r3, r0, #1
 800d8e8:	d102      	bne.n	800d8f0 <_fstat_r+0x1c>
 800d8ea:	682b      	ldr	r3, [r5, #0]
 800d8ec:	b103      	cbz	r3, 800d8f0 <_fstat_r+0x1c>
 800d8ee:	6023      	str	r3, [r4, #0]
 800d8f0:	bd38      	pop	{r3, r4, r5, pc}
 800d8f2:	bf00      	nop
 800d8f4:	200006e0 	.word	0x200006e0

0800d8f8 <_isatty_r>:
 800d8f8:	b538      	push	{r3, r4, r5, lr}
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	4d05      	ldr	r5, [pc, #20]	@ (800d914 <_isatty_r+0x1c>)
 800d8fe:	4604      	mov	r4, r0
 800d900:	4608      	mov	r0, r1
 800d902:	602b      	str	r3, [r5, #0]
 800d904:	f7f4 fc2f 	bl	8002166 <_isatty>
 800d908:	1c43      	adds	r3, r0, #1
 800d90a:	d102      	bne.n	800d912 <_isatty_r+0x1a>
 800d90c:	682b      	ldr	r3, [r5, #0]
 800d90e:	b103      	cbz	r3, 800d912 <_isatty_r+0x1a>
 800d910:	6023      	str	r3, [r4, #0]
 800d912:	bd38      	pop	{r3, r4, r5, pc}
 800d914:	200006e0 	.word	0x200006e0

0800d918 <_sbrk_r>:
 800d918:	b538      	push	{r3, r4, r5, lr}
 800d91a:	2300      	movs	r3, #0
 800d91c:	4d05      	ldr	r5, [pc, #20]	@ (800d934 <_sbrk_r+0x1c>)
 800d91e:	4604      	mov	r4, r0
 800d920:	4608      	mov	r0, r1
 800d922:	602b      	str	r3, [r5, #0]
 800d924:	f7f4 fc38 	bl	8002198 <_sbrk>
 800d928:	1c43      	adds	r3, r0, #1
 800d92a:	d102      	bne.n	800d932 <_sbrk_r+0x1a>
 800d92c:	682b      	ldr	r3, [r5, #0]
 800d92e:	b103      	cbz	r3, 800d932 <_sbrk_r+0x1a>
 800d930:	6023      	str	r3, [r4, #0]
 800d932:	bd38      	pop	{r3, r4, r5, pc}
 800d934:	200006e0 	.word	0x200006e0

0800d938 <memchr>:
 800d938:	b2c9      	uxtb	r1, r1
 800d93a:	4603      	mov	r3, r0
 800d93c:	4402      	add	r2, r0
 800d93e:	b510      	push	{r4, lr}
 800d940:	4293      	cmp	r3, r2
 800d942:	4618      	mov	r0, r3
 800d944:	d101      	bne.n	800d94a <memchr+0x12>
 800d946:	2000      	movs	r0, #0
 800d948:	e003      	b.n	800d952 <memchr+0x1a>
 800d94a:	7804      	ldrb	r4, [r0, #0]
 800d94c:	3301      	adds	r3, #1
 800d94e:	428c      	cmp	r4, r1
 800d950:	d1f6      	bne.n	800d940 <memchr+0x8>
 800d952:	bd10      	pop	{r4, pc}

0800d954 <_init>:
 800d954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d956:	bf00      	nop
 800d958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d95a:	bc08      	pop	{r3}
 800d95c:	469e      	mov	lr, r3
 800d95e:	4770      	bx	lr

0800d960 <_fini>:
 800d960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d962:	bf00      	nop
 800d964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d966:	bc08      	pop	{r3}
 800d968:	469e      	mov	lr, r3
 800d96a:	4770      	bx	lr
