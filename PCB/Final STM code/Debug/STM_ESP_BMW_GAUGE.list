
STM_ESP_BMW_GAUGE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b814  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800ba6c  0800ba6c  0000ca6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb40  0800bb40  0000d068  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb40  0800bb40  0000cb40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb48  0800bb48  0000d068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb48  0800bb48  0000cb48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bb4c  0800bb4c  0000cb4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800bb50  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000478  20000068  0800bbb8  0000d068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  0800bbb8  0000d4e0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000d068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c341  00000000  00000000  0000d09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000332f  00000000  00000000  000293df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001688  00000000  00000000  0002c710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000117a  00000000  00000000  0002dd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d6e9  00000000  00000000  0002ef12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e4bf  00000000  00000000  0005c5fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d62d  00000000  00000000  0007aaba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001980e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006710  00000000  00000000  0019812c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0019e83c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	20000068 	.word	0x20000068
 8000274:	00000000 	.word	0x00000000
 8000278:	0800ba54 	.word	0x0800ba54

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	2000006c 	.word	0x2000006c
 8000294:	0800ba54 	.word	0x0800ba54

08000298 <strlen>:
 8000298:	4603      	mov	r3, r0
 800029a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029e:	2a00      	cmp	r2, #0
 80002a0:	d1fb      	bne.n	800029a <strlen+0x2>
 80002a2:	1a18      	subs	r0, r3, r0
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr

080002a8 <__aeabi_dmul>:
 80002a8:	b570      	push	{r4, r5, r6, lr}
 80002aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002b6:	bf1d      	ittte	ne
 80002b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002bc:	ea94 0f0c 	teqne	r4, ip
 80002c0:	ea95 0f0c 	teqne	r5, ip
 80002c4:	f000 f8de 	bleq	8000484 <__aeabi_dmul+0x1dc>
 80002c8:	442c      	add	r4, r5
 80002ca:	ea81 0603 	eor.w	r6, r1, r3
 80002ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002da:	bf18      	it	ne
 80002dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002e8:	d038      	beq.n	800035c <__aeabi_dmul+0xb4>
 80002ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80002ee:	f04f 0500 	mov.w	r5, #0
 80002f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002fe:	f04f 0600 	mov.w	r6, #0
 8000302:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000306:	f09c 0f00 	teq	ip, #0
 800030a:	bf18      	it	ne
 800030c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000310:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000314:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000318:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800031c:	d204      	bcs.n	8000328 <__aeabi_dmul+0x80>
 800031e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000322:	416d      	adcs	r5, r5
 8000324:	eb46 0606 	adc.w	r6, r6, r6
 8000328:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800032c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000330:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000334:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000338:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800033c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000340:	bf88      	it	hi
 8000342:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000346:	d81e      	bhi.n	8000386 <__aeabi_dmul+0xde>
 8000348:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000360:	ea46 0101 	orr.w	r1, r6, r1
 8000364:	ea40 0002 	orr.w	r0, r0, r2
 8000368:	ea81 0103 	eor.w	r1, r1, r3
 800036c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000370:	bfc2      	ittt	gt
 8000372:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000376:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800037a:	bd70      	popgt	{r4, r5, r6, pc}
 800037c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000380:	f04f 0e00 	mov.w	lr, #0
 8000384:	3c01      	subs	r4, #1
 8000386:	f300 80ab 	bgt.w	80004e0 <__aeabi_dmul+0x238>
 800038a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800038e:	bfde      	ittt	le
 8000390:	2000      	movle	r0, #0
 8000392:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000396:	bd70      	pople	{r4, r5, r6, pc}
 8000398:	f1c4 0400 	rsb	r4, r4, #0
 800039c:	3c20      	subs	r4, #32
 800039e:	da35      	bge.n	800040c <__aeabi_dmul+0x164>
 80003a0:	340c      	adds	r4, #12
 80003a2:	dc1b      	bgt.n	80003dc <__aeabi_dmul+0x134>
 80003a4:	f104 0414 	add.w	r4, r4, #20
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f305 	lsl.w	r3, r0, r5
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f205 	lsl.w	r2, r1, r5
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c8:	fa21 f604 	lsr.w	r6, r1, r4
 80003cc:	eb42 0106 	adc.w	r1, r2, r6
 80003d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003d4:	bf08      	it	eq
 80003d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003da:	bd70      	pop	{r4, r5, r6, pc}
 80003dc:	f1c4 040c 	rsb	r4, r4, #12
 80003e0:	f1c4 0520 	rsb	r5, r4, #32
 80003e4:	fa00 f304 	lsl.w	r3, r0, r4
 80003e8:	fa20 f005 	lsr.w	r0, r0, r5
 80003ec:	fa01 f204 	lsl.w	r2, r1, r4
 80003f0:	ea40 0002 	orr.w	r0, r0, r2
 80003f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003fc:	f141 0100 	adc.w	r1, r1, #0
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f1c4 0520 	rsb	r5, r4, #32
 8000410:	fa00 f205 	lsl.w	r2, r0, r5
 8000414:	ea4e 0e02 	orr.w	lr, lr, r2
 8000418:	fa20 f304 	lsr.w	r3, r0, r4
 800041c:	fa01 f205 	lsl.w	r2, r1, r5
 8000420:	ea43 0302 	orr.w	r3, r3, r2
 8000424:	fa21 f004 	lsr.w	r0, r1, r4
 8000428:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800042c:	fa21 f204 	lsr.w	r2, r1, r4
 8000430:	ea20 0002 	bic.w	r0, r0, r2
 8000434:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000438:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800043c:	bf08      	it	eq
 800043e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000442:	bd70      	pop	{r4, r5, r6, pc}
 8000444:	f094 0f00 	teq	r4, #0
 8000448:	d10f      	bne.n	800046a <__aeabi_dmul+0x1c2>
 800044a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800044e:	0040      	lsls	r0, r0, #1
 8000450:	eb41 0101 	adc.w	r1, r1, r1
 8000454:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000458:	bf08      	it	eq
 800045a:	3c01      	subeq	r4, #1
 800045c:	d0f7      	beq.n	800044e <__aeabi_dmul+0x1a6>
 800045e:	ea41 0106 	orr.w	r1, r1, r6
 8000462:	f095 0f00 	teq	r5, #0
 8000466:	bf18      	it	ne
 8000468:	4770      	bxne	lr
 800046a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800046e:	0052      	lsls	r2, r2, #1
 8000470:	eb43 0303 	adc.w	r3, r3, r3
 8000474:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000478:	bf08      	it	eq
 800047a:	3d01      	subeq	r5, #1
 800047c:	d0f7      	beq.n	800046e <__aeabi_dmul+0x1c6>
 800047e:	ea43 0306 	orr.w	r3, r3, r6
 8000482:	4770      	bx	lr
 8000484:	ea94 0f0c 	teq	r4, ip
 8000488:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800048c:	bf18      	it	ne
 800048e:	ea95 0f0c 	teqne	r5, ip
 8000492:	d00c      	beq.n	80004ae <__aeabi_dmul+0x206>
 8000494:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000498:	bf18      	it	ne
 800049a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800049e:	d1d1      	bne.n	8000444 <__aeabi_dmul+0x19c>
 80004a0:	ea81 0103 	eor.w	r1, r1, r3
 80004a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004a8:	f04f 0000 	mov.w	r0, #0
 80004ac:	bd70      	pop	{r4, r5, r6, pc}
 80004ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b2:	bf06      	itte	eq
 80004b4:	4610      	moveq	r0, r2
 80004b6:	4619      	moveq	r1, r3
 80004b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004bc:	d019      	beq.n	80004f2 <__aeabi_dmul+0x24a>
 80004be:	ea94 0f0c 	teq	r4, ip
 80004c2:	d102      	bne.n	80004ca <__aeabi_dmul+0x222>
 80004c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c8:	d113      	bne.n	80004f2 <__aeabi_dmul+0x24a>
 80004ca:	ea95 0f0c 	teq	r5, ip
 80004ce:	d105      	bne.n	80004dc <__aeabi_dmul+0x234>
 80004d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004d4:	bf1c      	itt	ne
 80004d6:	4610      	movne	r0, r2
 80004d8:	4619      	movne	r1, r3
 80004da:	d10a      	bne.n	80004f2 <__aeabi_dmul+0x24a>
 80004dc:	ea81 0103 	eor.w	r1, r1, r3
 80004e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004ec:	f04f 0000 	mov.w	r0, #0
 80004f0:	bd70      	pop	{r4, r5, r6, pc}
 80004f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004fa:	bd70      	pop	{r4, r5, r6, pc}

080004fc <__aeabi_drsub>:
 80004fc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000500:	e002      	b.n	8000508 <__adddf3>
 8000502:	bf00      	nop

08000504 <__aeabi_dsub>:
 8000504:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000508 <__adddf3>:
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800050e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000512:	ea94 0f05 	teq	r4, r5
 8000516:	bf08      	it	eq
 8000518:	ea90 0f02 	teqeq	r0, r2
 800051c:	bf1f      	itttt	ne
 800051e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000522:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000526:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800052a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800052e:	f000 80e2 	beq.w	80006f6 <__adddf3+0x1ee>
 8000532:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000536:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800053a:	bfb8      	it	lt
 800053c:	426d      	neglt	r5, r5
 800053e:	dd0c      	ble.n	800055a <__adddf3+0x52>
 8000540:	442c      	add	r4, r5
 8000542:	ea80 0202 	eor.w	r2, r0, r2
 8000546:	ea81 0303 	eor.w	r3, r1, r3
 800054a:	ea82 0000 	eor.w	r0, r2, r0
 800054e:	ea83 0101 	eor.w	r1, r3, r1
 8000552:	ea80 0202 	eor.w	r2, r0, r2
 8000556:	ea81 0303 	eor.w	r3, r1, r3
 800055a:	2d36      	cmp	r5, #54	@ 0x36
 800055c:	bf88      	it	hi
 800055e:	bd30      	pophi	{r4, r5, pc}
 8000560:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000564:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000568:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800056c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000570:	d002      	beq.n	8000578 <__adddf3+0x70>
 8000572:	4240      	negs	r0, r0
 8000574:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000578:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800057c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000580:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000584:	d002      	beq.n	800058c <__adddf3+0x84>
 8000586:	4252      	negs	r2, r2
 8000588:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800058c:	ea94 0f05 	teq	r4, r5
 8000590:	f000 80a7 	beq.w	80006e2 <__adddf3+0x1da>
 8000594:	f1a4 0401 	sub.w	r4, r4, #1
 8000598:	f1d5 0e20 	rsbs	lr, r5, #32
 800059c:	db0d      	blt.n	80005ba <__adddf3+0xb2>
 800059e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005a2:	fa22 f205 	lsr.w	r2, r2, r5
 80005a6:	1880      	adds	r0, r0, r2
 80005a8:	f141 0100 	adc.w	r1, r1, #0
 80005ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b0:	1880      	adds	r0, r0, r2
 80005b2:	fa43 f305 	asr.w	r3, r3, r5
 80005b6:	4159      	adcs	r1, r3
 80005b8:	e00e      	b.n	80005d8 <__adddf3+0xd0>
 80005ba:	f1a5 0520 	sub.w	r5, r5, #32
 80005be:	f10e 0e20 	add.w	lr, lr, #32
 80005c2:	2a01      	cmp	r2, #1
 80005c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c8:	bf28      	it	cs
 80005ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005ce:	fa43 f305 	asr.w	r3, r3, r5
 80005d2:	18c0      	adds	r0, r0, r3
 80005d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	d507      	bpl.n	80005ee <__adddf3+0xe6>
 80005de:	f04f 0e00 	mov.w	lr, #0
 80005e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80005e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80005ee:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005f2:	d31b      	bcc.n	800062c <__adddf3+0x124>
 80005f4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005f8:	d30c      	bcc.n	8000614 <__adddf3+0x10c>
 80005fa:	0849      	lsrs	r1, r1, #1
 80005fc:	ea5f 0030 	movs.w	r0, r0, rrx
 8000600:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000604:	f104 0401 	add.w	r4, r4, #1
 8000608:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800060c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000610:	f080 809a 	bcs.w	8000748 <__adddf3+0x240>
 8000614:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000618:	bf08      	it	eq
 800061a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800061e:	f150 0000 	adcs.w	r0, r0, #0
 8000622:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000626:	ea41 0105 	orr.w	r1, r1, r5
 800062a:	bd30      	pop	{r4, r5, pc}
 800062c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000630:	4140      	adcs	r0, r0
 8000632:	eb41 0101 	adc.w	r1, r1, r1
 8000636:	3c01      	subs	r4, #1
 8000638:	bf28      	it	cs
 800063a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800063e:	d2e9      	bcs.n	8000614 <__adddf3+0x10c>
 8000640:	f091 0f00 	teq	r1, #0
 8000644:	bf04      	itt	eq
 8000646:	4601      	moveq	r1, r0
 8000648:	2000      	moveq	r0, #0
 800064a:	fab1 f381 	clz	r3, r1
 800064e:	bf08      	it	eq
 8000650:	3320      	addeq	r3, #32
 8000652:	f1a3 030b 	sub.w	r3, r3, #11
 8000656:	f1b3 0220 	subs.w	r2, r3, #32
 800065a:	da0c      	bge.n	8000676 <__adddf3+0x16e>
 800065c:	320c      	adds	r2, #12
 800065e:	dd08      	ble.n	8000672 <__adddf3+0x16a>
 8000660:	f102 0c14 	add.w	ip, r2, #20
 8000664:	f1c2 020c 	rsb	r2, r2, #12
 8000668:	fa01 f00c 	lsl.w	r0, r1, ip
 800066c:	fa21 f102 	lsr.w	r1, r1, r2
 8000670:	e00c      	b.n	800068c <__adddf3+0x184>
 8000672:	f102 0214 	add.w	r2, r2, #20
 8000676:	bfd8      	it	le
 8000678:	f1c2 0c20 	rsble	ip, r2, #32
 800067c:	fa01 f102 	lsl.w	r1, r1, r2
 8000680:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000684:	bfdc      	itt	le
 8000686:	ea41 010c 	orrle.w	r1, r1, ip
 800068a:	4090      	lslle	r0, r2
 800068c:	1ae4      	subs	r4, r4, r3
 800068e:	bfa2      	ittt	ge
 8000690:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000694:	4329      	orrge	r1, r5
 8000696:	bd30      	popge	{r4, r5, pc}
 8000698:	ea6f 0404 	mvn.w	r4, r4
 800069c:	3c1f      	subs	r4, #31
 800069e:	da1c      	bge.n	80006da <__adddf3+0x1d2>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc0e      	bgt.n	80006c2 <__adddf3+0x1ba>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0220 	rsb	r2, r4, #32
 80006ac:	fa20 f004 	lsr.w	r0, r0, r4
 80006b0:	fa01 f302 	lsl.w	r3, r1, r2
 80006b4:	ea40 0003 	orr.w	r0, r0, r3
 80006b8:	fa21 f304 	lsr.w	r3, r1, r4
 80006bc:	ea45 0103 	orr.w	r1, r5, r3
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	f1c4 040c 	rsb	r4, r4, #12
 80006c6:	f1c4 0220 	rsb	r2, r4, #32
 80006ca:	fa20 f002 	lsr.w	r0, r0, r2
 80006ce:	fa01 f304 	lsl.w	r3, r1, r4
 80006d2:	ea40 0003 	orr.w	r0, r0, r3
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	fa21 f004 	lsr.w	r0, r1, r4
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	f094 0f00 	teq	r4, #0
 80006e6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006ea:	bf06      	itte	eq
 80006ec:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006f0:	3401      	addeq	r4, #1
 80006f2:	3d01      	subne	r5, #1
 80006f4:	e74e      	b.n	8000594 <__adddf3+0x8c>
 80006f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006fa:	bf18      	it	ne
 80006fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000700:	d029      	beq.n	8000756 <__adddf3+0x24e>
 8000702:	ea94 0f05 	teq	r4, r5
 8000706:	bf08      	it	eq
 8000708:	ea90 0f02 	teqeq	r0, r2
 800070c:	d005      	beq.n	800071a <__adddf3+0x212>
 800070e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000712:	bf04      	itt	eq
 8000714:	4619      	moveq	r1, r3
 8000716:	4610      	moveq	r0, r2
 8000718:	bd30      	pop	{r4, r5, pc}
 800071a:	ea91 0f03 	teq	r1, r3
 800071e:	bf1e      	ittt	ne
 8000720:	2100      	movne	r1, #0
 8000722:	2000      	movne	r0, #0
 8000724:	bd30      	popne	{r4, r5, pc}
 8000726:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800072a:	d105      	bne.n	8000738 <__adddf3+0x230>
 800072c:	0040      	lsls	r0, r0, #1
 800072e:	4149      	adcs	r1, r1
 8000730:	bf28      	it	cs
 8000732:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd30      	pop	{r4, r5, pc}
 8000738:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800073c:	bf3c      	itt	cc
 800073e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000742:	bd30      	popcc	{r4, r5, pc}
 8000744:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000748:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800075a:	bf1a      	itte	ne
 800075c:	4619      	movne	r1, r3
 800075e:	4610      	movne	r0, r2
 8000760:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000764:	bf1c      	itt	ne
 8000766:	460b      	movne	r3, r1
 8000768:	4602      	movne	r2, r0
 800076a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800076e:	bf06      	itte	eq
 8000770:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000774:	ea91 0f03 	teqeq	r1, r3
 8000778:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800077c:	bd30      	pop	{r4, r5, pc}
 800077e:	bf00      	nop

08000780 <__aeabi_ui2d>:
 8000780:	f090 0f00 	teq	r0, #0
 8000784:	bf04      	itt	eq
 8000786:	2100      	moveq	r1, #0
 8000788:	4770      	bxeq	lr
 800078a:	b530      	push	{r4, r5, lr}
 800078c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000790:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000794:	f04f 0500 	mov.w	r5, #0
 8000798:	f04f 0100 	mov.w	r1, #0
 800079c:	e750      	b.n	8000640 <__adddf3+0x138>
 800079e:	bf00      	nop

080007a0 <__aeabi_i2d>:
 80007a0:	f090 0f00 	teq	r0, #0
 80007a4:	bf04      	itt	eq
 80007a6:	2100      	moveq	r1, #0
 80007a8:	4770      	bxeq	lr
 80007aa:	b530      	push	{r4, r5, lr}
 80007ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007b4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007b8:	bf48      	it	mi
 80007ba:	4240      	negmi	r0, r0
 80007bc:	f04f 0100 	mov.w	r1, #0
 80007c0:	e73e      	b.n	8000640 <__adddf3+0x138>
 80007c2:	bf00      	nop

080007c4 <__aeabi_f2d>:
 80007c4:	0042      	lsls	r2, r0, #1
 80007c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80007ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007d2:	bf1f      	itttt	ne
 80007d4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007d8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007dc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007e0:	4770      	bxne	lr
 80007e2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007e6:	bf08      	it	eq
 80007e8:	4770      	bxeq	lr
 80007ea:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007ee:	bf04      	itt	eq
 80007f0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007f4:	4770      	bxeq	lr
 80007f6:	b530      	push	{r4, r5, lr}
 80007f8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000800:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	e71c      	b.n	8000640 <__adddf3+0x138>
 8000806:	bf00      	nop

08000808 <__aeabi_ul2d>:
 8000808:	ea50 0201 	orrs.w	r2, r0, r1
 800080c:	bf08      	it	eq
 800080e:	4770      	bxeq	lr
 8000810:	b530      	push	{r4, r5, lr}
 8000812:	f04f 0500 	mov.w	r5, #0
 8000816:	e00a      	b.n	800082e <__aeabi_l2d+0x16>

08000818 <__aeabi_l2d>:
 8000818:	ea50 0201 	orrs.w	r2, r0, r1
 800081c:	bf08      	it	eq
 800081e:	4770      	bxeq	lr
 8000820:	b530      	push	{r4, r5, lr}
 8000822:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000826:	d502      	bpl.n	800082e <__aeabi_l2d+0x16>
 8000828:	4240      	negs	r0, r0
 800082a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800082e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000832:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000836:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800083a:	f43f aed8 	beq.w	80005ee <__adddf3+0xe6>
 800083e:	f04f 0203 	mov.w	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000856:	f1c2 0320 	rsb	r3, r2, #32
 800085a:	fa00 fc03 	lsl.w	ip, r0, r3
 800085e:	fa20 f002 	lsr.w	r0, r0, r2
 8000862:	fa01 fe03 	lsl.w	lr, r1, r3
 8000866:	ea40 000e 	orr.w	r0, r0, lr
 800086a:	fa21 f102 	lsr.w	r1, r1, r2
 800086e:	4414      	add	r4, r2
 8000870:	e6bd      	b.n	80005ee <__adddf3+0xe6>
 8000872:	bf00      	nop

08000874 <__aeabi_d2f>:
 8000874:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000878:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800087c:	bf24      	itt	cs
 800087e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000882:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000886:	d90d      	bls.n	80008a4 <__aeabi_d2f+0x30>
 8000888:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800088c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000890:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000894:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000898:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800089c:	bf08      	it	eq
 800089e:	f020 0001 	biceq.w	r0, r0, #1
 80008a2:	4770      	bx	lr
 80008a4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008a8:	d121      	bne.n	80008ee <__aeabi_d2f+0x7a>
 80008aa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008ae:	bfbc      	itt	lt
 80008b0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008b4:	4770      	bxlt	lr
 80008b6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008be:	f1c2 0218 	rsb	r2, r2, #24
 80008c2:	f1c2 0c20 	rsb	ip, r2, #32
 80008c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80008ca:	fa20 f002 	lsr.w	r0, r0, r2
 80008ce:	bf18      	it	ne
 80008d0:	f040 0001 	orrne.w	r0, r0, #1
 80008d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008e0:	ea40 000c 	orr.w	r0, r0, ip
 80008e4:	fa23 f302 	lsr.w	r3, r3, r2
 80008e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008ec:	e7cc      	b.n	8000888 <__aeabi_d2f+0x14>
 80008ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008f2:	d107      	bne.n	8000904 <__aeabi_d2f+0x90>
 80008f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008f8:	bf1e      	ittt	ne
 80008fa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008fe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000902:	4770      	bxne	lr
 8000904:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000908:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800090c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop

08000914 <__aeabi_uldivmod>:
 8000914:	b953      	cbnz	r3, 800092c <__aeabi_uldivmod+0x18>
 8000916:	b94a      	cbnz	r2, 800092c <__aeabi_uldivmod+0x18>
 8000918:	2900      	cmp	r1, #0
 800091a:	bf08      	it	eq
 800091c:	2800      	cmpeq	r0, #0
 800091e:	bf1c      	itt	ne
 8000920:	f04f 31ff 	movne.w	r1, #4294967295
 8000924:	f04f 30ff 	movne.w	r0, #4294967295
 8000928:	f000 b97e 	b.w	8000c28 <__aeabi_idiv0>
 800092c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000930:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000934:	f000 f806 	bl	8000944 <__udivmoddi4>
 8000938:	f8dd e004 	ldr.w	lr, [sp, #4]
 800093c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000940:	b004      	add	sp, #16
 8000942:	4770      	bx	lr

08000944 <__udivmoddi4>:
 8000944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000948:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800094a:	460c      	mov	r4, r1
 800094c:	2b00      	cmp	r3, #0
 800094e:	d14d      	bne.n	80009ec <__udivmoddi4+0xa8>
 8000950:	428a      	cmp	r2, r1
 8000952:	460f      	mov	r7, r1
 8000954:	4684      	mov	ip, r0
 8000956:	4696      	mov	lr, r2
 8000958:	fab2 f382 	clz	r3, r2
 800095c:	d960      	bls.n	8000a20 <__udivmoddi4+0xdc>
 800095e:	b14b      	cbz	r3, 8000974 <__udivmoddi4+0x30>
 8000960:	fa02 fe03 	lsl.w	lr, r2, r3
 8000964:	f1c3 0220 	rsb	r2, r3, #32
 8000968:	409f      	lsls	r7, r3
 800096a:	fa00 fc03 	lsl.w	ip, r0, r3
 800096e:	fa20 f202 	lsr.w	r2, r0, r2
 8000972:	4317      	orrs	r7, r2
 8000974:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000978:	fa1f f48e 	uxth.w	r4, lr
 800097c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000980:	fbb7 f1f6 	udiv	r1, r7, r6
 8000984:	fb06 7711 	mls	r7, r6, r1, r7
 8000988:	fb01 f004 	mul.w	r0, r1, r4
 800098c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000990:	4290      	cmp	r0, r2
 8000992:	d908      	bls.n	80009a6 <__udivmoddi4+0x62>
 8000994:	eb1e 0202 	adds.w	r2, lr, r2
 8000998:	f101 37ff 	add.w	r7, r1, #4294967295
 800099c:	d202      	bcs.n	80009a4 <__udivmoddi4+0x60>
 800099e:	4290      	cmp	r0, r2
 80009a0:	f200 812d 	bhi.w	8000bfe <__udivmoddi4+0x2ba>
 80009a4:	4639      	mov	r1, r7
 80009a6:	1a12      	subs	r2, r2, r0
 80009a8:	fa1f fc8c 	uxth.w	ip, ip
 80009ac:	fbb2 f0f6 	udiv	r0, r2, r6
 80009b0:	fb06 2210 	mls	r2, r6, r0, r2
 80009b4:	fb00 f404 	mul.w	r4, r0, r4
 80009b8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80009bc:	4564      	cmp	r4, ip
 80009be:	d908      	bls.n	80009d2 <__udivmoddi4+0x8e>
 80009c0:	eb1e 0c0c 	adds.w	ip, lr, ip
 80009c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80009c8:	d202      	bcs.n	80009d0 <__udivmoddi4+0x8c>
 80009ca:	4564      	cmp	r4, ip
 80009cc:	f200 811a 	bhi.w	8000c04 <__udivmoddi4+0x2c0>
 80009d0:	4610      	mov	r0, r2
 80009d2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009d6:	ebac 0c04 	sub.w	ip, ip, r4
 80009da:	2100      	movs	r1, #0
 80009dc:	b125      	cbz	r5, 80009e8 <__udivmoddi4+0xa4>
 80009de:	fa2c f303 	lsr.w	r3, ip, r3
 80009e2:	2200      	movs	r2, #0
 80009e4:	e9c5 3200 	strd	r3, r2, [r5]
 80009e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009ec:	428b      	cmp	r3, r1
 80009ee:	d905      	bls.n	80009fc <__udivmoddi4+0xb8>
 80009f0:	b10d      	cbz	r5, 80009f6 <__udivmoddi4+0xb2>
 80009f2:	e9c5 0100 	strd	r0, r1, [r5]
 80009f6:	2100      	movs	r1, #0
 80009f8:	4608      	mov	r0, r1
 80009fa:	e7f5      	b.n	80009e8 <__udivmoddi4+0xa4>
 80009fc:	fab3 f183 	clz	r1, r3
 8000a00:	2900      	cmp	r1, #0
 8000a02:	d14d      	bne.n	8000aa0 <__udivmoddi4+0x15c>
 8000a04:	42a3      	cmp	r3, r4
 8000a06:	f0c0 80f2 	bcc.w	8000bee <__udivmoddi4+0x2aa>
 8000a0a:	4290      	cmp	r0, r2
 8000a0c:	f080 80ef 	bcs.w	8000bee <__udivmoddi4+0x2aa>
 8000a10:	4606      	mov	r6, r0
 8000a12:	4623      	mov	r3, r4
 8000a14:	4608      	mov	r0, r1
 8000a16:	2d00      	cmp	r5, #0
 8000a18:	d0e6      	beq.n	80009e8 <__udivmoddi4+0xa4>
 8000a1a:	e9c5 6300 	strd	r6, r3, [r5]
 8000a1e:	e7e3      	b.n	80009e8 <__udivmoddi4+0xa4>
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	f040 80a2 	bne.w	8000b6a <__udivmoddi4+0x226>
 8000a26:	1a8a      	subs	r2, r1, r2
 8000a28:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000a2c:	fa1f f68e 	uxth.w	r6, lr
 8000a30:	2101      	movs	r1, #1
 8000a32:	fbb2 f4f7 	udiv	r4, r2, r7
 8000a36:	fb07 2014 	mls	r0, r7, r4, r2
 8000a3a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000a3e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a42:	fb06 f004 	mul.w	r0, r6, r4
 8000a46:	4290      	cmp	r0, r2
 8000a48:	d90f      	bls.n	8000a6a <__udivmoddi4+0x126>
 8000a4a:	eb1e 0202 	adds.w	r2, lr, r2
 8000a4e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000a52:	bf2c      	ite	cs
 8000a54:	f04f 0901 	movcs.w	r9, #1
 8000a58:	f04f 0900 	movcc.w	r9, #0
 8000a5c:	4290      	cmp	r0, r2
 8000a5e:	d903      	bls.n	8000a68 <__udivmoddi4+0x124>
 8000a60:	f1b9 0f00 	cmp.w	r9, #0
 8000a64:	f000 80c8 	beq.w	8000bf8 <__udivmoddi4+0x2b4>
 8000a68:	4644      	mov	r4, r8
 8000a6a:	1a12      	subs	r2, r2, r0
 8000a6c:	fa1f fc8c 	uxth.w	ip, ip
 8000a70:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a74:	fb07 2210 	mls	r2, r7, r0, r2
 8000a78:	fb00 f606 	mul.w	r6, r0, r6
 8000a7c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000a80:	4566      	cmp	r6, ip
 8000a82:	d908      	bls.n	8000a96 <__udivmoddi4+0x152>
 8000a84:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000a88:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a8c:	d202      	bcs.n	8000a94 <__udivmoddi4+0x150>
 8000a8e:	4566      	cmp	r6, ip
 8000a90:	f200 80bb 	bhi.w	8000c0a <__udivmoddi4+0x2c6>
 8000a94:	4610      	mov	r0, r2
 8000a96:	ebac 0c06 	sub.w	ip, ip, r6
 8000a9a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a9e:	e79d      	b.n	80009dc <__udivmoddi4+0x98>
 8000aa0:	f1c1 0620 	rsb	r6, r1, #32
 8000aa4:	408b      	lsls	r3, r1
 8000aa6:	fa04 fe01 	lsl.w	lr, r4, r1
 8000aaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000aae:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ab2:	40f4      	lsrs	r4, r6
 8000ab4:	408a      	lsls	r2, r1
 8000ab6:	431f      	orrs	r7, r3
 8000ab8:	ea4e 030c 	orr.w	r3, lr, ip
 8000abc:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ac0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ac4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ac8:	fa1f fc87 	uxth.w	ip, r7
 8000acc:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ad0:	fb08 4410 	mls	r4, r8, r0, r4
 8000ad4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ad8:	fb00 f90c 	mul.w	r9, r0, ip
 8000adc:	45a1      	cmp	r9, r4
 8000ade:	d90e      	bls.n	8000afe <__udivmoddi4+0x1ba>
 8000ae0:	193c      	adds	r4, r7, r4
 8000ae2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ae6:	bf2c      	ite	cs
 8000ae8:	f04f 0b01 	movcs.w	fp, #1
 8000aec:	f04f 0b00 	movcc.w	fp, #0
 8000af0:	45a1      	cmp	r9, r4
 8000af2:	d903      	bls.n	8000afc <__udivmoddi4+0x1b8>
 8000af4:	f1bb 0f00 	cmp.w	fp, #0
 8000af8:	f000 8093 	beq.w	8000c22 <__udivmoddi4+0x2de>
 8000afc:	4650      	mov	r0, sl
 8000afe:	eba4 0409 	sub.w	r4, r4, r9
 8000b02:	fa1f f983 	uxth.w	r9, r3
 8000b06:	fbb4 f3f8 	udiv	r3, r4, r8
 8000b0a:	fb08 4413 	mls	r4, r8, r3, r4
 8000b0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b12:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b16:	45a4      	cmp	ip, r4
 8000b18:	d906      	bls.n	8000b28 <__udivmoddi4+0x1e4>
 8000b1a:	193c      	adds	r4, r7, r4
 8000b1c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b20:	d201      	bcs.n	8000b26 <__udivmoddi4+0x1e2>
 8000b22:	45a4      	cmp	ip, r4
 8000b24:	d87a      	bhi.n	8000c1c <__udivmoddi4+0x2d8>
 8000b26:	4643      	mov	r3, r8
 8000b28:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b2c:	eba4 040c 	sub.w	r4, r4, ip
 8000b30:	fba0 9802 	umull	r9, r8, r0, r2
 8000b34:	4544      	cmp	r4, r8
 8000b36:	46cc      	mov	ip, r9
 8000b38:	4643      	mov	r3, r8
 8000b3a:	d302      	bcc.n	8000b42 <__udivmoddi4+0x1fe>
 8000b3c:	d106      	bne.n	8000b4c <__udivmoddi4+0x208>
 8000b3e:	45ce      	cmp	lr, r9
 8000b40:	d204      	bcs.n	8000b4c <__udivmoddi4+0x208>
 8000b42:	3801      	subs	r0, #1
 8000b44:	ebb9 0c02 	subs.w	ip, r9, r2
 8000b48:	eb68 0307 	sbc.w	r3, r8, r7
 8000b4c:	b15d      	cbz	r5, 8000b66 <__udivmoddi4+0x222>
 8000b4e:	ebbe 020c 	subs.w	r2, lr, ip
 8000b52:	eb64 0403 	sbc.w	r4, r4, r3
 8000b56:	fa04 f606 	lsl.w	r6, r4, r6
 8000b5a:	fa22 f301 	lsr.w	r3, r2, r1
 8000b5e:	40cc      	lsrs	r4, r1
 8000b60:	431e      	orrs	r6, r3
 8000b62:	e9c5 6400 	strd	r6, r4, [r5]
 8000b66:	2100      	movs	r1, #0
 8000b68:	e73e      	b.n	80009e8 <__udivmoddi4+0xa4>
 8000b6a:	fa02 fe03 	lsl.w	lr, r2, r3
 8000b6e:	f1c3 0120 	rsb	r1, r3, #32
 8000b72:	fa04 f203 	lsl.w	r2, r4, r3
 8000b76:	fa00 fc03 	lsl.w	ip, r0, r3
 8000b7a:	40cc      	lsrs	r4, r1
 8000b7c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000b80:	fa20 f101 	lsr.w	r1, r0, r1
 8000b84:	fa1f f68e 	uxth.w	r6, lr
 8000b88:	fbb4 f0f7 	udiv	r0, r4, r7
 8000b8c:	430a      	orrs	r2, r1
 8000b8e:	fb07 4410 	mls	r4, r7, r0, r4
 8000b92:	0c11      	lsrs	r1, r2, #16
 8000b94:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000b98:	fb00 f406 	mul.w	r4, r0, r6
 8000b9c:	428c      	cmp	r4, r1
 8000b9e:	d90e      	bls.n	8000bbe <__udivmoddi4+0x27a>
 8000ba0:	eb1e 0101 	adds.w	r1, lr, r1
 8000ba4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ba8:	bf2c      	ite	cs
 8000baa:	f04f 0901 	movcs.w	r9, #1
 8000bae:	f04f 0900 	movcc.w	r9, #0
 8000bb2:	428c      	cmp	r4, r1
 8000bb4:	d902      	bls.n	8000bbc <__udivmoddi4+0x278>
 8000bb6:	f1b9 0f00 	cmp.w	r9, #0
 8000bba:	d02c      	beq.n	8000c16 <__udivmoddi4+0x2d2>
 8000bbc:	4640      	mov	r0, r8
 8000bbe:	1b09      	subs	r1, r1, r4
 8000bc0:	b292      	uxth	r2, r2
 8000bc2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000bca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bce:	fb04 f106 	mul.w	r1, r4, r6
 8000bd2:	4291      	cmp	r1, r2
 8000bd4:	d907      	bls.n	8000be6 <__udivmoddi4+0x2a2>
 8000bd6:	eb1e 0202 	adds.w	r2, lr, r2
 8000bda:	f104 38ff 	add.w	r8, r4, #4294967295
 8000bde:	d201      	bcs.n	8000be4 <__udivmoddi4+0x2a0>
 8000be0:	4291      	cmp	r1, r2
 8000be2:	d815      	bhi.n	8000c10 <__udivmoddi4+0x2cc>
 8000be4:	4644      	mov	r4, r8
 8000be6:	1a52      	subs	r2, r2, r1
 8000be8:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000bec:	e721      	b.n	8000a32 <__udivmoddi4+0xee>
 8000bee:	1a86      	subs	r6, r0, r2
 8000bf0:	eb64 0303 	sbc.w	r3, r4, r3
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	e70e      	b.n	8000a16 <__udivmoddi4+0xd2>
 8000bf8:	3c02      	subs	r4, #2
 8000bfa:	4472      	add	r2, lr
 8000bfc:	e735      	b.n	8000a6a <__udivmoddi4+0x126>
 8000bfe:	3902      	subs	r1, #2
 8000c00:	4472      	add	r2, lr
 8000c02:	e6d0      	b.n	80009a6 <__udivmoddi4+0x62>
 8000c04:	44f4      	add	ip, lr
 8000c06:	3802      	subs	r0, #2
 8000c08:	e6e3      	b.n	80009d2 <__udivmoddi4+0x8e>
 8000c0a:	44f4      	add	ip, lr
 8000c0c:	3802      	subs	r0, #2
 8000c0e:	e742      	b.n	8000a96 <__udivmoddi4+0x152>
 8000c10:	3c02      	subs	r4, #2
 8000c12:	4472      	add	r2, lr
 8000c14:	e7e7      	b.n	8000be6 <__udivmoddi4+0x2a2>
 8000c16:	3802      	subs	r0, #2
 8000c18:	4471      	add	r1, lr
 8000c1a:	e7d0      	b.n	8000bbe <__udivmoddi4+0x27a>
 8000c1c:	3b02      	subs	r3, #2
 8000c1e:	443c      	add	r4, r7
 8000c20:	e782      	b.n	8000b28 <__udivmoddi4+0x1e4>
 8000c22:	3802      	subs	r0, #2
 8000c24:	443c      	add	r4, r7
 8000c26:	e76a      	b.n	8000afe <__udivmoddi4+0x1ba>

08000c28 <__aeabi_idiv0>:
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000c32:	4b30      	ldr	r3, [pc, #192]	@ (8000cf4 <MX_FDCAN1_Init+0xc8>)
 8000c34:	4a30      	ldr	r2, [pc, #192]	@ (8000cf8 <MX_FDCAN1_Init+0xcc>)
 8000c36:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000c38:	4b2e      	ldr	r3, [pc, #184]	@ (8000cf4 <MX_FDCAN1_Init+0xc8>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000c3e:	4b2d      	ldr	r3, [pc, #180]	@ (8000cf4 <MX_FDCAN1_Init+0xc8>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000c44:	4b2b      	ldr	r3, [pc, #172]	@ (8000cf4 <MX_FDCAN1_Init+0xc8>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000c4a:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf4 <MX_FDCAN1_Init+0xc8>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000c50:	4b28      	ldr	r3, [pc, #160]	@ (8000cf4 <MX_FDCAN1_Init+0xc8>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000c56:	4b27      	ldr	r3, [pc, #156]	@ (8000cf4 <MX_FDCAN1_Init+0xc8>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000c5c:	4b25      	ldr	r3, [pc, #148]	@ (8000cf4 <MX_FDCAN1_Init+0xc8>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000c62:	4b24      	ldr	r3, [pc, #144]	@ (8000cf4 <MX_FDCAN1_Init+0xc8>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 11;
 8000c68:	4b22      	ldr	r3, [pc, #136]	@ (8000cf4 <MX_FDCAN1_Init+0xc8>)
 8000c6a:	220b      	movs	r2, #11
 8000c6c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 8000c6e:	4b21      	ldr	r3, [pc, #132]	@ (8000cf4 <MX_FDCAN1_Init+0xc8>)
 8000c70:	2204      	movs	r2, #4
 8000c72:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000c74:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf4 <MX_FDCAN1_Init+0xc8>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf4 <MX_FDCAN1_Init+0xc8>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000c80:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf4 <MX_FDCAN1_Init+0xc8>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000c86:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf4 <MX_FDCAN1_Init+0xc8>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000c8c:	4b19      	ldr	r3, [pc, #100]	@ (8000cf4 <MX_FDCAN1_Init+0xc8>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000c92:	4b18      	ldr	r3, [pc, #96]	@ (8000cf4 <MX_FDCAN1_Init+0xc8>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c98:	4b16      	ldr	r3, [pc, #88]	@ (8000cf4 <MX_FDCAN1_Init+0xc8>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000c9e:	4815      	ldr	r0, [pc, #84]	@ (8000cf4 <MX_FDCAN1_Init+0xc8>)
 8000ca0:	f002 f9f8 	bl	8003094 <HAL_FDCAN_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000caa:	f000 fc3d 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterIndex = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x316;
 8000cba:	f240 3316 	movw	r3, #790	@ 0x316
 8000cbe:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x1FFFFFFF;
 8000cc0:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8000cc4:	617b      	str	r3, [r7, #20]

	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000cc6:	463b      	mov	r3, r7
 8000cc8:	4619      	mov	r1, r3
 8000cca:	480a      	ldr	r0, [pc, #40]	@ (8000cf4 <MX_FDCAN1_Init+0xc8>)
 8000ccc:	f002 fb3c 	bl	8003348 <HAL_FDCAN_ConfigFilter>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d002      	beq.n	8000cdc <MX_FDCAN1_Init+0xb0>
	/* Filter configuration Error */
		printf("[CAN] Unable to configure!\n");
 8000cd6:	4809      	ldr	r0, [pc, #36]	@ (8000cfc <MX_FDCAN1_Init+0xd0>)
 8000cd8:	f00a fb28 	bl	800b32c <puts>
	}
	if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 8000cdc:	4805      	ldr	r0, [pc, #20]	@ (8000cf4 <MX_FDCAN1_Init+0xc8>)
 8000cde:	f002 fb8d 	bl	80033fc <HAL_FDCAN_Start>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_FDCAN1_Init+0xc0>
	{
		Error_Handler();
 8000ce8:	f000 fc1e 	bl	8001528 <Error_Handler>
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8000cec:	bf00      	nop
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000084 	.word	0x20000084
 8000cf8:	4000a400 	.word	0x4000a400
 8000cfc:	0800ba6c 	.word	0x0800ba6c

08000d00 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b0be      	sub	sp, #248	@ 0xf8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d18:	f107 0310 	add.w	r3, r7, #16
 8000d1c:	22d0      	movs	r2, #208	@ 0xd0
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f00a fbe3 	bl	800b4ec <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a2f      	ldr	r2, [pc, #188]	@ (8000de8 <HAL_FDCAN_MspInit+0xe8>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d156      	bne.n	8000dde <HAL_FDCAN_MspInit+0xde>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000d30:	f04f 0200 	mov.w	r2, #0
 8000d34:	f04f 0304 	mov.w	r3, #4
 8000d38:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d42:	f107 0310 	add.w	r3, r7, #16
 8000d46:	4618      	mov	r0, r3
 8000d48:	f003 ff7c 	bl	8004c44 <HAL_RCCEx_PeriphCLKConfig>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8000d52:	f000 fbe9 	bl	8001528 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000d56:	4b25      	ldr	r3, [pc, #148]	@ (8000dec <HAL_FDCAN_MspInit+0xec>)
 8000d58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000d5c:	4a23      	ldr	r2, [pc, #140]	@ (8000dec <HAL_FDCAN_MspInit+0xec>)
 8000d5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d62:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8000d66:	4b21      	ldr	r3, [pc, #132]	@ (8000dec <HAL_FDCAN_MspInit+0xec>)
 8000d68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000d6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d74:	4b1d      	ldr	r3, [pc, #116]	@ (8000dec <HAL_FDCAN_MspInit+0xec>)
 8000d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d7a:	4a1c      	ldr	r2, [pc, #112]	@ (8000dec <HAL_FDCAN_MspInit+0xec>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d84:	4b19      	ldr	r3, [pc, #100]	@ (8000dec <HAL_FDCAN_MspInit+0xec>)
 8000d86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d92:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000d96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000dac:	2309      	movs	r3, #9
 8000dae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000db6:	4619      	mov	r1, r3
 8000db8:	480d      	ldr	r0, [pc, #52]	@ (8000df0 <HAL_FDCAN_MspInit+0xf0>)
 8000dba:	f002 fe15 	bl	80039e8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2027      	movs	r0, #39	@ 0x27
 8000dc4:	f001 f952 	bl	800206c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000dc8:	2027      	movs	r0, #39	@ 0x27
 8000dca:	f001 f969 	bl	80020a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2028      	movs	r0, #40	@ 0x28
 8000dd4:	f001 f94a 	bl	800206c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000dd8:	2028      	movs	r0, #40	@ 0x28
 8000dda:	f001 f961 	bl	80020a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000dde:	bf00      	nop
 8000de0:	37f8      	adds	r7, #248	@ 0xf8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	4000a400 	.word	0x4000a400
 8000dec:	44020c00 	.word	0x44020c00
 8000df0:	42020000 	.word	0x42020000

08000df4 <MX_GPDMA1_Init>:

/* USER CODE END 0 */

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000e30 <MX_GPDMA1_Init+0x3c>)
 8000dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e00:	4a0b      	ldr	r2, [pc, #44]	@ (8000e30 <MX_GPDMA1_Init+0x3c>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000e0a:	4b09      	ldr	r3, [pc, #36]	@ (8000e30 <MX_GPDMA1_Init+0x3c>)
 8000e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	201b      	movs	r0, #27
 8000e1e:	f001 f925 	bl	800206c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000e22:	201b      	movs	r0, #27
 8000e24:	f001 f93c 	bl	80020a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	44020c00 	.word	0x44020c00

08000e34 <MX_GPIO_Init>:
     PH1-OSC_OUT(PH1)   ------> RCC_OSC_OUT
     PA13(JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14(JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3a:	f107 030c 	add.w	r3, r7, #12
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
 8000e48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e4a:	4b2c      	ldr	r3, [pc, #176]	@ (8000efc <MX_GPIO_Init+0xc8>)
 8000e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e50:	4a2a      	ldr	r2, [pc, #168]	@ (8000efc <MX_GPIO_Init+0xc8>)
 8000e52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e56:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e5a:	4b28      	ldr	r3, [pc, #160]	@ (8000efc <MX_GPIO_Init+0xc8>)
 8000e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e68:	4b24      	ldr	r3, [pc, #144]	@ (8000efc <MX_GPIO_Init+0xc8>)
 8000e6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e6e:	4a23      	ldr	r2, [pc, #140]	@ (8000efc <MX_GPIO_Init+0xc8>)
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e78:	4b20      	ldr	r3, [pc, #128]	@ (8000efc <MX_GPIO_Init+0xc8>)
 8000e7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	4b1d      	ldr	r3, [pc, #116]	@ (8000efc <MX_GPIO_Init+0xc8>)
 8000e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000efc <MX_GPIO_Init+0xc8>)
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e96:	4b19      	ldr	r3, [pc, #100]	@ (8000efc <MX_GPIO_Init+0xc8>)
 8000e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000eaa:	4815      	ldr	r0, [pc, #84]	@ (8000f00 <MX_GPIO_Init+0xcc>)
 8000eac:	f002 feee 	bl	8003c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D2_Pin|D1_Pin, GPIO_PIN_RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2118      	movs	r1, #24
 8000eb4:	4813      	ldr	r0, [pc, #76]	@ (8000f04 <MX_GPIO_Init+0xd0>)
 8000eb6:	f002 fee9 	bl	8003c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : D3_Pin */
  GPIO_InitStruct.Pin = D3_Pin;
 8000eba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ebe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(D3_GPIO_Port, &GPIO_InitStruct);
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	480b      	ldr	r0, [pc, #44]	@ (8000f00 <MX_GPIO_Init+0xcc>)
 8000ed4:	f002 fd88 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_Pin D1_Pin */
  GPIO_InitStruct.Pin = D2_Pin|D1_Pin;
 8000ed8:	2318      	movs	r3, #24
 8000eda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000edc:	2301      	movs	r3, #1
 8000ede:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	4619      	mov	r1, r3
 8000eee:	4805      	ldr	r0, [pc, #20]	@ (8000f04 <MX_GPIO_Init+0xd0>)
 8000ef0:	f002 fd7a 	bl	80039e8 <HAL_GPIO_Init>

}
 8000ef4:	bf00      	nop
 8000ef6:	3720      	adds	r7, #32
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	44020c00 	.word	0x44020c00
 8000f00:	42020000 	.word	0x42020000
 8000f04:	42020400 	.word	0x42020400

08000f08 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f002 feef 	bl	8003cf0 <HAL_ICACHE_ConfigAssociativityMode>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000f18:	f000 fb06 	bl	8001528 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000f1c:	f002 ff08 	bl	8003d30 <HAL_ICACHE_Enable>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000f26:	f000 faff 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <ESP32_SendCommand>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ESP32_SendCommand(const char* command) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff f9ad 	bl	8000298 <strlen>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	4808      	ldr	r0, [pc, #32]	@ (8000f6c <ESP32_SendCommand+0x3c>)
 8000f4a:	f008 fd91 	bl	8009a70 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);  // Końcówka komendy AT
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f52:	2202      	movs	r2, #2
 8000f54:	4906      	ldr	r1, [pc, #24]	@ (8000f70 <ESP32_SendCommand+0x40>)
 8000f56:	4805      	ldr	r0, [pc, #20]	@ (8000f6c <ESP32_SendCommand+0x3c>)
 8000f58:	f008 fd8a 	bl	8009a70 <HAL_UART_Transmit>
    HAL_Delay(100);  // Czekaj na odpowiedź
 8000f5c:	2064      	movs	r0, #100	@ 0x64
 8000f5e:	f000 ffa9 	bl	8001eb4 <HAL_Delay>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000284 	.word	0x20000284
 8000f70:	0800ba88 	.word	0x0800ba88

08000f74 <parse_frame>:

void parse_frame(uint8_t *buffer) {
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

    HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);  // Diagnostyka
 8000f7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f80:	486a      	ldr	r0, [pc, #424]	@ (800112c <parse_frame+0x1b8>)
 8000f82:	f002 fe9b 	bl	8003cbc <HAL_GPIO_TogglePin>

    // Parsowanie danych z FrameBuffer do struktury FrameData
    uint8_t offset = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.time, &buffer[offset], sizeof(frame.time));
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	4413      	add	r3, r2
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	4b66      	ldr	r3, [pc, #408]	@ (8001130 <parse_frame+0x1bc>)
 8000f96:	601a      	str	r2, [r3, #0]
    offset += sizeof(frame.time);
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	3304      	adds	r3, #4
 8000f9c:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.car, &buffer[offset], sizeof(frame.car));
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4b61      	ldr	r3, [pc, #388]	@ (8001130 <parse_frame+0x1bc>)
 8000faa:	605a      	str	r2, [r3, #4]
    offset += sizeof(frame.car);
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	3304      	adds	r3, #4
 8000fb0:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.flags, &buffer[offset], sizeof(frame.flags));
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	4b5c      	ldr	r3, [pc, #368]	@ (8001130 <parse_frame+0x1bc>)
 8000fbe:	811a      	strh	r2, [r3, #8]
    offset += sizeof(frame.flags);
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	3302      	adds	r3, #2
 8000fc4:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.gear, &buffer[offset], sizeof(frame.gear));
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	4413      	add	r3, r2
 8000fcc:	781a      	ldrb	r2, [r3, #0]
 8000fce:	4b58      	ldr	r3, [pc, #352]	@ (8001130 <parse_frame+0x1bc>)
 8000fd0:	729a      	strb	r2, [r3, #10]
    offset += sizeof(frame.gear);
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.plid, &buffer[offset], sizeof(frame.plid));
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	781a      	ldrb	r2, [r3, #0]
 8000fe0:	4b53      	ldr	r3, [pc, #332]	@ (8001130 <parse_frame+0x1bc>)
 8000fe2:	72da      	strb	r2, [r3, #11]
    offset += sizeof(frame.plid);
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.speed, &buffer[offset], sizeof(frame.speed));
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	4413      	add	r3, r2
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	4b4e      	ldr	r3, [pc, #312]	@ (8001130 <parse_frame+0x1bc>)
 8000ff6:	60da      	str	r2, [r3, #12]
    offset += sizeof(frame.speed);
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	3304      	adds	r3, #4
 8000ffc:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.rpm, &buffer[offset], sizeof(frame.rpm));
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	4413      	add	r3, r2
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	4b49      	ldr	r3, [pc, #292]	@ (8001130 <parse_frame+0x1bc>)
 800100a:	611a      	str	r2, [r3, #16]
    offset += sizeof(frame.rpm);
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	3304      	adds	r3, #4
 8001010:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.turbo, &buffer[offset], sizeof(frame.turbo));
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	4413      	add	r3, r2
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	4b44      	ldr	r3, [pc, #272]	@ (8001130 <parse_frame+0x1bc>)
 800101e:	615a      	str	r2, [r3, #20]
    offset += sizeof(frame.turbo);
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	3304      	adds	r3, #4
 8001024:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.engTemp, &buffer[offset], sizeof(frame.engTemp));
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	4413      	add	r3, r2
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	461a      	mov	r2, r3
 8001030:	4b3f      	ldr	r3, [pc, #252]	@ (8001130 <parse_frame+0x1bc>)
 8001032:	619a      	str	r2, [r3, #24]
    offset += sizeof(frame.engTemp);
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	3304      	adds	r3, #4
 8001038:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.fuel, &buffer[offset], sizeof(frame.fuel));
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	4413      	add	r3, r2
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	4b3a      	ldr	r3, [pc, #232]	@ (8001130 <parse_frame+0x1bc>)
 8001046:	61da      	str	r2, [r3, #28]
    offset += sizeof(frame.fuel);
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	3304      	adds	r3, #4
 800104c:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.oilPressure, &buffer[offset], sizeof(frame.oilPressure));
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	4413      	add	r3, r2
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	4b35      	ldr	r3, [pc, #212]	@ (8001130 <parse_frame+0x1bc>)
 800105a:	621a      	str	r2, [r3, #32]
    offset += sizeof(frame.oilPressure);
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	3304      	adds	r3, #4
 8001060:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.oilTemp, &buffer[offset], sizeof(frame.oilTemp));
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	4413      	add	r3, r2
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	4b30      	ldr	r3, [pc, #192]	@ (8001130 <parse_frame+0x1bc>)
 800106e:	625a      	str	r2, [r3, #36]	@ 0x24
    offset += sizeof(frame.oilTemp);
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	3304      	adds	r3, #4
 8001074:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.dashLights, &buffer[offset], sizeof(frame.dashLights));
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	4413      	add	r3, r2
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	4b2b      	ldr	r3, [pc, #172]	@ (8001130 <parse_frame+0x1bc>)
 8001082:	629a      	str	r2, [r3, #40]	@ 0x28
    offset += sizeof(frame.dashLights);
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	3304      	adds	r3, #4
 8001088:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.showLights, &buffer[offset], sizeof(frame.showLights));
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	4413      	add	r3, r2
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	4b26      	ldr	r3, [pc, #152]	@ (8001130 <parse_frame+0x1bc>)
 8001096:	62da      	str	r2, [r3, #44]	@ 0x2c
    offset += sizeof(frame.showLights);
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	3304      	adds	r3, #4
 800109c:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.throttle, &buffer[offset], sizeof(frame.throttle));
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	4413      	add	r3, r2
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b21      	ldr	r3, [pc, #132]	@ (8001130 <parse_frame+0x1bc>)
 80010aa:	631a      	str	r2, [r3, #48]	@ 0x30
    offset += sizeof(frame.throttle);
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	3304      	adds	r3, #4
 80010b0:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.brake, &buffer[offset], sizeof(frame.brake));
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	4413      	add	r3, r2
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001130 <parse_frame+0x1bc>)
 80010be:	635a      	str	r2, [r3, #52]	@ 0x34
    offset += sizeof(frame.brake);
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	3304      	adds	r3, #4
 80010c4:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.clutch, &buffer[offset], sizeof(frame.clutch));
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	4413      	add	r3, r2
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	461a      	mov	r2, r3
 80010d0:	4b17      	ldr	r3, [pc, #92]	@ (8001130 <parse_frame+0x1bc>)
 80010d2:	639a      	str	r2, [r3, #56]	@ 0x38
    offset += sizeof(frame.clutch);
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	3304      	adds	r3, #4
 80010d8:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.display1, &buffer[offset], sizeof(frame.display1));
 80010da:	7bfb      	ldrb	r3, [r7, #15]
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	441a      	add	r2, r3
 80010e0:	4b13      	ldr	r3, [pc, #76]	@ (8001130 <parse_frame+0x1bc>)
 80010e2:	f103 043c 	add.w	r4, r3, #60	@ 0x3c
 80010e6:	4613      	mov	r3, r2
 80010e8:	6818      	ldr	r0, [r3, #0]
 80010ea:	6859      	ldr	r1, [r3, #4]
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    offset += sizeof(frame.display1);
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	3310      	adds	r3, #16
 80010f6:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.display2, &buffer[offset], sizeof(frame.display2));
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	441a      	add	r2, r3
 80010fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <parse_frame+0x1bc>)
 8001100:	f103 044c 	add.w	r4, r3, #76	@ 0x4c
 8001104:	4613      	mov	r3, r2
 8001106:	6818      	ldr	r0, [r3, #0]
 8001108:	6859      	ldr	r1, [r3, #4]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    offset += sizeof(frame.display2);
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	3310      	adds	r3, #16
 8001114:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.id, &buffer[offset], sizeof(frame.id));
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	4413      	add	r3, r2
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	4b03      	ldr	r3, [pc, #12]	@ (8001130 <parse_frame+0x1bc>)
 8001122:	65da      	str	r2, [r3, #92]	@ 0x5c

    // W tym miejscu masz już poprawnie wypełnioną strukturę `frame`
}
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	bd90      	pop	{r4, r7, pc}
 800112c:	42020000 	.word	0x42020000
 8001130:	200001cc 	.word	0x200001cc

08001134 <process_frame>:
void process_frame(void) {
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
    if (frameReady) {
 8001138:	4b05      	ldr	r3, [pc, #20]	@ (8001150 <process_frame+0x1c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d005      	beq.n	800114c <process_frame+0x18>
        parse_frame(FrameBuffer);
 8001140:	4804      	ldr	r0, [pc, #16]	@ (8001154 <process_frame+0x20>)
 8001142:	f7ff ff17 	bl	8000f74 <parse_frame>
        frameReady = false;
 8001146:	4b02      	ldr	r3, [pc, #8]	@ (8001150 <process_frame+0x1c>)
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
    }
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	200001ca 	.word	0x200001ca
 8001154:	20000168 	.word	0x20000168

08001158 <Set_PWM_Frequency>:
void Set_PWM_Frequency(uint16_t speed_kmh) {
 8001158:	b480      	push	{r7}
 800115a:	b087      	sub	sp, #28
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	80fb      	strh	r3, [r7, #6]
    uint32_t freq = MIN_FREQ + ((MAX_FREQ - MIN_FREQ) * speed_kmh) / MAX_SPEED;
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	f44f 62d7 	mov.w	r2, #1720	@ 0x6b8
 8001168:	fb02 f303 	mul.w	r3, r2, r3
 800116c:	4a22      	ldr	r2, [pc, #136]	@ (80011f8 <Set_PWM_Frequency+0xa0>)
 800116e:	fb82 1203 	smull	r1, r2, r2, r3
 8001172:	441a      	add	r2, r3
 8001174:	1212      	asrs	r2, r2, #8
 8001176:	17db      	asrs	r3, r3, #31
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	3332      	adds	r3, #50	@ 0x32
 800117c:	60fb      	str	r3, [r7, #12]

    uint32_t arr_value, psc_value;

    if (freq < 3800) {
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f640 62d7 	movw	r2, #3799	@ 0xed7
 8001184:	4293      	cmp	r3, r2
 8001186:	d817      	bhi.n	80011b8 <Set_PWM_Frequency+0x60>
        psc_value = (250000000 / (65536 * freq));
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	041b      	lsls	r3, r3, #16
 800118c:	4a1b      	ldr	r2, [pc, #108]	@ (80011fc <Set_PWM_Frequency+0xa4>)
 800118e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001192:	613b      	str	r3, [r7, #16]
        if (psc_value > 65535) psc_value = 65535;  // PSC nie może przekroczyć 16 bitów
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800119a:	d302      	bcc.n	80011a2 <Set_PWM_Frequency+0x4a>
 800119c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011a0:	613b      	str	r3, [r7, #16]
        arr_value = (250000000 / ((psc_value + 1) * freq)) - 1;
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	3301      	adds	r3, #1
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	fb02 f303 	mul.w	r3, r2, r3
 80011ac:	4a13      	ldr	r2, [pc, #76]	@ (80011fc <Set_PWM_Frequency+0xa4>)
 80011ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b2:	3b01      	subs	r3, #1
 80011b4:	617b      	str	r3, [r7, #20]
 80011b6:	e007      	b.n	80011c8 <Set_PWM_Frequency+0x70>
    } else {
        psc_value = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	613b      	str	r3, [r7, #16]
        arr_value = (250000000 / freq) - 1;
 80011bc:	4a0f      	ldr	r2, [pc, #60]	@ (80011fc <Set_PWM_Frequency+0xa4>)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c4:	3b01      	subs	r3, #1
 80011c6:	617b      	str	r3, [r7, #20]
    }

    if (arr_value > 65535) arr_value = 65535;  // Ograniczenie ARR do 16 bitów
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011ce:	d302      	bcc.n	80011d6 <Set_PWM_Frequency+0x7e>
 80011d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011d4:	617b      	str	r3, [r7, #20]
    //printf("Speed: %d km/h, Freq: %lu Hz, PSC: %lu, ARR: %lu\n", speed_kmh, freq, psc_value, arr_value);

    __HAL_TIM_SET_PRESCALER(&htim1, psc_value);
 80011d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001200 <Set_PWM_Frequency+0xa8>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_TIM_SET_AUTORELOAD(&htim1, arr_value);
 80011de:	4b08      	ldr	r3, [pc, #32]	@ (8001200 <Set_PWM_Frequency+0xa8>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80011e6:	4a06      	ldr	r2, [pc, #24]	@ (8001200 <Set_PWM_Frequency+0xa8>)
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	60d3      	str	r3, [r2, #12]
    //__HAL_TIM_SET_COUNTER(&htim1, 0);

}
 80011ec:	bf00      	nop
 80011ee:	371c      	adds	r7, #28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	f2b9d649 	.word	0xf2b9d649
 80011fc:	0ee6b280 	.word	0x0ee6b280
 8001200:	20000238 	.word	0x20000238
 8001204:	00000000 	.word	0x00000000

08001208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08c      	sub	sp, #48	@ 0x30
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800120e:	f000 fd93 	bl	8001d38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001212:	f000 f8a1 	bl	8001358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001216:	f7ff fe0d 	bl	8000e34 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 800121a:	f7ff fdeb 	bl	8000df4 <MX_GPDMA1_Init>
  MX_USART1_UART_Init();
 800121e:	f000 fc5d 	bl	8001adc <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001222:	f000 fb2d 	bl	8001880 <MX_TIM1_Init>
  MX_ICACHE_Init();
 8001226:	f7ff fe6f 	bl	8000f08 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800122a:	2104      	movs	r1, #4
 800122c:	4840      	ldr	r0, [pc, #256]	@ (8001330 <main+0x128>)
 800122e:	f007 f845 	bl	80082bc <HAL_TIM_PWM_Start>
  ESP32_SendCommand("AT+RST");  // Resetuj ESP32
 8001232:	4840      	ldr	r0, [pc, #256]	@ (8001334 <main+0x12c>)
 8001234:	f7ff fe7c 	bl	8000f30 <ESP32_SendCommand>
 // HAL_Delay(1000);
 // ESP32_SendCommand("AT+CWMODE=1");  // Ustaw tryb stacji (klient Wi-Fi)
 // HAL_Delay(1000);
 // ESP32_SendCommand("AT+CWJAP=\"PLAY_Swiatlowod_19A1\",\"t8Xv9auf7Z#D\"");  // Połącz z Wi-Fi
  HAL_Delay(5000);
 8001238:	f241 3088 	movw	r0, #5000	@ 0x1388
 800123c:	f000 fe3a 	bl	8001eb4 <HAL_Delay>
  ESP32_SendCommand("AT+CIPSTART=\"UDP\",\"0.0.0.0\",12345,12345,2");  // Ustaw tryb UDP
 8001240:	483d      	ldr	r0, [pc, #244]	@ (8001338 <main+0x130>)
 8001242:	f7ff fe75 	bl	8000f30 <ESP32_SendCommand>
  HAL_Delay(1000);
 8001246:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800124a:	f000 fe33 	bl	8001eb4 <HAL_Delay>
  HAL_UART_Receive_DMA(&huart1, UartBuffer, 1);
 800124e:	2201      	movs	r2, #1
 8001250:	493a      	ldr	r1, [pc, #232]	@ (800133c <main+0x134>)
 8001252:	483b      	ldr	r0, [pc, #236]	@ (8001340 <main+0x138>)
 8001254:	f008 fcaa 	bl	8009bac <HAL_UART_Receive_DMA>
  MX_FDCAN1_Init();
 8001258:	f7ff fce8 	bl	8000c2c <MX_FDCAN1_Init>
  FDCAN_TxHeaderTypeDef TxHeader_DME1;
  uint8_t               TxData_DME1[8]= {0xff, 0xff, 0xff, 0x1e, 0x55, 0x66, 0x77, 0x88};
 800125c:	4a39      	ldr	r2, [pc, #228]	@ (8001344 <main+0x13c>)
 800125e:	463b      	mov	r3, r7
 8001260:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001264:	e883 0003 	stmia.w	r3, {r0, r1}

	 TxData_DME1[0] = 0x19 ;                     // LV_SWI_IGK=1, LV_F_N_ENG=0, LV_ACK_TCS=0, LV_ERR_GC=1, SF_TQD=1
 8001268:	2319      	movs	r3, #25
 800126a:	703b      	strb	r3, [r7, #0]
	 TxData_DME1[1] = 0x4C;      // TQI_TQR_CAN = 75%
 800126c:	234c      	movs	r3, #76	@ 0x4c
 800126e:	707b      	strb	r3, [r7, #1]
	 uint16_t engineSpeed = (uint16_t)(3000 / 0.15625);
 8001270:	f44f 4396 	mov.w	r3, #19200	@ 0x4b00
 8001274:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	 TxData_DME1[2] = 0xD0; // N_ENG LSB
 8001276:	23d0      	movs	r3, #208	@ 0xd0
 8001278:	70bb      	strb	r3, [r7, #2]
	 TxData_DME1[3] = (uint8_t)(engineSpeed >> 8);   // N_ENG MSB
 800127a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800127c:	0a1b      	lsrs	r3, r3, #8
 800127e:	b29b      	uxth	r3, r3
 8001280:	b2db      	uxtb	r3, r3
 8001282:	70fb      	strb	r3, [r7, #3]
	 TxData_DME1[4] = (uint8_t)(60 / 0.390625);      // TQI_CAN = 60%
 8001284:	2399      	movs	r3, #153	@ 0x99
 8001286:	713b      	strb	r3, [r7, #4]
	 TxData_DME1[5] = (uint8_t)(5 / 0.390625);       // TQ_LOSS_CAN = 5%
 8001288:	230c      	movs	r3, #12
 800128a:	717b      	strb	r3, [r7, #5]
	 TxData_DME1[6] = 0b11000000;                   // ERR_AMT_CAN bits
 800128c:	23c0      	movs	r3, #192	@ 0xc0
 800128e:	71bb      	strb	r3, [r7, #6]
	 TxData_DME1[7] = (uint8_t)(80 / 0.390625);      // TQI_MAF_CAN = 80%
 8001290:	23cc      	movs	r3, #204	@ 0xcc
 8001292:	71fb      	strb	r3, [r7, #7]

	TxHeader_DME1.Identifier = 0x316;  // ID ramki
 8001294:	f240 3316 	movw	r3, #790	@ 0x316
 8001298:	60bb      	str	r3, [r7, #8]
	TxHeader_DME1.IdType = FDCAN_STANDARD_ID;
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
	TxHeader_DME1.TxFrameType = FDCAN_DATA_FRAME;
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
	TxHeader_DME1.DataLength = FDCAN_DLC_BYTES_8;
 80012a2:	2308      	movs	r3, #8
 80012a4:	617b      	str	r3, [r7, #20]
	TxHeader_DME1.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61bb      	str	r3, [r7, #24]
	TxHeader_DME1.BitRateSwitch = FDCAN_BRS_OFF;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
	TxHeader_DME1.FDFormat = FDCAN_CLASSIC_CAN;
 80012ae:	2300      	movs	r3, #0
 80012b0:	623b      	str	r3, [r7, #32]
	TxHeader_DME1.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80012b2:	2300      	movs	r3, #0
 80012b4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 // process_frame();
	 speed = frame.speed * 3.6;
 80012b6:	4b24      	ldr	r3, [pc, #144]	@ (8001348 <main+0x140>)
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fa82 	bl	80007c4 <__aeabi_f2d>
 80012c0:	a319      	add	r3, pc, #100	@ (adr r3, 8001328 <main+0x120>)
 80012c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c6:	f7fe ffef 	bl	80002a8 <__aeabi_dmul>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4610      	mov	r0, r2
 80012d0:	4619      	mov	r1, r3
 80012d2:	f7ff facf 	bl	8000874 <__aeabi_d2f>
 80012d6:	4603      	mov	r3, r0
 80012d8:	4a1c      	ldr	r2, [pc, #112]	@ (800134c <main+0x144>)
 80012da:	6013      	str	r3, [r2, #0]
     Set_PWM_Frequency(speed);
 80012dc:	4b1b      	ldr	r3, [pc, #108]	@ (800134c <main+0x144>)
 80012de:	edd3 7a00 	vldr	s15, [r3]
 80012e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012e6:	ee17 3a90 	vmov	r3, s15
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff33 	bl	8001158 <Set_PWM_Frequency>

    /* USER CODE END WHILE */
     if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 80012f2:	4817      	ldr	r0, [pc, #92]	@ (8001350 <main+0x148>)
 80012f4:	f002 f8ee 	bl	80034d4 <HAL_FDCAN_GetTxFifoFreeLevel>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00e      	beq.n	800131c <main+0x114>
     	      if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_DME1, TxData_DME1) != HAL_OK) {
 80012fe:	463a      	mov	r2, r7
 8001300:	f107 0308 	add.w	r3, r7, #8
 8001304:	4619      	mov	r1, r3
 8001306:	4812      	ldr	r0, [pc, #72]	@ (8001350 <main+0x148>)
 8001308:	f002 f8a0 	bl	800344c <HAL_FDCAN_AddMessageToTxFifoQ>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d004      	beq.n	800131c <main+0x114>
     	          printf("Błąd wysyłania wiadomości\n");
 8001312:	4810      	ldr	r0, [pc, #64]	@ (8001354 <main+0x14c>)
 8001314:	f00a f80a 	bl	800b32c <puts>
     	          Error_Handler();
 8001318:	f000 f906 	bl	8001528 <Error_Handler>
     	      }
     	  } else {
     	 // printf("Bufor nadawczy pełny, nie można dodać wiadomości\n");
     	  }
HAL_Delay(10);
 800131c:	200a      	movs	r0, #10
 800131e:	f000 fdc9 	bl	8001eb4 <HAL_Delay>
	 speed = frame.speed * 3.6;
 8001322:	e7c8      	b.n	80012b6 <main+0xae>
 8001324:	f3af 8000 	nop.w
 8001328:	cccccccd 	.word	0xcccccccd
 800132c:	400ccccc 	.word	0x400ccccc
 8001330:	20000238 	.word	0x20000238
 8001334:	0800ba8c 	.word	0x0800ba8c
 8001338:	0800ba94 	.word	0x0800ba94
 800133c:	200000e8 	.word	0x200000e8
 8001340:	20000284 	.word	0x20000284
 8001344:	0800bae0 	.word	0x0800bae0
 8001348:	200001cc 	.word	0x200001cc
 800134c:	2000022c 	.word	0x2000022c
 8001350:	20000084 	.word	0x20000084
 8001354:	0800bac0 	.word	0x0800bac0

08001358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b09c      	sub	sp, #112	@ 0x70
 800135c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135e:	f107 0320 	add.w	r3, r7, #32
 8001362:	2250      	movs	r2, #80	@ 0x50
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f00a f8c0 	bl	800b4ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800136c:	f107 0308 	add.w	r3, r7, #8
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
 800137c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800137e:	4b2d      	ldr	r3, [pc, #180]	@ (8001434 <SystemClock_Config+0xdc>)
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	4a2c      	ldr	r2, [pc, #176]	@ (8001434 <SystemClock_Config+0xdc>)
 8001384:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001388:	6113      	str	r3, [r2, #16]
 800138a:	4b2a      	ldr	r3, [pc, #168]	@ (8001434 <SystemClock_Config+0xdc>)
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001396:	bf00      	nop
 8001398:	4b26      	ldr	r3, [pc, #152]	@ (8001434 <SystemClock_Config+0xdc>)
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	f003 0308 	and.w	r3, r3, #8
 80013a0:	2b08      	cmp	r3, #8
 80013a2:	d1f9      	bne.n	8001398 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013a4:	2301      	movs	r3, #1
 80013a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ae:	2302      	movs	r3, #2
 80013b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80013b2:	2303      	movs	r3, #3
 80013b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013b6:	2301      	movs	r3, #1
 80013b8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 62;
 80013ba:	233e      	movs	r3, #62	@ 0x3e
 80013bc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80013be:	2302      	movs	r3, #2
 80013c0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013c2:	2302      	movs	r3, #2
 80013c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013c6:	2302      	movs	r3, #2
 80013c8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 80013ca:	230c      	movs	r3, #12
 80013cc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 80013d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d8:	f107 0320 	add.w	r3, r7, #32
 80013dc:	4618      	mov	r0, r3
 80013de:	f002 fcb7 	bl	8003d50 <HAL_RCC_OscConfig>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013e8:	f000 f89e 	bl	8001528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ec:	231f      	movs	r3, #31
 80013ee:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f0:	2303      	movs	r3, #3
 80013f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001400:	2300      	movs	r3, #0
 8001402:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001404:	f107 0308 	add.w	r3, r7, #8
 8001408:	2105      	movs	r1, #5
 800140a:	4618      	mov	r0, r3
 800140c:	f003 f8d8 	bl	80045c0 <HAL_RCC_ClockConfig>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001416:	f000 f887 	bl	8001528 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 800141a:	4b07      	ldr	r3, [pc, #28]	@ (8001438 <SystemClock_Config+0xe0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001422:	4a05      	ldr	r2, [pc, #20]	@ (8001438 <SystemClock_Config+0xe0>)
 8001424:	f043 0320 	orr.w	r3, r3, #32
 8001428:	6013      	str	r3, [r2, #0]
}
 800142a:	bf00      	nop
 800142c:	3770      	adds	r7, #112	@ 0x70
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	44020800 	.word	0x44020800
 8001438:	40022000 	.word	0x40022000

0800143c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
    static uint8_t byte; // Przechowywany bajt
    HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 8001444:	2108      	movs	r1, #8
 8001446:	482e      	ldr	r0, [pc, #184]	@ (8001500 <HAL_UART_RxCpltCallback+0xc4>)
 8001448:	f002 fc38 	bl	8003cbc <HAL_GPIO_TogglePin>
    if (huart->Instance == USART1) {
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a2c      	ldr	r2, [pc, #176]	@ (8001504 <HAL_UART_RxCpltCallback+0xc8>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d150      	bne.n	80014f8 <HAL_UART_RxCpltCallback+0xbc>
        byte = UartBuffer[0]; // Odbieramy bajt po bajcie
 8001456:	4b2c      	ldr	r3, [pc, #176]	@ (8001508 <HAL_UART_RxCpltCallback+0xcc>)
 8001458:	781a      	ldrb	r2, [r3, #0]
 800145a:	4b2c      	ldr	r3, [pc, #176]	@ (800150c <HAL_UART_RxCpltCallback+0xd0>)
 800145c:	701a      	strb	r2, [r3, #0]

        // Sprawdzamy nagłówek "+IPD"
        if (headerMatch < 4) {
 800145e:	4b2c      	ldr	r3, [pc, #176]	@ (8001510 <HAL_UART_RxCpltCallback+0xd4>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b03      	cmp	r3, #3
 8001464:	d813      	bhi.n	800148e <HAL_UART_RxCpltCallback+0x52>
            if (byte == HEADER[headerMatch]) {
 8001466:	4b2a      	ldr	r3, [pc, #168]	@ (8001510 <HAL_UART_RxCpltCallback+0xd4>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	461a      	mov	r2, r3
 800146c:	4b29      	ldr	r3, [pc, #164]	@ (8001514 <HAL_UART_RxCpltCallback+0xd8>)
 800146e:	5c9a      	ldrb	r2, [r3, r2]
 8001470:	4b26      	ldr	r3, [pc, #152]	@ (800150c <HAL_UART_RxCpltCallback+0xd0>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	429a      	cmp	r2, r3
 8001476:	d106      	bne.n	8001486 <HAL_UART_RxCpltCallback+0x4a>
                headerMatch++;
 8001478:	4b25      	ldr	r3, [pc, #148]	@ (8001510 <HAL_UART_RxCpltCallback+0xd4>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	3301      	adds	r3, #1
 800147e:	b2da      	uxtb	r2, r3
 8001480:	4b23      	ldr	r3, [pc, #140]	@ (8001510 <HAL_UART_RxCpltCallback+0xd4>)
 8001482:	701a      	strb	r2, [r3, #0]
 8001484:	e033      	b.n	80014ee <HAL_UART_RxCpltCallback+0xb2>
            } else {
                headerMatch = 0; // Reset, jeśli się nie zgadza
 8001486:	4b22      	ldr	r3, [pc, #136]	@ (8001510 <HAL_UART_RxCpltCallback+0xd4>)
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
 800148c:	e02f      	b.n	80014ee <HAL_UART_RxCpltCallback+0xb2>
            }
        } else if (headerMatch == 4) {
 800148e:	4b20      	ldr	r3, [pc, #128]	@ (8001510 <HAL_UART_RxCpltCallback+0xd4>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b04      	cmp	r3, #4
 8001494:	d10d      	bne.n	80014b2 <HAL_UART_RxCpltCallback+0x76>
            // Oczekujemy na długość ramki, pomijamy "xx:"
            if (byte == ':') {
 8001496:	4b1d      	ldr	r3, [pc, #116]	@ (800150c <HAL_UART_RxCpltCallback+0xd0>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b3a      	cmp	r3, #58	@ 0x3a
 800149c:	d127      	bne.n	80014ee <HAL_UART_RxCpltCallback+0xb2>
                headerMatch++; // Przechodzimy do odbioru danych
 800149e:	4b1c      	ldr	r3, [pc, #112]	@ (8001510 <HAL_UART_RxCpltCallback+0xd4>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	3301      	adds	r3, #1
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001510 <HAL_UART_RxCpltCallback+0xd4>)
 80014a8:	701a      	strb	r2, [r3, #0]
                frameIndex = 0;
 80014aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001518 <HAL_UART_RxCpltCallback+0xdc>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]
 80014b0:	e01d      	b.n	80014ee <HAL_UART_RxCpltCallback+0xb2>
            }
        } else {
            // Odbiór danych ramki
            if (frameIndex < 96 ) {
 80014b2:	4b19      	ldr	r3, [pc, #100]	@ (8001518 <HAL_UART_RxCpltCallback+0xdc>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b5f      	cmp	r3, #95	@ 0x5f
 80014b8:	d80a      	bhi.n	80014d0 <HAL_UART_RxCpltCallback+0x94>
                FrameBuffer[frameIndex++] = byte;
 80014ba:	4b17      	ldr	r3, [pc, #92]	@ (8001518 <HAL_UART_RxCpltCallback+0xdc>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	1c5a      	adds	r2, r3, #1
 80014c0:	b2d1      	uxtb	r1, r2
 80014c2:	4a15      	ldr	r2, [pc, #84]	@ (8001518 <HAL_UART_RxCpltCallback+0xdc>)
 80014c4:	7011      	strb	r1, [r2, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	4b10      	ldr	r3, [pc, #64]	@ (800150c <HAL_UART_RxCpltCallback+0xd0>)
 80014ca:	7819      	ldrb	r1, [r3, #0]
 80014cc:	4b13      	ldr	r3, [pc, #76]	@ (800151c <HAL_UART_RxCpltCallback+0xe0>)
 80014ce:	5499      	strb	r1, [r3, r2]
            }

            if (frameIndex >= 96 ) {
 80014d0:	4b11      	ldr	r3, [pc, #68]	@ (8001518 <HAL_UART_RxCpltCallback+0xdc>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b5f      	cmp	r3, #95	@ 0x5f
 80014d6:	d90a      	bls.n	80014ee <HAL_UART_RxCpltCallback+0xb2>
                frameReady = true;  // Pełna ramka odebrana
 80014d8:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <HAL_UART_RxCpltCallback+0xe4>)
 80014da:	2201      	movs	r2, #1
 80014dc:	701a      	strb	r2, [r3, #0]
                process_frame();
 80014de:	f7ff fe29 	bl	8001134 <process_frame>
                headerMatch = 0;    // Reset detekcji nagłówka
 80014e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001510 <HAL_UART_RxCpltCallback+0xd4>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
                frameIndex = 0;     // Reset indeksu bufora ramki
 80014e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001518 <HAL_UART_RxCpltCallback+0xdc>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
            }}
        HAL_UART_Receive_DMA(&huart1, UartBuffer, 1);
 80014ee:	2201      	movs	r2, #1
 80014f0:	4905      	ldr	r1, [pc, #20]	@ (8001508 <HAL_UART_RxCpltCallback+0xcc>)
 80014f2:	480c      	ldr	r0, [pc, #48]	@ (8001524 <HAL_UART_RxCpltCallback+0xe8>)
 80014f4:	f008 fb5a 	bl	8009bac <HAL_UART_Receive_DMA>
    }
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	42020400 	.word	0x42020400
 8001504:	40013800 	.word	0x40013800
 8001508:	200000e8 	.word	0x200000e8
 800150c:	20000230 	.word	0x20000230
 8001510:	200001c8 	.word	0x200001c8
 8001514:	0800bae8 	.word	0x0800bae8
 8001518:	200001c9 	.word	0x200001c9
 800151c:	20000168 	.word	0x20000168
 8001520:	200001ca 	.word	0x200001ca
 8001524:	20000284 	.word	0x20000284

08001528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800152c:	b672      	cpsid	i
}
 800152e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001530:	bf00      	nop
 8001532:	e7fd      	b.n	8001530 <Error_Handler+0x8>

08001534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001546:	bf00      	nop
 8001548:	e7fd      	b.n	8001546 <NMI_Handler+0x4>

0800154a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154e:	bf00      	nop
 8001550:	e7fd      	b.n	800154e <HardFault_Handler+0x4>

08001552 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001556:	bf00      	nop
 8001558:	e7fd      	b.n	8001556 <MemManage_Handler+0x4>

0800155a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155e:	bf00      	nop
 8001560:	e7fd      	b.n	800155e <BusFault_Handler+0x4>

08001562 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001566:	bf00      	nop
 8001568:	e7fd      	b.n	8001566 <UsageFault_Handler+0x4>

0800156a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001598:	f000 fc6c 	bl	8001e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}

080015a0 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 80015a4:	4802      	ldr	r0, [pc, #8]	@ (80015b0 <GPDMA1_Channel0_IRQHandler+0x10>)
 80015a6:	f001 f86a 	bl	800267e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000318 	.word	0x20000318

080015b4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80015b8:	4802      	ldr	r0, [pc, #8]	@ (80015c4 <FDCAN1_IT0_IRQHandler+0x10>)
 80015ba:	f001 ff9d 	bl	80034f8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000084 	.word	0x20000084

080015c8 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80015cc:	4802      	ldr	r0, [pc, #8]	@ (80015d8 <FDCAN1_IT1_IRQHandler+0x10>)
 80015ce:	f001 ff93 	bl	80034f8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000084 	.word	0x20000084

080015dc <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 Break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015e0:	4802      	ldr	r0, [pc, #8]	@ (80015ec <TIM1_BRK_IRQHandler+0x10>)
 80015e2:	f006 ffaf 	bl	8008544 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000238 	.word	0x20000238

080015f0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015f4:	4802      	ldr	r0, [pc, #8]	@ (8001600 <TIM1_UP_IRQHandler+0x10>)
 80015f6:	f006 ffa5 	bl	8008544 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000238 	.word	0x20000238

08001604 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 Trigger and Commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001608:	4802      	ldr	r0, [pc, #8]	@ (8001614 <TIM1_TRG_COM_IRQHandler+0x10>)
 800160a:	f006 ff9b 	bl	8008544 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000238 	.word	0x20000238

08001618 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 Capture Compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800161c:	4802      	ldr	r0, [pc, #8]	@ (8001628 <TIM1_CC_IRQHandler+0x10>)
 800161e:	f006 ff91 	bl	8008544 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000238 	.word	0x20000238

0800162c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001630:	4802      	ldr	r0, [pc, #8]	@ (800163c <USART1_IRQHandler+0x10>)
 8001632:	f008 fb0d 	bl	8009c50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000284 	.word	0x20000284

08001640 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	e00a      	b.n	8001668 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001652:	f3af 8000 	nop.w
 8001656:	4601      	mov	r1, r0
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	1c5a      	adds	r2, r3, #1
 800165c:	60ba      	str	r2, [r7, #8]
 800165e:	b2ca      	uxtb	r2, r1
 8001660:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	3301      	adds	r3, #1
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	429a      	cmp	r2, r3
 800166e:	dbf0      	blt.n	8001652 <_read+0x12>
  }

  return len;
 8001670:	687b      	ldr	r3, [r7, #4]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b086      	sub	sp, #24
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	e009      	b.n	80016a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	1c5a      	adds	r2, r3, #1
 8001690:	60ba      	str	r2, [r7, #8]
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	3301      	adds	r3, #1
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	dbf1      	blt.n	800168c <_write+0x12>
  }
  return len;
 80016a8:	687b      	ldr	r3, [r7, #4]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <_close>:

int _close(int file)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016be:	4618      	mov	r0, r3
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b083      	sub	sp, #12
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
 80016d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016da:	605a      	str	r2, [r3, #4]
  return 0;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <_isatty>:

int _isatty(int file)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016f2:	2301      	movs	r3, #1
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001724:	4a14      	ldr	r2, [pc, #80]	@ (8001778 <_sbrk+0x5c>)
 8001726:	4b15      	ldr	r3, [pc, #84]	@ (800177c <_sbrk+0x60>)
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001730:	4b13      	ldr	r3, [pc, #76]	@ (8001780 <_sbrk+0x64>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d102      	bne.n	800173e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001738:	4b11      	ldr	r3, [pc, #68]	@ (8001780 <_sbrk+0x64>)
 800173a:	4a12      	ldr	r2, [pc, #72]	@ (8001784 <_sbrk+0x68>)
 800173c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800173e:	4b10      	ldr	r3, [pc, #64]	@ (8001780 <_sbrk+0x64>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4413      	add	r3, r2
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	429a      	cmp	r2, r3
 800174a:	d207      	bcs.n	800175c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800174c:	f009 ff1c 	bl	800b588 <__errno>
 8001750:	4603      	mov	r3, r0
 8001752:	220c      	movs	r2, #12
 8001754:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001756:	f04f 33ff 	mov.w	r3, #4294967295
 800175a:	e009      	b.n	8001770 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800175c:	4b08      	ldr	r3, [pc, #32]	@ (8001780 <_sbrk+0x64>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001762:	4b07      	ldr	r3, [pc, #28]	@ (8001780 <_sbrk+0x64>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4413      	add	r3, r2
 800176a:	4a05      	ldr	r2, [pc, #20]	@ (8001780 <_sbrk+0x64>)
 800176c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800176e:	68fb      	ldr	r3, [r7, #12]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20044000 	.word	0x20044000
 800177c:	00000400 	.word	0x00000400
 8001780:	20000234 	.word	0x20000234
 8001784:	200004e0 	.word	0x200004e0

08001788 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800178e:	4b35      	ldr	r3, [pc, #212]	@ (8001864 <SystemInit+0xdc>)
 8001790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001794:	4a33      	ldr	r2, [pc, #204]	@ (8001864 <SystemInit+0xdc>)
 8001796:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800179a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800179e:	4b32      	ldr	r3, [pc, #200]	@ (8001868 <SystemInit+0xe0>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80017a4:	4b30      	ldr	r3, [pc, #192]	@ (8001868 <SystemInit+0xe0>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80017aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001868 <SystemInit+0xe0>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80017b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001868 <SystemInit+0xe0>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	492c      	ldr	r1, [pc, #176]	@ (8001868 <SystemInit+0xe0>)
 80017b6:	4b2d      	ldr	r3, [pc, #180]	@ (800186c <SystemInit+0xe4>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80017bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001868 <SystemInit+0xe0>)
 80017be:	2200      	movs	r2, #0
 80017c0:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80017c2:	4b29      	ldr	r3, [pc, #164]	@ (8001868 <SystemInit+0xe0>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80017c8:	4b27      	ldr	r3, [pc, #156]	@ (8001868 <SystemInit+0xe0>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80017ce:	4b26      	ldr	r3, [pc, #152]	@ (8001868 <SystemInit+0xe0>)
 80017d0:	4a27      	ldr	r2, [pc, #156]	@ (8001870 <SystemInit+0xe8>)
 80017d2:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80017d4:	4b24      	ldr	r3, [pc, #144]	@ (8001868 <SystemInit+0xe0>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80017da:	4b23      	ldr	r3, [pc, #140]	@ (8001868 <SystemInit+0xe0>)
 80017dc:	4a24      	ldr	r2, [pc, #144]	@ (8001870 <SystemInit+0xe8>)
 80017de:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80017e0:	4b21      	ldr	r3, [pc, #132]	@ (8001868 <SystemInit+0xe0>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80017e6:	4b20      	ldr	r3, [pc, #128]	@ (8001868 <SystemInit+0xe0>)
 80017e8:	4a21      	ldr	r2, [pc, #132]	@ (8001870 <SystemInit+0xe8>)
 80017ea:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80017ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001868 <SystemInit+0xe0>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80017f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001868 <SystemInit+0xe0>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001868 <SystemInit+0xe0>)
 80017f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017fc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80017fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001868 <SystemInit+0xe0>)
 8001800:	2200      	movs	r2, #0
 8001802:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001804:	4b17      	ldr	r3, [pc, #92]	@ (8001864 <SystemInit+0xdc>)
 8001806:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800180a:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800180c:	4b19      	ldr	r3, [pc, #100]	@ (8001874 <SystemInit+0xec>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001814:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800181c:	d003      	beq.n	8001826 <SystemInit+0x9e>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001824:	d117      	bne.n	8001856 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001826:	4b13      	ldr	r3, [pc, #76]	@ (8001874 <SystemInit+0xec>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d005      	beq.n	800183e <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001832:	4b10      	ldr	r3, [pc, #64]	@ (8001874 <SystemInit+0xec>)
 8001834:	4a10      	ldr	r2, [pc, #64]	@ (8001878 <SystemInit+0xf0>)
 8001836:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001838:	4b0e      	ldr	r3, [pc, #56]	@ (8001874 <SystemInit+0xec>)
 800183a:	4a10      	ldr	r2, [pc, #64]	@ (800187c <SystemInit+0xf4>)
 800183c:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800183e:	4b0d      	ldr	r3, [pc, #52]	@ (8001874 <SystemInit+0xec>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	4a0c      	ldr	r2, [pc, #48]	@ (8001874 <SystemInit+0xec>)
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800184a:	4b0a      	ldr	r3, [pc, #40]	@ (8001874 <SystemInit+0xec>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	4a09      	ldr	r2, [pc, #36]	@ (8001874 <SystemInit+0xec>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	61d3      	str	r3, [r2, #28]
  }
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000ed00 	.word	0xe000ed00
 8001868:	44020c00 	.word	0x44020c00
 800186c:	eae2eae3 	.word	0xeae2eae3
 8001870:	01010280 	.word	0x01010280
 8001874:	40022000 	.word	0x40022000
 8001878:	08192a3b 	.word	0x08192a3b
 800187c:	4c5d6e7f 	.word	0x4c5d6e7f

08001880 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b09c      	sub	sp, #112	@ 0x70
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001886:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001894:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018a0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
 80018b0:	615a      	str	r2, [r3, #20]
 80018b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	2234      	movs	r2, #52	@ 0x34
 80018b8:	2100      	movs	r1, #0
 80018ba:	4618      	mov	r0, r3
 80018bc:	f009 fe16 	bl	800b4ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018c0:	4b46      	ldr	r3, [pc, #280]	@ (80019dc <MX_TIM1_Init+0x15c>)
 80018c2:	4a47      	ldr	r2, [pc, #284]	@ (80019e0 <MX_TIM1_Init+0x160>)
 80018c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 49;
 80018c6:	4b45      	ldr	r3, [pc, #276]	@ (80019dc <MX_TIM1_Init+0x15c>)
 80018c8:	2231      	movs	r2, #49	@ 0x31
 80018ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018cc:	4b43      	ldr	r3, [pc, #268]	@ (80019dc <MX_TIM1_Init+0x15c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80018d2:	4b42      	ldr	r3, [pc, #264]	@ (80019dc <MX_TIM1_Init+0x15c>)
 80018d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018da:	4b40      	ldr	r3, [pc, #256]	@ (80019dc <MX_TIM1_Init+0x15c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018e0:	4b3e      	ldr	r3, [pc, #248]	@ (80019dc <MX_TIM1_Init+0x15c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018e6:	4b3d      	ldr	r3, [pc, #244]	@ (80019dc <MX_TIM1_Init+0x15c>)
 80018e8:	2280      	movs	r2, #128	@ 0x80
 80018ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018ec:	483b      	ldr	r0, [pc, #236]	@ (80019dc <MX_TIM1_Init+0x15c>)
 80018ee:	f006 fc2d 	bl	800814c <HAL_TIM_Base_Init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80018f8:	f7ff fe16 	bl	8001528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001900:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001902:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001906:	4619      	mov	r1, r3
 8001908:	4834      	ldr	r0, [pc, #208]	@ (80019dc <MX_TIM1_Init+0x15c>)
 800190a:	f007 f87f 	bl	8008a0c <HAL_TIM_ConfigClockSource>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001914:	f7ff fe08 	bl	8001528 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001918:	4830      	ldr	r0, [pc, #192]	@ (80019dc <MX_TIM1_Init+0x15c>)
 800191a:	f006 fc6e 	bl	80081fa <HAL_TIM_PWM_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001924:	f7ff fe00 	bl	8001528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001928:	2300      	movs	r3, #0
 800192a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800192c:	2300      	movs	r3, #0
 800192e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001930:	2300      	movs	r3, #0
 8001932:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001934:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001938:	4619      	mov	r1, r3
 800193a:	4828      	ldr	r0, [pc, #160]	@ (80019dc <MX_TIM1_Init+0x15c>)
 800193c:	f007 fe98 	bl	8009670 <HAL_TIMEx_MasterConfigSynchronization>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001946:	f7ff fdef 	bl	8001528 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800194a:	2360      	movs	r3, #96	@ 0x60
 800194c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 5000;
 800194e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001952:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001954:	2300      	movs	r3, #0
 8001956:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001958:	2300      	movs	r3, #0
 800195a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800195c:	2300      	movs	r3, #0
 800195e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001960:	2300      	movs	r3, #0
 8001962:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001964:	2300      	movs	r3, #0
 8001966:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001968:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800196c:	2204      	movs	r2, #4
 800196e:	4619      	mov	r1, r3
 8001970:	481a      	ldr	r0, [pc, #104]	@ (80019dc <MX_TIM1_Init+0x15c>)
 8001972:	f006 ff37 	bl	80087e4 <HAL_TIM_PWM_ConfigChannel>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800197c:	f7ff fdd4 	bl	8001528 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001980:	2300      	movs	r3, #0
 8001982:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001984:	2300      	movs	r3, #0
 8001986:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001994:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001998:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800199e:	2300      	movs	r3, #0
 80019a0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80019b0:	2300      	movs	r3, #0
 80019b2:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	4619      	mov	r1, r3
 80019bc:	4807      	ldr	r0, [pc, #28]	@ (80019dc <MX_TIM1_Init+0x15c>)
 80019be:	f007 ff27 	bl	8009810 <HAL_TIMEx_ConfigBreakDeadTime>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 80019c8:	f7ff fdae 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019cc:	4803      	ldr	r0, [pc, #12]	@ (80019dc <MX_TIM1_Init+0x15c>)
 80019ce:	f000 f849 	bl	8001a64 <HAL_TIM_MspPostInit>

}
 80019d2:	bf00      	nop
 80019d4:	3770      	adds	r7, #112	@ 0x70
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000238 	.word	0x20000238
 80019e0:	40012c00 	.word	0x40012c00

080019e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a1a      	ldr	r2, [pc, #104]	@ (8001a5c <HAL_TIM_Base_MspInit+0x78>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d12e      	bne.n	8001a54 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a60 <HAL_TIM_Base_MspInit+0x7c>)
 80019f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80019fc:	4a18      	ldr	r2, [pc, #96]	@ (8001a60 <HAL_TIM_Base_MspInit+0x7c>)
 80019fe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a02:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001a06:	4b16      	ldr	r3, [pc, #88]	@ (8001a60 <HAL_TIM_Base_MspInit+0x7c>)
 8001a08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001a0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2100      	movs	r1, #0
 8001a18:	2029      	movs	r0, #41	@ 0x29
 8001a1a:	f000 fb27 	bl	800206c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001a1e:	2029      	movs	r0, #41	@ 0x29
 8001a20:	f000 fb3e 	bl	80020a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001a24:	2200      	movs	r2, #0
 8001a26:	2100      	movs	r1, #0
 8001a28:	202a      	movs	r0, #42	@ 0x2a
 8001a2a:	f000 fb1f 	bl	800206c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001a2e:	202a      	movs	r0, #42	@ 0x2a
 8001a30:	f000 fb36 	bl	80020a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001a34:	2200      	movs	r2, #0
 8001a36:	2100      	movs	r1, #0
 8001a38:	202b      	movs	r0, #43	@ 0x2b
 8001a3a:	f000 fb17 	bl	800206c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001a3e:	202b      	movs	r0, #43	@ 0x2b
 8001a40:	f000 fb2e 	bl	80020a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001a44:	2200      	movs	r2, #0
 8001a46:	2100      	movs	r1, #0
 8001a48:	202c      	movs	r0, #44	@ 0x2c
 8001a4a:	f000 fb0f 	bl	800206c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001a4e:	202c      	movs	r0, #44	@ 0x2c
 8001a50:	f000 fb26 	bl	80020a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001a54:	bf00      	nop
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40012c00 	.word	0x40012c00
 8001a60:	44020c00 	.word	0x44020c00

08001a64 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f107 030c 	add.w	r3, r7, #12
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a13      	ldr	r2, [pc, #76]	@ (8001ad0 <HAL_TIM_MspPostInit+0x6c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d11f      	bne.n	8001ac6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a86:	4b13      	ldr	r3, [pc, #76]	@ (8001ad4 <HAL_TIM_MspPostInit+0x70>)
 8001a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a8c:	4a11      	ldr	r2, [pc, #68]	@ (8001ad4 <HAL_TIM_MspPostInit+0x70>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a96:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad4 <HAL_TIM_MspPostInit+0x70>)
 8001a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001aa4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001aa8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aba:	f107 030c 	add.w	r3, r7, #12
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4805      	ldr	r0, [pc, #20]	@ (8001ad8 <HAL_TIM_MspPostInit+0x74>)
 8001ac2:	f001 ff91 	bl	80039e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ac6:	bf00      	nop
 8001ac8:	3720      	adds	r7, #32
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40012c00 	.word	0x40012c00
 8001ad4:	44020c00 	.word	0x44020c00
 8001ad8:	42020000 	.word	0x42020000

08001adc <MX_USART1_UART_Init>:
DMA_HandleTypeDef handle_GPDMA1_Channel0;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ae0:	4b22      	ldr	r3, [pc, #136]	@ (8001b6c <MX_USART1_UART_Init+0x90>)
 8001ae2:	4a23      	ldr	r2, [pc, #140]	@ (8001b70 <MX_USART1_UART_Init+0x94>)
 8001ae4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ae6:	4b21      	ldr	r3, [pc, #132]	@ (8001b6c <MX_USART1_UART_Init+0x90>)
 8001ae8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001aec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aee:	4b1f      	ldr	r3, [pc, #124]	@ (8001b6c <MX_USART1_UART_Init+0x90>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001af4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b6c <MX_USART1_UART_Init+0x90>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001afa:	4b1c      	ldr	r3, [pc, #112]	@ (8001b6c <MX_USART1_UART_Init+0x90>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b00:	4b1a      	ldr	r3, [pc, #104]	@ (8001b6c <MX_USART1_UART_Init+0x90>)
 8001b02:	220c      	movs	r2, #12
 8001b04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b06:	4b19      	ldr	r3, [pc, #100]	@ (8001b6c <MX_USART1_UART_Init+0x90>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b0c:	4b17      	ldr	r3, [pc, #92]	@ (8001b6c <MX_USART1_UART_Init+0x90>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b12:	4b16      	ldr	r3, [pc, #88]	@ (8001b6c <MX_USART1_UART_Init+0x90>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b18:	4b14      	ldr	r3, [pc, #80]	@ (8001b6c <MX_USART1_UART_Init+0x90>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b1e:	4b13      	ldr	r3, [pc, #76]	@ (8001b6c <MX_USART1_UART_Init+0x90>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b24:	4811      	ldr	r0, [pc, #68]	@ (8001b6c <MX_USART1_UART_Init+0x90>)
 8001b26:	f007 ff53 	bl	80099d0 <HAL_UART_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001b30:	f7ff fcfa 	bl	8001528 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b34:	2100      	movs	r1, #0
 8001b36:	480d      	ldr	r0, [pc, #52]	@ (8001b6c <MX_USART1_UART_Init+0x90>)
 8001b38:	f009 fa15 	bl	800af66 <HAL_UARTEx_SetTxFifoThreshold>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b42:	f7ff fcf1 	bl	8001528 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b46:	2100      	movs	r1, #0
 8001b48:	4808      	ldr	r0, [pc, #32]	@ (8001b6c <MX_USART1_UART_Init+0x90>)
 8001b4a:	f009 fa4a 	bl	800afe2 <HAL_UARTEx_SetRxFifoThreshold>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b54:	f7ff fce8 	bl	8001528 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b58:	4804      	ldr	r0, [pc, #16]	@ (8001b6c <MX_USART1_UART_Init+0x90>)
 8001b5a:	f009 f9cb 	bl	800aef4 <HAL_UARTEx_DisableFifoMode>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001b64:	f7ff fce0 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000284 	.word	0x20000284
 8001b70:	40013800 	.word	0x40013800

08001b74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b0be      	sub	sp, #248	@ 0xf8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b8c:	f107 0310 	add.w	r3, r7, #16
 8001b90:	22d0      	movs	r2, #208	@ 0xd0
 8001b92:	2100      	movs	r1, #0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f009 fca9 	bl	800b4ec <memset>
  if(uartHandle->Instance==USART1)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a4c      	ldr	r2, [pc, #304]	@ (8001cd0 <HAL_UART_MspInit+0x15c>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	f040 8090 	bne.w	8001cc6 <HAL_UART_MspInit+0x152>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ba6:	f04f 0201 	mov.w	r2, #1
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bb6:	f107 0310 	add.w	r3, r7, #16
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f003 f842 	bl	8004c44 <HAL_RCCEx_PeriphCLKConfig>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001bc6:	f7ff fcaf 	bl	8001528 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bca:	4b42      	ldr	r3, [pc, #264]	@ (8001cd4 <HAL_UART_MspInit+0x160>)
 8001bcc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001bd0:	4a40      	ldr	r2, [pc, #256]	@ (8001cd4 <HAL_UART_MspInit+0x160>)
 8001bd2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bd6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001bda:	4b3e      	ldr	r3, [pc, #248]	@ (8001cd4 <HAL_UART_MspInit+0x160>)
 8001bdc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001be0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be8:	4b3a      	ldr	r3, [pc, #232]	@ (8001cd4 <HAL_UART_MspInit+0x160>)
 8001bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bee:	4a39      	ldr	r2, [pc, #228]	@ (8001cd4 <HAL_UART_MspInit+0x160>)
 8001bf0:	f043 0302 	orr.w	r3, r3, #2
 8001bf4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001bf8:	4b36      	ldr	r3, [pc, #216]	@ (8001cd4 <HAL_UART_MspInit+0x160>)
 8001bfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	60bb      	str	r3, [r7, #8]
 8001c04:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001c06:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001c0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001c20:	2304      	movs	r3, #4
 8001c22:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c26:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	482a      	ldr	r0, [pc, #168]	@ (8001cd8 <HAL_UART_MspInit+0x164>)
 8001c2e:	f001 fedb 	bl	80039e8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* GPDMA1_REQUEST_USART1_RX Init */
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8001c32:	4b2a      	ldr	r3, [pc, #168]	@ (8001cdc <HAL_UART_MspInit+0x168>)
 8001c34:	4a2a      	ldr	r2, [pc, #168]	@ (8001ce0 <HAL_UART_MspInit+0x16c>)
 8001c36:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_USART1_RX;
 8001c38:	4b28      	ldr	r3, [pc, #160]	@ (8001cdc <HAL_UART_MspInit+0x168>)
 8001c3a:	2215      	movs	r2, #21
 8001c3c:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001c3e:	4b27      	ldr	r3, [pc, #156]	@ (8001cdc <HAL_UART_MspInit+0x168>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c44:	4b25      	ldr	r3, [pc, #148]	@ (8001cdc <HAL_UART_MspInit+0x168>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 8001c4a:	4b24      	ldr	r3, [pc, #144]	@ (8001cdc <HAL_UART_MspInit+0x168>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_FIXED;
 8001c50:	4b22      	ldr	r3, [pc, #136]	@ (8001cdc <HAL_UART_MspInit+0x168>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001c56:	4b21      	ldr	r3, [pc, #132]	@ (8001cdc <HAL_UART_MspInit+0x168>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001cdc <HAL_UART_MspInit+0x168>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001c62:	4b1e      	ldr	r3, [pc, #120]	@ (8001cdc <HAL_UART_MspInit+0x168>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 8001c68:	4b1c      	ldr	r3, [pc, #112]	@ (8001cdc <HAL_UART_MspInit+0x168>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 8001c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cdc <HAL_UART_MspInit+0x168>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001c74:	4b19      	ldr	r3, [pc, #100]	@ (8001cdc <HAL_UART_MspInit+0x168>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001c7a:	4b18      	ldr	r3, [pc, #96]	@ (8001cdc <HAL_UART_MspInit+0x168>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 8001c80:	4b16      	ldr	r3, [pc, #88]	@ (8001cdc <HAL_UART_MspInit+0x168>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8001c86:	4815      	ldr	r0, [pc, #84]	@ (8001cdc <HAL_UART_MspInit+0x168>)
 8001c88:	f000 fac8 	bl	800221c <HAL_DMA_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_UART_MspInit+0x122>
    {
      Error_Handler();
 8001c92:	f7ff fc49 	bl	8001528 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmarx, handle_GPDMA1_Channel0);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a10      	ldr	r2, [pc, #64]	@ (8001cdc <HAL_UART_MspInit+0x168>)
 8001c9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001c9e:	4a0f      	ldr	r2, [pc, #60]	@ (8001cdc <HAL_UART_MspInit+0x168>)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001ca4:	2110      	movs	r1, #16
 8001ca6:	480d      	ldr	r0, [pc, #52]	@ (8001cdc <HAL_UART_MspInit+0x168>)
 8001ca8:	f000 fe4a 	bl	8002940 <HAL_DMA_ConfigChannelAttributes>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8001cb2:	f7ff fc39 	bl	8001528 <Error_Handler>
    }

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2100      	movs	r1, #0
 8001cba:	203a      	movs	r0, #58	@ 0x3a
 8001cbc:	f000 f9d6 	bl	800206c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cc0:	203a      	movs	r0, #58	@ 0x3a
 8001cc2:	f000 f9ed 	bl	80020a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001cc6:	bf00      	nop
 8001cc8:	37f8      	adds	r7, #248	@ 0xf8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40013800 	.word	0x40013800
 8001cd4:	44020c00 	.word	0x44020c00
 8001cd8:	42020400 	.word	0x42020400
 8001cdc:	20000318 	.word	0x20000318
 8001ce0:	40020050 	.word	0x40020050

08001ce4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ce4:	480d      	ldr	r0, [pc, #52]	@ (8001d1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ce6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ce8:	f7ff fd4e 	bl	8001788 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cec:	480c      	ldr	r0, [pc, #48]	@ (8001d20 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cee:	490d      	ldr	r1, [pc, #52]	@ (8001d24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8001d28 <LoopForever+0xe>)
  movs r3, #0
 8001cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf4:	e002      	b.n	8001cfc <LoopCopyDataInit>

08001cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cfa:	3304      	adds	r3, #4

08001cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d00:	d3f9      	bcc.n	8001cf6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d02:	4a0a      	ldr	r2, [pc, #40]	@ (8001d2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d04:	4c0a      	ldr	r4, [pc, #40]	@ (8001d30 <LoopForever+0x16>)
  movs r3, #0
 8001d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d08:	e001      	b.n	8001d0e <LoopFillZerobss>

08001d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d0c:	3204      	adds	r2, #4

08001d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d10:	d3fb      	bcc.n	8001d0a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d12:	f009 fc3f 	bl	800b594 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d16:	f7ff fa77 	bl	8001208 <main>

08001d1a <LoopForever>:

LoopForever:
    b LoopForever
 8001d1a:	e7fe      	b.n	8001d1a <LoopForever>
  ldr   r0, =_estack
 8001d1c:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8001d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d24:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001d28:	0800bb50 	.word	0x0800bb50
  ldr r2, =_sbss
 8001d2c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001d30:	200004e0 	.word	0x200004e0

08001d34 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d34:	e7fe      	b.n	8001d34 <ADC1_IRQHandler>
	...

08001d38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d3c:	2003      	movs	r0, #3
 8001d3e:	f000 f98a 	bl	8002056 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001d42:	f002 fdf5 	bl	8004930 <HAL_RCC_GetSysClockFreq>
 8001d46:	4602      	mov	r2, r0
 8001d48:	4b0c      	ldr	r3, [pc, #48]	@ (8001d7c <HAL_Init+0x44>)
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	f003 030f 	and.w	r3, r3, #15
 8001d50:	490b      	ldr	r1, [pc, #44]	@ (8001d80 <HAL_Init+0x48>)
 8001d52:	5ccb      	ldrb	r3, [r1, r3]
 8001d54:	fa22 f303 	lsr.w	r3, r2, r3
 8001d58:	4a0a      	ldr	r2, [pc, #40]	@ (8001d84 <HAL_Init+0x4c>)
 8001d5a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001d5c:	2004      	movs	r0, #4
 8001d5e:	f000 f9cf 	bl	8002100 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d62:	200f      	movs	r0, #15
 8001d64:	f000 f810 	bl	8001d88 <HAL_InitTick>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e002      	b.n	8001d78 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d72:	f7ff fbdf 	bl	8001534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	44020c00 	.word	0x44020c00
 8001d80:	0800baf0 	.word	0x0800baf0
 8001d84:	20000000 	.word	0x20000000

08001d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001d94:	4b33      	ldr	r3, [pc, #204]	@ (8001e64 <HAL_InitTick+0xdc>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e05c      	b.n	8001e5a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001da0:	4b31      	ldr	r3, [pc, #196]	@ (8001e68 <HAL_InitTick+0xe0>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d10c      	bne.n	8001dc6 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001dac:	4b2f      	ldr	r3, [pc, #188]	@ (8001e6c <HAL_InitTick+0xe4>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4b2c      	ldr	r3, [pc, #176]	@ (8001e64 <HAL_InitTick+0xdc>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	4619      	mov	r1, r3
 8001db6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	e037      	b.n	8001e36 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001dc6:	f000 f9f3 	bl	80021b0 <HAL_SYSTICK_GetCLKSourceConfig>
 8001dca:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d023      	beq.n	8001e1a <HAL_InitTick+0x92>
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d82d      	bhi.n	8001e34 <HAL_InitTick+0xac>
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_InitTick+0x5e>
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d00d      	beq.n	8001e00 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001de4:	e026      	b.n	8001e34 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001de6:	4b21      	ldr	r3, [pc, #132]	@ (8001e6c <HAL_InitTick+0xe4>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	4b1e      	ldr	r3, [pc, #120]	@ (8001e64 <HAL_InitTick+0xdc>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	4619      	mov	r1, r3
 8001df0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001df4:	fbb3 f3f1 	udiv	r3, r3, r1
 8001df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfc:	60fb      	str	r3, [r7, #12]
        break;
 8001dfe:	e01a      	b.n	8001e36 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001e00:	4b18      	ldr	r3, [pc, #96]	@ (8001e64 <HAL_InitTick+0xdc>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e0e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e16:	60fb      	str	r3, [r7, #12]
        break;
 8001e18:	e00d      	b.n	8001e36 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001e1a:	4b12      	ldr	r3, [pc, #72]	@ (8001e64 <HAL_InitTick+0xdc>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e24:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e28:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e30:	60fb      	str	r3, [r7, #12]
        break;
 8001e32:	e000      	b.n	8001e36 <HAL_InitTick+0xae>
        break;
 8001e34:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 f940 	bl	80020bc <HAL_SYSTICK_Config>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e009      	b.n	8001e5a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e46:	2200      	movs	r2, #0
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8001e4e:	f000 f90d 	bl	800206c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001e52:	4a07      	ldr	r2, [pc, #28]	@ (8001e70 <HAL_InitTick+0xe8>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000008 	.word	0x20000008
 8001e68:	e000e010 	.word	0xe000e010
 8001e6c:	20000000 	.word	0x20000000
 8001e70:	20000004 	.word	0x20000004

08001e74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e78:	4b06      	ldr	r3, [pc, #24]	@ (8001e94 <HAL_IncTick+0x20>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <HAL_IncTick+0x24>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4413      	add	r3, r2
 8001e84:	4a04      	ldr	r2, [pc, #16]	@ (8001e98 <HAL_IncTick+0x24>)
 8001e86:	6013      	str	r3, [r2, #0]
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	20000008 	.word	0x20000008
 8001e98:	20000390 	.word	0x20000390

08001e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea0:	4b03      	ldr	r3, [pc, #12]	@ (8001eb0 <HAL_GetTick+0x14>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20000390 	.word	0x20000390

08001eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ebc:	f7ff ffee 	bl	8001e9c <HAL_GetTick>
 8001ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ecc:	d005      	beq.n	8001eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ece:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef8 <HAL_Delay+0x44>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eda:	bf00      	nop
 8001edc:	f7ff ffde 	bl	8001e9c <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d8f7      	bhi.n	8001edc <HAL_Delay+0x28>
  {
  }
}
 8001eec:	bf00      	nop
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000008 	.word	0x20000008

08001efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f40 <__NVIC_SetPriorityGrouping+0x44>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f2e:	4a04      	ldr	r2, [pc, #16]	@ (8001f40 <__NVIC_SetPriorityGrouping+0x44>)
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	60d3      	str	r3, [r2, #12]
}
 8001f34:	bf00      	nop
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f48:	4b04      	ldr	r3, [pc, #16]	@ (8001f5c <__NVIC_GetPriorityGrouping+0x18>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	0a1b      	lsrs	r3, r3, #8
 8001f4e:	f003 0307 	and.w	r3, r3, #7
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	db0b      	blt.n	8001f8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f72:	88fb      	ldrh	r3, [r7, #6]
 8001f74:	f003 021f 	and.w	r2, r3, #31
 8001f78:	4907      	ldr	r1, [pc, #28]	@ (8001f98 <__NVIC_EnableIRQ+0x38>)
 8001f7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f7e:	095b      	lsrs	r3, r3, #5
 8001f80:	2001      	movs	r0, #1
 8001f82:	fa00 f202 	lsl.w	r2, r0, r2
 8001f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	e000e100 	.word	0xe000e100

08001f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	6039      	str	r1, [r7, #0]
 8001fa6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	db0a      	blt.n	8001fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	490c      	ldr	r1, [pc, #48]	@ (8001fe8 <__NVIC_SetPriority+0x4c>)
 8001fb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fba:	0112      	lsls	r2, r2, #4
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc4:	e00a      	b.n	8001fdc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	4908      	ldr	r1, [pc, #32]	@ (8001fec <__NVIC_SetPriority+0x50>)
 8001fcc:	88fb      	ldrh	r3, [r7, #6]
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	3b04      	subs	r3, #4
 8001fd4:	0112      	lsls	r2, r2, #4
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	440b      	add	r3, r1
 8001fda:	761a      	strb	r2, [r3, #24]
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000e100 	.word	0xe000e100
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b089      	sub	sp, #36	@ 0x24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f1c3 0307 	rsb	r3, r3, #7
 800200a:	2b04      	cmp	r3, #4
 800200c:	bf28      	it	cs
 800200e:	2304      	movcs	r3, #4
 8002010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	3304      	adds	r3, #4
 8002016:	2b06      	cmp	r3, #6
 8002018:	d902      	bls.n	8002020 <NVIC_EncodePriority+0x30>
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3b03      	subs	r3, #3
 800201e:	e000      	b.n	8002022 <NVIC_EncodePriority+0x32>
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002024:	f04f 32ff 	mov.w	r2, #4294967295
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43da      	mvns	r2, r3
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	401a      	ands	r2, r3
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002038:	f04f 31ff 	mov.w	r1, #4294967295
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	fa01 f303 	lsl.w	r3, r1, r3
 8002042:	43d9      	mvns	r1, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002048:	4313      	orrs	r3, r2
         );
}
 800204a:	4618      	mov	r0, r3
 800204c:	3724      	adds	r7, #36	@ 0x24
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff ff4c 	bl	8001efc <__NVIC_SetPriorityGrouping>
}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
 8002078:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800207a:	f7ff ff63 	bl	8001f44 <__NVIC_GetPriorityGrouping>
 800207e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	68b9      	ldr	r1, [r7, #8]
 8002084:	6978      	ldr	r0, [r7, #20]
 8002086:	f7ff ffb3 	bl	8001ff0 <NVIC_EncodePriority>
 800208a:	4602      	mov	r2, r0
 800208c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002090:	4611      	mov	r1, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff ff82 	bl	8001f9c <__NVIC_SetPriority>
}
 8002098:	bf00      	nop
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff ff56 	bl	8001f60 <__NVIC_EnableIRQ>
}
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020cc:	d301      	bcc.n	80020d2 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80020ce:	2301      	movs	r3, #1
 80020d0:	e00d      	b.n	80020ee <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80020d2:	4a0a      	ldr	r2, [pc, #40]	@ (80020fc <HAL_SYSTICK_Config+0x40>)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80020da:	4b08      	ldr	r3, [pc, #32]	@ (80020fc <HAL_SYSTICK_Config+0x40>)
 80020dc:	2200      	movs	r2, #0
 80020de:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80020e0:	4b06      	ldr	r3, [pc, #24]	@ (80020fc <HAL_SYSTICK_Config+0x40>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a05      	ldr	r2, [pc, #20]	@ (80020fc <HAL_SYSTICK_Config+0x40>)
 80020e6:	f043 0303 	orr.w	r3, r3, #3
 80020ea:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	e000e010 	.word	0xe000e010

08002100 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b04      	cmp	r3, #4
 800210c:	d844      	bhi.n	8002198 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800210e:	a201      	add	r2, pc, #4	@ (adr r2, 8002114 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002114:	08002137 	.word	0x08002137
 8002118:	08002155 	.word	0x08002155
 800211c:	08002177 	.word	0x08002177
 8002120:	08002199 	.word	0x08002199
 8002124:	08002129 	.word	0x08002129
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002128:	4b1f      	ldr	r3, [pc, #124]	@ (80021a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a1e      	ldr	r2, [pc, #120]	@ (80021a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800212e:	f043 0304 	orr.w	r3, r3, #4
 8002132:	6013      	str	r3, [r2, #0]
      break;
 8002134:	e031      	b.n	800219a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002136:	4b1c      	ldr	r3, [pc, #112]	@ (80021a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a1b      	ldr	r2, [pc, #108]	@ (80021a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800213c:	f023 0304 	bic.w	r3, r3, #4
 8002140:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8002142:	4b1a      	ldr	r3, [pc, #104]	@ (80021ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002144:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002148:	4a18      	ldr	r2, [pc, #96]	@ (80021ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800214a:	f023 030c 	bic.w	r3, r3, #12
 800214e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002152:	e022      	b.n	800219a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002154:	4b14      	ldr	r3, [pc, #80]	@ (80021a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a13      	ldr	r2, [pc, #76]	@ (80021a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800215a:	f023 0304 	bic.w	r3, r3, #4
 800215e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8002160:	4b12      	ldr	r3, [pc, #72]	@ (80021ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002162:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002166:	f023 030c 	bic.w	r3, r3, #12
 800216a:	4a10      	ldr	r2, [pc, #64]	@ (80021ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800216c:	f043 0304 	orr.w	r3, r3, #4
 8002170:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002174:	e011      	b.n	800219a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002176:	4b0c      	ldr	r3, [pc, #48]	@ (80021a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a0b      	ldr	r2, [pc, #44]	@ (80021a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800217c:	f023 0304 	bic.w	r3, r3, #4
 8002180:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8002182:	4b0a      	ldr	r3, [pc, #40]	@ (80021ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002184:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002188:	f023 030c 	bic.w	r3, r3, #12
 800218c:	4a07      	ldr	r2, [pc, #28]	@ (80021ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800218e:	f043 0308 	orr.w	r3, r3, #8
 8002192:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002196:	e000      	b.n	800219a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002198:	bf00      	nop
  }
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	e000e010 	.word	0xe000e010
 80021ac:	44020c00 	.word	0x44020c00

080021b0 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80021b6:	4b17      	ldr	r3, [pc, #92]	@ (8002214 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0304 	and.w	r3, r3, #4
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80021c2:	2304      	movs	r3, #4
 80021c4:	607b      	str	r3, [r7, #4]
 80021c6:	e01e      	b.n	8002206 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80021c8:	4b13      	ldr	r3, [pc, #76]	@ (8002218 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80021ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80021ce:	f003 030c 	and.w	r3, r3, #12
 80021d2:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	2b08      	cmp	r3, #8
 80021d8:	d00f      	beq.n	80021fa <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d80f      	bhi.n	8002200 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d003      	beq.n	80021f4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80021ec:	e008      	b.n	8002200 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80021ee:	2300      	movs	r3, #0
 80021f0:	607b      	str	r3, [r7, #4]
        break;
 80021f2:	e008      	b.n	8002206 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80021f4:	2301      	movs	r3, #1
 80021f6:	607b      	str	r3, [r7, #4]
        break;
 80021f8:	e005      	b.n	8002206 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80021fa:	2302      	movs	r3, #2
 80021fc:	607b      	str	r3, [r7, #4]
        break;
 80021fe:	e002      	b.n	8002206 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002200:	2300      	movs	r3, #0
 8002202:	607b      	str	r3, [r7, #4]
        break;
 8002204:	bf00      	nop
    }
  }
  return systick_source;
 8002206:	687b      	ldr	r3, [r7, #4]
}
 8002208:	4618      	mov	r0, r3
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	e000e010 	.word	0xe000e010
 8002218:	44020c00 	.word	0x44020c00

0800221c <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8002224:	f7ff fe3a 	bl	8001e9c <HAL_GetTick>
 8002228:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0db      	b.n	80023ec <HAL_DMA_Init+0x1d0>
  if (hdma->Init.Mode == DMA_PFCTRL)
  {
    assert_param(IS_DMA_PFREQ_INSTANCE(hdma->Instance));
  }
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a6e      	ldr	r2, [pc, #440]	@ (80023f4 <HAL_DMA_Init+0x1d8>)
 800223a:	4293      	cmp	r3, r2
 800223c:	f000 809f 	beq.w	800237e <HAL_DMA_Init+0x162>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a6c      	ldr	r2, [pc, #432]	@ (80023f8 <HAL_DMA_Init+0x1dc>)
 8002246:	4293      	cmp	r3, r2
 8002248:	f000 8099 	beq.w	800237e <HAL_DMA_Init+0x162>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a6a      	ldr	r2, [pc, #424]	@ (80023fc <HAL_DMA_Init+0x1e0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	f000 8093 	beq.w	800237e <HAL_DMA_Init+0x162>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a68      	ldr	r2, [pc, #416]	@ (8002400 <HAL_DMA_Init+0x1e4>)
 800225e:	4293      	cmp	r3, r2
 8002260:	f000 808d 	beq.w	800237e <HAL_DMA_Init+0x162>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a66      	ldr	r2, [pc, #408]	@ (8002404 <HAL_DMA_Init+0x1e8>)
 800226a:	4293      	cmp	r3, r2
 800226c:	f000 8087 	beq.w	800237e <HAL_DMA_Init+0x162>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a64      	ldr	r2, [pc, #400]	@ (8002408 <HAL_DMA_Init+0x1ec>)
 8002276:	4293      	cmp	r3, r2
 8002278:	f000 8081 	beq.w	800237e <HAL_DMA_Init+0x162>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a62      	ldr	r2, [pc, #392]	@ (800240c <HAL_DMA_Init+0x1f0>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d07b      	beq.n	800237e <HAL_DMA_Init+0x162>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a61      	ldr	r2, [pc, #388]	@ (8002410 <HAL_DMA_Init+0x1f4>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d076      	beq.n	800237e <HAL_DMA_Init+0x162>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a5f      	ldr	r2, [pc, #380]	@ (8002414 <HAL_DMA_Init+0x1f8>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d071      	beq.n	800237e <HAL_DMA_Init+0x162>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a5e      	ldr	r2, [pc, #376]	@ (8002418 <HAL_DMA_Init+0x1fc>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d06c      	beq.n	800237e <HAL_DMA_Init+0x162>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a5c      	ldr	r2, [pc, #368]	@ (800241c <HAL_DMA_Init+0x200>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d067      	beq.n	800237e <HAL_DMA_Init+0x162>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a5b      	ldr	r2, [pc, #364]	@ (8002420 <HAL_DMA_Init+0x204>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d062      	beq.n	800237e <HAL_DMA_Init+0x162>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a59      	ldr	r2, [pc, #356]	@ (8002424 <HAL_DMA_Init+0x208>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d05d      	beq.n	800237e <HAL_DMA_Init+0x162>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a58      	ldr	r2, [pc, #352]	@ (8002428 <HAL_DMA_Init+0x20c>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d058      	beq.n	800237e <HAL_DMA_Init+0x162>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a56      	ldr	r2, [pc, #344]	@ (800242c <HAL_DMA_Init+0x210>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d053      	beq.n	800237e <HAL_DMA_Init+0x162>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a55      	ldr	r2, [pc, #340]	@ (8002430 <HAL_DMA_Init+0x214>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d04e      	beq.n	800237e <HAL_DMA_Init+0x162>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a53      	ldr	r2, [pc, #332]	@ (8002434 <HAL_DMA_Init+0x218>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d049      	beq.n	800237e <HAL_DMA_Init+0x162>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a52      	ldr	r2, [pc, #328]	@ (8002438 <HAL_DMA_Init+0x21c>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d044      	beq.n	800237e <HAL_DMA_Init+0x162>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a50      	ldr	r2, [pc, #320]	@ (800243c <HAL_DMA_Init+0x220>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d03f      	beq.n	800237e <HAL_DMA_Init+0x162>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a4f      	ldr	r2, [pc, #316]	@ (8002440 <HAL_DMA_Init+0x224>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d03a      	beq.n	800237e <HAL_DMA_Init+0x162>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a4d      	ldr	r2, [pc, #308]	@ (8002444 <HAL_DMA_Init+0x228>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d035      	beq.n	800237e <HAL_DMA_Init+0x162>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a4c      	ldr	r2, [pc, #304]	@ (8002448 <HAL_DMA_Init+0x22c>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d030      	beq.n	800237e <HAL_DMA_Init+0x162>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a4a      	ldr	r2, [pc, #296]	@ (800244c <HAL_DMA_Init+0x230>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d02b      	beq.n	800237e <HAL_DMA_Init+0x162>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a49      	ldr	r2, [pc, #292]	@ (8002450 <HAL_DMA_Init+0x234>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d026      	beq.n	800237e <HAL_DMA_Init+0x162>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a47      	ldr	r2, [pc, #284]	@ (8002454 <HAL_DMA_Init+0x238>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d021      	beq.n	800237e <HAL_DMA_Init+0x162>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a46      	ldr	r2, [pc, #280]	@ (8002458 <HAL_DMA_Init+0x23c>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d01c      	beq.n	800237e <HAL_DMA_Init+0x162>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a44      	ldr	r2, [pc, #272]	@ (800245c <HAL_DMA_Init+0x240>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d017      	beq.n	800237e <HAL_DMA_Init+0x162>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a43      	ldr	r2, [pc, #268]	@ (8002460 <HAL_DMA_Init+0x244>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d012      	beq.n	800237e <HAL_DMA_Init+0x162>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a41      	ldr	r2, [pc, #260]	@ (8002464 <HAL_DMA_Init+0x248>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d00d      	beq.n	800237e <HAL_DMA_Init+0x162>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a40      	ldr	r2, [pc, #256]	@ (8002468 <HAL_DMA_Init+0x24c>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d008      	beq.n	800237e <HAL_DMA_Init+0x162>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a3e      	ldr	r2, [pc, #248]	@ (800246c <HAL_DMA_Init+0x250>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d003      	beq.n	800237e <HAL_DMA_Init+0x162>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a3d      	ldr	r2, [pc, #244]	@ (8002470 <HAL_DMA_Init+0x254>)
 800237c:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2202      	movs	r2, #2
 800238a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	695a      	ldr	r2, [r3, #20]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f042 0206 	orr.w	r2, r2, #6
 800239c:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800239e:	e00f      	b.n	80023c0 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80023a0:	f7ff fd7c 	bl	8001e9c <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b05      	cmp	r3, #5
 80023ac:	d908      	bls.n	80023c0 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2210      	movs	r2, #16
 80023b2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2203      	movs	r2, #3
 80023b8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e015      	b.n	80023ec <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1e8      	bne.n	80023a0 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fb18 	bl	8002a04 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40020050 	.word	0x40020050
 80023f8:	50020050 	.word	0x50020050
 80023fc:	400200d0 	.word	0x400200d0
 8002400:	500200d0 	.word	0x500200d0
 8002404:	40020150 	.word	0x40020150
 8002408:	50020150 	.word	0x50020150
 800240c:	400201d0 	.word	0x400201d0
 8002410:	500201d0 	.word	0x500201d0
 8002414:	40020250 	.word	0x40020250
 8002418:	50020250 	.word	0x50020250
 800241c:	400202d0 	.word	0x400202d0
 8002420:	500202d0 	.word	0x500202d0
 8002424:	40020350 	.word	0x40020350
 8002428:	50020350 	.word	0x50020350
 800242c:	400203d0 	.word	0x400203d0
 8002430:	500203d0 	.word	0x500203d0
 8002434:	40021050 	.word	0x40021050
 8002438:	50021050 	.word	0x50021050
 800243c:	400210d0 	.word	0x400210d0
 8002440:	500210d0 	.word	0x500210d0
 8002444:	40021150 	.word	0x40021150
 8002448:	50021150 	.word	0x50021150
 800244c:	400211d0 	.word	0x400211d0
 8002450:	500211d0 	.word	0x500211d0
 8002454:	40021250 	.word	0x40021250
 8002458:	50021250 	.word	0x50021250
 800245c:	400212d0 	.word	0x400212d0
 8002460:	500212d0 	.word	0x500212d0
 8002464:	40021350 	.word	0x40021350
 8002468:	50021350 	.word	0x50021350
 800246c:	400213d0 	.word	0x400213d0
 8002470:	500213d0 	.word	0x500213d0

08002474 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
 8002480:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e04f      	b.n	800252c <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002492:	2b01      	cmp	r3, #1
 8002494:	d101      	bne.n	800249a <HAL_DMA_Start_IT+0x26>
 8002496:	2302      	movs	r3, #2
 8002498:	e048      	b.n	800252c <HAL_DMA_Start_IT+0xb8>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d136      	bne.n	800251c <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2202      	movs	r2, #2
 80024b2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	68b9      	ldr	r1, [r7, #8]
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 fa78 	bl	80029b8 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	695a      	ldr	r2, [r3, #20]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80024d6:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d007      	beq.n	80024f0 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	695a      	ldr	r2, [r3, #20]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024ee:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d007      	beq.n	8002508 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	695a      	ldr	r2, [r3, #20]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002506:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695a      	ldr	r2, [r3, #20]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
 800251a:	e007      	b.n	800252c <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2240      	movs	r2, #64	@ 0x40
 8002520:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
}
 800252c:	4618      	mov	r0, r3
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 800253c:	f7ff fcae 	bl	8001e9c <HAL_GetTick>
 8002540:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e06b      	b.n	8002624 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d008      	beq.n	800256a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2220      	movs	r2, #32
 800255c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e05c      	b.n	8002624 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695a      	ldr	r2, [r3, #20]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f042 0204 	orr.w	r2, r2, #4
 8002578:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2205      	movs	r2, #5
 800257e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002582:	e020      	b.n	80025c6 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002584:	f7ff fc8a 	bl	8001e9c <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b05      	cmp	r3, #5
 8002590:	d919      	bls.n	80025c6 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002596:	f043 0210 	orr.w	r2, r3, #16
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2203      	movs	r2, #3
 80025a2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025b6:	2201      	movs	r2, #1
 80025b8:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e02e      	b.n	8002624 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0d7      	beq.n	8002584 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	695a      	ldr	r2, [r3, #20]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0202 	orr.w	r2, r2, #2
 80025e2:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2204      	movs	r2, #4
 80025e8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80025f4:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002606:	2b00      	cmp	r3, #0
 8002608:	d007      	beq.n	800261a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800260e:	2201      	movs	r2, #1
 8002610:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2200      	movs	r2, #0
 8002618:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e019      	b.n	8002672 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d004      	beq.n	8002654 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2220      	movs	r2, #32
 800264e:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e00e      	b.n	8002672 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2204      	movs	r2, #4
 8002658:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6812      	ldr	r2, [r2, #0]
 8002666:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800266a:	f043 0304 	orr.w	r3, r3, #4
 800266e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b086      	sub	sp, #24
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800268e:	f023 030f 	bic.w	r3, r3, #15
 8002692:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800269c:	3b50      	subs	r3, #80	@ 0x50
 800269e:	09db      	lsrs	r3, r3, #7
 80026a0:	f003 031f 	and.w	r3, r3, #31
 80026a4:	2201      	movs	r2, #1
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	4013      	ands	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 813b 	beq.w	8002934 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d011      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00a      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026e2:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e8:	f043 0201 	orr.w	r2, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d011      	beq.n	8002722 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00a      	beq.n	8002722 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002714:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800271a:	f043 0202 	orr.w	r2, r3, #2
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d011      	beq.n	8002754 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00a      	beq.n	8002754 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002746:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800274c:	f043 0204 	orr.w	r2, r3, #4
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d011      	beq.n	8002786 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00a      	beq.n	8002786 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002778:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277e:	f043 0208 	orr.w	r2, r3, #8
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002790:	2b00      	cmp	r3, #0
 8002792:	d013      	beq.n	80027bc <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00c      	beq.n	80027bc <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027aa:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d003      	beq.n	80027bc <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d04c      	beq.n	8002864 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d045      	beq.n	8002864 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027e0:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d12e      	bne.n	800284c <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	695a      	ldr	r2, [r3, #20]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027fc:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695a      	ldr	r2, [r3, #20]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f042 0202 	orr.w	r2, r2, #2
 800280c:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800281a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800281e:	2b00      	cmp	r3, #0
 8002820:	d007      	beq.n	8002832 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002826:	2201      	movs	r2, #1
 8002828:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2200      	movs	r2, #0
 8002830:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800283e:	2b00      	cmp	r3, #0
 8002840:	d07a      	beq.n	8002938 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	4798      	blx	r3
        }

        return;
 800284a:	e075      	b.n	8002938 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2205      	movs	r2, #5
 8002850:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800286e:	2b00      	cmp	r3, #0
 8002870:	d039      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800287c:	2b00      	cmp	r3, #0
 800287e:	d032      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002888:	2b00      	cmp	r3, #0
 800288a:	d012      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002892:	2b00      	cmp	r3, #0
 8002894:	d116      	bne.n	80028c4 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800289c:	2b00      	cmp	r3, #0
 800289e:	d111      	bne.n	80028c4 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028ac:	2201      	movs	r2, #1
 80028ae:	731a      	strb	r2, [r3, #12]
 80028b0:	e008      	b.n	80028c4 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d103      	bne.n	80028c4 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80028cc:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d025      	beq.n	800293a <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695a      	ldr	r2, [r3, #20]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f042 0202 	orr.w	r2, r2, #2
 80028fc:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800290a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002916:	2201      	movs	r2, #1
 8002918:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002926:	2b00      	cmp	r3, #0
 8002928:	d007      	beq.n	800293a <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	4798      	blx	r3
 8002932:	e002      	b.n	800293a <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8002934:	bf00      	nop
 8002936:	e000      	b.n	800293a <HAL_DMA_IRQHandler+0x2bc>
        return;
 8002938:	bf00      	nop
    }
  }
}
 800293a:	3718      	adds	r7, #24
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e02b      	b.n	80029ac <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800295c:	f023 030f 	bic.w	r3, r3, #15
 8002960:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800296a:	3b50      	subs	r3, #80	@ 0x50
 800296c:	09db      	lsrs	r3, r3, #7
 800296e:	f003 031f 	and.w	r3, r3, #31
 8002972:	2201      	movs	r2, #1
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	2b00      	cmp	r3, #0
 8002982:	d012      	beq.n	80029aa <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	f003 0311 	and.w	r3, r3, #17
 800298a:	2b11      	cmp	r3, #17
 800298c:	d106      	bne.n	800299c <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	431a      	orrs	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	e006      	b.n	80029aa <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	401a      	ands	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
 80029c4:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029cc:	0c1b      	lsrs	r3, r3, #16
 80029ce:	041b      	lsls	r3, r3, #16
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	b291      	uxth	r1, r2
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	6812      	ldr	r2, [r2, #0]
 80029d8:	430b      	orrs	r3, r1
 80029da:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80029e4:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80029f6:	bf00      	nop
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
	...

08002a04 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695a      	ldr	r2, [r3, #20]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	431a      	orrs	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a53      	ldr	r2, [pc, #332]	@ (8002b90 <DMA_Init+0x18c>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	f000 80a0 	beq.w	8002b8a <DMA_Init+0x186>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a51      	ldr	r2, [pc, #324]	@ (8002b94 <DMA_Init+0x190>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	f000 809a 	beq.w	8002b8a <DMA_Init+0x186>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a4f      	ldr	r2, [pc, #316]	@ (8002b98 <DMA_Init+0x194>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	f000 8094 	beq.w	8002b8a <DMA_Init+0x186>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a4d      	ldr	r2, [pc, #308]	@ (8002b9c <DMA_Init+0x198>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	f000 808e 	beq.w	8002b8a <DMA_Init+0x186>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a4b      	ldr	r2, [pc, #300]	@ (8002ba0 <DMA_Init+0x19c>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	f000 8088 	beq.w	8002b8a <DMA_Init+0x186>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a49      	ldr	r2, [pc, #292]	@ (8002ba4 <DMA_Init+0x1a0>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	f000 8082 	beq.w	8002b8a <DMA_Init+0x186>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a47      	ldr	r2, [pc, #284]	@ (8002ba8 <DMA_Init+0x1a4>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d07c      	beq.n	8002b8a <DMA_Init+0x186>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a45      	ldr	r2, [pc, #276]	@ (8002bac <DMA_Init+0x1a8>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d077      	beq.n	8002b8a <DMA_Init+0x186>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a44      	ldr	r2, [pc, #272]	@ (8002bb0 <DMA_Init+0x1ac>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d072      	beq.n	8002b8a <DMA_Init+0x186>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a42      	ldr	r2, [pc, #264]	@ (8002bb4 <DMA_Init+0x1b0>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d06d      	beq.n	8002b8a <DMA_Init+0x186>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a41      	ldr	r2, [pc, #260]	@ (8002bb8 <DMA_Init+0x1b4>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d068      	beq.n	8002b8a <DMA_Init+0x186>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a3f      	ldr	r2, [pc, #252]	@ (8002bbc <DMA_Init+0x1b8>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d063      	beq.n	8002b8a <DMA_Init+0x186>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a3e      	ldr	r2, [pc, #248]	@ (8002bc0 <DMA_Init+0x1bc>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d05e      	beq.n	8002b8a <DMA_Init+0x186>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a3c      	ldr	r2, [pc, #240]	@ (8002bc4 <DMA_Init+0x1c0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d059      	beq.n	8002b8a <DMA_Init+0x186>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a3b      	ldr	r2, [pc, #236]	@ (8002bc8 <DMA_Init+0x1c4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d054      	beq.n	8002b8a <DMA_Init+0x186>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a39      	ldr	r2, [pc, #228]	@ (8002bcc <DMA_Init+0x1c8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d04f      	beq.n	8002b8a <DMA_Init+0x186>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a38      	ldr	r2, [pc, #224]	@ (8002bd0 <DMA_Init+0x1cc>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d04a      	beq.n	8002b8a <DMA_Init+0x186>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a36      	ldr	r2, [pc, #216]	@ (8002bd4 <DMA_Init+0x1d0>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d045      	beq.n	8002b8a <DMA_Init+0x186>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a35      	ldr	r2, [pc, #212]	@ (8002bd8 <DMA_Init+0x1d4>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d040      	beq.n	8002b8a <DMA_Init+0x186>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a33      	ldr	r2, [pc, #204]	@ (8002bdc <DMA_Init+0x1d8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d03b      	beq.n	8002b8a <DMA_Init+0x186>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a32      	ldr	r2, [pc, #200]	@ (8002be0 <DMA_Init+0x1dc>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d036      	beq.n	8002b8a <DMA_Init+0x186>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a30      	ldr	r2, [pc, #192]	@ (8002be4 <DMA_Init+0x1e0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d031      	beq.n	8002b8a <DMA_Init+0x186>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a2f      	ldr	r2, [pc, #188]	@ (8002be8 <DMA_Init+0x1e4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d02c      	beq.n	8002b8a <DMA_Init+0x186>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a2d      	ldr	r2, [pc, #180]	@ (8002bec <DMA_Init+0x1e8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d027      	beq.n	8002b8a <DMA_Init+0x186>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a2c      	ldr	r2, [pc, #176]	@ (8002bf0 <DMA_Init+0x1ec>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d022      	beq.n	8002b8a <DMA_Init+0x186>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a2a      	ldr	r2, [pc, #168]	@ (8002bf4 <DMA_Init+0x1f0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d01d      	beq.n	8002b8a <DMA_Init+0x186>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a29      	ldr	r2, [pc, #164]	@ (8002bf8 <DMA_Init+0x1f4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d018      	beq.n	8002b8a <DMA_Init+0x186>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a27      	ldr	r2, [pc, #156]	@ (8002bfc <DMA_Init+0x1f8>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d013      	beq.n	8002b8a <DMA_Init+0x186>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a26      	ldr	r2, [pc, #152]	@ (8002c00 <DMA_Init+0x1fc>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d00e      	beq.n	8002b8a <DMA_Init+0x186>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a24      	ldr	r2, [pc, #144]	@ (8002c04 <DMA_Init+0x200>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d009      	beq.n	8002b8a <DMA_Init+0x186>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a23      	ldr	r2, [pc, #140]	@ (8002c08 <DMA_Init+0x204>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d004      	beq.n	8002b8a <DMA_Init+0x186>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a21      	ldr	r2, [pc, #132]	@ (8002c0c <DMA_Init+0x208>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d142      	bne.n	8002c10 <DMA_Init+0x20c>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e041      	b.n	8002c12 <DMA_Init+0x20e>
 8002b8e:	bf00      	nop
 8002b90:	40020050 	.word	0x40020050
 8002b94:	50020050 	.word	0x50020050
 8002b98:	400200d0 	.word	0x400200d0
 8002b9c:	500200d0 	.word	0x500200d0
 8002ba0:	40020150 	.word	0x40020150
 8002ba4:	50020150 	.word	0x50020150
 8002ba8:	400201d0 	.word	0x400201d0
 8002bac:	500201d0 	.word	0x500201d0
 8002bb0:	40020250 	.word	0x40020250
 8002bb4:	50020250 	.word	0x50020250
 8002bb8:	400202d0 	.word	0x400202d0
 8002bbc:	500202d0 	.word	0x500202d0
 8002bc0:	40020350 	.word	0x40020350
 8002bc4:	50020350 	.word	0x50020350
 8002bc8:	400203d0 	.word	0x400203d0
 8002bcc:	500203d0 	.word	0x500203d0
 8002bd0:	40021050 	.word	0x40021050
 8002bd4:	50021050 	.word	0x50021050
 8002bd8:	400210d0 	.word	0x400210d0
 8002bdc:	500210d0 	.word	0x500210d0
 8002be0:	40021150 	.word	0x40021150
 8002be4:	50021150 	.word	0x50021150
 8002be8:	400211d0 	.word	0x400211d0
 8002bec:	500211d0 	.word	0x500211d0
 8002bf0:	40021250 	.word	0x40021250
 8002bf4:	50021250 	.word	0x50021250
 8002bf8:	400212d0 	.word	0x400212d0
 8002bfc:	500212d0 	.word	0x500212d0
 8002c00:	40021350 	.word	0x40021350
 8002c04:	50021350 	.word	0x50021350
 8002c08:	400213d0 	.word	0x400213d0
 8002c0c:	500213d0 	.word	0x500213d0
 8002c10:	2300      	movs	r3, #0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d012      	beq.n	8002c3c <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	051b      	lsls	r3, r3, #20
 8002c22:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002c26:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	011b      	lsls	r3, r3, #4
 8002c30:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002c34:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c42:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	641a      	str	r2, [r3, #64]	@ 0x40
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
#endif /* DMA_CTR1_SSEC */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c60:	4313      	orrs	r3, r2
 8002c62:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c6c:	f040 80b0 	bne.w	8002dd0 <DMA_Init+0x3cc>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a84      	ldr	r2, [pc, #528]	@ (8002e88 <DMA_Init+0x484>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	f000 80a0 	beq.w	8002dbc <DMA_Init+0x3b8>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a82      	ldr	r2, [pc, #520]	@ (8002e8c <DMA_Init+0x488>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	f000 809a 	beq.w	8002dbc <DMA_Init+0x3b8>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a80      	ldr	r2, [pc, #512]	@ (8002e90 <DMA_Init+0x48c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	f000 8094 	beq.w	8002dbc <DMA_Init+0x3b8>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a7e      	ldr	r2, [pc, #504]	@ (8002e94 <DMA_Init+0x490>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	f000 808e 	beq.w	8002dbc <DMA_Init+0x3b8>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a7c      	ldr	r2, [pc, #496]	@ (8002e98 <DMA_Init+0x494>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	f000 8088 	beq.w	8002dbc <DMA_Init+0x3b8>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a7a      	ldr	r2, [pc, #488]	@ (8002e9c <DMA_Init+0x498>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	f000 8082 	beq.w	8002dbc <DMA_Init+0x3b8>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a78      	ldr	r2, [pc, #480]	@ (8002ea0 <DMA_Init+0x49c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d07c      	beq.n	8002dbc <DMA_Init+0x3b8>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a77      	ldr	r2, [pc, #476]	@ (8002ea4 <DMA_Init+0x4a0>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d077      	beq.n	8002dbc <DMA_Init+0x3b8>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a75      	ldr	r2, [pc, #468]	@ (8002ea8 <DMA_Init+0x4a4>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d072      	beq.n	8002dbc <DMA_Init+0x3b8>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a74      	ldr	r2, [pc, #464]	@ (8002eac <DMA_Init+0x4a8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d06d      	beq.n	8002dbc <DMA_Init+0x3b8>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a72      	ldr	r2, [pc, #456]	@ (8002eb0 <DMA_Init+0x4ac>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d068      	beq.n	8002dbc <DMA_Init+0x3b8>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a71      	ldr	r2, [pc, #452]	@ (8002eb4 <DMA_Init+0x4b0>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d063      	beq.n	8002dbc <DMA_Init+0x3b8>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a6f      	ldr	r2, [pc, #444]	@ (8002eb8 <DMA_Init+0x4b4>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d05e      	beq.n	8002dbc <DMA_Init+0x3b8>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a6e      	ldr	r2, [pc, #440]	@ (8002ebc <DMA_Init+0x4b8>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d059      	beq.n	8002dbc <DMA_Init+0x3b8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a6c      	ldr	r2, [pc, #432]	@ (8002ec0 <DMA_Init+0x4bc>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d054      	beq.n	8002dbc <DMA_Init+0x3b8>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a6b      	ldr	r2, [pc, #428]	@ (8002ec4 <DMA_Init+0x4c0>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d04f      	beq.n	8002dbc <DMA_Init+0x3b8>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a69      	ldr	r2, [pc, #420]	@ (8002ec8 <DMA_Init+0x4c4>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d04a      	beq.n	8002dbc <DMA_Init+0x3b8>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a68      	ldr	r2, [pc, #416]	@ (8002ecc <DMA_Init+0x4c8>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d045      	beq.n	8002dbc <DMA_Init+0x3b8>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a66      	ldr	r2, [pc, #408]	@ (8002ed0 <DMA_Init+0x4cc>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d040      	beq.n	8002dbc <DMA_Init+0x3b8>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a65      	ldr	r2, [pc, #404]	@ (8002ed4 <DMA_Init+0x4d0>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d03b      	beq.n	8002dbc <DMA_Init+0x3b8>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a63      	ldr	r2, [pc, #396]	@ (8002ed8 <DMA_Init+0x4d4>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d036      	beq.n	8002dbc <DMA_Init+0x3b8>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a62      	ldr	r2, [pc, #392]	@ (8002edc <DMA_Init+0x4d8>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d031      	beq.n	8002dbc <DMA_Init+0x3b8>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a60      	ldr	r2, [pc, #384]	@ (8002ee0 <DMA_Init+0x4dc>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d02c      	beq.n	8002dbc <DMA_Init+0x3b8>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a5f      	ldr	r2, [pc, #380]	@ (8002ee4 <DMA_Init+0x4e0>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d027      	beq.n	8002dbc <DMA_Init+0x3b8>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a5d      	ldr	r2, [pc, #372]	@ (8002ee8 <DMA_Init+0x4e4>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d022      	beq.n	8002dbc <DMA_Init+0x3b8>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a5c      	ldr	r2, [pc, #368]	@ (8002eec <DMA_Init+0x4e8>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d01d      	beq.n	8002dbc <DMA_Init+0x3b8>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a5a      	ldr	r2, [pc, #360]	@ (8002ef0 <DMA_Init+0x4ec>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d018      	beq.n	8002dbc <DMA_Init+0x3b8>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a59      	ldr	r2, [pc, #356]	@ (8002ef4 <DMA_Init+0x4f0>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d013      	beq.n	8002dbc <DMA_Init+0x3b8>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a57      	ldr	r2, [pc, #348]	@ (8002ef8 <DMA_Init+0x4f4>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d00e      	beq.n	8002dbc <DMA_Init+0x3b8>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a56      	ldr	r2, [pc, #344]	@ (8002efc <DMA_Init+0x4f8>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d009      	beq.n	8002dbc <DMA_Init+0x3b8>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a54      	ldr	r2, [pc, #336]	@ (8002f00 <DMA_Init+0x4fc>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d004      	beq.n	8002dbc <DMA_Init+0x3b8>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a53      	ldr	r2, [pc, #332]	@ (8002f04 <DMA_Init+0x500>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d101      	bne.n	8002dc0 <DMA_Init+0x3bc>
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e000      	b.n	8002dc2 <DMA_Init+0x3be>
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00d      	beq.n	8002de2 <DMA_Init+0x3de>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	e008      	b.n	8002de2 <DMA_Init+0x3de>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dd8:	d103      	bne.n	8002de2 <DMA_Init+0x3de>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002de0:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Set DMA channel operation mode */
  tmpreg |= hdma->Init.Mode;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002df2:	4b45      	ldr	r3, [pc, #276]	@ (8002f08 <DMA_Init+0x504>)
 8002df4:	4013      	ands	r3, r2
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6812      	ldr	r2, [r2, #0]
 8002dfa:	68f9      	ldr	r1, [r7, #12]
 8002dfc:	430b      	orrs	r3, r1
 8002dfe:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2200      	movs	r2, #0
 8002e06:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a2a      	ldr	r2, [pc, #168]	@ (8002eb8 <DMA_Init+0x4b4>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d022      	beq.n	8002e58 <DMA_Init+0x454>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a29      	ldr	r2, [pc, #164]	@ (8002ebc <DMA_Init+0x4b8>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d01d      	beq.n	8002e58 <DMA_Init+0x454>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a27      	ldr	r2, [pc, #156]	@ (8002ec0 <DMA_Init+0x4bc>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d018      	beq.n	8002e58 <DMA_Init+0x454>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a26      	ldr	r2, [pc, #152]	@ (8002ec4 <DMA_Init+0x4c0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d013      	beq.n	8002e58 <DMA_Init+0x454>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a30      	ldr	r2, [pc, #192]	@ (8002ef8 <DMA_Init+0x4f4>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d00e      	beq.n	8002e58 <DMA_Init+0x454>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a2f      	ldr	r2, [pc, #188]	@ (8002efc <DMA_Init+0x4f8>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d009      	beq.n	8002e58 <DMA_Init+0x454>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a2d      	ldr	r2, [pc, #180]	@ (8002f00 <DMA_Init+0x4fc>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d004      	beq.n	8002e58 <DMA_Init+0x454>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a2c      	ldr	r2, [pc, #176]	@ (8002f04 <DMA_Init+0x500>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d101      	bne.n	8002e5c <DMA_Init+0x458>
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e000      	b.n	8002e5e <DMA_Init+0x45a>
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d007      	beq.n	8002e72 <DMA_Init+0x46e>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2200      	movs	r2, #0
 8002e68:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2200      	movs	r2, #0
 8002e78:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8002e7a:	bf00      	nop
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	40020050 	.word	0x40020050
 8002e8c:	50020050 	.word	0x50020050
 8002e90:	400200d0 	.word	0x400200d0
 8002e94:	500200d0 	.word	0x500200d0
 8002e98:	40020150 	.word	0x40020150
 8002e9c:	50020150 	.word	0x50020150
 8002ea0:	400201d0 	.word	0x400201d0
 8002ea4:	500201d0 	.word	0x500201d0
 8002ea8:	40020250 	.word	0x40020250
 8002eac:	50020250 	.word	0x50020250
 8002eb0:	400202d0 	.word	0x400202d0
 8002eb4:	500202d0 	.word	0x500202d0
 8002eb8:	40020350 	.word	0x40020350
 8002ebc:	50020350 	.word	0x50020350
 8002ec0:	400203d0 	.word	0x400203d0
 8002ec4:	500203d0 	.word	0x500203d0
 8002ec8:	40021050 	.word	0x40021050
 8002ecc:	50021050 	.word	0x50021050
 8002ed0:	400210d0 	.word	0x400210d0
 8002ed4:	500210d0 	.word	0x500210d0
 8002ed8:	40021150 	.word	0x40021150
 8002edc:	50021150 	.word	0x50021150
 8002ee0:	400211d0 	.word	0x400211d0
 8002ee4:	500211d0 	.word	0x500211d0
 8002ee8:	40021250 	.word	0x40021250
 8002eec:	50021250 	.word	0x50021250
 8002ef0:	400212d0 	.word	0x400212d0
 8002ef4:	500212d0 	.word	0x500212d0
 8002ef8:	40021350 	.word	0x40021350
 8002efc:	50021350 	.word	0x50021350
 8002f00:	400213d0 	.word	0x400213d0
 8002f04:	500213d0 	.word	0x500213d0
 8002f08:	3cc02100 	.word	0x3cc02100

08002f0c <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_DMAEx_List_Start_IT+0x16>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e082      	b.n	800302c <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002f2c:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f38:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8002f3a:	7dfb      	ldrb	r3, [r7, #23]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d005      	beq.n	8002f4c <HAL_DMAEx_List_Start_IT+0x40>
 8002f40:	7dfb      	ldrb	r3, [r7, #23]
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d16a      	bne.n	800301c <HAL_DMAEx_List_Start_IT+0x110>
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d067      	beq.n	800301c <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d157      	bne.n	8003008 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d101      	bne.n	8002f66 <HAL_DMAEx_List_Start_IT+0x5a>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e062      	b.n	800302c <HAL_DMAEx_List_Start_IT+0x120>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2202      	movs	r2, #2
 8002f72:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f88:	2200      	movs	r2, #0
 8002f8a:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695a      	ldr	r2, [r3, #20]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8002f9a:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d007      	beq.n	8002fb4 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695a      	ldr	r2, [r3, #20]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fb2:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d007      	beq.n	8002fcc <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695a      	ldr	r2, [r3, #20]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fca:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f107 010c 	add.w	r1, r7, #12
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 f82b 	bl	8003034 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	0c0b      	lsrs	r3, r1, #16
 8002fec:	041b      	lsls	r3, r3, #16
 8002fee:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	68f9      	ldr	r1, [r7, #12]
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6812      	ldr	r2, [r2, #0]
 8003004:	430b      	orrs	r3, r1
 8003006:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	695a      	ldr	r2, [r3, #20]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	e007      	b.n	800302c <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2240      	movs	r2, #64	@ 0x40
 8003020:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00c      	beq.n	8003066 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	4a0d      	ldr	r2, [pc, #52]	@ (800308c <DMA_List_GetCLLRNodeInfo+0x58>)
 8003056:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00f      	beq.n	800307e <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2207      	movs	r2, #7
 8003062:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8003064:	e00b      	b.n	800307e <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	4a08      	ldr	r2, [pc, #32]	@ (8003090 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8003070:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d002      	beq.n	800307e <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2205      	movs	r2, #5
 800307c:	601a      	str	r2, [r3, #0]
}
 800307e:	bf00      	nop
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	fe010000 	.word	0xfe010000
 8003090:	f8010000 	.word	0xf8010000

08003094 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e147      	b.n	8003336 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d106      	bne.n	80030c0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7fd fe20 	bl	8000d00 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	699a      	ldr	r2, [r3, #24]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0210 	bic.w	r2, r2, #16
 80030ce:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030d0:	f7fe fee4 	bl	8001e9c <HAL_GetTick>
 80030d4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80030d6:	e012      	b.n	80030fe <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80030d8:	f7fe fee0 	bl	8001e9c <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b0a      	cmp	r3, #10
 80030e4:	d90b      	bls.n	80030fe <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ea:	f043 0201 	orr.w	r2, r3, #1
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2203      	movs	r2, #3
 80030f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e11b      	b.n	8003336 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b08      	cmp	r3, #8
 800310a:	d0e5      	beq.n	80030d8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	699a      	ldr	r2, [r3, #24]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0201 	orr.w	r2, r2, #1
 800311a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800311c:	f7fe febe 	bl	8001e9c <HAL_GetTick>
 8003120:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003122:	e012      	b.n	800314a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003124:	f7fe feba 	bl	8001e9c <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b0a      	cmp	r3, #10
 8003130:	d90b      	bls.n	800314a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003136:	f043 0201 	orr.w	r2, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2203      	movs	r2, #3
 8003142:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e0f5      	b.n	8003336 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0e5      	beq.n	8003124 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699a      	ldr	r2, [r3, #24]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0202 	orr.w	r2, r2, #2
 8003166:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a74      	ldr	r2, [pc, #464]	@ (8003340 <HAL_FDCAN_Init+0x2ac>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d103      	bne.n	800317a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003172:	4a74      	ldr	r2, [pc, #464]	@ (8003344 <HAL_FDCAN_Init+0x2b0>)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	7c1b      	ldrb	r3, [r3, #16]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d108      	bne.n	8003194 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	699a      	ldr	r2, [r3, #24]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003190:	619a      	str	r2, [r3, #24]
 8003192:	e007      	b.n	80031a4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	699a      	ldr	r2, [r3, #24]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031a2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	7c5b      	ldrb	r3, [r3, #17]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d108      	bne.n	80031be <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699a      	ldr	r2, [r3, #24]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031ba:	619a      	str	r2, [r3, #24]
 80031bc:	e007      	b.n	80031ce <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	699a      	ldr	r2, [r3, #24]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80031cc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	7c9b      	ldrb	r3, [r3, #18]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d108      	bne.n	80031e8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	699a      	ldr	r2, [r3, #24]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80031e4:	619a      	str	r2, [r3, #24]
 80031e6:	e007      	b.n	80031f8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	699a      	ldr	r2, [r3, #24]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80031f6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	699a      	ldr	r2, [r3, #24]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800321c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0210 	bic.w	r2, r2, #16
 800322c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d108      	bne.n	8003248 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	699a      	ldr	r2, [r3, #24]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f042 0204 	orr.w	r2, r2, #4
 8003244:	619a      	str	r2, [r3, #24]
 8003246:	e02c      	b.n	80032a2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d028      	beq.n	80032a2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	2b02      	cmp	r3, #2
 8003256:	d01c      	beq.n	8003292 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699a      	ldr	r2, [r3, #24]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003266:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	691a      	ldr	r2, [r3, #16]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0210 	orr.w	r2, r2, #16
 8003276:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	2b03      	cmp	r3, #3
 800327e:	d110      	bne.n	80032a2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	699a      	ldr	r2, [r3, #24]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0220 	orr.w	r2, r2, #32
 800328e:	619a      	str	r2, [r3, #24]
 8003290:	e007      	b.n	80032a2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	699a      	ldr	r2, [r3, #24]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f042 0220 	orr.w	r2, r2, #32
 80032a0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	3b01      	subs	r3, #1
 80032b0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80032b2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80032ba:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80032ca:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80032cc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032d6:	d115      	bne.n	8003304 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032dc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e2:	3b01      	subs	r3, #1
 80032e4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80032e6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ec:	3b01      	subs	r3, #1
 80032ee:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80032f0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f8:	3b01      	subs	r3, #1
 80032fa:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003300:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003302:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 fa86 	bl	800382c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	4000a400 	.word	0x4000a400
 8003344:	4000a500 	.word	0x4000a500

08003348 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8003348:	b480      	push	{r7}
 800334a:	b087      	sub	sp, #28
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003358:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800335a:	7dfb      	ldrb	r3, [r7, #23]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d002      	beq.n	8003366 <HAL_FDCAN_ConfigFilter+0x1e>
 8003360:	7dfb      	ldrb	r3, [r7, #23]
 8003362:	2b02      	cmp	r3, #2
 8003364:	d13d      	bne.n	80033e2 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d119      	bne.n	80033a2 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800337a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8003382:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003388:	4313      	orrs	r3, r2
 800338a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	e01d      	b.n	80033de <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	075a      	lsls	r2, r3, #29
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	079a      	lsls	r2, r3, #30
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4413      	add	r3, r2
 80033ca:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	3304      	adds	r3, #4
 80033d6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80033de:	2300      	movs	r3, #0
 80033e0:	e006      	b.n	80033f0 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033e6:	f043 0202 	orr.w	r2, r3, #2
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
  }
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	371c      	adds	r7, #28
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b01      	cmp	r3, #1
 800340e:	d110      	bne.n	8003432 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699a      	ldr	r2, [r3, #24]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0201 	bic.w	r2, r2, #1
 8003426:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800342e:	2300      	movs	r3, #0
 8003430:	e006      	b.n	8003440 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003436:	f043 0204 	orr.w	r2, r3, #4
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
  }
}
 8003440:	4618      	mov	r0, r3
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d12c      	bne.n	80034be <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800346c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d007      	beq.n	8003484 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003478:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e023      	b.n	80034cc <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800348c:	0c1b      	lsrs	r3, r3, #16
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	68b9      	ldr	r1, [r7, #8]
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 fa28 	bl	80038f0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2101      	movs	r1, #1
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	fa01 f202 	lsl.w	r2, r1, r2
 80034ac:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80034b0:	2201      	movs	r2, #1
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	409a      	lsls	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 80034ba:	2300      	movs	r3, #0
 80034bc:	e006      	b.n	80034cc <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034c2:	f043 0208 	orr.w	r2, r3, #8
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
  }
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 80034ea:	68fb      	ldr	r3, [r7, #12]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b08c      	sub	sp, #48	@ 0x30
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003506:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800350a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003512:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003514:	4013      	ands	r3, r2
 8003516:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800352a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800352c:	4013      	ands	r3, r2
 800352e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003536:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800353a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003542:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003544:	4013      	ands	r3, r2
 8003546:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800354e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8003552:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800355a:	6a3a      	ldr	r2, [r7, #32]
 800355c:	4013      	ands	r3, r2
 800355e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003566:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800356a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003572:	69fa      	ldr	r2, [r7, #28]
 8003574:	4013      	ands	r3, r2
 8003576:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800357e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003586:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00b      	beq.n	80035aa <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003598:	2b00      	cmp	r3, #0
 800359a:	d006      	beq.n	80035aa <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2240      	movs	r2, #64	@ 0x40
 80035a2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f921 	bl	80037ec <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d019      	beq.n	80035e8 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d014      	beq.n	80035e8 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80035c6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4013      	ands	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035de:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80035e0:	6939      	ldr	r1, [r7, #16]
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f8e3 	bl	80037ae <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80035e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d007      	beq.n	80035fe <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035f4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80035f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f8a2 	bl	8003742 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80035fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003600:	2b00      	cmp	r3, #0
 8003602:	d007      	beq.n	8003614 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800360a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800360c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f8a2 	bl	8003758 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003616:	2b00      	cmp	r3, #0
 8003618:	d007      	beq.n	800362a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003620:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003622:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f8a2 	bl	800376e <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00c      	beq.n	800364e <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800363a:	2b00      	cmp	r3, #0
 800363c:	d007      	beq.n	800364e <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003646:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f89b 	bl	8003784 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003654:	2b00      	cmp	r3, #0
 8003656:	d018      	beq.n	800368a <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800365e:	2b00      	cmp	r3, #0
 8003660:	d013      	beq.n	800368a <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800366a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4013      	ands	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2280      	movs	r2, #128	@ 0x80
 8003680:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003682:	68f9      	ldr	r1, [r7, #12]
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f887 	bl	8003798 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00c      	beq.n	80036ae <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d007      	beq.n	80036ae <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80036a6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f88b 	bl	80037c4 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00c      	beq.n	80036d2 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d007      	beq.n	80036d2 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80036ca:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f883 	bl	80037d8 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00f      	beq.n	80036fc <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80036ee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d007      	beq.n	8003712 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69fa      	ldr	r2, [r7, #28]
 8003708:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800370a:	69f9      	ldr	r1, [r7, #28]
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f881 	bl	8003814 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d009      	beq.n	800372c <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6a3a      	ldr	r2, [r7, #32]
 800371e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f863 	bl	8003800 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800373a:	bf00      	nop
 800373c:	3730      	adds	r7, #48	@ 0x30
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800376e:	b480      	push	{r7}
 8003770:	b083      	sub	sp, #12
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
	...

0800382c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003834:	4b2c      	ldr	r3, [pc, #176]	@ (80038e8 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8003836:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a2b      	ldr	r2, [pc, #172]	@ (80038ec <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d103      	bne.n	800384a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003848:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003858:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003860:	041a      	lsls	r2, r3, #16
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800387e:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003886:	061a      	lsls	r2, r3, #24
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	e005      	b.n	80038cc <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	3304      	adds	r3, #4
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d3f3      	bcc.n	80038c0 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 80038d8:	bf00      	nop
 80038da:	bf00      	nop
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	4000ac00 	.word	0x4000ac00
 80038ec:	4000a800 	.word	0x4000a800

080038f0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b089      	sub	sp, #36	@ 0x24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10a      	bne.n	800391c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800390e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003916:	4313      	orrs	r3, r2
 8003918:	61fb      	str	r3, [r7, #28]
 800391a:	e00a      	b.n	8003932 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003924:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800392a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800392c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003930:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800393c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003942:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003948:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	4613      	mov	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4413      	add	r3, r2
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	440b      	add	r3, r1
 8003964:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	69fa      	ldr	r2, [r7, #28]
 800396a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	3304      	adds	r3, #4
 8003970:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	3304      	adds	r3, #4
 800397c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800397e:	2300      	movs	r3, #0
 8003980:	617b      	str	r3, [r7, #20]
 8003982:	e020      	b.n	80039c6 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	3303      	adds	r3, #3
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	4413      	add	r3, r2
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	3302      	adds	r3, #2
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	440b      	add	r3, r1
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800399c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	3301      	adds	r3, #1
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	440b      	add	r3, r1
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80039aa:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	440a      	add	r2, r1
 80039b2:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80039b4:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	3304      	adds	r3, #4
 80039be:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	3304      	adds	r3, #4
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	4a06      	ldr	r2, [pc, #24]	@ (80039e4 <FDCAN_CopyMessageToRAM+0xf4>)
 80039cc:	5cd3      	ldrb	r3, [r2, r3]
 80039ce:	461a      	mov	r2, r3
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d3d6      	bcc.n	8003984 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80039d6:	bf00      	nop
 80039d8:	bf00      	nop
 80039da:	3724      	adds	r7, #36	@ 0x24
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	0800bb08 	.word	0x0800bb08

080039e8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b087      	sub	sp, #28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80039f6:	e136      	b.n	8003c66 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	2101      	movs	r1, #1
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	fa01 f303 	lsl.w	r3, r1, r3
 8003a04:	4013      	ands	r3, r2
 8003a06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 8128 	beq.w	8003c60 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d003      	beq.n	8003a20 <HAL_GPIO_Init+0x38>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b12      	cmp	r3, #18
 8003a1e:	d125      	bne.n	8003a6c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	08da      	lsrs	r2, r3, #3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3208      	adds	r2, #8
 8003a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a2c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	220f      	movs	r2, #15
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	4013      	ands	r3, r2
 8003a42:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	f003 020f 	and.w	r2, r3, #15
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	08da      	lsrs	r2, r3, #3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	3208      	adds	r2, #8
 8003a66:	6979      	ldr	r1, [r7, #20]
 8003a68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	2203      	movs	r2, #3
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	4013      	ands	r3, r2
 8003a82:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f003 0203 	and.w	r2, r3, #3
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d00b      	beq.n	8003ac0 <HAL_GPIO_Init+0xd8>
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d007      	beq.n	8003ac0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ab4:	2b11      	cmp	r3, #17
 8003ab6:	d003      	beq.n	8003ac0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2b12      	cmp	r3, #18
 8003abe:	d130      	bne.n	8003b22 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	2203      	movs	r2, #3
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	68da      	ldr	r2, [r3, #12]
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003af6:	2201      	movs	r2, #1
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	43db      	mvns	r3, r3
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4013      	ands	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	091b      	lsrs	r3, r3, #4
 8003b0c:	f003 0201 	and.w	r2, r3, #1
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	d017      	beq.n	8003b5a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	2203      	movs	r2, #3
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	689a      	ldr	r2, [r3, #8]
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d07c      	beq.n	8003c60 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003b66:	4a47      	ldr	r2, [pc, #284]	@ (8003c84 <HAL_GPIO_Init+0x29c>)
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	089b      	lsrs	r3, r3, #2
 8003b6c:	3318      	adds	r3, #24
 8003b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b72:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	220f      	movs	r2, #15
 8003b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b82:	43db      	mvns	r3, r3
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	4013      	ands	r3, r2
 8003b88:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	0a9a      	lsrs	r2, r3, #10
 8003b8e:	4b3e      	ldr	r3, [pc, #248]	@ (8003c88 <HAL_GPIO_Init+0x2a0>)
 8003b90:	4013      	ands	r3, r2
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	f002 0203 	and.w	r2, r2, #3
 8003b98:	00d2      	lsls	r2, r2, #3
 8003b9a:	4093      	lsls	r3, r2
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003ba2:	4938      	ldr	r1, [pc, #224]	@ (8003c84 <HAL_GPIO_Init+0x29c>)
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	089b      	lsrs	r3, r3, #2
 8003ba8:	3318      	adds	r3, #24
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003bb0:	4b34      	ldr	r3, [pc, #208]	@ (8003c84 <HAL_GPIO_Init+0x29c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003bd4:	4a2b      	ldr	r2, [pc, #172]	@ (8003c84 <HAL_GPIO_Init+0x29c>)
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003bda:	4b2a      	ldr	r3, [pc, #168]	@ (8003c84 <HAL_GPIO_Init+0x29c>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	43db      	mvns	r3, r3
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	4013      	ands	r3, r2
 8003be8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003bfe:	4a21      	ldr	r2, [pc, #132]	@ (8003c84 <HAL_GPIO_Init+0x29c>)
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003c04:	4b1f      	ldr	r3, [pc, #124]	@ (8003c84 <HAL_GPIO_Init+0x29c>)
 8003c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c0a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	43db      	mvns	r3, r3
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	4013      	ands	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003c2a:	4a16      	ldr	r2, [pc, #88]	@ (8003c84 <HAL_GPIO_Init+0x29c>)
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003c32:	4b14      	ldr	r3, [pc, #80]	@ (8003c84 <HAL_GPIO_Init+0x29c>)
 8003c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c38:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	4013      	ands	r3, r2
 8003c42:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003c58:	4a0a      	ldr	r2, [pc, #40]	@ (8003c84 <HAL_GPIO_Init+0x29c>)
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	3301      	adds	r3, #1
 8003c64:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f47f aec1 	bne.w	80039f8 <HAL_GPIO_Init+0x10>
  }
}
 8003c76:	bf00      	nop
 8003c78:	bf00      	nop
 8003c7a:	371c      	adds	r7, #28
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	44022000 	.word	0x44022000
 8003c88:	002f7f7f 	.word	0x002f7f7f

08003c8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	460b      	mov	r3, r1
 8003c96:	807b      	strh	r3, [r7, #2]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c9c:	787b      	ldrb	r3, [r7, #1]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ca2:	887a      	ldrh	r2, [r7, #2]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ca8:	e002      	b.n	8003cb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003caa:	887a      	ldrh	r2, [r7, #2]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003cce:	887a      	ldrh	r2, [r7, #2]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	041a      	lsls	r2, r3, #16
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	43d9      	mvns	r1, r3
 8003cda:	887b      	ldrh	r3, [r7, #2]
 8003cdc:	400b      	ands	r3, r1
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	619a      	str	r2, [r3, #24]
}
 8003ce4:	bf00      	nop
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8003d2c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	73fb      	strb	r3, [r7, #15]
 8003d0c:	e007      	b.n	8003d1e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003d0e:	4b07      	ldr	r3, [pc, #28]	@ (8003d2c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f023 0204 	bic.w	r2, r3, #4
 8003d16:	4905      	ldr	r1, [pc, #20]	@ (8003d2c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	40030400 	.word	0x40030400

08003d30 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003d34:	4b05      	ldr	r3, [pc, #20]	@ (8003d4c <HAL_ICACHE_Enable+0x1c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a04      	ldr	r2, [pc, #16]	@ (8003d4c <HAL_ICACHE_Enable+0x1c>)
 8003d3a:	f043 0301 	orr.w	r3, r3, #1
 8003d3e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	40030400 	.word	0x40030400

08003d50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b088      	sub	sp, #32
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d102      	bne.n	8003d64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	f000 bc28 	b.w	80045b4 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d64:	4b94      	ldr	r3, [pc, #592]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	f003 0318 	and.w	r3, r3, #24
 8003d6c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8003d6e:	4b92      	ldr	r3, [pc, #584]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d72:	f003 0303 	and.w	r3, r3, #3
 8003d76:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0310 	and.w	r3, r3, #16
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d05b      	beq.n	8003e3c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	2b08      	cmp	r3, #8
 8003d88:	d005      	beq.n	8003d96 <HAL_RCC_OscConfig+0x46>
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	2b18      	cmp	r3, #24
 8003d8e:	d114      	bne.n	8003dba <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d111      	bne.n	8003dba <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d102      	bne.n	8003da4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	f000 bc08 	b.w	80045b4 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003da4:	4b84      	ldr	r3, [pc, #528]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	041b      	lsls	r3, r3, #16
 8003db2:	4981      	ldr	r1, [pc, #516]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003db8:	e040      	b.n	8003e3c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d023      	beq.n	8003e0a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003dc2:	4b7d      	ldr	r3, [pc, #500]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a7c      	ldr	r2, [pc, #496]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003dc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dce:	f7fe f865 	bl	8001e9c <HAL_GetTick>
 8003dd2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003dd6:	f7fe f861 	bl	8001e9c <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e3e5      	b.n	80045b4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003de8:	4b73      	ldr	r3, [pc, #460]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0f0      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003df4:	4b70      	ldr	r3, [pc, #448]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	041b      	lsls	r3, r3, #16
 8003e02:	496d      	ldr	r1, [pc, #436]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	618b      	str	r3, [r1, #24]
 8003e08:	e018      	b.n	8003e3c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003e0a:	4b6b      	ldr	r3, [pc, #428]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a6a      	ldr	r2, [pc, #424]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003e10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e16:	f7fe f841 	bl	8001e9c <HAL_GetTick>
 8003e1a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003e1c:	e008      	b.n	8003e30 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003e1e:	f7fe f83d 	bl	8001e9c <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e3c1      	b.n	80045b4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003e30:	4b61      	ldr	r3, [pc, #388]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1f0      	bne.n	8003e1e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 80a0 	beq.w	8003f8a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	2b10      	cmp	r3, #16
 8003e4e:	d005      	beq.n	8003e5c <HAL_RCC_OscConfig+0x10c>
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	2b18      	cmp	r3, #24
 8003e54:	d109      	bne.n	8003e6a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	2b03      	cmp	r3, #3
 8003e5a:	d106      	bne.n	8003e6a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f040 8092 	bne.w	8003f8a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e3a4      	b.n	80045b4 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e72:	d106      	bne.n	8003e82 <HAL_RCC_OscConfig+0x132>
 8003e74:	4b50      	ldr	r3, [pc, #320]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a4f      	ldr	r2, [pc, #316]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003e7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e7e:	6013      	str	r3, [r2, #0]
 8003e80:	e058      	b.n	8003f34 <HAL_RCC_OscConfig+0x1e4>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d112      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x160>
 8003e8a:	4b4b      	ldr	r3, [pc, #300]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a4a      	ldr	r2, [pc, #296]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003e90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	4b48      	ldr	r3, [pc, #288]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a47      	ldr	r2, [pc, #284]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003e9c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	4b45      	ldr	r3, [pc, #276]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a44      	ldr	r2, [pc, #272]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003ea8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003eac:	6013      	str	r3, [r2, #0]
 8003eae:	e041      	b.n	8003f34 <HAL_RCC_OscConfig+0x1e4>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003eb8:	d112      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x190>
 8003eba:	4b3f      	ldr	r3, [pc, #252]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a3e      	ldr	r2, [pc, #248]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003ec0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ec4:	6013      	str	r3, [r2, #0]
 8003ec6:	4b3c      	ldr	r3, [pc, #240]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a3b      	ldr	r2, [pc, #236]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003ecc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003ed0:	6013      	str	r3, [r2, #0]
 8003ed2:	4b39      	ldr	r3, [pc, #228]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a38      	ldr	r2, [pc, #224]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003ed8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003edc:	6013      	str	r3, [r2, #0]
 8003ede:	e029      	b.n	8003f34 <HAL_RCC_OscConfig+0x1e4>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003ee8:	d112      	bne.n	8003f10 <HAL_RCC_OscConfig+0x1c0>
 8003eea:	4b33      	ldr	r3, [pc, #204]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a32      	ldr	r2, [pc, #200]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003ef0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	4b30      	ldr	r3, [pc, #192]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a2f      	ldr	r2, [pc, #188]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003efc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f00:	6013      	str	r3, [r2, #0]
 8003f02:	4b2d      	ldr	r3, [pc, #180]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a2c      	ldr	r2, [pc, #176]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003f08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	e011      	b.n	8003f34 <HAL_RCC_OscConfig+0x1e4>
 8003f10:	4b29      	ldr	r3, [pc, #164]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a28      	ldr	r2, [pc, #160]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003f16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f1a:	6013      	str	r3, [r2, #0]
 8003f1c:	4b26      	ldr	r3, [pc, #152]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a25      	ldr	r2, [pc, #148]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003f22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	4b23      	ldr	r3, [pc, #140]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a22      	ldr	r2, [pc, #136]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003f2e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d013      	beq.n	8003f64 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3c:	f7fd ffae 	bl	8001e9c <HAL_GetTick>
 8003f40:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003f44:	f7fd ffaa 	bl	8001e9c <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b64      	cmp	r3, #100	@ 0x64
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e32e      	b.n	80045b4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f56:	4b18      	ldr	r3, [pc, #96]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0f0      	beq.n	8003f44 <HAL_RCC_OscConfig+0x1f4>
 8003f62:	e012      	b.n	8003f8a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f64:	f7fd ff9a 	bl	8001e9c <HAL_GetTick>
 8003f68:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003f6c:	f7fd ff96 	bl	8001e9c <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b64      	cmp	r3, #100	@ 0x64
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e31a      	b.n	80045b4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8003fb8 <HAL_RCC_OscConfig+0x268>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1f0      	bne.n	8003f6c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 809a 	beq.w	80040cc <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d005      	beq.n	8003faa <HAL_RCC_OscConfig+0x25a>
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	2b18      	cmp	r3, #24
 8003fa2:	d149      	bne.n	8004038 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d146      	bne.n	8004038 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d104      	bne.n	8003fbc <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e2fe      	b.n	80045b4 <HAL_RCC_OscConfig+0x864>
 8003fb6:	bf00      	nop
 8003fb8:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d11c      	bne.n	8003ffc <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8003fc2:	4b9a      	ldr	r3, [pc, #616]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0218 	and.w	r2, r3, #24
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d014      	beq.n	8003ffc <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003fd2:	4b96      	ldr	r3, [pc, #600]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f023 0218 	bic.w	r2, r3, #24
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	4993      	ldr	r1, [pc, #588]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003fe4:	f000 fdd0 	bl	8004b88 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003fe8:	4b91      	ldr	r3, [pc, #580]	@ (8004230 <HAL_RCC_OscConfig+0x4e0>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7fd fecb 	bl	8001d88 <HAL_InitTick>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e2db      	b.n	80045b4 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffc:	f7fd ff4e 	bl	8001e9c <HAL_GetTick>
 8004000:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004004:	f7fd ff4a 	bl	8001e9c <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e2ce      	b.n	80045b4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004016:	4b85      	ldr	r3, [pc, #532]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0f0      	beq.n	8004004 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004022:	4b82      	ldr	r3, [pc, #520]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	041b      	lsls	r3, r3, #16
 8004030:	497e      	ldr	r1, [pc, #504]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 8004032:	4313      	orrs	r3, r2
 8004034:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004036:	e049      	b.n	80040cc <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d02c      	beq.n	800409a <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004040:	4b7a      	ldr	r3, [pc, #488]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f023 0218 	bic.w	r2, r3, #24
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	4977      	ldr	r1, [pc, #476]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 800404e:	4313      	orrs	r3, r2
 8004050:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8004052:	4b76      	ldr	r3, [pc, #472]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a75      	ldr	r2, [pc, #468]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 8004058:	f043 0301 	orr.w	r3, r3, #1
 800405c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405e:	f7fd ff1d 	bl	8001e9c <HAL_GetTick>
 8004062:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004064:	e008      	b.n	8004078 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004066:	f7fd ff19 	bl	8001e9c <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e29d      	b.n	80045b4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004078:	4b6c      	ldr	r3, [pc, #432]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0f0      	beq.n	8004066 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004084:	4b69      	ldr	r3, [pc, #420]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	041b      	lsls	r3, r3, #16
 8004092:	4966      	ldr	r1, [pc, #408]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 8004094:	4313      	orrs	r3, r2
 8004096:	610b      	str	r3, [r1, #16]
 8004098:	e018      	b.n	80040cc <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800409a:	4b64      	ldr	r3, [pc, #400]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a63      	ldr	r2, [pc, #396]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 80040a0:	f023 0301 	bic.w	r3, r3, #1
 80040a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a6:	f7fd fef9 	bl	8001e9c <HAL_GetTick>
 80040aa:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040ac:	e008      	b.n	80040c0 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80040ae:	f7fd fef5 	bl	8001e9c <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e279      	b.n	80045b4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040c0:	4b5a      	ldr	r3, [pc, #360]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1f0      	bne.n	80040ae <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0308 	and.w	r3, r3, #8
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d03c      	beq.n	8004152 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d01c      	beq.n	800411a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040e0:	4b52      	ldr	r3, [pc, #328]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 80040e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040e6:	4a51      	ldr	r2, [pc, #324]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 80040e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80040ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f0:	f7fd fed4 	bl	8001e9c <HAL_GetTick>
 80040f4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80040f8:	f7fd fed0 	bl	8001e9c <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e254      	b.n	80045b4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800410a:	4b48      	ldr	r3, [pc, #288]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 800410c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004110:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0ef      	beq.n	80040f8 <HAL_RCC_OscConfig+0x3a8>
 8004118:	e01b      	b.n	8004152 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800411a:	4b44      	ldr	r3, [pc, #272]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 800411c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004120:	4a42      	ldr	r2, [pc, #264]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 8004122:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004126:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412a:	f7fd feb7 	bl	8001e9c <HAL_GetTick>
 800412e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004130:	e008      	b.n	8004144 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004132:	f7fd feb3 	bl	8001e9c <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d901      	bls.n	8004144 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e237      	b.n	80045b4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004144:	4b39      	ldr	r3, [pc, #228]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 8004146:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800414a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1ef      	bne.n	8004132 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0304 	and.w	r3, r3, #4
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 80d2 	beq.w	8004304 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004160:	4b34      	ldr	r3, [pc, #208]	@ (8004234 <HAL_RCC_OscConfig+0x4e4>)
 8004162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d118      	bne.n	800419e <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800416c:	4b31      	ldr	r3, [pc, #196]	@ (8004234 <HAL_RCC_OscConfig+0x4e4>)
 800416e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004170:	4a30      	ldr	r2, [pc, #192]	@ (8004234 <HAL_RCC_OscConfig+0x4e4>)
 8004172:	f043 0301 	orr.w	r3, r3, #1
 8004176:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004178:	f7fd fe90 	bl	8001e9c <HAL_GetTick>
 800417c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004180:	f7fd fe8c 	bl	8001e9c <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e210      	b.n	80045b4 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004192:	4b28      	ldr	r3, [pc, #160]	@ (8004234 <HAL_RCC_OscConfig+0x4e4>)
 8004194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0f0      	beq.n	8004180 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d108      	bne.n	80041b8 <HAL_RCC_OscConfig+0x468>
 80041a6:	4b21      	ldr	r3, [pc, #132]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 80041a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041ac:	4a1f      	ldr	r2, [pc, #124]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 80041ae:	f043 0301 	orr.w	r3, r3, #1
 80041b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80041b6:	e074      	b.n	80042a2 <HAL_RCC_OscConfig+0x552>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d118      	bne.n	80041f2 <HAL_RCC_OscConfig+0x4a2>
 80041c0:	4b1a      	ldr	r3, [pc, #104]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 80041c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041c6:	4a19      	ldr	r2, [pc, #100]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 80041c8:	f023 0301 	bic.w	r3, r3, #1
 80041cc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80041d0:	4b16      	ldr	r3, [pc, #88]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 80041d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041d6:	4a15      	ldr	r2, [pc, #84]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 80041d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80041e0:	4b12      	ldr	r3, [pc, #72]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 80041e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041e6:	4a11      	ldr	r2, [pc, #68]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 80041e8:	f023 0304 	bic.w	r3, r3, #4
 80041ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80041f0:	e057      	b.n	80042a2 <HAL_RCC_OscConfig+0x552>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	2b05      	cmp	r3, #5
 80041f8:	d11e      	bne.n	8004238 <HAL_RCC_OscConfig+0x4e8>
 80041fa:	4b0c      	ldr	r3, [pc, #48]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 80041fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004200:	4a0a      	ldr	r2, [pc, #40]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 8004202:	f043 0304 	orr.w	r3, r3, #4
 8004206:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800420a:	4b08      	ldr	r3, [pc, #32]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 800420c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004210:	4a06      	ldr	r2, [pc, #24]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 8004212:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004216:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800421a:	4b04      	ldr	r3, [pc, #16]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 800421c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004220:	4a02      	ldr	r2, [pc, #8]	@ (800422c <HAL_RCC_OscConfig+0x4dc>)
 8004222:	f043 0301 	orr.w	r3, r3, #1
 8004226:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800422a:	e03a      	b.n	80042a2 <HAL_RCC_OscConfig+0x552>
 800422c:	44020c00 	.word	0x44020c00
 8004230:	20000004 	.word	0x20000004
 8004234:	44020800 	.word	0x44020800
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	2b85      	cmp	r3, #133	@ 0x85
 800423e:	d118      	bne.n	8004272 <HAL_RCC_OscConfig+0x522>
 8004240:	4ba2      	ldr	r3, [pc, #648]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 8004242:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004246:	4aa1      	ldr	r2, [pc, #644]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 8004248:	f043 0304 	orr.w	r3, r3, #4
 800424c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004250:	4b9e      	ldr	r3, [pc, #632]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 8004252:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004256:	4a9d      	ldr	r2, [pc, #628]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 8004258:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800425c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004260:	4b9a      	ldr	r3, [pc, #616]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 8004262:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004266:	4a99      	ldr	r2, [pc, #612]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 8004268:	f043 0301 	orr.w	r3, r3, #1
 800426c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004270:	e017      	b.n	80042a2 <HAL_RCC_OscConfig+0x552>
 8004272:	4b96      	ldr	r3, [pc, #600]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 8004274:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004278:	4a94      	ldr	r2, [pc, #592]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 800427a:	f023 0301 	bic.w	r3, r3, #1
 800427e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004282:	4b92      	ldr	r3, [pc, #584]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 8004284:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004288:	4a90      	ldr	r2, [pc, #576]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 800428a:	f023 0304 	bic.w	r3, r3, #4
 800428e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004292:	4b8e      	ldr	r3, [pc, #568]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 8004294:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004298:	4a8c      	ldr	r2, [pc, #560]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 800429a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800429e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d016      	beq.n	80042d8 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042aa:	f7fd fdf7 	bl	8001e9c <HAL_GetTick>
 80042ae:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042b0:	e00a      	b.n	80042c8 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042b2:	f7fd fdf3 	bl	8001e9c <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e175      	b.n	80045b4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042c8:	4b80      	ldr	r3, [pc, #512]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 80042ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d0ed      	beq.n	80042b2 <HAL_RCC_OscConfig+0x562>
 80042d6:	e015      	b.n	8004304 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d8:	f7fd fde0 	bl	8001e9c <HAL_GetTick>
 80042dc:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042de:	e00a      	b.n	80042f6 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042e0:	f7fd fddc 	bl	8001e9c <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e15e      	b.n	80045b4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042f6:	4b75      	ldr	r3, [pc, #468]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 80042f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1ed      	bne.n	80042e0 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0320 	and.w	r3, r3, #32
 800430c:	2b00      	cmp	r3, #0
 800430e:	d036      	beq.n	800437e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004314:	2b00      	cmp	r3, #0
 8004316:	d019      	beq.n	800434c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004318:	4b6c      	ldr	r3, [pc, #432]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a6b      	ldr	r2, [pc, #428]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 800431e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004322:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004324:	f7fd fdba 	bl	8001e9c <HAL_GetTick>
 8004328:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800432c:	f7fd fdb6 	bl	8001e9c <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e13a      	b.n	80045b4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800433e:	4b63      	ldr	r3, [pc, #396]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0f0      	beq.n	800432c <HAL_RCC_OscConfig+0x5dc>
 800434a:	e018      	b.n	800437e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800434c:	4b5f      	ldr	r3, [pc, #380]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a5e      	ldr	r2, [pc, #376]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 8004352:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004356:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004358:	f7fd fda0 	bl	8001e9c <HAL_GetTick>
 800435c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004360:	f7fd fd9c 	bl	8001e9c <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e120      	b.n	80045b4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004372:	4b56      	ldr	r3, [pc, #344]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1f0      	bne.n	8004360 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004382:	2b00      	cmp	r3, #0
 8004384:	f000 8115 	beq.w	80045b2 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	2b18      	cmp	r3, #24
 800438c:	f000 80af 	beq.w	80044ee <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004394:	2b02      	cmp	r3, #2
 8004396:	f040 8086 	bne.w	80044a6 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800439a:	4b4c      	ldr	r3, [pc, #304]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a4b      	ldr	r2, [pc, #300]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 80043a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a6:	f7fd fd79 	bl	8001e9c <HAL_GetTick>
 80043aa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80043ac:	e008      	b.n	80043c0 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80043ae:	f7fd fd75 	bl	8001e9c <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d901      	bls.n	80043c0 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e0f9      	b.n	80045b4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80043c0:	4b42      	ldr	r3, [pc, #264]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1f0      	bne.n	80043ae <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80043cc:	4b3f      	ldr	r3, [pc, #252]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 80043ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80043d4:	f023 0303 	bic.w	r3, r3, #3
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80043e0:	0212      	lsls	r2, r2, #8
 80043e2:	430a      	orrs	r2, r1
 80043e4:	4939      	ldr	r1, [pc, #228]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	628b      	str	r3, [r1, #40]	@ 0x28
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ee:	3b01      	subs	r3, #1
 80043f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f8:	3b01      	subs	r3, #1
 80043fa:	025b      	lsls	r3, r3, #9
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	431a      	orrs	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004404:	3b01      	subs	r3, #1
 8004406:	041b      	lsls	r3, r3, #16
 8004408:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800440c:	431a      	orrs	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004412:	3b01      	subs	r3, #1
 8004414:	061b      	lsls	r3, r3, #24
 8004416:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800441a:	492c      	ldr	r1, [pc, #176]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 800441c:	4313      	orrs	r3, r2
 800441e:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004420:	4b2a      	ldr	r3, [pc, #168]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 8004422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004424:	4a29      	ldr	r2, [pc, #164]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 8004426:	f023 0310 	bic.w	r3, r3, #16
 800442a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004430:	4a26      	ldr	r2, [pc, #152]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 8004432:	00db      	lsls	r3, r3, #3
 8004434:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004436:	4b25      	ldr	r3, [pc, #148]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 8004438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800443a:	4a24      	ldr	r2, [pc, #144]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 800443c:	f043 0310 	orr.w	r3, r3, #16
 8004440:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8004442:	4b22      	ldr	r3, [pc, #136]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 8004444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004446:	f023 020c 	bic.w	r2, r3, #12
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800444e:	491f      	ldr	r1, [pc, #124]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 8004450:	4313      	orrs	r3, r2
 8004452:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8004454:	4b1d      	ldr	r3, [pc, #116]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 8004456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004458:	f023 0220 	bic.w	r2, r3, #32
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004460:	491a      	ldr	r1, [pc, #104]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 8004462:	4313      	orrs	r3, r2
 8004464:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004466:	4b19      	ldr	r3, [pc, #100]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 8004468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800446a:	4a18      	ldr	r2, [pc, #96]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 800446c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004470:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8004472:	4b16      	ldr	r3, [pc, #88]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a15      	ldr	r2, [pc, #84]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 8004478:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800447c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447e:	f7fd fd0d 	bl	8001e9c <HAL_GetTick>
 8004482:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004486:	f7fd fd09 	bl	8001e9c <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e08d      	b.n	80045b4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004498:	4b0c      	ldr	r3, [pc, #48]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0f0      	beq.n	8004486 <HAL_RCC_OscConfig+0x736>
 80044a4:	e085      	b.n	80045b2 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80044a6:	4b09      	ldr	r3, [pc, #36]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a08      	ldr	r2, [pc, #32]	@ (80044cc <HAL_RCC_OscConfig+0x77c>)
 80044ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b2:	f7fd fcf3 	bl	8001e9c <HAL_GetTick>
 80044b6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80044b8:	e00a      	b.n	80044d0 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80044ba:	f7fd fcef 	bl	8001e9c <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d903      	bls.n	80044d0 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e073      	b.n	80045b4 <HAL_RCC_OscConfig+0x864>
 80044cc:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80044d0:	4b3a      	ldr	r3, [pc, #232]	@ (80045bc <HAL_RCC_OscConfig+0x86c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1ee      	bne.n	80044ba <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80044dc:	4b37      	ldr	r3, [pc, #220]	@ (80045bc <HAL_RCC_OscConfig+0x86c>)
 80044de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e0:	4a36      	ldr	r2, [pc, #216]	@ (80045bc <HAL_RCC_OscConfig+0x86c>)
 80044e2:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80044e6:	f023 0303 	bic.w	r3, r3, #3
 80044ea:	6293      	str	r3, [r2, #40]	@ 0x28
 80044ec:	e061      	b.n	80045b2 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80044ee:	4b33      	ldr	r3, [pc, #204]	@ (80045bc <HAL_RCC_OscConfig+0x86c>)
 80044f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80044f4:	4b31      	ldr	r3, [pc, #196]	@ (80045bc <HAL_RCC_OscConfig+0x86c>)
 80044f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044f8:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d031      	beq.n	8004566 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f003 0203 	and.w	r2, r3, #3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800450c:	429a      	cmp	r2, r3
 800450e:	d12a      	bne.n	8004566 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	0a1b      	lsrs	r3, r3, #8
 8004514:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800451c:	429a      	cmp	r2, r3
 800451e:	d122      	bne.n	8004566 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800452a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800452c:	429a      	cmp	r2, r3
 800452e:	d11a      	bne.n	8004566 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	0a5b      	lsrs	r3, r3, #9
 8004534:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800453c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800453e:	429a      	cmp	r2, r3
 8004540:	d111      	bne.n	8004566 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	0c1b      	lsrs	r3, r3, #16
 8004546:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800454e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004550:	429a      	cmp	r2, r3
 8004552:	d108      	bne.n	8004566 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	0e1b      	lsrs	r3, r3, #24
 8004558:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004560:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004562:	429a      	cmp	r2, r3
 8004564:	d001      	beq.n	800456a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e024      	b.n	80045b4 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800456a:	4b14      	ldr	r3, [pc, #80]	@ (80045bc <HAL_RCC_OscConfig+0x86c>)
 800456c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800456e:	08db      	lsrs	r3, r3, #3
 8004570:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004578:	429a      	cmp	r2, r3
 800457a:	d01a      	beq.n	80045b2 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800457c:	4b0f      	ldr	r3, [pc, #60]	@ (80045bc <HAL_RCC_OscConfig+0x86c>)
 800457e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004580:	4a0e      	ldr	r2, [pc, #56]	@ (80045bc <HAL_RCC_OscConfig+0x86c>)
 8004582:	f023 0310 	bic.w	r3, r3, #16
 8004586:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004588:	f7fd fc88 	bl	8001e9c <HAL_GetTick>
 800458c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800458e:	bf00      	nop
 8004590:	f7fd fc84 	bl	8001e9c <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	4293      	cmp	r3, r2
 800459a:	d0f9      	beq.n	8004590 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045a0:	4a06      	ldr	r2, [pc, #24]	@ (80045bc <HAL_RCC_OscConfig+0x86c>)
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80045a6:	4b05      	ldr	r3, [pc, #20]	@ (80045bc <HAL_RCC_OscConfig+0x86c>)
 80045a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045aa:	4a04      	ldr	r2, [pc, #16]	@ (80045bc <HAL_RCC_OscConfig+0x86c>)
 80045ac:	f043 0310 	orr.w	r3, r3, #16
 80045b0:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3720      	adds	r7, #32
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	44020c00 	.word	0x44020c00

080045c0 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e19e      	b.n	8004912 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045d4:	4b83      	ldr	r3, [pc, #524]	@ (80047e4 <HAL_RCC_ClockConfig+0x224>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 030f 	and.w	r3, r3, #15
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d910      	bls.n	8004604 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e2:	4b80      	ldr	r3, [pc, #512]	@ (80047e4 <HAL_RCC_ClockConfig+0x224>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f023 020f 	bic.w	r2, r3, #15
 80045ea:	497e      	ldr	r1, [pc, #504]	@ (80047e4 <HAL_RCC_ClockConfig+0x224>)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f2:	4b7c      	ldr	r3, [pc, #496]	@ (80047e4 <HAL_RCC_ClockConfig+0x224>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 030f 	and.w	r3, r3, #15
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d001      	beq.n	8004604 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e186      	b.n	8004912 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0310 	and.w	r3, r3, #16
 800460c:	2b00      	cmp	r3, #0
 800460e:	d012      	beq.n	8004636 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	695a      	ldr	r2, [r3, #20]
 8004614:	4b74      	ldr	r3, [pc, #464]	@ (80047e8 <HAL_RCC_ClockConfig+0x228>)
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	0a1b      	lsrs	r3, r3, #8
 800461a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800461e:	429a      	cmp	r2, r3
 8004620:	d909      	bls.n	8004636 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004622:	4b71      	ldr	r3, [pc, #452]	@ (80047e8 <HAL_RCC_ClockConfig+0x228>)
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	021b      	lsls	r3, r3, #8
 8004630:	496d      	ldr	r1, [pc, #436]	@ (80047e8 <HAL_RCC_ClockConfig+0x228>)
 8004632:	4313      	orrs	r3, r2
 8004634:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0308 	and.w	r3, r3, #8
 800463e:	2b00      	cmp	r3, #0
 8004640:	d012      	beq.n	8004668 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691a      	ldr	r2, [r3, #16]
 8004646:	4b68      	ldr	r3, [pc, #416]	@ (80047e8 <HAL_RCC_ClockConfig+0x228>)
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	091b      	lsrs	r3, r3, #4
 800464c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004650:	429a      	cmp	r2, r3
 8004652:	d909      	bls.n	8004668 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004654:	4b64      	ldr	r3, [pc, #400]	@ (80047e8 <HAL_RCC_ClockConfig+0x228>)
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	011b      	lsls	r3, r3, #4
 8004662:	4961      	ldr	r1, [pc, #388]	@ (80047e8 <HAL_RCC_ClockConfig+0x228>)
 8004664:	4313      	orrs	r3, r2
 8004666:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b00      	cmp	r3, #0
 8004672:	d010      	beq.n	8004696 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	4b5b      	ldr	r3, [pc, #364]	@ (80047e8 <HAL_RCC_ClockConfig+0x228>)
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004680:	429a      	cmp	r2, r3
 8004682:	d908      	bls.n	8004696 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004684:	4b58      	ldr	r3, [pc, #352]	@ (80047e8 <HAL_RCC_ClockConfig+0x228>)
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	4955      	ldr	r1, [pc, #340]	@ (80047e8 <HAL_RCC_ClockConfig+0x228>)
 8004692:	4313      	orrs	r3, r2
 8004694:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d010      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	689a      	ldr	r2, [r3, #8]
 80046a6:	4b50      	ldr	r3, [pc, #320]	@ (80047e8 <HAL_RCC_ClockConfig+0x228>)
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	f003 030f 	and.w	r3, r3, #15
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d908      	bls.n	80046c4 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80046b2:	4b4d      	ldr	r3, [pc, #308]	@ (80047e8 <HAL_RCC_ClockConfig+0x228>)
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	f023 020f 	bic.w	r2, r3, #15
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	494a      	ldr	r1, [pc, #296]	@ (80047e8 <HAL_RCC_ClockConfig+0x228>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 8093 	beq.w	80047f8 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	2b03      	cmp	r3, #3
 80046d8:	d107      	bne.n	80046ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80046da:	4b43      	ldr	r3, [pc, #268]	@ (80047e8 <HAL_RCC_ClockConfig+0x228>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d121      	bne.n	800472a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e113      	b.n	8004912 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d107      	bne.n	8004702 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046f2:	4b3d      	ldr	r3, [pc, #244]	@ (80047e8 <HAL_RCC_ClockConfig+0x228>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d115      	bne.n	800472a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e107      	b.n	8004912 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d107      	bne.n	800471a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800470a:	4b37      	ldr	r3, [pc, #220]	@ (80047e8 <HAL_RCC_ClockConfig+0x228>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004712:	2b00      	cmp	r3, #0
 8004714:	d109      	bne.n	800472a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e0fb      	b.n	8004912 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800471a:	4b33      	ldr	r3, [pc, #204]	@ (80047e8 <HAL_RCC_ClockConfig+0x228>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e0f3      	b.n	8004912 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800472a:	4b2f      	ldr	r3, [pc, #188]	@ (80047e8 <HAL_RCC_ClockConfig+0x228>)
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	f023 0203 	bic.w	r2, r3, #3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	492c      	ldr	r1, [pc, #176]	@ (80047e8 <HAL_RCC_ClockConfig+0x228>)
 8004738:	4313      	orrs	r3, r2
 800473a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800473c:	f7fd fbae 	bl	8001e9c <HAL_GetTick>
 8004740:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	2b03      	cmp	r3, #3
 8004748:	d112      	bne.n	8004770 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800474a:	e00a      	b.n	8004762 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800474c:	f7fd fba6 	bl	8001e9c <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800475a:	4293      	cmp	r3, r2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e0d7      	b.n	8004912 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004762:	4b21      	ldr	r3, [pc, #132]	@ (80047e8 <HAL_RCC_ClockConfig+0x228>)
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	f003 0318 	and.w	r3, r3, #24
 800476a:	2b18      	cmp	r3, #24
 800476c:	d1ee      	bne.n	800474c <HAL_RCC_ClockConfig+0x18c>
 800476e:	e043      	b.n	80047f8 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	2b02      	cmp	r3, #2
 8004776:	d112      	bne.n	800479e <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004778:	e00a      	b.n	8004790 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800477a:	f7fd fb8f 	bl	8001e9c <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004788:	4293      	cmp	r3, r2
 800478a:	d901      	bls.n	8004790 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e0c0      	b.n	8004912 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004790:	4b15      	ldr	r3, [pc, #84]	@ (80047e8 <HAL_RCC_ClockConfig+0x228>)
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	f003 0318 	and.w	r3, r3, #24
 8004798:	2b10      	cmp	r3, #16
 800479a:	d1ee      	bne.n	800477a <HAL_RCC_ClockConfig+0x1ba>
 800479c:	e02c      	b.n	80047f8 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d122      	bne.n	80047ec <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80047a6:	e00a      	b.n	80047be <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80047a8:	f7fd fb78 	bl	8001e9c <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e0a9      	b.n	8004912 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80047be:	4b0a      	ldr	r3, [pc, #40]	@ (80047e8 <HAL_RCC_ClockConfig+0x228>)
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	f003 0318 	and.w	r3, r3, #24
 80047c6:	2b08      	cmp	r3, #8
 80047c8:	d1ee      	bne.n	80047a8 <HAL_RCC_ClockConfig+0x1e8>
 80047ca:	e015      	b.n	80047f8 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80047cc:	f7fd fb66 	bl	8001e9c <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047da:	4293      	cmp	r3, r2
 80047dc:	d906      	bls.n	80047ec <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e097      	b.n	8004912 <HAL_RCC_ClockConfig+0x352>
 80047e2:	bf00      	nop
 80047e4:	40022000 	.word	0x40022000
 80047e8:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80047ec:	4b4b      	ldr	r3, [pc, #300]	@ (800491c <HAL_RCC_ClockConfig+0x35c>)
 80047ee:	69db      	ldr	r3, [r3, #28]
 80047f0:	f003 0318 	and.w	r3, r3, #24
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1e9      	bne.n	80047cc <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d010      	beq.n	8004826 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	4b44      	ldr	r3, [pc, #272]	@ (800491c <HAL_RCC_ClockConfig+0x35c>)
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	f003 030f 	and.w	r3, r3, #15
 8004810:	429a      	cmp	r2, r3
 8004812:	d208      	bcs.n	8004826 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004814:	4b41      	ldr	r3, [pc, #260]	@ (800491c <HAL_RCC_ClockConfig+0x35c>)
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	f023 020f 	bic.w	r2, r3, #15
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	493e      	ldr	r1, [pc, #248]	@ (800491c <HAL_RCC_ClockConfig+0x35c>)
 8004822:	4313      	orrs	r3, r2
 8004824:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004826:	4b3e      	ldr	r3, [pc, #248]	@ (8004920 <HAL_RCC_ClockConfig+0x360>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	429a      	cmp	r2, r3
 8004832:	d210      	bcs.n	8004856 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004834:	4b3a      	ldr	r3, [pc, #232]	@ (8004920 <HAL_RCC_ClockConfig+0x360>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f023 020f 	bic.w	r2, r3, #15
 800483c:	4938      	ldr	r1, [pc, #224]	@ (8004920 <HAL_RCC_ClockConfig+0x360>)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	4313      	orrs	r3, r2
 8004842:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004844:	4b36      	ldr	r3, [pc, #216]	@ (8004920 <HAL_RCC_ClockConfig+0x360>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 030f 	and.w	r3, r3, #15
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	429a      	cmp	r2, r3
 8004850:	d001      	beq.n	8004856 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e05d      	b.n	8004912 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0304 	and.w	r3, r3, #4
 800485e:	2b00      	cmp	r3, #0
 8004860:	d010      	beq.n	8004884 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68da      	ldr	r2, [r3, #12]
 8004866:	4b2d      	ldr	r3, [pc, #180]	@ (800491c <HAL_RCC_ClockConfig+0x35c>)
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800486e:	429a      	cmp	r2, r3
 8004870:	d208      	bcs.n	8004884 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004872:	4b2a      	ldr	r3, [pc, #168]	@ (800491c <HAL_RCC_ClockConfig+0x35c>)
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	4927      	ldr	r1, [pc, #156]	@ (800491c <HAL_RCC_ClockConfig+0x35c>)
 8004880:	4313      	orrs	r3, r2
 8004882:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0308 	and.w	r3, r3, #8
 800488c:	2b00      	cmp	r3, #0
 800488e:	d012      	beq.n	80048b6 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	691a      	ldr	r2, [r3, #16]
 8004894:	4b21      	ldr	r3, [pc, #132]	@ (800491c <HAL_RCC_ClockConfig+0x35c>)
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	091b      	lsrs	r3, r3, #4
 800489a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800489e:	429a      	cmp	r2, r3
 80048a0:	d209      	bcs.n	80048b6 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80048a2:	4b1e      	ldr	r3, [pc, #120]	@ (800491c <HAL_RCC_ClockConfig+0x35c>)
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	011b      	lsls	r3, r3, #4
 80048b0:	491a      	ldr	r1, [pc, #104]	@ (800491c <HAL_RCC_ClockConfig+0x35c>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0310 	and.w	r3, r3, #16
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d012      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	695a      	ldr	r2, [r3, #20]
 80048c6:	4b15      	ldr	r3, [pc, #84]	@ (800491c <HAL_RCC_ClockConfig+0x35c>)
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	0a1b      	lsrs	r3, r3, #8
 80048cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d209      	bcs.n	80048e8 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80048d4:	4b11      	ldr	r3, [pc, #68]	@ (800491c <HAL_RCC_ClockConfig+0x35c>)
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	021b      	lsls	r3, r3, #8
 80048e2:	490e      	ldr	r1, [pc, #56]	@ (800491c <HAL_RCC_ClockConfig+0x35c>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80048e8:	f000 f822 	bl	8004930 <HAL_RCC_GetSysClockFreq>
 80048ec:	4602      	mov	r2, r0
 80048ee:	4b0b      	ldr	r3, [pc, #44]	@ (800491c <HAL_RCC_ClockConfig+0x35c>)
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	f003 030f 	and.w	r3, r3, #15
 80048f6:	490b      	ldr	r1, [pc, #44]	@ (8004924 <HAL_RCC_ClockConfig+0x364>)
 80048f8:	5ccb      	ldrb	r3, [r1, r3]
 80048fa:	fa22 f303 	lsr.w	r3, r2, r3
 80048fe:	4a0a      	ldr	r2, [pc, #40]	@ (8004928 <HAL_RCC_ClockConfig+0x368>)
 8004900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004902:	4b0a      	ldr	r3, [pc, #40]	@ (800492c <HAL_RCC_ClockConfig+0x36c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4618      	mov	r0, r3
 8004908:	f7fd fa3e 	bl	8001d88 <HAL_InitTick>
 800490c:	4603      	mov	r3, r0
 800490e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004910:	7afb      	ldrb	r3, [r7, #11]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	44020c00 	.word	0x44020c00
 8004920:	40022000 	.word	0x40022000
 8004924:	0800baf0 	.word	0x0800baf0
 8004928:	20000000 	.word	0x20000000
 800492c:	20000004 	.word	0x20000004

08004930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004930:	b480      	push	{r7}
 8004932:	b089      	sub	sp, #36	@ 0x24
 8004934:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8004936:	4b8c      	ldr	r3, [pc, #560]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x238>)
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	f003 0318 	and.w	r3, r3, #24
 800493e:	2b08      	cmp	r3, #8
 8004940:	d102      	bne.n	8004948 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004942:	4b8a      	ldr	r3, [pc, #552]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x23c>)
 8004944:	61fb      	str	r3, [r7, #28]
 8004946:	e107      	b.n	8004b58 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004948:	4b87      	ldr	r3, [pc, #540]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x238>)
 800494a:	69db      	ldr	r3, [r3, #28]
 800494c:	f003 0318 	and.w	r3, r3, #24
 8004950:	2b00      	cmp	r3, #0
 8004952:	d112      	bne.n	800497a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004954:	4b84      	ldr	r3, [pc, #528]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x238>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0320 	and.w	r3, r3, #32
 800495c:	2b00      	cmp	r3, #0
 800495e:	d009      	beq.n	8004974 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004960:	4b81      	ldr	r3, [pc, #516]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x238>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	08db      	lsrs	r3, r3, #3
 8004966:	f003 0303 	and.w	r3, r3, #3
 800496a:	4a81      	ldr	r2, [pc, #516]	@ (8004b70 <HAL_RCC_GetSysClockFreq+0x240>)
 800496c:	fa22 f303 	lsr.w	r3, r2, r3
 8004970:	61fb      	str	r3, [r7, #28]
 8004972:	e0f1      	b.n	8004b58 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004974:	4b7e      	ldr	r3, [pc, #504]	@ (8004b70 <HAL_RCC_GetSysClockFreq+0x240>)
 8004976:	61fb      	str	r3, [r7, #28]
 8004978:	e0ee      	b.n	8004b58 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800497a:	4b7b      	ldr	r3, [pc, #492]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x238>)
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	f003 0318 	and.w	r3, r3, #24
 8004982:	2b10      	cmp	r3, #16
 8004984:	d102      	bne.n	800498c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004986:	4b7b      	ldr	r3, [pc, #492]	@ (8004b74 <HAL_RCC_GetSysClockFreq+0x244>)
 8004988:	61fb      	str	r3, [r7, #28]
 800498a:	e0e5      	b.n	8004b58 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800498c:	4b76      	ldr	r3, [pc, #472]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x238>)
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	f003 0318 	and.w	r3, r3, #24
 8004994:	2b18      	cmp	r3, #24
 8004996:	f040 80dd 	bne.w	8004b54 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800499a:	4b73      	ldr	r3, [pc, #460]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x238>)
 800499c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80049a4:	4b70      	ldr	r3, [pc, #448]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x238>)
 80049a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a8:	0a1b      	lsrs	r3, r3, #8
 80049aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049ae:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80049b0:	4b6d      	ldr	r3, [pc, #436]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x238>)
 80049b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b4:	091b      	lsrs	r3, r3, #4
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80049bc:	4b6a      	ldr	r3, [pc, #424]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x238>)
 80049be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80049c0:	08db      	lsrs	r3, r3, #3
 80049c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	fb02 f303 	mul.w	r3, r2, r3
 80049cc:	ee07 3a90 	vmov	s15, r3
 80049d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d4:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f000 80b7 	beq.w	8004b4e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d003      	beq.n	80049ee <HAL_RCC_GetSysClockFreq+0xbe>
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	2b03      	cmp	r3, #3
 80049ea:	d056      	beq.n	8004a9a <HAL_RCC_GetSysClockFreq+0x16a>
 80049ec:	e077      	b.n	8004ade <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80049ee:	4b5e      	ldr	r3, [pc, #376]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x238>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0320 	and.w	r3, r3, #32
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d02d      	beq.n	8004a56 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80049fa:	4b5b      	ldr	r3, [pc, #364]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x238>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	08db      	lsrs	r3, r3, #3
 8004a00:	f003 0303 	and.w	r3, r3, #3
 8004a04:	4a5a      	ldr	r2, [pc, #360]	@ (8004b70 <HAL_RCC_GetSysClockFreq+0x240>)
 8004a06:	fa22 f303 	lsr.w	r3, r2, r3
 8004a0a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	ee07 3a90 	vmov	s15, r3
 8004a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	ee07 3a90 	vmov	s15, r3
 8004a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a24:	4b50      	ldr	r3, [pc, #320]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x238>)
 8004a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a2c:	ee07 3a90 	vmov	s15, r3
 8004a30:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a34:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a38:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8004b78 <HAL_RCC_GetSysClockFreq+0x248>
 8004a3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a40:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a48:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a50:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8004a54:	e065      	b.n	8004b22 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	ee07 3a90 	vmov	s15, r3
 8004a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a60:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004b7c <HAL_RCC_GetSysClockFreq+0x24c>
 8004a64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a68:	4b3f      	ldr	r3, [pc, #252]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x238>)
 8004a6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a70:	ee07 3a90 	vmov	s15, r3
 8004a74:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a78:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a7c:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004b78 <HAL_RCC_GetSysClockFreq+0x248>
 8004a80:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a84:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a88:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a94:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004a98:	e043      	b.n	8004b22 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	ee07 3a90 	vmov	s15, r3
 8004aa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aa4:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004b80 <HAL_RCC_GetSysClockFreq+0x250>
 8004aa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aac:	4b2e      	ldr	r3, [pc, #184]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x238>)
 8004aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ab4:	ee07 3a90 	vmov	s15, r3
 8004ab8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004abc:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ac0:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8004b78 <HAL_RCC_GetSysClockFreq+0x248>
 8004ac4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ac8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004acc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ad0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad8:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8004adc:	e021      	b.n	8004b22 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	ee07 3a90 	vmov	s15, r3
 8004ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae8:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004b84 <HAL_RCC_GetSysClockFreq+0x254>
 8004aec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004af0:	4b1d      	ldr	r3, [pc, #116]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x238>)
 8004af2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af8:	ee07 3a90 	vmov	s15, r3
 8004afc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b00:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b04:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8004b78 <HAL_RCC_GetSysClockFreq+0x248>
 8004b08:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b10:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b14:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b1c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004b20:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8004b22:	4b11      	ldr	r3, [pc, #68]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x238>)
 8004b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b26:	0a5b      	lsrs	r3, r3, #9
 8004b28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	ee07 3a90 	vmov	s15, r3
 8004b36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b3a:	edd7 6a06 	vldr	s13, [r7, #24]
 8004b3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b46:	ee17 3a90 	vmov	r3, s15
 8004b4a:	61fb      	str	r3, [r7, #28]
 8004b4c:	e004      	b.n	8004b58 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	61fb      	str	r3, [r7, #28]
 8004b52:	e001      	b.n	8004b58 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004b54:	4b06      	ldr	r3, [pc, #24]	@ (8004b70 <HAL_RCC_GetSysClockFreq+0x240>)
 8004b56:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004b58:	69fb      	ldr	r3, [r7, #28]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3724      	adds	r7, #36	@ 0x24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	44020c00 	.word	0x44020c00
 8004b6c:	003d0900 	.word	0x003d0900
 8004b70:	03d09000 	.word	0x03d09000
 8004b74:	007a1200 	.word	0x007a1200
 8004b78:	46000000 	.word	0x46000000
 8004b7c:	4c742400 	.word	0x4c742400
 8004b80:	4af42400 	.word	0x4af42400
 8004b84:	4a742400 	.word	0x4a742400

08004b88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004b8c:	f7ff fed0 	bl	8004930 <HAL_RCC_GetSysClockFreq>
 8004b90:	4602      	mov	r2, r0
 8004b92:	4b08      	ldr	r3, [pc, #32]	@ (8004bb4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004b94:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004b96:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004b9a:	4907      	ldr	r1, [pc, #28]	@ (8004bb8 <HAL_RCC_GetHCLKFreq+0x30>)
 8004b9c:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004b9e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba6:	4a05      	ldr	r2, [pc, #20]	@ (8004bbc <HAL_RCC_GetHCLKFreq+0x34>)
 8004ba8:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004baa:	4b04      	ldr	r3, [pc, #16]	@ (8004bbc <HAL_RCC_GetHCLKFreq+0x34>)
 8004bac:	681b      	ldr	r3, [r3, #0]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	44020c00 	.word	0x44020c00
 8004bb8:	0800baf0 	.word	0x0800baf0
 8004bbc:	20000000 	.word	0x20000000

08004bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004bc4:	f7ff ffe0 	bl	8004b88 <HAL_RCC_GetHCLKFreq>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	4b06      	ldr	r3, [pc, #24]	@ (8004be4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	091b      	lsrs	r3, r3, #4
 8004bd0:	f003 0307 	and.w	r3, r3, #7
 8004bd4:	4904      	ldr	r1, [pc, #16]	@ (8004be8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bd6:	5ccb      	ldrb	r3, [r1, r3]
 8004bd8:	f003 031f 	and.w	r3, r3, #31
 8004bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	44020c00 	.word	0x44020c00
 8004be8:	0800bb00 	.word	0x0800bb00

08004bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8004bf0:	f7ff ffca 	bl	8004b88 <HAL_RCC_GetHCLKFreq>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	4b06      	ldr	r3, [pc, #24]	@ (8004c10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	0a1b      	lsrs	r3, r3, #8
 8004bfc:	f003 0307 	and.w	r3, r3, #7
 8004c00:	4904      	ldr	r1, [pc, #16]	@ (8004c14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c02:	5ccb      	ldrb	r3, [r1, r3]
 8004c04:	f003 031f 	and.w	r3, r3, #31
 8004c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	44020c00 	.word	0x44020c00
 8004c14:	0800bb00 	.word	0x0800bb00

08004c18 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8004c1c:	f7ff ffb4 	bl	8004b88 <HAL_RCC_GetHCLKFreq>
 8004c20:	4602      	mov	r2, r0
 8004c22:	4b06      	ldr	r3, [pc, #24]	@ (8004c3c <HAL_RCC_GetPCLK3Freq+0x24>)
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	0b1b      	lsrs	r3, r3, #12
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	4904      	ldr	r1, [pc, #16]	@ (8004c40 <HAL_RCC_GetPCLK3Freq+0x28>)
 8004c2e:	5ccb      	ldrb	r3, [r1, r3]
 8004c30:	f003 031f 	and.w	r3, r3, #31
 8004c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	44020c00 	.word	0x44020c00
 8004c40:	0800bb00 	.word	0x0800bb00

08004c44 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c48:	b0ba      	sub	sp, #232	@ 0xe8
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c50:	2300      	movs	r3, #0
 8004c52:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c56:	2300      	movs	r3, #0
 8004c58:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004c5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c64:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8004c68:	2500      	movs	r5, #0
 8004c6a:	ea54 0305 	orrs.w	r3, r4, r5
 8004c6e:	d00b      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8004c70:	4bcd      	ldr	r3, [pc, #820]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004c72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c76:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8004c7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c80:	4ac9      	ldr	r2, [pc, #804]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004c82:	430b      	orrs	r3, r1
 8004c84:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c90:	f002 0801 	and.w	r8, r2, #1
 8004c94:	f04f 0900 	mov.w	r9, #0
 8004c98:	ea58 0309 	orrs.w	r3, r8, r9
 8004c9c:	d042      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8004c9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ca4:	2b05      	cmp	r3, #5
 8004ca6:	d823      	bhi.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8004ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8004caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cae:	bf00      	nop
 8004cb0:	08004cf9 	.word	0x08004cf9
 8004cb4:	08004cc9 	.word	0x08004cc9
 8004cb8:	08004cdd 	.word	0x08004cdd
 8004cbc:	08004cf9 	.word	0x08004cf9
 8004cc0:	08004cf9 	.word	0x08004cf9
 8004cc4:	08004cf9 	.word	0x08004cf9
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ccc:	3308      	adds	r3, #8
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f003 f90c 	bl	8007eec <RCCEx_PLL2_Config>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8004cda:	e00e      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004cdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ce0:	3330      	adds	r3, #48	@ 0x30
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f003 f99a 	bl	800801c <RCCEx_PLL3_Config>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8004cee:	e004      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004cf6:	e000      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8004cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cfa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10c      	bne.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004d02:	4ba9      	ldr	r3, [pc, #676]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004d04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004d08:	f023 0107 	bic.w	r1, r3, #7
 8004d0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d12:	4aa5      	ldr	r2, [pc, #660]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004d14:	430b      	orrs	r3, r1
 8004d16:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004d1a:	e003      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d1c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d20:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2c:	f002 0a02 	and.w	sl, r2, #2
 8004d30:	f04f 0b00 	mov.w	fp, #0
 8004d34:	ea5a 030b 	orrs.w	r3, sl, fp
 8004d38:	f000 8088 	beq.w	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8004d3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d42:	2b28      	cmp	r3, #40	@ 0x28
 8004d44:	d868      	bhi.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004d46:	a201      	add	r2, pc, #4	@ (adr r2, 8004d4c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4c:	08004e21 	.word	0x08004e21
 8004d50:	08004e19 	.word	0x08004e19
 8004d54:	08004e19 	.word	0x08004e19
 8004d58:	08004e19 	.word	0x08004e19
 8004d5c:	08004e19 	.word	0x08004e19
 8004d60:	08004e19 	.word	0x08004e19
 8004d64:	08004e19 	.word	0x08004e19
 8004d68:	08004e19 	.word	0x08004e19
 8004d6c:	08004df1 	.word	0x08004df1
 8004d70:	08004e19 	.word	0x08004e19
 8004d74:	08004e19 	.word	0x08004e19
 8004d78:	08004e19 	.word	0x08004e19
 8004d7c:	08004e19 	.word	0x08004e19
 8004d80:	08004e19 	.word	0x08004e19
 8004d84:	08004e19 	.word	0x08004e19
 8004d88:	08004e19 	.word	0x08004e19
 8004d8c:	08004e05 	.word	0x08004e05
 8004d90:	08004e19 	.word	0x08004e19
 8004d94:	08004e19 	.word	0x08004e19
 8004d98:	08004e19 	.word	0x08004e19
 8004d9c:	08004e19 	.word	0x08004e19
 8004da0:	08004e19 	.word	0x08004e19
 8004da4:	08004e19 	.word	0x08004e19
 8004da8:	08004e19 	.word	0x08004e19
 8004dac:	08004e21 	.word	0x08004e21
 8004db0:	08004e19 	.word	0x08004e19
 8004db4:	08004e19 	.word	0x08004e19
 8004db8:	08004e19 	.word	0x08004e19
 8004dbc:	08004e19 	.word	0x08004e19
 8004dc0:	08004e19 	.word	0x08004e19
 8004dc4:	08004e19 	.word	0x08004e19
 8004dc8:	08004e19 	.word	0x08004e19
 8004dcc:	08004e21 	.word	0x08004e21
 8004dd0:	08004e19 	.word	0x08004e19
 8004dd4:	08004e19 	.word	0x08004e19
 8004dd8:	08004e19 	.word	0x08004e19
 8004ddc:	08004e19 	.word	0x08004e19
 8004de0:	08004e19 	.word	0x08004e19
 8004de4:	08004e19 	.word	0x08004e19
 8004de8:	08004e19 	.word	0x08004e19
 8004dec:	08004e21 	.word	0x08004e21
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004df0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004df4:	3308      	adds	r3, #8
 8004df6:	4618      	mov	r0, r3
 8004df8:	f003 f878 	bl	8007eec <RCCEx_PLL2_Config>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8004e02:	e00e      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e08:	3330      	adds	r3, #48	@ 0x30
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f003 f906 	bl	800801c <RCCEx_PLL3_Config>
 8004e10:	4603      	mov	r3, r0
 8004e12:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8004e16:	e004      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004e1e:	e000      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8004e20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e22:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10c      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004e2a:	4b5f      	ldr	r3, [pc, #380]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004e2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004e30:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004e34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e3a:	4a5b      	ldr	r2, [pc, #364]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004e3c:	430b      	orrs	r3, r1
 8004e3e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004e42:	e003      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e44:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e48:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e54:	f002 0304 	and.w	r3, r2, #4
 8004e58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004e62:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004e66:	460b      	mov	r3, r1
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	d04e      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8004e6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e72:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004e76:	d02c      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8004e78:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004e7c:	d825      	bhi.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004e7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e82:	d028      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004e84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e88:	d81f      	bhi.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004e8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e8c:	d025      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004e8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e90:	d81b      	bhi.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004e92:	2b80      	cmp	r3, #128	@ 0x80
 8004e94:	d00f      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8004e96:	2b80      	cmp	r3, #128	@ 0x80
 8004e98:	d817      	bhi.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d01f      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8004e9e:	2b40      	cmp	r3, #64	@ 0x40
 8004ea0:	d113      	bne.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ea2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ea6:	3308      	adds	r3, #8
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f003 f81f 	bl	8007eec <RCCEx_PLL2_Config>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8004eb4:	e014      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004eb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004eba:	3330      	adds	r3, #48	@ 0x30
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f003 f8ad 	bl	800801c <RCCEx_PLL3_Config>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8004ec8:	e00a      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004ed0:	e006      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004ed2:	bf00      	nop
 8004ed4:	e004      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004ed6:	bf00      	nop
 8004ed8:	e002      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004eda:	bf00      	nop
 8004edc:	e000      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004ede:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ee0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10c      	bne.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004ee8:	4b2f      	ldr	r3, [pc, #188]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004eea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004eee:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004ef2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ef6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ef8:	4a2b      	ldr	r2, [pc, #172]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004efa:	430b      	orrs	r3, r1
 8004efc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004f00:	e003      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f02:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f06:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f12:	f002 0308 	and.w	r3, r2, #8
 8004f16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f24:	460b      	mov	r3, r1
 8004f26:	4313      	orrs	r3, r2
 8004f28:	d056      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8004f2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f30:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004f34:	d031      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004f36:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004f3a:	d82a      	bhi.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004f3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f40:	d02d      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004f42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f46:	d824      	bhi.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004f48:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004f4c:	d029      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004f4e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004f52:	d81e      	bhi.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004f54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f58:	d011      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004f5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f5e:	d818      	bhi.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d023      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004f64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f68:	d113      	bne.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f6e:	3308      	adds	r3, #8
 8004f70:	4618      	mov	r0, r3
 8004f72:	f002 ffbb 	bl	8007eec <RCCEx_PLL2_Config>
 8004f76:	4603      	mov	r3, r0
 8004f78:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8004f7c:	e017      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f82:	3330      	adds	r3, #48	@ 0x30
 8004f84:	4618      	mov	r0, r3
 8004f86:	f003 f849 	bl	800801c <RCCEx_PLL3_Config>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8004f90:	e00d      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004f98:	e009      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004f9a:	bf00      	nop
 8004f9c:	e007      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004f9e:	bf00      	nop
 8004fa0:	e005      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004fa2:	bf00      	nop
 8004fa4:	e003      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004fa6:	bf00      	nop
 8004fa8:	44020c00 	.word	0x44020c00
        break;
 8004fac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fae:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10c      	bne.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004fb6:	4bb9      	ldr	r3, [pc, #740]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004fb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004fbc:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004fc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004fc6:	4ab5      	ldr	r2, [pc, #724]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004fc8:	430b      	orrs	r3, r1
 8004fca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004fce:	e003      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004fd4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe0:	f002 0310 	and.w	r3, r2, #16
 8004fe4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fe8:	2300      	movs	r3, #0
 8004fea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004fee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	d053      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8004ff8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ffc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ffe:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005002:	d031      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8005004:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005008:	d82a      	bhi.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800500a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800500e:	d02d      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8005010:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005014:	d824      	bhi.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005016:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800501a:	d029      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800501c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005020:	d81e      	bhi.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005022:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005026:	d011      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005028:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800502c:	d818      	bhi.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800502e:	2b00      	cmp	r3, #0
 8005030:	d020      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8005032:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005036:	d113      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005038:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800503c:	3308      	adds	r3, #8
 800503e:	4618      	mov	r0, r3
 8005040:	f002 ff54 	bl	8007eec <RCCEx_PLL2_Config>
 8005044:	4603      	mov	r3, r0
 8005046:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 800504a:	e014      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800504c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005050:	3330      	adds	r3, #48	@ 0x30
 8005052:	4618      	mov	r0, r3
 8005054:	f002 ffe2 	bl	800801c <RCCEx_PLL3_Config>
 8005058:	4603      	mov	r3, r0
 800505a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 800505e:	e00a      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005066:	e006      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005068:	bf00      	nop
 800506a:	e004      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800506c:	bf00      	nop
 800506e:	e002      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005070:	bf00      	nop
 8005072:	e000      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005074:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005076:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10c      	bne.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800507e:	4b87      	ldr	r3, [pc, #540]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005080:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005084:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005088:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800508c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800508e:	4a83      	ldr	r2, [pc, #524]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005090:	430b      	orrs	r3, r1
 8005092:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005096:	e003      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005098:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800509c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80050a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a8:	f002 0320 	and.w	r3, r2, #32
 80050ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050b0:	2300      	movs	r3, #0
 80050b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050b6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80050ba:	460b      	mov	r3, r1
 80050bc:	4313      	orrs	r3, r2
 80050be:	d053      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80050c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c6:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80050ca:	d031      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80050cc:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80050d0:	d82a      	bhi.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80050d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050d6:	d02d      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80050d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050dc:	d824      	bhi.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80050de:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80050e2:	d029      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80050e4:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80050e8:	d81e      	bhi.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80050ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050ee:	d011      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80050f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050f4:	d818      	bhi.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d020      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80050fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050fe:	d113      	bne.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005100:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005104:	3308      	adds	r3, #8
 8005106:	4618      	mov	r0, r3
 8005108:	f002 fef0 	bl	8007eec <RCCEx_PLL2_Config>
 800510c:	4603      	mov	r3, r0
 800510e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8005112:	e014      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005114:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005118:	3330      	adds	r3, #48	@ 0x30
 800511a:	4618      	mov	r0, r3
 800511c:	f002 ff7e 	bl	800801c <RCCEx_PLL3_Config>
 8005120:	4603      	mov	r3, r0
 8005122:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8005126:	e00a      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800512e:	e006      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005130:	bf00      	nop
 8005132:	e004      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005134:	bf00      	nop
 8005136:	e002      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005138:	bf00      	nop
 800513a:	e000      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800513c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800513e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10c      	bne.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8005146:	4b55      	ldr	r3, [pc, #340]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005148:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800514c:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8005150:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005156:	4a51      	ldr	r2, [pc, #324]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005158:	430b      	orrs	r3, r1
 800515a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800515e:	e003      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005160:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005164:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005168:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800516c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005170:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005174:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005178:	2300      	movs	r3, #0
 800517a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800517e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005182:	460b      	mov	r3, r1
 8005184:	4313      	orrs	r3, r2
 8005186:	d053      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8005188:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800518c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800518e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005192:	d031      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8005194:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005198:	d82a      	bhi.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800519a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800519e:	d02d      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80051a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80051a4:	d824      	bhi.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80051a6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80051aa:	d029      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80051ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80051b0:	d81e      	bhi.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80051b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80051b6:	d011      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x598>
 80051b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80051bc:	d818      	bhi.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d020      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80051c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051c6:	d113      	bne.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80051c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051cc:	3308      	adds	r3, #8
 80051ce:	4618      	mov	r0, r3
 80051d0:	f002 fe8c 	bl	8007eec <RCCEx_PLL2_Config>
 80051d4:	4603      	mov	r3, r0
 80051d6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80051da:	e014      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051e0:	3330      	adds	r3, #48	@ 0x30
 80051e2:	4618      	mov	r0, r3
 80051e4:	f002 ff1a 	bl	800801c <RCCEx_PLL3_Config>
 80051e8:	4603      	mov	r3, r0
 80051ea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80051ee:	e00a      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80051f6:	e006      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80051f8:	bf00      	nop
 80051fa:	e004      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80051fc:	bf00      	nop
 80051fe:	e002      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005200:	bf00      	nop
 8005202:	e000      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005204:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005206:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10c      	bne.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800520e:	4b23      	ldr	r3, [pc, #140]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005214:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005218:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800521c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800521e:	4a1f      	ldr	r2, [pc, #124]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005220:	430b      	orrs	r3, r1
 8005222:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005226:	e003      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005228:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800522c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005230:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005238:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800523c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005240:	2300      	movs	r3, #0
 8005242:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005246:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800524a:	460b      	mov	r3, r1
 800524c:	4313      	orrs	r3, r2
 800524e:	d03d      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8005250:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005254:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005256:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800525a:	d01b      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x650>
 800525c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005260:	d814      	bhi.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x648>
 8005262:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005266:	d017      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8005268:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800526c:	d80e      	bhi.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x648>
 800526e:	2b00      	cmp	r3, #0
 8005270:	d016      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8005272:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005276:	d109      	bne.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005278:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800527c:	3330      	adds	r3, #48	@ 0x30
 800527e:	4618      	mov	r0, r3
 8005280:	f002 fecc 	bl	800801c <RCCEx_PLL3_Config>
 8005284:	4603      	mov	r3, r0
 8005286:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800528a:	e00a      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005292:	e006      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8005294:	bf00      	nop
 8005296:	e004      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8005298:	bf00      	nop
 800529a:	e002      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x65e>
 800529c:	44020c00 	.word	0x44020c00
        break;
 80052a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052a2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10c      	bne.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80052aa:	4b99      	ldr	r3, [pc, #612]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80052ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80052b0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80052b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052ba:	4a95      	ldr	r2, [pc, #596]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80052bc:	430b      	orrs	r3, r1
 80052be:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80052c2:	e003      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80052c8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80052d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80052dc:	2300      	movs	r3, #0
 80052de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80052e2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80052e6:	460b      	mov	r3, r1
 80052e8:	4313      	orrs	r3, r2
 80052ea:	d03b      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80052ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052f2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80052f6:	d01b      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 80052f8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80052fc:	d814      	bhi.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 80052fe:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005302:	d017      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8005304:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005308:	d80e      	bhi.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 800530a:	2b00      	cmp	r3, #0
 800530c:	d014      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 800530e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005312:	d109      	bne.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005314:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005318:	3330      	adds	r3, #48	@ 0x30
 800531a:	4618      	mov	r0, r3
 800531c:	f002 fe7e 	bl	800801c <RCCEx_PLL3_Config>
 8005320:	4603      	mov	r3, r0
 8005322:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8005326:	e008      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800532e:	e004      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8005330:	bf00      	nop
 8005332:	e002      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8005334:	bf00      	nop
 8005336:	e000      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8005338:	bf00      	nop
    }

    if (ret == HAL_OK)
 800533a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10c      	bne.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005342:	4b73      	ldr	r3, [pc, #460]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005344:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005348:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800534c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005350:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005352:	4a6f      	ldr	r2, [pc, #444]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005354:	430b      	orrs	r3, r1
 8005356:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800535a:	e003      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800535c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005360:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005364:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005370:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005374:	2300      	movs	r3, #0
 8005376:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800537a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800537e:	460b      	mov	r3, r1
 8005380:	4313      	orrs	r3, r2
 8005382:	d03d      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8005384:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005388:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800538c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005390:	d01b      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x786>
 8005392:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005396:	d814      	bhi.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8005398:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800539c:	d017      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x78a>
 800539e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80053a2:	d80e      	bhi.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d014      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x78e>
 80053a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053ac:	d109      	bne.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80053ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053b2:	3330      	adds	r3, #48	@ 0x30
 80053b4:	4618      	mov	r0, r3
 80053b6:	f002 fe31 	bl	800801c <RCCEx_PLL3_Config>
 80053ba:	4603      	mov	r3, r0
 80053bc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 80053c0:	e008      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80053c8:	e004      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80053ca:	bf00      	nop
 80053cc:	e002      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80053ce:	bf00      	nop
 80053d0:	e000      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80053d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053d4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10d      	bne.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80053dc:	4b4c      	ldr	r3, [pc, #304]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80053de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80053e2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80053e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053ee:	4a48      	ldr	r2, [pc, #288]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80053f0:	430b      	orrs	r3, r1
 80053f2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80053f6:	e003      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80053fc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8005400:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005408:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800540c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005410:	2300      	movs	r3, #0
 8005412:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005416:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800541a:	460b      	mov	r3, r1
 800541c:	4313      	orrs	r3, r2
 800541e:	d035      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8005420:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005424:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005428:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800542c:	d015      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x816>
 800542e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005432:	d80e      	bhi.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8005434:	2b00      	cmp	r3, #0
 8005436:	d012      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8005438:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800543c:	d109      	bne.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800543e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005442:	3330      	adds	r3, #48	@ 0x30
 8005444:	4618      	mov	r0, r3
 8005446:	f002 fde9 	bl	800801c <RCCEx_PLL3_Config>
 800544a:	4603      	mov	r3, r0
 800544c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8005450:	e006      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005458:	e002      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 800545a:	bf00      	nop
 800545c:	e000      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 800545e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005460:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10d      	bne.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8005468:	4b29      	ldr	r3, [pc, #164]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800546a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800546e:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8005472:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005476:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800547a:	4a25      	ldr	r2, [pc, #148]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800547c:	430b      	orrs	r3, r1
 800547e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005482:	e003      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005484:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005488:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 800548c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005494:	2100      	movs	r1, #0
 8005496:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 800549a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800549e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80054a2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80054a6:	460b      	mov	r3, r1
 80054a8:	4313      	orrs	r3, r2
 80054aa:	d037      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 80054ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054b8:	d015      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80054ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054be:	d80e      	bhi.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x89a>
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d012      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 80054c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80054c8:	d109      	bne.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80054ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054ce:	3330      	adds	r3, #48	@ 0x30
 80054d0:	4618      	mov	r0, r3
 80054d2:	f002 fda3 	bl	800801c <RCCEx_PLL3_Config>
 80054d6:	4603      	mov	r3, r0
 80054d8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 80054dc:	e006      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80054e4:	e002      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 80054e6:	bf00      	nop
 80054e8:	e000      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 80054ea:	bf00      	nop
    }
    if (ret == HAL_OK)
 80054ec:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10f      	bne.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 80054f4:	4b06      	ldr	r3, [pc, #24]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80054f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80054fa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80054fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005506:	4a02      	ldr	r2, [pc, #8]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005508:	430b      	orrs	r3, r1
 800550a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800550e:	e005      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 8005510:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005514:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005518:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800551c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005524:	2100      	movs	r1, #0
 8005526:	67b9      	str	r1, [r7, #120]	@ 0x78
 8005528:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800552c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800552e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005532:	460b      	mov	r3, r1
 8005534:	4313      	orrs	r3, r2
 8005536:	d00e      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8005538:	4bb8      	ldr	r3, [pc, #736]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800553a:	69db      	ldr	r3, [r3, #28]
 800553c:	4ab7      	ldr	r2, [pc, #732]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800553e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005542:	61d3      	str	r3, [r2, #28]
 8005544:	4bb5      	ldr	r3, [pc, #724]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005546:	69d9      	ldr	r1, [r3, #28]
 8005548:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800554c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005550:	4ab2      	ldr	r2, [pc, #712]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005552:	430b      	orrs	r3, r1
 8005554:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005556:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800555a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005562:	673b      	str	r3, [r7, #112]	@ 0x70
 8005564:	2300      	movs	r3, #0
 8005566:	677b      	str	r3, [r7, #116]	@ 0x74
 8005568:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800556c:	460b      	mov	r3, r1
 800556e:	4313      	orrs	r3, r2
 8005570:	d055      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8005572:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005576:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800557a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800557e:	d031      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8005580:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005584:	d82a      	bhi.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x998>
 8005586:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800558a:	d02d      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 800558c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005590:	d824      	bhi.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x998>
 8005592:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005596:	d029      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8005598:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800559c:	d81e      	bhi.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x998>
 800559e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055a2:	d011      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80055a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055a8:	d818      	bhi.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x998>
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d020      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 80055ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055b2:	d113      	bne.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80055b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055b8:	3308      	adds	r3, #8
 80055ba:	4618      	mov	r0, r3
 80055bc:	f002 fc96 	bl	8007eec <RCCEx_PLL2_Config>
 80055c0:	4603      	mov	r3, r0
 80055c2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80055c6:	e014      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80055c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055cc:	3330      	adds	r3, #48	@ 0x30
 80055ce:	4618      	mov	r0, r3
 80055d0:	f002 fd24 	bl	800801c <RCCEx_PLL3_Config>
 80055d4:	4603      	mov	r3, r0
 80055d6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80055da:	e00a      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80055e2:	e006      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 80055e4:	bf00      	nop
 80055e6:	e004      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 80055e8:	bf00      	nop
 80055ea:	e002      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 80055ec:	bf00      	nop
 80055ee:	e000      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 80055f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055f2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10d      	bne.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80055fa:	4b88      	ldr	r3, [pc, #544]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80055fc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005600:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005604:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005608:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800560c:	4a83      	ldr	r2, [pc, #524]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800560e:	430b      	orrs	r3, r1
 8005610:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005614:	e003      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005616:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800561a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800561e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005626:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800562a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800562c:	2300      	movs	r3, #0
 800562e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005630:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005634:	460b      	mov	r3, r1
 8005636:	4313      	orrs	r3, r2
 8005638:	d055      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800563a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800563e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005642:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005646:	d031      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8005648:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800564c:	d82a      	bhi.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800564e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005652:	d02d      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8005654:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005658:	d824      	bhi.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800565a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800565e:	d029      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005660:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005664:	d81e      	bhi.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8005666:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800566a:	d011      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 800566c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005670:	d818      	bhi.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8005672:	2b00      	cmp	r3, #0
 8005674:	d020      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005676:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800567a:	d113      	bne.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800567c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005680:	3308      	adds	r3, #8
 8005682:	4618      	mov	r0, r3
 8005684:	f002 fc32 	bl	8007eec <RCCEx_PLL2_Config>
 8005688:	4603      	mov	r3, r0
 800568a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800568e:	e014      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005690:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005694:	3330      	adds	r3, #48	@ 0x30
 8005696:	4618      	mov	r0, r3
 8005698:	f002 fcc0 	bl	800801c <RCCEx_PLL3_Config>
 800569c:	4603      	mov	r3, r0
 800569e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80056a2:	e00a      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80056aa:	e006      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80056ac:	bf00      	nop
 80056ae:	e004      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80056b0:	bf00      	nop
 80056b2:	e002      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80056b4:	bf00      	nop
 80056b6:	e000      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80056b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ba:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10d      	bne.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80056c2:	4b56      	ldr	r3, [pc, #344]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80056c4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80056c8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80056cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056d4:	4a51      	ldr	r2, [pc, #324]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80056d6:	430b      	orrs	r3, r1
 80056d8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80056dc:	e003      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056de:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80056e2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80056e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ee:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80056f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80056f4:	2300      	movs	r3, #0
 80056f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80056f8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80056fc:	460b      	mov	r3, r1
 80056fe:	4313      	orrs	r3, r2
 8005700:	d032      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005702:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005706:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800570a:	2b05      	cmp	r3, #5
 800570c:	d80f      	bhi.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xaea>
 800570e:	2b03      	cmp	r3, #3
 8005710:	d211      	bcs.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8005712:	2b01      	cmp	r3, #1
 8005714:	d911      	bls.n	800573a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8005716:	2b02      	cmp	r3, #2
 8005718:	d109      	bne.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800571a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800571e:	3308      	adds	r3, #8
 8005720:	4618      	mov	r0, r3
 8005722:	f002 fbe3 	bl	8007eec <RCCEx_PLL2_Config>
 8005726:	4603      	mov	r3, r0
 8005728:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800572c:	e006      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005734:	e002      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8005736:	bf00      	nop
 8005738:	e000      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 800573a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800573c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10d      	bne.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005744:	4b35      	ldr	r3, [pc, #212]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005746:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800574a:	f023 0107 	bic.w	r1, r3, #7
 800574e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005752:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005756:	4a31      	ldr	r2, [pc, #196]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005758:	430b      	orrs	r3, r1
 800575a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800575e:	e003      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005760:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005764:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8005768:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800576c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005770:	2100      	movs	r1, #0
 8005772:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005774:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005778:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800577a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800577e:	460b      	mov	r3, r1
 8005780:	4313      	orrs	r3, r2
 8005782:	d024      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8005784:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005788:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800578c:	2b00      	cmp	r3, #0
 800578e:	d005      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8005790:	2b08      	cmp	r3, #8
 8005792:	d005      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800579a:	e002      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 800579c:	bf00      	nop
 800579e:	e000      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 80057a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057a2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10d      	bne.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80057aa:	4b1c      	ldr	r3, [pc, #112]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80057ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80057b0:	f023 0108 	bic.w	r1, r3, #8
 80057b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80057bc:	4a17      	ldr	r2, [pc, #92]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80057be:	430b      	orrs	r3, r1
 80057c0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80057c4:	e003      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057c6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80057ca:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d6:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80057da:	653b      	str	r3, [r7, #80]	@ 0x50
 80057dc:	2300      	movs	r3, #0
 80057de:	657b      	str	r3, [r7, #84]	@ 0x54
 80057e0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80057e4:	460b      	mov	r3, r1
 80057e6:	4313      	orrs	r3, r2
 80057e8:	f000 80b9 	beq.w	800595e <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80057ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 80057ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f0:	4a0b      	ldr	r2, [pc, #44]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 80057f2:	f043 0301 	orr.w	r3, r3, #1
 80057f6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057f8:	f7fc fb50 	bl	8001e9c <HAL_GetTick>
 80057fc:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005800:	e010      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005802:	f7fc fb4b 	bl	8001e9c <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b02      	cmp	r3, #2
 8005810:	d908      	bls.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005818:	e00a      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 800581a:	bf00      	nop
 800581c:	44020c00 	.word	0x44020c00
 8005820:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005824:	4bba      	ldr	r3, [pc, #744]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 8005826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0e8      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 8005830:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005834:	2b00      	cmp	r3, #0
 8005836:	f040 808e 	bne.w	8005956 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800583a:	4bb6      	ldr	r3, [pc, #728]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800583c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005840:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005844:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800584c:	2b00      	cmp	r3, #0
 800584e:	d023      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005850:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005854:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8005858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800585c:	4293      	cmp	r3, r2
 800585e:	d01b      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005860:	4bac      	ldr	r3, [pc, #688]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005862:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005866:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800586a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800586e:	4ba9      	ldr	r3, [pc, #676]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005870:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005874:	4aa7      	ldr	r2, [pc, #668]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005876:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800587a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800587e:	4ba5      	ldr	r3, [pc, #660]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005880:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005884:	4aa3      	ldr	r2, [pc, #652]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005886:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800588a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800588e:	4aa1      	ldr	r2, [pc, #644]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005894:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d019      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a4:	f7fc fafa 	bl	8001e9c <HAL_GetTick>
 80058a8:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058ac:	e00d      	b.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ae:	f7fc faf5 	bl	8001e9c <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058b8:	1ad2      	subs	r2, r2, r3
 80058ba:	f241 3388 	movw	r3, #5000	@ 0x1388
 80058be:	429a      	cmp	r2, r3
 80058c0:	d903      	bls.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 80058c8:	e006      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058ca:	4b92      	ldr	r3, [pc, #584]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80058cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058d0:	f003 0302 	and.w	r3, r3, #2
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d0ea      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 80058d8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d135      	bne.n	800594c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80058e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058e4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80058e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058f0:	d110      	bne.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 80058f2:	4b88      	ldr	r3, [pc, #544]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80058fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005902:	091b      	lsrs	r3, r3, #4
 8005904:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005908:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800590c:	4a81      	ldr	r2, [pc, #516]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800590e:	430b      	orrs	r3, r1
 8005910:	61d3      	str	r3, [r2, #28]
 8005912:	e005      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005914:	4b7f      	ldr	r3, [pc, #508]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	4a7e      	ldr	r2, [pc, #504]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800591a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800591e:	61d3      	str	r3, [r2, #28]
 8005920:	4b7c      	ldr	r3, [pc, #496]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005922:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005926:	4a7b      	ldr	r2, [pc, #492]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005928:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800592c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005930:	4b78      	ldr	r3, [pc, #480]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005932:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8005936:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800593a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800593e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005942:	4a74      	ldr	r2, [pc, #464]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005944:	430b      	orrs	r3, r1
 8005946:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800594a:	e008      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800594c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005950:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8005954:	e003      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005956:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800595a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800595e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005966:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800596a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800596c:	2300      	movs	r3, #0
 800596e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005970:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005974:	460b      	mov	r3, r1
 8005976:	4313      	orrs	r3, r2
 8005978:	d035      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800597a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800597e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005982:	2b30      	cmp	r3, #48	@ 0x30
 8005984:	d014      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 8005986:	2b30      	cmp	r3, #48	@ 0x30
 8005988:	d80e      	bhi.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 800598a:	2b20      	cmp	r3, #32
 800598c:	d012      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 800598e:	2b20      	cmp	r3, #32
 8005990:	d80a      	bhi.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8005992:	2b00      	cmp	r3, #0
 8005994:	d010      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 8005996:	2b10      	cmp	r3, #16
 8005998:	d106      	bne.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800599a:	4b5e      	ldr	r3, [pc, #376]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800599c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800599e:	4a5d      	ldr	r2, [pc, #372]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80059a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059a4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80059a6:	e008      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80059ae:	e004      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80059b0:	bf00      	nop
 80059b2:	e002      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80059b4:	bf00      	nop
 80059b6:	e000      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80059b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059ba:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10d      	bne.n	80059de <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80059c2:	4b54      	ldr	r3, [pc, #336]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80059c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80059c8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80059cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059d4:	4a4f      	ldr	r2, [pc, #316]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80059d6:	430b      	orrs	r3, r1
 80059d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80059dc:	e003      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059de:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80059e2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80059e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ee:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80059f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80059f4:	2300      	movs	r3, #0
 80059f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80059f8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80059fc:	460b      	mov	r3, r1
 80059fe:	4313      	orrs	r3, r2
 8005a00:	d033      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8005a02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 8005a0e:	2b40      	cmp	r3, #64	@ 0x40
 8005a10:	d007      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005a12:	e010      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a14:	4b3f      	ldr	r3, [pc, #252]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a18:	4a3e      	ldr	r2, [pc, #248]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005a1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a1e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005a20:	e00d      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a26:	3308      	adds	r3, #8
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f002 fa5f 	bl	8007eec <RCCEx_PLL2_Config>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005a34:	e003      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005a3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a3e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10d      	bne.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8005a46:	4b33      	ldr	r3, [pc, #204]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005a48:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a4c:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8005a50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a58:	4a2e      	ldr	r2, [pc, #184]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005a5a:	430b      	orrs	r3, r1
 8005a5c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005a60:	e003      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a62:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a66:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005a6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a72:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005a76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a78:	2300      	movs	r3, #0
 8005a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a7c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005a80:	460b      	mov	r3, r1
 8005a82:	4313      	orrs	r3, r2
 8005a84:	d04c      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8005a86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005a8e:	2b04      	cmp	r3, #4
 8005a90:	d827      	bhi.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8005a92:	a201      	add	r2, pc, #4	@ (adr r2, 8005a98 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 8005a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a98:	08005aad 	.word	0x08005aad
 8005a9c:	08005abb 	.word	0x08005abb
 8005aa0:	08005acf 	.word	0x08005acf
 8005aa4:	08005aeb 	.word	0x08005aeb
 8005aa8:	08005aeb 	.word	0x08005aeb
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aac:	4b19      	ldr	r3, [pc, #100]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab0:	4a18      	ldr	r2, [pc, #96]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005ab2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ab6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005ab8:	e018      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005aba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005abe:	3308      	adds	r3, #8
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f002 fa13 	bl	8007eec <RCCEx_PLL2_Config>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005acc:	e00e      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ad2:	3330      	adds	r3, #48	@ 0x30
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f002 faa1 	bl	800801c <RCCEx_PLL3_Config>
 8005ada:	4603      	mov	r3, r0
 8005adc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005ae0:	e004      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005ae8:	e000      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 8005aea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aec:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d111      	bne.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005af4:	4b07      	ldr	r3, [pc, #28]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005afa:	f023 0107 	bic.w	r1, r3, #7
 8005afe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005b06:	4a03      	ldr	r2, [pc, #12]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005b08:	430b      	orrs	r3, r1
 8005b0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005b0e:	e007      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8005b10:	44020800 	.word	0x44020800
 8005b14:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b18:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005b1c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005b20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b28:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005b2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b2e:	2300      	movs	r3, #0
 8005b30:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b32:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005b36:	460b      	mov	r3, r1
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	f000 8081 	beq.w	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8005b3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005b46:	2b20      	cmp	r3, #32
 8005b48:	d85f      	bhi.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8005b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b50 <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8005b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b50:	08005bd5 	.word	0x08005bd5
 8005b54:	08005c0b 	.word	0x08005c0b
 8005b58:	08005c0b 	.word	0x08005c0b
 8005b5c:	08005c0b 	.word	0x08005c0b
 8005b60:	08005c0b 	.word	0x08005c0b
 8005b64:	08005c0b 	.word	0x08005c0b
 8005b68:	08005c0b 	.word	0x08005c0b
 8005b6c:	08005c0b 	.word	0x08005c0b
 8005b70:	08005be3 	.word	0x08005be3
 8005b74:	08005c0b 	.word	0x08005c0b
 8005b78:	08005c0b 	.word	0x08005c0b
 8005b7c:	08005c0b 	.word	0x08005c0b
 8005b80:	08005c0b 	.word	0x08005c0b
 8005b84:	08005c0b 	.word	0x08005c0b
 8005b88:	08005c0b 	.word	0x08005c0b
 8005b8c:	08005c0b 	.word	0x08005c0b
 8005b90:	08005bf7 	.word	0x08005bf7
 8005b94:	08005c0b 	.word	0x08005c0b
 8005b98:	08005c0b 	.word	0x08005c0b
 8005b9c:	08005c0b 	.word	0x08005c0b
 8005ba0:	08005c0b 	.word	0x08005c0b
 8005ba4:	08005c0b 	.word	0x08005c0b
 8005ba8:	08005c0b 	.word	0x08005c0b
 8005bac:	08005c0b 	.word	0x08005c0b
 8005bb0:	08005c13 	.word	0x08005c13
 8005bb4:	08005c0b 	.word	0x08005c0b
 8005bb8:	08005c0b 	.word	0x08005c0b
 8005bbc:	08005c0b 	.word	0x08005c0b
 8005bc0:	08005c0b 	.word	0x08005c0b
 8005bc4:	08005c0b 	.word	0x08005c0b
 8005bc8:	08005c0b 	.word	0x08005c0b
 8005bcc:	08005c0b 	.word	0x08005c0b
 8005bd0:	08005c13 	.word	0x08005c13
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bd4:	4bb9      	ldr	r3, [pc, #740]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd8:	4ab8      	ldr	r2, [pc, #736]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005bda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bde:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005be0:	e018      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005be2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005be6:	3308      	adds	r3, #8
 8005be8:	4618      	mov	r0, r3
 8005bea:	f002 f97f 	bl	8007eec <RCCEx_PLL2_Config>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005bf4:	e00e      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005bf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bfa:	3330      	adds	r3, #48	@ 0x30
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f002 fa0d 	bl	800801c <RCCEx_PLL3_Config>
 8005c02:	4603      	mov	r3, r0
 8005c04:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005c08:	e004      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005c10:	e000      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 8005c12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c14:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10d      	bne.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005c1c:	4ba7      	ldr	r3, [pc, #668]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c22:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005c26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005c2e:	4aa3      	ldr	r2, [pc, #652]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005c30:	430b      	orrs	r3, r1
 8005c32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005c36:	e003      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c38:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005c3c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005c40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c48:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c4e:	2300      	movs	r3, #0
 8005c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c52:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005c56:	460b      	mov	r3, r1
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	d04e      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8005c5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c68:	d02e      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005c6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c6e:	d827      	bhi.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005c70:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c72:	d02b      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x1088>
 8005c74:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c76:	d823      	bhi.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005c78:	2b80      	cmp	r3, #128	@ 0x80
 8005c7a:	d017      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x1068>
 8005c7c:	2b80      	cmp	r3, #128	@ 0x80
 8005c7e:	d81f      	bhi.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d002      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x1046>
 8005c84:	2b40      	cmp	r3, #64	@ 0x40
 8005c86:	d007      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 8005c88:	e01a      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c8a:	4b8c      	ldr	r3, [pc, #560]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c8e:	4a8b      	ldr	r2, [pc, #556]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005c90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c94:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005c96:	e01a      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c9c:	3308      	adds	r3, #8
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f002 f924 	bl	8007eec <RCCEx_PLL2_Config>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005caa:	e010      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005cac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005cb0:	3330      	adds	r3, #48	@ 0x30
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f002 f9b2 	bl	800801c <RCCEx_PLL3_Config>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005cbe:	e006      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005cc6:	e002      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8005cc8:	bf00      	nop
 8005cca:	e000      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8005ccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cce:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10d      	bne.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005cd6:	4b79      	ldr	r3, [pc, #484]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005cdc:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8005ce0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ce4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ce8:	4974      	ldr	r1, [pc, #464]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005cf0:	e003      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005cf6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8005cfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d02:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005d06:	623b      	str	r3, [r7, #32]
 8005d08:	2300      	movs	r3, #0
 8005d0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d0c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005d10:	460b      	mov	r3, r1
 8005d12:	4313      	orrs	r3, r2
 8005d14:	d055      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8005d16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d1a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005d1e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005d22:	d031      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8005d24:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005d28:	d82a      	bhi.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005d2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d2e:	d02d      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8005d30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d34:	d824      	bhi.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005d36:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005d3a:	d029      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x114c>
 8005d3c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005d40:	d81e      	bhi.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005d42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d46:	d011      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8005d48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d4c:	d818      	bhi.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d020      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 8005d52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d56:	d113      	bne.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d5c:	3308      	adds	r3, #8
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f002 f8c4 	bl	8007eec <RCCEx_PLL2_Config>
 8005d64:	4603      	mov	r3, r0
 8005d66:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005d6a:	e014      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d70:	3330      	adds	r3, #48	@ 0x30
 8005d72:	4618      	mov	r0, r3
 8005d74:	f002 f952 	bl	800801c <RCCEx_PLL3_Config>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005d7e:	e00a      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005d86:	e006      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005d88:	bf00      	nop
 8005d8a:	e004      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005d8c:	bf00      	nop
 8005d8e:	e002      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005d90:	bf00      	nop
 8005d92:	e000      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005d94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d96:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10d      	bne.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8005d9e:	4b47      	ldr	r3, [pc, #284]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005da4:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 8005da8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005dac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005db0:	4942      	ldr	r1, [pc, #264]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005db8:	e003      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dba:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005dbe:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005dc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dca:	2100      	movs	r1, #0
 8005dcc:	61b9      	str	r1, [r7, #24]
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	61fb      	str	r3, [r7, #28]
 8005dd4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005dd8:	460b      	mov	r3, r1
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	d03c      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8005dde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005de2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005de6:	2b03      	cmp	r3, #3
 8005de8:	d81b      	bhi.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x11de>
 8005dea:	a201      	add	r2, pc, #4	@ (adr r2, 8005df0 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 8005dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df0:	08005e2b 	.word	0x08005e2b
 8005df4:	08005e01 	.word	0x08005e01
 8005df8:	08005e0f 	.word	0x08005e0f
 8005dfc:	08005e2b 	.word	0x08005e2b
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e00:	4b2e      	ldr	r3, [pc, #184]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e04:	4a2d      	ldr	r2, [pc, #180]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005e06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e0a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005e0c:	e00e      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e12:	3308      	adds	r3, #8
 8005e14:	4618      	mov	r0, r3
 8005e16:	f002 f869 	bl	8007eec <RCCEx_PLL2_Config>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8005e20:	e004      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005e28:	e000      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 8005e2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e2c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10d      	bne.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005e34:	4b21      	ldr	r3, [pc, #132]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005e36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005e3a:	f023 0203 	bic.w	r2, r3, #3
 8005e3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005e46:	491d      	ldr	r1, [pc, #116]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005e4e:	e003      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e50:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005e54:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005e58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e60:	2100      	movs	r1, #0
 8005e62:	6139      	str	r1, [r7, #16]
 8005e64:	f003 0304 	and.w	r3, r3, #4
 8005e68:	617b      	str	r3, [r7, #20]
 8005e6a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005e6e:	460b      	mov	r3, r1
 8005e70:	4313      	orrs	r3, r2
 8005e72:	d03c      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005e74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e80:	d00e      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8005e82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e86:	d815      	bhi.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d019      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x127c>
 8005e8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e90:	d110      	bne.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e92:	4b0a      	ldr	r3, [pc, #40]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e96:	4a09      	ldr	r2, [pc, #36]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005e98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e9c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005e9e:	e010      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ea0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ea4:	3308      	adds	r3, #8
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f002 f820 	bl	8007eec <RCCEx_PLL2_Config>
 8005eac:	4603      	mov	r3, r0
 8005eae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005eb2:	e006      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005eba:	e002      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x127e>
 8005ebc:	44020c00 	.word	0x44020c00
        break;
 8005ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ec2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10d      	bne.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8005eca:	4b3d      	ldr	r3, [pc, #244]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005ecc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005ed0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ed4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005edc:	4938      	ldr	r1, [pc, #224]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8005ee4:	e003      	b.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005eea:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005eee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	f003 0310 	and.w	r3, r3, #16
 8005efe:	60fb      	str	r3, [r7, #12]
 8005f00:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005f04:	460b      	mov	r3, r1
 8005f06:	4313      	orrs	r3, r2
 8005f08:	d038      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8005f0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f0e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005f12:	2b30      	cmp	r3, #48	@ 0x30
 8005f14:	d01b      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x130a>
 8005f16:	2b30      	cmp	r3, #48	@ 0x30
 8005f18:	d815      	bhi.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x1302>
 8005f1a:	2b10      	cmp	r3, #16
 8005f1c:	d002      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 8005f1e:	2b20      	cmp	r3, #32
 8005f20:	d007      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 8005f22:	e010      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f24:	4b26      	ldr	r3, [pc, #152]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f28:	4a25      	ldr	r2, [pc, #148]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005f2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f2e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8005f30:	e00e      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005f32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f36:	3330      	adds	r3, #48	@ 0x30
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f002 f86f 	bl	800801c <RCCEx_PLL3_Config>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8005f44:	e004      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005f4c:	e000      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 8005f4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f50:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10d      	bne.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005f58:	4b19      	ldr	r3, [pc, #100]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005f5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f5e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005f62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f66:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005f6a:	4915      	ldr	r1, [pc, #84]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005f72:	e003      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f74:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005f78:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005f7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f84:	2100      	movs	r1, #0
 8005f86:	6039      	str	r1, [r7, #0]
 8005f88:	f003 0308 	and.w	r3, r3, #8
 8005f8c:	607b      	str	r3, [r7, #4]
 8005f8e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005f92:	460b      	mov	r3, r1
 8005f94:	4313      	orrs	r3, r2
 8005f96:	d00c      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005f98:	4b09      	ldr	r3, [pc, #36]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005f9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f9e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005fa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fa6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005faa:	4905      	ldr	r1, [pc, #20]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8005fb2:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	37e8      	adds	r7, #232	@ 0xe8
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fc0:	44020c00 	.word	0x44020c00

08005fc4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b08b      	sub	sp, #44	@ 0x2c
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005fcc:	4bae      	ldr	r3, [pc, #696]	@ (8006288 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005fce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fd4:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005fd6:	4bac      	ldr	r3, [pc, #688]	@ (8006288 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fda:	f003 0303 	and.w	r3, r3, #3
 8005fde:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005fe0:	4ba9      	ldr	r3, [pc, #676]	@ (8006288 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe4:	0a1b      	lsrs	r3, r3, #8
 8005fe6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005fea:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005fec:	4ba6      	ldr	r3, [pc, #664]	@ (8006288 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff0:	091b      	lsrs	r3, r3, #4
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005ff8:	4ba3      	ldr	r3, [pc, #652]	@ (8006288 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ffc:	08db      	lsrs	r3, r3, #3
 8005ffe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	fb02 f303 	mul.w	r3, r2, r3
 8006008:	ee07 3a90 	vmov	s15, r3
 800600c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006010:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 8126 	beq.w	8006268 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	2b03      	cmp	r3, #3
 8006020:	d053      	beq.n	80060ca <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	2b03      	cmp	r3, #3
 8006026:	d86f      	bhi.n	8006108 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d003      	beq.n	8006036 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	2b02      	cmp	r3, #2
 8006032:	d02b      	beq.n	800608c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006034:	e068      	b.n	8006108 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006036:	4b94      	ldr	r3, [pc, #592]	@ (8006288 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	08db      	lsrs	r3, r3, #3
 800603c:	f003 0303 	and.w	r3, r3, #3
 8006040:	4a92      	ldr	r2, [pc, #584]	@ (800628c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006042:	fa22 f303 	lsr.w	r3, r2, r3
 8006046:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	ee07 3a90 	vmov	s15, r3
 800604e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	ee07 3a90 	vmov	s15, r3
 8006058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800605c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006060:	6a3b      	ldr	r3, [r7, #32]
 8006062:	ee07 3a90 	vmov	s15, r3
 8006066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800606a:	ed97 6a04 	vldr	s12, [r7, #16]
 800606e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8006290 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800607a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800607e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006086:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800608a:	e068      	b.n	800615e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	ee07 3a90 	vmov	s15, r3
 8006092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006096:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8006294 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800609a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	ee07 3a90 	vmov	s15, r3
 80060a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060a8:	ed97 6a04 	vldr	s12, [r7, #16]
 80060ac:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006290 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80060b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80060c8:	e049      	b.n	800615e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	ee07 3a90 	vmov	s15, r3
 80060d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060d4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006298 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 80060d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	ee07 3a90 	vmov	s15, r3
 80060e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060e6:	ed97 6a04 	vldr	s12, [r7, #16]
 80060ea:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8006290 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80060ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006102:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006106:	e02a      	b.n	800615e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006108:	4b5f      	ldr	r3, [pc, #380]	@ (8006288 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	08db      	lsrs	r3, r3, #3
 800610e:	f003 0303 	and.w	r3, r3, #3
 8006112:	4a5e      	ldr	r2, [pc, #376]	@ (800628c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006114:	fa22 f303 	lsr.w	r3, r2, r3
 8006118:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	ee07 3a90 	vmov	s15, r3
 8006120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	ee07 3a90 	vmov	s15, r3
 800612a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800612e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006132:	6a3b      	ldr	r3, [r7, #32]
 8006134:	ee07 3a90 	vmov	s15, r3
 8006138:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800613c:	ed97 6a04 	vldr	s12, [r7, #16]
 8006140:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006290 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006144:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006148:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800614c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006150:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006158:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800615c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800615e:	4b4a      	ldr	r3, [pc, #296]	@ (8006288 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006166:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800616a:	d121      	bne.n	80061b0 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800616c:	4b46      	ldr	r3, [pc, #280]	@ (8006288 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800616e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006170:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d017      	beq.n	80061a8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006178:	4b43      	ldr	r3, [pc, #268]	@ (8006288 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800617a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800617c:	0a5b      	lsrs	r3, r3, #9
 800617e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006182:	ee07 3a90 	vmov	s15, r3
 8006186:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800618a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800618e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006192:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006196:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800619a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800619e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	e006      	b.n	80061b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	601a      	str	r2, [r3, #0]
 80061ae:	e002      	b.n	80061b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80061b6:	4b34      	ldr	r3, [pc, #208]	@ (8006288 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80061c2:	d121      	bne.n	8006208 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80061c4:	4b30      	ldr	r3, [pc, #192]	@ (8006288 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80061c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d017      	beq.n	8006200 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80061d0:	4b2d      	ldr	r3, [pc, #180]	@ (8006288 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80061d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061d4:	0c1b      	lsrs	r3, r3, #16
 80061d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061da:	ee07 3a90 	vmov	s15, r3
 80061de:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80061e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061e6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80061ea:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80061ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061f6:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	605a      	str	r2, [r3, #4]
 80061fe:	e006      	b.n	800620e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	605a      	str	r2, [r3, #4]
 8006206:	e002      	b.n	800620e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800620e:	4b1e      	ldr	r3, [pc, #120]	@ (8006288 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006216:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800621a:	d121      	bne.n	8006260 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800621c:	4b1a      	ldr	r3, [pc, #104]	@ (8006288 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800621e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006220:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d017      	beq.n	8006258 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006228:	4b17      	ldr	r3, [pc, #92]	@ (8006288 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800622a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800622c:	0e1b      	lsrs	r3, r3, #24
 800622e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006232:	ee07 3a90 	vmov	s15, r3
 8006236:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800623a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800623e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006242:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800624a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800624e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006256:	e010      	b.n	800627a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	609a      	str	r2, [r3, #8]
}
 800625e:	e00c      	b.n	800627a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	609a      	str	r2, [r3, #8]
}
 8006266:	e008      	b.n	800627a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	609a      	str	r2, [r3, #8]
}
 800627a:	bf00      	nop
 800627c:	372c      	adds	r7, #44	@ 0x2c
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	44020c00 	.word	0x44020c00
 800628c:	03d09000 	.word	0x03d09000
 8006290:	46000000 	.word	0x46000000
 8006294:	4a742400 	.word	0x4a742400
 8006298:	4af42400 	.word	0x4af42400

0800629c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 800629c:	b480      	push	{r7}
 800629e:	b08b      	sub	sp, #44	@ 0x2c
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80062a4:	4bae      	ldr	r3, [pc, #696]	@ (8006560 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80062a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ac:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80062ae:	4bac      	ldr	r3, [pc, #688]	@ (8006560 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80062b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b2:	f003 0303 	and.w	r3, r3, #3
 80062b6:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80062b8:	4ba9      	ldr	r3, [pc, #676]	@ (8006560 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80062ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062bc:	0a1b      	lsrs	r3, r3, #8
 80062be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062c2:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80062c4:	4ba6      	ldr	r3, [pc, #664]	@ (8006560 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80062c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c8:	091b      	lsrs	r3, r3, #4
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80062d0:	4ba3      	ldr	r3, [pc, #652]	@ (8006560 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80062d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d4:	08db      	lsrs	r3, r3, #3
 80062d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	fb02 f303 	mul.w	r3, r2, r3
 80062e0:	ee07 3a90 	vmov	s15, r3
 80062e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e8:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f000 8126 	beq.w	8006540 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	2b03      	cmp	r3, #3
 80062f8:	d053      	beq.n	80063a2 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	2b03      	cmp	r3, #3
 80062fe:	d86f      	bhi.n	80063e0 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d003      	beq.n	800630e <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	2b02      	cmp	r3, #2
 800630a:	d02b      	beq.n	8006364 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800630c:	e068      	b.n	80063e0 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800630e:	4b94      	ldr	r3, [pc, #592]	@ (8006560 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	08db      	lsrs	r3, r3, #3
 8006314:	f003 0303 	and.w	r3, r3, #3
 8006318:	4a92      	ldr	r2, [pc, #584]	@ (8006564 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800631a:	fa22 f303 	lsr.w	r3, r2, r3
 800631e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	ee07 3a90 	vmov	s15, r3
 8006326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	ee07 3a90 	vmov	s15, r3
 8006330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006334:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006338:	6a3b      	ldr	r3, [r7, #32]
 800633a:	ee07 3a90 	vmov	s15, r3
 800633e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006342:	ed97 6a04 	vldr	s12, [r7, #16]
 8006346:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800634a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800634e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006352:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800635a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800635e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006362:	e068      	b.n	8006436 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	ee07 3a90 	vmov	s15, r3
 800636a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800636e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800656c <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8006372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006376:	6a3b      	ldr	r3, [r7, #32]
 8006378:	ee07 3a90 	vmov	s15, r3
 800637c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006380:	ed97 6a04 	vldr	s12, [r7, #16]
 8006384:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006388:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800638c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006390:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006394:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800639c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80063a0:	e049      	b.n	8006436 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	ee07 3a90 	vmov	s15, r3
 80063a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ac:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006570 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 80063b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063b4:	6a3b      	ldr	r3, [r7, #32]
 80063b6:	ee07 3a90 	vmov	s15, r3
 80063ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063be:	ed97 6a04 	vldr	s12, [r7, #16]
 80063c2:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80063c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063da:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80063de:	e02a      	b.n	8006436 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80063e0:	4b5f      	ldr	r3, [pc, #380]	@ (8006560 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	08db      	lsrs	r3, r3, #3
 80063e6:	f003 0303 	and.w	r3, r3, #3
 80063ea:	4a5e      	ldr	r2, [pc, #376]	@ (8006564 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80063ec:	fa22 f303 	lsr.w	r3, r2, r3
 80063f0:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	ee07 3a90 	vmov	s15, r3
 80063f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	ee07 3a90 	vmov	s15, r3
 8006402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800640a:	6a3b      	ldr	r3, [r7, #32]
 800640c:	ee07 3a90 	vmov	s15, r3
 8006410:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006414:	ed97 6a04 	vldr	s12, [r7, #16]
 8006418:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800641c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006420:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006424:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006428:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800642c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006430:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006434:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006436:	4b4a      	ldr	r3, [pc, #296]	@ (8006560 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800643e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006442:	d121      	bne.n	8006488 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006444:	4b46      	ldr	r3, [pc, #280]	@ (8006560 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006448:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d017      	beq.n	8006480 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006450:	4b43      	ldr	r3, [pc, #268]	@ (8006560 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006454:	0a5b      	lsrs	r3, r3, #9
 8006456:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800645a:	ee07 3a90 	vmov	s15, r3
 800645e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8006462:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006466:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800646a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800646e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006476:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	e006      	b.n	800648e <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	e002      	b.n	800648e <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800648e:	4b34      	ldr	r3, [pc, #208]	@ (8006560 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006496:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800649a:	d121      	bne.n	80064e0 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800649c:	4b30      	ldr	r3, [pc, #192]	@ (8006560 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800649e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d017      	beq.n	80064d8 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80064a8:	4b2d      	ldr	r3, [pc, #180]	@ (8006560 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80064aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ac:	0c1b      	lsrs	r3, r3, #16
 80064ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064b2:	ee07 3a90 	vmov	s15, r3
 80064b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80064ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064be:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80064c2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80064c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064ce:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	605a      	str	r2, [r3, #4]
 80064d6:	e006      	b.n	80064e6 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	605a      	str	r2, [r3, #4]
 80064de:	e002      	b.n	80064e6 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80064e6:	4b1e      	ldr	r3, [pc, #120]	@ (8006560 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064f2:	d121      	bne.n	8006538 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80064f4:	4b1a      	ldr	r3, [pc, #104]	@ (8006560 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80064f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d017      	beq.n	8006530 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006500:	4b17      	ldr	r3, [pc, #92]	@ (8006560 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006504:	0e1b      	lsrs	r3, r3, #24
 8006506:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800650a:	ee07 3a90 	vmov	s15, r3
 800650e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8006512:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006516:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800651a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800651e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006526:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800652e:	e010      	b.n	8006552 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	609a      	str	r2, [r3, #8]
}
 8006536:	e00c      	b.n	8006552 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	609a      	str	r2, [r3, #8]
}
 800653e:	e008      	b.n	8006552 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	609a      	str	r2, [r3, #8]
}
 8006552:	bf00      	nop
 8006554:	372c      	adds	r7, #44	@ 0x2c
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	44020c00 	.word	0x44020c00
 8006564:	03d09000 	.word	0x03d09000
 8006568:	46000000 	.word	0x46000000
 800656c:	4a742400 	.word	0x4a742400
 8006570:	4af42400 	.word	0x4af42400

08006574 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8006574:	b480      	push	{r7}
 8006576:	b08b      	sub	sp, #44	@ 0x2c
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800657c:	4bae      	ldr	r3, [pc, #696]	@ (8006838 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800657e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006584:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006586:	4bac      	ldr	r3, [pc, #688]	@ (8006838 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800658a:	f003 0303 	and.w	r3, r3, #3
 800658e:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8006590:	4ba9      	ldr	r3, [pc, #676]	@ (8006838 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006594:	0a1b      	lsrs	r3, r3, #8
 8006596:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800659a:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800659c:	4ba6      	ldr	r3, [pc, #664]	@ (8006838 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800659e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065a0:	091b      	lsrs	r3, r3, #4
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80065a8:	4ba3      	ldr	r3, [pc, #652]	@ (8006838 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80065aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065ac:	08db      	lsrs	r3, r3, #3
 80065ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	fb02 f303 	mul.w	r3, r2, r3
 80065b8:	ee07 3a90 	vmov	s15, r3
 80065bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065c0:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f000 8126 	beq.w	8006818 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	2b03      	cmp	r3, #3
 80065d0:	d053      	beq.n	800667a <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	2b03      	cmp	r3, #3
 80065d6:	d86f      	bhi.n	80066b8 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d003      	beq.n	80065e6 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d02b      	beq.n	800663c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80065e4:	e068      	b.n	80066b8 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80065e6:	4b94      	ldr	r3, [pc, #592]	@ (8006838 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	08db      	lsrs	r3, r3, #3
 80065ec:	f003 0303 	and.w	r3, r3, #3
 80065f0:	4a92      	ldr	r2, [pc, #584]	@ (800683c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80065f2:	fa22 f303 	lsr.w	r3, r2, r3
 80065f6:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	ee07 3a90 	vmov	s15, r3
 80065fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	ee07 3a90 	vmov	s15, r3
 8006608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800660c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006610:	6a3b      	ldr	r3, [r7, #32]
 8006612:	ee07 3a90 	vmov	s15, r3
 8006616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800661a:	ed97 6a04 	vldr	s12, [r7, #16]
 800661e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8006840 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8006622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800662a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800662e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006636:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800663a:	e068      	b.n	800670e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	ee07 3a90 	vmov	s15, r3
 8006642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006646:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8006844 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800664a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	ee07 3a90 	vmov	s15, r3
 8006654:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006658:	ed97 6a04 	vldr	s12, [r7, #16]
 800665c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006840 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8006660:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006664:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006668:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800666c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006670:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006674:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006678:	e049      	b.n	800670e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	ee07 3a90 	vmov	s15, r3
 8006680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006684:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006848 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8006688:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800668c:	6a3b      	ldr	r3, [r7, #32]
 800668e:	ee07 3a90 	vmov	s15, r3
 8006692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006696:	ed97 6a04 	vldr	s12, [r7, #16]
 800669a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8006840 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800669e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066b2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80066b6:	e02a      	b.n	800670e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80066b8:	4b5f      	ldr	r3, [pc, #380]	@ (8006838 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	08db      	lsrs	r3, r3, #3
 80066be:	f003 0303 	and.w	r3, r3, #3
 80066c2:	4a5e      	ldr	r2, [pc, #376]	@ (800683c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80066c4:	fa22 f303 	lsr.w	r3, r2, r3
 80066c8:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	ee07 3a90 	vmov	s15, r3
 80066d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	ee07 3a90 	vmov	s15, r3
 80066da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	ee07 3a90 	vmov	s15, r3
 80066e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ec:	ed97 6a04 	vldr	s12, [r7, #16]
 80066f0:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006840 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80066f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006700:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006708:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800670c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800670e:	4b4a      	ldr	r3, [pc, #296]	@ (8006838 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006716:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800671a:	d121      	bne.n	8006760 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800671c:	4b46      	ldr	r3, [pc, #280]	@ (8006838 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800671e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006720:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d017      	beq.n	8006758 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006728:	4b43      	ldr	r3, [pc, #268]	@ (8006838 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800672a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800672c:	0a5b      	lsrs	r3, r3, #9
 800672e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006732:	ee07 3a90 	vmov	s15, r3
 8006736:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800673a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800673e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006742:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006746:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800674a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800674e:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	e006      	b.n	8006766 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	e002      	b.n	8006766 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006766:	4b34      	ldr	r3, [pc, #208]	@ (8006838 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800676e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006772:	d121      	bne.n	80067b8 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006774:	4b30      	ldr	r3, [pc, #192]	@ (8006838 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006778:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d017      	beq.n	80067b0 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006780:	4b2d      	ldr	r3, [pc, #180]	@ (8006838 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006784:	0c1b      	lsrs	r3, r3, #16
 8006786:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800678a:	ee07 3a90 	vmov	s15, r3
 800678e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006792:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006796:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800679a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800679e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067a6:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	605a      	str	r2, [r3, #4]
 80067ae:	e006      	b.n	80067be <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	605a      	str	r2, [r3, #4]
 80067b6:	e002      	b.n	80067be <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80067be:	4b1e      	ldr	r3, [pc, #120]	@ (8006838 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067ca:	d121      	bne.n	8006810 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80067cc:	4b1a      	ldr	r3, [pc, #104]	@ (8006838 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80067ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d017      	beq.n	8006808 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80067d8:	4b17      	ldr	r3, [pc, #92]	@ (8006838 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80067da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067dc:	0e1b      	lsrs	r3, r3, #24
 80067de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067e2:	ee07 3a90 	vmov	s15, r3
 80067e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 80067ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067ee:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80067f2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80067f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067fe:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8006806:	e010      	b.n	800682a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	609a      	str	r2, [r3, #8]
}
 800680e:	e00c      	b.n	800682a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	609a      	str	r2, [r3, #8]
}
 8006816:	e008      	b.n	800682a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	609a      	str	r2, [r3, #8]
}
 800682a:	bf00      	nop
 800682c:	372c      	adds	r7, #44	@ 0x2c
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	44020c00 	.word	0x44020c00
 800683c:	03d09000 	.word	0x03d09000
 8006840:	46000000 	.word	0x46000000
 8006844:	4a742400 	.word	0x4a742400
 8006848:	4af42400 	.word	0x4af42400

0800684c <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800684c:	b590      	push	{r4, r7, lr}
 800684e:	b08f      	sub	sp, #60	@ 0x3c
 8006850:	af00      	add	r7, sp, #0
 8006852:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006856:	e9d7 0100 	ldrd	r0, r1, [r7]
 800685a:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 800685e:	4321      	orrs	r1, r4
 8006860:	d150      	bne.n	8006904 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006862:	4b26      	ldr	r3, [pc, #152]	@ (80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006864:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006868:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800686c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800686e:	4b23      	ldr	r3, [pc, #140]	@ (80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006870:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006874:	f003 0302 	and.w	r3, r3, #2
 8006878:	2b02      	cmp	r3, #2
 800687a:	d108      	bne.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800687c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006882:	d104      	bne.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006884:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006888:	637b      	str	r3, [r7, #52]	@ 0x34
 800688a:	f001 bb20 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800688e:	4b1b      	ldr	r3, [pc, #108]	@ (80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006890:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006894:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006898:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800689c:	d108      	bne.n	80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800689e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068a4:	d104      	bne.n	80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80068a6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80068aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80068ac:	f001 bb0f 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80068b0:	4b12      	ldr	r3, [pc, #72]	@ (80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068bc:	d119      	bne.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80068be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068c4:	d115      	bne.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80068c6:	4b0d      	ldr	r3, [pc, #52]	@ (80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80068c8:	69db      	ldr	r3, [r3, #28]
 80068ca:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80068ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068d2:	d30a      	bcc.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80068d4:	4b09      	ldr	r3, [pc, #36]	@ (80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80068d6:	69db      	ldr	r3, [r3, #28]
 80068d8:	0a1b      	lsrs	r3, r3, #8
 80068da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068de:	4a08      	ldr	r2, [pc, #32]	@ (8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80068e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80068e6:	f001 baf2 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 80068ea:	2300      	movs	r3, #0
 80068ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80068ee:	f001 baee 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80068f2:	2300      	movs	r3, #0
 80068f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80068f6:	f001 baea 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80068fa:	bf00      	nop
 80068fc:	44020c00 	.word	0x44020c00
 8006900:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8006904:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006908:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 800690c:	ea50 0104 	orrs.w	r1, r0, r4
 8006910:	f000 8615 	beq.w	800753e <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 8006914:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006918:	2801      	cmp	r0, #1
 800691a:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 800691e:	f081 82d3 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006922:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006926:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 800692a:	ea50 0104 	orrs.w	r1, r0, r4
 800692e:	f000 84d8 	beq.w	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8006932:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006936:	2801      	cmp	r0, #1
 8006938:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 800693c:	f081 82c4 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006940:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006944:	f1a1 0410 	sub.w	r4, r1, #16
 8006948:	ea50 0104 	orrs.w	r1, r0, r4
 800694c:	f001 8288 	beq.w	8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 8006950:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006954:	2801      	cmp	r0, #1
 8006956:	f171 0110 	sbcs.w	r1, r1, #16
 800695a:	f081 82b5 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800695e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006962:	f1a1 0408 	sub.w	r4, r1, #8
 8006966:	ea50 0104 	orrs.w	r1, r0, r4
 800696a:	f001 81fe 	beq.w	8007d6a <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 800696e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006972:	2801      	cmp	r0, #1
 8006974:	f171 0108 	sbcs.w	r1, r1, #8
 8006978:	f081 82a6 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800697c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006980:	1f0c      	subs	r4, r1, #4
 8006982:	ea50 0104 	orrs.w	r1, r0, r4
 8006986:	f000 8753 	beq.w	8007830 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 800698a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800698e:	2801      	cmp	r0, #1
 8006990:	f171 0104 	sbcs.w	r1, r1, #4
 8006994:	f081 8298 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006998:	e9d7 0100 	ldrd	r0, r1, [r7]
 800699c:	1e8c      	subs	r4, r1, #2
 800699e:	ea50 0104 	orrs.w	r1, r0, r4
 80069a2:	f001 8173 	beq.w	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 80069a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069aa:	2801      	cmp	r0, #1
 80069ac:	f171 0102 	sbcs.w	r1, r1, #2
 80069b0:	f081 828a 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80069b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069b8:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 80069bc:	4321      	orrs	r1, r4
 80069be:	f001 80fe 	beq.w	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 80069c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069c6:	4ccb      	ldr	r4, [pc, #812]	@ (8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 80069c8:	42a0      	cmp	r0, r4
 80069ca:	f171 0100 	sbcs.w	r1, r1, #0
 80069ce:	f081 827b 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80069d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069d6:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 80069da:	4321      	orrs	r1, r4
 80069dc:	f001 8076 	beq.w	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 80069e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069e4:	4cc4      	ldr	r4, [pc, #784]	@ (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 80069e6:	42a0      	cmp	r0, r4
 80069e8:	f171 0100 	sbcs.w	r1, r1, #0
 80069ec:	f081 826c 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80069f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069f4:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 80069f8:	4321      	orrs	r1, r4
 80069fa:	f000 87b5 	beq.w	8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 80069fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a02:	4cbe      	ldr	r4, [pc, #760]	@ (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 8006a04:	42a0      	cmp	r0, r4
 8006a06:	f171 0100 	sbcs.w	r1, r1, #0
 8006a0a:	f081 825d 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006a0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a12:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8006a16:	4321      	orrs	r1, r4
 8006a18:	f000 8738 	beq.w	800788c <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8006a1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a20:	4cb7      	ldr	r4, [pc, #732]	@ (8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 8006a22:	42a0      	cmp	r0, r4
 8006a24:	f171 0100 	sbcs.w	r1, r1, #0
 8006a28:	f081 824e 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006a2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a30:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8006a34:	4321      	orrs	r1, r4
 8006a36:	f001 81cd 	beq.w	8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 8006a3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a3e:	4cb1      	ldr	r4, [pc, #708]	@ (8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 8006a40:	42a0      	cmp	r0, r4
 8006a42:	f171 0100 	sbcs.w	r1, r1, #0
 8006a46:	f081 823f 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006a4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a4e:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8006a52:	4321      	orrs	r1, r4
 8006a54:	f000 80d9 	beq.w	8006c0a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006a58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a5c:	4caa      	ldr	r4, [pc, #680]	@ (8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 8006a5e:	42a0      	cmp	r0, r4
 8006a60:	f171 0100 	sbcs.w	r1, r1, #0
 8006a64:	f081 8230 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006a68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a6c:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8006a70:	4321      	orrs	r1, r4
 8006a72:	f000 83da 	beq.w	800722a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8006a76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a7a:	4ca4      	ldr	r4, [pc, #656]	@ (8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 8006a7c:	42a0      	cmp	r0, r4
 8006a7e:	f171 0100 	sbcs.w	r1, r1, #0
 8006a82:	f081 8221 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006a86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a8a:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8006a8e:	4321      	orrs	r1, r4
 8006a90:	f000 8627 	beq.w	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 8006a94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a98:	4c9d      	ldr	r4, [pc, #628]	@ (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 8006a9a:	42a0      	cmp	r0, r4
 8006a9c:	f171 0100 	sbcs.w	r1, r1, #0
 8006aa0:	f081 8212 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006aa4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006aa8:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8006aac:	4321      	orrs	r1, r4
 8006aae:	f000 857a 	beq.w	80075a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8006ab2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ab6:	4c97      	ldr	r4, [pc, #604]	@ (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 8006ab8:	42a0      	cmp	r0, r4
 8006aba:	f171 0100 	sbcs.w	r1, r1, #0
 8006abe:	f081 8203 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006ac2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ac6:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8006aca:	4321      	orrs	r1, r4
 8006acc:	f000 84fb 	beq.w	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8006ad0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ad4:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8006ad8:	f171 0100 	sbcs.w	r1, r1, #0
 8006adc:	f081 81f4 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006ae0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ae4:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8006ae8:	4321      	orrs	r1, r4
 8006aea:	f000 84a9 	beq.w	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8006aee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006af2:	f248 0401 	movw	r4, #32769	@ 0x8001
 8006af6:	42a0      	cmp	r0, r4
 8006af8:	f171 0100 	sbcs.w	r1, r1, #0
 8006afc:	f081 81e4 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006b00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b04:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8006b08:	4321      	orrs	r1, r4
 8006b0a:	f000 8456 	beq.w	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 8006b0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b12:	f244 0401 	movw	r4, #16385	@ 0x4001
 8006b16:	42a0      	cmp	r0, r4
 8006b18:	f171 0100 	sbcs.w	r1, r1, #0
 8006b1c:	f081 81d4 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006b20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b24:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8006b28:	4321      	orrs	r1, r4
 8006b2a:	f000 8403 	beq.w	8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8006b2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b32:	f242 0401 	movw	r4, #8193	@ 0x2001
 8006b36:	42a0      	cmp	r0, r4
 8006b38:	f171 0100 	sbcs.w	r1, r1, #0
 8006b3c:	f081 81c4 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006b40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b44:	2821      	cmp	r0, #33	@ 0x21
 8006b46:	f171 0100 	sbcs.w	r1, r1, #0
 8006b4a:	d255      	bcs.n	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8006b4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b50:	4301      	orrs	r1, r0
 8006b52:	f001 81b9 	beq.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006b56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b5a:	1e42      	subs	r2, r0, #1
 8006b5c:	f141 33ff 	adc.w	r3, r1, #4294967295
 8006b60:	2a20      	cmp	r2, #32
 8006b62:	f173 0100 	sbcs.w	r1, r3, #0
 8006b66:	f081 81af 	bcs.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006b6a:	2a1f      	cmp	r2, #31
 8006b6c:	f201 81ac 	bhi.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006b70:	a101      	add	r1, pc, #4	@ (adr r1, 8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8006b72:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006b76:	bf00      	nop
 8006b78:	08006c4f 	.word	0x08006c4f
 8006b7c:	08006d4d 	.word	0x08006d4d
 8006b80:	08007ec9 	.word	0x08007ec9
 8006b84:	08006e0d 	.word	0x08006e0d
 8006b88:	08007ec9 	.word	0x08007ec9
 8006b8c:	08007ec9 	.word	0x08007ec9
 8006b90:	08007ec9 	.word	0x08007ec9
 8006b94:	08006edd 	.word	0x08006edd
 8006b98:	08007ec9 	.word	0x08007ec9
 8006b9c:	08007ec9 	.word	0x08007ec9
 8006ba0:	08007ec9 	.word	0x08007ec9
 8006ba4:	08007ec9 	.word	0x08007ec9
 8006ba8:	08007ec9 	.word	0x08007ec9
 8006bac:	08007ec9 	.word	0x08007ec9
 8006bb0:	08007ec9 	.word	0x08007ec9
 8006bb4:	08006fc1 	.word	0x08006fc1
 8006bb8:	08007ec9 	.word	0x08007ec9
 8006bbc:	08007ec9 	.word	0x08007ec9
 8006bc0:	08007ec9 	.word	0x08007ec9
 8006bc4:	08007ec9 	.word	0x08007ec9
 8006bc8:	08007ec9 	.word	0x08007ec9
 8006bcc:	08007ec9 	.word	0x08007ec9
 8006bd0:	08007ec9 	.word	0x08007ec9
 8006bd4:	08007ec9 	.word	0x08007ec9
 8006bd8:	08007ec9 	.word	0x08007ec9
 8006bdc:	08007ec9 	.word	0x08007ec9
 8006be0:	08007ec9 	.word	0x08007ec9
 8006be4:	08007ec9 	.word	0x08007ec9
 8006be8:	08007ec9 	.word	0x08007ec9
 8006bec:	08007ec9 	.word	0x08007ec9
 8006bf0:	08007ec9 	.word	0x08007ec9
 8006bf4:	08007097 	.word	0x08007097
 8006bf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bfc:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006c00:	430b      	orrs	r3, r1
 8006c02:	f000 82b3 	beq.w	800716c <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 8006c06:	f001 b95f 	b.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8006c0a:	4b43      	ldr	r3, [pc, #268]	@ (8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006c0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c14:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8006c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d108      	bne.n	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c1c:	f107 0320 	add.w	r3, r7, #32
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7ff f9cf 	bl	8005fc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c28:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006c2a:	f001 b950 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c30:	2b40      	cmp	r3, #64	@ 0x40
 8006c32:	d108      	bne.n	8006c46 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c34:	f107 0314 	add.w	r3, r7, #20
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7ff fb2f 	bl	800629c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c42:	f001 b944 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8006c46:	2300      	movs	r3, #0
 8006c48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c4a:	f001 b940 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006c4e:	4b32      	ldr	r3, [pc, #200]	@ (8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006c50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006c54:	f003 0307 	and.w	r3, r3, #7
 8006c58:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d104      	bne.n	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8006c60:	f7fd ffc4 	bl	8004bec <HAL_RCC_GetPCLK2Freq>
 8006c64:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006c66:	f001 b932 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8006c6a:	4b2b      	ldr	r3, [pc, #172]	@ (8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c76:	d10a      	bne.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8006c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d107      	bne.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c7e:	f107 0314 	add.w	r3, r7, #20
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7ff fb0a 	bl	800629c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c8c:	e05c      	b.n	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8006c8e:	4b22      	ldr	r3, [pc, #136]	@ (8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c9a:	d10a      	bne.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8006c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d107      	bne.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ca2:	f107 0308 	add.w	r3, r7, #8
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7ff fc64 	bl	8006574 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cb0:	e04a      	b.n	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006cb2:	4b19      	ldr	r3, [pc, #100]	@ (8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0302 	and.w	r3, r3, #2
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d10c      	bne.n	8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc0:	2b03      	cmp	r3, #3
 8006cc2:	d109      	bne.n	8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006cc4:	4b14      	ldr	r3, [pc, #80]	@ (8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	08db      	lsrs	r3, r3, #3
 8006cca:	f003 0303 	and.w	r3, r3, #3
 8006cce:	4a13      	ldr	r2, [pc, #76]	@ (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 8006cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8006cd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cd6:	e037      	b.n	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8006cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ce0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ce4:	d11e      	bne.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce8:	2b04      	cmp	r3, #4
 8006cea:	d11b      	bne.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 8006cec:	4b0c      	ldr	r3, [pc, #48]	@ (8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 8006cee:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cf0:	e02a      	b.n	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 8006cf2:	bf00      	nop
 8006cf4:	40000001 	.word	0x40000001
 8006cf8:	20000001 	.word	0x20000001
 8006cfc:	10000001 	.word	0x10000001
 8006d00:	08000001 	.word	0x08000001
 8006d04:	04000001 	.word	0x04000001
 8006d08:	00400001 	.word	0x00400001
 8006d0c:	00200001 	.word	0x00200001
 8006d10:	00040001 	.word	0x00040001
 8006d14:	00020001 	.word	0x00020001
 8006d18:	44020c00 	.word	0x44020c00
 8006d1c:	03d09000 	.word	0x03d09000
 8006d20:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006d24:	4ba3      	ldr	r3, [pc, #652]	@ (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006d26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d2a:	f003 0302 	and.w	r3, r3, #2
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d106      	bne.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8006d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d34:	2b05      	cmp	r3, #5
 8006d36:	d103      	bne.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 8006d38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d3e:	e003      	b.n	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 8006d40:	2300      	movs	r3, #0
 8006d42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d44:	f001 b8c3 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006d48:	f001 b8c1 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006d4c:	4b99      	ldr	r3, [pc, #612]	@ (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006d4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006d52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d56:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d104      	bne.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006d5e:	f7fd ff2f 	bl	8004bc0 <HAL_RCC_GetPCLK1Freq>
 8006d62:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006d64:	f001 b8b3 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8006d68:	4b92      	ldr	r3, [pc, #584]	@ (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d74:	d10a      	bne.n	8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 8006d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d78:	2b08      	cmp	r3, #8
 8006d7a:	d107      	bne.n	8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d7c:	f107 0314 	add.w	r3, r7, #20
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7ff fa8b 	bl	800629c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d8a:	e03d      	b.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8006d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8e:	2b10      	cmp	r3, #16
 8006d90:	d108      	bne.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d92:	f107 0308 	add.w	r3, r7, #8
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7ff fbec 	bl	8006574 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006da0:	f001 b895 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006da4:	4b83      	ldr	r3, [pc, #524]	@ (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0302 	and.w	r3, r3, #2
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d10c      	bne.n	8006dca <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8006db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db2:	2b18      	cmp	r3, #24
 8006db4:	d109      	bne.n	8006dca <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006db6:	4b7f      	ldr	r3, [pc, #508]	@ (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	08db      	lsrs	r3, r3, #3
 8006dbc:	f003 0303 	and.w	r3, r3, #3
 8006dc0:	4a7d      	ldr	r2, [pc, #500]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8006dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8006dc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dc8:	e01e      	b.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8006dca:	4b7a      	ldr	r3, [pc, #488]	@ (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006dd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dd6:	d105      	bne.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dda:	2b20      	cmp	r3, #32
 8006ddc:	d102      	bne.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 8006dde:	4b77      	ldr	r3, [pc, #476]	@ (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8006de0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006de2:	e011      	b.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006de4:	4b73      	ldr	r3, [pc, #460]	@ (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006de6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006dea:	f003 0302 	and.w	r3, r3, #2
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d106      	bne.n	8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8006df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df4:	2b28      	cmp	r3, #40	@ 0x28
 8006df6:	d103      	bne.n	8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 8006df8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006dfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dfe:	e003      	b.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 8006e00:	2300      	movs	r3, #0
 8006e02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e04:	f001 b863 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006e08:	f001 b861 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006e0c:	4b69      	ldr	r3, [pc, #420]	@ (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006e0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006e12:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006e16:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d104      	bne.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e1e:	f7fd fecf 	bl	8004bc0 <HAL_RCC_GetPCLK1Freq>
 8006e22:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006e24:	f001 b853 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8006e28:	4b62      	ldr	r3, [pc, #392]	@ (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e34:	d10a      	bne.n	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8006e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e38:	2b40      	cmp	r3, #64	@ 0x40
 8006e3a:	d107      	bne.n	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e3c:	f107 0314 	add.w	r3, r7, #20
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7ff fa2b 	bl	800629c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e4a:	e045      	b.n	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8006e4c:	4b59      	ldr	r3, [pc, #356]	@ (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e58:	d10a      	bne.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8006e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5c:	2b80      	cmp	r3, #128	@ 0x80
 8006e5e:	d107      	bne.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e60:	f107 0308 	add.w	r3, r7, #8
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7ff fb85 	bl	8006574 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e6e:	e033      	b.n	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006e70:	4b50      	ldr	r3, [pc, #320]	@ (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0302 	and.w	r3, r3, #2
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d10c      	bne.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8006e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e80:	d109      	bne.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e82:	4b4c      	ldr	r3, [pc, #304]	@ (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	08db      	lsrs	r3, r3, #3
 8006e88:	f003 0303 	and.w	r3, r3, #3
 8006e8c:	4a4a      	ldr	r2, [pc, #296]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8006e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e92:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e94:	e020      	b.n	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8006e96:	4b47      	ldr	r3, [pc, #284]	@ (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ea2:	d106      	bne.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 8006ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006eaa:	d102      	bne.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 8006eac:	4b43      	ldr	r3, [pc, #268]	@ (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8006eae:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eb0:	e012      	b.n	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006eb2:	4b40      	ldr	r3, [pc, #256]	@ (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006eb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006eb8:	f003 0302 	and.w	r3, r3, #2
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d107      	bne.n	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006ec6:	d103      	bne.n	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 8006ec8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ecc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ece:	e003      	b.n	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ed4:	f000 bffb 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006ed8:	f000 bff9 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006edc:	4b35      	ldr	r3, [pc, #212]	@ (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006ede:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006ee2:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8006ee6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d104      	bne.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006eee:	f7fd fe67 	bl	8004bc0 <HAL_RCC_GetPCLK1Freq>
 8006ef2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006ef4:	f000 bfeb 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8006ef8:	4b2e      	ldr	r3, [pc, #184]	@ (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f04:	d10b      	bne.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 8006f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f0c:	d107      	bne.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f0e:	f107 0314 	add.w	r3, r7, #20
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7ff f9c2 	bl	800629c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f1c:	e047      	b.n	8006fae <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8006f1e:	4b25      	ldr	r3, [pc, #148]	@ (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f2a:	d10b      	bne.n	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f32:	d107      	bne.n	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f34:	f107 0308 	add.w	r3, r7, #8
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7ff fb1b 	bl	8006574 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f42:	e034      	b.n	8006fae <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006f44:	4b1b      	ldr	r3, [pc, #108]	@ (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0302 	and.w	r3, r3, #2
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d10d      	bne.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8006f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f52:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006f56:	d109      	bne.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f58:	4b16      	ldr	r3, [pc, #88]	@ (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	08db      	lsrs	r3, r3, #3
 8006f5e:	f003 0303 	and.w	r3, r3, #3
 8006f62:	4a15      	ldr	r2, [pc, #84]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8006f64:	fa22 f303 	lsr.w	r3, r2, r3
 8006f68:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f6a:	e020      	b.n	8006fae <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8006f6c:	4b11      	ldr	r3, [pc, #68]	@ (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f78:	d106      	bne.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8006f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f80:	d102      	bne.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 8006f82:	4b0e      	ldr	r3, [pc, #56]	@ (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8006f84:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f86:	e012      	b.n	8006fae <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006f88:	4b0a      	ldr	r3, [pc, #40]	@ (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006f8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f8e:	f003 0302 	and.w	r3, r3, #2
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d107      	bne.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8006f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f98:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006f9c:	d103      	bne.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 8006f9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fa4:	e003      	b.n	8006fae <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006faa:	f000 bf90 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006fae:	f000 bf8e 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006fb2:	bf00      	nop
 8006fb4:	44020c00 	.word	0x44020c00
 8006fb8:	03d09000 	.word	0x03d09000
 8006fbc:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006fc0:	4ba5      	ldr	r3, [pc, #660]	@ (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006fc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006fc6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006fca:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d104      	bne.n	8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006fd2:	f7fd fdf5 	bl	8004bc0 <HAL_RCC_GetPCLK1Freq>
 8006fd6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8006fd8:	f000 bf79 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8006fdc:	4b9e      	ldr	r3, [pc, #632]	@ (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fe4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fe8:	d10b      	bne.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8006fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ff0:	d107      	bne.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ff2:	f107 0314 	add.w	r3, r7, #20
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7ff f950 	bl	800629c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007000:	e047      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8007002:	4b95      	ldr	r3, [pc, #596]	@ (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800700a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800700e:	d10b      	bne.n	8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8007010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007012:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007016:	d107      	bne.n	8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007018:	f107 0308 	add.w	r3, r7, #8
 800701c:	4618      	mov	r0, r3
 800701e:	f7ff faa9 	bl	8006574 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	637b      	str	r3, [r7, #52]	@ 0x34
 8007026:	e034      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007028:	4b8b      	ldr	r3, [pc, #556]	@ (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 0302 	and.w	r3, r3, #2
 8007030:	2b02      	cmp	r3, #2
 8007032:	d10d      	bne.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 8007034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007036:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800703a:	d109      	bne.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800703c:	4b86      	ldr	r3, [pc, #536]	@ (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	08db      	lsrs	r3, r3, #3
 8007042:	f003 0303 	and.w	r3, r3, #3
 8007046:	4a85      	ldr	r2, [pc, #532]	@ (800725c <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8007048:	fa22 f303 	lsr.w	r3, r2, r3
 800704c:	637b      	str	r3, [r7, #52]	@ 0x34
 800704e:	e020      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8007050:	4b81      	ldr	r3, [pc, #516]	@ (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007058:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800705c:	d106      	bne.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800705e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007060:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007064:	d102      	bne.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 8007066:	4b7e      	ldr	r3, [pc, #504]	@ (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8007068:	637b      	str	r3, [r7, #52]	@ 0x34
 800706a:	e012      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800706c:	4b7a      	ldr	r3, [pc, #488]	@ (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800706e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007072:	f003 0302 	and.w	r3, r3, #2
 8007076:	2b02      	cmp	r3, #2
 8007078:	d107      	bne.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 800707a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007080:	d103      	bne.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 8007082:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007086:	637b      	str	r3, [r7, #52]	@ 0x34
 8007088:	e003      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 800708a:	2300      	movs	r3, #0
 800708c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800708e:	f000 bf1e 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007092:	f000 bf1c 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8007096:	4b70      	ldr	r3, [pc, #448]	@ (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007098:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800709c:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 80070a0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 80070a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d104      	bne.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80070a8:	f7fd fd8a 	bl	8004bc0 <HAL_RCC_GetPCLK1Freq>
 80070ac:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 80070ae:	f000 bf0e 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 80070b2:	4b69      	ldr	r3, [pc, #420]	@ (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070be:	d10b      	bne.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 80070c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070c6:	d107      	bne.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070c8:	f107 0314 	add.w	r3, r7, #20
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7ff f8e5 	bl	800629c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80070d6:	e047      	b.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80070d8:	4b5f      	ldr	r3, [pc, #380]	@ (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070e4:	d10b      	bne.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80070e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070ec:	d107      	bne.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070ee:	f107 0308 	add.w	r3, r7, #8
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7ff fa3e 	bl	8006574 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80070fc:	e034      	b.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80070fe:	4b56      	ldr	r3, [pc, #344]	@ (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 0302 	and.w	r3, r3, #2
 8007106:	2b02      	cmp	r3, #2
 8007108:	d10d      	bne.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 800710a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710c:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007110:	d109      	bne.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007112:	4b51      	ldr	r3, [pc, #324]	@ (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	08db      	lsrs	r3, r3, #3
 8007118:	f003 0303 	and.w	r3, r3, #3
 800711c:	4a4f      	ldr	r2, [pc, #316]	@ (800725c <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 800711e:	fa22 f303 	lsr.w	r3, r2, r3
 8007122:	637b      	str	r3, [r7, #52]	@ 0x34
 8007124:	e020      	b.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8007126:	4b4c      	ldr	r3, [pc, #304]	@ (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800712e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007132:	d106      	bne.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 8007134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007136:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800713a:	d102      	bne.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 800713c:	4b48      	ldr	r3, [pc, #288]	@ (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 800713e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007140:	e012      	b.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8007142:	4b45      	ldr	r3, [pc, #276]	@ (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007144:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007148:	f003 0302 	and.w	r3, r3, #2
 800714c:	2b02      	cmp	r3, #2
 800714e:	d107      	bne.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8007150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007152:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007156:	d103      	bne.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8007158:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800715c:	637b      	str	r3, [r7, #52]	@ 0x34
 800715e:	e003      	b.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8007160:	2300      	movs	r3, #0
 8007162:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007164:	f000 beb3 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007168:	f000 beb1 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800716c:	4b3a      	ldr	r3, [pc, #232]	@ (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800716e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007172:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007176:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800717a:	2b00      	cmp	r3, #0
 800717c:	d104      	bne.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800717e:	f7fd fd4b 	bl	8004c18 <HAL_RCC_GetPCLK3Freq>
 8007182:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007184:	f000 bea3 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8007188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800718a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800718e:	d108      	bne.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007190:	f107 0314 	add.w	r3, r7, #20
 8007194:	4618      	mov	r0, r3
 8007196:	f7ff f881 	bl	800629c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800719e:	f000 be96 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 80071a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071a8:	d108      	bne.n	80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071aa:	f107 0308 	add.w	r3, r7, #8
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7ff f9e0 	bl	8006574 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071b8:	f000 be89 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80071bc:	4b26      	ldr	r3, [pc, #152]	@ (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0302 	and.w	r3, r3, #2
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d10d      	bne.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 80071c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80071ce:	d109      	bne.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80071d0:	4b21      	ldr	r3, [pc, #132]	@ (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	08db      	lsrs	r3, r3, #3
 80071d6:	f003 0303 	and.w	r3, r3, #3
 80071da:	4a20      	ldr	r2, [pc, #128]	@ (800725c <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 80071dc:	fa22 f303 	lsr.w	r3, r2, r3
 80071e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80071e2:	e020      	b.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80071e4:	4b1c      	ldr	r3, [pc, #112]	@ (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80071ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071f0:	d106      	bne.n	8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 80071f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80071f8:	d102      	bne.n	8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 80071fa:	4b19      	ldr	r3, [pc, #100]	@ (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 80071fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80071fe:	e012      	b.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007200:	4b15      	ldr	r3, [pc, #84]	@ (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007202:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007206:	f003 0302 	and.w	r3, r3, #2
 800720a:	2b02      	cmp	r3, #2
 800720c:	d107      	bne.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 800720e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007210:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007214:	d103      	bne.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 8007216:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800721a:	637b      	str	r3, [r7, #52]	@ 0x34
 800721c:	e003      	b.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 800721e:	2300      	movs	r3, #0
 8007220:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007222:	f000 be54 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007226:	f000 be52 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800722a:	4b0b      	ldr	r3, [pc, #44]	@ (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800722c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007230:	f003 0307 	and.w	r3, r3, #7
 8007234:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007238:	2b00      	cmp	r3, #0
 800723a:	d104      	bne.n	8007246 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800723c:	f7fd fca4 	bl	8004b88 <HAL_RCC_GetHCLKFreq>
 8007240:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8007242:	f000 be44 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007248:	2b01      	cmp	r3, #1
 800724a:	d10b      	bne.n	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 800724c:	f7fd fb70 	bl	8004930 <HAL_RCC_GetSysClockFreq>
 8007250:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007252:	f000 be3c 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007256:	bf00      	nop
 8007258:	44020c00 	.word	0x44020c00
 800725c:	03d09000 	.word	0x03d09000
 8007260:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8007264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007266:	2b02      	cmp	r3, #2
 8007268:	d108      	bne.n	800727c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800726a:	f107 0314 	add.w	r3, r7, #20
 800726e:	4618      	mov	r0, r3
 8007270:	f7ff f814 	bl	800629c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007278:	f000 be29 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800727c:	4b9f      	ldr	r3, [pc, #636]	@ (80074fc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007284:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007288:	d105      	bne.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 800728a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800728c:	2b03      	cmp	r3, #3
 800728e:	d102      	bne.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 8007290:	4b9b      	ldr	r3, [pc, #620]	@ (8007500 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 8007292:	637b      	str	r3, [r7, #52]	@ 0x34
 8007294:	e023      	b.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007296:	4b99      	ldr	r3, [pc, #612]	@ (80074fc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 0302 	and.w	r3, r3, #2
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d10c      	bne.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80072a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a4:	2b04      	cmp	r3, #4
 80072a6:	d109      	bne.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80072a8:	4b94      	ldr	r3, [pc, #592]	@ (80074fc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	08db      	lsrs	r3, r3, #3
 80072ae:	f003 0303 	and.w	r3, r3, #3
 80072b2:	4a94      	ldr	r2, [pc, #592]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80072b4:	fa22 f303 	lsr.w	r3, r2, r3
 80072b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80072ba:	e010      	b.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 80072bc:	4b8f      	ldr	r3, [pc, #572]	@ (80074fc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072c8:	d105      	bne.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 80072ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072cc:	2b05      	cmp	r3, #5
 80072ce:	d102      	bne.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 80072d0:	4b8d      	ldr	r3, [pc, #564]	@ (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80072d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80072d4:	e003      	b.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 80072d6:	2300      	movs	r3, #0
 80072d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072da:	f000 bdf8 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80072de:	f000 bdf6 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80072e2:	4b86      	ldr	r3, [pc, #536]	@ (80074fc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80072e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80072e8:	f003 0308 	and.w	r3, r3, #8
 80072ec:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80072ee:	4b83      	ldr	r3, [pc, #524]	@ (80074fc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80072f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072f4:	f003 0302 	and.w	r3, r3, #2
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d106      	bne.n	800730a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80072fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d103      	bne.n	800730a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 8007302:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007306:	637b      	str	r3, [r7, #52]	@ 0x34
 8007308:	e012      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800730a:	4b7c      	ldr	r3, [pc, #496]	@ (80074fc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800730c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007310:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007314:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007318:	d106      	bne.n	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 800731a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800731c:	2b08      	cmp	r3, #8
 800731e:	d103      	bne.n	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 8007320:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007324:	637b      	str	r3, [r7, #52]	@ 0x34
 8007326:	e003      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8007328:	2300      	movs	r3, #0
 800732a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800732c:	f000 bdcf 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007330:	f000 bdcd 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007334:	4b71      	ldr	r3, [pc, #452]	@ (80074fc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007336:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800733a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800733e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007342:	2b00      	cmp	r3, #0
 8007344:	d104      	bne.n	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007346:	f7fd fc3b 	bl	8004bc0 <HAL_RCC_GetPCLK1Freq>
 800734a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800734c:	f000 bdbf 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8007350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007352:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007356:	d108      	bne.n	800736a <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007358:	f107 0308 	add.w	r3, r7, #8
 800735c:	4618      	mov	r0, r3
 800735e:	f7ff f909 	bl	8006574 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007366:	f000 bdb2 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800736a:	4b64      	ldr	r3, [pc, #400]	@ (80074fc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 0302 	and.w	r3, r3, #2
 8007372:	2b02      	cmp	r3, #2
 8007374:	d10d      	bne.n	8007392 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 8007376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007378:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800737c:	d109      	bne.n	8007392 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800737e:	4b5f      	ldr	r3, [pc, #380]	@ (80074fc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	08db      	lsrs	r3, r3, #3
 8007384:	f003 0303 	and.w	r3, r3, #3
 8007388:	4a5e      	ldr	r2, [pc, #376]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 800738a:	fa22 f303 	lsr.w	r3, r2, r3
 800738e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007390:	e011      	b.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8007392:	4b5a      	ldr	r3, [pc, #360]	@ (80074fc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800739a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800739e:	d106      	bne.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 80073a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80073a6:	d102      	bne.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 80073a8:	4b57      	ldr	r3, [pc, #348]	@ (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80073aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80073ac:	e003      	b.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 80073ae:	2300      	movs	r3, #0
 80073b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073b2:	f000 bd8c 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80073b6:	f000 bd8a 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80073ba:	4b50      	ldr	r3, [pc, #320]	@ (80074fc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80073bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80073c0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80073c4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80073c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d104      	bne.n	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80073cc:	f7fd fbf8 	bl	8004bc0 <HAL_RCC_GetPCLK1Freq>
 80073d0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80073d2:	f000 bd7c 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 80073d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80073dc:	d108      	bne.n	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073de:	f107 0308 	add.w	r3, r7, #8
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7ff f8c6 	bl	8006574 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073ec:	f000 bd6f 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80073f0:	4b42      	ldr	r3, [pc, #264]	@ (80074fc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0302 	and.w	r3, r3, #2
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d10d      	bne.n	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 80073fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073fe:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007402:	d109      	bne.n	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007404:	4b3d      	ldr	r3, [pc, #244]	@ (80074fc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	08db      	lsrs	r3, r3, #3
 800740a:	f003 0303 	and.w	r3, r3, #3
 800740e:	4a3d      	ldr	r2, [pc, #244]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8007410:	fa22 f303 	lsr.w	r3, r2, r3
 8007414:	637b      	str	r3, [r7, #52]	@ 0x34
 8007416:	e011      	b.n	800743c <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8007418:	4b38      	ldr	r3, [pc, #224]	@ (80074fc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007420:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007424:	d106      	bne.n	8007434 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 8007426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007428:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800742c:	d102      	bne.n	8007434 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 800742e:	4b36      	ldr	r3, [pc, #216]	@ (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8007430:	637b      	str	r3, [r7, #52]	@ 0x34
 8007432:	e003      	b.n	800743c <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 8007434:	2300      	movs	r3, #0
 8007436:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007438:	f000 bd49 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800743c:	f000 bd47 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007440:	4b2e      	ldr	r3, [pc, #184]	@ (80074fc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007442:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007446:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800744a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800744c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800744e:	2b00      	cmp	r3, #0
 8007450:	d104      	bne.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007452:	f7fd fbe1 	bl	8004c18 <HAL_RCC_GetPCLK3Freq>
 8007456:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007458:	f000 bd39 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800745c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800745e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007462:	d108      	bne.n	8007476 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007464:	f107 0308 	add.w	r3, r7, #8
 8007468:	4618      	mov	r0, r3
 800746a:	f7ff f883 	bl	8006574 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007472:	f000 bd2c 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8007476:	4b21      	ldr	r3, [pc, #132]	@ (80074fc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 0302 	and.w	r3, r3, #2
 800747e:	2b02      	cmp	r3, #2
 8007480:	d10d      	bne.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8007482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007484:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007488:	d109      	bne.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800748a:	4b1c      	ldr	r3, [pc, #112]	@ (80074fc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	08db      	lsrs	r3, r3, #3
 8007490:	f003 0303 	and.w	r3, r3, #3
 8007494:	4a1b      	ldr	r2, [pc, #108]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8007496:	fa22 f303 	lsr.w	r3, r2, r3
 800749a:	637b      	str	r3, [r7, #52]	@ 0x34
 800749c:	e011      	b.n	80074c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800749e:	4b17      	ldr	r3, [pc, #92]	@ (80074fc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074aa:	d106      	bne.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 80074ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80074b2:	d102      	bne.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 80074b4:	4b14      	ldr	r3, [pc, #80]	@ (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80074b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80074b8:	e003      	b.n	80074c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 80074ba:	2300      	movs	r3, #0
 80074bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074be:	f000 bd06 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80074c2:	f000 bd04 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80074c6:	4b0d      	ldr	r3, [pc, #52]	@ (80074fc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80074c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80074cc:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80074d0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80074d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d104      	bne.n	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80074d8:	f7fd fb72 	bl	8004bc0 <HAL_RCC_GetPCLK1Freq>
 80074dc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80074de:	f000 bcf6 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 80074e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80074e8:	d110      	bne.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074ea:	f107 0308 	add.w	r3, r7, #8
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7ff f840 	bl	8006574 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074f8:	f000 bce9 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80074fc:	44020c00 	.word	0x44020c00
 8007500:	007a1200 	.word	0x007a1200
 8007504:	03d09000 	.word	0x03d09000
 8007508:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800750c:	4ba4      	ldr	r3, [pc, #656]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 0302 	and.w	r3, r3, #2
 8007514:	2b02      	cmp	r3, #2
 8007516:	d10e      	bne.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 8007518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800751a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800751e:	d10a      	bne.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007520:	4b9f      	ldr	r3, [pc, #636]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	08db      	lsrs	r3, r3, #3
 8007526:	f003 0303 	and.w	r3, r3, #3
 800752a:	4a9e      	ldr	r2, [pc, #632]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 800752c:	fa22 f303 	lsr.w	r3, r2, r3
 8007530:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007532:	f000 bccc 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8007536:	2300      	movs	r3, #0
 8007538:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800753a:	f000 bcc8 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 800753e:	4b98      	ldr	r3, [pc, #608]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007540:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007544:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007548:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 800754a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800754c:	2b00      	cmp	r3, #0
 800754e:	d104      	bne.n	800755a <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007550:	f7fd fb62 	bl	8004c18 <HAL_RCC_GetPCLK3Freq>
 8007554:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007556:	f000 bcba 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 800755a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800755c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007560:	d108      	bne.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007562:	f107 0308 	add.w	r3, r7, #8
 8007566:	4618      	mov	r0, r3
 8007568:	f7ff f804 	bl	8006574 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007570:	f000 bcad 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8007574:	4b8a      	ldr	r3, [pc, #552]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 0302 	and.w	r3, r3, #2
 800757c:	2b02      	cmp	r3, #2
 800757e:	d10e      	bne.n	800759e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8007580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007582:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007586:	d10a      	bne.n	800759e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007588:	4b85      	ldr	r3, [pc, #532]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	08db      	lsrs	r3, r3, #3
 800758e:	f003 0303 	and.w	r3, r3, #3
 8007592:	4a84      	ldr	r2, [pc, #528]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8007594:	fa22 f303 	lsr.w	r3, r2, r3
 8007598:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800759a:	f000 bc98 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 800759e:	2300      	movs	r3, #0
 80075a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075a2:	f000 bc94 	b.w	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80075a6:	4b7e      	ldr	r3, [pc, #504]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80075a8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80075ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80075b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80075b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80075b8:	d056      	beq.n	8007668 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 80075ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075bc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80075c0:	f200 808b 	bhi.w	80076da <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 80075c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075ca:	d03e      	beq.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 80075cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075d2:	f200 8082 	bhi.w	80076da <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 80075d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075dc:	d027      	beq.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 80075de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075e4:	d879      	bhi.n	80076da <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 80075e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075ec:	d017      	beq.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 80075ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075f4:	d871      	bhi.n	80076da <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 80075f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d004      	beq.n	8007606 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 80075fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007602:	d004      	beq.n	800760e <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 8007604:	e069      	b.n	80076da <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007606:	f7fd fb07 	bl	8004c18 <HAL_RCC_GetPCLK3Freq>
 800760a:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800760c:	e068      	b.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800760e:	f107 0314 	add.w	r3, r7, #20
 8007612:	4618      	mov	r0, r3
 8007614:	f7fe fe42 	bl	800629c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800761c:	e060      	b.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800761e:	f107 0308 	add.w	r3, r7, #8
 8007622:	4618      	mov	r0, r3
 8007624:	f7fe ffa6 	bl	8006574 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800762c:	e058      	b.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800762e:	4b5c      	ldr	r3, [pc, #368]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007630:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007634:	f003 0302 	and.w	r3, r3, #2
 8007638:	2b02      	cmp	r3, #2
 800763a:	d103      	bne.n	8007644 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 800763c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007640:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007642:	e04d      	b.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8007644:	2300      	movs	r3, #0
 8007646:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007648:	e04a      	b.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800764a:	4b55      	ldr	r3, [pc, #340]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800764c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007650:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007654:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007658:	d103      	bne.n	8007662 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 800765a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800765e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007660:	e03e      	b.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8007662:	2300      	movs	r3, #0
 8007664:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007666:	e03b      	b.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007668:	4b4d      	ldr	r3, [pc, #308]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800766a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800766e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007672:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007674:	4b4a      	ldr	r3, [pc, #296]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 0302 	and.w	r3, r3, #2
 800767c:	2b02      	cmp	r3, #2
 800767e:	d10c      	bne.n	800769a <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 8007680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007682:	2b00      	cmp	r3, #0
 8007684:	d109      	bne.n	800769a <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007686:	4b46      	ldr	r3, [pc, #280]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	08db      	lsrs	r3, r3, #3
 800768c:	f003 0303 	and.w	r3, r3, #3
 8007690:	4a44      	ldr	r2, [pc, #272]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8007692:	fa22 f303 	lsr.w	r3, r2, r3
 8007696:	637b      	str	r3, [r7, #52]	@ 0x34
 8007698:	e01e      	b.n	80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800769a:	4b41      	ldr	r3, [pc, #260]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076a6:	d106      	bne.n	80076b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80076a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076ae:	d102      	bne.n	80076b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80076b0:	4b3d      	ldr	r3, [pc, #244]	@ (80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 80076b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80076b4:	e010      	b.n	80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80076b6:	4b3a      	ldr	r3, [pc, #232]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076c2:	d106      	bne.n	80076d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 80076c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076ca:	d102      	bne.n	80076d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80076cc:	4b37      	ldr	r3, [pc, #220]	@ (80077ac <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 80076ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80076d0:	e002      	b.n	80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80076d2:	2300      	movs	r3, #0
 80076d4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80076d6:	e003      	b.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 80076d8:	e002      	b.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 80076da:	2300      	movs	r3, #0
 80076dc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80076de:	bf00      	nop
          }
        }
        break;
 80076e0:	e3f5      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80076e2:	4b2f      	ldr	r3, [pc, #188]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80076e4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80076e8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80076ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80076ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80076f4:	d05f      	beq.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 80076f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80076fc:	f200 8094 	bhi.w	8007828 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8007700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007702:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007706:	d03f      	beq.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 8007708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800770a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800770e:	f200 808b 	bhi.w	8007828 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8007712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007714:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007718:	d028      	beq.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 800771a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800771c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007720:	f200 8082 	bhi.w	8007828 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8007724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007726:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800772a:	d017      	beq.n	800775c <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 800772c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800772e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007732:	d879      	bhi.n	8007828 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8007734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007736:	2b00      	cmp	r3, #0
 8007738:	d004      	beq.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800773a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007740:	d004      	beq.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 8007742:	e071      	b.n	8007828 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8007744:	f7fd fa3c 	bl	8004bc0 <HAL_RCC_GetPCLK1Freq>
 8007748:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800774a:	e070      	b.n	800782e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800774c:	f107 0314 	add.w	r3, r7, #20
 8007750:	4618      	mov	r0, r3
 8007752:	f7fe fda3 	bl	800629c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800775a:	e068      	b.n	800782e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800775c:	f107 0308 	add.w	r3, r7, #8
 8007760:	4618      	mov	r0, r3
 8007762:	f7fe ff07 	bl	8006574 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800776a:	e060      	b.n	800782e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800776c:	4b0c      	ldr	r3, [pc, #48]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800776e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007772:	f003 0302 	and.w	r3, r3, #2
 8007776:	2b02      	cmp	r3, #2
 8007778:	d103      	bne.n	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 800777a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800777e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007780:	e055      	b.n	800782e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 8007782:	2300      	movs	r3, #0
 8007784:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007786:	e052      	b.n	800782e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007788:	4b05      	ldr	r3, [pc, #20]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800778a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800778e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007792:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007796:	d10b      	bne.n	80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 8007798:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800779c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800779e:	e046      	b.n	800782e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 80077a0:	44020c00 	.word	0x44020c00
 80077a4:	03d09000 	.word	0x03d09000
 80077a8:	003d0900 	.word	0x003d0900
 80077ac:	007a1200 	.word	0x007a1200
              frequency = 0;
 80077b0:	2300      	movs	r3, #0
 80077b2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80077b4:	e03b      	b.n	800782e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80077b6:	4bae      	ldr	r3, [pc, #696]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80077b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80077bc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80077c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80077c2:	4bab      	ldr	r3, [pc, #684]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 0302 	and.w	r3, r3, #2
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d10c      	bne.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 80077ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d109      	bne.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80077d4:	4ba6      	ldr	r3, [pc, #664]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	08db      	lsrs	r3, r3, #3
 80077da:	f003 0303 	and.w	r3, r3, #3
 80077de:	4aa5      	ldr	r2, [pc, #660]	@ (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 80077e0:	fa22 f303 	lsr.w	r3, r2, r3
 80077e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80077e6:	e01e      	b.n	8007826 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80077e8:	4ba1      	ldr	r3, [pc, #644]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077f4:	d106      	bne.n	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 80077f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077fc:	d102      	bne.n	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80077fe:	4b9e      	ldr	r3, [pc, #632]	@ (8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8007800:	637b      	str	r3, [r7, #52]	@ 0x34
 8007802:	e010      	b.n	8007826 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007804:	4b9a      	ldr	r3, [pc, #616]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800780c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007810:	d106      	bne.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 8007812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007814:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007818:	d102      	bne.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800781a:	4b98      	ldr	r3, [pc, #608]	@ (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 800781c:	637b      	str	r3, [r7, #52]	@ 0x34
 800781e:	e002      	b.n	8007826 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007820:	2300      	movs	r3, #0
 8007822:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007824:	e003      	b.n	800782e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8007826:	e002      	b.n	800782e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 8007828:	2300      	movs	r3, #0
 800782a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800782c:	bf00      	nop
          }
        }
        break;
 800782e:	e34e      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007830:	4b8f      	ldr	r3, [pc, #572]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007832:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007836:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800783a:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800783c:	4b8c      	ldr	r3, [pc, #560]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007844:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007848:	d105      	bne.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 800784a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784c:	2b00      	cmp	r3, #0
 800784e:	d102      	bne.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 8007850:	4b8a      	ldr	r3, [pc, #552]	@ (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8007852:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8007854:	e33b      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8007856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007858:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800785c:	d107      	bne.n	800786e <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800785e:	f107 0320 	add.w	r3, r7, #32
 8007862:	4618      	mov	r0, r3
 8007864:	f7fe fbae 	bl	8005fc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800786c:	e32f      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800786e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007870:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007874:	d107      	bne.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007876:	f107 0314 	add.w	r3, r7, #20
 800787a:	4618      	mov	r0, r3
 800787c:	f7fe fd0e 	bl	800629c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007884:	e323      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8007886:	2300      	movs	r3, #0
 8007888:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800788a:	e320      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800788c:	4b78      	ldr	r3, [pc, #480]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800788e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007892:	f003 0307 	and.w	r3, r3, #7
 8007896:	633b      	str	r3, [r7, #48]	@ 0x30
 8007898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789a:	2b04      	cmp	r3, #4
 800789c:	d860      	bhi.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 800789e:	a201      	add	r2, pc, #4	@ (adr r2, 80078a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 80078a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a4:	080078b9 	.word	0x080078b9
 80078a8:	080078c9 	.word	0x080078c9
 80078ac:	080078d9 	.word	0x080078d9
 80078b0:	080078e9 	.word	0x080078e9
 80078b4:	080078ef 	.word	0x080078ef
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078b8:	f107 0320 	add.w	r3, r7, #32
 80078bc:	4618      	mov	r0, r3
 80078be:	f7fe fb81 	bl	8005fc4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80078c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80078c6:	e04e      	b.n	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078c8:	f107 0314 	add.w	r3, r7, #20
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7fe fce5 	bl	800629c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80078d6:	e046      	b.n	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078d8:	f107 0308 	add.w	r3, r7, #8
 80078dc:	4618      	mov	r0, r3
 80078de:	f7fe fe49 	bl	8006574 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80078e6:	e03e      	b.n	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80078e8:	4b65      	ldr	r3, [pc, #404]	@ (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 80078ea:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80078ec:	e03b      	b.n	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80078ee:	4b60      	ldr	r3, [pc, #384]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80078f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80078f4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80078f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078fa:	4b5d      	ldr	r3, [pc, #372]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 0302 	and.w	r3, r3, #2
 8007902:	2b02      	cmp	r3, #2
 8007904:	d10c      	bne.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 8007906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007908:	2b00      	cmp	r3, #0
 800790a:	d109      	bne.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800790c:	4b58      	ldr	r3, [pc, #352]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	08db      	lsrs	r3, r3, #3
 8007912:	f003 0303 	and.w	r3, r3, #3
 8007916:	4a57      	ldr	r2, [pc, #348]	@ (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8007918:	fa22 f303 	lsr.w	r3, r2, r3
 800791c:	637b      	str	r3, [r7, #52]	@ 0x34
 800791e:	e01e      	b.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007920:	4b53      	ldr	r3, [pc, #332]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007928:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800792c:	d106      	bne.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 800792e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007934:	d102      	bne.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007936:	4b50      	ldr	r3, [pc, #320]	@ (8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8007938:	637b      	str	r3, [r7, #52]	@ 0x34
 800793a:	e010      	b.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800793c:	4b4c      	ldr	r3, [pc, #304]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007944:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007948:	d106      	bne.n	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 800794a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800794c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007950:	d102      	bne.n	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007952:	4b4a      	ldr	r3, [pc, #296]	@ (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8007954:	637b      	str	r3, [r7, #52]	@ 0x34
 8007956:	e002      	b.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007958:	2300      	movs	r3, #0
 800795a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800795c:	e003      	b.n	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 800795e:	e002      	b.n	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 8007960:	2300      	movs	r3, #0
 8007962:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007964:	bf00      	nop
          }
        }
        break;
 8007966:	e2b2      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007968:	4b41      	ldr	r3, [pc, #260]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800796a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800796e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007972:	633b      	str	r3, [r7, #48]	@ 0x30
 8007974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007976:	2b20      	cmp	r3, #32
 8007978:	f200 80a4 	bhi.w	8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 800797c:	a201      	add	r2, pc, #4	@ (adr r2, 8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 800797e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007982:	bf00      	nop
 8007984:	08007a09 	.word	0x08007a09
 8007988:	08007ac5 	.word	0x08007ac5
 800798c:	08007ac5 	.word	0x08007ac5
 8007990:	08007ac5 	.word	0x08007ac5
 8007994:	08007ac5 	.word	0x08007ac5
 8007998:	08007ac5 	.word	0x08007ac5
 800799c:	08007ac5 	.word	0x08007ac5
 80079a0:	08007ac5 	.word	0x08007ac5
 80079a4:	08007a19 	.word	0x08007a19
 80079a8:	08007ac5 	.word	0x08007ac5
 80079ac:	08007ac5 	.word	0x08007ac5
 80079b0:	08007ac5 	.word	0x08007ac5
 80079b4:	08007ac5 	.word	0x08007ac5
 80079b8:	08007ac5 	.word	0x08007ac5
 80079bc:	08007ac5 	.word	0x08007ac5
 80079c0:	08007ac5 	.word	0x08007ac5
 80079c4:	08007a29 	.word	0x08007a29
 80079c8:	08007ac5 	.word	0x08007ac5
 80079cc:	08007ac5 	.word	0x08007ac5
 80079d0:	08007ac5 	.word	0x08007ac5
 80079d4:	08007ac5 	.word	0x08007ac5
 80079d8:	08007ac5 	.word	0x08007ac5
 80079dc:	08007ac5 	.word	0x08007ac5
 80079e0:	08007ac5 	.word	0x08007ac5
 80079e4:	08007a39 	.word	0x08007a39
 80079e8:	08007ac5 	.word	0x08007ac5
 80079ec:	08007ac5 	.word	0x08007ac5
 80079f0:	08007ac5 	.word	0x08007ac5
 80079f4:	08007ac5 	.word	0x08007ac5
 80079f8:	08007ac5 	.word	0x08007ac5
 80079fc:	08007ac5 	.word	0x08007ac5
 8007a00:	08007ac5 	.word	0x08007ac5
 8007a04:	08007a3f 	.word	0x08007a3f
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a08:	f107 0320 	add.w	r3, r7, #32
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f7fe fad9 	bl	8005fc4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a14:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a16:	e058      	b.n	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a18:	f107 0314 	add.w	r3, r7, #20
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f7fe fc3d 	bl	800629c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a26:	e050      	b.n	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a28:	f107 0308 	add.w	r3, r7, #8
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7fe fda1 	bl	8006574 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a36:	e048      	b.n	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007a38:	4b11      	ldr	r3, [pc, #68]	@ (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8007a3a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a3c:	e045      	b.n	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007a40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a44:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007a48:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a4a:	4b09      	ldr	r3, [pc, #36]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 0302 	and.w	r3, r3, #2
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d116      	bne.n	8007a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 8007a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d113      	bne.n	8007a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a5c:	4b04      	ldr	r3, [pc, #16]	@ (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	08db      	lsrs	r3, r3, #3
 8007a62:	f003 0303 	and.w	r3, r3, #3
 8007a66:	4a03      	ldr	r2, [pc, #12]	@ (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8007a68:	fa22 f303 	lsr.w	r3, r2, r3
 8007a6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a6e:	e028      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8007a70:	44020c00 	.word	0x44020c00
 8007a74:	03d09000 	.word	0x03d09000
 8007a78:	003d0900 	.word	0x003d0900
 8007a7c:	007a1200 	.word	0x007a1200
 8007a80:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a84:	4b95      	ldr	r3, [pc, #596]	@ (8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a90:	d106      	bne.n	8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 8007a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a98:	d102      	bne.n	8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007a9a:	4b91      	ldr	r3, [pc, #580]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8007a9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a9e:	e010      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007aa0:	4b8e      	ldr	r3, [pc, #568]	@ (8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007aa8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007aac:	d106      	bne.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 8007aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ab0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ab4:	d102      	bne.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007ab6:	4b8b      	ldr	r3, [pc, #556]	@ (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8007ab8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aba:	e002      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007abc:	2300      	movs	r3, #0
 8007abe:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007ac0:	e003      	b.n	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8007ac2:	e002      	b.n	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007ac8:	bf00      	nop
          }
        }
        break;
 8007aca:	e200      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007acc:	4b83      	ldr	r3, [pc, #524]	@ (8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ad2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007ad6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ada:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ade:	d031      	beq.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8007ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ae6:	d866      	bhi.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8007ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aea:	2bc0      	cmp	r3, #192	@ 0xc0
 8007aec:	d027      	beq.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 8007aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af0:	2bc0      	cmp	r3, #192	@ 0xc0
 8007af2:	d860      	bhi.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8007af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af6:	2b80      	cmp	r3, #128	@ 0x80
 8007af8:	d019      	beq.n	8007b2e <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 8007afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007afc:	2b80      	cmp	r3, #128	@ 0x80
 8007afe:	d85a      	bhi.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8007b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d003      	beq.n	8007b0e <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 8007b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b08:	2b40      	cmp	r3, #64	@ 0x40
 8007b0a:	d008      	beq.n	8007b1e <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 8007b0c:	e053      	b.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b0e:	f107 0320 	add.w	r3, r7, #32
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7fe fa56 	bl	8005fc4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b1a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007b1c:	e04e      	b.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b1e:	f107 0314 	add.w	r3, r7, #20
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7fe fbba 	bl	800629c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007b2c:	e046      	b.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b2e:	f107 0308 	add.w	r3, r7, #8
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7fe fd1e 	bl	8006574 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007b3c:	e03e      	b.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007b3e:	4b6a      	ldr	r3, [pc, #424]	@ (8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 8007b40:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007b42:	e03b      	b.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007b44:	4b65      	ldr	r3, [pc, #404]	@ (8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007b46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b4a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b50:	4b62      	ldr	r3, [pc, #392]	@ (8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 0302 	and.w	r3, r3, #2
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d10c      	bne.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8007b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d109      	bne.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b62:	4b5e      	ldr	r3, [pc, #376]	@ (8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	08db      	lsrs	r3, r3, #3
 8007b68:	f003 0303 	and.w	r3, r3, #3
 8007b6c:	4a5f      	ldr	r2, [pc, #380]	@ (8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8007b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b72:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b74:	e01e      	b.n	8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b76:	4b59      	ldr	r3, [pc, #356]	@ (8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b82:	d106      	bne.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8007b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b8a:	d102      	bne.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007b8c:	4b54      	ldr	r3, [pc, #336]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8007b8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b90:	e010      	b.n	8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b92:	4b52      	ldr	r3, [pc, #328]	@ (8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b9e:	d106      	bne.n	8007bae <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 8007ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ba2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ba6:	d102      	bne.n	8007bae <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007ba8:	4b4e      	ldr	r3, [pc, #312]	@ (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8007baa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bac:	e002      	b.n	8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007bb2:	e003      	b.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 8007bb4:	e002      	b.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007bba:	bf00      	nop
          }
        }
        break;
 8007bbc:	e187      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8007bbe:	4b47      	ldr	r3, [pc, #284]	@ (8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007bc4:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8007bc8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8007bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d103      	bne.n	8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007bd0:	f7fd f80c 	bl	8004bec <HAL_RCC_GetPCLK2Freq>
 8007bd4:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007bd6:	e17a      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8007bd8:	4b40      	ldr	r3, [pc, #256]	@ (8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007be0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007be4:	d10b      	bne.n	8007bfe <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8007be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bec:	d107      	bne.n	8007bfe <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bee:	f107 0314 	add.w	r3, r7, #20
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7fe fb52 	bl	800629c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bfc:	e045      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8007bfe:	4b37      	ldr	r3, [pc, #220]	@ (8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c0a:	d10b      	bne.n	8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 8007c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c12:	d107      	bne.n	8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c14:	f107 0308 	add.w	r3, r7, #8
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f7fe fcab 	bl	8006574 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c22:	e032      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8007c24:	4b2d      	ldr	r3, [pc, #180]	@ (8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 0302 	and.w	r3, r3, #2
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d10d      	bne.n	8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 8007c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c32:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007c36:	d109      	bne.n	8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c38:	4b28      	ldr	r3, [pc, #160]	@ (8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	08db      	lsrs	r3, r3, #3
 8007c3e:	f003 0303 	and.w	r3, r3, #3
 8007c42:	4a2a      	ldr	r2, [pc, #168]	@ (8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8007c44:	fa22 f303 	lsr.w	r3, r2, r3
 8007c48:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c4a:	e01e      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8007c4c:	4b23      	ldr	r3, [pc, #140]	@ (8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c58:	d106      	bne.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 8007c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c60:	d102      	bne.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 8007c62:	4b1f      	ldr	r3, [pc, #124]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8007c64:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c66:	e010      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8007c68:	4b1c      	ldr	r3, [pc, #112]	@ (8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c74:	d106      	bne.n	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 8007c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c78:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007c7c:	d102      	bne.n	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 8007c7e:	4b19      	ldr	r3, [pc, #100]	@ (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8007c80:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c82:	e002      	b.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 8007c84:	2300      	movs	r3, #0
 8007c86:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c88:	e121      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007c8a:	e120      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007c8c:	4b13      	ldr	r3, [pc, #76]	@ (8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007c8e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007c92:	f003 0303 	and.w	r3, r3, #3
 8007c96:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c9a:	2b03      	cmp	r3, #3
 8007c9c:	d861      	bhi.n	8007d62 <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 8007c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 8007ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca4:	08007cb5 	.word	0x08007cb5
 8007ca8:	08007cbd 	.word	0x08007cbd
 8007cac:	08007ccd 	.word	0x08007ccd
 8007cb0:	08007cf1 	.word	0x08007cf1

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8007cb4:	f7fc ff68 	bl	8004b88 <HAL_RCC_GetHCLKFreq>
 8007cb8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007cba:	e055      	b.n	8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cbc:	f107 0320 	add.w	r3, r7, #32
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7fe f97f 	bl	8005fc4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007cca:	e04d      	b.n	8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ccc:	f107 0314 	add.w	r3, r7, #20
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7fe fae3 	bl	800629c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007cda:	e045      	b.n	8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8007cdc:	44020c00 	.word	0x44020c00
 8007ce0:	003d0900 	.word	0x003d0900
 8007ce4:	007a1200 	.word	0x007a1200
 8007ce8:	00bb8000 	.word	0x00bb8000
 8007cec:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007cf0:	4b79      	ldr	r3, [pc, #484]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007cf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007cf6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007cfc:	4b76      	ldr	r3, [pc, #472]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0302 	and.w	r3, r3, #2
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d10c      	bne.n	8007d22 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 8007d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d109      	bne.n	8007d22 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d0e:	4b72      	ldr	r3, [pc, #456]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	08db      	lsrs	r3, r3, #3
 8007d14:	f003 0303 	and.w	r3, r3, #3
 8007d18:	4a70      	ldr	r2, [pc, #448]	@ (8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 8007d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d20:	e01e      	b.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d22:	4b6d      	ldr	r3, [pc, #436]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d2e:	d106      	bne.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 8007d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d36:	d102      	bne.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007d38:	4b69      	ldr	r3, [pc, #420]	@ (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 8007d3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d3c:	e010      	b.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d3e:	4b66      	ldr	r3, [pc, #408]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d4a:	d106      	bne.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8007d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d52:	d102      	bne.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007d54:	4b63      	ldr	r3, [pc, #396]	@ (8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 8007d56:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d58:	e002      	b.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007d5e:	e003      	b.n	8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8007d60:	e002      	b.n	8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 8007d62:	2300      	movs	r3, #0
 8007d64:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007d66:	bf00      	nop
          }
        }
        break;
 8007d68:	e0b1      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8007d6a:	4b5b      	ldr	r3, [pc, #364]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007d6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d70:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007d74:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8007d76:	4b58      	ldr	r3, [pc, #352]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007d78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d7c:	f003 0302 	and.w	r3, r3, #2
 8007d80:	2b02      	cmp	r3, #2
 8007d82:	d106      	bne.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 8007d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d103      	bne.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 8007d8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d90:	e01f      	b.n	8007dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8007d92:	4b51      	ldr	r3, [pc, #324]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007d94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007da0:	d106      	bne.n	8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 8007da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da4:	2b40      	cmp	r3, #64	@ 0x40
 8007da6:	d103      	bne.n	8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 8007da8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007dac:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dae:	e010      	b.n	8007dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8007db0:	4b49      	ldr	r3, [pc, #292]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007db8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007dbc:	d106      	bne.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 8007dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc0:	2b80      	cmp	r3, #128	@ 0x80
 8007dc2:	d103      	bne.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 8007dc4:	f248 0312 	movw	r3, #32786	@ 0x8012
 8007dc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dca:	e002      	b.n	8007dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8007dd0:	e07d      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007dd2:	e07c      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007dd4:	4b40      	ldr	r3, [pc, #256]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007dd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007dda:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007dde:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007de0:	4b3d      	ldr	r3, [pc, #244]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007de8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007dec:	d105      	bne.n	8007dfa <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 8007dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d102      	bne.n	8007dfa <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 8007df4:	4b3c      	ldr	r3, [pc, #240]	@ (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8007df6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007df8:	e031      	b.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8007dfa:	4b37      	ldr	r3, [pc, #220]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e06:	d10a      	bne.n	8007e1e <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 8007e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e0a:	2b10      	cmp	r3, #16
 8007e0c:	d107      	bne.n	8007e1e <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e0e:	f107 0320 	add.w	r3, r7, #32
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7fe f8d6 	bl	8005fc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e1c:	e01f      	b.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8007e1e:	4b2e      	ldr	r3, [pc, #184]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007e20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e24:	f003 0302 	and.w	r3, r3, #2
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d106      	bne.n	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 8007e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e2e:	2b20      	cmp	r3, #32
 8007e30:	d103      	bne.n	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 8007e32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e36:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e38:	e011      	b.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8007e3a:	4b27      	ldr	r3, [pc, #156]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007e3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e48:	d106      	bne.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e4c:	2b30      	cmp	r3, #48	@ 0x30
 8007e4e:	d103      	bne.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 8007e50:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007e54:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e56:	e002      	b.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8007e5c:	e037      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007e5e:	e036      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8007e60:	4b1d      	ldr	r3, [pc, #116]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007e62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007e66:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007e6a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8007e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e6e:	2b10      	cmp	r3, #16
 8007e70:	d107      	bne.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e72:	f107 0320 	add.w	r3, r7, #32
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7fe f8a4 	bl	8005fc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e7e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007e80:	e025      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8007e82:	4b15      	ldr	r3, [pc, #84]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e8e:	d10a      	bne.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 8007e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e92:	2b20      	cmp	r3, #32
 8007e94:	d107      	bne.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e96:	f107 0308 	add.w	r3, r7, #8
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7fe fb6a 	bl	8006574 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ea4:	e00f      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8007ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007eae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007eb2:	d105      	bne.n	8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 8007eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb6:	2b30      	cmp	r3, #48	@ 0x30
 8007eb8:	d102      	bne.n	8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 8007eba:	4b0b      	ldr	r3, [pc, #44]	@ (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8007ebc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ebe:	e002      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8007ec4:	e003      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007ec6:	e002      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ecc:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 8007ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	373c      	adds	r7, #60	@ 0x3c
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd90      	pop	{r4, r7, pc}
 8007ed8:	44020c00 	.word	0x44020c00
 8007edc:	03d09000 	.word	0x03d09000
 8007ee0:	003d0900 	.word	0x003d0900
 8007ee4:	007a1200 	.word	0x007a1200
 8007ee8:	02dc6c00 	.word	0x02dc6c00

08007eec <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8007ef4:	4b48      	ldr	r3, [pc, #288]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a47      	ldr	r2, [pc, #284]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007efa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007efe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007f00:	f7f9 ffcc 	bl	8001e9c <HAL_GetTick>
 8007f04:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f06:	e008      	b.n	8007f1a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007f08:	f7f9 ffc8 	bl	8001e9c <HAL_GetTick>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d901      	bls.n	8007f1a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e07a      	b.n	8008010 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f1a:	4b3f      	ldr	r3, [pc, #252]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1f0      	bne.n	8007f08 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007f26:	4b3c      	ldr	r3, [pc, #240]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f2a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007f2e:	f023 0303 	bic.w	r3, r3, #3
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	6811      	ldr	r1, [r2, #0]
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	6852      	ldr	r2, [r2, #4]
 8007f3a:	0212      	lsls	r2, r2, #8
 8007f3c:	430a      	orrs	r2, r1
 8007f3e:	4936      	ldr	r1, [pc, #216]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007f40:	4313      	orrs	r3, r2
 8007f42:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	3b01      	subs	r3, #1
 8007f54:	025b      	lsls	r3, r3, #9
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	431a      	orrs	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	041b      	lsls	r3, r3, #16
 8007f62:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007f66:	431a      	orrs	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	061b      	lsls	r3, r3, #24
 8007f70:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007f74:	4928      	ldr	r1, [pc, #160]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007f76:	4313      	orrs	r3, r2
 8007f78:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007f7a:	4b27      	ldr	r3, [pc, #156]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f7e:	f023 020c 	bic.w	r2, r3, #12
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	699b      	ldr	r3, [r3, #24]
 8007f86:	4924      	ldr	r1, [pc, #144]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8007f8c:	4b22      	ldr	r3, [pc, #136]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f90:	f023 0220 	bic.w	r2, r3, #32
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	69db      	ldr	r3, [r3, #28]
 8007f98:	491f      	ldr	r1, [pc, #124]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007fa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fa6:	491c      	ldr	r1, [pc, #112]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8007fac:	4b1a      	ldr	r3, [pc, #104]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fb0:	4a19      	ldr	r2, [pc, #100]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007fb2:	f023 0310 	bic.w	r3, r3, #16
 8007fb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8007fb8:	4b17      	ldr	r3, [pc, #92]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fbc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007fc0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	6a12      	ldr	r2, [r2, #32]
 8007fc8:	00d2      	lsls	r2, r2, #3
 8007fca:	4913      	ldr	r1, [pc, #76]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8007fd0:	4b11      	ldr	r3, [pc, #68]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fd4:	4a10      	ldr	r2, [pc, #64]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007fd6:	f043 0310 	orr.w	r3, r3, #16
 8007fda:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8007fdc:	4b0e      	ldr	r3, [pc, #56]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a0d      	ldr	r2, [pc, #52]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8007fe2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007fe6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007fe8:	f7f9 ff58 	bl	8001e9c <HAL_GetTick>
 8007fec:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007fee:	e008      	b.n	8008002 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007ff0:	f7f9 ff54 	bl	8001e9c <HAL_GetTick>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	1ad3      	subs	r3, r2, r3
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d901      	bls.n	8008002 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8007ffe:	2303      	movs	r3, #3
 8008000:	e006      	b.n	8008010 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008002:	4b05      	ldr	r3, [pc, #20]	@ (8008018 <RCCEx_PLL2_Config+0x12c>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800800a:	2b00      	cmp	r3, #0
 800800c:	d0f0      	beq.n	8007ff0 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800800e:	2300      	movs	r3, #0

}
 8008010:	4618      	mov	r0, r3
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	44020c00 	.word	0x44020c00

0800801c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8008024:	4b48      	ldr	r3, [pc, #288]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a47      	ldr	r2, [pc, #284]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 800802a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800802e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008030:	f7f9 ff34 	bl	8001e9c <HAL_GetTick>
 8008034:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008036:	e008      	b.n	800804a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008038:	f7f9 ff30 	bl	8001e9c <HAL_GetTick>
 800803c:	4602      	mov	r2, r0
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	2b02      	cmp	r3, #2
 8008044:	d901      	bls.n	800804a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008046:	2303      	movs	r3, #3
 8008048:	e07a      	b.n	8008140 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800804a:	4b3f      	ldr	r3, [pc, #252]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1f0      	bne.n	8008038 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008056:	4b3c      	ldr	r3, [pc, #240]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 8008058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800805a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800805e:	f023 0303 	bic.w	r3, r3, #3
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	6811      	ldr	r1, [r2, #0]
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	6852      	ldr	r2, [r2, #4]
 800806a:	0212      	lsls	r2, r2, #8
 800806c:	430a      	orrs	r2, r1
 800806e:	4936      	ldr	r1, [pc, #216]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 8008070:	4313      	orrs	r3, r2
 8008072:	630b      	str	r3, [r1, #48]	@ 0x30
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	3b01      	subs	r3, #1
 800807a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	3b01      	subs	r3, #1
 8008084:	025b      	lsls	r3, r3, #9
 8008086:	b29b      	uxth	r3, r3
 8008088:	431a      	orrs	r2, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	3b01      	subs	r3, #1
 8008090:	041b      	lsls	r3, r3, #16
 8008092:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008096:	431a      	orrs	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	695b      	ldr	r3, [r3, #20]
 800809c:	3b01      	subs	r3, #1
 800809e:	061b      	lsls	r3, r3, #24
 80080a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80080a4:	4928      	ldr	r1, [pc, #160]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 80080a6:	4313      	orrs	r3, r2
 80080a8:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80080aa:	4b27      	ldr	r3, [pc, #156]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 80080ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080ae:	f023 020c 	bic.w	r2, r3, #12
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	4924      	ldr	r1, [pc, #144]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 80080b8:	4313      	orrs	r3, r2
 80080ba:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 80080bc:	4b22      	ldr	r3, [pc, #136]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 80080be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080c0:	f023 0220 	bic.w	r2, r3, #32
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	69db      	ldr	r3, [r3, #28]
 80080c8:	491f      	ldr	r1, [pc, #124]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 80080ca:	4313      	orrs	r3, r2
 80080cc:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80080ce:	4b1e      	ldr	r3, [pc, #120]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 80080d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080d6:	491c      	ldr	r1, [pc, #112]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 80080d8:	4313      	orrs	r3, r2
 80080da:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 80080dc:	4b1a      	ldr	r3, [pc, #104]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 80080de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080e0:	4a19      	ldr	r2, [pc, #100]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 80080e2:	f023 0310 	bic.w	r3, r3, #16
 80080e6:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 80080e8:	4b17      	ldr	r3, [pc, #92]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 80080ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080ec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80080f0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	6a12      	ldr	r2, [r2, #32]
 80080f8:	00d2      	lsls	r2, r2, #3
 80080fa:	4913      	ldr	r1, [pc, #76]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 80080fc:	4313      	orrs	r3, r2
 80080fe:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8008100:	4b11      	ldr	r3, [pc, #68]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 8008102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008104:	4a10      	ldr	r2, [pc, #64]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 8008106:	f043 0310 	orr.w	r3, r3, #16
 800810a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800810c:	4b0e      	ldr	r3, [pc, #56]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a0d      	ldr	r2, [pc, #52]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 8008112:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008116:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008118:	f7f9 fec0 	bl	8001e9c <HAL_GetTick>
 800811c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800811e:	e008      	b.n	8008132 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008120:	f7f9 febc 	bl	8001e9c <HAL_GetTick>
 8008124:	4602      	mov	r2, r0
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	1ad3      	subs	r3, r2, r3
 800812a:	2b02      	cmp	r3, #2
 800812c:	d901      	bls.n	8008132 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800812e:	2303      	movs	r3, #3
 8008130:	e006      	b.n	8008140 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008132:	4b05      	ldr	r3, [pc, #20]	@ (8008148 <RCCEx_PLL3_Config+0x12c>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800813a:	2b00      	cmp	r3, #0
 800813c:	d0f0      	beq.n	8008120 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	44020c00 	.word	0x44020c00

0800814c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d101      	bne.n	800815e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e049      	b.n	80081f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008164:	b2db      	uxtb	r3, r3
 8008166:	2b00      	cmp	r3, #0
 8008168:	d106      	bne.n	8008178 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f7f9 fc36 	bl	80019e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2202      	movs	r2, #2
 800817c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	3304      	adds	r3, #4
 8008188:	4619      	mov	r1, r3
 800818a:	4610      	mov	r0, r2
 800818c:	f000 fd8e 	bl	8008cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b082      	sub	sp, #8
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d101      	bne.n	800820c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	e049      	b.n	80082a0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008212:	b2db      	uxtb	r3, r3
 8008214:	2b00      	cmp	r3, #0
 8008216:	d106      	bne.n	8008226 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 f841 	bl	80082a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2202      	movs	r2, #2
 800822a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	3304      	adds	r3, #4
 8008236:	4619      	mov	r1, r3
 8008238:	4610      	mov	r0, r2
 800823a:	f000 fd37 	bl	8008cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2201      	movs	r2, #1
 8008242:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2201      	movs	r2, #1
 800824a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2201      	movs	r2, #1
 8008252:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2201      	movs	r2, #1
 800825a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2201      	movs	r2, #1
 8008262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2201      	movs	r2, #1
 800826a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2201      	movs	r2, #1
 800827a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2201      	movs	r2, #1
 8008282:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2201      	movs	r2, #1
 800828a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2201      	movs	r2, #1
 8008292:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2201      	movs	r2, #1
 800829a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3708      	adds	r7, #8
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80082b0:	bf00      	nop
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d109      	bne.n	80082e0 <HAL_TIM_PWM_Start+0x24>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	bf14      	ite	ne
 80082d8:	2301      	movne	r3, #1
 80082da:	2300      	moveq	r3, #0
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	e03c      	b.n	800835a <HAL_TIM_PWM_Start+0x9e>
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	2b04      	cmp	r3, #4
 80082e4:	d109      	bne.n	80082fa <HAL_TIM_PWM_Start+0x3e>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	bf14      	ite	ne
 80082f2:	2301      	movne	r3, #1
 80082f4:	2300      	moveq	r3, #0
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	e02f      	b.n	800835a <HAL_TIM_PWM_Start+0x9e>
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	2b08      	cmp	r3, #8
 80082fe:	d109      	bne.n	8008314 <HAL_TIM_PWM_Start+0x58>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008306:	b2db      	uxtb	r3, r3
 8008308:	2b01      	cmp	r3, #1
 800830a:	bf14      	ite	ne
 800830c:	2301      	movne	r3, #1
 800830e:	2300      	moveq	r3, #0
 8008310:	b2db      	uxtb	r3, r3
 8008312:	e022      	b.n	800835a <HAL_TIM_PWM_Start+0x9e>
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	2b0c      	cmp	r3, #12
 8008318:	d109      	bne.n	800832e <HAL_TIM_PWM_Start+0x72>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008320:	b2db      	uxtb	r3, r3
 8008322:	2b01      	cmp	r3, #1
 8008324:	bf14      	ite	ne
 8008326:	2301      	movne	r3, #1
 8008328:	2300      	moveq	r3, #0
 800832a:	b2db      	uxtb	r3, r3
 800832c:	e015      	b.n	800835a <HAL_TIM_PWM_Start+0x9e>
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	2b10      	cmp	r3, #16
 8008332:	d109      	bne.n	8008348 <HAL_TIM_PWM_Start+0x8c>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800833a:	b2db      	uxtb	r3, r3
 800833c:	2b01      	cmp	r3, #1
 800833e:	bf14      	ite	ne
 8008340:	2301      	movne	r3, #1
 8008342:	2300      	moveq	r3, #0
 8008344:	b2db      	uxtb	r3, r3
 8008346:	e008      	b.n	800835a <HAL_TIM_PWM_Start+0x9e>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800834e:	b2db      	uxtb	r3, r3
 8008350:	2b01      	cmp	r3, #1
 8008352:	bf14      	ite	ne
 8008354:	2301      	movne	r3, #1
 8008356:	2300      	moveq	r3, #0
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b00      	cmp	r3, #0
 800835c:	d001      	beq.n	8008362 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e0ce      	b.n	8008500 <HAL_TIM_PWM_Start+0x244>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d104      	bne.n	8008372 <HAL_TIM_PWM_Start+0xb6>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2202      	movs	r2, #2
 800836c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008370:	e023      	b.n	80083ba <HAL_TIM_PWM_Start+0xfe>
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	2b04      	cmp	r3, #4
 8008376:	d104      	bne.n	8008382 <HAL_TIM_PWM_Start+0xc6>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2202      	movs	r2, #2
 800837c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008380:	e01b      	b.n	80083ba <HAL_TIM_PWM_Start+0xfe>
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	2b08      	cmp	r3, #8
 8008386:	d104      	bne.n	8008392 <HAL_TIM_PWM_Start+0xd6>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2202      	movs	r2, #2
 800838c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008390:	e013      	b.n	80083ba <HAL_TIM_PWM_Start+0xfe>
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	2b0c      	cmp	r3, #12
 8008396:	d104      	bne.n	80083a2 <HAL_TIM_PWM_Start+0xe6>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2202      	movs	r2, #2
 800839c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80083a0:	e00b      	b.n	80083ba <HAL_TIM_PWM_Start+0xfe>
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	2b10      	cmp	r3, #16
 80083a6:	d104      	bne.n	80083b2 <HAL_TIM_PWM_Start+0xf6>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2202      	movs	r2, #2
 80083ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80083b0:	e003      	b.n	80083ba <HAL_TIM_PWM_Start+0xfe>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2202      	movs	r2, #2
 80083b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2201      	movs	r2, #1
 80083c0:	6839      	ldr	r1, [r7, #0]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f001 f92e 	bl	8009624 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a4e      	ldr	r2, [pc, #312]	@ (8008508 <HAL_TIM_PWM_Start+0x24c>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d018      	beq.n	8008404 <HAL_TIM_PWM_Start+0x148>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a4d      	ldr	r2, [pc, #308]	@ (800850c <HAL_TIM_PWM_Start+0x250>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d013      	beq.n	8008404 <HAL_TIM_PWM_Start+0x148>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a4b      	ldr	r2, [pc, #300]	@ (8008510 <HAL_TIM_PWM_Start+0x254>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d00e      	beq.n	8008404 <HAL_TIM_PWM_Start+0x148>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a4a      	ldr	r2, [pc, #296]	@ (8008514 <HAL_TIM_PWM_Start+0x258>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d009      	beq.n	8008404 <HAL_TIM_PWM_Start+0x148>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a48      	ldr	r2, [pc, #288]	@ (8008518 <HAL_TIM_PWM_Start+0x25c>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d004      	beq.n	8008404 <HAL_TIM_PWM_Start+0x148>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a47      	ldr	r2, [pc, #284]	@ (800851c <HAL_TIM_PWM_Start+0x260>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d101      	bne.n	8008408 <HAL_TIM_PWM_Start+0x14c>
 8008404:	2301      	movs	r3, #1
 8008406:	e000      	b.n	800840a <HAL_TIM_PWM_Start+0x14e>
 8008408:	2300      	movs	r3, #0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d007      	beq.n	800841e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800841c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a39      	ldr	r2, [pc, #228]	@ (8008508 <HAL_TIM_PWM_Start+0x24c>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d04a      	beq.n	80084be <HAL_TIM_PWM_Start+0x202>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a37      	ldr	r2, [pc, #220]	@ (800850c <HAL_TIM_PWM_Start+0x250>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d045      	beq.n	80084be <HAL_TIM_PWM_Start+0x202>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800843a:	d040      	beq.n	80084be <HAL_TIM_PWM_Start+0x202>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008444:	d03b      	beq.n	80084be <HAL_TIM_PWM_Start+0x202>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a35      	ldr	r2, [pc, #212]	@ (8008520 <HAL_TIM_PWM_Start+0x264>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d036      	beq.n	80084be <HAL_TIM_PWM_Start+0x202>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a33      	ldr	r2, [pc, #204]	@ (8008524 <HAL_TIM_PWM_Start+0x268>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d031      	beq.n	80084be <HAL_TIM_PWM_Start+0x202>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a32      	ldr	r2, [pc, #200]	@ (8008528 <HAL_TIM_PWM_Start+0x26c>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d02c      	beq.n	80084be <HAL_TIM_PWM_Start+0x202>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a30      	ldr	r2, [pc, #192]	@ (800852c <HAL_TIM_PWM_Start+0x270>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d027      	beq.n	80084be <HAL_TIM_PWM_Start+0x202>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a2f      	ldr	r2, [pc, #188]	@ (8008530 <HAL_TIM_PWM_Start+0x274>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d022      	beq.n	80084be <HAL_TIM_PWM_Start+0x202>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a2d      	ldr	r2, [pc, #180]	@ (8008534 <HAL_TIM_PWM_Start+0x278>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d01d      	beq.n	80084be <HAL_TIM_PWM_Start+0x202>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a22      	ldr	r2, [pc, #136]	@ (8008510 <HAL_TIM_PWM_Start+0x254>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d018      	beq.n	80084be <HAL_TIM_PWM_Start+0x202>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a20      	ldr	r2, [pc, #128]	@ (8008514 <HAL_TIM_PWM_Start+0x258>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d013      	beq.n	80084be <HAL_TIM_PWM_Start+0x202>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a27      	ldr	r2, [pc, #156]	@ (8008538 <HAL_TIM_PWM_Start+0x27c>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d00e      	beq.n	80084be <HAL_TIM_PWM_Start+0x202>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a25      	ldr	r2, [pc, #148]	@ (800853c <HAL_TIM_PWM_Start+0x280>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d009      	beq.n	80084be <HAL_TIM_PWM_Start+0x202>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a1a      	ldr	r2, [pc, #104]	@ (8008518 <HAL_TIM_PWM_Start+0x25c>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d004      	beq.n	80084be <HAL_TIM_PWM_Start+0x202>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a18      	ldr	r2, [pc, #96]	@ (800851c <HAL_TIM_PWM_Start+0x260>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d115      	bne.n	80084ea <HAL_TIM_PWM_Start+0x22e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	689a      	ldr	r2, [r3, #8]
 80084c4:	4b1e      	ldr	r3, [pc, #120]	@ (8008540 <HAL_TIM_PWM_Start+0x284>)
 80084c6:	4013      	ands	r3, r2
 80084c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2b06      	cmp	r3, #6
 80084ce:	d015      	beq.n	80084fc <HAL_TIM_PWM_Start+0x240>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084d6:	d011      	beq.n	80084fc <HAL_TIM_PWM_Start+0x240>
    {
      __HAL_TIM_ENABLE(htim);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f042 0201 	orr.w	r2, r2, #1
 80084e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084e8:	e008      	b.n	80084fc <HAL_TIM_PWM_Start+0x240>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f042 0201 	orr.w	r2, r2, #1
 80084f8:	601a      	str	r2, [r3, #0]
 80084fa:	e000      	b.n	80084fe <HAL_TIM_PWM_Start+0x242>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80084fe:	2300      	movs	r3, #0
}
 8008500:	4618      	mov	r0, r3
 8008502:	3710      	adds	r7, #16
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	40012c00 	.word	0x40012c00
 800850c:	50012c00 	.word	0x50012c00
 8008510:	40013400 	.word	0x40013400
 8008514:	50013400 	.word	0x50013400
 8008518:	40014000 	.word	0x40014000
 800851c:	50014000 	.word	0x50014000
 8008520:	40000400 	.word	0x40000400
 8008524:	50000400 	.word	0x50000400
 8008528:	40000800 	.word	0x40000800
 800852c:	50000800 	.word	0x50000800
 8008530:	40000c00 	.word	0x40000c00
 8008534:	50000c00 	.word	0x50000c00
 8008538:	40001800 	.word	0x40001800
 800853c:	50001800 	.word	0x50001800
 8008540:	00010007 	.word	0x00010007

08008544 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	f003 0302 	and.w	r3, r3, #2
 8008562:	2b00      	cmp	r3, #0
 8008564:	d020      	beq.n	80085a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f003 0302 	and.w	r3, r3, #2
 800856c:	2b00      	cmp	r3, #0
 800856e:	d01b      	beq.n	80085a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f06f 0202 	mvn.w	r2, #2
 8008578:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2201      	movs	r2, #1
 800857e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	699b      	ldr	r3, [r3, #24]
 8008586:	f003 0303 	and.w	r3, r3, #3
 800858a:	2b00      	cmp	r3, #0
 800858c:	d003      	beq.n	8008596 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 fb6e 	bl	8008c70 <HAL_TIM_IC_CaptureCallback>
 8008594:	e005      	b.n	80085a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 fb60 	bl	8008c5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 fb71 	bl	8008c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	f003 0304 	and.w	r3, r3, #4
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d020      	beq.n	80085f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f003 0304 	and.w	r3, r3, #4
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d01b      	beq.n	80085f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f06f 0204 	mvn.w	r2, #4
 80085c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2202      	movs	r2, #2
 80085ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d003      	beq.n	80085e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 fb48 	bl	8008c70 <HAL_TIM_IC_CaptureCallback>
 80085e0:	e005      	b.n	80085ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 fb3a 	bl	8008c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 fb4b 	bl	8008c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	f003 0308 	and.w	r3, r3, #8
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d020      	beq.n	8008640 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f003 0308 	and.w	r3, r3, #8
 8008604:	2b00      	cmp	r3, #0
 8008606:	d01b      	beq.n	8008640 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f06f 0208 	mvn.w	r2, #8
 8008610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2204      	movs	r2, #4
 8008616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	69db      	ldr	r3, [r3, #28]
 800861e:	f003 0303 	and.w	r3, r3, #3
 8008622:	2b00      	cmp	r3, #0
 8008624:	d003      	beq.n	800862e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 fb22 	bl	8008c70 <HAL_TIM_IC_CaptureCallback>
 800862c:	e005      	b.n	800863a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fb14 	bl	8008c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 fb25 	bl	8008c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	f003 0310 	and.w	r3, r3, #16
 8008646:	2b00      	cmp	r3, #0
 8008648:	d020      	beq.n	800868c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f003 0310 	and.w	r3, r3, #16
 8008650:	2b00      	cmp	r3, #0
 8008652:	d01b      	beq.n	800868c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f06f 0210 	mvn.w	r2, #16
 800865c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2208      	movs	r2, #8
 8008662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	69db      	ldr	r3, [r3, #28]
 800866a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800866e:	2b00      	cmp	r3, #0
 8008670:	d003      	beq.n	800867a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fafc 	bl	8008c70 <HAL_TIM_IC_CaptureCallback>
 8008678:	e005      	b.n	8008686 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 faee 	bl	8008c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 faff 	bl	8008c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	f003 0301 	and.w	r3, r3, #1
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00c      	beq.n	80086b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f003 0301 	and.w	r3, r3, #1
 800869c:	2b00      	cmp	r3, #0
 800869e:	d007      	beq.n	80086b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f06f 0201 	mvn.w	r2, #1
 80086a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 facc 	bl	8008c48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d104      	bne.n	80086c4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00c      	beq.n	80086de <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d007      	beq.n	80086de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80086d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f001 f93d 	bl	8009958 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d00c      	beq.n	8008702 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d007      	beq.n	8008702 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80086fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f001 f935 	bl	800996c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00c      	beq.n	8008726 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008712:	2b00      	cmp	r3, #0
 8008714:	d007      	beq.n	8008726 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800871e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 fab9 	bl	8008c98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	f003 0320 	and.w	r3, r3, #32
 800872c:	2b00      	cmp	r3, #0
 800872e:	d00c      	beq.n	800874a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f003 0320 	and.w	r3, r3, #32
 8008736:	2b00      	cmp	r3, #0
 8008738:	d007      	beq.n	800874a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f06f 0220 	mvn.w	r2, #32
 8008742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f001 f8fd 	bl	8009944 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008750:	2b00      	cmp	r3, #0
 8008752:	d00c      	beq.n	800876e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800875a:	2b00      	cmp	r3, #0
 800875c:	d007      	beq.n	800876e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f001 f909 	bl	8009980 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00c      	beq.n	8008792 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800877e:	2b00      	cmp	r3, #0
 8008780:	d007      	beq.n	8008792 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800878a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f001 f901 	bl	8009994 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00c      	beq.n	80087b6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d007      	beq.n	80087b6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80087ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f001 f8f9 	bl	80099a8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00c      	beq.n	80087da <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d007      	beq.n	80087da <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80087d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f001 f8f1 	bl	80099bc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80087da:	bf00      	nop
 80087dc:	3710      	adds	r7, #16
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
	...

080087e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087f0:	2300      	movs	r3, #0
 80087f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d101      	bne.n	8008802 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80087fe:	2302      	movs	r3, #2
 8008800:	e0ff      	b.n	8008a02 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2201      	movs	r2, #1
 8008806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2b14      	cmp	r3, #20
 800880e:	f200 80f0 	bhi.w	80089f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008812:	a201      	add	r2, pc, #4	@ (adr r2, 8008818 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008818:	0800886d 	.word	0x0800886d
 800881c:	080089f3 	.word	0x080089f3
 8008820:	080089f3 	.word	0x080089f3
 8008824:	080089f3 	.word	0x080089f3
 8008828:	080088ad 	.word	0x080088ad
 800882c:	080089f3 	.word	0x080089f3
 8008830:	080089f3 	.word	0x080089f3
 8008834:	080089f3 	.word	0x080089f3
 8008838:	080088ef 	.word	0x080088ef
 800883c:	080089f3 	.word	0x080089f3
 8008840:	080089f3 	.word	0x080089f3
 8008844:	080089f3 	.word	0x080089f3
 8008848:	0800892f 	.word	0x0800892f
 800884c:	080089f3 	.word	0x080089f3
 8008850:	080089f3 	.word	0x080089f3
 8008854:	080089f3 	.word	0x080089f3
 8008858:	08008971 	.word	0x08008971
 800885c:	080089f3 	.word	0x080089f3
 8008860:	080089f3 	.word	0x080089f3
 8008864:	080089f3 	.word	0x080089f3
 8008868:	080089b1 	.word	0x080089b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	68b9      	ldr	r1, [r7, #8]
 8008872:	4618      	mov	r0, r3
 8008874:	f000 fb04 	bl	8008e80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	699a      	ldr	r2, [r3, #24]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f042 0208 	orr.w	r2, r2, #8
 8008886:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	699a      	ldr	r2, [r3, #24]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f022 0204 	bic.w	r2, r2, #4
 8008896:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	6999      	ldr	r1, [r3, #24]
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	691a      	ldr	r2, [r3, #16]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	430a      	orrs	r2, r1
 80088a8:	619a      	str	r2, [r3, #24]
      break;
 80088aa:	e0a5      	b.n	80089f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	68b9      	ldr	r1, [r7, #8]
 80088b2:	4618      	mov	r0, r3
 80088b4:	f000 fb7e 	bl	8008fb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	699a      	ldr	r2, [r3, #24]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80088c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	699a      	ldr	r2, [r3, #24]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	6999      	ldr	r1, [r3, #24]
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	021a      	lsls	r2, r3, #8
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	430a      	orrs	r2, r1
 80088ea:	619a      	str	r2, [r3, #24]
      break;
 80088ec:	e084      	b.n	80089f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	68b9      	ldr	r1, [r7, #8]
 80088f4:	4618      	mov	r0, r3
 80088f6:	f000 fbf5 	bl	80090e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	69da      	ldr	r2, [r3, #28]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f042 0208 	orr.w	r2, r2, #8
 8008908:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	69da      	ldr	r2, [r3, #28]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f022 0204 	bic.w	r2, r2, #4
 8008918:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	69d9      	ldr	r1, [r3, #28]
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	691a      	ldr	r2, [r3, #16]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	430a      	orrs	r2, r1
 800892a:	61da      	str	r2, [r3, #28]
      break;
 800892c:	e064      	b.n	80089f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68b9      	ldr	r1, [r7, #8]
 8008934:	4618      	mov	r0, r3
 8008936:	f000 fc6b 	bl	8009210 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	69da      	ldr	r2, [r3, #28]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008948:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	69da      	ldr	r2, [r3, #28]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008958:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	69d9      	ldr	r1, [r3, #28]
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	691b      	ldr	r3, [r3, #16]
 8008964:	021a      	lsls	r2, r3, #8
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	430a      	orrs	r2, r1
 800896c:	61da      	str	r2, [r3, #28]
      break;
 800896e:	e043      	b.n	80089f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68b9      	ldr	r1, [r7, #8]
 8008976:	4618      	mov	r0, r3
 8008978:	f000 fce2 	bl	8009340 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f042 0208 	orr.w	r2, r2, #8
 800898a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f022 0204 	bic.w	r2, r2, #4
 800899a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	691a      	ldr	r2, [r3, #16]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	430a      	orrs	r2, r1
 80089ac:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80089ae:	e023      	b.n	80089f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	68b9      	ldr	r1, [r7, #8]
 80089b6:	4618      	mov	r0, r3
 80089b8:	f000 fd2c 	bl	8009414 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80089ca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80089da:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	691b      	ldr	r3, [r3, #16]
 80089e6:	021a      	lsls	r2, r3, #8
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	430a      	orrs	r2, r1
 80089ee:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80089f0:	e002      	b.n	80089f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	75fb      	strb	r3, [r7, #23]
      break;
 80089f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008a00:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3718      	adds	r7, #24
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop

08008a0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a16:	2300      	movs	r3, #0
 8008a18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d101      	bne.n	8008a28 <HAL_TIM_ConfigClockSource+0x1c>
 8008a24:	2302      	movs	r3, #2
 8008a26:	e0fe      	b.n	8008c26 <HAL_TIM_ConfigClockSource+0x21a>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2202      	movs	r2, #2
 8008a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008a46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008a4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68ba      	ldr	r2, [r7, #8]
 8008a5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008a64:	f000 80c9 	beq.w	8008bfa <HAL_TIM_ConfigClockSource+0x1ee>
 8008a68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008a6c:	f200 80ce 	bhi.w	8008c0c <HAL_TIM_ConfigClockSource+0x200>
 8008a70:	4a6f      	ldr	r2, [pc, #444]	@ (8008c30 <HAL_TIM_ConfigClockSource+0x224>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	f000 80c1 	beq.w	8008bfa <HAL_TIM_ConfigClockSource+0x1ee>
 8008a78:	4a6d      	ldr	r2, [pc, #436]	@ (8008c30 <HAL_TIM_ConfigClockSource+0x224>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	f200 80c6 	bhi.w	8008c0c <HAL_TIM_ConfigClockSource+0x200>
 8008a80:	4a6c      	ldr	r2, [pc, #432]	@ (8008c34 <HAL_TIM_ConfigClockSource+0x228>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	f000 80b9 	beq.w	8008bfa <HAL_TIM_ConfigClockSource+0x1ee>
 8008a88:	4a6a      	ldr	r2, [pc, #424]	@ (8008c34 <HAL_TIM_ConfigClockSource+0x228>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	f200 80be 	bhi.w	8008c0c <HAL_TIM_ConfigClockSource+0x200>
 8008a90:	4a69      	ldr	r2, [pc, #420]	@ (8008c38 <HAL_TIM_ConfigClockSource+0x22c>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	f000 80b1 	beq.w	8008bfa <HAL_TIM_ConfigClockSource+0x1ee>
 8008a98:	4a67      	ldr	r2, [pc, #412]	@ (8008c38 <HAL_TIM_ConfigClockSource+0x22c>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	f200 80b6 	bhi.w	8008c0c <HAL_TIM_ConfigClockSource+0x200>
 8008aa0:	4a66      	ldr	r2, [pc, #408]	@ (8008c3c <HAL_TIM_ConfigClockSource+0x230>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	f000 80a9 	beq.w	8008bfa <HAL_TIM_ConfigClockSource+0x1ee>
 8008aa8:	4a64      	ldr	r2, [pc, #400]	@ (8008c3c <HAL_TIM_ConfigClockSource+0x230>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	f200 80ae 	bhi.w	8008c0c <HAL_TIM_ConfigClockSource+0x200>
 8008ab0:	4a63      	ldr	r2, [pc, #396]	@ (8008c40 <HAL_TIM_ConfigClockSource+0x234>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	f000 80a1 	beq.w	8008bfa <HAL_TIM_ConfigClockSource+0x1ee>
 8008ab8:	4a61      	ldr	r2, [pc, #388]	@ (8008c40 <HAL_TIM_ConfigClockSource+0x234>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	f200 80a6 	bhi.w	8008c0c <HAL_TIM_ConfigClockSource+0x200>
 8008ac0:	4a60      	ldr	r2, [pc, #384]	@ (8008c44 <HAL_TIM_ConfigClockSource+0x238>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	f000 8099 	beq.w	8008bfa <HAL_TIM_ConfigClockSource+0x1ee>
 8008ac8:	4a5e      	ldr	r2, [pc, #376]	@ (8008c44 <HAL_TIM_ConfigClockSource+0x238>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	f200 809e 	bhi.w	8008c0c <HAL_TIM_ConfigClockSource+0x200>
 8008ad0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008ad4:	f000 8091 	beq.w	8008bfa <HAL_TIM_ConfigClockSource+0x1ee>
 8008ad8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008adc:	f200 8096 	bhi.w	8008c0c <HAL_TIM_ConfigClockSource+0x200>
 8008ae0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ae4:	f000 8089 	beq.w	8008bfa <HAL_TIM_ConfigClockSource+0x1ee>
 8008ae8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008aec:	f200 808e 	bhi.w	8008c0c <HAL_TIM_ConfigClockSource+0x200>
 8008af0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008af4:	d03e      	beq.n	8008b74 <HAL_TIM_ConfigClockSource+0x168>
 8008af6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008afa:	f200 8087 	bhi.w	8008c0c <HAL_TIM_ConfigClockSource+0x200>
 8008afe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b02:	f000 8086 	beq.w	8008c12 <HAL_TIM_ConfigClockSource+0x206>
 8008b06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b0a:	d87f      	bhi.n	8008c0c <HAL_TIM_ConfigClockSource+0x200>
 8008b0c:	2b70      	cmp	r3, #112	@ 0x70
 8008b0e:	d01a      	beq.n	8008b46 <HAL_TIM_ConfigClockSource+0x13a>
 8008b10:	2b70      	cmp	r3, #112	@ 0x70
 8008b12:	d87b      	bhi.n	8008c0c <HAL_TIM_ConfigClockSource+0x200>
 8008b14:	2b60      	cmp	r3, #96	@ 0x60
 8008b16:	d050      	beq.n	8008bba <HAL_TIM_ConfigClockSource+0x1ae>
 8008b18:	2b60      	cmp	r3, #96	@ 0x60
 8008b1a:	d877      	bhi.n	8008c0c <HAL_TIM_ConfigClockSource+0x200>
 8008b1c:	2b50      	cmp	r3, #80	@ 0x50
 8008b1e:	d03c      	beq.n	8008b9a <HAL_TIM_ConfigClockSource+0x18e>
 8008b20:	2b50      	cmp	r3, #80	@ 0x50
 8008b22:	d873      	bhi.n	8008c0c <HAL_TIM_ConfigClockSource+0x200>
 8008b24:	2b40      	cmp	r3, #64	@ 0x40
 8008b26:	d058      	beq.n	8008bda <HAL_TIM_ConfigClockSource+0x1ce>
 8008b28:	2b40      	cmp	r3, #64	@ 0x40
 8008b2a:	d86f      	bhi.n	8008c0c <HAL_TIM_ConfigClockSource+0x200>
 8008b2c:	2b30      	cmp	r3, #48	@ 0x30
 8008b2e:	d064      	beq.n	8008bfa <HAL_TIM_ConfigClockSource+0x1ee>
 8008b30:	2b30      	cmp	r3, #48	@ 0x30
 8008b32:	d86b      	bhi.n	8008c0c <HAL_TIM_ConfigClockSource+0x200>
 8008b34:	2b20      	cmp	r3, #32
 8008b36:	d060      	beq.n	8008bfa <HAL_TIM_ConfigClockSource+0x1ee>
 8008b38:	2b20      	cmp	r3, #32
 8008b3a:	d867      	bhi.n	8008c0c <HAL_TIM_ConfigClockSource+0x200>
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d05c      	beq.n	8008bfa <HAL_TIM_ConfigClockSource+0x1ee>
 8008b40:	2b10      	cmp	r3, #16
 8008b42:	d05a      	beq.n	8008bfa <HAL_TIM_ConfigClockSource+0x1ee>
 8008b44:	e062      	b.n	8008c0c <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008b56:	f000 fd45 	bl	80095e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008b68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68ba      	ldr	r2, [r7, #8]
 8008b70:	609a      	str	r2, [r3, #8]
      break;
 8008b72:	e04f      	b.n	8008c14 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008b84:	f000 fd2e 	bl	80095e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	689a      	ldr	r2, [r3, #8]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008b96:	609a      	str	r2, [r3, #8]
      break;
 8008b98:	e03c      	b.n	8008c14 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	f000 fca0 	bl	80094ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2150      	movs	r1, #80	@ 0x50
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f000 fcf9 	bl	80095aa <TIM_ITRx_SetConfig>
      break;
 8008bb8:	e02c      	b.n	8008c14 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	f000 fcbf 	bl	800954a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2160      	movs	r1, #96	@ 0x60
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f000 fce9 	bl	80095aa <TIM_ITRx_SetConfig>
      break;
 8008bd8:	e01c      	b.n	8008c14 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008be6:	461a      	mov	r2, r3
 8008be8:	f000 fc80 	bl	80094ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2140      	movs	r1, #64	@ 0x40
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f000 fcd9 	bl	80095aa <TIM_ITRx_SetConfig>
      break;
 8008bf8:	e00c      	b.n	8008c14 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4619      	mov	r1, r3
 8008c04:	4610      	mov	r0, r2
 8008c06:	f000 fcd0 	bl	80095aa <TIM_ITRx_SetConfig>
      break;
 8008c0a:	e003      	b.n	8008c14 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8008c10:	e000      	b.n	8008c14 <HAL_TIM_ConfigClockSource+0x208>
      break;
 8008c12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2201      	movs	r2, #1
 8008c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	00100070 	.word	0x00100070
 8008c34:	00100060 	.word	0x00100060
 8008c38:	00100050 	.word	0x00100050
 8008c3c:	00100040 	.word	0x00100040
 8008c40:	00100030 	.word	0x00100030
 8008c44:	00100020 	.word	0x00100020

08008c48 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008c50:	bf00      	nop
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c64:	bf00      	nop
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c78:	bf00      	nop
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr

08008c84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c8c:	bf00      	nop
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b085      	sub	sp, #20
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	4a62      	ldr	r2, [pc, #392]	@ (8008e48 <TIM_Base_SetConfig+0x19c>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d02b      	beq.n	8008d1c <TIM_Base_SetConfig+0x70>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	4a61      	ldr	r2, [pc, #388]	@ (8008e4c <TIM_Base_SetConfig+0x1a0>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d027      	beq.n	8008d1c <TIM_Base_SetConfig+0x70>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cd2:	d023      	beq.n	8008d1c <TIM_Base_SetConfig+0x70>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008cda:	d01f      	beq.n	8008d1c <TIM_Base_SetConfig+0x70>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a5c      	ldr	r2, [pc, #368]	@ (8008e50 <TIM_Base_SetConfig+0x1a4>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d01b      	beq.n	8008d1c <TIM_Base_SetConfig+0x70>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a5b      	ldr	r2, [pc, #364]	@ (8008e54 <TIM_Base_SetConfig+0x1a8>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d017      	beq.n	8008d1c <TIM_Base_SetConfig+0x70>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a5a      	ldr	r2, [pc, #360]	@ (8008e58 <TIM_Base_SetConfig+0x1ac>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d013      	beq.n	8008d1c <TIM_Base_SetConfig+0x70>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a59      	ldr	r2, [pc, #356]	@ (8008e5c <TIM_Base_SetConfig+0x1b0>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d00f      	beq.n	8008d1c <TIM_Base_SetConfig+0x70>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a58      	ldr	r2, [pc, #352]	@ (8008e60 <TIM_Base_SetConfig+0x1b4>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d00b      	beq.n	8008d1c <TIM_Base_SetConfig+0x70>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a57      	ldr	r2, [pc, #348]	@ (8008e64 <TIM_Base_SetConfig+0x1b8>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d007      	beq.n	8008d1c <TIM_Base_SetConfig+0x70>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a56      	ldr	r2, [pc, #344]	@ (8008e68 <TIM_Base_SetConfig+0x1bc>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d003      	beq.n	8008d1c <TIM_Base_SetConfig+0x70>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a55      	ldr	r2, [pc, #340]	@ (8008e6c <TIM_Base_SetConfig+0x1c0>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d108      	bne.n	8008d2e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	68fa      	ldr	r2, [r7, #12]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a45      	ldr	r2, [pc, #276]	@ (8008e48 <TIM_Base_SetConfig+0x19c>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d03b      	beq.n	8008dae <TIM_Base_SetConfig+0x102>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a44      	ldr	r2, [pc, #272]	@ (8008e4c <TIM_Base_SetConfig+0x1a0>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d037      	beq.n	8008dae <TIM_Base_SetConfig+0x102>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d44:	d033      	beq.n	8008dae <TIM_Base_SetConfig+0x102>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d4c:	d02f      	beq.n	8008dae <TIM_Base_SetConfig+0x102>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4a3f      	ldr	r2, [pc, #252]	@ (8008e50 <TIM_Base_SetConfig+0x1a4>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d02b      	beq.n	8008dae <TIM_Base_SetConfig+0x102>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a3e      	ldr	r2, [pc, #248]	@ (8008e54 <TIM_Base_SetConfig+0x1a8>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d027      	beq.n	8008dae <TIM_Base_SetConfig+0x102>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4a3d      	ldr	r2, [pc, #244]	@ (8008e58 <TIM_Base_SetConfig+0x1ac>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d023      	beq.n	8008dae <TIM_Base_SetConfig+0x102>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4a3c      	ldr	r2, [pc, #240]	@ (8008e5c <TIM_Base_SetConfig+0x1b0>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d01f      	beq.n	8008dae <TIM_Base_SetConfig+0x102>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4a3b      	ldr	r2, [pc, #236]	@ (8008e60 <TIM_Base_SetConfig+0x1b4>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d01b      	beq.n	8008dae <TIM_Base_SetConfig+0x102>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a3a      	ldr	r2, [pc, #232]	@ (8008e64 <TIM_Base_SetConfig+0x1b8>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d017      	beq.n	8008dae <TIM_Base_SetConfig+0x102>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a39      	ldr	r2, [pc, #228]	@ (8008e68 <TIM_Base_SetConfig+0x1bc>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d013      	beq.n	8008dae <TIM_Base_SetConfig+0x102>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4a38      	ldr	r2, [pc, #224]	@ (8008e6c <TIM_Base_SetConfig+0x1c0>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d00f      	beq.n	8008dae <TIM_Base_SetConfig+0x102>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4a37      	ldr	r2, [pc, #220]	@ (8008e70 <TIM_Base_SetConfig+0x1c4>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d00b      	beq.n	8008dae <TIM_Base_SetConfig+0x102>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4a36      	ldr	r2, [pc, #216]	@ (8008e74 <TIM_Base_SetConfig+0x1c8>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d007      	beq.n	8008dae <TIM_Base_SetConfig+0x102>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4a35      	ldr	r2, [pc, #212]	@ (8008e78 <TIM_Base_SetConfig+0x1cc>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d003      	beq.n	8008dae <TIM_Base_SetConfig+0x102>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4a34      	ldr	r2, [pc, #208]	@ (8008e7c <TIM_Base_SetConfig+0x1d0>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d108      	bne.n	8008dc0 <TIM_Base_SetConfig+0x114>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008db4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	68db      	ldr	r3, [r3, #12]
 8008dba:	68fa      	ldr	r2, [r7, #12]
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	695b      	ldr	r3, [r3, #20]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	68fa      	ldr	r2, [r7, #12]
 8008dd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	689a      	ldr	r2, [r3, #8]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a18      	ldr	r2, [pc, #96]	@ (8008e48 <TIM_Base_SetConfig+0x19c>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d013      	beq.n	8008e14 <TIM_Base_SetConfig+0x168>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a17      	ldr	r2, [pc, #92]	@ (8008e4c <TIM_Base_SetConfig+0x1a0>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d00f      	beq.n	8008e14 <TIM_Base_SetConfig+0x168>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a1c      	ldr	r2, [pc, #112]	@ (8008e68 <TIM_Base_SetConfig+0x1bc>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d00b      	beq.n	8008e14 <TIM_Base_SetConfig+0x168>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a1b      	ldr	r2, [pc, #108]	@ (8008e6c <TIM_Base_SetConfig+0x1c0>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d007      	beq.n	8008e14 <TIM_Base_SetConfig+0x168>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4a1c      	ldr	r2, [pc, #112]	@ (8008e78 <TIM_Base_SetConfig+0x1cc>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d003      	beq.n	8008e14 <TIM_Base_SetConfig+0x168>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4a1b      	ldr	r2, [pc, #108]	@ (8008e7c <TIM_Base_SetConfig+0x1d0>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d103      	bne.n	8008e1c <TIM_Base_SetConfig+0x170>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	691a      	ldr	r2, [r3, #16]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	f003 0301 	and.w	r3, r3, #1
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d105      	bne.n	8008e3a <TIM_Base_SetConfig+0x18e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	f023 0201 	bic.w	r2, r3, #1
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	611a      	str	r2, [r3, #16]
  }
}
 8008e3a:	bf00      	nop
 8008e3c:	3714      	adds	r7, #20
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop
 8008e48:	40012c00 	.word	0x40012c00
 8008e4c:	50012c00 	.word	0x50012c00
 8008e50:	40000400 	.word	0x40000400
 8008e54:	50000400 	.word	0x50000400
 8008e58:	40000800 	.word	0x40000800
 8008e5c:	50000800 	.word	0x50000800
 8008e60:	40000c00 	.word	0x40000c00
 8008e64:	50000c00 	.word	0x50000c00
 8008e68:	40013400 	.word	0x40013400
 8008e6c:	50013400 	.word	0x50013400
 8008e70:	40001800 	.word	0x40001800
 8008e74:	50001800 	.word	0x50001800
 8008e78:	40014000 	.word	0x40014000
 8008e7c:	50014000 	.word	0x50014000

08008e80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b087      	sub	sp, #28
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6a1b      	ldr	r3, [r3, #32]
 8008e8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6a1b      	ldr	r3, [r3, #32]
 8008e94:	f023 0201 	bic.w	r2, r3, #1
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	699b      	ldr	r3, [r3, #24]
 8008ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f023 0303 	bic.w	r3, r3, #3
 8008eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	f023 0302 	bic.w	r3, r3, #2
 8008ecc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	697a      	ldr	r2, [r7, #20]
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	4a30      	ldr	r2, [pc, #192]	@ (8008f9c <TIM_OC1_SetConfig+0x11c>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d013      	beq.n	8008f08 <TIM_OC1_SetConfig+0x88>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4a2f      	ldr	r2, [pc, #188]	@ (8008fa0 <TIM_OC1_SetConfig+0x120>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d00f      	beq.n	8008f08 <TIM_OC1_SetConfig+0x88>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a2e      	ldr	r2, [pc, #184]	@ (8008fa4 <TIM_OC1_SetConfig+0x124>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d00b      	beq.n	8008f08 <TIM_OC1_SetConfig+0x88>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4a2d      	ldr	r2, [pc, #180]	@ (8008fa8 <TIM_OC1_SetConfig+0x128>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d007      	beq.n	8008f08 <TIM_OC1_SetConfig+0x88>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4a2c      	ldr	r2, [pc, #176]	@ (8008fac <TIM_OC1_SetConfig+0x12c>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d003      	beq.n	8008f08 <TIM_OC1_SetConfig+0x88>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a2b      	ldr	r2, [pc, #172]	@ (8008fb0 <TIM_OC1_SetConfig+0x130>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d10c      	bne.n	8008f22 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	f023 0308 	bic.w	r3, r3, #8
 8008f0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	697a      	ldr	r2, [r7, #20]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	f023 0304 	bic.w	r3, r3, #4
 8008f20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	4a1d      	ldr	r2, [pc, #116]	@ (8008f9c <TIM_OC1_SetConfig+0x11c>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d013      	beq.n	8008f52 <TIM_OC1_SetConfig+0xd2>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4a1c      	ldr	r2, [pc, #112]	@ (8008fa0 <TIM_OC1_SetConfig+0x120>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d00f      	beq.n	8008f52 <TIM_OC1_SetConfig+0xd2>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4a1b      	ldr	r2, [pc, #108]	@ (8008fa4 <TIM_OC1_SetConfig+0x124>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d00b      	beq.n	8008f52 <TIM_OC1_SetConfig+0xd2>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4a1a      	ldr	r2, [pc, #104]	@ (8008fa8 <TIM_OC1_SetConfig+0x128>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d007      	beq.n	8008f52 <TIM_OC1_SetConfig+0xd2>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4a19      	ldr	r2, [pc, #100]	@ (8008fac <TIM_OC1_SetConfig+0x12c>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d003      	beq.n	8008f52 <TIM_OC1_SetConfig+0xd2>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4a18      	ldr	r2, [pc, #96]	@ (8008fb0 <TIM_OC1_SetConfig+0x130>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d111      	bne.n	8008f76 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008f60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	695b      	ldr	r3, [r3, #20]
 8008f66:	693a      	ldr	r2, [r7, #16]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	699b      	ldr	r3, [r3, #24]
 8008f70:	693a      	ldr	r2, [r7, #16]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	693a      	ldr	r2, [r7, #16]
 8008f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	68fa      	ldr	r2, [r7, #12]
 8008f80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	685a      	ldr	r2, [r3, #4]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	697a      	ldr	r2, [r7, #20]
 8008f8e:	621a      	str	r2, [r3, #32]
}
 8008f90:	bf00      	nop
 8008f92:	371c      	adds	r7, #28
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr
 8008f9c:	40012c00 	.word	0x40012c00
 8008fa0:	50012c00 	.word	0x50012c00
 8008fa4:	40013400 	.word	0x40013400
 8008fa8:	50013400 	.word	0x50013400
 8008fac:	40014000 	.word	0x40014000
 8008fb0:	50014000 	.word	0x50014000

08008fb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b087      	sub	sp, #28
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a1b      	ldr	r3, [r3, #32]
 8008fc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6a1b      	ldr	r3, [r3, #32]
 8008fc8:	f023 0210 	bic.w	r2, r3, #16
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	699b      	ldr	r3, [r3, #24]
 8008fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008fe2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	021b      	lsls	r3, r3, #8
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	f023 0320 	bic.w	r3, r3, #32
 8009002:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	011b      	lsls	r3, r3, #4
 800900a:	697a      	ldr	r2, [r7, #20]
 800900c:	4313      	orrs	r3, r2
 800900e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	4a2e      	ldr	r2, [pc, #184]	@ (80090cc <TIM_OC2_SetConfig+0x118>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d00b      	beq.n	8009030 <TIM_OC2_SetConfig+0x7c>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	4a2d      	ldr	r2, [pc, #180]	@ (80090d0 <TIM_OC2_SetConfig+0x11c>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d007      	beq.n	8009030 <TIM_OC2_SetConfig+0x7c>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	4a2c      	ldr	r2, [pc, #176]	@ (80090d4 <TIM_OC2_SetConfig+0x120>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d003      	beq.n	8009030 <TIM_OC2_SetConfig+0x7c>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	4a2b      	ldr	r2, [pc, #172]	@ (80090d8 <TIM_OC2_SetConfig+0x124>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d10d      	bne.n	800904c <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009036:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	011b      	lsls	r3, r3, #4
 800903e:	697a      	ldr	r2, [r7, #20]
 8009040:	4313      	orrs	r3, r2
 8009042:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800904a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4a1f      	ldr	r2, [pc, #124]	@ (80090cc <TIM_OC2_SetConfig+0x118>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d013      	beq.n	800907c <TIM_OC2_SetConfig+0xc8>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4a1e      	ldr	r2, [pc, #120]	@ (80090d0 <TIM_OC2_SetConfig+0x11c>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d00f      	beq.n	800907c <TIM_OC2_SetConfig+0xc8>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4a1d      	ldr	r2, [pc, #116]	@ (80090d4 <TIM_OC2_SetConfig+0x120>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d00b      	beq.n	800907c <TIM_OC2_SetConfig+0xc8>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4a1c      	ldr	r2, [pc, #112]	@ (80090d8 <TIM_OC2_SetConfig+0x124>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d007      	beq.n	800907c <TIM_OC2_SetConfig+0xc8>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4a1b      	ldr	r2, [pc, #108]	@ (80090dc <TIM_OC2_SetConfig+0x128>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d003      	beq.n	800907c <TIM_OC2_SetConfig+0xc8>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4a1a      	ldr	r2, [pc, #104]	@ (80090e0 <TIM_OC2_SetConfig+0x12c>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d113      	bne.n	80090a4 <TIM_OC2_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009082:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800908a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	695b      	ldr	r3, [r3, #20]
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	693a      	ldr	r2, [r7, #16]
 8009094:	4313      	orrs	r3, r2
 8009096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	699b      	ldr	r3, [r3, #24]
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	693a      	ldr	r2, [r7, #16]
 80090a0:	4313      	orrs	r3, r2
 80090a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	693a      	ldr	r2, [r7, #16]
 80090a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	68fa      	ldr	r2, [r7, #12]
 80090ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	685a      	ldr	r2, [r3, #4]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	697a      	ldr	r2, [r7, #20]
 80090bc:	621a      	str	r2, [r3, #32]
}
 80090be:	bf00      	nop
 80090c0:	371c      	adds	r7, #28
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr
 80090ca:	bf00      	nop
 80090cc:	40012c00 	.word	0x40012c00
 80090d0:	50012c00 	.word	0x50012c00
 80090d4:	40013400 	.word	0x40013400
 80090d8:	50013400 	.word	0x50013400
 80090dc:	40014000 	.word	0x40014000
 80090e0:	50014000 	.word	0x50014000

080090e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b087      	sub	sp, #28
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6a1b      	ldr	r3, [r3, #32]
 80090f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6a1b      	ldr	r3, [r3, #32]
 80090f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	69db      	ldr	r3, [r3, #28]
 800910a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f023 0303 	bic.w	r3, r3, #3
 800911e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68fa      	ldr	r2, [r7, #12]
 8009126:	4313      	orrs	r3, r2
 8009128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009130:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	021b      	lsls	r3, r3, #8
 8009138:	697a      	ldr	r2, [r7, #20]
 800913a:	4313      	orrs	r3, r2
 800913c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	4a2d      	ldr	r2, [pc, #180]	@ (80091f8 <TIM_OC3_SetConfig+0x114>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d00b      	beq.n	800915e <TIM_OC3_SetConfig+0x7a>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4a2c      	ldr	r2, [pc, #176]	@ (80091fc <TIM_OC3_SetConfig+0x118>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d007      	beq.n	800915e <TIM_OC3_SetConfig+0x7a>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4a2b      	ldr	r2, [pc, #172]	@ (8009200 <TIM_OC3_SetConfig+0x11c>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d003      	beq.n	800915e <TIM_OC3_SetConfig+0x7a>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4a2a      	ldr	r2, [pc, #168]	@ (8009204 <TIM_OC3_SetConfig+0x120>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d10d      	bne.n	800917a <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009164:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	021b      	lsls	r3, r3, #8
 800916c:	697a      	ldr	r2, [r7, #20]
 800916e:	4313      	orrs	r3, r2
 8009170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009178:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4a1e      	ldr	r2, [pc, #120]	@ (80091f8 <TIM_OC3_SetConfig+0x114>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d013      	beq.n	80091aa <TIM_OC3_SetConfig+0xc6>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4a1d      	ldr	r2, [pc, #116]	@ (80091fc <TIM_OC3_SetConfig+0x118>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d00f      	beq.n	80091aa <TIM_OC3_SetConfig+0xc6>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4a1c      	ldr	r2, [pc, #112]	@ (8009200 <TIM_OC3_SetConfig+0x11c>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d00b      	beq.n	80091aa <TIM_OC3_SetConfig+0xc6>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	4a1b      	ldr	r2, [pc, #108]	@ (8009204 <TIM_OC3_SetConfig+0x120>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d007      	beq.n	80091aa <TIM_OC3_SetConfig+0xc6>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	4a1a      	ldr	r2, [pc, #104]	@ (8009208 <TIM_OC3_SetConfig+0x124>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d003      	beq.n	80091aa <TIM_OC3_SetConfig+0xc6>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4a19      	ldr	r2, [pc, #100]	@ (800920c <TIM_OC3_SetConfig+0x128>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d113      	bne.n	80091d2 <TIM_OC3_SetConfig+0xee>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80091b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80091b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	695b      	ldr	r3, [r3, #20]
 80091be:	011b      	lsls	r3, r3, #4
 80091c0:	693a      	ldr	r2, [r7, #16]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	699b      	ldr	r3, [r3, #24]
 80091ca:	011b      	lsls	r3, r3, #4
 80091cc:	693a      	ldr	r2, [r7, #16]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	693a      	ldr	r2, [r7, #16]
 80091d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	68fa      	ldr	r2, [r7, #12]
 80091dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	685a      	ldr	r2, [r3, #4]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	697a      	ldr	r2, [r7, #20]
 80091ea:	621a      	str	r2, [r3, #32]
}
 80091ec:	bf00      	nop
 80091ee:	371c      	adds	r7, #28
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr
 80091f8:	40012c00 	.word	0x40012c00
 80091fc:	50012c00 	.word	0x50012c00
 8009200:	40013400 	.word	0x40013400
 8009204:	50013400 	.word	0x50013400
 8009208:	40014000 	.word	0x40014000
 800920c:	50014000 	.word	0x50014000

08009210 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009210:	b480      	push	{r7}
 8009212:	b087      	sub	sp, #28
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6a1b      	ldr	r3, [r3, #32]
 800921e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6a1b      	ldr	r3, [r3, #32]
 8009224:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	69db      	ldr	r3, [r3, #28]
 8009236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800923e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800924a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	021b      	lsls	r3, r3, #8
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	4313      	orrs	r3, r2
 8009256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800925e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	031b      	lsls	r3, r3, #12
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	4313      	orrs	r3, r2
 800926a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4a2e      	ldr	r2, [pc, #184]	@ (8009328 <TIM_OC4_SetConfig+0x118>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d00b      	beq.n	800928c <TIM_OC4_SetConfig+0x7c>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a2d      	ldr	r2, [pc, #180]	@ (800932c <TIM_OC4_SetConfig+0x11c>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d007      	beq.n	800928c <TIM_OC4_SetConfig+0x7c>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4a2c      	ldr	r2, [pc, #176]	@ (8009330 <TIM_OC4_SetConfig+0x120>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d003      	beq.n	800928c <TIM_OC4_SetConfig+0x7c>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4a2b      	ldr	r2, [pc, #172]	@ (8009334 <TIM_OC4_SetConfig+0x124>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d10d      	bne.n	80092a8 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	031b      	lsls	r3, r3, #12
 800929a:	697a      	ldr	r2, [r7, #20]
 800929c:	4313      	orrs	r3, r2
 800929e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80092a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a1f      	ldr	r2, [pc, #124]	@ (8009328 <TIM_OC4_SetConfig+0x118>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d013      	beq.n	80092d8 <TIM_OC4_SetConfig+0xc8>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a1e      	ldr	r2, [pc, #120]	@ (800932c <TIM_OC4_SetConfig+0x11c>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d00f      	beq.n	80092d8 <TIM_OC4_SetConfig+0xc8>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4a1d      	ldr	r2, [pc, #116]	@ (8009330 <TIM_OC4_SetConfig+0x120>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d00b      	beq.n	80092d8 <TIM_OC4_SetConfig+0xc8>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a1c      	ldr	r2, [pc, #112]	@ (8009334 <TIM_OC4_SetConfig+0x124>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d007      	beq.n	80092d8 <TIM_OC4_SetConfig+0xc8>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	4a1b      	ldr	r2, [pc, #108]	@ (8009338 <TIM_OC4_SetConfig+0x128>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d003      	beq.n	80092d8 <TIM_OC4_SetConfig+0xc8>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	4a1a      	ldr	r2, [pc, #104]	@ (800933c <TIM_OC4_SetConfig+0x12c>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d113      	bne.n	8009300 <TIM_OC4_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80092de:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80092e6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	695b      	ldr	r3, [r3, #20]
 80092ec:	019b      	lsls	r3, r3, #6
 80092ee:	693a      	ldr	r2, [r7, #16]
 80092f0:	4313      	orrs	r3, r2
 80092f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	699b      	ldr	r3, [r3, #24]
 80092f8:	019b      	lsls	r3, r3, #6
 80092fa:	693a      	ldr	r2, [r7, #16]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	693a      	ldr	r2, [r7, #16]
 8009304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	68fa      	ldr	r2, [r7, #12]
 800930a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	685a      	ldr	r2, [r3, #4]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	697a      	ldr	r2, [r7, #20]
 8009318:	621a      	str	r2, [r3, #32]
}
 800931a:	bf00      	nop
 800931c:	371c      	adds	r7, #28
 800931e:	46bd      	mov	sp, r7
 8009320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009324:	4770      	bx	lr
 8009326:	bf00      	nop
 8009328:	40012c00 	.word	0x40012c00
 800932c:	50012c00 	.word	0x50012c00
 8009330:	40013400 	.word	0x40013400
 8009334:	50013400 	.word	0x50013400
 8009338:	40014000 	.word	0x40014000
 800933c:	50014000 	.word	0x50014000

08009340 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009340:	b480      	push	{r7}
 8009342:	b087      	sub	sp, #28
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6a1b      	ldr	r3, [r3, #32]
 800934e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6a1b      	ldr	r3, [r3, #32]
 8009354:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800936e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	4313      	orrs	r3, r2
 800937c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009384:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	041b      	lsls	r3, r3, #16
 800938c:	693a      	ldr	r2, [r7, #16]
 800938e:	4313      	orrs	r3, r2
 8009390:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4a19      	ldr	r2, [pc, #100]	@ (80093fc <TIM_OC5_SetConfig+0xbc>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d013      	beq.n	80093c2 <TIM_OC5_SetConfig+0x82>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4a18      	ldr	r2, [pc, #96]	@ (8009400 <TIM_OC5_SetConfig+0xc0>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d00f      	beq.n	80093c2 <TIM_OC5_SetConfig+0x82>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a17      	ldr	r2, [pc, #92]	@ (8009404 <TIM_OC5_SetConfig+0xc4>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d00b      	beq.n	80093c2 <TIM_OC5_SetConfig+0x82>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a16      	ldr	r2, [pc, #88]	@ (8009408 <TIM_OC5_SetConfig+0xc8>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d007      	beq.n	80093c2 <TIM_OC5_SetConfig+0x82>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a15      	ldr	r2, [pc, #84]	@ (800940c <TIM_OC5_SetConfig+0xcc>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d003      	beq.n	80093c2 <TIM_OC5_SetConfig+0x82>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4a14      	ldr	r2, [pc, #80]	@ (8009410 <TIM_OC5_SetConfig+0xd0>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d109      	bne.n	80093d6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	695b      	ldr	r3, [r3, #20]
 80093ce:	021b      	lsls	r3, r3, #8
 80093d0:	697a      	ldr	r2, [r7, #20]
 80093d2:	4313      	orrs	r3, r2
 80093d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	697a      	ldr	r2, [r7, #20]
 80093da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	68fa      	ldr	r2, [r7, #12]
 80093e0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	685a      	ldr	r2, [r3, #4]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	693a      	ldr	r2, [r7, #16]
 80093ee:	621a      	str	r2, [r3, #32]
}
 80093f0:	bf00      	nop
 80093f2:	371c      	adds	r7, #28
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr
 80093fc:	40012c00 	.word	0x40012c00
 8009400:	50012c00 	.word	0x50012c00
 8009404:	40013400 	.word	0x40013400
 8009408:	50013400 	.word	0x50013400
 800940c:	40014000 	.word	0x40014000
 8009410:	50014000 	.word	0x50014000

08009414 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009414:	b480      	push	{r7}
 8009416:	b087      	sub	sp, #28
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6a1b      	ldr	r3, [r3, #32]
 8009422:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6a1b      	ldr	r3, [r3, #32]
 8009428:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800943a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009442:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	021b      	lsls	r3, r3, #8
 800944e:	68fa      	ldr	r2, [r7, #12]
 8009450:	4313      	orrs	r3, r2
 8009452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800945a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	051b      	lsls	r3, r3, #20
 8009462:	693a      	ldr	r2, [r7, #16]
 8009464:	4313      	orrs	r3, r2
 8009466:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4a1a      	ldr	r2, [pc, #104]	@ (80094d4 <TIM_OC6_SetConfig+0xc0>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d013      	beq.n	8009498 <TIM_OC6_SetConfig+0x84>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a19      	ldr	r2, [pc, #100]	@ (80094d8 <TIM_OC6_SetConfig+0xc4>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d00f      	beq.n	8009498 <TIM_OC6_SetConfig+0x84>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a18      	ldr	r2, [pc, #96]	@ (80094dc <TIM_OC6_SetConfig+0xc8>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d00b      	beq.n	8009498 <TIM_OC6_SetConfig+0x84>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4a17      	ldr	r2, [pc, #92]	@ (80094e0 <TIM_OC6_SetConfig+0xcc>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d007      	beq.n	8009498 <TIM_OC6_SetConfig+0x84>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	4a16      	ldr	r2, [pc, #88]	@ (80094e4 <TIM_OC6_SetConfig+0xd0>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d003      	beq.n	8009498 <TIM_OC6_SetConfig+0x84>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4a15      	ldr	r2, [pc, #84]	@ (80094e8 <TIM_OC6_SetConfig+0xd4>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d109      	bne.n	80094ac <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800949e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	695b      	ldr	r3, [r3, #20]
 80094a4:	029b      	lsls	r3, r3, #10
 80094a6:	697a      	ldr	r2, [r7, #20]
 80094a8:	4313      	orrs	r3, r2
 80094aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	697a      	ldr	r2, [r7, #20]
 80094b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	68fa      	ldr	r2, [r7, #12]
 80094b6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	685a      	ldr	r2, [r3, #4]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	693a      	ldr	r2, [r7, #16]
 80094c4:	621a      	str	r2, [r3, #32]
}
 80094c6:	bf00      	nop
 80094c8:	371c      	adds	r7, #28
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	40012c00 	.word	0x40012c00
 80094d8:	50012c00 	.word	0x50012c00
 80094dc:	40013400 	.word	0x40013400
 80094e0:	50013400 	.word	0x50013400
 80094e4:	40014000 	.word	0x40014000
 80094e8:	50014000 	.word	0x50014000

080094ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b087      	sub	sp, #28
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6a1b      	ldr	r3, [r3, #32]
 80094fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6a1b      	ldr	r3, [r3, #32]
 8009502:	f023 0201 	bic.w	r2, r3, #1
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	699b      	ldr	r3, [r3, #24]
 800950e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	011b      	lsls	r3, r3, #4
 800951c:	693a      	ldr	r2, [r7, #16]
 800951e:	4313      	orrs	r3, r2
 8009520:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	f023 030a 	bic.w	r3, r3, #10
 8009528:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800952a:	697a      	ldr	r2, [r7, #20]
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	4313      	orrs	r3, r2
 8009530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	693a      	ldr	r2, [r7, #16]
 8009536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	697a      	ldr	r2, [r7, #20]
 800953c:	621a      	str	r2, [r3, #32]
}
 800953e:	bf00      	nop
 8009540:	371c      	adds	r7, #28
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr

0800954a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800954a:	b480      	push	{r7}
 800954c:	b087      	sub	sp, #28
 800954e:	af00      	add	r7, sp, #0
 8009550:	60f8      	str	r0, [r7, #12]
 8009552:	60b9      	str	r1, [r7, #8]
 8009554:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6a1b      	ldr	r3, [r3, #32]
 800955a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	6a1b      	ldr	r3, [r3, #32]
 8009560:	f023 0210 	bic.w	r2, r3, #16
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	699b      	ldr	r3, [r3, #24]
 800956c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009574:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	031b      	lsls	r3, r3, #12
 800957a:	693a      	ldr	r2, [r7, #16]
 800957c:	4313      	orrs	r3, r2
 800957e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009586:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	011b      	lsls	r3, r3, #4
 800958c:	697a      	ldr	r2, [r7, #20]
 800958e:	4313      	orrs	r3, r2
 8009590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	693a      	ldr	r2, [r7, #16]
 8009596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	697a      	ldr	r2, [r7, #20]
 800959c:	621a      	str	r2, [r3, #32]
}
 800959e:	bf00      	nop
 80095a0:	371c      	adds	r7, #28
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr

080095aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80095aa:	b480      	push	{r7}
 80095ac:	b085      	sub	sp, #20
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
 80095b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80095c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80095c6:	683a      	ldr	r2, [r7, #0]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	4313      	orrs	r3, r2
 80095cc:	f043 0307 	orr.w	r3, r3, #7
 80095d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	68fa      	ldr	r2, [r7, #12]
 80095d6:	609a      	str	r2, [r3, #8]
}
 80095d8:	bf00      	nop
 80095da:	3714      	adds	r7, #20
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b087      	sub	sp, #28
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	60b9      	str	r1, [r7, #8]
 80095ee:	607a      	str	r2, [r7, #4]
 80095f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80095fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	021a      	lsls	r2, r3, #8
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	431a      	orrs	r2, r3
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	4313      	orrs	r3, r2
 800960c:	697a      	ldr	r2, [r7, #20]
 800960e:	4313      	orrs	r3, r2
 8009610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	697a      	ldr	r2, [r7, #20]
 8009616:	609a      	str	r2, [r3, #8]
}
 8009618:	bf00      	nop
 800961a:	371c      	adds	r7, #28
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009624:	b480      	push	{r7}
 8009626:	b087      	sub	sp, #28
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	f003 031f 	and.w	r3, r3, #31
 8009636:	2201      	movs	r2, #1
 8009638:	fa02 f303 	lsl.w	r3, r2, r3
 800963c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	6a1a      	ldr	r2, [r3, #32]
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	43db      	mvns	r3, r3
 8009646:	401a      	ands	r2, r3
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6a1a      	ldr	r2, [r3, #32]
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	f003 031f 	and.w	r3, r3, #31
 8009656:	6879      	ldr	r1, [r7, #4]
 8009658:	fa01 f303 	lsl.w	r3, r1, r3
 800965c:	431a      	orrs	r2, r3
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	621a      	str	r2, [r3, #32]
}
 8009662:	bf00      	nop
 8009664:	371c      	adds	r7, #28
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr
	...

08009670 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009670:	b480      	push	{r7}
 8009672:	b085      	sub	sp, #20
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009680:	2b01      	cmp	r3, #1
 8009682:	d101      	bne.n	8009688 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009684:	2302      	movs	r3, #2
 8009686:	e0a1      	b.n	80097cc <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2201      	movs	r2, #1
 800968c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2202      	movs	r2, #2
 8009694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a4a      	ldr	r2, [pc, #296]	@ (80097d8 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d00e      	beq.n	80096d0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a49      	ldr	r2, [pc, #292]	@ (80097dc <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d009      	beq.n	80096d0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4a47      	ldr	r2, [pc, #284]	@ (80097e0 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d004      	beq.n	80096d0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a46      	ldr	r2, [pc, #280]	@ (80097e4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d108      	bne.n	80096e2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80096d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	68fa      	ldr	r2, [r7, #12]
 80096de:	4313      	orrs	r3, r2
 80096e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80096e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	68fa      	ldr	r2, [r7, #12]
 80096f4:	4313      	orrs	r3, r2
 80096f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	68fa      	ldr	r2, [r7, #12]
 80096fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a34      	ldr	r2, [pc, #208]	@ (80097d8 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d04a      	beq.n	80097a0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a33      	ldr	r2, [pc, #204]	@ (80097dc <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d045      	beq.n	80097a0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800971c:	d040      	beq.n	80097a0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009726:	d03b      	beq.n	80097a0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a2e      	ldr	r2, [pc, #184]	@ (80097e8 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d036      	beq.n	80097a0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a2d      	ldr	r2, [pc, #180]	@ (80097ec <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d031      	beq.n	80097a0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a2b      	ldr	r2, [pc, #172]	@ (80097f0 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d02c      	beq.n	80097a0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4a2a      	ldr	r2, [pc, #168]	@ (80097f4 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d027      	beq.n	80097a0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a28      	ldr	r2, [pc, #160]	@ (80097f8 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d022      	beq.n	80097a0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a27      	ldr	r2, [pc, #156]	@ (80097fc <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d01d      	beq.n	80097a0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4a1d      	ldr	r2, [pc, #116]	@ (80097e0 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d018      	beq.n	80097a0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4a1c      	ldr	r2, [pc, #112]	@ (80097e4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d013      	beq.n	80097a0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a20      	ldr	r2, [pc, #128]	@ (8009800 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d00e      	beq.n	80097a0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4a1f      	ldr	r2, [pc, #124]	@ (8009804 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d009      	beq.n	80097a0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a1d      	ldr	r2, [pc, #116]	@ (8009808 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d004      	beq.n	80097a0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a1c      	ldr	r2, [pc, #112]	@ (800980c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d10c      	bne.n	80097ba <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80097a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	689b      	ldr	r3, [r3, #8]
 80097ac:	68ba      	ldr	r2, [r7, #8]
 80097ae:	4313      	orrs	r3, r2
 80097b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	68ba      	ldr	r2, [r7, #8]
 80097b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2201      	movs	r2, #1
 80097be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2200      	movs	r2, #0
 80097c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80097ca:	2300      	movs	r3, #0
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3714      	adds	r7, #20
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr
 80097d8:	40012c00 	.word	0x40012c00
 80097dc:	50012c00 	.word	0x50012c00
 80097e0:	40013400 	.word	0x40013400
 80097e4:	50013400 	.word	0x50013400
 80097e8:	40000400 	.word	0x40000400
 80097ec:	50000400 	.word	0x50000400
 80097f0:	40000800 	.word	0x40000800
 80097f4:	50000800 	.word	0x50000800
 80097f8:	40000c00 	.word	0x40000c00
 80097fc:	50000c00 	.word	0x50000c00
 8009800:	40001800 	.word	0x40001800
 8009804:	50001800 	.word	0x50001800
 8009808:	40014000 	.word	0x40014000
 800980c:	50014000 	.word	0x50014000

08009810 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009810:	b480      	push	{r7}
 8009812:	b085      	sub	sp, #20
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800981a:	2300      	movs	r3, #0
 800981c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009824:	2b01      	cmp	r3, #1
 8009826:	d101      	bne.n	800982c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009828:	2302      	movs	r3, #2
 800982a:	e07d      	b.n	8009928 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	4313      	orrs	r3, r2
 8009840:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	4313      	orrs	r3, r2
 800984e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	4313      	orrs	r3, r2
 800985c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4313      	orrs	r3, r2
 800986a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	691b      	ldr	r3, [r3, #16]
 8009876:	4313      	orrs	r3, r2
 8009878:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	695b      	ldr	r3, [r3, #20]
 8009884:	4313      	orrs	r3, r2
 8009886:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009892:	4313      	orrs	r3, r2
 8009894:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	699b      	ldr	r3, [r3, #24]
 80098a0:	041b      	lsls	r3, r3, #16
 80098a2:	4313      	orrs	r3, r2
 80098a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	69db      	ldr	r3, [r3, #28]
 80098b0:	4313      	orrs	r3, r2
 80098b2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a1e      	ldr	r2, [pc, #120]	@ (8009934 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d00e      	beq.n	80098dc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a1d      	ldr	r2, [pc, #116]	@ (8009938 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d009      	beq.n	80098dc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a1b      	ldr	r2, [pc, #108]	@ (800993c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d004      	beq.n	80098dc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a1a      	ldr	r2, [pc, #104]	@ (8009940 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d11c      	bne.n	8009916 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098e6:	051b      	lsls	r3, r3, #20
 80098e8:	4313      	orrs	r3, r2
 80098ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	6a1b      	ldr	r3, [r3, #32]
 80098f6:	4313      	orrs	r3, r2
 80098f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009904:	4313      	orrs	r3, r2
 8009906:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009912:	4313      	orrs	r3, r2
 8009914:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	68fa      	ldr	r2, [r7, #12]
 800991c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2200      	movs	r2, #0
 8009922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009926:	2300      	movs	r3, #0
}
 8009928:	4618      	mov	r0, r3
 800992a:	3714      	adds	r7, #20
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr
 8009934:	40012c00 	.word	0x40012c00
 8009938:	50012c00 	.word	0x50012c00
 800993c:	40013400 	.word	0x40013400
 8009940:	50013400 	.word	0x50013400

08009944 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800994c:	bf00      	nop
 800994e:	370c      	adds	r7, #12
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009960:	bf00      	nop
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009974:	bf00      	nop
 8009976:	370c      	adds	r7, #12
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009988:	bf00      	nop
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800999c:	bf00      	nop
 800999e:	370c      	adds	r7, #12
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80099b0:	bf00      	nop
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80099c4:	bf00      	nop
 80099c6:	370c      	adds	r7, #12
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d101      	bne.n	80099e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	e042      	b.n	8009a68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d106      	bne.n	80099fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f7f8 f8bd 	bl	8001b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2224      	movs	r2, #36	@ 0x24
 80099fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f022 0201 	bic.w	r2, r2, #1
 8009a10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d002      	beq.n	8009a20 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 fdde 	bl	800a5dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 fc2d 	bl	800a280 <UART_SetConfig>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d101      	bne.n	8009a30 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	e01b      	b.n	8009a68 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	685a      	ldr	r2, [r3, #4]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009a3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	689a      	ldr	r2, [r3, #8]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009a4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f042 0201 	orr.w	r2, r2, #1
 8009a5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 fe5d 	bl	800a720 <UART_CheckIdleState>
 8009a66:	4603      	mov	r3, r0
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3708      	adds	r7, #8
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b08a      	sub	sp, #40	@ 0x28
 8009a74:	af02      	add	r7, sp, #8
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	603b      	str	r3, [r7, #0]
 8009a7c:	4613      	mov	r3, r2
 8009a7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a86:	2b20      	cmp	r3, #32
 8009a88:	f040 808b 	bne.w	8009ba2 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d002      	beq.n	8009a98 <HAL_UART_Transmit+0x28>
 8009a92:	88fb      	ldrh	r3, [r7, #6]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d101      	bne.n	8009a9c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	e083      	b.n	8009ba4 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009aa6:	2b80      	cmp	r3, #128	@ 0x80
 8009aa8:	d107      	bne.n	8009aba <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	689a      	ldr	r2, [r3, #8]
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009ab8:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2200      	movs	r2, #0
 8009abe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2221      	movs	r2, #33	@ 0x21
 8009ac6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009aca:	f7f8 f9e7 	bl	8001e9c <HAL_GetTick>
 8009ace:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	88fa      	ldrh	r2, [r7, #6]
 8009ad4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	88fa      	ldrh	r2, [r7, #6]
 8009adc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ae8:	d108      	bne.n	8009afc <HAL_UART_Transmit+0x8c>
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	691b      	ldr	r3, [r3, #16]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d104      	bne.n	8009afc <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8009af2:	2300      	movs	r3, #0
 8009af4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	61bb      	str	r3, [r7, #24]
 8009afa:	e003      	b.n	8009b04 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b00:	2300      	movs	r3, #0
 8009b02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009b04:	e030      	b.n	8009b68 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	9300      	str	r3, [sp, #0]
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	2180      	movs	r1, #128	@ 0x80
 8009b10:	68f8      	ldr	r0, [r7, #12]
 8009b12:	f000 feaf 	bl	800a874 <UART_WaitOnFlagUntilTimeout>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d005      	beq.n	8009b28 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2220      	movs	r2, #32
 8009b20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009b24:	2303      	movs	r3, #3
 8009b26:	e03d      	b.n	8009ba4 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d10b      	bne.n	8009b46 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	881b      	ldrh	r3, [r3, #0]
 8009b32:	461a      	mov	r2, r3
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b3c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	3302      	adds	r3, #2
 8009b42:	61bb      	str	r3, [r7, #24]
 8009b44:	e007      	b.n	8009b56 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	781a      	ldrb	r2, [r3, #0]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	3301      	adds	r3, #1
 8009b54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	3b01      	subs	r3, #1
 8009b60:	b29a      	uxth	r2, r3
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d1c8      	bne.n	8009b06 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	9300      	str	r3, [sp, #0]
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	2140      	movs	r1, #64	@ 0x40
 8009b7e:	68f8      	ldr	r0, [r7, #12]
 8009b80:	f000 fe78 	bl	800a874 <UART_WaitOnFlagUntilTimeout>
 8009b84:	4603      	mov	r3, r0
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d005      	beq.n	8009b96 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2220      	movs	r2, #32
 8009b8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009b92:	2303      	movs	r3, #3
 8009b94:	e006      	b.n	8009ba4 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2220      	movs	r2, #32
 8009b9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	e000      	b.n	8009ba4 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8009ba2:	2302      	movs	r3, #2
  }
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3720      	adds	r7, #32
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b08a      	sub	sp, #40	@ 0x28
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	60b9      	str	r1, [r7, #8]
 8009bb6:	4613      	mov	r3, r2
 8009bb8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009bc0:	2b20      	cmp	r3, #32
 8009bc2:	d13c      	bne.n	8009c3e <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d002      	beq.n	8009bd0 <HAL_UART_Receive_DMA+0x24>
 8009bca:	88fb      	ldrh	r3, [r7, #6]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d101      	bne.n	8009bd4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	e035      	b.n	8009c40 <HAL_UART_Receive_DMA+0x94>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a1a      	ldr	r2, [pc, #104]	@ (8009c48 <HAL_UART_Receive_DMA+0x9c>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d024      	beq.n	8009c2e <HAL_UART_Receive_DMA+0x82>
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a18      	ldr	r2, [pc, #96]	@ (8009c4c <HAL_UART_Receive_DMA+0xa0>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d01f      	beq.n	8009c2e <HAL_UART_Receive_DMA+0x82>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d018      	beq.n	8009c2e <HAL_UART_Receive_DMA+0x82>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	e853 3f00 	ldrex	r3, [r3]
 8009c08:	613b      	str	r3, [r7, #16]
   return(result);
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009c10:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	461a      	mov	r2, r3
 8009c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c1a:	623b      	str	r3, [r7, #32]
 8009c1c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c1e:	69f9      	ldr	r1, [r7, #28]
 8009c20:	6a3a      	ldr	r2, [r7, #32]
 8009c22:	e841 2300 	strex	r3, r2, [r1]
 8009c26:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c28:	69bb      	ldr	r3, [r7, #24]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d1e6      	bne.n	8009bfc <HAL_UART_Receive_DMA+0x50>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009c2e:	88fb      	ldrh	r3, [r7, #6]
 8009c30:	461a      	mov	r2, r3
 8009c32:	68b9      	ldr	r1, [r7, #8]
 8009c34:	68f8      	ldr	r0, [r7, #12]
 8009c36:	f000 fe8b 	bl	800a950 <UART_Start_Receive_DMA>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	e000      	b.n	8009c40 <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009c3e:	2302      	movs	r3, #2
  }
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3728      	adds	r7, #40	@ 0x28
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}
 8009c48:	44002400 	.word	0x44002400
 8009c4c:	54002400 	.word	0x54002400

08009c50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b0ae      	sub	sp, #184	@ 0xb8
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	69db      	ldr	r3, [r3, #28]
 8009c5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	689b      	ldr	r3, [r3, #8]
 8009c72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009c76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009c7a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009c7e:	4013      	ands	r3, r2
 8009c80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 8009c84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d11b      	bne.n	8009cc4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009c8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009c90:	f003 0320 	and.w	r3, r3, #32
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d015      	beq.n	8009cc4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009c98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009c9c:	f003 0320 	and.w	r3, r3, #32
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d105      	bne.n	8009cb0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009ca4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ca8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d009      	beq.n	8009cc4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	f000 82ac 	beq.w	800a212 <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	4798      	blx	r3
      }
      return;
 8009cc2:	e2a6      	b.n	800a212 <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009cc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	f000 80fd 	beq.w	8009ec8 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009cce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009cd2:	4b7a      	ldr	r3, [pc, #488]	@ (8009ebc <HAL_UART_IRQHandler+0x26c>)
 8009cd4:	4013      	ands	r3, r2
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d106      	bne.n	8009ce8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009cda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009cde:	4b78      	ldr	r3, [pc, #480]	@ (8009ec0 <HAL_UART_IRQHandler+0x270>)
 8009ce0:	4013      	ands	r3, r2
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	f000 80f0 	beq.w	8009ec8 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009ce8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009cec:	f003 0301 	and.w	r3, r3, #1
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d011      	beq.n	8009d18 <HAL_UART_IRQHandler+0xc8>
 8009cf4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d00b      	beq.n	8009d18 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2201      	movs	r2, #1
 8009d06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d0e:	f043 0201 	orr.w	r2, r3, #1
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009d1c:	f003 0302 	and.w	r3, r3, #2
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d011      	beq.n	8009d48 <HAL_UART_IRQHandler+0xf8>
 8009d24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d28:	f003 0301 	and.w	r3, r3, #1
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d00b      	beq.n	8009d48 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	2202      	movs	r2, #2
 8009d36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d3e:	f043 0204 	orr.w	r2, r3, #4
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009d4c:	f003 0304 	and.w	r3, r3, #4
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d011      	beq.n	8009d78 <HAL_UART_IRQHandler+0x128>
 8009d54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d58:	f003 0301 	and.w	r3, r3, #1
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d00b      	beq.n	8009d78 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2204      	movs	r2, #4
 8009d66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d6e:	f043 0202 	orr.w	r2, r3, #2
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009d78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009d7c:	f003 0308 	and.w	r3, r3, #8
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d017      	beq.n	8009db4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009d84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009d88:	f003 0320 	and.w	r3, r3, #32
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d105      	bne.n	8009d9c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009d90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009d94:	4b49      	ldr	r3, [pc, #292]	@ (8009ebc <HAL_UART_IRQHandler+0x26c>)
 8009d96:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d00b      	beq.n	8009db4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2208      	movs	r2, #8
 8009da2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009daa:	f043 0208 	orr.w	r2, r3, #8
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009db4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009db8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d012      	beq.n	8009de6 <HAL_UART_IRQHandler+0x196>
 8009dc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009dc4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d00c      	beq.n	8009de6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009dd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ddc:	f043 0220 	orr.w	r2, r3, #32
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f000 8212 	beq.w	800a216 <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009df2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009df6:	f003 0320 	and.w	r3, r3, #32
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d013      	beq.n	8009e26 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009dfe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009e02:	f003 0320 	and.w	r3, r3, #32
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d105      	bne.n	8009e16 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009e0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d007      	beq.n	8009e26 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d003      	beq.n	8009e26 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e3a:	2b40      	cmp	r3, #64	@ 0x40
 8009e3c:	d005      	beq.n	8009e4a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009e3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009e42:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d02e      	beq.n	8009ea8 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 feb9 	bl	800abc2 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e5a:	2b40      	cmp	r3, #64	@ 0x40
 8009e5c:	d120      	bne.n	8009ea0 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d017      	beq.n	8009e98 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e6e:	4a15      	ldr	r2, [pc, #84]	@ (8009ec4 <HAL_UART_IRQHandler+0x274>)
 8009e70:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7f8 fbd7 	bl	800262c <HAL_DMA_Abort_IT>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d019      	beq.n	8009eb8 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009e92:	4610      	mov	r0, r2
 8009e94:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e96:	e00f      	b.n	8009eb8 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 f9db 	bl	800a254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e9e:	e00b      	b.n	8009eb8 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 f9d7 	bl	800a254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ea6:	e007      	b.n	8009eb8 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 f9d3 	bl	800a254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009eb6:	e1ae      	b.n	800a216 <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009eb8:	bf00      	nop
    return;
 8009eba:	e1ac      	b.n	800a216 <HAL_UART_IRQHandler+0x5c6>
 8009ebc:	10000001 	.word	0x10000001
 8009ec0:	04000120 	.word	0x04000120
 8009ec4:	0800ae3f 	.word	0x0800ae3f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	f040 8142 	bne.w	800a156 <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009ed2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009ed6:	f003 0310 	and.w	r3, r3, #16
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	f000 813b 	beq.w	800a156 <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009ee0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009ee4:	f003 0310 	and.w	r3, r3, #16
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	f000 8134 	beq.w	800a156 <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	2210      	movs	r2, #16
 8009ef4:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	689b      	ldr	r3, [r3, #8]
 8009efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f00:	2b40      	cmp	r3, #64	@ 0x40
 8009f02:	f040 80aa 	bne.w	800a05a <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f10:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 8009f14:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	f000 8084 	beq.w	800a026 <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009f24:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d27c      	bcs.n	800a026 <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8009f32:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f3e:	2b81      	cmp	r3, #129	@ 0x81
 8009f40:	d060      	beq.n	800a004 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009f4a:	e853 3f00 	ldrex	r3, [r3]
 8009f4e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009f50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	461a      	mov	r2, r3
 8009f60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009f64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009f68:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f6a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009f6c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009f70:	e841 2300 	strex	r3, r2, [r1]
 8009f74:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009f76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d1e2      	bne.n	8009f42 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	3308      	adds	r3, #8
 8009f82:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009f86:	e853 3f00 	ldrex	r3, [r3]
 8009f8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009f8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f8e:	f023 0301 	bic.w	r3, r3, #1
 8009f92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	3308      	adds	r3, #8
 8009f9c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009fa0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009fa2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009fa6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009fa8:	e841 2300 	strex	r3, r2, [r1]
 8009fac:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009fae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d1e3      	bne.n	8009f7c <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2220      	movs	r2, #32
 8009fb8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fca:	e853 3f00 	ldrex	r3, [r3]
 8009fce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009fd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009fd2:	f023 0310 	bic.w	r3, r3, #16
 8009fd6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	461a      	mov	r2, r3
 8009fe0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009fe4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009fe6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009fea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009fec:	e841 2300 	strex	r3, r2, [r1]
 8009ff0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009ff2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d1e4      	bne.n	8009fc2 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7f8 fa98 	bl	8002534 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2202      	movs	r2, #2
 800a008:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a016:	b29b      	uxth	r3, r3
 800a018:	1ad3      	subs	r3, r2, r3
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	4619      	mov	r1, r3
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 f922 	bl	800a268 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a024:	e0f9      	b.n	800a21a <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a02c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800a030:	429a      	cmp	r2, r3
 800a032:	f040 80f2 	bne.w	800a21a <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a03c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a03e:	2b81      	cmp	r3, #129	@ 0x81
 800a040:	f040 80eb 	bne.w	800a21a <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2202      	movs	r2, #2
 800a048:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a050:	4619      	mov	r1, r3
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 f908 	bl	800a268 <HAL_UARTEx_RxEventCallback>
      return;
 800a058:	e0df      	b.n	800a21a <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a066:	b29b      	uxth	r3, r3
 800a068:	1ad3      	subs	r3, r2, r3
 800a06a:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a074:	b29b      	uxth	r3, r3
 800a076:	2b00      	cmp	r3, #0
 800a078:	f000 80d1 	beq.w	800a21e <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 800a07c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800a080:	2b00      	cmp	r3, #0
 800a082:	f000 80cc 	beq.w	800a21e <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a08c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a08e:	e853 3f00 	ldrex	r3, [r3]
 800a092:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a096:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a09a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a0a8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0aa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a0ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a0b0:	e841 2300 	strex	r3, r2, [r1]
 800a0b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a0b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d1e4      	bne.n	800a086 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	3308      	adds	r3, #8
 800a0c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c6:	e853 3f00 	ldrex	r3, [r3]
 800a0ca:	623b      	str	r3, [r7, #32]
   return(result);
 800a0cc:	6a3b      	ldr	r3, [r7, #32]
 800a0ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a0d2:	f023 0301 	bic.w	r3, r3, #1
 800a0d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	3308      	adds	r3, #8
 800a0e0:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800a0e4:	633a      	str	r2, [r7, #48]	@ 0x30
 800a0e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0ec:	e841 2300 	strex	r3, r2, [r1]
 800a0f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a0f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d1e1      	bne.n	800a0bc <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2220      	movs	r2, #32
 800a0fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2200      	movs	r2, #0
 800a104:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2200      	movs	r2, #0
 800a10a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	e853 3f00 	ldrex	r3, [r3]
 800a118:	60fb      	str	r3, [r7, #12]
   return(result);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f023 0310 	bic.w	r3, r3, #16
 800a120:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	461a      	mov	r2, r3
 800a12a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a12e:	61fb      	str	r3, [r7, #28]
 800a130:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a132:	69b9      	ldr	r1, [r7, #24]
 800a134:	69fa      	ldr	r2, [r7, #28]
 800a136:	e841 2300 	strex	r3, r2, [r1]
 800a13a:	617b      	str	r3, [r7, #20]
   return(result);
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d1e4      	bne.n	800a10c <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2202      	movs	r2, #2
 800a146:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a148:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800a14c:	4619      	mov	r1, r3
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 f88a 	bl	800a268 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a154:	e063      	b.n	800a21e <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a156:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a15a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d00e      	beq.n	800a180 <HAL_UART_IRQHandler+0x530>
 800a162:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a166:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d008      	beq.n	800a180 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a176:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 fe9d 	bl	800aeb8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a17e:	e051      	b.n	800a224 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a180:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a184:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d014      	beq.n	800a1b6 <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a18c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a194:	2b00      	cmp	r3, #0
 800a196:	d105      	bne.n	800a1a4 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a198:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a19c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d008      	beq.n	800a1b6 <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d03a      	beq.n	800a222 <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	4798      	blx	r3
    }
    return;
 800a1b4:	e035      	b.n	800a222 <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a1b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a1ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d009      	beq.n	800a1d6 <HAL_UART_IRQHandler+0x586>
 800a1c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a1c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d003      	beq.n	800a1d6 <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 fe47 	bl	800ae62 <UART_EndTransmit_IT>
    return;
 800a1d4:	e026      	b.n	800a224 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a1d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a1da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d009      	beq.n	800a1f6 <HAL_UART_IRQHandler+0x5a6>
 800a1e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a1e6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d003      	beq.n	800a1f6 <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 fe76 	bl	800aee0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a1f4:	e016      	b.n	800a224 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a1f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a1fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d010      	beq.n	800a224 <HAL_UART_IRQHandler+0x5d4>
 800a202:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a206:	2b00      	cmp	r3, #0
 800a208:	da0c      	bge.n	800a224 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f000 fe5e 	bl	800aecc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a210:	e008      	b.n	800a224 <HAL_UART_IRQHandler+0x5d4>
      return;
 800a212:	bf00      	nop
 800a214:	e006      	b.n	800a224 <HAL_UART_IRQHandler+0x5d4>
    return;
 800a216:	bf00      	nop
 800a218:	e004      	b.n	800a224 <HAL_UART_IRQHandler+0x5d4>
      return;
 800a21a:	bf00      	nop
 800a21c:	e002      	b.n	800a224 <HAL_UART_IRQHandler+0x5d4>
      return;
 800a21e:	bf00      	nop
 800a220:	e000      	b.n	800a224 <HAL_UART_IRQHandler+0x5d4>
    return;
 800a222:	bf00      	nop
  }
}
 800a224:	37b8      	adds	r7, #184	@ 0xb8
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop

0800a22c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a234:	bf00      	nop
 800a236:	370c      	adds	r7, #12
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr

0800a240 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a248:	bf00      	nop
 800a24a:	370c      	adds	r7, #12
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr

0800a254 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a25c:	bf00      	nop
 800a25e:	370c      	adds	r7, #12
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	460b      	mov	r3, r1
 800a272:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a274:	bf00      	nop
 800a276:	370c      	adds	r7, #12
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a284:	b094      	sub	sp, #80	@ 0x50
 800a286:	af00      	add	r7, sp, #0
 800a288:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a28a:	2300      	movs	r3, #0
 800a28c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	4b83      	ldr	r3, [pc, #524]	@ (800a4a4 <UART_SetConfig+0x224>)
 800a296:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a29a:	689a      	ldr	r2, [r3, #8]
 800a29c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a29e:	691b      	ldr	r3, [r3, #16]
 800a2a0:	431a      	orrs	r2, r3
 800a2a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2a4:	695b      	ldr	r3, [r3, #20]
 800a2a6:	431a      	orrs	r2, r3
 800a2a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2aa:	69db      	ldr	r3, [r3, #28]
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a2b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	497c      	ldr	r1, [pc, #496]	@ (800a4a8 <UART_SetConfig+0x228>)
 800a2b8:	4019      	ands	r1, r3
 800a2ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2c0:	430b      	orrs	r3, r1
 800a2c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a2c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a2ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2d0:	68d9      	ldr	r1, [r3, #12]
 800a2d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	ea40 0301 	orr.w	r3, r0, r1
 800a2da:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a2dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2de:	699b      	ldr	r3, [r3, #24]
 800a2e0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a2e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2e4:	681a      	ldr	r2, [r3, #0]
 800a2e6:	4b6f      	ldr	r3, [pc, #444]	@ (800a4a4 <UART_SetConfig+0x224>)
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d009      	beq.n	800a300 <UART_SetConfig+0x80>
 800a2ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	4b6e      	ldr	r3, [pc, #440]	@ (800a4ac <UART_SetConfig+0x22c>)
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d004      	beq.n	800a300 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a2f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2f8:	6a1a      	ldr	r2, [r3, #32]
 800a2fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	689b      	ldr	r3, [r3, #8]
 800a306:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800a30a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800a30e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a314:	430b      	orrs	r3, r1
 800a316:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a31e:	f023 000f 	bic.w	r0, r3, #15
 800a322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a324:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	ea40 0301 	orr.w	r3, r0, r1
 800a32e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	4b5e      	ldr	r3, [pc, #376]	@ (800a4b0 <UART_SetConfig+0x230>)
 800a336:	429a      	cmp	r2, r3
 800a338:	d102      	bne.n	800a340 <UART_SetConfig+0xc0>
 800a33a:	2301      	movs	r3, #1
 800a33c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a33e:	e032      	b.n	800a3a6 <UART_SetConfig+0x126>
 800a340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	4b5b      	ldr	r3, [pc, #364]	@ (800a4b4 <UART_SetConfig+0x234>)
 800a346:	429a      	cmp	r2, r3
 800a348:	d102      	bne.n	800a350 <UART_SetConfig+0xd0>
 800a34a:	2302      	movs	r3, #2
 800a34c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a34e:	e02a      	b.n	800a3a6 <UART_SetConfig+0x126>
 800a350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	4b58      	ldr	r3, [pc, #352]	@ (800a4b8 <UART_SetConfig+0x238>)
 800a356:	429a      	cmp	r2, r3
 800a358:	d102      	bne.n	800a360 <UART_SetConfig+0xe0>
 800a35a:	2304      	movs	r3, #4
 800a35c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a35e:	e022      	b.n	800a3a6 <UART_SetConfig+0x126>
 800a360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	4b55      	ldr	r3, [pc, #340]	@ (800a4bc <UART_SetConfig+0x23c>)
 800a366:	429a      	cmp	r2, r3
 800a368:	d102      	bne.n	800a370 <UART_SetConfig+0xf0>
 800a36a:	2308      	movs	r3, #8
 800a36c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a36e:	e01a      	b.n	800a3a6 <UART_SetConfig+0x126>
 800a370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a372:	681a      	ldr	r2, [r3, #0]
 800a374:	4b52      	ldr	r3, [pc, #328]	@ (800a4c0 <UART_SetConfig+0x240>)
 800a376:	429a      	cmp	r2, r3
 800a378:	d102      	bne.n	800a380 <UART_SetConfig+0x100>
 800a37a:	2310      	movs	r3, #16
 800a37c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a37e:	e012      	b.n	800a3a6 <UART_SetConfig+0x126>
 800a380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	4b4f      	ldr	r3, [pc, #316]	@ (800a4c4 <UART_SetConfig+0x244>)
 800a386:	429a      	cmp	r2, r3
 800a388:	d102      	bne.n	800a390 <UART_SetConfig+0x110>
 800a38a:	2320      	movs	r3, #32
 800a38c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a38e:	e00a      	b.n	800a3a6 <UART_SetConfig+0x126>
 800a390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	4b43      	ldr	r3, [pc, #268]	@ (800a4a4 <UART_SetConfig+0x224>)
 800a396:	429a      	cmp	r2, r3
 800a398:	d103      	bne.n	800a3a2 <UART_SetConfig+0x122>
 800a39a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a39e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3a0:	e001      	b.n	800a3a6 <UART_SetConfig+0x126>
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a3a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	4b3e      	ldr	r3, [pc, #248]	@ (800a4a4 <UART_SetConfig+0x224>)
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d005      	beq.n	800a3bc <UART_SetConfig+0x13c>
 800a3b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	4b3d      	ldr	r3, [pc, #244]	@ (800a4ac <UART_SetConfig+0x22c>)
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	f040 8088 	bne.w	800a4cc <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a3bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a3be:	2200      	movs	r2, #0
 800a3c0:	623b      	str	r3, [r7, #32]
 800a3c2:	627a      	str	r2, [r7, #36]	@ 0x24
 800a3c4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a3c8:	f7fc fa40 	bl	800684c <HAL_RCCEx_GetPeriphCLKFreq>
 800a3cc:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800a3ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	f000 80eb 	beq.w	800a5ac <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a3d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3da:	4a3b      	ldr	r2, [pc, #236]	@ (800a4c8 <UART_SetConfig+0x248>)
 800a3dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3e8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a3ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3ec:	685a      	ldr	r2, [r3, #4]
 800a3ee:	4613      	mov	r3, r2
 800a3f0:	005b      	lsls	r3, r3, #1
 800a3f2:	4413      	add	r3, r2
 800a3f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d305      	bcc.n	800a406 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a3fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a400:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a402:	429a      	cmp	r2, r3
 800a404:	d903      	bls.n	800a40e <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800a406:	2301      	movs	r3, #1
 800a408:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a40c:	e048      	b.n	800a4a0 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a40e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a410:	2200      	movs	r2, #0
 800a412:	61bb      	str	r3, [r7, #24]
 800a414:	61fa      	str	r2, [r7, #28]
 800a416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a41a:	4a2b      	ldr	r2, [pc, #172]	@ (800a4c8 <UART_SetConfig+0x248>)
 800a41c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a420:	b29b      	uxth	r3, r3
 800a422:	2200      	movs	r2, #0
 800a424:	613b      	str	r3, [r7, #16]
 800a426:	617a      	str	r2, [r7, #20]
 800a428:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a42c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a430:	f7f6 fa70 	bl	8000914 <__aeabi_uldivmod>
 800a434:	4602      	mov	r2, r0
 800a436:	460b      	mov	r3, r1
 800a438:	4610      	mov	r0, r2
 800a43a:	4619      	mov	r1, r3
 800a43c:	f04f 0200 	mov.w	r2, #0
 800a440:	f04f 0300 	mov.w	r3, #0
 800a444:	020b      	lsls	r3, r1, #8
 800a446:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a44a:	0202      	lsls	r2, r0, #8
 800a44c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a44e:	6849      	ldr	r1, [r1, #4]
 800a450:	0849      	lsrs	r1, r1, #1
 800a452:	2000      	movs	r0, #0
 800a454:	460c      	mov	r4, r1
 800a456:	4605      	mov	r5, r0
 800a458:	eb12 0804 	adds.w	r8, r2, r4
 800a45c:	eb43 0905 	adc.w	r9, r3, r5
 800a460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	2200      	movs	r2, #0
 800a466:	60bb      	str	r3, [r7, #8]
 800a468:	60fa      	str	r2, [r7, #12]
 800a46a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a46e:	4640      	mov	r0, r8
 800a470:	4649      	mov	r1, r9
 800a472:	f7f6 fa4f 	bl	8000914 <__aeabi_uldivmod>
 800a476:	4602      	mov	r2, r0
 800a478:	460b      	mov	r3, r1
 800a47a:	4613      	mov	r3, r2
 800a47c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a47e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a480:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a484:	d308      	bcc.n	800a498 <UART_SetConfig+0x218>
 800a486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a488:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a48c:	d204      	bcs.n	800a498 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800a48e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a494:	60da      	str	r2, [r3, #12]
 800a496:	e003      	b.n	800a4a0 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800a498:	2301      	movs	r3, #1
 800a49a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800a49e:	e085      	b.n	800a5ac <UART_SetConfig+0x32c>
 800a4a0:	e084      	b.n	800a5ac <UART_SetConfig+0x32c>
 800a4a2:	bf00      	nop
 800a4a4:	44002400 	.word	0x44002400
 800a4a8:	cfff69f3 	.word	0xcfff69f3
 800a4ac:	54002400 	.word	0x54002400
 800a4b0:	40013800 	.word	0x40013800
 800a4b4:	40004400 	.word	0x40004400
 800a4b8:	40004800 	.word	0x40004800
 800a4bc:	40004c00 	.word	0x40004c00
 800a4c0:	40005000 	.word	0x40005000
 800a4c4:	40006400 	.word	0x40006400
 800a4c8:	0800bb18 	.word	0x0800bb18
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a4cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4ce:	69db      	ldr	r3, [r3, #28]
 800a4d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a4d4:	d13c      	bne.n	800a550 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a4d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4d8:	2200      	movs	r2, #0
 800a4da:	603b      	str	r3, [r7, #0]
 800a4dc:	607a      	str	r2, [r7, #4]
 800a4de:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a4e2:	f7fc f9b3 	bl	800684c <HAL_RCCEx_GetPeriphCLKFreq>
 800a4e6:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a4e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d05e      	beq.n	800a5ac <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4f2:	4a39      	ldr	r2, [pc, #228]	@ (800a5d8 <UART_SetConfig+0x358>)
 800a4f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4f8:	461a      	mov	r2, r3
 800a4fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a500:	005a      	lsls	r2, r3, #1
 800a502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	085b      	lsrs	r3, r3, #1
 800a508:	441a      	add	r2, r3
 800a50a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a512:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a514:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a516:	2b0f      	cmp	r3, #15
 800a518:	d916      	bls.n	800a548 <UART_SetConfig+0x2c8>
 800a51a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a51c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a520:	d212      	bcs.n	800a548 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a524:	b29b      	uxth	r3, r3
 800a526:	f023 030f 	bic.w	r3, r3, #15
 800a52a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a52c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a52e:	085b      	lsrs	r3, r3, #1
 800a530:	b29b      	uxth	r3, r3
 800a532:	f003 0307 	and.w	r3, r3, #7
 800a536:	b29a      	uxth	r2, r3
 800a538:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a53a:	4313      	orrs	r3, r2
 800a53c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800a53e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800a544:	60da      	str	r2, [r3, #12]
 800a546:	e031      	b.n	800a5ac <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800a548:	2301      	movs	r3, #1
 800a54a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a54e:	e02d      	b.n	800a5ac <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a550:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a552:	2200      	movs	r2, #0
 800a554:	469a      	mov	sl, r3
 800a556:	4693      	mov	fp, r2
 800a558:	4650      	mov	r0, sl
 800a55a:	4659      	mov	r1, fp
 800a55c:	f7fc f976 	bl	800684c <HAL_RCCEx_GetPeriphCLKFreq>
 800a560:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800a562:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a564:	2b00      	cmp	r3, #0
 800a566:	d021      	beq.n	800a5ac <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a56a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a56c:	4a1a      	ldr	r2, [pc, #104]	@ (800a5d8 <UART_SetConfig+0x358>)
 800a56e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a572:	461a      	mov	r2, r3
 800a574:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a576:	fbb3 f2f2 	udiv	r2, r3, r2
 800a57a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	085b      	lsrs	r3, r3, #1
 800a580:	441a      	add	r2, r3
 800a582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	fbb2 f3f3 	udiv	r3, r2, r3
 800a58a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a58c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a58e:	2b0f      	cmp	r3, #15
 800a590:	d909      	bls.n	800a5a6 <UART_SetConfig+0x326>
 800a592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a594:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a598:	d205      	bcs.n	800a5a6 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a59a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a59c:	b29a      	uxth	r2, r3
 800a59e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	60da      	str	r2, [r3, #12]
 800a5a4:	e002      	b.n	800a5ac <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a5ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a5b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a5bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5be:	2200      	movs	r2, #0
 800a5c0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a5c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a5c8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3750      	adds	r7, #80	@ 0x50
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a5d6:	bf00      	nop
 800a5d8:	0800bb18 	.word	0x0800bb18

0800a5dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5e8:	f003 0308 	and.w	r3, r3, #8
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d00a      	beq.n	800a606 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	430a      	orrs	r2, r1
 800a604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a60a:	f003 0301 	and.w	r3, r3, #1
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d00a      	beq.n	800a628 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	430a      	orrs	r2, r1
 800a626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a62c:	f003 0302 	and.w	r3, r3, #2
 800a630:	2b00      	cmp	r3, #0
 800a632:	d00a      	beq.n	800a64a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	430a      	orrs	r2, r1
 800a648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a64e:	f003 0304 	and.w	r3, r3, #4
 800a652:	2b00      	cmp	r3, #0
 800a654:	d00a      	beq.n	800a66c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	430a      	orrs	r2, r1
 800a66a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a670:	f003 0310 	and.w	r3, r3, #16
 800a674:	2b00      	cmp	r3, #0
 800a676:	d00a      	beq.n	800a68e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	430a      	orrs	r2, r1
 800a68c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a692:	f003 0320 	and.w	r3, r3, #32
 800a696:	2b00      	cmp	r3, #0
 800a698:	d00a      	beq.n	800a6b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	689b      	ldr	r3, [r3, #8]
 800a6a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	430a      	orrs	r2, r1
 800a6ae:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d01a      	beq.n	800a6f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	430a      	orrs	r2, r1
 800a6d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a6da:	d10a      	bne.n	800a6f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	430a      	orrs	r2, r1
 800a6f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d00a      	beq.n	800a714 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	430a      	orrs	r2, r1
 800a712:	605a      	str	r2, [r3, #4]
  }
}
 800a714:	bf00      	nop
 800a716:	370c      	adds	r7, #12
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr

0800a720 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b098      	sub	sp, #96	@ 0x60
 800a724:	af02      	add	r7, sp, #8
 800a726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2200      	movs	r2, #0
 800a72c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a730:	f7f7 fbb4 	bl	8001e9c <HAL_GetTick>
 800a734:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f003 0308 	and.w	r3, r3, #8
 800a740:	2b08      	cmp	r3, #8
 800a742:	d12f      	bne.n	800a7a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a744:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a748:	9300      	str	r3, [sp, #0]
 800a74a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a74c:	2200      	movs	r2, #0
 800a74e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 f88e 	bl	800a874 <UART_WaitOnFlagUntilTimeout>
 800a758:	4603      	mov	r3, r0
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d022      	beq.n	800a7a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a766:	e853 3f00 	ldrex	r3, [r3]
 800a76a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a76c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a76e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a772:	653b      	str	r3, [r7, #80]	@ 0x50
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	461a      	mov	r2, r3
 800a77a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a77c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a77e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a780:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a782:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a784:	e841 2300 	strex	r3, r2, [r1]
 800a788:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a78a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d1e6      	bne.n	800a75e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2220      	movs	r2, #32
 800a794:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7a0:	2303      	movs	r3, #3
 800a7a2:	e063      	b.n	800a86c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f003 0304 	and.w	r3, r3, #4
 800a7ae:	2b04      	cmp	r3, #4
 800a7b0:	d149      	bne.n	800a846 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7b2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a7b6:	9300      	str	r3, [sp, #0]
 800a7b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 f857 	bl	800a874 <UART_WaitOnFlagUntilTimeout>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d03c      	beq.n	800a846 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7d4:	e853 3f00 	ldrex	r3, [r3]
 800a7d8:	623b      	str	r3, [r7, #32]
   return(result);
 800a7da:	6a3b      	ldr	r3, [r7, #32]
 800a7dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a7e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800a7ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a7f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7f2:	e841 2300 	strex	r3, r2, [r1]
 800a7f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a7f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d1e6      	bne.n	800a7cc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	3308      	adds	r3, #8
 800a804:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	e853 3f00 	ldrex	r3, [r3]
 800a80c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f023 0301 	bic.w	r3, r3, #1
 800a814:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	3308      	adds	r3, #8
 800a81c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a81e:	61fa      	str	r2, [r7, #28]
 800a820:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a822:	69b9      	ldr	r1, [r7, #24]
 800a824:	69fa      	ldr	r2, [r7, #28]
 800a826:	e841 2300 	strex	r3, r2, [r1]
 800a82a:	617b      	str	r3, [r7, #20]
   return(result);
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d1e5      	bne.n	800a7fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2220      	movs	r2, #32
 800a836:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a842:	2303      	movs	r3, #3
 800a844:	e012      	b.n	800a86c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2220      	movs	r2, #32
 800a84a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2220      	movs	r2, #32
 800a852:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2200      	movs	r2, #0
 800a866:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a86a:	2300      	movs	r3, #0
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3758      	adds	r7, #88	@ 0x58
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	603b      	str	r3, [r7, #0]
 800a880:	4613      	mov	r3, r2
 800a882:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a884:	e04f      	b.n	800a926 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a886:	69bb      	ldr	r3, [r7, #24]
 800a888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a88c:	d04b      	beq.n	800a926 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a88e:	f7f7 fb05 	bl	8001e9c <HAL_GetTick>
 800a892:	4602      	mov	r2, r0
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	1ad3      	subs	r3, r2, r3
 800a898:	69ba      	ldr	r2, [r7, #24]
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d302      	bcc.n	800a8a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a89e:	69bb      	ldr	r3, [r7, #24]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d101      	bne.n	800a8a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a8a4:	2303      	movs	r3, #3
 800a8a6:	e04e      	b.n	800a946 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f003 0304 	and.w	r3, r3, #4
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d037      	beq.n	800a926 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	2b80      	cmp	r3, #128	@ 0x80
 800a8ba:	d034      	beq.n	800a926 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	2b40      	cmp	r3, #64	@ 0x40
 800a8c0:	d031      	beq.n	800a926 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	69db      	ldr	r3, [r3, #28]
 800a8c8:	f003 0308 	and.w	r3, r3, #8
 800a8cc:	2b08      	cmp	r3, #8
 800a8ce:	d110      	bne.n	800a8f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2208      	movs	r2, #8
 800a8d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a8d8:	68f8      	ldr	r0, [r7, #12]
 800a8da:	f000 f972 	bl	800abc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2208      	movs	r2, #8
 800a8e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	e029      	b.n	800a946 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	69db      	ldr	r3, [r3, #28]
 800a8f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a8fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a900:	d111      	bne.n	800a926 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a90a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	f000 f958 	bl	800abc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	2220      	movs	r2, #32
 800a916:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	2200      	movs	r2, #0
 800a91e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a922:	2303      	movs	r3, #3
 800a924:	e00f      	b.n	800a946 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	69da      	ldr	r2, [r3, #28]
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	4013      	ands	r3, r2
 800a930:	68ba      	ldr	r2, [r7, #8]
 800a932:	429a      	cmp	r2, r3
 800a934:	bf0c      	ite	eq
 800a936:	2301      	moveq	r3, #1
 800a938:	2300      	movne	r3, #0
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	461a      	mov	r2, r3
 800a93e:	79fb      	ldrb	r3, [r7, #7]
 800a940:	429a      	cmp	r2, r3
 800a942:	d0a0      	beq.n	800a886 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a944:	2300      	movs	r3, #0
}
 800a946:	4618      	mov	r0, r3
 800a948:	3710      	adds	r7, #16
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
	...

0800a950 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b098      	sub	sp, #96	@ 0x60
 800a954:	af00      	add	r7, sp, #0
 800a956:	60f8      	str	r0, [r7, #12]
 800a958:	60b9      	str	r1, [r7, #8]
 800a95a:	4613      	mov	r3, r2
 800a95c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 800a95e:	88fb      	ldrh	r3, [r7, #6]
 800a960:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

  huart->pRxBuffPtr = pData;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	68ba      	ldr	r2, [r7, #8]
 800a968:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	88fa      	ldrh	r2, [r7, #6]
 800a96e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2200      	movs	r2, #0
 800a976:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2222      	movs	r2, #34	@ 0x22
 800a97e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d07c      	beq.n	800aa86 <UART_Start_Receive_DMA+0x136>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a992:	4a68      	ldr	r2, [pc, #416]	@ (800ab34 <UART_Start_Receive_DMA+0x1e4>)
 800a994:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a99c:	4a66      	ldr	r2, [pc, #408]	@ (800ab38 <UART_Start_Receive_DMA+0x1e8>)
 800a99e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9a6:	4a65      	ldr	r2, [pc, #404]	@ (800ab3c <UART_Start_Receive_DMA+0x1ec>)
 800a9a8:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	689b      	ldr	r3, [r3, #8]
 800a9b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9bc:	d107      	bne.n	800a9ce <UART_Start_Receive_DMA+0x7e>
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	691b      	ldr	r3, [r3, #16]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d103      	bne.n	800a9ce <UART_Start_Receive_DMA+0x7e>
    {
      nbByte = Size * 2U;
 800a9c6:	88fb      	ldrh	r3, [r7, #6]
 800a9c8:	005b      	lsls	r3, r3, #1
 800a9ca:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }

    /* Check linked list mode */
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d034      	beq.n	800aa48 <UART_Start_Receive_DMA+0xf8>
    {
      if ((huart->hdmarx->LinkedListQueue != NULL) && (huart->hdmarx->LinkedListQueue->Head != NULL))
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d02a      	beq.n	800aa40 <UART_Start_Receive_DMA+0xf0>
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d023      	beq.n	800aa40 <UART_Start_Receive_DMA+0xf0>
      {
        /* Set DMA data size */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 800aa06:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
          (uint32_t)&huart->Instance->RDR;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f103 0224 	add.w	r2, r3, #36	@ 0x24
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)huart->pRxBuffPtr;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	611a      	str	r2, [r3, #16]

        /* Enable the UART receive DMA channel */
        status = HAL_DMAEx_List_Start_IT(huart->hdmarx);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7f8 fa6a 	bl	8002f0c <HAL_DMAEx_List_Start_IT>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800aa3e:	e014      	b.n	800aa6a <UART_Start_Receive_DMA+0x11a>
      }
      else
      {
        /* Update status */
        status = HAL_ERROR;
 800aa40:	2301      	movs	r3, #1
 800aa42:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800aa46:	e010      	b.n	800aa6a <UART_Start_Receive_DMA+0x11a>
      }
    }
    else
    {
      /* Enable the UART receive DMA channel */
      status = HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, nbByte);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	3324      	adds	r3, #36	@ 0x24
 800aa54:	4619      	mov	r1, r3
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800aa60:	f7f7 fd08 	bl	8002474 <HAL_DMA_Start_IT>
 800aa64:	4603      	mov	r3, r0
 800aa66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    }

    if (status != HAL_OK)
 800aa6a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d009      	beq.n	800aa86 <UART_Start_Receive_DMA+0x136>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2210      	movs	r2, #16
 800aa76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2220      	movs	r2, #32
 800aa7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800aa82:	2301      	movs	r3, #1
 800aa84:	e051      	b.n	800ab2a <UART_Start_Receive_DMA+0x1da>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	691b      	ldr	r3, [r3, #16]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d018      	beq.n	800aac0 <UART_Start_Receive_DMA+0x170>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa96:	e853 3f00 	ldrex	r3, [r3]
 800aa9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aa9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aaa2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aaac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aaae:	64ba      	str	r2, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab0:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800aab2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aab4:	e841 2300 	strex	r3, r2, [r1]
 800aab8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800aaba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d1e6      	bne.n	800aa8e <UART_Start_Receive_DMA+0x13e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	3308      	adds	r3, #8
 800aac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaca:	e853 3f00 	ldrex	r3, [r3]
 800aace:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aad2:	f043 0301 	orr.w	r3, r3, #1
 800aad6:	657b      	str	r3, [r7, #84]	@ 0x54
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	3308      	adds	r3, #8
 800aade:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aae0:	63ba      	str	r2, [r7, #56]	@ 0x38
 800aae2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800aae6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aae8:	e841 2300 	strex	r3, r2, [r1]
 800aaec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aaee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d1e5      	bne.n	800aac0 <UART_Start_Receive_DMA+0x170>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	3308      	adds	r3, #8
 800aafa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aafc:	69bb      	ldr	r3, [r7, #24]
 800aafe:	e853 3f00 	ldrex	r3, [r3]
 800ab02:	617b      	str	r3, [r7, #20]
   return(result);
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab0a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	3308      	adds	r3, #8
 800ab12:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ab14:	627a      	str	r2, [r7, #36]	@ 0x24
 800ab16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab18:	6a39      	ldr	r1, [r7, #32]
 800ab1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab1c:	e841 2300 	strex	r3, r2, [r1]
 800ab20:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab22:	69fb      	ldr	r3, [r7, #28]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d1e5      	bne.n	800aaf4 <UART_Start_Receive_DMA+0x1a4>

  return HAL_OK;
 800ab28:	2300      	movs	r3, #0
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3760      	adds	r7, #96	@ 0x60
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
 800ab32:	bf00      	nop
 800ab34:	0800ac8f 	.word	0x0800ac8f
 800ab38:	0800ad81 	.word	0x0800ad81
 800ab3c:	0800adbf 	.word	0x0800adbf

0800ab40 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b08f      	sub	sp, #60	@ 0x3c
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab4e:	6a3b      	ldr	r3, [r7, #32]
 800ab50:	e853 3f00 	ldrex	r3, [r3]
 800ab54:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab56:	69fb      	ldr	r3, [r7, #28]
 800ab58:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ab5c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	461a      	mov	r2, r3
 800ab64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab68:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab6e:	e841 2300 	strex	r3, r2, [r1]
 800ab72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ab74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d1e6      	bne.n	800ab48 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	3308      	adds	r3, #8
 800ab80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	e853 3f00 	ldrex	r3, [r3]
 800ab88:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ab90:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	3308      	adds	r3, #8
 800ab98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab9a:	61ba      	str	r2, [r7, #24]
 800ab9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab9e:	6979      	ldr	r1, [r7, #20]
 800aba0:	69ba      	ldr	r2, [r7, #24]
 800aba2:	e841 2300 	strex	r3, r2, [r1]
 800aba6:	613b      	str	r3, [r7, #16]
   return(result);
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d1e5      	bne.n	800ab7a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2220      	movs	r2, #32
 800abb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800abb6:	bf00      	nop
 800abb8:	373c      	adds	r7, #60	@ 0x3c
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr

0800abc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800abc2:	b480      	push	{r7}
 800abc4:	b095      	sub	sp, #84	@ 0x54
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abd2:	e853 3f00 	ldrex	r3, [r3]
 800abd6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800abd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800abde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	461a      	mov	r2, r3
 800abe6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abe8:	643b      	str	r3, [r7, #64]	@ 0x40
 800abea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800abee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800abf0:	e841 2300 	strex	r3, r2, [r1]
 800abf4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800abf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d1e6      	bne.n	800abca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	3308      	adds	r3, #8
 800ac02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac04:	6a3b      	ldr	r3, [r7, #32]
 800ac06:	e853 3f00 	ldrex	r3, [r3]
 800ac0a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac0c:	69fb      	ldr	r3, [r7, #28]
 800ac0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ac12:	f023 0301 	bic.w	r3, r3, #1
 800ac16:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	3308      	adds	r3, #8
 800ac1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ac20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ac22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac28:	e841 2300 	strex	r3, r2, [r1]
 800ac2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ac2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d1e3      	bne.n	800abfc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	d118      	bne.n	800ac6e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	e853 3f00 	ldrex	r3, [r3]
 800ac48:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	f023 0310 	bic.w	r3, r3, #16
 800ac50:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	461a      	mov	r2, r3
 800ac58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac5a:	61bb      	str	r3, [r7, #24]
 800ac5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac5e:	6979      	ldr	r1, [r7, #20]
 800ac60:	69ba      	ldr	r2, [r7, #24]
 800ac62:	e841 2300 	strex	r3, r2, [r1]
 800ac66:	613b      	str	r3, [r7, #16]
   return(result);
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d1e6      	bne.n	800ac3c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2220      	movs	r2, #32
 800ac72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ac82:	bf00      	nop
 800ac84:	3754      	adds	r7, #84	@ 0x54
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr

0800ac8e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ac8e:	b580      	push	{r7, lr}
 800ac90:	b096      	sub	sp, #88	@ 0x58
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ac9a:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aca0:	2b81      	cmp	r3, #129	@ 0x81
 800aca2:	d057      	beq.n	800ad54 <UART_DMAReceiveCplt+0xc6>
  {
    huart->RxXferCount = 0U;
 800aca4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aca6:	2200      	movs	r2, #0
 800aca8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800acac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acb4:	e853 3f00 	ldrex	r3, [r3]
 800acb8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800acba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800acc0:	653b      	str	r3, [r7, #80]	@ 0x50
 800acc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	461a      	mov	r2, r3
 800acc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800acca:	647b      	str	r3, [r7, #68]	@ 0x44
 800accc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800acd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800acd2:	e841 2300 	strex	r3, r2, [r1]
 800acd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800acd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d1e6      	bne.n	800acac <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	3308      	adds	r3, #8
 800ace4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace8:	e853 3f00 	ldrex	r3, [r3]
 800acec:	623b      	str	r3, [r7, #32]
   return(result);
 800acee:	6a3b      	ldr	r3, [r7, #32]
 800acf0:	f023 0301 	bic.w	r3, r3, #1
 800acf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800acf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	3308      	adds	r3, #8
 800acfc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800acfe:	633a      	str	r2, [r7, #48]	@ 0x30
 800ad00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad06:	e841 2300 	strex	r3, r2, [r1]
 800ad0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ad0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d1e5      	bne.n	800acde <UART_DMAReceiveCplt+0x50>
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ad12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad14:	2220      	movs	r2, #32
 800ad16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	d118      	bne.n	800ad54 <UART_DMAReceiveCplt+0xc6>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	e853 3f00 	ldrex	r3, [r3]
 800ad2e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f023 0310 	bic.w	r3, r3, #16
 800ad36:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad40:	61fb      	str	r3, [r7, #28]
 800ad42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad44:	69b9      	ldr	r1, [r7, #24]
 800ad46:	69fa      	ldr	r2, [r7, #28]
 800ad48:	e841 2300 	strex	r3, r2, [r1]
 800ad4c:	617b      	str	r3, [r7, #20]
   return(result);
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d1e6      	bne.n	800ad22 <UART_DMAReceiveCplt+0x94>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad56:	2200      	movs	r2, #0
 800ad58:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad5e:	2b01      	cmp	r3, #1
 800ad60:	d107      	bne.n	800ad72 <UART_DMAReceiveCplt+0xe4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ad68:	4619      	mov	r1, r3
 800ad6a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800ad6c:	f7ff fa7c 	bl	800a268 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad70:	e002      	b.n	800ad78 <UART_DMAReceiveCplt+0xea>
    HAL_UART_RxCpltCallback(huart);
 800ad72:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800ad74:	f7f6 fb62 	bl	800143c <HAL_UART_RxCpltCallback>
}
 800ad78:	bf00      	nop
 800ad7a:	3758      	adds	r7, #88	@ 0x58
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ad8c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2201      	movs	r2, #1
 800ad92:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d109      	bne.n	800adb0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ada2:	085b      	lsrs	r3, r3, #1
 800ada4:	b29b      	uxth	r3, r3
 800ada6:	4619      	mov	r1, r3
 800ada8:	68f8      	ldr	r0, [r7, #12]
 800adaa:	f7ff fa5d 	bl	800a268 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800adae:	e002      	b.n	800adb6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800adb0:	68f8      	ldr	r0, [r7, #12]
 800adb2:	f7ff fa45 	bl	800a240 <HAL_UART_RxHalfCpltCallback>
}
 800adb6:	bf00      	nop
 800adb8:	3710      	adds	r7, #16
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b086      	sub	sp, #24
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800adca:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800add2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800adda:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	689b      	ldr	r3, [r3, #8]
 800ade2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ade6:	2b80      	cmp	r3, #128	@ 0x80
 800ade8:	d109      	bne.n	800adfe <UART_DMAError+0x40>
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	2b21      	cmp	r3, #33	@ 0x21
 800adee:	d106      	bne.n	800adfe <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	2200      	movs	r2, #0
 800adf4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800adf8:	6978      	ldr	r0, [r7, #20]
 800adfa:	f7ff fea1 	bl	800ab40 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	689b      	ldr	r3, [r3, #8]
 800ae04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae08:	2b40      	cmp	r3, #64	@ 0x40
 800ae0a:	d109      	bne.n	800ae20 <UART_DMAError+0x62>
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2b22      	cmp	r3, #34	@ 0x22
 800ae10:	d106      	bne.n	800ae20 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	2200      	movs	r2, #0
 800ae16:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ae1a:	6978      	ldr	r0, [r7, #20]
 800ae1c:	f7ff fed1 	bl	800abc2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae26:	f043 0210 	orr.w	r2, r3, #16
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae30:	6978      	ldr	r0, [r7, #20]
 800ae32:	f7ff fa0f 	bl	800a254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae36:	bf00      	nop
 800ae38:	3718      	adds	r7, #24
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}

0800ae3e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae3e:	b580      	push	{r7, lr}
 800ae40:	b084      	sub	sp, #16
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae54:	68f8      	ldr	r0, [r7, #12]
 800ae56:	f7ff f9fd 	bl	800a254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae5a:	bf00      	nop
 800ae5c:	3710      	adds	r7, #16
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}

0800ae62 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ae62:	b580      	push	{r7, lr}
 800ae64:	b088      	sub	sp, #32
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	e853 3f00 	ldrex	r3, [r3]
 800ae76:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae7e:	61fb      	str	r3, [r7, #28]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	461a      	mov	r2, r3
 800ae86:	69fb      	ldr	r3, [r7, #28]
 800ae88:	61bb      	str	r3, [r7, #24]
 800ae8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae8c:	6979      	ldr	r1, [r7, #20]
 800ae8e:	69ba      	ldr	r2, [r7, #24]
 800ae90:	e841 2300 	strex	r3, r2, [r1]
 800ae94:	613b      	str	r3, [r7, #16]
   return(result);
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d1e6      	bne.n	800ae6a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2220      	movs	r2, #32
 800aea0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2200      	movs	r2, #0
 800aea8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f7ff f9be 	bl	800a22c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aeb0:	bf00      	nop
 800aeb2:	3720      	adds	r7, #32
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b083      	sub	sp, #12
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aec0:	bf00      	nop
 800aec2:	370c      	adds	r7, #12
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr

0800aecc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800aecc:	b480      	push	{r7}
 800aece:	b083      	sub	sp, #12
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800aed4:	bf00      	nop
 800aed6:	370c      	adds	r7, #12
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr

0800aee0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b083      	sub	sp, #12
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800aee8:	bf00      	nop
 800aeea:	370c      	adds	r7, #12
 800aeec:	46bd      	mov	sp, r7
 800aeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef2:	4770      	bx	lr

0800aef4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b085      	sub	sp, #20
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af02:	2b01      	cmp	r3, #1
 800af04:	d101      	bne.n	800af0a <HAL_UARTEx_DisableFifoMode+0x16>
 800af06:	2302      	movs	r3, #2
 800af08:	e027      	b.n	800af5a <HAL_UARTEx_DisableFifoMode+0x66>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2201      	movs	r2, #1
 800af0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2224      	movs	r2, #36	@ 0x24
 800af16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	681a      	ldr	r2, [r3, #0]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f022 0201 	bic.w	r2, r2, #1
 800af30:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800af38:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2200      	movs	r2, #0
 800af3e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	68fa      	ldr	r2, [r7, #12]
 800af46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2220      	movs	r2, #32
 800af4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af58:	2300      	movs	r3, #0
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3714      	adds	r7, #20
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr

0800af66 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af66:	b580      	push	{r7, lr}
 800af68:	b084      	sub	sp, #16
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
 800af6e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af76:	2b01      	cmp	r3, #1
 800af78:	d101      	bne.n	800af7e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800af7a:	2302      	movs	r3, #2
 800af7c:	e02d      	b.n	800afda <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2201      	movs	r2, #1
 800af82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2224      	movs	r2, #36	@ 0x24
 800af8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	681a      	ldr	r2, [r3, #0]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f022 0201 	bic.w	r2, r2, #1
 800afa4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	689b      	ldr	r3, [r3, #8]
 800afac:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	683a      	ldr	r2, [r7, #0]
 800afb6:	430a      	orrs	r2, r1
 800afb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f000 f850 	bl	800b060 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	68fa      	ldr	r2, [r7, #12]
 800afc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2220      	movs	r2, #32
 800afcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2200      	movs	r2, #0
 800afd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800afd8:	2300      	movs	r3, #0
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3710      	adds	r7, #16
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}

0800afe2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800afe2:	b580      	push	{r7, lr}
 800afe4:	b084      	sub	sp, #16
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	6078      	str	r0, [r7, #4]
 800afea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aff2:	2b01      	cmp	r3, #1
 800aff4:	d101      	bne.n	800affa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aff6:	2302      	movs	r3, #2
 800aff8:	e02d      	b.n	800b056 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2201      	movs	r2, #1
 800affe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2224      	movs	r2, #36	@ 0x24
 800b006:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	681a      	ldr	r2, [r3, #0]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f022 0201 	bic.w	r2, r2, #1
 800b020:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	689b      	ldr	r3, [r3, #8]
 800b028:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	683a      	ldr	r2, [r7, #0]
 800b032:	430a      	orrs	r2, r1
 800b034:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 f812 	bl	800b060 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	68fa      	ldr	r2, [r7, #12]
 800b042:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2220      	movs	r2, #32
 800b048:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2200      	movs	r2, #0
 800b050:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b054:	2300      	movs	r3, #0
}
 800b056:	4618      	mov	r0, r3
 800b058:	3710      	adds	r7, #16
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}
	...

0800b060 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b060:	b480      	push	{r7}
 800b062:	b085      	sub	sp, #20
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d108      	bne.n	800b082 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2201      	movs	r2, #1
 800b074:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2201      	movs	r2, #1
 800b07c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b080:	e031      	b.n	800b0e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b082:	2308      	movs	r3, #8
 800b084:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b086:	2308      	movs	r3, #8
 800b088:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	689b      	ldr	r3, [r3, #8]
 800b090:	0e5b      	lsrs	r3, r3, #25
 800b092:	b2db      	uxtb	r3, r3
 800b094:	f003 0307 	and.w	r3, r3, #7
 800b098:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	689b      	ldr	r3, [r3, #8]
 800b0a0:	0f5b      	lsrs	r3, r3, #29
 800b0a2:	b2db      	uxtb	r3, r3
 800b0a4:	f003 0307 	and.w	r3, r3, #7
 800b0a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b0aa:	7bbb      	ldrb	r3, [r7, #14]
 800b0ac:	7b3a      	ldrb	r2, [r7, #12]
 800b0ae:	4911      	ldr	r1, [pc, #68]	@ (800b0f4 <UARTEx_SetNbDataToProcess+0x94>)
 800b0b0:	5c8a      	ldrb	r2, [r1, r2]
 800b0b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b0b6:	7b3a      	ldrb	r2, [r7, #12]
 800b0b8:	490f      	ldr	r1, [pc, #60]	@ (800b0f8 <UARTEx_SetNbDataToProcess+0x98>)
 800b0ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b0bc:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0c0:	b29a      	uxth	r2, r3
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b0c8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ca:	7b7a      	ldrb	r2, [r7, #13]
 800b0cc:	4909      	ldr	r1, [pc, #36]	@ (800b0f4 <UARTEx_SetNbDataToProcess+0x94>)
 800b0ce:	5c8a      	ldrb	r2, [r1, r2]
 800b0d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b0d4:	7b7a      	ldrb	r2, [r7, #13]
 800b0d6:	4908      	ldr	r1, [pc, #32]	@ (800b0f8 <UARTEx_SetNbDataToProcess+0x98>)
 800b0d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b0da:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0de:	b29a      	uxth	r2, r3
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b0e6:	bf00      	nop
 800b0e8:	3714      	adds	r7, #20
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr
 800b0f2:	bf00      	nop
 800b0f4:	0800bb30 	.word	0x0800bb30
 800b0f8:	0800bb38 	.word	0x0800bb38

0800b0fc <std>:
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	b510      	push	{r4, lr}
 800b100:	4604      	mov	r4, r0
 800b102:	6083      	str	r3, [r0, #8]
 800b104:	8181      	strh	r1, [r0, #12]
 800b106:	4619      	mov	r1, r3
 800b108:	6643      	str	r3, [r0, #100]	@ 0x64
 800b10a:	81c2      	strh	r2, [r0, #14]
 800b10c:	2208      	movs	r2, #8
 800b10e:	6183      	str	r3, [r0, #24]
 800b110:	e9c0 3300 	strd	r3, r3, [r0]
 800b114:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b118:	305c      	adds	r0, #92	@ 0x5c
 800b11a:	f000 f9e7 	bl	800b4ec <memset>
 800b11e:	4b0d      	ldr	r3, [pc, #52]	@ (800b154 <std+0x58>)
 800b120:	6224      	str	r4, [r4, #32]
 800b122:	6263      	str	r3, [r4, #36]	@ 0x24
 800b124:	4b0c      	ldr	r3, [pc, #48]	@ (800b158 <std+0x5c>)
 800b126:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b128:	4b0c      	ldr	r3, [pc, #48]	@ (800b15c <std+0x60>)
 800b12a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b12c:	4b0c      	ldr	r3, [pc, #48]	@ (800b160 <std+0x64>)
 800b12e:	6323      	str	r3, [r4, #48]	@ 0x30
 800b130:	4b0c      	ldr	r3, [pc, #48]	@ (800b164 <std+0x68>)
 800b132:	429c      	cmp	r4, r3
 800b134:	d006      	beq.n	800b144 <std+0x48>
 800b136:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b13a:	4294      	cmp	r4, r2
 800b13c:	d002      	beq.n	800b144 <std+0x48>
 800b13e:	33d0      	adds	r3, #208	@ 0xd0
 800b140:	429c      	cmp	r4, r3
 800b142:	d105      	bne.n	800b150 <std+0x54>
 800b144:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b14c:	f000 ba46 	b.w	800b5dc <__retarget_lock_init_recursive>
 800b150:	bd10      	pop	{r4, pc}
 800b152:	bf00      	nop
 800b154:	0800b33d 	.word	0x0800b33d
 800b158:	0800b35f 	.word	0x0800b35f
 800b15c:	0800b397 	.word	0x0800b397
 800b160:	0800b3bb 	.word	0x0800b3bb
 800b164:	20000394 	.word	0x20000394

0800b168 <stdio_exit_handler>:
 800b168:	4a02      	ldr	r2, [pc, #8]	@ (800b174 <stdio_exit_handler+0xc>)
 800b16a:	4903      	ldr	r1, [pc, #12]	@ (800b178 <stdio_exit_handler+0x10>)
 800b16c:	4803      	ldr	r0, [pc, #12]	@ (800b17c <stdio_exit_handler+0x14>)
 800b16e:	f000 b869 	b.w	800b244 <_fwalk_sglue>
 800b172:	bf00      	nop
 800b174:	2000000c 	.word	0x2000000c
 800b178:	0800b8dd 	.word	0x0800b8dd
 800b17c:	2000001c 	.word	0x2000001c

0800b180 <cleanup_stdio>:
 800b180:	6841      	ldr	r1, [r0, #4]
 800b182:	4b0c      	ldr	r3, [pc, #48]	@ (800b1b4 <cleanup_stdio+0x34>)
 800b184:	4299      	cmp	r1, r3
 800b186:	b510      	push	{r4, lr}
 800b188:	4604      	mov	r4, r0
 800b18a:	d001      	beq.n	800b190 <cleanup_stdio+0x10>
 800b18c:	f000 fba6 	bl	800b8dc <_fflush_r>
 800b190:	68a1      	ldr	r1, [r4, #8]
 800b192:	4b09      	ldr	r3, [pc, #36]	@ (800b1b8 <cleanup_stdio+0x38>)
 800b194:	4299      	cmp	r1, r3
 800b196:	d002      	beq.n	800b19e <cleanup_stdio+0x1e>
 800b198:	4620      	mov	r0, r4
 800b19a:	f000 fb9f 	bl	800b8dc <_fflush_r>
 800b19e:	68e1      	ldr	r1, [r4, #12]
 800b1a0:	4b06      	ldr	r3, [pc, #24]	@ (800b1bc <cleanup_stdio+0x3c>)
 800b1a2:	4299      	cmp	r1, r3
 800b1a4:	d004      	beq.n	800b1b0 <cleanup_stdio+0x30>
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1ac:	f000 bb96 	b.w	800b8dc <_fflush_r>
 800b1b0:	bd10      	pop	{r4, pc}
 800b1b2:	bf00      	nop
 800b1b4:	20000394 	.word	0x20000394
 800b1b8:	200003fc 	.word	0x200003fc
 800b1bc:	20000464 	.word	0x20000464

0800b1c0 <global_stdio_init.part.0>:
 800b1c0:	b510      	push	{r4, lr}
 800b1c2:	4b0b      	ldr	r3, [pc, #44]	@ (800b1f0 <global_stdio_init.part.0+0x30>)
 800b1c4:	2104      	movs	r1, #4
 800b1c6:	4c0b      	ldr	r4, [pc, #44]	@ (800b1f4 <global_stdio_init.part.0+0x34>)
 800b1c8:	4a0b      	ldr	r2, [pc, #44]	@ (800b1f8 <global_stdio_init.part.0+0x38>)
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	601a      	str	r2, [r3, #0]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	f7ff ff94 	bl	800b0fc <std>
 800b1d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b1d8:	2201      	movs	r2, #1
 800b1da:	2109      	movs	r1, #9
 800b1dc:	f7ff ff8e 	bl	800b0fc <std>
 800b1e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b1e4:	2202      	movs	r2, #2
 800b1e6:	2112      	movs	r1, #18
 800b1e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1ec:	f7ff bf86 	b.w	800b0fc <std>
 800b1f0:	200004cc 	.word	0x200004cc
 800b1f4:	20000394 	.word	0x20000394
 800b1f8:	0800b169 	.word	0x0800b169

0800b1fc <__sfp_lock_acquire>:
 800b1fc:	4801      	ldr	r0, [pc, #4]	@ (800b204 <__sfp_lock_acquire+0x8>)
 800b1fe:	f000 b9ee 	b.w	800b5de <__retarget_lock_acquire_recursive>
 800b202:	bf00      	nop
 800b204:	200004d5 	.word	0x200004d5

0800b208 <__sfp_lock_release>:
 800b208:	4801      	ldr	r0, [pc, #4]	@ (800b210 <__sfp_lock_release+0x8>)
 800b20a:	f000 b9e9 	b.w	800b5e0 <__retarget_lock_release_recursive>
 800b20e:	bf00      	nop
 800b210:	200004d5 	.word	0x200004d5

0800b214 <__sinit>:
 800b214:	b510      	push	{r4, lr}
 800b216:	4604      	mov	r4, r0
 800b218:	f7ff fff0 	bl	800b1fc <__sfp_lock_acquire>
 800b21c:	6a23      	ldr	r3, [r4, #32]
 800b21e:	b11b      	cbz	r3, 800b228 <__sinit+0x14>
 800b220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b224:	f7ff bff0 	b.w	800b208 <__sfp_lock_release>
 800b228:	4b04      	ldr	r3, [pc, #16]	@ (800b23c <__sinit+0x28>)
 800b22a:	6223      	str	r3, [r4, #32]
 800b22c:	4b04      	ldr	r3, [pc, #16]	@ (800b240 <__sinit+0x2c>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d1f5      	bne.n	800b220 <__sinit+0xc>
 800b234:	f7ff ffc4 	bl	800b1c0 <global_stdio_init.part.0>
 800b238:	e7f2      	b.n	800b220 <__sinit+0xc>
 800b23a:	bf00      	nop
 800b23c:	0800b181 	.word	0x0800b181
 800b240:	200004cc 	.word	0x200004cc

0800b244 <_fwalk_sglue>:
 800b244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b248:	4607      	mov	r7, r0
 800b24a:	4688      	mov	r8, r1
 800b24c:	4614      	mov	r4, r2
 800b24e:	2600      	movs	r6, #0
 800b250:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b254:	f1b9 0901 	subs.w	r9, r9, #1
 800b258:	d505      	bpl.n	800b266 <_fwalk_sglue+0x22>
 800b25a:	6824      	ldr	r4, [r4, #0]
 800b25c:	2c00      	cmp	r4, #0
 800b25e:	d1f7      	bne.n	800b250 <_fwalk_sglue+0xc>
 800b260:	4630      	mov	r0, r6
 800b262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b266:	89ab      	ldrh	r3, [r5, #12]
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d907      	bls.n	800b27c <_fwalk_sglue+0x38>
 800b26c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b270:	3301      	adds	r3, #1
 800b272:	d003      	beq.n	800b27c <_fwalk_sglue+0x38>
 800b274:	4629      	mov	r1, r5
 800b276:	4638      	mov	r0, r7
 800b278:	47c0      	blx	r8
 800b27a:	4306      	orrs	r6, r0
 800b27c:	3568      	adds	r5, #104	@ 0x68
 800b27e:	e7e9      	b.n	800b254 <_fwalk_sglue+0x10>

0800b280 <_puts_r>:
 800b280:	6a03      	ldr	r3, [r0, #32]
 800b282:	b570      	push	{r4, r5, r6, lr}
 800b284:	4605      	mov	r5, r0
 800b286:	460e      	mov	r6, r1
 800b288:	6884      	ldr	r4, [r0, #8]
 800b28a:	b90b      	cbnz	r3, 800b290 <_puts_r+0x10>
 800b28c:	f7ff ffc2 	bl	800b214 <__sinit>
 800b290:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b292:	07db      	lsls	r3, r3, #31
 800b294:	d405      	bmi.n	800b2a2 <_puts_r+0x22>
 800b296:	89a3      	ldrh	r3, [r4, #12]
 800b298:	0598      	lsls	r0, r3, #22
 800b29a:	d402      	bmi.n	800b2a2 <_puts_r+0x22>
 800b29c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b29e:	f000 f99e 	bl	800b5de <__retarget_lock_acquire_recursive>
 800b2a2:	89a3      	ldrh	r3, [r4, #12]
 800b2a4:	0719      	lsls	r1, r3, #28
 800b2a6:	d502      	bpl.n	800b2ae <_puts_r+0x2e>
 800b2a8:	6923      	ldr	r3, [r4, #16]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d135      	bne.n	800b31a <_puts_r+0x9a>
 800b2ae:	4621      	mov	r1, r4
 800b2b0:	4628      	mov	r0, r5
 800b2b2:	f000 f8c5 	bl	800b440 <__swsetup_r>
 800b2b6:	b380      	cbz	r0, 800b31a <_puts_r+0x9a>
 800b2b8:	f04f 35ff 	mov.w	r5, #4294967295
 800b2bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b2be:	07da      	lsls	r2, r3, #31
 800b2c0:	d405      	bmi.n	800b2ce <_puts_r+0x4e>
 800b2c2:	89a3      	ldrh	r3, [r4, #12]
 800b2c4:	059b      	lsls	r3, r3, #22
 800b2c6:	d402      	bmi.n	800b2ce <_puts_r+0x4e>
 800b2c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b2ca:	f000 f989 	bl	800b5e0 <__retarget_lock_release_recursive>
 800b2ce:	4628      	mov	r0, r5
 800b2d0:	bd70      	pop	{r4, r5, r6, pc}
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	da04      	bge.n	800b2e0 <_puts_r+0x60>
 800b2d6:	69a2      	ldr	r2, [r4, #24]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	dc17      	bgt.n	800b30c <_puts_r+0x8c>
 800b2dc:	290a      	cmp	r1, #10
 800b2de:	d015      	beq.n	800b30c <_puts_r+0x8c>
 800b2e0:	6823      	ldr	r3, [r4, #0]
 800b2e2:	1c5a      	adds	r2, r3, #1
 800b2e4:	6022      	str	r2, [r4, #0]
 800b2e6:	7019      	strb	r1, [r3, #0]
 800b2e8:	68a3      	ldr	r3, [r4, #8]
 800b2ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b2ee:	3b01      	subs	r3, #1
 800b2f0:	60a3      	str	r3, [r4, #8]
 800b2f2:	2900      	cmp	r1, #0
 800b2f4:	d1ed      	bne.n	800b2d2 <_puts_r+0x52>
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	da11      	bge.n	800b31e <_puts_r+0x9e>
 800b2fa:	4622      	mov	r2, r4
 800b2fc:	210a      	movs	r1, #10
 800b2fe:	4628      	mov	r0, r5
 800b300:	f000 f85f 	bl	800b3c2 <__swbuf_r>
 800b304:	3001      	adds	r0, #1
 800b306:	d0d7      	beq.n	800b2b8 <_puts_r+0x38>
 800b308:	250a      	movs	r5, #10
 800b30a:	e7d7      	b.n	800b2bc <_puts_r+0x3c>
 800b30c:	4622      	mov	r2, r4
 800b30e:	4628      	mov	r0, r5
 800b310:	f000 f857 	bl	800b3c2 <__swbuf_r>
 800b314:	3001      	adds	r0, #1
 800b316:	d1e7      	bne.n	800b2e8 <_puts_r+0x68>
 800b318:	e7ce      	b.n	800b2b8 <_puts_r+0x38>
 800b31a:	3e01      	subs	r6, #1
 800b31c:	e7e4      	b.n	800b2e8 <_puts_r+0x68>
 800b31e:	6823      	ldr	r3, [r4, #0]
 800b320:	1c5a      	adds	r2, r3, #1
 800b322:	6022      	str	r2, [r4, #0]
 800b324:	220a      	movs	r2, #10
 800b326:	701a      	strb	r2, [r3, #0]
 800b328:	e7ee      	b.n	800b308 <_puts_r+0x88>
	...

0800b32c <puts>:
 800b32c:	4b02      	ldr	r3, [pc, #8]	@ (800b338 <puts+0xc>)
 800b32e:	4601      	mov	r1, r0
 800b330:	6818      	ldr	r0, [r3, #0]
 800b332:	f7ff bfa5 	b.w	800b280 <_puts_r>
 800b336:	bf00      	nop
 800b338:	20000018 	.word	0x20000018

0800b33c <__sread>:
 800b33c:	b510      	push	{r4, lr}
 800b33e:	460c      	mov	r4, r1
 800b340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b344:	f000 f8fc 	bl	800b540 <_read_r>
 800b348:	2800      	cmp	r0, #0
 800b34a:	bfab      	itete	ge
 800b34c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b34e:	89a3      	ldrhlt	r3, [r4, #12]
 800b350:	181b      	addge	r3, r3, r0
 800b352:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b356:	bfac      	ite	ge
 800b358:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b35a:	81a3      	strhlt	r3, [r4, #12]
 800b35c:	bd10      	pop	{r4, pc}

0800b35e <__swrite>:
 800b35e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b362:	461f      	mov	r7, r3
 800b364:	898b      	ldrh	r3, [r1, #12]
 800b366:	4605      	mov	r5, r0
 800b368:	460c      	mov	r4, r1
 800b36a:	05db      	lsls	r3, r3, #23
 800b36c:	4616      	mov	r6, r2
 800b36e:	d505      	bpl.n	800b37c <__swrite+0x1e>
 800b370:	2302      	movs	r3, #2
 800b372:	2200      	movs	r2, #0
 800b374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b378:	f000 f8d0 	bl	800b51c <_lseek_r>
 800b37c:	89a3      	ldrh	r3, [r4, #12]
 800b37e:	4632      	mov	r2, r6
 800b380:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b384:	4628      	mov	r0, r5
 800b386:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b38a:	81a3      	strh	r3, [r4, #12]
 800b38c:	463b      	mov	r3, r7
 800b38e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b392:	f000 b8e7 	b.w	800b564 <_write_r>

0800b396 <__sseek>:
 800b396:	b510      	push	{r4, lr}
 800b398:	460c      	mov	r4, r1
 800b39a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b39e:	f000 f8bd 	bl	800b51c <_lseek_r>
 800b3a2:	1c43      	adds	r3, r0, #1
 800b3a4:	89a3      	ldrh	r3, [r4, #12]
 800b3a6:	bf15      	itete	ne
 800b3a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b3aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b3ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b3b2:	81a3      	strheq	r3, [r4, #12]
 800b3b4:	bf18      	it	ne
 800b3b6:	81a3      	strhne	r3, [r4, #12]
 800b3b8:	bd10      	pop	{r4, pc}

0800b3ba <__sclose>:
 800b3ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3be:	f000 b89d 	b.w	800b4fc <_close_r>

0800b3c2 <__swbuf_r>:
 800b3c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3c4:	460e      	mov	r6, r1
 800b3c6:	4614      	mov	r4, r2
 800b3c8:	4605      	mov	r5, r0
 800b3ca:	b118      	cbz	r0, 800b3d4 <__swbuf_r+0x12>
 800b3cc:	6a03      	ldr	r3, [r0, #32]
 800b3ce:	b90b      	cbnz	r3, 800b3d4 <__swbuf_r+0x12>
 800b3d0:	f7ff ff20 	bl	800b214 <__sinit>
 800b3d4:	69a3      	ldr	r3, [r4, #24]
 800b3d6:	60a3      	str	r3, [r4, #8]
 800b3d8:	89a3      	ldrh	r3, [r4, #12]
 800b3da:	071a      	lsls	r2, r3, #28
 800b3dc:	d501      	bpl.n	800b3e2 <__swbuf_r+0x20>
 800b3de:	6923      	ldr	r3, [r4, #16]
 800b3e0:	b943      	cbnz	r3, 800b3f4 <__swbuf_r+0x32>
 800b3e2:	4621      	mov	r1, r4
 800b3e4:	4628      	mov	r0, r5
 800b3e6:	f000 f82b 	bl	800b440 <__swsetup_r>
 800b3ea:	b118      	cbz	r0, 800b3f4 <__swbuf_r+0x32>
 800b3ec:	f04f 37ff 	mov.w	r7, #4294967295
 800b3f0:	4638      	mov	r0, r7
 800b3f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3f4:	6823      	ldr	r3, [r4, #0]
 800b3f6:	b2f6      	uxtb	r6, r6
 800b3f8:	6922      	ldr	r2, [r4, #16]
 800b3fa:	4637      	mov	r7, r6
 800b3fc:	1a98      	subs	r0, r3, r2
 800b3fe:	6963      	ldr	r3, [r4, #20]
 800b400:	4283      	cmp	r3, r0
 800b402:	dc05      	bgt.n	800b410 <__swbuf_r+0x4e>
 800b404:	4621      	mov	r1, r4
 800b406:	4628      	mov	r0, r5
 800b408:	f000 fa68 	bl	800b8dc <_fflush_r>
 800b40c:	2800      	cmp	r0, #0
 800b40e:	d1ed      	bne.n	800b3ec <__swbuf_r+0x2a>
 800b410:	68a3      	ldr	r3, [r4, #8]
 800b412:	3b01      	subs	r3, #1
 800b414:	60a3      	str	r3, [r4, #8]
 800b416:	6823      	ldr	r3, [r4, #0]
 800b418:	1c5a      	adds	r2, r3, #1
 800b41a:	6022      	str	r2, [r4, #0]
 800b41c:	701e      	strb	r6, [r3, #0]
 800b41e:	1c43      	adds	r3, r0, #1
 800b420:	6962      	ldr	r2, [r4, #20]
 800b422:	429a      	cmp	r2, r3
 800b424:	d004      	beq.n	800b430 <__swbuf_r+0x6e>
 800b426:	89a3      	ldrh	r3, [r4, #12]
 800b428:	07db      	lsls	r3, r3, #31
 800b42a:	d5e1      	bpl.n	800b3f0 <__swbuf_r+0x2e>
 800b42c:	2e0a      	cmp	r6, #10
 800b42e:	d1df      	bne.n	800b3f0 <__swbuf_r+0x2e>
 800b430:	4621      	mov	r1, r4
 800b432:	4628      	mov	r0, r5
 800b434:	f000 fa52 	bl	800b8dc <_fflush_r>
 800b438:	2800      	cmp	r0, #0
 800b43a:	d0d9      	beq.n	800b3f0 <__swbuf_r+0x2e>
 800b43c:	e7d6      	b.n	800b3ec <__swbuf_r+0x2a>
	...

0800b440 <__swsetup_r>:
 800b440:	b538      	push	{r3, r4, r5, lr}
 800b442:	4b29      	ldr	r3, [pc, #164]	@ (800b4e8 <__swsetup_r+0xa8>)
 800b444:	4605      	mov	r5, r0
 800b446:	460c      	mov	r4, r1
 800b448:	6818      	ldr	r0, [r3, #0]
 800b44a:	b118      	cbz	r0, 800b454 <__swsetup_r+0x14>
 800b44c:	6a03      	ldr	r3, [r0, #32]
 800b44e:	b90b      	cbnz	r3, 800b454 <__swsetup_r+0x14>
 800b450:	f7ff fee0 	bl	800b214 <__sinit>
 800b454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b458:	0719      	lsls	r1, r3, #28
 800b45a:	d422      	bmi.n	800b4a2 <__swsetup_r+0x62>
 800b45c:	06da      	lsls	r2, r3, #27
 800b45e:	d407      	bmi.n	800b470 <__swsetup_r+0x30>
 800b460:	2209      	movs	r2, #9
 800b462:	602a      	str	r2, [r5, #0]
 800b464:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b468:	f04f 30ff 	mov.w	r0, #4294967295
 800b46c:	81a3      	strh	r3, [r4, #12]
 800b46e:	e033      	b.n	800b4d8 <__swsetup_r+0x98>
 800b470:	0758      	lsls	r0, r3, #29
 800b472:	d512      	bpl.n	800b49a <__swsetup_r+0x5a>
 800b474:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b476:	b141      	cbz	r1, 800b48a <__swsetup_r+0x4a>
 800b478:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b47c:	4299      	cmp	r1, r3
 800b47e:	d002      	beq.n	800b486 <__swsetup_r+0x46>
 800b480:	4628      	mov	r0, r5
 800b482:	f000 f8af 	bl	800b5e4 <_free_r>
 800b486:	2300      	movs	r3, #0
 800b488:	6363      	str	r3, [r4, #52]	@ 0x34
 800b48a:	89a3      	ldrh	r3, [r4, #12]
 800b48c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b490:	81a3      	strh	r3, [r4, #12]
 800b492:	2300      	movs	r3, #0
 800b494:	6063      	str	r3, [r4, #4]
 800b496:	6923      	ldr	r3, [r4, #16]
 800b498:	6023      	str	r3, [r4, #0]
 800b49a:	89a3      	ldrh	r3, [r4, #12]
 800b49c:	f043 0308 	orr.w	r3, r3, #8
 800b4a0:	81a3      	strh	r3, [r4, #12]
 800b4a2:	6923      	ldr	r3, [r4, #16]
 800b4a4:	b94b      	cbnz	r3, 800b4ba <__swsetup_r+0x7a>
 800b4a6:	89a3      	ldrh	r3, [r4, #12]
 800b4a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b4ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4b0:	d003      	beq.n	800b4ba <__swsetup_r+0x7a>
 800b4b2:	4621      	mov	r1, r4
 800b4b4:	4628      	mov	r0, r5
 800b4b6:	f000 fa5e 	bl	800b976 <__smakebuf_r>
 800b4ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4be:	f013 0201 	ands.w	r2, r3, #1
 800b4c2:	d00a      	beq.n	800b4da <__swsetup_r+0x9a>
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	60a2      	str	r2, [r4, #8]
 800b4c8:	6962      	ldr	r2, [r4, #20]
 800b4ca:	4252      	negs	r2, r2
 800b4cc:	61a2      	str	r2, [r4, #24]
 800b4ce:	6922      	ldr	r2, [r4, #16]
 800b4d0:	b942      	cbnz	r2, 800b4e4 <__swsetup_r+0xa4>
 800b4d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b4d6:	d1c5      	bne.n	800b464 <__swsetup_r+0x24>
 800b4d8:	bd38      	pop	{r3, r4, r5, pc}
 800b4da:	0799      	lsls	r1, r3, #30
 800b4dc:	bf58      	it	pl
 800b4de:	6962      	ldrpl	r2, [r4, #20]
 800b4e0:	60a2      	str	r2, [r4, #8]
 800b4e2:	e7f4      	b.n	800b4ce <__swsetup_r+0x8e>
 800b4e4:	2000      	movs	r0, #0
 800b4e6:	e7f7      	b.n	800b4d8 <__swsetup_r+0x98>
 800b4e8:	20000018 	.word	0x20000018

0800b4ec <memset>:
 800b4ec:	4402      	add	r2, r0
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	d100      	bne.n	800b4f6 <memset+0xa>
 800b4f4:	4770      	bx	lr
 800b4f6:	f803 1b01 	strb.w	r1, [r3], #1
 800b4fa:	e7f9      	b.n	800b4f0 <memset+0x4>

0800b4fc <_close_r>:
 800b4fc:	b538      	push	{r3, r4, r5, lr}
 800b4fe:	2300      	movs	r3, #0
 800b500:	4d05      	ldr	r5, [pc, #20]	@ (800b518 <_close_r+0x1c>)
 800b502:	4604      	mov	r4, r0
 800b504:	4608      	mov	r0, r1
 800b506:	602b      	str	r3, [r5, #0]
 800b508:	f7f6 f8d3 	bl	80016b2 <_close>
 800b50c:	1c43      	adds	r3, r0, #1
 800b50e:	d102      	bne.n	800b516 <_close_r+0x1a>
 800b510:	682b      	ldr	r3, [r5, #0]
 800b512:	b103      	cbz	r3, 800b516 <_close_r+0x1a>
 800b514:	6023      	str	r3, [r4, #0]
 800b516:	bd38      	pop	{r3, r4, r5, pc}
 800b518:	200004d0 	.word	0x200004d0

0800b51c <_lseek_r>:
 800b51c:	b538      	push	{r3, r4, r5, lr}
 800b51e:	4604      	mov	r4, r0
 800b520:	4d06      	ldr	r5, [pc, #24]	@ (800b53c <_lseek_r+0x20>)
 800b522:	4608      	mov	r0, r1
 800b524:	4611      	mov	r1, r2
 800b526:	2200      	movs	r2, #0
 800b528:	602a      	str	r2, [r5, #0]
 800b52a:	461a      	mov	r2, r3
 800b52c:	f7f6 f8e8 	bl	8001700 <_lseek>
 800b530:	1c43      	adds	r3, r0, #1
 800b532:	d102      	bne.n	800b53a <_lseek_r+0x1e>
 800b534:	682b      	ldr	r3, [r5, #0]
 800b536:	b103      	cbz	r3, 800b53a <_lseek_r+0x1e>
 800b538:	6023      	str	r3, [r4, #0]
 800b53a:	bd38      	pop	{r3, r4, r5, pc}
 800b53c:	200004d0 	.word	0x200004d0

0800b540 <_read_r>:
 800b540:	b538      	push	{r3, r4, r5, lr}
 800b542:	4604      	mov	r4, r0
 800b544:	4d06      	ldr	r5, [pc, #24]	@ (800b560 <_read_r+0x20>)
 800b546:	4608      	mov	r0, r1
 800b548:	4611      	mov	r1, r2
 800b54a:	2200      	movs	r2, #0
 800b54c:	602a      	str	r2, [r5, #0]
 800b54e:	461a      	mov	r2, r3
 800b550:	f7f6 f876 	bl	8001640 <_read>
 800b554:	1c43      	adds	r3, r0, #1
 800b556:	d102      	bne.n	800b55e <_read_r+0x1e>
 800b558:	682b      	ldr	r3, [r5, #0]
 800b55a:	b103      	cbz	r3, 800b55e <_read_r+0x1e>
 800b55c:	6023      	str	r3, [r4, #0]
 800b55e:	bd38      	pop	{r3, r4, r5, pc}
 800b560:	200004d0 	.word	0x200004d0

0800b564 <_write_r>:
 800b564:	b538      	push	{r3, r4, r5, lr}
 800b566:	4604      	mov	r4, r0
 800b568:	4d06      	ldr	r5, [pc, #24]	@ (800b584 <_write_r+0x20>)
 800b56a:	4608      	mov	r0, r1
 800b56c:	4611      	mov	r1, r2
 800b56e:	2200      	movs	r2, #0
 800b570:	602a      	str	r2, [r5, #0]
 800b572:	461a      	mov	r2, r3
 800b574:	f7f6 f881 	bl	800167a <_write>
 800b578:	1c43      	adds	r3, r0, #1
 800b57a:	d102      	bne.n	800b582 <_write_r+0x1e>
 800b57c:	682b      	ldr	r3, [r5, #0]
 800b57e:	b103      	cbz	r3, 800b582 <_write_r+0x1e>
 800b580:	6023      	str	r3, [r4, #0]
 800b582:	bd38      	pop	{r3, r4, r5, pc}
 800b584:	200004d0 	.word	0x200004d0

0800b588 <__errno>:
 800b588:	4b01      	ldr	r3, [pc, #4]	@ (800b590 <__errno+0x8>)
 800b58a:	6818      	ldr	r0, [r3, #0]
 800b58c:	4770      	bx	lr
 800b58e:	bf00      	nop
 800b590:	20000018 	.word	0x20000018

0800b594 <__libc_init_array>:
 800b594:	b570      	push	{r4, r5, r6, lr}
 800b596:	4d0d      	ldr	r5, [pc, #52]	@ (800b5cc <__libc_init_array+0x38>)
 800b598:	2600      	movs	r6, #0
 800b59a:	4c0d      	ldr	r4, [pc, #52]	@ (800b5d0 <__libc_init_array+0x3c>)
 800b59c:	1b64      	subs	r4, r4, r5
 800b59e:	10a4      	asrs	r4, r4, #2
 800b5a0:	42a6      	cmp	r6, r4
 800b5a2:	d109      	bne.n	800b5b8 <__libc_init_array+0x24>
 800b5a4:	4d0b      	ldr	r5, [pc, #44]	@ (800b5d4 <__libc_init_array+0x40>)
 800b5a6:	2600      	movs	r6, #0
 800b5a8:	4c0b      	ldr	r4, [pc, #44]	@ (800b5d8 <__libc_init_array+0x44>)
 800b5aa:	f000 fa53 	bl	800ba54 <_init>
 800b5ae:	1b64      	subs	r4, r4, r5
 800b5b0:	10a4      	asrs	r4, r4, #2
 800b5b2:	42a6      	cmp	r6, r4
 800b5b4:	d105      	bne.n	800b5c2 <__libc_init_array+0x2e>
 800b5b6:	bd70      	pop	{r4, r5, r6, pc}
 800b5b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5bc:	3601      	adds	r6, #1
 800b5be:	4798      	blx	r3
 800b5c0:	e7ee      	b.n	800b5a0 <__libc_init_array+0xc>
 800b5c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5c6:	3601      	adds	r6, #1
 800b5c8:	4798      	blx	r3
 800b5ca:	e7f2      	b.n	800b5b2 <__libc_init_array+0x1e>
 800b5cc:	0800bb48 	.word	0x0800bb48
 800b5d0:	0800bb48 	.word	0x0800bb48
 800b5d4:	0800bb48 	.word	0x0800bb48
 800b5d8:	0800bb4c 	.word	0x0800bb4c

0800b5dc <__retarget_lock_init_recursive>:
 800b5dc:	4770      	bx	lr

0800b5de <__retarget_lock_acquire_recursive>:
 800b5de:	4770      	bx	lr

0800b5e0 <__retarget_lock_release_recursive>:
 800b5e0:	4770      	bx	lr
	...

0800b5e4 <_free_r>:
 800b5e4:	b538      	push	{r3, r4, r5, lr}
 800b5e6:	4605      	mov	r5, r0
 800b5e8:	2900      	cmp	r1, #0
 800b5ea:	d041      	beq.n	800b670 <_free_r+0x8c>
 800b5ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5f0:	1f0c      	subs	r4, r1, #4
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	bfb8      	it	lt
 800b5f6:	18e4      	addlt	r4, r4, r3
 800b5f8:	f000 f8e0 	bl	800b7bc <__malloc_lock>
 800b5fc:	4a1d      	ldr	r2, [pc, #116]	@ (800b674 <_free_r+0x90>)
 800b5fe:	6813      	ldr	r3, [r2, #0]
 800b600:	b933      	cbnz	r3, 800b610 <_free_r+0x2c>
 800b602:	6063      	str	r3, [r4, #4]
 800b604:	6014      	str	r4, [r2, #0]
 800b606:	4628      	mov	r0, r5
 800b608:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b60c:	f000 b8dc 	b.w	800b7c8 <__malloc_unlock>
 800b610:	42a3      	cmp	r3, r4
 800b612:	d908      	bls.n	800b626 <_free_r+0x42>
 800b614:	6820      	ldr	r0, [r4, #0]
 800b616:	1821      	adds	r1, r4, r0
 800b618:	428b      	cmp	r3, r1
 800b61a:	bf01      	itttt	eq
 800b61c:	6819      	ldreq	r1, [r3, #0]
 800b61e:	685b      	ldreq	r3, [r3, #4]
 800b620:	1809      	addeq	r1, r1, r0
 800b622:	6021      	streq	r1, [r4, #0]
 800b624:	e7ed      	b.n	800b602 <_free_r+0x1e>
 800b626:	461a      	mov	r2, r3
 800b628:	685b      	ldr	r3, [r3, #4]
 800b62a:	b10b      	cbz	r3, 800b630 <_free_r+0x4c>
 800b62c:	42a3      	cmp	r3, r4
 800b62e:	d9fa      	bls.n	800b626 <_free_r+0x42>
 800b630:	6811      	ldr	r1, [r2, #0]
 800b632:	1850      	adds	r0, r2, r1
 800b634:	42a0      	cmp	r0, r4
 800b636:	d10b      	bne.n	800b650 <_free_r+0x6c>
 800b638:	6820      	ldr	r0, [r4, #0]
 800b63a:	4401      	add	r1, r0
 800b63c:	1850      	adds	r0, r2, r1
 800b63e:	6011      	str	r1, [r2, #0]
 800b640:	4283      	cmp	r3, r0
 800b642:	d1e0      	bne.n	800b606 <_free_r+0x22>
 800b644:	6818      	ldr	r0, [r3, #0]
 800b646:	685b      	ldr	r3, [r3, #4]
 800b648:	4408      	add	r0, r1
 800b64a:	6053      	str	r3, [r2, #4]
 800b64c:	6010      	str	r0, [r2, #0]
 800b64e:	e7da      	b.n	800b606 <_free_r+0x22>
 800b650:	d902      	bls.n	800b658 <_free_r+0x74>
 800b652:	230c      	movs	r3, #12
 800b654:	602b      	str	r3, [r5, #0]
 800b656:	e7d6      	b.n	800b606 <_free_r+0x22>
 800b658:	6820      	ldr	r0, [r4, #0]
 800b65a:	1821      	adds	r1, r4, r0
 800b65c:	428b      	cmp	r3, r1
 800b65e:	bf02      	ittt	eq
 800b660:	6819      	ldreq	r1, [r3, #0]
 800b662:	685b      	ldreq	r3, [r3, #4]
 800b664:	1809      	addeq	r1, r1, r0
 800b666:	6063      	str	r3, [r4, #4]
 800b668:	bf08      	it	eq
 800b66a:	6021      	streq	r1, [r4, #0]
 800b66c:	6054      	str	r4, [r2, #4]
 800b66e:	e7ca      	b.n	800b606 <_free_r+0x22>
 800b670:	bd38      	pop	{r3, r4, r5, pc}
 800b672:	bf00      	nop
 800b674:	200004dc 	.word	0x200004dc

0800b678 <sbrk_aligned>:
 800b678:	b570      	push	{r4, r5, r6, lr}
 800b67a:	4e0f      	ldr	r6, [pc, #60]	@ (800b6b8 <sbrk_aligned+0x40>)
 800b67c:	460c      	mov	r4, r1
 800b67e:	4605      	mov	r5, r0
 800b680:	6831      	ldr	r1, [r6, #0]
 800b682:	b911      	cbnz	r1, 800b68a <sbrk_aligned+0x12>
 800b684:	f000 f9d6 	bl	800ba34 <_sbrk_r>
 800b688:	6030      	str	r0, [r6, #0]
 800b68a:	4621      	mov	r1, r4
 800b68c:	4628      	mov	r0, r5
 800b68e:	f000 f9d1 	bl	800ba34 <_sbrk_r>
 800b692:	1c43      	adds	r3, r0, #1
 800b694:	d103      	bne.n	800b69e <sbrk_aligned+0x26>
 800b696:	f04f 34ff 	mov.w	r4, #4294967295
 800b69a:	4620      	mov	r0, r4
 800b69c:	bd70      	pop	{r4, r5, r6, pc}
 800b69e:	1cc4      	adds	r4, r0, #3
 800b6a0:	f024 0403 	bic.w	r4, r4, #3
 800b6a4:	42a0      	cmp	r0, r4
 800b6a6:	d0f8      	beq.n	800b69a <sbrk_aligned+0x22>
 800b6a8:	1a21      	subs	r1, r4, r0
 800b6aa:	4628      	mov	r0, r5
 800b6ac:	f000 f9c2 	bl	800ba34 <_sbrk_r>
 800b6b0:	3001      	adds	r0, #1
 800b6b2:	d1f2      	bne.n	800b69a <sbrk_aligned+0x22>
 800b6b4:	e7ef      	b.n	800b696 <sbrk_aligned+0x1e>
 800b6b6:	bf00      	nop
 800b6b8:	200004d8 	.word	0x200004d8

0800b6bc <_malloc_r>:
 800b6bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6c0:	1ccd      	adds	r5, r1, #3
 800b6c2:	4606      	mov	r6, r0
 800b6c4:	f025 0503 	bic.w	r5, r5, #3
 800b6c8:	3508      	adds	r5, #8
 800b6ca:	2d0c      	cmp	r5, #12
 800b6cc:	bf38      	it	cc
 800b6ce:	250c      	movcc	r5, #12
 800b6d0:	2d00      	cmp	r5, #0
 800b6d2:	db01      	blt.n	800b6d8 <_malloc_r+0x1c>
 800b6d4:	42a9      	cmp	r1, r5
 800b6d6:	d904      	bls.n	800b6e2 <_malloc_r+0x26>
 800b6d8:	230c      	movs	r3, #12
 800b6da:	6033      	str	r3, [r6, #0]
 800b6dc:	2000      	movs	r0, #0
 800b6de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b7b8 <_malloc_r+0xfc>
 800b6e6:	f000 f869 	bl	800b7bc <__malloc_lock>
 800b6ea:	f8d8 3000 	ldr.w	r3, [r8]
 800b6ee:	461c      	mov	r4, r3
 800b6f0:	bb44      	cbnz	r4, 800b744 <_malloc_r+0x88>
 800b6f2:	4629      	mov	r1, r5
 800b6f4:	4630      	mov	r0, r6
 800b6f6:	f7ff ffbf 	bl	800b678 <sbrk_aligned>
 800b6fa:	1c43      	adds	r3, r0, #1
 800b6fc:	4604      	mov	r4, r0
 800b6fe:	d158      	bne.n	800b7b2 <_malloc_r+0xf6>
 800b700:	f8d8 4000 	ldr.w	r4, [r8]
 800b704:	4627      	mov	r7, r4
 800b706:	2f00      	cmp	r7, #0
 800b708:	d143      	bne.n	800b792 <_malloc_r+0xd6>
 800b70a:	2c00      	cmp	r4, #0
 800b70c:	d04b      	beq.n	800b7a6 <_malloc_r+0xea>
 800b70e:	6823      	ldr	r3, [r4, #0]
 800b710:	4639      	mov	r1, r7
 800b712:	4630      	mov	r0, r6
 800b714:	eb04 0903 	add.w	r9, r4, r3
 800b718:	f000 f98c 	bl	800ba34 <_sbrk_r>
 800b71c:	4581      	cmp	r9, r0
 800b71e:	d142      	bne.n	800b7a6 <_malloc_r+0xea>
 800b720:	6821      	ldr	r1, [r4, #0]
 800b722:	4630      	mov	r0, r6
 800b724:	1a6d      	subs	r5, r5, r1
 800b726:	4629      	mov	r1, r5
 800b728:	f7ff ffa6 	bl	800b678 <sbrk_aligned>
 800b72c:	3001      	adds	r0, #1
 800b72e:	d03a      	beq.n	800b7a6 <_malloc_r+0xea>
 800b730:	6823      	ldr	r3, [r4, #0]
 800b732:	442b      	add	r3, r5
 800b734:	6023      	str	r3, [r4, #0]
 800b736:	f8d8 3000 	ldr.w	r3, [r8]
 800b73a:	685a      	ldr	r2, [r3, #4]
 800b73c:	bb62      	cbnz	r2, 800b798 <_malloc_r+0xdc>
 800b73e:	f8c8 7000 	str.w	r7, [r8]
 800b742:	e00f      	b.n	800b764 <_malloc_r+0xa8>
 800b744:	6822      	ldr	r2, [r4, #0]
 800b746:	1b52      	subs	r2, r2, r5
 800b748:	d420      	bmi.n	800b78c <_malloc_r+0xd0>
 800b74a:	2a0b      	cmp	r2, #11
 800b74c:	d917      	bls.n	800b77e <_malloc_r+0xc2>
 800b74e:	1961      	adds	r1, r4, r5
 800b750:	42a3      	cmp	r3, r4
 800b752:	6025      	str	r5, [r4, #0]
 800b754:	bf18      	it	ne
 800b756:	6059      	strne	r1, [r3, #4]
 800b758:	6863      	ldr	r3, [r4, #4]
 800b75a:	bf08      	it	eq
 800b75c:	f8c8 1000 	streq.w	r1, [r8]
 800b760:	5162      	str	r2, [r4, r5]
 800b762:	604b      	str	r3, [r1, #4]
 800b764:	4630      	mov	r0, r6
 800b766:	f000 f82f 	bl	800b7c8 <__malloc_unlock>
 800b76a:	f104 000b 	add.w	r0, r4, #11
 800b76e:	1d23      	adds	r3, r4, #4
 800b770:	f020 0007 	bic.w	r0, r0, #7
 800b774:	1ac2      	subs	r2, r0, r3
 800b776:	bf1c      	itt	ne
 800b778:	1a1b      	subne	r3, r3, r0
 800b77a:	50a3      	strne	r3, [r4, r2]
 800b77c:	e7af      	b.n	800b6de <_malloc_r+0x22>
 800b77e:	6862      	ldr	r2, [r4, #4]
 800b780:	42a3      	cmp	r3, r4
 800b782:	bf0c      	ite	eq
 800b784:	f8c8 2000 	streq.w	r2, [r8]
 800b788:	605a      	strne	r2, [r3, #4]
 800b78a:	e7eb      	b.n	800b764 <_malloc_r+0xa8>
 800b78c:	4623      	mov	r3, r4
 800b78e:	6864      	ldr	r4, [r4, #4]
 800b790:	e7ae      	b.n	800b6f0 <_malloc_r+0x34>
 800b792:	463c      	mov	r4, r7
 800b794:	687f      	ldr	r7, [r7, #4]
 800b796:	e7b6      	b.n	800b706 <_malloc_r+0x4a>
 800b798:	461a      	mov	r2, r3
 800b79a:	685b      	ldr	r3, [r3, #4]
 800b79c:	42a3      	cmp	r3, r4
 800b79e:	d1fb      	bne.n	800b798 <_malloc_r+0xdc>
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	6053      	str	r3, [r2, #4]
 800b7a4:	e7de      	b.n	800b764 <_malloc_r+0xa8>
 800b7a6:	230c      	movs	r3, #12
 800b7a8:	4630      	mov	r0, r6
 800b7aa:	6033      	str	r3, [r6, #0]
 800b7ac:	f000 f80c 	bl	800b7c8 <__malloc_unlock>
 800b7b0:	e794      	b.n	800b6dc <_malloc_r+0x20>
 800b7b2:	6005      	str	r5, [r0, #0]
 800b7b4:	e7d6      	b.n	800b764 <_malloc_r+0xa8>
 800b7b6:	bf00      	nop
 800b7b8:	200004dc 	.word	0x200004dc

0800b7bc <__malloc_lock>:
 800b7bc:	4801      	ldr	r0, [pc, #4]	@ (800b7c4 <__malloc_lock+0x8>)
 800b7be:	f7ff bf0e 	b.w	800b5de <__retarget_lock_acquire_recursive>
 800b7c2:	bf00      	nop
 800b7c4:	200004d4 	.word	0x200004d4

0800b7c8 <__malloc_unlock>:
 800b7c8:	4801      	ldr	r0, [pc, #4]	@ (800b7d0 <__malloc_unlock+0x8>)
 800b7ca:	f7ff bf09 	b.w	800b5e0 <__retarget_lock_release_recursive>
 800b7ce:	bf00      	nop
 800b7d0:	200004d4 	.word	0x200004d4

0800b7d4 <__sflush_r>:
 800b7d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7dc:	0716      	lsls	r6, r2, #28
 800b7de:	4605      	mov	r5, r0
 800b7e0:	460c      	mov	r4, r1
 800b7e2:	d454      	bmi.n	800b88e <__sflush_r+0xba>
 800b7e4:	684b      	ldr	r3, [r1, #4]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	dc02      	bgt.n	800b7f0 <__sflush_r+0x1c>
 800b7ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	dd48      	ble.n	800b882 <__sflush_r+0xae>
 800b7f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b7f2:	2e00      	cmp	r6, #0
 800b7f4:	d045      	beq.n	800b882 <__sflush_r+0xae>
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b7fc:	682f      	ldr	r7, [r5, #0]
 800b7fe:	6a21      	ldr	r1, [r4, #32]
 800b800:	602b      	str	r3, [r5, #0]
 800b802:	d030      	beq.n	800b866 <__sflush_r+0x92>
 800b804:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b806:	89a3      	ldrh	r3, [r4, #12]
 800b808:	0759      	lsls	r1, r3, #29
 800b80a:	d505      	bpl.n	800b818 <__sflush_r+0x44>
 800b80c:	6863      	ldr	r3, [r4, #4]
 800b80e:	1ad2      	subs	r2, r2, r3
 800b810:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b812:	b10b      	cbz	r3, 800b818 <__sflush_r+0x44>
 800b814:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b816:	1ad2      	subs	r2, r2, r3
 800b818:	2300      	movs	r3, #0
 800b81a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b81c:	6a21      	ldr	r1, [r4, #32]
 800b81e:	4628      	mov	r0, r5
 800b820:	47b0      	blx	r6
 800b822:	1c43      	adds	r3, r0, #1
 800b824:	89a3      	ldrh	r3, [r4, #12]
 800b826:	d106      	bne.n	800b836 <__sflush_r+0x62>
 800b828:	6829      	ldr	r1, [r5, #0]
 800b82a:	291d      	cmp	r1, #29
 800b82c:	d82b      	bhi.n	800b886 <__sflush_r+0xb2>
 800b82e:	4a2a      	ldr	r2, [pc, #168]	@ (800b8d8 <__sflush_r+0x104>)
 800b830:	410a      	asrs	r2, r1
 800b832:	07d6      	lsls	r6, r2, #31
 800b834:	d427      	bmi.n	800b886 <__sflush_r+0xb2>
 800b836:	2200      	movs	r2, #0
 800b838:	04d9      	lsls	r1, r3, #19
 800b83a:	6062      	str	r2, [r4, #4]
 800b83c:	6922      	ldr	r2, [r4, #16]
 800b83e:	6022      	str	r2, [r4, #0]
 800b840:	d504      	bpl.n	800b84c <__sflush_r+0x78>
 800b842:	1c42      	adds	r2, r0, #1
 800b844:	d101      	bne.n	800b84a <__sflush_r+0x76>
 800b846:	682b      	ldr	r3, [r5, #0]
 800b848:	b903      	cbnz	r3, 800b84c <__sflush_r+0x78>
 800b84a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b84c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b84e:	602f      	str	r7, [r5, #0]
 800b850:	b1b9      	cbz	r1, 800b882 <__sflush_r+0xae>
 800b852:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b856:	4299      	cmp	r1, r3
 800b858:	d002      	beq.n	800b860 <__sflush_r+0x8c>
 800b85a:	4628      	mov	r0, r5
 800b85c:	f7ff fec2 	bl	800b5e4 <_free_r>
 800b860:	2300      	movs	r3, #0
 800b862:	6363      	str	r3, [r4, #52]	@ 0x34
 800b864:	e00d      	b.n	800b882 <__sflush_r+0xae>
 800b866:	2301      	movs	r3, #1
 800b868:	4628      	mov	r0, r5
 800b86a:	47b0      	blx	r6
 800b86c:	4602      	mov	r2, r0
 800b86e:	1c50      	adds	r0, r2, #1
 800b870:	d1c9      	bne.n	800b806 <__sflush_r+0x32>
 800b872:	682b      	ldr	r3, [r5, #0]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d0c6      	beq.n	800b806 <__sflush_r+0x32>
 800b878:	2b1d      	cmp	r3, #29
 800b87a:	d001      	beq.n	800b880 <__sflush_r+0xac>
 800b87c:	2b16      	cmp	r3, #22
 800b87e:	d11d      	bne.n	800b8bc <__sflush_r+0xe8>
 800b880:	602f      	str	r7, [r5, #0]
 800b882:	2000      	movs	r0, #0
 800b884:	e021      	b.n	800b8ca <__sflush_r+0xf6>
 800b886:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b88a:	b21b      	sxth	r3, r3
 800b88c:	e01a      	b.n	800b8c4 <__sflush_r+0xf0>
 800b88e:	690f      	ldr	r7, [r1, #16]
 800b890:	2f00      	cmp	r7, #0
 800b892:	d0f6      	beq.n	800b882 <__sflush_r+0xae>
 800b894:	0793      	lsls	r3, r2, #30
 800b896:	680e      	ldr	r6, [r1, #0]
 800b898:	600f      	str	r7, [r1, #0]
 800b89a:	bf0c      	ite	eq
 800b89c:	694b      	ldreq	r3, [r1, #20]
 800b89e:	2300      	movne	r3, #0
 800b8a0:	eba6 0807 	sub.w	r8, r6, r7
 800b8a4:	608b      	str	r3, [r1, #8]
 800b8a6:	f1b8 0f00 	cmp.w	r8, #0
 800b8aa:	ddea      	ble.n	800b882 <__sflush_r+0xae>
 800b8ac:	4643      	mov	r3, r8
 800b8ae:	463a      	mov	r2, r7
 800b8b0:	6a21      	ldr	r1, [r4, #32]
 800b8b2:	4628      	mov	r0, r5
 800b8b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b8b6:	47b0      	blx	r6
 800b8b8:	2800      	cmp	r0, #0
 800b8ba:	dc08      	bgt.n	800b8ce <__sflush_r+0xfa>
 800b8bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8c8:	81a3      	strh	r3, [r4, #12]
 800b8ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8ce:	4407      	add	r7, r0
 800b8d0:	eba8 0800 	sub.w	r8, r8, r0
 800b8d4:	e7e7      	b.n	800b8a6 <__sflush_r+0xd2>
 800b8d6:	bf00      	nop
 800b8d8:	dfbffffe 	.word	0xdfbffffe

0800b8dc <_fflush_r>:
 800b8dc:	b538      	push	{r3, r4, r5, lr}
 800b8de:	690b      	ldr	r3, [r1, #16]
 800b8e0:	4605      	mov	r5, r0
 800b8e2:	460c      	mov	r4, r1
 800b8e4:	b913      	cbnz	r3, 800b8ec <_fflush_r+0x10>
 800b8e6:	2500      	movs	r5, #0
 800b8e8:	4628      	mov	r0, r5
 800b8ea:	bd38      	pop	{r3, r4, r5, pc}
 800b8ec:	b118      	cbz	r0, 800b8f6 <_fflush_r+0x1a>
 800b8ee:	6a03      	ldr	r3, [r0, #32]
 800b8f0:	b90b      	cbnz	r3, 800b8f6 <_fflush_r+0x1a>
 800b8f2:	f7ff fc8f 	bl	800b214 <__sinit>
 800b8f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d0f3      	beq.n	800b8e6 <_fflush_r+0xa>
 800b8fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b900:	07d0      	lsls	r0, r2, #31
 800b902:	d404      	bmi.n	800b90e <_fflush_r+0x32>
 800b904:	0599      	lsls	r1, r3, #22
 800b906:	d402      	bmi.n	800b90e <_fflush_r+0x32>
 800b908:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b90a:	f7ff fe68 	bl	800b5de <__retarget_lock_acquire_recursive>
 800b90e:	4628      	mov	r0, r5
 800b910:	4621      	mov	r1, r4
 800b912:	f7ff ff5f 	bl	800b7d4 <__sflush_r>
 800b916:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b918:	4605      	mov	r5, r0
 800b91a:	07da      	lsls	r2, r3, #31
 800b91c:	d4e4      	bmi.n	800b8e8 <_fflush_r+0xc>
 800b91e:	89a3      	ldrh	r3, [r4, #12]
 800b920:	059b      	lsls	r3, r3, #22
 800b922:	d4e1      	bmi.n	800b8e8 <_fflush_r+0xc>
 800b924:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b926:	f7ff fe5b 	bl	800b5e0 <__retarget_lock_release_recursive>
 800b92a:	e7dd      	b.n	800b8e8 <_fflush_r+0xc>

0800b92c <__swhatbuf_r>:
 800b92c:	b570      	push	{r4, r5, r6, lr}
 800b92e:	460c      	mov	r4, r1
 800b930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b934:	b096      	sub	sp, #88	@ 0x58
 800b936:	4615      	mov	r5, r2
 800b938:	2900      	cmp	r1, #0
 800b93a:	461e      	mov	r6, r3
 800b93c:	da0c      	bge.n	800b958 <__swhatbuf_r+0x2c>
 800b93e:	89a3      	ldrh	r3, [r4, #12]
 800b940:	2100      	movs	r1, #0
 800b942:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b946:	bf14      	ite	ne
 800b948:	2340      	movne	r3, #64	@ 0x40
 800b94a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b94e:	2000      	movs	r0, #0
 800b950:	6031      	str	r1, [r6, #0]
 800b952:	602b      	str	r3, [r5, #0]
 800b954:	b016      	add	sp, #88	@ 0x58
 800b956:	bd70      	pop	{r4, r5, r6, pc}
 800b958:	466a      	mov	r2, sp
 800b95a:	f000 f849 	bl	800b9f0 <_fstat_r>
 800b95e:	2800      	cmp	r0, #0
 800b960:	dbed      	blt.n	800b93e <__swhatbuf_r+0x12>
 800b962:	9901      	ldr	r1, [sp, #4]
 800b964:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b968:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b96c:	4259      	negs	r1, r3
 800b96e:	4159      	adcs	r1, r3
 800b970:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b974:	e7eb      	b.n	800b94e <__swhatbuf_r+0x22>

0800b976 <__smakebuf_r>:
 800b976:	898b      	ldrh	r3, [r1, #12]
 800b978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b97a:	079d      	lsls	r5, r3, #30
 800b97c:	4606      	mov	r6, r0
 800b97e:	460c      	mov	r4, r1
 800b980:	d507      	bpl.n	800b992 <__smakebuf_r+0x1c>
 800b982:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b986:	6023      	str	r3, [r4, #0]
 800b988:	6123      	str	r3, [r4, #16]
 800b98a:	2301      	movs	r3, #1
 800b98c:	6163      	str	r3, [r4, #20]
 800b98e:	b003      	add	sp, #12
 800b990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b992:	ab01      	add	r3, sp, #4
 800b994:	466a      	mov	r2, sp
 800b996:	f7ff ffc9 	bl	800b92c <__swhatbuf_r>
 800b99a:	9f00      	ldr	r7, [sp, #0]
 800b99c:	4605      	mov	r5, r0
 800b99e:	4630      	mov	r0, r6
 800b9a0:	4639      	mov	r1, r7
 800b9a2:	f7ff fe8b 	bl	800b6bc <_malloc_r>
 800b9a6:	b948      	cbnz	r0, 800b9bc <__smakebuf_r+0x46>
 800b9a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9ac:	059a      	lsls	r2, r3, #22
 800b9ae:	d4ee      	bmi.n	800b98e <__smakebuf_r+0x18>
 800b9b0:	f023 0303 	bic.w	r3, r3, #3
 800b9b4:	f043 0302 	orr.w	r3, r3, #2
 800b9b8:	81a3      	strh	r3, [r4, #12]
 800b9ba:	e7e2      	b.n	800b982 <__smakebuf_r+0xc>
 800b9bc:	89a3      	ldrh	r3, [r4, #12]
 800b9be:	6020      	str	r0, [r4, #0]
 800b9c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9c4:	81a3      	strh	r3, [r4, #12]
 800b9c6:	9b01      	ldr	r3, [sp, #4]
 800b9c8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b9cc:	b15b      	cbz	r3, 800b9e6 <__smakebuf_r+0x70>
 800b9ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9d2:	4630      	mov	r0, r6
 800b9d4:	f000 f81e 	bl	800ba14 <_isatty_r>
 800b9d8:	b128      	cbz	r0, 800b9e6 <__smakebuf_r+0x70>
 800b9da:	89a3      	ldrh	r3, [r4, #12]
 800b9dc:	f023 0303 	bic.w	r3, r3, #3
 800b9e0:	f043 0301 	orr.w	r3, r3, #1
 800b9e4:	81a3      	strh	r3, [r4, #12]
 800b9e6:	89a3      	ldrh	r3, [r4, #12]
 800b9e8:	431d      	orrs	r5, r3
 800b9ea:	81a5      	strh	r5, [r4, #12]
 800b9ec:	e7cf      	b.n	800b98e <__smakebuf_r+0x18>
	...

0800b9f0 <_fstat_r>:
 800b9f0:	b538      	push	{r3, r4, r5, lr}
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	4d06      	ldr	r5, [pc, #24]	@ (800ba10 <_fstat_r+0x20>)
 800b9f6:	4604      	mov	r4, r0
 800b9f8:	4608      	mov	r0, r1
 800b9fa:	4611      	mov	r1, r2
 800b9fc:	602b      	str	r3, [r5, #0]
 800b9fe:	f7f5 fe64 	bl	80016ca <_fstat>
 800ba02:	1c43      	adds	r3, r0, #1
 800ba04:	d102      	bne.n	800ba0c <_fstat_r+0x1c>
 800ba06:	682b      	ldr	r3, [r5, #0]
 800ba08:	b103      	cbz	r3, 800ba0c <_fstat_r+0x1c>
 800ba0a:	6023      	str	r3, [r4, #0]
 800ba0c:	bd38      	pop	{r3, r4, r5, pc}
 800ba0e:	bf00      	nop
 800ba10:	200004d0 	.word	0x200004d0

0800ba14 <_isatty_r>:
 800ba14:	b538      	push	{r3, r4, r5, lr}
 800ba16:	2300      	movs	r3, #0
 800ba18:	4d05      	ldr	r5, [pc, #20]	@ (800ba30 <_isatty_r+0x1c>)
 800ba1a:	4604      	mov	r4, r0
 800ba1c:	4608      	mov	r0, r1
 800ba1e:	602b      	str	r3, [r5, #0]
 800ba20:	f7f5 fe63 	bl	80016ea <_isatty>
 800ba24:	1c43      	adds	r3, r0, #1
 800ba26:	d102      	bne.n	800ba2e <_isatty_r+0x1a>
 800ba28:	682b      	ldr	r3, [r5, #0]
 800ba2a:	b103      	cbz	r3, 800ba2e <_isatty_r+0x1a>
 800ba2c:	6023      	str	r3, [r4, #0]
 800ba2e:	bd38      	pop	{r3, r4, r5, pc}
 800ba30:	200004d0 	.word	0x200004d0

0800ba34 <_sbrk_r>:
 800ba34:	b538      	push	{r3, r4, r5, lr}
 800ba36:	2300      	movs	r3, #0
 800ba38:	4d05      	ldr	r5, [pc, #20]	@ (800ba50 <_sbrk_r+0x1c>)
 800ba3a:	4604      	mov	r4, r0
 800ba3c:	4608      	mov	r0, r1
 800ba3e:	602b      	str	r3, [r5, #0]
 800ba40:	f7f5 fe6c 	bl	800171c <_sbrk>
 800ba44:	1c43      	adds	r3, r0, #1
 800ba46:	d102      	bne.n	800ba4e <_sbrk_r+0x1a>
 800ba48:	682b      	ldr	r3, [r5, #0]
 800ba4a:	b103      	cbz	r3, 800ba4e <_sbrk_r+0x1a>
 800ba4c:	6023      	str	r3, [r4, #0]
 800ba4e:	bd38      	pop	{r3, r4, r5, pc}
 800ba50:	200004d0 	.word	0x200004d0

0800ba54 <_init>:
 800ba54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba56:	bf00      	nop
 800ba58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba5a:	bc08      	pop	{r3}
 800ba5c:	469e      	mov	lr, r3
 800ba5e:	4770      	bx	lr

0800ba60 <_fini>:
 800ba60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba62:	bf00      	nop
 800ba64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba66:	bc08      	pop	{r3}
 800ba68:	469e      	mov	lr, r3
 800ba6a:	4770      	bx	lr
