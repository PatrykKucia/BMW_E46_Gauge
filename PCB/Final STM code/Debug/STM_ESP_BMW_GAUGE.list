
STM_ESP_BMW_GAUGE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1b4  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800a40c  0800a40c  0000b40c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a48c  0800a48c  0000c00c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a48c  0800a48c  0000b48c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a494  0800a494  0000c00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a494  0800a494  0000b494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a498  0800a498  0000b498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800a49c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  2000000c  0800a4a8  0000c00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  0800a4a8  0000c2cc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000c00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ed1  00000000  00000000  0000c042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029c4  00000000  00000000  00023f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  000268d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea7  00000000  00000000  00027b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b3c9  00000000  00000000  00028a2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000199d6  00000000  00000000  00053df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115574  00000000  00000000  0006d7ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00182d42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050b4  00000000  00000000  00182d88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00187e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	2000000c 	.word	0x2000000c
 8000274:	00000000 	.word	0x00000000
 8000278:	0800a3f4 	.word	0x0800a3f4

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000010 	.word	0x20000010
 8000294:	0800a3f4 	.word	0x0800a3f4

08000298 <strlen>:
 8000298:	4603      	mov	r3, r0
 800029a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029e:	2a00      	cmp	r2, #0
 80002a0:	d1fb      	bne.n	800029a <strlen+0x2>
 80002a2:	1a18      	subs	r0, r3, r0
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr

080002a8 <__aeabi_dmul>:
 80002a8:	b570      	push	{r4, r5, r6, lr}
 80002aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002b6:	bf1d      	ittte	ne
 80002b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002bc:	ea94 0f0c 	teqne	r4, ip
 80002c0:	ea95 0f0c 	teqne	r5, ip
 80002c4:	f000 f8de 	bleq	8000484 <__aeabi_dmul+0x1dc>
 80002c8:	442c      	add	r4, r5
 80002ca:	ea81 0603 	eor.w	r6, r1, r3
 80002ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002da:	bf18      	it	ne
 80002dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002e8:	d038      	beq.n	800035c <__aeabi_dmul+0xb4>
 80002ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80002ee:	f04f 0500 	mov.w	r5, #0
 80002f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002fe:	f04f 0600 	mov.w	r6, #0
 8000302:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000306:	f09c 0f00 	teq	ip, #0
 800030a:	bf18      	it	ne
 800030c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000310:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000314:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000318:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800031c:	d204      	bcs.n	8000328 <__aeabi_dmul+0x80>
 800031e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000322:	416d      	adcs	r5, r5
 8000324:	eb46 0606 	adc.w	r6, r6, r6
 8000328:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800032c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000330:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000334:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000338:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800033c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000340:	bf88      	it	hi
 8000342:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000346:	d81e      	bhi.n	8000386 <__aeabi_dmul+0xde>
 8000348:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000360:	ea46 0101 	orr.w	r1, r6, r1
 8000364:	ea40 0002 	orr.w	r0, r0, r2
 8000368:	ea81 0103 	eor.w	r1, r1, r3
 800036c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000370:	bfc2      	ittt	gt
 8000372:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000376:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800037a:	bd70      	popgt	{r4, r5, r6, pc}
 800037c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000380:	f04f 0e00 	mov.w	lr, #0
 8000384:	3c01      	subs	r4, #1
 8000386:	f300 80ab 	bgt.w	80004e0 <__aeabi_dmul+0x238>
 800038a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800038e:	bfde      	ittt	le
 8000390:	2000      	movle	r0, #0
 8000392:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000396:	bd70      	pople	{r4, r5, r6, pc}
 8000398:	f1c4 0400 	rsb	r4, r4, #0
 800039c:	3c20      	subs	r4, #32
 800039e:	da35      	bge.n	800040c <__aeabi_dmul+0x164>
 80003a0:	340c      	adds	r4, #12
 80003a2:	dc1b      	bgt.n	80003dc <__aeabi_dmul+0x134>
 80003a4:	f104 0414 	add.w	r4, r4, #20
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f305 	lsl.w	r3, r0, r5
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f205 	lsl.w	r2, r1, r5
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c8:	fa21 f604 	lsr.w	r6, r1, r4
 80003cc:	eb42 0106 	adc.w	r1, r2, r6
 80003d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003d4:	bf08      	it	eq
 80003d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003da:	bd70      	pop	{r4, r5, r6, pc}
 80003dc:	f1c4 040c 	rsb	r4, r4, #12
 80003e0:	f1c4 0520 	rsb	r5, r4, #32
 80003e4:	fa00 f304 	lsl.w	r3, r0, r4
 80003e8:	fa20 f005 	lsr.w	r0, r0, r5
 80003ec:	fa01 f204 	lsl.w	r2, r1, r4
 80003f0:	ea40 0002 	orr.w	r0, r0, r2
 80003f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003fc:	f141 0100 	adc.w	r1, r1, #0
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f1c4 0520 	rsb	r5, r4, #32
 8000410:	fa00 f205 	lsl.w	r2, r0, r5
 8000414:	ea4e 0e02 	orr.w	lr, lr, r2
 8000418:	fa20 f304 	lsr.w	r3, r0, r4
 800041c:	fa01 f205 	lsl.w	r2, r1, r5
 8000420:	ea43 0302 	orr.w	r3, r3, r2
 8000424:	fa21 f004 	lsr.w	r0, r1, r4
 8000428:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800042c:	fa21 f204 	lsr.w	r2, r1, r4
 8000430:	ea20 0002 	bic.w	r0, r0, r2
 8000434:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000438:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800043c:	bf08      	it	eq
 800043e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000442:	bd70      	pop	{r4, r5, r6, pc}
 8000444:	f094 0f00 	teq	r4, #0
 8000448:	d10f      	bne.n	800046a <__aeabi_dmul+0x1c2>
 800044a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800044e:	0040      	lsls	r0, r0, #1
 8000450:	eb41 0101 	adc.w	r1, r1, r1
 8000454:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000458:	bf08      	it	eq
 800045a:	3c01      	subeq	r4, #1
 800045c:	d0f7      	beq.n	800044e <__aeabi_dmul+0x1a6>
 800045e:	ea41 0106 	orr.w	r1, r1, r6
 8000462:	f095 0f00 	teq	r5, #0
 8000466:	bf18      	it	ne
 8000468:	4770      	bxne	lr
 800046a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800046e:	0052      	lsls	r2, r2, #1
 8000470:	eb43 0303 	adc.w	r3, r3, r3
 8000474:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000478:	bf08      	it	eq
 800047a:	3d01      	subeq	r5, #1
 800047c:	d0f7      	beq.n	800046e <__aeabi_dmul+0x1c6>
 800047e:	ea43 0306 	orr.w	r3, r3, r6
 8000482:	4770      	bx	lr
 8000484:	ea94 0f0c 	teq	r4, ip
 8000488:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800048c:	bf18      	it	ne
 800048e:	ea95 0f0c 	teqne	r5, ip
 8000492:	d00c      	beq.n	80004ae <__aeabi_dmul+0x206>
 8000494:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000498:	bf18      	it	ne
 800049a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800049e:	d1d1      	bne.n	8000444 <__aeabi_dmul+0x19c>
 80004a0:	ea81 0103 	eor.w	r1, r1, r3
 80004a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004a8:	f04f 0000 	mov.w	r0, #0
 80004ac:	bd70      	pop	{r4, r5, r6, pc}
 80004ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b2:	bf06      	itte	eq
 80004b4:	4610      	moveq	r0, r2
 80004b6:	4619      	moveq	r1, r3
 80004b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004bc:	d019      	beq.n	80004f2 <__aeabi_dmul+0x24a>
 80004be:	ea94 0f0c 	teq	r4, ip
 80004c2:	d102      	bne.n	80004ca <__aeabi_dmul+0x222>
 80004c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c8:	d113      	bne.n	80004f2 <__aeabi_dmul+0x24a>
 80004ca:	ea95 0f0c 	teq	r5, ip
 80004ce:	d105      	bne.n	80004dc <__aeabi_dmul+0x234>
 80004d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004d4:	bf1c      	itt	ne
 80004d6:	4610      	movne	r0, r2
 80004d8:	4619      	movne	r1, r3
 80004da:	d10a      	bne.n	80004f2 <__aeabi_dmul+0x24a>
 80004dc:	ea81 0103 	eor.w	r1, r1, r3
 80004e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004ec:	f04f 0000 	mov.w	r0, #0
 80004f0:	bd70      	pop	{r4, r5, r6, pc}
 80004f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004fa:	bd70      	pop	{r4, r5, r6, pc}

080004fc <__aeabi_drsub>:
 80004fc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000500:	e002      	b.n	8000508 <__adddf3>
 8000502:	bf00      	nop

08000504 <__aeabi_dsub>:
 8000504:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000508 <__adddf3>:
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800050e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000512:	ea94 0f05 	teq	r4, r5
 8000516:	bf08      	it	eq
 8000518:	ea90 0f02 	teqeq	r0, r2
 800051c:	bf1f      	itttt	ne
 800051e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000522:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000526:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800052a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800052e:	f000 80e2 	beq.w	80006f6 <__adddf3+0x1ee>
 8000532:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000536:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800053a:	bfb8      	it	lt
 800053c:	426d      	neglt	r5, r5
 800053e:	dd0c      	ble.n	800055a <__adddf3+0x52>
 8000540:	442c      	add	r4, r5
 8000542:	ea80 0202 	eor.w	r2, r0, r2
 8000546:	ea81 0303 	eor.w	r3, r1, r3
 800054a:	ea82 0000 	eor.w	r0, r2, r0
 800054e:	ea83 0101 	eor.w	r1, r3, r1
 8000552:	ea80 0202 	eor.w	r2, r0, r2
 8000556:	ea81 0303 	eor.w	r3, r1, r3
 800055a:	2d36      	cmp	r5, #54	@ 0x36
 800055c:	bf88      	it	hi
 800055e:	bd30      	pophi	{r4, r5, pc}
 8000560:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000564:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000568:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800056c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000570:	d002      	beq.n	8000578 <__adddf3+0x70>
 8000572:	4240      	negs	r0, r0
 8000574:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000578:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800057c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000580:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000584:	d002      	beq.n	800058c <__adddf3+0x84>
 8000586:	4252      	negs	r2, r2
 8000588:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800058c:	ea94 0f05 	teq	r4, r5
 8000590:	f000 80a7 	beq.w	80006e2 <__adddf3+0x1da>
 8000594:	f1a4 0401 	sub.w	r4, r4, #1
 8000598:	f1d5 0e20 	rsbs	lr, r5, #32
 800059c:	db0d      	blt.n	80005ba <__adddf3+0xb2>
 800059e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005a2:	fa22 f205 	lsr.w	r2, r2, r5
 80005a6:	1880      	adds	r0, r0, r2
 80005a8:	f141 0100 	adc.w	r1, r1, #0
 80005ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b0:	1880      	adds	r0, r0, r2
 80005b2:	fa43 f305 	asr.w	r3, r3, r5
 80005b6:	4159      	adcs	r1, r3
 80005b8:	e00e      	b.n	80005d8 <__adddf3+0xd0>
 80005ba:	f1a5 0520 	sub.w	r5, r5, #32
 80005be:	f10e 0e20 	add.w	lr, lr, #32
 80005c2:	2a01      	cmp	r2, #1
 80005c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c8:	bf28      	it	cs
 80005ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005ce:	fa43 f305 	asr.w	r3, r3, r5
 80005d2:	18c0      	adds	r0, r0, r3
 80005d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	d507      	bpl.n	80005ee <__adddf3+0xe6>
 80005de:	f04f 0e00 	mov.w	lr, #0
 80005e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80005e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80005ee:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005f2:	d31b      	bcc.n	800062c <__adddf3+0x124>
 80005f4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005f8:	d30c      	bcc.n	8000614 <__adddf3+0x10c>
 80005fa:	0849      	lsrs	r1, r1, #1
 80005fc:	ea5f 0030 	movs.w	r0, r0, rrx
 8000600:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000604:	f104 0401 	add.w	r4, r4, #1
 8000608:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800060c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000610:	f080 809a 	bcs.w	8000748 <__adddf3+0x240>
 8000614:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000618:	bf08      	it	eq
 800061a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800061e:	f150 0000 	adcs.w	r0, r0, #0
 8000622:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000626:	ea41 0105 	orr.w	r1, r1, r5
 800062a:	bd30      	pop	{r4, r5, pc}
 800062c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000630:	4140      	adcs	r0, r0
 8000632:	eb41 0101 	adc.w	r1, r1, r1
 8000636:	3c01      	subs	r4, #1
 8000638:	bf28      	it	cs
 800063a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800063e:	d2e9      	bcs.n	8000614 <__adddf3+0x10c>
 8000640:	f091 0f00 	teq	r1, #0
 8000644:	bf04      	itt	eq
 8000646:	4601      	moveq	r1, r0
 8000648:	2000      	moveq	r0, #0
 800064a:	fab1 f381 	clz	r3, r1
 800064e:	bf08      	it	eq
 8000650:	3320      	addeq	r3, #32
 8000652:	f1a3 030b 	sub.w	r3, r3, #11
 8000656:	f1b3 0220 	subs.w	r2, r3, #32
 800065a:	da0c      	bge.n	8000676 <__adddf3+0x16e>
 800065c:	320c      	adds	r2, #12
 800065e:	dd08      	ble.n	8000672 <__adddf3+0x16a>
 8000660:	f102 0c14 	add.w	ip, r2, #20
 8000664:	f1c2 020c 	rsb	r2, r2, #12
 8000668:	fa01 f00c 	lsl.w	r0, r1, ip
 800066c:	fa21 f102 	lsr.w	r1, r1, r2
 8000670:	e00c      	b.n	800068c <__adddf3+0x184>
 8000672:	f102 0214 	add.w	r2, r2, #20
 8000676:	bfd8      	it	le
 8000678:	f1c2 0c20 	rsble	ip, r2, #32
 800067c:	fa01 f102 	lsl.w	r1, r1, r2
 8000680:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000684:	bfdc      	itt	le
 8000686:	ea41 010c 	orrle.w	r1, r1, ip
 800068a:	4090      	lslle	r0, r2
 800068c:	1ae4      	subs	r4, r4, r3
 800068e:	bfa2      	ittt	ge
 8000690:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000694:	4329      	orrge	r1, r5
 8000696:	bd30      	popge	{r4, r5, pc}
 8000698:	ea6f 0404 	mvn.w	r4, r4
 800069c:	3c1f      	subs	r4, #31
 800069e:	da1c      	bge.n	80006da <__adddf3+0x1d2>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc0e      	bgt.n	80006c2 <__adddf3+0x1ba>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0220 	rsb	r2, r4, #32
 80006ac:	fa20 f004 	lsr.w	r0, r0, r4
 80006b0:	fa01 f302 	lsl.w	r3, r1, r2
 80006b4:	ea40 0003 	orr.w	r0, r0, r3
 80006b8:	fa21 f304 	lsr.w	r3, r1, r4
 80006bc:	ea45 0103 	orr.w	r1, r5, r3
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	f1c4 040c 	rsb	r4, r4, #12
 80006c6:	f1c4 0220 	rsb	r2, r4, #32
 80006ca:	fa20 f002 	lsr.w	r0, r0, r2
 80006ce:	fa01 f304 	lsl.w	r3, r1, r4
 80006d2:	ea40 0003 	orr.w	r0, r0, r3
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	fa21 f004 	lsr.w	r0, r1, r4
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	f094 0f00 	teq	r4, #0
 80006e6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006ea:	bf06      	itte	eq
 80006ec:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006f0:	3401      	addeq	r4, #1
 80006f2:	3d01      	subne	r5, #1
 80006f4:	e74e      	b.n	8000594 <__adddf3+0x8c>
 80006f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006fa:	bf18      	it	ne
 80006fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000700:	d029      	beq.n	8000756 <__adddf3+0x24e>
 8000702:	ea94 0f05 	teq	r4, r5
 8000706:	bf08      	it	eq
 8000708:	ea90 0f02 	teqeq	r0, r2
 800070c:	d005      	beq.n	800071a <__adddf3+0x212>
 800070e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000712:	bf04      	itt	eq
 8000714:	4619      	moveq	r1, r3
 8000716:	4610      	moveq	r0, r2
 8000718:	bd30      	pop	{r4, r5, pc}
 800071a:	ea91 0f03 	teq	r1, r3
 800071e:	bf1e      	ittt	ne
 8000720:	2100      	movne	r1, #0
 8000722:	2000      	movne	r0, #0
 8000724:	bd30      	popne	{r4, r5, pc}
 8000726:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800072a:	d105      	bne.n	8000738 <__adddf3+0x230>
 800072c:	0040      	lsls	r0, r0, #1
 800072e:	4149      	adcs	r1, r1
 8000730:	bf28      	it	cs
 8000732:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd30      	pop	{r4, r5, pc}
 8000738:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800073c:	bf3c      	itt	cc
 800073e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000742:	bd30      	popcc	{r4, r5, pc}
 8000744:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000748:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800075a:	bf1a      	itte	ne
 800075c:	4619      	movne	r1, r3
 800075e:	4610      	movne	r0, r2
 8000760:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000764:	bf1c      	itt	ne
 8000766:	460b      	movne	r3, r1
 8000768:	4602      	movne	r2, r0
 800076a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800076e:	bf06      	itte	eq
 8000770:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000774:	ea91 0f03 	teqeq	r1, r3
 8000778:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800077c:	bd30      	pop	{r4, r5, pc}
 800077e:	bf00      	nop

08000780 <__aeabi_ui2d>:
 8000780:	f090 0f00 	teq	r0, #0
 8000784:	bf04      	itt	eq
 8000786:	2100      	moveq	r1, #0
 8000788:	4770      	bxeq	lr
 800078a:	b530      	push	{r4, r5, lr}
 800078c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000790:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000794:	f04f 0500 	mov.w	r5, #0
 8000798:	f04f 0100 	mov.w	r1, #0
 800079c:	e750      	b.n	8000640 <__adddf3+0x138>
 800079e:	bf00      	nop

080007a0 <__aeabi_i2d>:
 80007a0:	f090 0f00 	teq	r0, #0
 80007a4:	bf04      	itt	eq
 80007a6:	2100      	moveq	r1, #0
 80007a8:	4770      	bxeq	lr
 80007aa:	b530      	push	{r4, r5, lr}
 80007ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007b4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007b8:	bf48      	it	mi
 80007ba:	4240      	negmi	r0, r0
 80007bc:	f04f 0100 	mov.w	r1, #0
 80007c0:	e73e      	b.n	8000640 <__adddf3+0x138>
 80007c2:	bf00      	nop

080007c4 <__aeabi_f2d>:
 80007c4:	0042      	lsls	r2, r0, #1
 80007c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80007ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007d2:	bf1f      	itttt	ne
 80007d4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007d8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007dc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007e0:	4770      	bxne	lr
 80007e2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007e6:	bf08      	it	eq
 80007e8:	4770      	bxeq	lr
 80007ea:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007ee:	bf04      	itt	eq
 80007f0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007f4:	4770      	bxeq	lr
 80007f6:	b530      	push	{r4, r5, lr}
 80007f8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000800:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	e71c      	b.n	8000640 <__adddf3+0x138>
 8000806:	bf00      	nop

08000808 <__aeabi_ul2d>:
 8000808:	ea50 0201 	orrs.w	r2, r0, r1
 800080c:	bf08      	it	eq
 800080e:	4770      	bxeq	lr
 8000810:	b530      	push	{r4, r5, lr}
 8000812:	f04f 0500 	mov.w	r5, #0
 8000816:	e00a      	b.n	800082e <__aeabi_l2d+0x16>

08000818 <__aeabi_l2d>:
 8000818:	ea50 0201 	orrs.w	r2, r0, r1
 800081c:	bf08      	it	eq
 800081e:	4770      	bxeq	lr
 8000820:	b530      	push	{r4, r5, lr}
 8000822:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000826:	d502      	bpl.n	800082e <__aeabi_l2d+0x16>
 8000828:	4240      	negs	r0, r0
 800082a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800082e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000832:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000836:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800083a:	f43f aed8 	beq.w	80005ee <__adddf3+0xe6>
 800083e:	f04f 0203 	mov.w	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000856:	f1c2 0320 	rsb	r3, r2, #32
 800085a:	fa00 fc03 	lsl.w	ip, r0, r3
 800085e:	fa20 f002 	lsr.w	r0, r0, r2
 8000862:	fa01 fe03 	lsl.w	lr, r1, r3
 8000866:	ea40 000e 	orr.w	r0, r0, lr
 800086a:	fa21 f102 	lsr.w	r1, r1, r2
 800086e:	4414      	add	r4, r2
 8000870:	e6bd      	b.n	80005ee <__adddf3+0xe6>
 8000872:	bf00      	nop

08000874 <__aeabi_d2f>:
 8000874:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000878:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800087c:	bf24      	itt	cs
 800087e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000882:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000886:	d90d      	bls.n	80008a4 <__aeabi_d2f+0x30>
 8000888:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800088c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000890:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000894:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000898:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800089c:	bf08      	it	eq
 800089e:	f020 0001 	biceq.w	r0, r0, #1
 80008a2:	4770      	bx	lr
 80008a4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008a8:	d121      	bne.n	80008ee <__aeabi_d2f+0x7a>
 80008aa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008ae:	bfbc      	itt	lt
 80008b0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008b4:	4770      	bxlt	lr
 80008b6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008be:	f1c2 0218 	rsb	r2, r2, #24
 80008c2:	f1c2 0c20 	rsb	ip, r2, #32
 80008c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80008ca:	fa20 f002 	lsr.w	r0, r0, r2
 80008ce:	bf18      	it	ne
 80008d0:	f040 0001 	orrne.w	r0, r0, #1
 80008d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008e0:	ea40 000c 	orr.w	r0, r0, ip
 80008e4:	fa23 f302 	lsr.w	r3, r3, r2
 80008e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008ec:	e7cc      	b.n	8000888 <__aeabi_d2f+0x14>
 80008ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008f2:	d107      	bne.n	8000904 <__aeabi_d2f+0x90>
 80008f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008f8:	bf1e      	ittt	ne
 80008fa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008fe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000902:	4770      	bxne	lr
 8000904:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000908:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800090c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop

08000914 <__aeabi_uldivmod>:
 8000914:	b953      	cbnz	r3, 800092c <__aeabi_uldivmod+0x18>
 8000916:	b94a      	cbnz	r2, 800092c <__aeabi_uldivmod+0x18>
 8000918:	2900      	cmp	r1, #0
 800091a:	bf08      	it	eq
 800091c:	2800      	cmpeq	r0, #0
 800091e:	bf1c      	itt	ne
 8000920:	f04f 31ff 	movne.w	r1, #4294967295
 8000924:	f04f 30ff 	movne.w	r0, #4294967295
 8000928:	f000 b97e 	b.w	8000c28 <__aeabi_idiv0>
 800092c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000930:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000934:	f000 f806 	bl	8000944 <__udivmoddi4>
 8000938:	f8dd e004 	ldr.w	lr, [sp, #4]
 800093c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000940:	b004      	add	sp, #16
 8000942:	4770      	bx	lr

08000944 <__udivmoddi4>:
 8000944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000948:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800094a:	460c      	mov	r4, r1
 800094c:	2b00      	cmp	r3, #0
 800094e:	d14d      	bne.n	80009ec <__udivmoddi4+0xa8>
 8000950:	428a      	cmp	r2, r1
 8000952:	460f      	mov	r7, r1
 8000954:	4684      	mov	ip, r0
 8000956:	4696      	mov	lr, r2
 8000958:	fab2 f382 	clz	r3, r2
 800095c:	d960      	bls.n	8000a20 <__udivmoddi4+0xdc>
 800095e:	b14b      	cbz	r3, 8000974 <__udivmoddi4+0x30>
 8000960:	fa02 fe03 	lsl.w	lr, r2, r3
 8000964:	f1c3 0220 	rsb	r2, r3, #32
 8000968:	409f      	lsls	r7, r3
 800096a:	fa00 fc03 	lsl.w	ip, r0, r3
 800096e:	fa20 f202 	lsr.w	r2, r0, r2
 8000972:	4317      	orrs	r7, r2
 8000974:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000978:	fa1f f48e 	uxth.w	r4, lr
 800097c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000980:	fbb7 f1f6 	udiv	r1, r7, r6
 8000984:	fb06 7711 	mls	r7, r6, r1, r7
 8000988:	fb01 f004 	mul.w	r0, r1, r4
 800098c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000990:	4290      	cmp	r0, r2
 8000992:	d908      	bls.n	80009a6 <__udivmoddi4+0x62>
 8000994:	eb1e 0202 	adds.w	r2, lr, r2
 8000998:	f101 37ff 	add.w	r7, r1, #4294967295
 800099c:	d202      	bcs.n	80009a4 <__udivmoddi4+0x60>
 800099e:	4290      	cmp	r0, r2
 80009a0:	f200 812d 	bhi.w	8000bfe <__udivmoddi4+0x2ba>
 80009a4:	4639      	mov	r1, r7
 80009a6:	1a12      	subs	r2, r2, r0
 80009a8:	fa1f fc8c 	uxth.w	ip, ip
 80009ac:	fbb2 f0f6 	udiv	r0, r2, r6
 80009b0:	fb06 2210 	mls	r2, r6, r0, r2
 80009b4:	fb00 f404 	mul.w	r4, r0, r4
 80009b8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80009bc:	4564      	cmp	r4, ip
 80009be:	d908      	bls.n	80009d2 <__udivmoddi4+0x8e>
 80009c0:	eb1e 0c0c 	adds.w	ip, lr, ip
 80009c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80009c8:	d202      	bcs.n	80009d0 <__udivmoddi4+0x8c>
 80009ca:	4564      	cmp	r4, ip
 80009cc:	f200 811a 	bhi.w	8000c04 <__udivmoddi4+0x2c0>
 80009d0:	4610      	mov	r0, r2
 80009d2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009d6:	ebac 0c04 	sub.w	ip, ip, r4
 80009da:	2100      	movs	r1, #0
 80009dc:	b125      	cbz	r5, 80009e8 <__udivmoddi4+0xa4>
 80009de:	fa2c f303 	lsr.w	r3, ip, r3
 80009e2:	2200      	movs	r2, #0
 80009e4:	e9c5 3200 	strd	r3, r2, [r5]
 80009e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009ec:	428b      	cmp	r3, r1
 80009ee:	d905      	bls.n	80009fc <__udivmoddi4+0xb8>
 80009f0:	b10d      	cbz	r5, 80009f6 <__udivmoddi4+0xb2>
 80009f2:	e9c5 0100 	strd	r0, r1, [r5]
 80009f6:	2100      	movs	r1, #0
 80009f8:	4608      	mov	r0, r1
 80009fa:	e7f5      	b.n	80009e8 <__udivmoddi4+0xa4>
 80009fc:	fab3 f183 	clz	r1, r3
 8000a00:	2900      	cmp	r1, #0
 8000a02:	d14d      	bne.n	8000aa0 <__udivmoddi4+0x15c>
 8000a04:	42a3      	cmp	r3, r4
 8000a06:	f0c0 80f2 	bcc.w	8000bee <__udivmoddi4+0x2aa>
 8000a0a:	4290      	cmp	r0, r2
 8000a0c:	f080 80ef 	bcs.w	8000bee <__udivmoddi4+0x2aa>
 8000a10:	4606      	mov	r6, r0
 8000a12:	4623      	mov	r3, r4
 8000a14:	4608      	mov	r0, r1
 8000a16:	2d00      	cmp	r5, #0
 8000a18:	d0e6      	beq.n	80009e8 <__udivmoddi4+0xa4>
 8000a1a:	e9c5 6300 	strd	r6, r3, [r5]
 8000a1e:	e7e3      	b.n	80009e8 <__udivmoddi4+0xa4>
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	f040 80a2 	bne.w	8000b6a <__udivmoddi4+0x226>
 8000a26:	1a8a      	subs	r2, r1, r2
 8000a28:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000a2c:	fa1f f68e 	uxth.w	r6, lr
 8000a30:	2101      	movs	r1, #1
 8000a32:	fbb2 f4f7 	udiv	r4, r2, r7
 8000a36:	fb07 2014 	mls	r0, r7, r4, r2
 8000a3a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000a3e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a42:	fb06 f004 	mul.w	r0, r6, r4
 8000a46:	4290      	cmp	r0, r2
 8000a48:	d90f      	bls.n	8000a6a <__udivmoddi4+0x126>
 8000a4a:	eb1e 0202 	adds.w	r2, lr, r2
 8000a4e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000a52:	bf2c      	ite	cs
 8000a54:	f04f 0901 	movcs.w	r9, #1
 8000a58:	f04f 0900 	movcc.w	r9, #0
 8000a5c:	4290      	cmp	r0, r2
 8000a5e:	d903      	bls.n	8000a68 <__udivmoddi4+0x124>
 8000a60:	f1b9 0f00 	cmp.w	r9, #0
 8000a64:	f000 80c8 	beq.w	8000bf8 <__udivmoddi4+0x2b4>
 8000a68:	4644      	mov	r4, r8
 8000a6a:	1a12      	subs	r2, r2, r0
 8000a6c:	fa1f fc8c 	uxth.w	ip, ip
 8000a70:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a74:	fb07 2210 	mls	r2, r7, r0, r2
 8000a78:	fb00 f606 	mul.w	r6, r0, r6
 8000a7c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000a80:	4566      	cmp	r6, ip
 8000a82:	d908      	bls.n	8000a96 <__udivmoddi4+0x152>
 8000a84:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000a88:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a8c:	d202      	bcs.n	8000a94 <__udivmoddi4+0x150>
 8000a8e:	4566      	cmp	r6, ip
 8000a90:	f200 80bb 	bhi.w	8000c0a <__udivmoddi4+0x2c6>
 8000a94:	4610      	mov	r0, r2
 8000a96:	ebac 0c06 	sub.w	ip, ip, r6
 8000a9a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a9e:	e79d      	b.n	80009dc <__udivmoddi4+0x98>
 8000aa0:	f1c1 0620 	rsb	r6, r1, #32
 8000aa4:	408b      	lsls	r3, r1
 8000aa6:	fa04 fe01 	lsl.w	lr, r4, r1
 8000aaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000aae:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ab2:	40f4      	lsrs	r4, r6
 8000ab4:	408a      	lsls	r2, r1
 8000ab6:	431f      	orrs	r7, r3
 8000ab8:	ea4e 030c 	orr.w	r3, lr, ip
 8000abc:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ac0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ac4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ac8:	fa1f fc87 	uxth.w	ip, r7
 8000acc:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ad0:	fb08 4410 	mls	r4, r8, r0, r4
 8000ad4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ad8:	fb00 f90c 	mul.w	r9, r0, ip
 8000adc:	45a1      	cmp	r9, r4
 8000ade:	d90e      	bls.n	8000afe <__udivmoddi4+0x1ba>
 8000ae0:	193c      	adds	r4, r7, r4
 8000ae2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ae6:	bf2c      	ite	cs
 8000ae8:	f04f 0b01 	movcs.w	fp, #1
 8000aec:	f04f 0b00 	movcc.w	fp, #0
 8000af0:	45a1      	cmp	r9, r4
 8000af2:	d903      	bls.n	8000afc <__udivmoddi4+0x1b8>
 8000af4:	f1bb 0f00 	cmp.w	fp, #0
 8000af8:	f000 8093 	beq.w	8000c22 <__udivmoddi4+0x2de>
 8000afc:	4650      	mov	r0, sl
 8000afe:	eba4 0409 	sub.w	r4, r4, r9
 8000b02:	fa1f f983 	uxth.w	r9, r3
 8000b06:	fbb4 f3f8 	udiv	r3, r4, r8
 8000b0a:	fb08 4413 	mls	r4, r8, r3, r4
 8000b0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b12:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b16:	45a4      	cmp	ip, r4
 8000b18:	d906      	bls.n	8000b28 <__udivmoddi4+0x1e4>
 8000b1a:	193c      	adds	r4, r7, r4
 8000b1c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b20:	d201      	bcs.n	8000b26 <__udivmoddi4+0x1e2>
 8000b22:	45a4      	cmp	ip, r4
 8000b24:	d87a      	bhi.n	8000c1c <__udivmoddi4+0x2d8>
 8000b26:	4643      	mov	r3, r8
 8000b28:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b2c:	eba4 040c 	sub.w	r4, r4, ip
 8000b30:	fba0 9802 	umull	r9, r8, r0, r2
 8000b34:	4544      	cmp	r4, r8
 8000b36:	46cc      	mov	ip, r9
 8000b38:	4643      	mov	r3, r8
 8000b3a:	d302      	bcc.n	8000b42 <__udivmoddi4+0x1fe>
 8000b3c:	d106      	bne.n	8000b4c <__udivmoddi4+0x208>
 8000b3e:	45ce      	cmp	lr, r9
 8000b40:	d204      	bcs.n	8000b4c <__udivmoddi4+0x208>
 8000b42:	3801      	subs	r0, #1
 8000b44:	ebb9 0c02 	subs.w	ip, r9, r2
 8000b48:	eb68 0307 	sbc.w	r3, r8, r7
 8000b4c:	b15d      	cbz	r5, 8000b66 <__udivmoddi4+0x222>
 8000b4e:	ebbe 020c 	subs.w	r2, lr, ip
 8000b52:	eb64 0403 	sbc.w	r4, r4, r3
 8000b56:	fa04 f606 	lsl.w	r6, r4, r6
 8000b5a:	fa22 f301 	lsr.w	r3, r2, r1
 8000b5e:	40cc      	lsrs	r4, r1
 8000b60:	431e      	orrs	r6, r3
 8000b62:	e9c5 6400 	strd	r6, r4, [r5]
 8000b66:	2100      	movs	r1, #0
 8000b68:	e73e      	b.n	80009e8 <__udivmoddi4+0xa4>
 8000b6a:	fa02 fe03 	lsl.w	lr, r2, r3
 8000b6e:	f1c3 0120 	rsb	r1, r3, #32
 8000b72:	fa04 f203 	lsl.w	r2, r4, r3
 8000b76:	fa00 fc03 	lsl.w	ip, r0, r3
 8000b7a:	40cc      	lsrs	r4, r1
 8000b7c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000b80:	fa20 f101 	lsr.w	r1, r0, r1
 8000b84:	fa1f f68e 	uxth.w	r6, lr
 8000b88:	fbb4 f0f7 	udiv	r0, r4, r7
 8000b8c:	430a      	orrs	r2, r1
 8000b8e:	fb07 4410 	mls	r4, r7, r0, r4
 8000b92:	0c11      	lsrs	r1, r2, #16
 8000b94:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000b98:	fb00 f406 	mul.w	r4, r0, r6
 8000b9c:	428c      	cmp	r4, r1
 8000b9e:	d90e      	bls.n	8000bbe <__udivmoddi4+0x27a>
 8000ba0:	eb1e 0101 	adds.w	r1, lr, r1
 8000ba4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ba8:	bf2c      	ite	cs
 8000baa:	f04f 0901 	movcs.w	r9, #1
 8000bae:	f04f 0900 	movcc.w	r9, #0
 8000bb2:	428c      	cmp	r4, r1
 8000bb4:	d902      	bls.n	8000bbc <__udivmoddi4+0x278>
 8000bb6:	f1b9 0f00 	cmp.w	r9, #0
 8000bba:	d02c      	beq.n	8000c16 <__udivmoddi4+0x2d2>
 8000bbc:	4640      	mov	r0, r8
 8000bbe:	1b09      	subs	r1, r1, r4
 8000bc0:	b292      	uxth	r2, r2
 8000bc2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000bca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bce:	fb04 f106 	mul.w	r1, r4, r6
 8000bd2:	4291      	cmp	r1, r2
 8000bd4:	d907      	bls.n	8000be6 <__udivmoddi4+0x2a2>
 8000bd6:	eb1e 0202 	adds.w	r2, lr, r2
 8000bda:	f104 38ff 	add.w	r8, r4, #4294967295
 8000bde:	d201      	bcs.n	8000be4 <__udivmoddi4+0x2a0>
 8000be0:	4291      	cmp	r1, r2
 8000be2:	d815      	bhi.n	8000c10 <__udivmoddi4+0x2cc>
 8000be4:	4644      	mov	r4, r8
 8000be6:	1a52      	subs	r2, r2, r1
 8000be8:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000bec:	e721      	b.n	8000a32 <__udivmoddi4+0xee>
 8000bee:	1a86      	subs	r6, r0, r2
 8000bf0:	eb64 0303 	sbc.w	r3, r4, r3
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	e70e      	b.n	8000a16 <__udivmoddi4+0xd2>
 8000bf8:	3c02      	subs	r4, #2
 8000bfa:	4472      	add	r2, lr
 8000bfc:	e735      	b.n	8000a6a <__udivmoddi4+0x126>
 8000bfe:	3902      	subs	r1, #2
 8000c00:	4472      	add	r2, lr
 8000c02:	e6d0      	b.n	80009a6 <__udivmoddi4+0x62>
 8000c04:	44f4      	add	ip, lr
 8000c06:	3802      	subs	r0, #2
 8000c08:	e6e3      	b.n	80009d2 <__udivmoddi4+0x8e>
 8000c0a:	44f4      	add	ip, lr
 8000c0c:	3802      	subs	r0, #2
 8000c0e:	e742      	b.n	8000a96 <__udivmoddi4+0x152>
 8000c10:	3c02      	subs	r4, #2
 8000c12:	4472      	add	r2, lr
 8000c14:	e7e7      	b.n	8000be6 <__udivmoddi4+0x2a2>
 8000c16:	3802      	subs	r0, #2
 8000c18:	4471      	add	r1, lr
 8000c1a:	e7d0      	b.n	8000bbe <__udivmoddi4+0x27a>
 8000c1c:	3b02      	subs	r3, #2
 8000c1e:	443c      	add	r4, r7
 8000c20:	e782      	b.n	8000b28 <__udivmoddi4+0x1e4>
 8000c22:	3802      	subs	r0, #2
 8000c24:	443c      	add	r4, r7
 8000c26:	e76a      	b.n	8000afe <__udivmoddi4+0x1ba>

08000c28 <__aeabi_idiv0>:
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <MX_GPDMA1_Init>:

/* USER CODE END 0 */

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000c32:	4b0d      	ldr	r3, [pc, #52]	@ (8000c68 <MX_GPDMA1_Init+0x3c>)
 8000c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c38:	4a0b      	ldr	r2, [pc, #44]	@ (8000c68 <MX_GPDMA1_Init+0x3c>)
 8000c3a:	f043 0301 	orr.w	r3, r3, #1
 8000c3e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000c42:	4b09      	ldr	r3, [pc, #36]	@ (8000c68 <MX_GPDMA1_Init+0x3c>)
 8000c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2100      	movs	r1, #0
 8000c54:	201b      	movs	r0, #27
 8000c56:	f001 f833 	bl	8001cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000c5a:	201b      	movs	r0, #27
 8000c5c:	f001 f84a 	bl	8001cf4 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	44020c00 	.word	0x44020c00

08000c6c <MX_GPIO_Init>:
     PH1-OSC_OUT(PH1)   ------> RCC_OSC_OUT
     PA13(JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14(JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b088      	sub	sp, #32
 8000c70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c72:	f107 030c 	add.w	r3, r7, #12
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]
 8000c80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c82:	4b2c      	ldr	r3, [pc, #176]	@ (8000d34 <MX_GPIO_Init+0xc8>)
 8000c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c88:	4a2a      	ldr	r2, [pc, #168]	@ (8000d34 <MX_GPIO_Init+0xc8>)
 8000c8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c8e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c92:	4b28      	ldr	r3, [pc, #160]	@ (8000d34 <MX_GPIO_Init+0xc8>)
 8000c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca0:	4b24      	ldr	r3, [pc, #144]	@ (8000d34 <MX_GPIO_Init+0xc8>)
 8000ca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ca6:	4a23      	ldr	r2, [pc, #140]	@ (8000d34 <MX_GPIO_Init+0xc8>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cb0:	4b20      	ldr	r3, [pc, #128]	@ (8000d34 <MX_GPIO_Init+0xc8>)
 8000cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	@ (8000d34 <MX_GPIO_Init+0xc8>)
 8000cc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d34 <MX_GPIO_Init+0xc8>)
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cce:	4b19      	ldr	r3, [pc, #100]	@ (8000d34 <MX_GPIO_Init+0xc8>)
 8000cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	603b      	str	r3, [r7, #0]
 8000cda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ce2:	4815      	ldr	r0, [pc, #84]	@ (8000d38 <MX_GPIO_Init+0xcc>)
 8000ce4:	f002 f952 	bl	8002f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D2_Pin|D1_Pin, GPIO_PIN_RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2118      	movs	r1, #24
 8000cec:	4813      	ldr	r0, [pc, #76]	@ (8000d3c <MX_GPIO_Init+0xd0>)
 8000cee:	f002 f94d 	bl	8002f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : D3_Pin */
  GPIO_InitStruct.Pin = D3_Pin;
 8000cf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cf6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(D3_GPIO_Port, &GPIO_InitStruct);
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	4619      	mov	r1, r3
 8000d0a:	480b      	ldr	r0, [pc, #44]	@ (8000d38 <MX_GPIO_Init+0xcc>)
 8000d0c:	f001 ffec 	bl	8002ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_Pin D1_Pin */
  GPIO_InitStruct.Pin = D2_Pin|D1_Pin;
 8000d10:	2318      	movs	r3, #24
 8000d12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d14:	2301      	movs	r3, #1
 8000d16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	4619      	mov	r1, r3
 8000d26:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <MX_GPIO_Init+0xd0>)
 8000d28:	f001 ffde 	bl	8002ce8 <HAL_GPIO_Init>

}
 8000d2c:	bf00      	nop
 8000d2e:	3720      	adds	r7, #32
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	44020c00 	.word	0x44020c00
 8000d38:	42020000 	.word	0x42020000
 8000d3c:	42020400 	.word	0x42020400

08000d40 <ESP32_SendCommand>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ESP32_SendCommand(const char* command) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff faa5 	bl	8000298 <strlen>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	4808      	ldr	r0, [pc, #32]	@ (8000d7c <ESP32_SendCommand+0x3c>)
 8000d5a:	f007 ffd9 	bl	8008d10 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);  // Końcówka komendy AT
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d62:	2202      	movs	r2, #2
 8000d64:	4906      	ldr	r1, [pc, #24]	@ (8000d80 <ESP32_SendCommand+0x40>)
 8000d66:	4805      	ldr	r0, [pc, #20]	@ (8000d7c <ESP32_SendCommand+0x3c>)
 8000d68:	f007 ffd2 	bl	8008d10 <HAL_UART_Transmit>
    HAL_Delay(100);  // Czekaj na odpowiedź
 8000d6c:	2064      	movs	r0, #100	@ 0x64
 8000d6e:	f000 fecb 	bl	8001b08 <HAL_Delay>
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200001bc 	.word	0x200001bc
 8000d80:	0800a40c 	.word	0x0800a40c

08000d84 <parse_frame>:

void parse_frame(uint8_t *buffer) {
 8000d84:	b590      	push	{r4, r7, lr}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]

    HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);  // Diagnostyka
 8000d8c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d90:	486a      	ldr	r0, [pc, #424]	@ (8000f3c <parse_frame+0x1b8>)
 8000d92:	f002 f913 	bl	8002fbc <HAL_GPIO_TogglePin>

    // Parsowanie danych z FrameBuffer do struktury FrameData
    uint8_t offset = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.time, &buffer[offset], sizeof(frame.time));
 8000d9a:	7bfb      	ldrb	r3, [r7, #15]
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	4413      	add	r3, r2
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	461a      	mov	r2, r3
 8000da4:	4b66      	ldr	r3, [pc, #408]	@ (8000f40 <parse_frame+0x1bc>)
 8000da6:	601a      	str	r2, [r3, #0]
    offset += sizeof(frame.time);
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	3304      	adds	r3, #4
 8000dac:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.car, &buffer[offset], sizeof(frame.car));
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	4413      	add	r3, r2
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	461a      	mov	r2, r3
 8000db8:	4b61      	ldr	r3, [pc, #388]	@ (8000f40 <parse_frame+0x1bc>)
 8000dba:	605a      	str	r2, [r3, #4]
    offset += sizeof(frame.car);
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
 8000dbe:	3304      	adds	r3, #4
 8000dc0:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.flags, &buffer[offset], sizeof(frame.flags));
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	4b5c      	ldr	r3, [pc, #368]	@ (8000f40 <parse_frame+0x1bc>)
 8000dce:	811a      	strh	r2, [r3, #8]
    offset += sizeof(frame.flags);
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	3302      	adds	r3, #2
 8000dd4:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.gear, &buffer[offset], sizeof(frame.gear));
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	4413      	add	r3, r2
 8000ddc:	781a      	ldrb	r2, [r3, #0]
 8000dde:	4b58      	ldr	r3, [pc, #352]	@ (8000f40 <parse_frame+0x1bc>)
 8000de0:	729a      	strb	r2, [r3, #10]
    offset += sizeof(frame.gear);
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	3301      	adds	r3, #1
 8000de6:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.plid, &buffer[offset], sizeof(frame.plid));
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	781a      	ldrb	r2, [r3, #0]
 8000df0:	4b53      	ldr	r3, [pc, #332]	@ (8000f40 <parse_frame+0x1bc>)
 8000df2:	72da      	strb	r2, [r3, #11]
    offset += sizeof(frame.plid);
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	3301      	adds	r3, #1
 8000df8:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.speed, &buffer[offset], sizeof(frame.speed));
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	4413      	add	r3, r2
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	461a      	mov	r2, r3
 8000e04:	4b4e      	ldr	r3, [pc, #312]	@ (8000f40 <parse_frame+0x1bc>)
 8000e06:	60da      	str	r2, [r3, #12]
    offset += sizeof(frame.speed);
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	3304      	adds	r3, #4
 8000e0c:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.rpm, &buffer[offset], sizeof(frame.rpm));
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	4413      	add	r3, r2
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	4b49      	ldr	r3, [pc, #292]	@ (8000f40 <parse_frame+0x1bc>)
 8000e1a:	611a      	str	r2, [r3, #16]
    offset += sizeof(frame.rpm);
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	3304      	adds	r3, #4
 8000e20:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.turbo, &buffer[offset], sizeof(frame.turbo));
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	4413      	add	r3, r2
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4b44      	ldr	r3, [pc, #272]	@ (8000f40 <parse_frame+0x1bc>)
 8000e2e:	615a      	str	r2, [r3, #20]
    offset += sizeof(frame.turbo);
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	3304      	adds	r3, #4
 8000e34:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.engTemp, &buffer[offset], sizeof(frame.engTemp));
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	4b3f      	ldr	r3, [pc, #252]	@ (8000f40 <parse_frame+0x1bc>)
 8000e42:	619a      	str	r2, [r3, #24]
    offset += sizeof(frame.engTemp);
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	3304      	adds	r3, #4
 8000e48:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.fuel, &buffer[offset], sizeof(frame.fuel));
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	4413      	add	r3, r2
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	461a      	mov	r2, r3
 8000e54:	4b3a      	ldr	r3, [pc, #232]	@ (8000f40 <parse_frame+0x1bc>)
 8000e56:	61da      	str	r2, [r3, #28]
    offset += sizeof(frame.fuel);
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	3304      	adds	r3, #4
 8000e5c:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.oilPressure, &buffer[offset], sizeof(frame.oilPressure));
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	4413      	add	r3, r2
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	461a      	mov	r2, r3
 8000e68:	4b35      	ldr	r3, [pc, #212]	@ (8000f40 <parse_frame+0x1bc>)
 8000e6a:	621a      	str	r2, [r3, #32]
    offset += sizeof(frame.oilPressure);
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
 8000e6e:	3304      	adds	r3, #4
 8000e70:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.oilTemp, &buffer[offset], sizeof(frame.oilTemp));
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	4413      	add	r3, r2
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4b30      	ldr	r3, [pc, #192]	@ (8000f40 <parse_frame+0x1bc>)
 8000e7e:	625a      	str	r2, [r3, #36]	@ 0x24
    offset += sizeof(frame.oilTemp);
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	3304      	adds	r3, #4
 8000e84:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.dashLights, &buffer[offset], sizeof(frame.dashLights));
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4b2b      	ldr	r3, [pc, #172]	@ (8000f40 <parse_frame+0x1bc>)
 8000e92:	629a      	str	r2, [r3, #40]	@ 0x28
    offset += sizeof(frame.dashLights);
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	3304      	adds	r3, #4
 8000e98:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.showLights, &buffer[offset], sizeof(frame.showLights));
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4b26      	ldr	r3, [pc, #152]	@ (8000f40 <parse_frame+0x1bc>)
 8000ea6:	62da      	str	r2, [r3, #44]	@ 0x2c
    offset += sizeof(frame.showLights);
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	3304      	adds	r3, #4
 8000eac:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.throttle, &buffer[offset], sizeof(frame.throttle));
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4b21      	ldr	r3, [pc, #132]	@ (8000f40 <parse_frame+0x1bc>)
 8000eba:	631a      	str	r2, [r3, #48]	@ 0x30
    offset += sizeof(frame.throttle);
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	3304      	adds	r3, #4
 8000ec0:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.brake, &buffer[offset], sizeof(frame.brake));
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8000f40 <parse_frame+0x1bc>)
 8000ece:	635a      	str	r2, [r3, #52]	@ 0x34
    offset += sizeof(frame.brake);
 8000ed0:	7bfb      	ldrb	r3, [r7, #15]
 8000ed2:	3304      	adds	r3, #4
 8000ed4:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.clutch, &buffer[offset], sizeof(frame.clutch));
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	4413      	add	r3, r2
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	4b17      	ldr	r3, [pc, #92]	@ (8000f40 <parse_frame+0x1bc>)
 8000ee2:	639a      	str	r2, [r3, #56]	@ 0x38
    offset += sizeof(frame.clutch);
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	3304      	adds	r3, #4
 8000ee8:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.display1, &buffer[offset], sizeof(frame.display1));
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	441a      	add	r2, r3
 8000ef0:	4b13      	ldr	r3, [pc, #76]	@ (8000f40 <parse_frame+0x1bc>)
 8000ef2:	f103 043c 	add.w	r4, r3, #60	@ 0x3c
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	6818      	ldr	r0, [r3, #0]
 8000efa:	6859      	ldr	r1, [r3, #4]
 8000efc:	689a      	ldr	r2, [r3, #8]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    offset += sizeof(frame.display1);
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	3310      	adds	r3, #16
 8000f06:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.display2, &buffer[offset], sizeof(frame.display2));
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	441a      	add	r2, r3
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f40 <parse_frame+0x1bc>)
 8000f10:	f103 044c 	add.w	r4, r3, #76	@ 0x4c
 8000f14:	4613      	mov	r3, r2
 8000f16:	6818      	ldr	r0, [r3, #0]
 8000f18:	6859      	ldr	r1, [r3, #4]
 8000f1a:	689a      	ldr	r2, [r3, #8]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    offset += sizeof(frame.display2);
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	3310      	adds	r3, #16
 8000f24:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.id, &buffer[offset], sizeof(frame.id));
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4b03      	ldr	r3, [pc, #12]	@ (8000f40 <parse_frame+0x1bc>)
 8000f32:	65da      	str	r2, [r3, #92]	@ 0x5c

    // W tym miejscu masz już poprawnie wypełnioną strukturę `frame`
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd90      	pop	{r4, r7, pc}
 8000f3c:	42020000 	.word	0x42020000
 8000f40:	2000010c 	.word	0x2000010c

08000f44 <process_frame>:
void process_frame(void) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
    if (frameReady) {
 8000f48:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <process_frame+0x1c>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d005      	beq.n	8000f5c <process_frame+0x18>
        parse_frame(FrameBuffer);
 8000f50:	4804      	ldr	r0, [pc, #16]	@ (8000f64 <process_frame+0x20>)
 8000f52:	f7ff ff17 	bl	8000d84 <parse_frame>
        frameReady = false;
 8000f56:	4b02      	ldr	r3, [pc, #8]	@ (8000f60 <process_frame+0x1c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]
    }
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	2000010a 	.word	0x2000010a
 8000f64:	200000a8 	.word	0x200000a8

08000f68 <Set_PWM_Frequency>:
void Set_PWM_Frequency(uint16_t speed_kmh) {
 8000f68:	b480      	push	{r7}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	80fb      	strh	r3, [r7, #6]
    // Poprawiona interpolacja częstotliwości
    uint32_t freq = 100 + ((1700 - 100) * speed_kmh) / 250;
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8000f78:	fb02 f303 	mul.w	r3, r2, r3
 8000f7c:	4a24      	ldr	r2, [pc, #144]	@ (8001010 <Set_PWM_Frequency+0xa8>)
 8000f7e:	fb82 1203 	smull	r1, r2, r2, r3
 8000f82:	1112      	asrs	r2, r2, #4
 8000f84:	17db      	asrs	r3, r3, #31
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	3364      	adds	r3, #100	@ 0x64
 8000f8a:	60fb      	str	r3, [r7, #12]

    uint32_t arr_value, psc_value;

    if (freq < 3800) {
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f640 62d7 	movw	r2, #3799	@ 0xed7
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d817      	bhi.n	8000fc6 <Set_PWM_Frequency+0x5e>
        psc_value = (250000000 / (65536 * freq));
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	041b      	lsls	r3, r3, #16
 8000f9a:	4a1e      	ldr	r2, [pc, #120]	@ (8001014 <Set_PWM_Frequency+0xac>)
 8000f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa0:	613b      	str	r3, [r7, #16]
        if (psc_value > 65535) psc_value = 65535;  // PSC nie może przekroczyć 16 bitów
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fa8:	d302      	bcc.n	8000fb0 <Set_PWM_Frequency+0x48>
 8000faa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fae:	613b      	str	r3, [r7, #16]
        arr_value = (250000000 / ((psc_value + 1) * freq)) - 1;
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	68fa      	ldr	r2, [r7, #12]
 8000fb6:	fb02 f303 	mul.w	r3, r2, r3
 8000fba:	4a16      	ldr	r2, [pc, #88]	@ (8001014 <Set_PWM_Frequency+0xac>)
 8000fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	e007      	b.n	8000fd6 <Set_PWM_Frequency+0x6e>
    } else {
        psc_value = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
        arr_value = (250000000 / freq) - 1;
 8000fca:	4a12      	ldr	r2, [pc, #72]	@ (8001014 <Set_PWM_Frequency+0xac>)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	617b      	str	r3, [r7, #20]
    }

    if (arr_value > 65535) arr_value = 65535;  // Ograniczenie ARR do 16 bitów
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fdc:	d302      	bcc.n	8000fe4 <Set_PWM_Frequency+0x7c>
 8000fde:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fe2:	617b      	str	r3, [r7, #20]
    //printf("Speed: %d km/h, Freq: %lu Hz, PSC: %lu, ARR: %lu\n", speed_kmh, freq, psc_value, arr_value);

    __HAL_TIM_SET_PRESCALER(&htim1, psc_value);
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <Set_PWM_Frequency+0xb0>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_TIM_SET_AUTORELOAD(&htim1, arr_value);
 8000fec:	4b0a      	ldr	r3, [pc, #40]	@ (8001018 <Set_PWM_Frequency+0xb0>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	697a      	ldr	r2, [r7, #20]
 8000ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ff4:	4a08      	ldr	r2, [pc, #32]	@ (8001018 <Set_PWM_Frequency+0xb0>)
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000ffa:	4b07      	ldr	r3, [pc, #28]	@ (8001018 <Set_PWM_Frequency+0xb0>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2200      	movs	r2, #0
 8001000:	625a      	str	r2, [r3, #36]	@ 0x24

    // W niektórych przypadkach wymagane jest wygenerowanie zdarzenia aktualizacji
    //__HAL_TIM_GENERATE_EVENT(&htim1, TIM_EVENTSOURCE_UPDATE);
}
 8001002:	bf00      	nop
 8001004:	371c      	adds	r7, #28
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	10624dd3 	.word	0x10624dd3
 8001014:	0ee6b280 	.word	0x0ee6b280
 8001018:	20000170 	.word	0x20000170
 800101c:	00000000 	.word	0x00000000

08001020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001026:	f000 fcb1 	bl	800198c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102a:	f000 f877 	bl	800111c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102e:	f7ff fe1d 	bl	8000c6c <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8001032:	f7ff fdfb 	bl	8000c2c <MX_GPDMA1_Init>
  MX_USART1_UART_Init();
 8001036:	f000 fb7b 	bl	8001730 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800103a:	f000 fa4b 	bl	80014d4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800103e:	2104      	movs	r1, #4
 8001040:	482f      	ldr	r0, [pc, #188]	@ (8001100 <main+0xe0>)
 8001042:	f006 fa8b 	bl	800755c <HAL_TIM_PWM_Start>
  ESP32_SendCommand("AT+RST");  // Resetuj ESP32
 8001046:	482f      	ldr	r0, [pc, #188]	@ (8001104 <main+0xe4>)
 8001048:	f7ff fe7a 	bl	8000d40 <ESP32_SendCommand>
 // HAL_Delay(1000);
 // ESP32_SendCommand("AT+CWMODE=1");  // Ustaw tryb stacji (klient Wi-Fi)
 // HAL_Delay(1000);
 // ESP32_SendCommand("AT+CWJAP=\"PLAY_Swiatlowod_19A1\",\"t8Xv9auf7Z#D\"");  // Połącz z Wi-Fi
  HAL_Delay(5000);
 800104c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001050:	f000 fd5a 	bl	8001b08 <HAL_Delay>
  ESP32_SendCommand("AT+CIPSTART=\"UDP\",\"0.0.0.0\",12345,12345,2");  // Ustaw tryb UDP
 8001054:	482c      	ldr	r0, [pc, #176]	@ (8001108 <main+0xe8>)
 8001056:	f7ff fe73 	bl	8000d40 <ESP32_SendCommand>
  HAL_Delay(1000);
 800105a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800105e:	f000 fd53 	bl	8001b08 <HAL_Delay>
  HAL_UART_Receive_DMA(&huart1, UartBuffer, 1);
 8001062:	2201      	movs	r2, #1
 8001064:	4929      	ldr	r1, [pc, #164]	@ (800110c <main+0xec>)
 8001066:	482a      	ldr	r0, [pc, #168]	@ (8001110 <main+0xf0>)
 8001068:	f007 fef0 	bl	8008e4c <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */
  	    int8_t direction = 1; // 1 = rośnie, -1 = maleje
 800106c:	2301      	movs	r3, #1
 800106e:	71fb      	strb	r3, [r7, #7]
  	  float speed = 0; // 1 = rośnie, -1 = maleje
 8001070:	f04f 0300 	mov.w	r3, #0
 8001074:	603b      	str	r3, [r7, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 // process_frame();
	 speed = frame.speed * 3.6;
 8001076:	4b27      	ldr	r3, [pc, #156]	@ (8001114 <main+0xf4>)
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fba2 	bl	80007c4 <__aeabi_f2d>
 8001080:	a31d      	add	r3, pc, #116	@ (adr r3, 80010f8 <main+0xd8>)
 8001082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001086:	f7ff f90f 	bl	80002a8 <__aeabi_dmul>
 800108a:	4602      	mov	r2, r0
 800108c:	460b      	mov	r3, r1
 800108e:	4610      	mov	r0, r2
 8001090:	4619      	mov	r1, r3
 8001092:	f7ff fbef 	bl	8000874 <__aeabi_d2f>
 8001096:	4603      	mov	r3, r0
 8001098:	603b      	str	r3, [r7, #0]
    // Set_PWM_Frequency(speed_kph);

        Set_PWM_Frequency(speed);
 800109a:	edd7 7a00 	vldr	s15, [r7]
 800109e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010a2:	ee17 3a90 	vmov	r3, s15
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff5d 	bl	8000f68 <Set_PWM_Frequency>
	     //   HAL_Delay(1);

	        speed += direction;
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	ee07 3a90 	vmov	s15, r3
 80010b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ba:	ed97 7a00 	vldr	s14, [r7]
 80010be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010c2:	edc7 7a00 	vstr	s15, [r7]
	        if (speed >= 250) {
 80010c6:	edd7 7a00 	vldr	s15, [r7]
 80010ca:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001118 <main+0xf8>
 80010ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d6:	db02      	blt.n	80010de <main+0xbe>
	            direction = -1; // Odwracamy kierunek
 80010d8:	23ff      	movs	r3, #255	@ 0xff
 80010da:	71fb      	strb	r3, [r7, #7]
 80010dc:	e7cb      	b.n	8001076 <main+0x56>
	        }
	        else if (speed <= 0) {
 80010de:	edd7 7a00 	vldr	s15, [r7]
 80010e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ea:	d801      	bhi.n	80010f0 <main+0xd0>
	       	            direction = 1; // Odwracamy kierunek
 80010ec:	2301      	movs	r3, #1
 80010ee:	71fb      	strb	r3, [r7, #7]
	 speed = frame.speed * 3.6;
 80010f0:	e7c1      	b.n	8001076 <main+0x56>
 80010f2:	bf00      	nop
 80010f4:	f3af 8000 	nop.w
 80010f8:	cccccccd 	.word	0xcccccccd
 80010fc:	400ccccc 	.word	0x400ccccc
 8001100:	20000170 	.word	0x20000170
 8001104:	0800a410 	.word	0x0800a410
 8001108:	0800a418 	.word	0x0800a418
 800110c:	20000028 	.word	0x20000028
 8001110:	200001bc 	.word	0x200001bc
 8001114:	2000010c 	.word	0x2000010c
 8001118:	437a0000 	.word	0x437a0000

0800111c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b09c      	sub	sp, #112	@ 0x70
 8001120:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001122:	f107 0320 	add.w	r3, r7, #32
 8001126:	2250      	movs	r2, #80	@ 0x50
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f009 f936 	bl	800a39c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001130:	f107 0308 	add.w	r3, r7, #8
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
 8001140:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001142:	4b2d      	ldr	r3, [pc, #180]	@ (80011f8 <SystemClock_Config+0xdc>)
 8001144:	691b      	ldr	r3, [r3, #16]
 8001146:	4a2c      	ldr	r2, [pc, #176]	@ (80011f8 <SystemClock_Config+0xdc>)
 8001148:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800114c:	6113      	str	r3, [r2, #16]
 800114e:	4b2a      	ldr	r3, [pc, #168]	@ (80011f8 <SystemClock_Config+0xdc>)
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800115a:	bf00      	nop
 800115c:	4b26      	ldr	r3, [pc, #152]	@ (80011f8 <SystemClock_Config+0xdc>)
 800115e:	695b      	ldr	r3, [r3, #20]
 8001160:	f003 0308 	and.w	r3, r3, #8
 8001164:	2b08      	cmp	r3, #8
 8001166:	d1f9      	bne.n	800115c <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001168:	2301      	movs	r3, #1
 800116a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800116c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001170:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001172:	2302      	movs	r3, #2
 8001174:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8001176:	2303      	movs	r3, #3
 8001178:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800117a:	2301      	movs	r3, #1
 800117c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 62;
 800117e:	233e      	movs	r3, #62	@ 0x3e
 8001180:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001182:	2302      	movs	r3, #2
 8001184:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001186:	2302      	movs	r3, #2
 8001188:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800118a:	2302      	movs	r3, #2
 800118c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 800118e:	230c      	movs	r3, #12
 8001190:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8001192:	2300      	movs	r3, #0
 8001194:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8001196:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800119a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119c:	f107 0320 	add.w	r3, r7, #32
 80011a0:	4618      	mov	r0, r3
 80011a2:	f001 ff25 	bl	8002ff0 <HAL_RCC_OscConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011ac:	f000 f89e 	bl	80012ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b0:	231f      	movs	r3, #31
 80011b2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b4:	2303      	movs	r3, #3
 80011b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011c8:	f107 0308 	add.w	r3, r7, #8
 80011cc:	2105      	movs	r1, #5
 80011ce:	4618      	mov	r0, r3
 80011d0:	f002 fb46 	bl	8003860 <HAL_RCC_ClockConfig>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011da:	f000 f887 	bl	80012ec <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80011de:	4b07      	ldr	r3, [pc, #28]	@ (80011fc <SystemClock_Config+0xe0>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80011e6:	4a05      	ldr	r2, [pc, #20]	@ (80011fc <SystemClock_Config+0xe0>)
 80011e8:	f043 0320 	orr.w	r3, r3, #32
 80011ec:	6013      	str	r3, [r2, #0]
}
 80011ee:	bf00      	nop
 80011f0:	3770      	adds	r7, #112	@ 0x70
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	44020800 	.word	0x44020800
 80011fc:	40022000 	.word	0x40022000

08001200 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
    static uint8_t byte; // Przechowywany bajt
    HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 8001208:	2108      	movs	r1, #8
 800120a:	482e      	ldr	r0, [pc, #184]	@ (80012c4 <HAL_UART_RxCpltCallback+0xc4>)
 800120c:	f001 fed6 	bl	8002fbc <HAL_GPIO_TogglePin>
    if (huart->Instance == USART1) {
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a2c      	ldr	r2, [pc, #176]	@ (80012c8 <HAL_UART_RxCpltCallback+0xc8>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d150      	bne.n	80012bc <HAL_UART_RxCpltCallback+0xbc>
        byte = UartBuffer[0]; // Odbieramy bajt po bajcie
 800121a:	4b2c      	ldr	r3, [pc, #176]	@ (80012cc <HAL_UART_RxCpltCallback+0xcc>)
 800121c:	781a      	ldrb	r2, [r3, #0]
 800121e:	4b2c      	ldr	r3, [pc, #176]	@ (80012d0 <HAL_UART_RxCpltCallback+0xd0>)
 8001220:	701a      	strb	r2, [r3, #0]

        // Sprawdzamy nagłówek "+IPD"
        if (headerMatch < 4) {
 8001222:	4b2c      	ldr	r3, [pc, #176]	@ (80012d4 <HAL_UART_RxCpltCallback+0xd4>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b03      	cmp	r3, #3
 8001228:	d813      	bhi.n	8001252 <HAL_UART_RxCpltCallback+0x52>
            if (byte == HEADER[headerMatch]) {
 800122a:	4b2a      	ldr	r3, [pc, #168]	@ (80012d4 <HAL_UART_RxCpltCallback+0xd4>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	4b29      	ldr	r3, [pc, #164]	@ (80012d8 <HAL_UART_RxCpltCallback+0xd8>)
 8001232:	5c9a      	ldrb	r2, [r3, r2]
 8001234:	4b26      	ldr	r3, [pc, #152]	@ (80012d0 <HAL_UART_RxCpltCallback+0xd0>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	429a      	cmp	r2, r3
 800123a:	d106      	bne.n	800124a <HAL_UART_RxCpltCallback+0x4a>
                headerMatch++;
 800123c:	4b25      	ldr	r3, [pc, #148]	@ (80012d4 <HAL_UART_RxCpltCallback+0xd4>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	3301      	adds	r3, #1
 8001242:	b2da      	uxtb	r2, r3
 8001244:	4b23      	ldr	r3, [pc, #140]	@ (80012d4 <HAL_UART_RxCpltCallback+0xd4>)
 8001246:	701a      	strb	r2, [r3, #0]
 8001248:	e033      	b.n	80012b2 <HAL_UART_RxCpltCallback+0xb2>
            } else {
                headerMatch = 0; // Reset, jeśli się nie zgadza
 800124a:	4b22      	ldr	r3, [pc, #136]	@ (80012d4 <HAL_UART_RxCpltCallback+0xd4>)
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
 8001250:	e02f      	b.n	80012b2 <HAL_UART_RxCpltCallback+0xb2>
            }
        } else if (headerMatch == 4) {
 8001252:	4b20      	ldr	r3, [pc, #128]	@ (80012d4 <HAL_UART_RxCpltCallback+0xd4>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b04      	cmp	r3, #4
 8001258:	d10d      	bne.n	8001276 <HAL_UART_RxCpltCallback+0x76>
            // Oczekujemy na długość ramki, pomijamy "xx:"
            if (byte == ':') {
 800125a:	4b1d      	ldr	r3, [pc, #116]	@ (80012d0 <HAL_UART_RxCpltCallback+0xd0>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b3a      	cmp	r3, #58	@ 0x3a
 8001260:	d127      	bne.n	80012b2 <HAL_UART_RxCpltCallback+0xb2>
                headerMatch++; // Przechodzimy do odbioru danych
 8001262:	4b1c      	ldr	r3, [pc, #112]	@ (80012d4 <HAL_UART_RxCpltCallback+0xd4>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	3301      	adds	r3, #1
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4b1a      	ldr	r3, [pc, #104]	@ (80012d4 <HAL_UART_RxCpltCallback+0xd4>)
 800126c:	701a      	strb	r2, [r3, #0]
                frameIndex = 0;
 800126e:	4b1b      	ldr	r3, [pc, #108]	@ (80012dc <HAL_UART_RxCpltCallback+0xdc>)
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
 8001274:	e01d      	b.n	80012b2 <HAL_UART_RxCpltCallback+0xb2>
            }
        } else {
            // Odbiór danych ramki
            if (frameIndex < 96 ) {
 8001276:	4b19      	ldr	r3, [pc, #100]	@ (80012dc <HAL_UART_RxCpltCallback+0xdc>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b5f      	cmp	r3, #95	@ 0x5f
 800127c:	d80a      	bhi.n	8001294 <HAL_UART_RxCpltCallback+0x94>
                FrameBuffer[frameIndex++] = byte;
 800127e:	4b17      	ldr	r3, [pc, #92]	@ (80012dc <HAL_UART_RxCpltCallback+0xdc>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	b2d1      	uxtb	r1, r2
 8001286:	4a15      	ldr	r2, [pc, #84]	@ (80012dc <HAL_UART_RxCpltCallback+0xdc>)
 8001288:	7011      	strb	r1, [r2, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	4b10      	ldr	r3, [pc, #64]	@ (80012d0 <HAL_UART_RxCpltCallback+0xd0>)
 800128e:	7819      	ldrb	r1, [r3, #0]
 8001290:	4b13      	ldr	r3, [pc, #76]	@ (80012e0 <HAL_UART_RxCpltCallback+0xe0>)
 8001292:	5499      	strb	r1, [r3, r2]
            }

            if (frameIndex >= 96 ) {
 8001294:	4b11      	ldr	r3, [pc, #68]	@ (80012dc <HAL_UART_RxCpltCallback+0xdc>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b5f      	cmp	r3, #95	@ 0x5f
 800129a:	d90a      	bls.n	80012b2 <HAL_UART_RxCpltCallback+0xb2>
                frameReady = true;  // Pełna ramka odebrana
 800129c:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <HAL_UART_RxCpltCallback+0xe4>)
 800129e:	2201      	movs	r2, #1
 80012a0:	701a      	strb	r2, [r3, #0]
                process_frame();
 80012a2:	f7ff fe4f 	bl	8000f44 <process_frame>
                headerMatch = 0;    // Reset detekcji nagłówka
 80012a6:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <HAL_UART_RxCpltCallback+0xd4>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
                frameIndex = 0;     // Reset indeksu bufora ramki
 80012ac:	4b0b      	ldr	r3, [pc, #44]	@ (80012dc <HAL_UART_RxCpltCallback+0xdc>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
            }}
        HAL_UART_Receive_DMA(&huart1, UartBuffer, 1);
 80012b2:	2201      	movs	r2, #1
 80012b4:	4905      	ldr	r1, [pc, #20]	@ (80012cc <HAL_UART_RxCpltCallback+0xcc>)
 80012b6:	480c      	ldr	r0, [pc, #48]	@ (80012e8 <HAL_UART_RxCpltCallback+0xe8>)
 80012b8:	f007 fdc8 	bl	8008e4c <HAL_UART_Receive_DMA>
    }
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	42020400 	.word	0x42020400
 80012c8:	40013800 	.word	0x40013800
 80012cc:	20000028 	.word	0x20000028
 80012d0:	2000016c 	.word	0x2000016c
 80012d4:	20000108 	.word	0x20000108
 80012d8:	0800a444 	.word	0x0800a444
 80012dc:	20000109 	.word	0x20000109
 80012e0:	200000a8 	.word	0x200000a8
 80012e4:	2000010a 	.word	0x2000010a
 80012e8:	200001bc 	.word	0x200001bc

080012ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f0:	b672      	cpsid	i
}
 80012f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <Error_Handler+0x8>

080012f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800130a:	bf00      	nop
 800130c:	e7fd      	b.n	800130a <NMI_Handler+0x4>

0800130e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001312:	bf00      	nop
 8001314:	e7fd      	b.n	8001312 <HardFault_Handler+0x4>

08001316 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800131a:	bf00      	nop
 800131c:	e7fd      	b.n	800131a <MemManage_Handler+0x4>

0800131e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001322:	bf00      	nop
 8001324:	e7fd      	b.n	8001322 <BusFault_Handler+0x4>

08001326 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800132a:	bf00      	nop
 800132c:	e7fd      	b.n	800132a <UsageFault_Handler+0x4>

0800132e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800135c:	f000 fbb4 	bl	8001ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}

08001364 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8001368:	4802      	ldr	r0, [pc, #8]	@ (8001374 <GPDMA1_Channel0_IRQHandler+0x10>)
 800136a:	f000 ffb2 	bl	80022d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000250 	.word	0x20000250

08001378 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 Break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800137c:	4802      	ldr	r0, [pc, #8]	@ (8001388 <TIM1_BRK_IRQHandler+0x10>)
 800137e:	f006 fa31 	bl	80077e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000170 	.word	0x20000170

0800138c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001390:	4802      	ldr	r0, [pc, #8]	@ (800139c <TIM1_UP_IRQHandler+0x10>)
 8001392:	f006 fa27 	bl	80077e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000170 	.word	0x20000170

080013a0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 Trigger and Commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013a4:	4802      	ldr	r0, [pc, #8]	@ (80013b0 <TIM1_TRG_COM_IRQHandler+0x10>)
 80013a6:	f006 fa1d 	bl	80077e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000170 	.word	0x20000170

080013b4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 Capture Compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013b8:	4802      	ldr	r0, [pc, #8]	@ (80013c4 <TIM1_CC_IRQHandler+0x10>)
 80013ba:	f006 fa13 	bl	80077e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000170 	.word	0x20000170

080013c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013cc:	4802      	ldr	r0, [pc, #8]	@ (80013d8 <USART1_IRQHandler+0x10>)
 80013ce:	f007 fd8f 	bl	8008ef0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200001bc 	.word	0x200001bc

080013dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013e2:	4b35      	ldr	r3, [pc, #212]	@ (80014b8 <SystemInit+0xdc>)
 80013e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013e8:	4a33      	ldr	r2, [pc, #204]	@ (80014b8 <SystemInit+0xdc>)
 80013ea:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013ee:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80013f2:	4b32      	ldr	r3, [pc, #200]	@ (80014bc <SystemInit+0xe0>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80013f8:	4b30      	ldr	r3, [pc, #192]	@ (80014bc <SystemInit+0xe0>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80013fe:	4b2f      	ldr	r3, [pc, #188]	@ (80014bc <SystemInit+0xe0>)
 8001400:	2200      	movs	r2, #0
 8001402:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001404:	4b2d      	ldr	r3, [pc, #180]	@ (80014bc <SystemInit+0xe0>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	492c      	ldr	r1, [pc, #176]	@ (80014bc <SystemInit+0xe0>)
 800140a:	4b2d      	ldr	r3, [pc, #180]	@ (80014c0 <SystemInit+0xe4>)
 800140c:	4013      	ands	r3, r2
 800140e:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001410:	4b2a      	ldr	r3, [pc, #168]	@ (80014bc <SystemInit+0xe0>)
 8001412:	2200      	movs	r2, #0
 8001414:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001416:	4b29      	ldr	r3, [pc, #164]	@ (80014bc <SystemInit+0xe0>)
 8001418:	2200      	movs	r2, #0
 800141a:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 800141c:	4b27      	ldr	r3, [pc, #156]	@ (80014bc <SystemInit+0xe0>)
 800141e:	2200      	movs	r2, #0
 8001420:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001422:	4b26      	ldr	r3, [pc, #152]	@ (80014bc <SystemInit+0xe0>)
 8001424:	4a27      	ldr	r2, [pc, #156]	@ (80014c4 <SystemInit+0xe8>)
 8001426:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001428:	4b24      	ldr	r3, [pc, #144]	@ (80014bc <SystemInit+0xe0>)
 800142a:	2200      	movs	r2, #0
 800142c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800142e:	4b23      	ldr	r3, [pc, #140]	@ (80014bc <SystemInit+0xe0>)
 8001430:	4a24      	ldr	r2, [pc, #144]	@ (80014c4 <SystemInit+0xe8>)
 8001432:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001434:	4b21      	ldr	r3, [pc, #132]	@ (80014bc <SystemInit+0xe0>)
 8001436:	2200      	movs	r2, #0
 8001438:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800143a:	4b20      	ldr	r3, [pc, #128]	@ (80014bc <SystemInit+0xe0>)
 800143c:	4a21      	ldr	r2, [pc, #132]	@ (80014c4 <SystemInit+0xe8>)
 800143e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001440:	4b1e      	ldr	r3, [pc, #120]	@ (80014bc <SystemInit+0xe0>)
 8001442:	2200      	movs	r2, #0
 8001444:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001446:	4b1d      	ldr	r3, [pc, #116]	@ (80014bc <SystemInit+0xe0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a1c      	ldr	r2, [pc, #112]	@ (80014bc <SystemInit+0xe0>)
 800144c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001450:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001452:	4b1a      	ldr	r3, [pc, #104]	@ (80014bc <SystemInit+0xe0>)
 8001454:	2200      	movs	r2, #0
 8001456:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001458:	4b17      	ldr	r3, [pc, #92]	@ (80014b8 <SystemInit+0xdc>)
 800145a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800145e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001460:	4b19      	ldr	r3, [pc, #100]	@ (80014c8 <SystemInit+0xec>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001468:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001470:	d003      	beq.n	800147a <SystemInit+0x9e>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001478:	d117      	bne.n	80014aa <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800147a:	4b13      	ldr	r3, [pc, #76]	@ (80014c8 <SystemInit+0xec>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b00      	cmp	r3, #0
 8001484:	d005      	beq.n	8001492 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001486:	4b10      	ldr	r3, [pc, #64]	@ (80014c8 <SystemInit+0xec>)
 8001488:	4a10      	ldr	r2, [pc, #64]	@ (80014cc <SystemInit+0xf0>)
 800148a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800148c:	4b0e      	ldr	r3, [pc, #56]	@ (80014c8 <SystemInit+0xec>)
 800148e:	4a10      	ldr	r2, [pc, #64]	@ (80014d0 <SystemInit+0xf4>)
 8001490:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001492:	4b0d      	ldr	r3, [pc, #52]	@ (80014c8 <SystemInit+0xec>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	4a0c      	ldr	r2, [pc, #48]	@ (80014c8 <SystemInit+0xec>)
 8001498:	f043 0302 	orr.w	r3, r3, #2
 800149c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800149e:	4b0a      	ldr	r3, [pc, #40]	@ (80014c8 <SystemInit+0xec>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	4a09      	ldr	r2, [pc, #36]	@ (80014c8 <SystemInit+0xec>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	61d3      	str	r3, [r2, #28]
  }
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000ed00 	.word	0xe000ed00
 80014bc:	44020c00 	.word	0x44020c00
 80014c0:	eae2eae3 	.word	0xeae2eae3
 80014c4:	01010280 	.word	0x01010280
 80014c8:	40022000 	.word	0x40022000
 80014cc:	08192a3b 	.word	0x08192a3b
 80014d0:	4c5d6e7f 	.word	0x4c5d6e7f

080014d4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b09c      	sub	sp, #112	@ 0x70
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014da:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014f4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
 8001504:	615a      	str	r2, [r3, #20]
 8001506:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	2234      	movs	r2, #52	@ 0x34
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f008 ff44 	bl	800a39c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001514:	4b46      	ldr	r3, [pc, #280]	@ (8001630 <MX_TIM1_Init+0x15c>)
 8001516:	4a47      	ldr	r2, [pc, #284]	@ (8001634 <MX_TIM1_Init+0x160>)
 8001518:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 49;
 800151a:	4b45      	ldr	r3, [pc, #276]	@ (8001630 <MX_TIM1_Init+0x15c>)
 800151c:	2231      	movs	r2, #49	@ 0x31
 800151e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001520:	4b43      	ldr	r3, [pc, #268]	@ (8001630 <MX_TIM1_Init+0x15c>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001526:	4b42      	ldr	r3, [pc, #264]	@ (8001630 <MX_TIM1_Init+0x15c>)
 8001528:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800152c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800152e:	4b40      	ldr	r3, [pc, #256]	@ (8001630 <MX_TIM1_Init+0x15c>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001534:	4b3e      	ldr	r3, [pc, #248]	@ (8001630 <MX_TIM1_Init+0x15c>)
 8001536:	2200      	movs	r2, #0
 8001538:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153a:	4b3d      	ldr	r3, [pc, #244]	@ (8001630 <MX_TIM1_Init+0x15c>)
 800153c:	2200      	movs	r2, #0
 800153e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001540:	483b      	ldr	r0, [pc, #236]	@ (8001630 <MX_TIM1_Init+0x15c>)
 8001542:	f005 ff53 	bl	80073ec <HAL_TIM_Base_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800154c:	f7ff fece 	bl	80012ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001550:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001554:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001556:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800155a:	4619      	mov	r1, r3
 800155c:	4834      	ldr	r0, [pc, #208]	@ (8001630 <MX_TIM1_Init+0x15c>)
 800155e:	f006 fba5 	bl	8007cac <HAL_TIM_ConfigClockSource>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001568:	f7ff fec0 	bl	80012ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800156c:	4830      	ldr	r0, [pc, #192]	@ (8001630 <MX_TIM1_Init+0x15c>)
 800156e:	f005 ff94 	bl	800749a <HAL_TIM_PWM_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001578:	f7ff feb8 	bl	80012ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157c:	2300      	movs	r3, #0
 800157e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001580:	2300      	movs	r3, #0
 8001582:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001584:	2300      	movs	r3, #0
 8001586:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001588:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800158c:	4619      	mov	r1, r3
 800158e:	4828      	ldr	r0, [pc, #160]	@ (8001630 <MX_TIM1_Init+0x15c>)
 8001590:	f007 f9be 	bl	8008910 <HAL_TIMEx_MasterConfigSynchronization>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800159a:	f7ff fea7 	bl	80012ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800159e:	2360      	movs	r3, #96	@ 0x60
 80015a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 5000;
 80015a2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80015a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a8:	2300      	movs	r3, #0
 80015aa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015ac:	2300      	movs	r3, #0
 80015ae:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015b4:	2300      	movs	r3, #0
 80015b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015b8:	2300      	movs	r3, #0
 80015ba:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015bc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015c0:	2204      	movs	r2, #4
 80015c2:	4619      	mov	r1, r3
 80015c4:	481a      	ldr	r0, [pc, #104]	@ (8001630 <MX_TIM1_Init+0x15c>)
 80015c6:	f006 fa5d 	bl	8007a84 <HAL_TIM_PWM_ConfigChannel>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80015d0:	f7ff fe8c 	bl	80012ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001604:	2300      	movs	r3, #0
 8001606:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	4619      	mov	r1, r3
 8001610:	4807      	ldr	r0, [pc, #28]	@ (8001630 <MX_TIM1_Init+0x15c>)
 8001612:	f007 fa4d 	bl	8008ab0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 800161c:	f7ff fe66 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001620:	4803      	ldr	r0, [pc, #12]	@ (8001630 <MX_TIM1_Init+0x15c>)
 8001622:	f000 f849 	bl	80016b8 <HAL_TIM_MspPostInit>

}
 8001626:	bf00      	nop
 8001628:	3770      	adds	r7, #112	@ 0x70
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000170 	.word	0x20000170
 8001634:	40012c00 	.word	0x40012c00

08001638 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a1a      	ldr	r2, [pc, #104]	@ (80016b0 <HAL_TIM_Base_MspInit+0x78>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d12e      	bne.n	80016a8 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800164a:	4b1a      	ldr	r3, [pc, #104]	@ (80016b4 <HAL_TIM_Base_MspInit+0x7c>)
 800164c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001650:	4a18      	ldr	r2, [pc, #96]	@ (80016b4 <HAL_TIM_Base_MspInit+0x7c>)
 8001652:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001656:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800165a:	4b16      	ldr	r3, [pc, #88]	@ (80016b4 <HAL_TIM_Base_MspInit+0x7c>)
 800165c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001660:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001668:	2200      	movs	r2, #0
 800166a:	2100      	movs	r1, #0
 800166c:	2029      	movs	r0, #41	@ 0x29
 800166e:	f000 fb27 	bl	8001cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001672:	2029      	movs	r0, #41	@ 0x29
 8001674:	f000 fb3e 	bl	8001cf4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001678:	2200      	movs	r2, #0
 800167a:	2100      	movs	r1, #0
 800167c:	202a      	movs	r0, #42	@ 0x2a
 800167e:	f000 fb1f 	bl	8001cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001682:	202a      	movs	r0, #42	@ 0x2a
 8001684:	f000 fb36 	bl	8001cf4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001688:	2200      	movs	r2, #0
 800168a:	2100      	movs	r1, #0
 800168c:	202b      	movs	r0, #43	@ 0x2b
 800168e:	f000 fb17 	bl	8001cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001692:	202b      	movs	r0, #43	@ 0x2b
 8001694:	f000 fb2e 	bl	8001cf4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001698:	2200      	movs	r2, #0
 800169a:	2100      	movs	r1, #0
 800169c:	202c      	movs	r0, #44	@ 0x2c
 800169e:	f000 fb0f 	bl	8001cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80016a2:	202c      	movs	r0, #44	@ 0x2c
 80016a4:	f000 fb26 	bl	8001cf4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80016a8:	bf00      	nop
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40012c00 	.word	0x40012c00
 80016b4:	44020c00 	.word	0x44020c00

080016b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a13      	ldr	r2, [pc, #76]	@ (8001724 <HAL_TIM_MspPostInit+0x6c>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d11f      	bne.n	800171a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	4b13      	ldr	r3, [pc, #76]	@ (8001728 <HAL_TIM_MspPostInit+0x70>)
 80016dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016e0:	4a11      	ldr	r2, [pc, #68]	@ (8001728 <HAL_TIM_MspPostInit+0x70>)
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001728 <HAL_TIM_MspPostInit+0x70>)
 80016ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800170a:	2301      	movs	r3, #1
 800170c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170e:	f107 030c 	add.w	r3, r7, #12
 8001712:	4619      	mov	r1, r3
 8001714:	4805      	ldr	r0, [pc, #20]	@ (800172c <HAL_TIM_MspPostInit+0x74>)
 8001716:	f001 fae7 	bl	8002ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800171a:	bf00      	nop
 800171c:	3720      	adds	r7, #32
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40012c00 	.word	0x40012c00
 8001728:	44020c00 	.word	0x44020c00
 800172c:	42020000 	.word	0x42020000

08001730 <MX_USART1_UART_Init>:
DMA_HandleTypeDef handle_GPDMA1_Channel0;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001734:	4b22      	ldr	r3, [pc, #136]	@ (80017c0 <MX_USART1_UART_Init+0x90>)
 8001736:	4a23      	ldr	r2, [pc, #140]	@ (80017c4 <MX_USART1_UART_Init+0x94>)
 8001738:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800173a:	4b21      	ldr	r3, [pc, #132]	@ (80017c0 <MX_USART1_UART_Init+0x90>)
 800173c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001740:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001742:	4b1f      	ldr	r3, [pc, #124]	@ (80017c0 <MX_USART1_UART_Init+0x90>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001748:	4b1d      	ldr	r3, [pc, #116]	@ (80017c0 <MX_USART1_UART_Init+0x90>)
 800174a:	2200      	movs	r2, #0
 800174c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800174e:	4b1c      	ldr	r3, [pc, #112]	@ (80017c0 <MX_USART1_UART_Init+0x90>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001754:	4b1a      	ldr	r3, [pc, #104]	@ (80017c0 <MX_USART1_UART_Init+0x90>)
 8001756:	220c      	movs	r2, #12
 8001758:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800175a:	4b19      	ldr	r3, [pc, #100]	@ (80017c0 <MX_USART1_UART_Init+0x90>)
 800175c:	2200      	movs	r2, #0
 800175e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001760:	4b17      	ldr	r3, [pc, #92]	@ (80017c0 <MX_USART1_UART_Init+0x90>)
 8001762:	2200      	movs	r2, #0
 8001764:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001766:	4b16      	ldr	r3, [pc, #88]	@ (80017c0 <MX_USART1_UART_Init+0x90>)
 8001768:	2200      	movs	r2, #0
 800176a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800176c:	4b14      	ldr	r3, [pc, #80]	@ (80017c0 <MX_USART1_UART_Init+0x90>)
 800176e:	2200      	movs	r2, #0
 8001770:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001772:	4b13      	ldr	r3, [pc, #76]	@ (80017c0 <MX_USART1_UART_Init+0x90>)
 8001774:	2200      	movs	r2, #0
 8001776:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001778:	4811      	ldr	r0, [pc, #68]	@ (80017c0 <MX_USART1_UART_Init+0x90>)
 800177a:	f007 fa79 	bl	8008c70 <HAL_UART_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001784:	f7ff fdb2 	bl	80012ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001788:	2100      	movs	r1, #0
 800178a:	480d      	ldr	r0, [pc, #52]	@ (80017c0 <MX_USART1_UART_Init+0x90>)
 800178c:	f008 fd3b 	bl	800a206 <HAL_UARTEx_SetTxFifoThreshold>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001796:	f7ff fda9 	bl	80012ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800179a:	2100      	movs	r1, #0
 800179c:	4808      	ldr	r0, [pc, #32]	@ (80017c0 <MX_USART1_UART_Init+0x90>)
 800179e:	f008 fd70 	bl	800a282 <HAL_UARTEx_SetRxFifoThreshold>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80017a8:	f7ff fda0 	bl	80012ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017ac:	4804      	ldr	r0, [pc, #16]	@ (80017c0 <MX_USART1_UART_Init+0x90>)
 80017ae:	f008 fcf1 	bl	800a194 <HAL_UARTEx_DisableFifoMode>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80017b8:	f7ff fd98 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	200001bc 	.word	0x200001bc
 80017c4:	40013800 	.word	0x40013800

080017c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b0be      	sub	sp, #248	@ 0xf8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017e0:	f107 0310 	add.w	r3, r7, #16
 80017e4:	22d0      	movs	r2, #208	@ 0xd0
 80017e6:	2100      	movs	r1, #0
 80017e8:	4618      	mov	r0, r3
 80017ea:	f008 fdd7 	bl	800a39c <memset>
  if(uartHandle->Instance==USART1)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a4c      	ldr	r2, [pc, #304]	@ (8001924 <HAL_UART_MspInit+0x15c>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	f040 8090 	bne.w	800191a <HAL_UART_MspInit+0x152>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017fa:	f04f 0201 	mov.w	r2, #1
 80017fe:	f04f 0300 	mov.w	r3, #0
 8001802:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001806:	2300      	movs	r3, #0
 8001808:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800180a:	f107 0310 	add.w	r3, r7, #16
 800180e:	4618      	mov	r0, r3
 8001810:	f002 fb68 	bl	8003ee4 <HAL_RCCEx_PeriphCLKConfig>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800181a:	f7ff fd67 	bl	80012ec <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800181e:	4b42      	ldr	r3, [pc, #264]	@ (8001928 <HAL_UART_MspInit+0x160>)
 8001820:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001824:	4a40      	ldr	r2, [pc, #256]	@ (8001928 <HAL_UART_MspInit+0x160>)
 8001826:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800182a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800182e:	4b3e      	ldr	r3, [pc, #248]	@ (8001928 <HAL_UART_MspInit+0x160>)
 8001830:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001834:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800183c:	4b3a      	ldr	r3, [pc, #232]	@ (8001928 <HAL_UART_MspInit+0x160>)
 800183e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001842:	4a39      	ldr	r2, [pc, #228]	@ (8001928 <HAL_UART_MspInit+0x160>)
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800184c:	4b36      	ldr	r3, [pc, #216]	@ (8001928 <HAL_UART_MspInit+0x160>)
 800184e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800185a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800185e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	2302      	movs	r3, #2
 8001864:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	2300      	movs	r3, #0
 8001870:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001874:	2304      	movs	r3, #4
 8001876:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800187e:	4619      	mov	r1, r3
 8001880:	482a      	ldr	r0, [pc, #168]	@ (800192c <HAL_UART_MspInit+0x164>)
 8001882:	f001 fa31 	bl	8002ce8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* GPDMA1_REQUEST_USART1_RX Init */
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8001886:	4b2a      	ldr	r3, [pc, #168]	@ (8001930 <HAL_UART_MspInit+0x168>)
 8001888:	4a2a      	ldr	r2, [pc, #168]	@ (8001934 <HAL_UART_MspInit+0x16c>)
 800188a:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_USART1_RX;
 800188c:	4b28      	ldr	r3, [pc, #160]	@ (8001930 <HAL_UART_MspInit+0x168>)
 800188e:	2215      	movs	r2, #21
 8001890:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001892:	4b27      	ldr	r3, [pc, #156]	@ (8001930 <HAL_UART_MspInit+0x168>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001898:	4b25      	ldr	r3, [pc, #148]	@ (8001930 <HAL_UART_MspInit+0x168>)
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 800189e:	4b24      	ldr	r3, [pc, #144]	@ (8001930 <HAL_UART_MspInit+0x168>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_FIXED;
 80018a4:	4b22      	ldr	r3, [pc, #136]	@ (8001930 <HAL_UART_MspInit+0x168>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80018aa:	4b21      	ldr	r3, [pc, #132]	@ (8001930 <HAL_UART_MspInit+0x168>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80018b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001930 <HAL_UART_MspInit+0x168>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80018b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001930 <HAL_UART_MspInit+0x168>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 80018bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001930 <HAL_UART_MspInit+0x168>)
 80018be:	2201      	movs	r2, #1
 80018c0:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 80018c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001930 <HAL_UART_MspInit+0x168>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80018c8:	4b19      	ldr	r3, [pc, #100]	@ (8001930 <HAL_UART_MspInit+0x168>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80018ce:	4b18      	ldr	r3, [pc, #96]	@ (8001930 <HAL_UART_MspInit+0x168>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 80018d4:	4b16      	ldr	r3, [pc, #88]	@ (8001930 <HAL_UART_MspInit+0x168>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80018da:	4815      	ldr	r0, [pc, #84]	@ (8001930 <HAL_UART_MspInit+0x168>)
 80018dc:	f000 fac8 	bl	8001e70 <HAL_DMA_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_UART_MspInit+0x122>
    {
      Error_Handler();
 80018e6:	f7ff fd01 	bl	80012ec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmarx, handle_GPDMA1_Channel0);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a10      	ldr	r2, [pc, #64]	@ (8001930 <HAL_UART_MspInit+0x168>)
 80018ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80018f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001930 <HAL_UART_MspInit+0x168>)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 80018f8:	2110      	movs	r1, #16
 80018fa:	480d      	ldr	r0, [pc, #52]	@ (8001930 <HAL_UART_MspInit+0x168>)
 80018fc:	f000 fe4a 	bl	8002594 <HAL_DMA_ConfigChannelAttributes>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8001906:	f7ff fcf1 	bl	80012ec <Error_Handler>
    }

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	203a      	movs	r0, #58	@ 0x3a
 8001910:	f000 f9d6 	bl	8001cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001914:	203a      	movs	r0, #58	@ 0x3a
 8001916:	f000 f9ed 	bl	8001cf4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800191a:	bf00      	nop
 800191c:	37f8      	adds	r7, #248	@ 0xf8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40013800 	.word	0x40013800
 8001928:	44020c00 	.word	0x44020c00
 800192c:	42020400 	.word	0x42020400
 8001930:	20000250 	.word	0x20000250
 8001934:	40020050 	.word	0x40020050

08001938 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001938:	480d      	ldr	r0, [pc, #52]	@ (8001970 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800193a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800193c:	f7ff fd4e 	bl	80013dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001940:	480c      	ldr	r0, [pc, #48]	@ (8001974 <LoopForever+0x6>)
  ldr r1, =_edata
 8001942:	490d      	ldr	r1, [pc, #52]	@ (8001978 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001944:	4a0d      	ldr	r2, [pc, #52]	@ (800197c <LoopForever+0xe>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001948:	e002      	b.n	8001950 <LoopCopyDataInit>

0800194a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800194c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800194e:	3304      	adds	r3, #4

08001950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001954:	d3f9      	bcc.n	800194a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001956:	4a0a      	ldr	r2, [pc, #40]	@ (8001980 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001958:	4c0a      	ldr	r4, [pc, #40]	@ (8001984 <LoopForever+0x16>)
  movs r3, #0
 800195a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800195c:	e001      	b.n	8001962 <LoopFillZerobss>

0800195e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800195e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001960:	3204      	adds	r2, #4

08001962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001964:	d3fb      	bcc.n	800195e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001966:	f008 fd21 	bl	800a3ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800196a:	f7ff fb59 	bl	8001020 <main>

0800196e <LoopForever>:

LoopForever:
    b LoopForever
 800196e:	e7fe      	b.n	800196e <LoopForever>
  ldr   r0, =_estack
 8001970:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8001974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001978:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800197c:	0800a49c 	.word	0x0800a49c
  ldr r2, =_sbss
 8001980:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001984:	200002cc 	.word	0x200002cc

08001988 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001988:	e7fe      	b.n	8001988 <ADC1_IRQHandler>
	...

0800198c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001990:	2003      	movs	r0, #3
 8001992:	f000 f98a 	bl	8001caa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001996:	f002 f91b 	bl	8003bd0 <HAL_RCC_GetSysClockFreq>
 800199a:	4602      	mov	r2, r0
 800199c:	4b0c      	ldr	r3, [pc, #48]	@ (80019d0 <HAL_Init+0x44>)
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	f003 030f 	and.w	r3, r3, #15
 80019a4:	490b      	ldr	r1, [pc, #44]	@ (80019d4 <HAL_Init+0x48>)
 80019a6:	5ccb      	ldrb	r3, [r1, r3]
 80019a8:	fa22 f303 	lsr.w	r3, r2, r3
 80019ac:	4a0a      	ldr	r2, [pc, #40]	@ (80019d8 <HAL_Init+0x4c>)
 80019ae:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80019b0:	2004      	movs	r0, #4
 80019b2:	f000 f9cf 	bl	8001d54 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019b6:	200f      	movs	r0, #15
 80019b8:	f000 f810 	bl	80019dc <HAL_InitTick>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e002      	b.n	80019cc <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019c6:	f7ff fc97 	bl	80012f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	44020c00 	.word	0x44020c00
 80019d4:	0800a44c 	.word	0x0800a44c
 80019d8:	20000000 	.word	0x20000000

080019dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80019e8:	4b33      	ldr	r3, [pc, #204]	@ (8001ab8 <HAL_InitTick+0xdc>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d101      	bne.n	80019f4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e05c      	b.n	8001aae <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80019f4:	4b31      	ldr	r3, [pc, #196]	@ (8001abc <HAL_InitTick+0xe0>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d10c      	bne.n	8001a1a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001a00:	4b2f      	ldr	r3, [pc, #188]	@ (8001ac0 <HAL_InitTick+0xe4>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b2c      	ldr	r3, [pc, #176]	@ (8001ab8 <HAL_InitTick+0xdc>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	e037      	b.n	8001a8a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001a1a:	f000 f9f3 	bl	8001e04 <HAL_SYSTICK_GetCLKSourceConfig>
 8001a1e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d023      	beq.n	8001a6e <HAL_InitTick+0x92>
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d82d      	bhi.n	8001a88 <HAL_InitTick+0xac>
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_InitTick+0x5e>
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d00d      	beq.n	8001a54 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001a38:	e026      	b.n	8001a88 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001a3a:	4b21      	ldr	r3, [pc, #132]	@ (8001ac0 <HAL_InitTick+0xe4>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab8 <HAL_InitTick+0xdc>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	4619      	mov	r1, r3
 8001a44:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001a48:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a50:	60fb      	str	r3, [r7, #12]
        break;
 8001a52:	e01a      	b.n	8001a8a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001a54:	4b18      	ldr	r3, [pc, #96]	@ (8001ab8 <HAL_InitTick+0xdc>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a62:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6a:	60fb      	str	r3, [r7, #12]
        break;
 8001a6c:	e00d      	b.n	8001a8a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001a6e:	4b12      	ldr	r3, [pc, #72]	@ (8001ab8 <HAL_InitTick+0xdc>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	461a      	mov	r2, r3
 8001a74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a78:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a7c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a84:	60fb      	str	r3, [r7, #12]
        break;
 8001a86:	e000      	b.n	8001a8a <HAL_InitTick+0xae>
        break;
 8001a88:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f000 f940 	bl	8001d10 <HAL_SYSTICK_Config>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e009      	b.n	8001aae <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	6879      	ldr	r1, [r7, #4]
 8001a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa2:	f000 f90d 	bl	8001cc0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001aa6:	4a07      	ldr	r2, [pc, #28]	@ (8001ac4 <HAL_InitTick+0xe8>)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000008 	.word	0x20000008
 8001abc:	e000e010 	.word	0xe000e010
 8001ac0:	20000000 	.word	0x20000000
 8001ac4:	20000004 	.word	0x20000004

08001ac8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001acc:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <HAL_IncTick+0x20>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4b06      	ldr	r3, [pc, #24]	@ (8001aec <HAL_IncTick+0x24>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	4a04      	ldr	r2, [pc, #16]	@ (8001aec <HAL_IncTick+0x24>)
 8001ada:	6013      	str	r3, [r2, #0]
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	20000008 	.word	0x20000008
 8001aec:	200002c8 	.word	0x200002c8

08001af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return uwTick;
 8001af4:	4b03      	ldr	r3, [pc, #12]	@ (8001b04 <HAL_GetTick+0x14>)
 8001af6:	681b      	ldr	r3, [r3, #0]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	200002c8 	.word	0x200002c8

08001b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b10:	f7ff ffee 	bl	8001af0 <HAL_GetTick>
 8001b14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b20:	d005      	beq.n	8001b2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b22:	4b0a      	ldr	r3, [pc, #40]	@ (8001b4c <HAL_Delay+0x44>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	461a      	mov	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b2e:	bf00      	nop
 8001b30:	f7ff ffde 	bl	8001af0 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d8f7      	bhi.n	8001b30 <HAL_Delay+0x28>
  {
  }
}
 8001b40:	bf00      	nop
 8001b42:	bf00      	nop
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000008 	.word	0x20000008

08001b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b60:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <__NVIC_SetPriorityGrouping+0x44>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b82:	4a04      	ldr	r2, [pc, #16]	@ (8001b94 <__NVIC_SetPriorityGrouping+0x44>)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	60d3      	str	r3, [r2, #12]
}
 8001b88:	bf00      	nop
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b9c:	4b04      	ldr	r3, [pc, #16]	@ (8001bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	f003 0307 	and.w	r3, r3, #7
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	db0b      	blt.n	8001bde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	f003 021f 	and.w	r2, r3, #31
 8001bcc:	4907      	ldr	r1, [pc, #28]	@ (8001bec <__NVIC_EnableIRQ+0x38>)
 8001bce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bd2:	095b      	lsrs	r3, r3, #5
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000e100 	.word	0xe000e100

08001bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	6039      	str	r1, [r7, #0]
 8001bfa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	db0a      	blt.n	8001c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	490c      	ldr	r1, [pc, #48]	@ (8001c3c <__NVIC_SetPriority+0x4c>)
 8001c0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c0e:	0112      	lsls	r2, r2, #4
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	440b      	add	r3, r1
 8001c14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c18:	e00a      	b.n	8001c30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4908      	ldr	r1, [pc, #32]	@ (8001c40 <__NVIC_SetPriority+0x50>)
 8001c20:	88fb      	ldrh	r3, [r7, #6]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	3b04      	subs	r3, #4
 8001c28:	0112      	lsls	r2, r2, #4
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	761a      	strb	r2, [r3, #24]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000e100 	.word	0xe000e100
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b089      	sub	sp, #36	@ 0x24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f1c3 0307 	rsb	r3, r3, #7
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	bf28      	it	cs
 8001c62:	2304      	movcs	r3, #4
 8001c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3304      	adds	r3, #4
 8001c6a:	2b06      	cmp	r3, #6
 8001c6c:	d902      	bls.n	8001c74 <NVIC_EncodePriority+0x30>
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3b03      	subs	r3, #3
 8001c72:	e000      	b.n	8001c76 <NVIC_EncodePriority+0x32>
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c78:	f04f 32ff 	mov.w	r2, #4294967295
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43da      	mvns	r2, r3
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	401a      	ands	r2, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	fa01 f303 	lsl.w	r3, r1, r3
 8001c96:	43d9      	mvns	r1, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	4313      	orrs	r3, r2
         );
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3724      	adds	r7, #36	@ 0x24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff ff4c 	bl	8001b50 <__NVIC_SetPriorityGrouping>
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
 8001ccc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cce:	f7ff ff63 	bl	8001b98 <__NVIC_GetPriorityGrouping>
 8001cd2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	68b9      	ldr	r1, [r7, #8]
 8001cd8:	6978      	ldr	r0, [r7, #20]
 8001cda:	f7ff ffb3 	bl	8001c44 <NVIC_EncodePriority>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ce4:	4611      	mov	r1, r2
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff ff82 	bl	8001bf0 <__NVIC_SetPriority>
}
 8001cec:	bf00      	nop
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff ff56 	bl	8001bb4 <__NVIC_EnableIRQ>
}
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d20:	d301      	bcc.n	8001d26 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001d22:	2301      	movs	r3, #1
 8001d24:	e00d      	b.n	8001d42 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001d26:	4a0a      	ldr	r2, [pc, #40]	@ (8001d50 <HAL_SYSTICK_Config+0x40>)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001d2e:	4b08      	ldr	r3, [pc, #32]	@ (8001d50 <HAL_SYSTICK_Config+0x40>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001d34:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <HAL_SYSTICK_Config+0x40>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a05      	ldr	r2, [pc, #20]	@ (8001d50 <HAL_SYSTICK_Config+0x40>)
 8001d3a:	f043 0303 	orr.w	r3, r3, #3
 8001d3e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	e000e010 	.word	0xe000e010

08001d54 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d844      	bhi.n	8001dec <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001d62:	a201      	add	r2, pc, #4	@ (adr r2, 8001d68 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d68:	08001d8b 	.word	0x08001d8b
 8001d6c:	08001da9 	.word	0x08001da9
 8001d70:	08001dcb 	.word	0x08001dcb
 8001d74:	08001ded 	.word	0x08001ded
 8001d78:	08001d7d 	.word	0x08001d7d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dfc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a1e      	ldr	r2, [pc, #120]	@ (8001dfc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d82:	f043 0304 	orr.w	r3, r3, #4
 8001d86:	6013      	str	r3, [r2, #0]
      break;
 8001d88:	e031      	b.n	8001dee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001d8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dfc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a1b      	ldr	r2, [pc, #108]	@ (8001dfc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d90:	f023 0304 	bic.w	r3, r3, #4
 8001d94:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001d96:	4b1a      	ldr	r3, [pc, #104]	@ (8001e00 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001d98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001d9c:	4a18      	ldr	r2, [pc, #96]	@ (8001e00 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001d9e:	f023 030c 	bic.w	r3, r3, #12
 8001da2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001da6:	e022      	b.n	8001dee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001da8:	4b14      	ldr	r3, [pc, #80]	@ (8001dfc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a13      	ldr	r2, [pc, #76]	@ (8001dfc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001dae:	f023 0304 	bic.w	r3, r3, #4
 8001db2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001db4:	4b12      	ldr	r3, [pc, #72]	@ (8001e00 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001db6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001dba:	f023 030c 	bic.w	r3, r3, #12
 8001dbe:	4a10      	ldr	r2, [pc, #64]	@ (8001e00 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001dc0:	f043 0304 	orr.w	r3, r3, #4
 8001dc4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001dc8:	e011      	b.n	8001dee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001dca:	4b0c      	ldr	r3, [pc, #48]	@ (8001dfc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a0b      	ldr	r2, [pc, #44]	@ (8001dfc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001dd0:	f023 0304 	bic.w	r3, r3, #4
 8001dd4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e00 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001dd8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001ddc:	f023 030c 	bic.w	r3, r3, #12
 8001de0:	4a07      	ldr	r2, [pc, #28]	@ (8001e00 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001de2:	f043 0308 	orr.w	r3, r3, #8
 8001de6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001dea:	e000      	b.n	8001dee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001dec:	bf00      	nop
  }
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	e000e010 	.word	0xe000e010
 8001e00:	44020c00 	.word	0x44020c00

08001e04 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001e0a:	4b17      	ldr	r3, [pc, #92]	@ (8001e68 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d002      	beq.n	8001e1c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001e16:	2304      	movs	r3, #4
 8001e18:	607b      	str	r3, [r7, #4]
 8001e1a:	e01e      	b.n	8001e5a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001e1c:	4b13      	ldr	r3, [pc, #76]	@ (8001e6c <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8001e1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001e22:	f003 030c 	and.w	r3, r3, #12
 8001e26:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d00f      	beq.n	8001e4e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d80f      	bhi.n	8001e54 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	2b04      	cmp	r3, #4
 8001e3e:	d003      	beq.n	8001e48 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001e40:	e008      	b.n	8001e54 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001e42:	2300      	movs	r3, #0
 8001e44:	607b      	str	r3, [r7, #4]
        break;
 8001e46:	e008      	b.n	8001e5a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	607b      	str	r3, [r7, #4]
        break;
 8001e4c:	e005      	b.n	8001e5a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	607b      	str	r3, [r7, #4]
        break;
 8001e52:	e002      	b.n	8001e5a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001e54:	2300      	movs	r3, #0
 8001e56:	607b      	str	r3, [r7, #4]
        break;
 8001e58:	bf00      	nop
    }
  }
  return systick_source;
 8001e5a:	687b      	ldr	r3, [r7, #4]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	e000e010 	.word	0xe000e010
 8001e6c:	44020c00 	.word	0x44020c00

08001e70 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8001e78:	f7ff fe3a 	bl	8001af0 <HAL_GetTick>
 8001e7c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e0db      	b.n	8002040 <HAL_DMA_Init+0x1d0>
  if (hdma->Init.Mode == DMA_PFCTRL)
  {
    assert_param(IS_DMA_PFREQ_INSTANCE(hdma->Instance));
  }
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a6e      	ldr	r2, [pc, #440]	@ (8002048 <HAL_DMA_Init+0x1d8>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	f000 809f 	beq.w	8001fd2 <HAL_DMA_Init+0x162>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a6c      	ldr	r2, [pc, #432]	@ (800204c <HAL_DMA_Init+0x1dc>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	f000 8099 	beq.w	8001fd2 <HAL_DMA_Init+0x162>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a6a      	ldr	r2, [pc, #424]	@ (8002050 <HAL_DMA_Init+0x1e0>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	f000 8093 	beq.w	8001fd2 <HAL_DMA_Init+0x162>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a68      	ldr	r2, [pc, #416]	@ (8002054 <HAL_DMA_Init+0x1e4>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	f000 808d 	beq.w	8001fd2 <HAL_DMA_Init+0x162>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a66      	ldr	r2, [pc, #408]	@ (8002058 <HAL_DMA_Init+0x1e8>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	f000 8087 	beq.w	8001fd2 <HAL_DMA_Init+0x162>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a64      	ldr	r2, [pc, #400]	@ (800205c <HAL_DMA_Init+0x1ec>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	f000 8081 	beq.w	8001fd2 <HAL_DMA_Init+0x162>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a62      	ldr	r2, [pc, #392]	@ (8002060 <HAL_DMA_Init+0x1f0>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d07b      	beq.n	8001fd2 <HAL_DMA_Init+0x162>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a61      	ldr	r2, [pc, #388]	@ (8002064 <HAL_DMA_Init+0x1f4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d076      	beq.n	8001fd2 <HAL_DMA_Init+0x162>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a5f      	ldr	r2, [pc, #380]	@ (8002068 <HAL_DMA_Init+0x1f8>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d071      	beq.n	8001fd2 <HAL_DMA_Init+0x162>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a5e      	ldr	r2, [pc, #376]	@ (800206c <HAL_DMA_Init+0x1fc>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d06c      	beq.n	8001fd2 <HAL_DMA_Init+0x162>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a5c      	ldr	r2, [pc, #368]	@ (8002070 <HAL_DMA_Init+0x200>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d067      	beq.n	8001fd2 <HAL_DMA_Init+0x162>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a5b      	ldr	r2, [pc, #364]	@ (8002074 <HAL_DMA_Init+0x204>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d062      	beq.n	8001fd2 <HAL_DMA_Init+0x162>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a59      	ldr	r2, [pc, #356]	@ (8002078 <HAL_DMA_Init+0x208>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d05d      	beq.n	8001fd2 <HAL_DMA_Init+0x162>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a58      	ldr	r2, [pc, #352]	@ (800207c <HAL_DMA_Init+0x20c>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d058      	beq.n	8001fd2 <HAL_DMA_Init+0x162>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a56      	ldr	r2, [pc, #344]	@ (8002080 <HAL_DMA_Init+0x210>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d053      	beq.n	8001fd2 <HAL_DMA_Init+0x162>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a55      	ldr	r2, [pc, #340]	@ (8002084 <HAL_DMA_Init+0x214>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d04e      	beq.n	8001fd2 <HAL_DMA_Init+0x162>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a53      	ldr	r2, [pc, #332]	@ (8002088 <HAL_DMA_Init+0x218>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d049      	beq.n	8001fd2 <HAL_DMA_Init+0x162>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a52      	ldr	r2, [pc, #328]	@ (800208c <HAL_DMA_Init+0x21c>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d044      	beq.n	8001fd2 <HAL_DMA_Init+0x162>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a50      	ldr	r2, [pc, #320]	@ (8002090 <HAL_DMA_Init+0x220>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d03f      	beq.n	8001fd2 <HAL_DMA_Init+0x162>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a4f      	ldr	r2, [pc, #316]	@ (8002094 <HAL_DMA_Init+0x224>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d03a      	beq.n	8001fd2 <HAL_DMA_Init+0x162>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a4d      	ldr	r2, [pc, #308]	@ (8002098 <HAL_DMA_Init+0x228>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d035      	beq.n	8001fd2 <HAL_DMA_Init+0x162>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a4c      	ldr	r2, [pc, #304]	@ (800209c <HAL_DMA_Init+0x22c>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d030      	beq.n	8001fd2 <HAL_DMA_Init+0x162>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a4a      	ldr	r2, [pc, #296]	@ (80020a0 <HAL_DMA_Init+0x230>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d02b      	beq.n	8001fd2 <HAL_DMA_Init+0x162>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a49      	ldr	r2, [pc, #292]	@ (80020a4 <HAL_DMA_Init+0x234>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d026      	beq.n	8001fd2 <HAL_DMA_Init+0x162>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a47      	ldr	r2, [pc, #284]	@ (80020a8 <HAL_DMA_Init+0x238>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d021      	beq.n	8001fd2 <HAL_DMA_Init+0x162>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a46      	ldr	r2, [pc, #280]	@ (80020ac <HAL_DMA_Init+0x23c>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d01c      	beq.n	8001fd2 <HAL_DMA_Init+0x162>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a44      	ldr	r2, [pc, #272]	@ (80020b0 <HAL_DMA_Init+0x240>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d017      	beq.n	8001fd2 <HAL_DMA_Init+0x162>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a43      	ldr	r2, [pc, #268]	@ (80020b4 <HAL_DMA_Init+0x244>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d012      	beq.n	8001fd2 <HAL_DMA_Init+0x162>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a41      	ldr	r2, [pc, #260]	@ (80020b8 <HAL_DMA_Init+0x248>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d00d      	beq.n	8001fd2 <HAL_DMA_Init+0x162>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a40      	ldr	r2, [pc, #256]	@ (80020bc <HAL_DMA_Init+0x24c>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d008      	beq.n	8001fd2 <HAL_DMA_Init+0x162>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a3e      	ldr	r2, [pc, #248]	@ (80020c0 <HAL_DMA_Init+0x250>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d003      	beq.n	8001fd2 <HAL_DMA_Init+0x162>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a3d      	ldr	r2, [pc, #244]	@ (80020c4 <HAL_DMA_Init+0x254>)
 8001fd0:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2202      	movs	r2, #2
 8001fde:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	695a      	ldr	r2, [r3, #20]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f042 0206 	orr.w	r2, r2, #6
 8001ff0:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8001ff2:	e00f      	b.n	8002014 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001ff4:	f7ff fd7c 	bl	8001af0 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b05      	cmp	r3, #5
 8002000:	d908      	bls.n	8002014 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2210      	movs	r2, #16
 8002006:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2203      	movs	r2, #3
 800200c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e015      	b.n	8002040 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1e8      	bne.n	8001ff4 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 fb18 	bl	8002658 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40020050 	.word	0x40020050
 800204c:	50020050 	.word	0x50020050
 8002050:	400200d0 	.word	0x400200d0
 8002054:	500200d0 	.word	0x500200d0
 8002058:	40020150 	.word	0x40020150
 800205c:	50020150 	.word	0x50020150
 8002060:	400201d0 	.word	0x400201d0
 8002064:	500201d0 	.word	0x500201d0
 8002068:	40020250 	.word	0x40020250
 800206c:	50020250 	.word	0x50020250
 8002070:	400202d0 	.word	0x400202d0
 8002074:	500202d0 	.word	0x500202d0
 8002078:	40020350 	.word	0x40020350
 800207c:	50020350 	.word	0x50020350
 8002080:	400203d0 	.word	0x400203d0
 8002084:	500203d0 	.word	0x500203d0
 8002088:	40021050 	.word	0x40021050
 800208c:	50021050 	.word	0x50021050
 8002090:	400210d0 	.word	0x400210d0
 8002094:	500210d0 	.word	0x500210d0
 8002098:	40021150 	.word	0x40021150
 800209c:	50021150 	.word	0x50021150
 80020a0:	400211d0 	.word	0x400211d0
 80020a4:	500211d0 	.word	0x500211d0
 80020a8:	40021250 	.word	0x40021250
 80020ac:	50021250 	.word	0x50021250
 80020b0:	400212d0 	.word	0x400212d0
 80020b4:	500212d0 	.word	0x500212d0
 80020b8:	40021350 	.word	0x40021350
 80020bc:	50021350 	.word	0x50021350
 80020c0:	400213d0 	.word	0x400213d0
 80020c4:	500213d0 	.word	0x500213d0

080020c8 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
 80020d4:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e04f      	b.n	8002180 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d101      	bne.n	80020ee <HAL_DMA_Start_IT+0x26>
 80020ea:	2302      	movs	r3, #2
 80020ec:	e048      	b.n	8002180 <HAL_DMA_Start_IT+0xb8>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d136      	bne.n	8002170 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2202      	movs	r2, #2
 8002106:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	68b9      	ldr	r1, [r7, #8]
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 fa78 	bl	800260c <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	695a      	ldr	r2, [r3, #20]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800212a:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002130:	2b00      	cmp	r3, #0
 8002132:	d007      	beq.n	8002144 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002142:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002148:	2b00      	cmp	r3, #0
 800214a:	d007      	beq.n	800215c <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	695a      	ldr	r2, [r3, #20]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800215a:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	695a      	ldr	r2, [r3, #20]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 0201 	orr.w	r2, r2, #1
 800216a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
 800216e:	e007      	b.n	8002180 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2240      	movs	r2, #64	@ 0x40
 8002174:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8002190:	f7ff fcae 	bl	8001af0 <HAL_GetTick>
 8002194:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e06b      	b.n	8002278 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d008      	beq.n	80021be <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2220      	movs	r2, #32
 80021b0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e05c      	b.n	8002278 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	695a      	ldr	r2, [r3, #20]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f042 0204 	orr.w	r2, r2, #4
 80021cc:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2205      	movs	r2, #5
 80021d2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80021d6:	e020      	b.n	800221a <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80021d8:	f7ff fc8a 	bl	8001af0 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b05      	cmp	r3, #5
 80021e4:	d919      	bls.n	800221a <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ea:	f043 0210 	orr.w	r2, r3, #16
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2203      	movs	r2, #3
 80021f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800220a:	2201      	movs	r2, #1
 800220c:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e02e      	b.n	8002278 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0d7      	beq.n	80021d8 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	695a      	ldr	r2, [r3, #20]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0202 	orr.w	r2, r2, #2
 8002236:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2204      	movs	r2, #4
 800223c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8002248:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800225a:	2b00      	cmp	r3, #0
 800225c:	d007      	beq.n	800226e <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002262:	2201      	movs	r2, #1
 8002264:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2200      	movs	r2, #0
 800226c:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e019      	b.n	80022c6 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d004      	beq.n	80022a8 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2220      	movs	r2, #32
 80022a2:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e00e      	b.n	80022c6 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2204      	movs	r2, #4
 80022ac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6812      	ldr	r2, [r2, #0]
 80022ba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80022be:	f043 0304 	orr.w	r3, r3, #4
 80022c2:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b086      	sub	sp, #24
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80022e2:	f023 030f 	bic.w	r3, r3, #15
 80022e6:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f0:	3b50      	subs	r3, #80	@ 0x50
 80022f2:	09db      	lsrs	r3, r3, #7
 80022f4:	f003 031f 	and.w	r3, r3, #31
 80022f8:	2201      	movs	r2, #1
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4013      	ands	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 813b 	beq.w	8002588 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800231c:	2b00      	cmp	r3, #0
 800231e:	d011      	beq.n	8002344 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00a      	beq.n	8002344 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002336:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233c:	f043 0201 	orr.w	r2, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800234e:	2b00      	cmp	r3, #0
 8002350:	d011      	beq.n	8002376 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00a      	beq.n	8002376 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002368:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800236e:	f043 0202 	orr.w	r2, r3, #2
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d011      	beq.n	80023a8 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00a      	beq.n	80023a8 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800239a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a0:	f043 0204 	orr.w	r2, r3, #4
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d011      	beq.n	80023da <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00a      	beq.n	80023da <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80023cc:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d2:	f043 0208 	orr.w	r2, r3, #8
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d013      	beq.n	8002410 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00c      	beq.n	8002410 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023fe:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d04c      	beq.n	80024b8 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d045      	beq.n	80024b8 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002434:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b04      	cmp	r3, #4
 8002440:	d12e      	bne.n	80024a0 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	695a      	ldr	r2, [r3, #20]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002450:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	695a      	ldr	r2, [r3, #20]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f042 0202 	orr.w	r2, r2, #2
 8002460:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800246e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002472:	2b00      	cmp	r3, #0
 8002474:	d007      	beq.n	8002486 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800247a:	2201      	movs	r2, #1
 800247c:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2200      	movs	r2, #0
 8002484:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002492:	2b00      	cmp	r3, #0
 8002494:	d07a      	beq.n	800258c <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	4798      	blx	r3
        }

        return;
 800249e:	e075      	b.n	800258c <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2205      	movs	r2, #5
 80024a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d039      	beq.n	800253a <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d032      	beq.n	800253a <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d012      	beq.n	8002506 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d116      	bne.n	8002518 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d111      	bne.n	8002518 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002500:	2201      	movs	r2, #1
 8002502:	731a      	strb	r2, [r3, #12]
 8002504:	e008      	b.n	8002518 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800250c:	2b00      	cmp	r3, #0
 800250e:	d103      	bne.n	8002518 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002520:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800253e:	2b00      	cmp	r3, #0
 8002540:	d025      	beq.n	800258e <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	695a      	ldr	r2, [r3, #20]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f042 0202 	orr.w	r2, r2, #2
 8002550:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800255e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800256a:	2201      	movs	r2, #1
 800256c:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800257a:	2b00      	cmp	r3, #0
 800257c:	d007      	beq.n	800258e <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	4798      	blx	r3
 8002586:	e002      	b.n	800258e <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8002588:	bf00      	nop
 800258a:	e000      	b.n	800258e <HAL_DMA_IRQHandler+0x2bc>
        return;
 800258c:	bf00      	nop
    }
  }
}
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e02b      	b.n	8002600 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80025b0:	f023 030f 	bic.w	r3, r3, #15
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025be:	3b50      	subs	r3, #80	@ 0x50
 80025c0:	09db      	lsrs	r3, r3, #7
 80025c2:	f003 031f 	and.w	r3, r3, #31
 80025c6:	2201      	movs	r2, #1
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	f003 0310 	and.w	r3, r3, #16
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d012      	beq.n	80025fe <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	f003 0311 	and.w	r3, r3, #17
 80025de:	2b11      	cmp	r3, #17
 80025e0:	d106      	bne.n	80025f0 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	431a      	orrs	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	e006      	b.n	80025fe <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	43db      	mvns	r3, r3
 80025f8:	401a      	ands	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
 8002618:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002620:	0c1b      	lsrs	r3, r3, #16
 8002622:	041b      	lsls	r3, r3, #16
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	b291      	uxth	r1, r2
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	6812      	ldr	r2, [r2, #0]
 800262c:	430b      	orrs	r3, r1
 800262e:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8002638:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800264a:	bf00      	nop
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
	...

08002658 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	430a      	orrs	r2, r1
 8002678:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695a      	ldr	r2, [r3, #20]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	431a      	orrs	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a53      	ldr	r2, [pc, #332]	@ (80027e4 <DMA_Init+0x18c>)
 8002698:	4293      	cmp	r3, r2
 800269a:	f000 80a0 	beq.w	80027de <DMA_Init+0x186>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a51      	ldr	r2, [pc, #324]	@ (80027e8 <DMA_Init+0x190>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	f000 809a 	beq.w	80027de <DMA_Init+0x186>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a4f      	ldr	r2, [pc, #316]	@ (80027ec <DMA_Init+0x194>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	f000 8094 	beq.w	80027de <DMA_Init+0x186>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a4d      	ldr	r2, [pc, #308]	@ (80027f0 <DMA_Init+0x198>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	f000 808e 	beq.w	80027de <DMA_Init+0x186>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a4b      	ldr	r2, [pc, #300]	@ (80027f4 <DMA_Init+0x19c>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	f000 8088 	beq.w	80027de <DMA_Init+0x186>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a49      	ldr	r2, [pc, #292]	@ (80027f8 <DMA_Init+0x1a0>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	f000 8082 	beq.w	80027de <DMA_Init+0x186>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a47      	ldr	r2, [pc, #284]	@ (80027fc <DMA_Init+0x1a4>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d07c      	beq.n	80027de <DMA_Init+0x186>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a45      	ldr	r2, [pc, #276]	@ (8002800 <DMA_Init+0x1a8>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d077      	beq.n	80027de <DMA_Init+0x186>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a44      	ldr	r2, [pc, #272]	@ (8002804 <DMA_Init+0x1ac>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d072      	beq.n	80027de <DMA_Init+0x186>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a42      	ldr	r2, [pc, #264]	@ (8002808 <DMA_Init+0x1b0>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d06d      	beq.n	80027de <DMA_Init+0x186>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a41      	ldr	r2, [pc, #260]	@ (800280c <DMA_Init+0x1b4>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d068      	beq.n	80027de <DMA_Init+0x186>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a3f      	ldr	r2, [pc, #252]	@ (8002810 <DMA_Init+0x1b8>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d063      	beq.n	80027de <DMA_Init+0x186>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a3e      	ldr	r2, [pc, #248]	@ (8002814 <DMA_Init+0x1bc>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d05e      	beq.n	80027de <DMA_Init+0x186>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a3c      	ldr	r2, [pc, #240]	@ (8002818 <DMA_Init+0x1c0>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d059      	beq.n	80027de <DMA_Init+0x186>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a3b      	ldr	r2, [pc, #236]	@ (800281c <DMA_Init+0x1c4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d054      	beq.n	80027de <DMA_Init+0x186>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a39      	ldr	r2, [pc, #228]	@ (8002820 <DMA_Init+0x1c8>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d04f      	beq.n	80027de <DMA_Init+0x186>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a38      	ldr	r2, [pc, #224]	@ (8002824 <DMA_Init+0x1cc>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d04a      	beq.n	80027de <DMA_Init+0x186>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a36      	ldr	r2, [pc, #216]	@ (8002828 <DMA_Init+0x1d0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d045      	beq.n	80027de <DMA_Init+0x186>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a35      	ldr	r2, [pc, #212]	@ (800282c <DMA_Init+0x1d4>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d040      	beq.n	80027de <DMA_Init+0x186>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a33      	ldr	r2, [pc, #204]	@ (8002830 <DMA_Init+0x1d8>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d03b      	beq.n	80027de <DMA_Init+0x186>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a32      	ldr	r2, [pc, #200]	@ (8002834 <DMA_Init+0x1dc>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d036      	beq.n	80027de <DMA_Init+0x186>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a30      	ldr	r2, [pc, #192]	@ (8002838 <DMA_Init+0x1e0>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d031      	beq.n	80027de <DMA_Init+0x186>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a2f      	ldr	r2, [pc, #188]	@ (800283c <DMA_Init+0x1e4>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d02c      	beq.n	80027de <DMA_Init+0x186>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a2d      	ldr	r2, [pc, #180]	@ (8002840 <DMA_Init+0x1e8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d027      	beq.n	80027de <DMA_Init+0x186>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a2c      	ldr	r2, [pc, #176]	@ (8002844 <DMA_Init+0x1ec>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d022      	beq.n	80027de <DMA_Init+0x186>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a2a      	ldr	r2, [pc, #168]	@ (8002848 <DMA_Init+0x1f0>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d01d      	beq.n	80027de <DMA_Init+0x186>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a29      	ldr	r2, [pc, #164]	@ (800284c <DMA_Init+0x1f4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d018      	beq.n	80027de <DMA_Init+0x186>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a27      	ldr	r2, [pc, #156]	@ (8002850 <DMA_Init+0x1f8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d013      	beq.n	80027de <DMA_Init+0x186>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a26      	ldr	r2, [pc, #152]	@ (8002854 <DMA_Init+0x1fc>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d00e      	beq.n	80027de <DMA_Init+0x186>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a24      	ldr	r2, [pc, #144]	@ (8002858 <DMA_Init+0x200>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d009      	beq.n	80027de <DMA_Init+0x186>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a23      	ldr	r2, [pc, #140]	@ (800285c <DMA_Init+0x204>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d004      	beq.n	80027de <DMA_Init+0x186>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a21      	ldr	r2, [pc, #132]	@ (8002860 <DMA_Init+0x208>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d142      	bne.n	8002864 <DMA_Init+0x20c>
 80027de:	2301      	movs	r3, #1
 80027e0:	e041      	b.n	8002866 <DMA_Init+0x20e>
 80027e2:	bf00      	nop
 80027e4:	40020050 	.word	0x40020050
 80027e8:	50020050 	.word	0x50020050
 80027ec:	400200d0 	.word	0x400200d0
 80027f0:	500200d0 	.word	0x500200d0
 80027f4:	40020150 	.word	0x40020150
 80027f8:	50020150 	.word	0x50020150
 80027fc:	400201d0 	.word	0x400201d0
 8002800:	500201d0 	.word	0x500201d0
 8002804:	40020250 	.word	0x40020250
 8002808:	50020250 	.word	0x50020250
 800280c:	400202d0 	.word	0x400202d0
 8002810:	500202d0 	.word	0x500202d0
 8002814:	40020350 	.word	0x40020350
 8002818:	50020350 	.word	0x50020350
 800281c:	400203d0 	.word	0x400203d0
 8002820:	500203d0 	.word	0x500203d0
 8002824:	40021050 	.word	0x40021050
 8002828:	50021050 	.word	0x50021050
 800282c:	400210d0 	.word	0x400210d0
 8002830:	500210d0 	.word	0x500210d0
 8002834:	40021150 	.word	0x40021150
 8002838:	50021150 	.word	0x50021150
 800283c:	400211d0 	.word	0x400211d0
 8002840:	500211d0 	.word	0x500211d0
 8002844:	40021250 	.word	0x40021250
 8002848:	50021250 	.word	0x50021250
 800284c:	400212d0 	.word	0x400212d0
 8002850:	500212d0 	.word	0x500212d0
 8002854:	40021350 	.word	0x40021350
 8002858:	50021350 	.word	0x50021350
 800285c:	400213d0 	.word	0x400213d0
 8002860:	500213d0 	.word	0x500213d0
 8002864:	2300      	movs	r3, #0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d012      	beq.n	8002890 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002872:	3b01      	subs	r3, #1
 8002874:	051b      	lsls	r3, r3, #20
 8002876:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800287a:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002880:	3b01      	subs	r3, #1
 8002882:	011b      	lsls	r3, r3, #4
 8002884:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002888:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	4313      	orrs	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	641a      	str	r2, [r3, #64]	@ 0x40
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
#endif /* DMA_CTR1_SSEC */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b4:	4313      	orrs	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028c0:	f040 80b0 	bne.w	8002a24 <DMA_Init+0x3cc>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a84      	ldr	r2, [pc, #528]	@ (8002adc <DMA_Init+0x484>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	f000 80a0 	beq.w	8002a10 <DMA_Init+0x3b8>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a82      	ldr	r2, [pc, #520]	@ (8002ae0 <DMA_Init+0x488>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	f000 809a 	beq.w	8002a10 <DMA_Init+0x3b8>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a80      	ldr	r2, [pc, #512]	@ (8002ae4 <DMA_Init+0x48c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	f000 8094 	beq.w	8002a10 <DMA_Init+0x3b8>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a7e      	ldr	r2, [pc, #504]	@ (8002ae8 <DMA_Init+0x490>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	f000 808e 	beq.w	8002a10 <DMA_Init+0x3b8>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a7c      	ldr	r2, [pc, #496]	@ (8002aec <DMA_Init+0x494>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	f000 8088 	beq.w	8002a10 <DMA_Init+0x3b8>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a7a      	ldr	r2, [pc, #488]	@ (8002af0 <DMA_Init+0x498>)
 8002906:	4293      	cmp	r3, r2
 8002908:	f000 8082 	beq.w	8002a10 <DMA_Init+0x3b8>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a78      	ldr	r2, [pc, #480]	@ (8002af4 <DMA_Init+0x49c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d07c      	beq.n	8002a10 <DMA_Init+0x3b8>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a77      	ldr	r2, [pc, #476]	@ (8002af8 <DMA_Init+0x4a0>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d077      	beq.n	8002a10 <DMA_Init+0x3b8>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a75      	ldr	r2, [pc, #468]	@ (8002afc <DMA_Init+0x4a4>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d072      	beq.n	8002a10 <DMA_Init+0x3b8>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a74      	ldr	r2, [pc, #464]	@ (8002b00 <DMA_Init+0x4a8>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d06d      	beq.n	8002a10 <DMA_Init+0x3b8>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a72      	ldr	r2, [pc, #456]	@ (8002b04 <DMA_Init+0x4ac>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d068      	beq.n	8002a10 <DMA_Init+0x3b8>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a71      	ldr	r2, [pc, #452]	@ (8002b08 <DMA_Init+0x4b0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d063      	beq.n	8002a10 <DMA_Init+0x3b8>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a6f      	ldr	r2, [pc, #444]	@ (8002b0c <DMA_Init+0x4b4>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d05e      	beq.n	8002a10 <DMA_Init+0x3b8>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a6e      	ldr	r2, [pc, #440]	@ (8002b10 <DMA_Init+0x4b8>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d059      	beq.n	8002a10 <DMA_Init+0x3b8>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a6c      	ldr	r2, [pc, #432]	@ (8002b14 <DMA_Init+0x4bc>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d054      	beq.n	8002a10 <DMA_Init+0x3b8>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a6b      	ldr	r2, [pc, #428]	@ (8002b18 <DMA_Init+0x4c0>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d04f      	beq.n	8002a10 <DMA_Init+0x3b8>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a69      	ldr	r2, [pc, #420]	@ (8002b1c <DMA_Init+0x4c4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d04a      	beq.n	8002a10 <DMA_Init+0x3b8>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a68      	ldr	r2, [pc, #416]	@ (8002b20 <DMA_Init+0x4c8>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d045      	beq.n	8002a10 <DMA_Init+0x3b8>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a66      	ldr	r2, [pc, #408]	@ (8002b24 <DMA_Init+0x4cc>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d040      	beq.n	8002a10 <DMA_Init+0x3b8>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a65      	ldr	r2, [pc, #404]	@ (8002b28 <DMA_Init+0x4d0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d03b      	beq.n	8002a10 <DMA_Init+0x3b8>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a63      	ldr	r2, [pc, #396]	@ (8002b2c <DMA_Init+0x4d4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d036      	beq.n	8002a10 <DMA_Init+0x3b8>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a62      	ldr	r2, [pc, #392]	@ (8002b30 <DMA_Init+0x4d8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d031      	beq.n	8002a10 <DMA_Init+0x3b8>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a60      	ldr	r2, [pc, #384]	@ (8002b34 <DMA_Init+0x4dc>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d02c      	beq.n	8002a10 <DMA_Init+0x3b8>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a5f      	ldr	r2, [pc, #380]	@ (8002b38 <DMA_Init+0x4e0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d027      	beq.n	8002a10 <DMA_Init+0x3b8>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a5d      	ldr	r2, [pc, #372]	@ (8002b3c <DMA_Init+0x4e4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d022      	beq.n	8002a10 <DMA_Init+0x3b8>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a5c      	ldr	r2, [pc, #368]	@ (8002b40 <DMA_Init+0x4e8>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d01d      	beq.n	8002a10 <DMA_Init+0x3b8>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a5a      	ldr	r2, [pc, #360]	@ (8002b44 <DMA_Init+0x4ec>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d018      	beq.n	8002a10 <DMA_Init+0x3b8>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a59      	ldr	r2, [pc, #356]	@ (8002b48 <DMA_Init+0x4f0>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d013      	beq.n	8002a10 <DMA_Init+0x3b8>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a57      	ldr	r2, [pc, #348]	@ (8002b4c <DMA_Init+0x4f4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d00e      	beq.n	8002a10 <DMA_Init+0x3b8>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a56      	ldr	r2, [pc, #344]	@ (8002b50 <DMA_Init+0x4f8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d009      	beq.n	8002a10 <DMA_Init+0x3b8>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a54      	ldr	r2, [pc, #336]	@ (8002b54 <DMA_Init+0x4fc>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d004      	beq.n	8002a10 <DMA_Init+0x3b8>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a53      	ldr	r2, [pc, #332]	@ (8002b58 <DMA_Init+0x500>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d101      	bne.n	8002a14 <DMA_Init+0x3bc>
 8002a10:	2301      	movs	r3, #1
 8002a12:	e000      	b.n	8002a16 <DMA_Init+0x3be>
 8002a14:	2300      	movs	r3, #0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00d      	beq.n	8002a36 <DMA_Init+0x3de>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	e008      	b.n	8002a36 <DMA_Init+0x3de>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a2c:	d103      	bne.n	8002a36 <DMA_Init+0x3de>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a34:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Set DMA channel operation mode */
  tmpreg |= hdma->Init.Mode;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a46:	4b45      	ldr	r3, [pc, #276]	@ (8002b5c <DMA_Init+0x504>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6812      	ldr	r2, [r2, #0]
 8002a4e:	68f9      	ldr	r1, [r7, #12]
 8002a50:	430b      	orrs	r3, r1
 8002a52:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a2a      	ldr	r2, [pc, #168]	@ (8002b0c <DMA_Init+0x4b4>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d022      	beq.n	8002aac <DMA_Init+0x454>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a29      	ldr	r2, [pc, #164]	@ (8002b10 <DMA_Init+0x4b8>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d01d      	beq.n	8002aac <DMA_Init+0x454>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a27      	ldr	r2, [pc, #156]	@ (8002b14 <DMA_Init+0x4bc>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d018      	beq.n	8002aac <DMA_Init+0x454>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a26      	ldr	r2, [pc, #152]	@ (8002b18 <DMA_Init+0x4c0>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d013      	beq.n	8002aac <DMA_Init+0x454>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a30      	ldr	r2, [pc, #192]	@ (8002b4c <DMA_Init+0x4f4>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d00e      	beq.n	8002aac <DMA_Init+0x454>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a2f      	ldr	r2, [pc, #188]	@ (8002b50 <DMA_Init+0x4f8>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d009      	beq.n	8002aac <DMA_Init+0x454>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a2d      	ldr	r2, [pc, #180]	@ (8002b54 <DMA_Init+0x4fc>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d004      	beq.n	8002aac <DMA_Init+0x454>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a2c      	ldr	r2, [pc, #176]	@ (8002b58 <DMA_Init+0x500>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d101      	bne.n	8002ab0 <DMA_Init+0x458>
 8002aac:	2301      	movs	r3, #1
 8002aae:	e000      	b.n	8002ab2 <DMA_Init+0x45a>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d007      	beq.n	8002ac6 <DMA_Init+0x46e>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2200      	movs	r2, #0
 8002abc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2200      	movs	r2, #0
 8002acc:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8002ace:	bf00      	nop
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40020050 	.word	0x40020050
 8002ae0:	50020050 	.word	0x50020050
 8002ae4:	400200d0 	.word	0x400200d0
 8002ae8:	500200d0 	.word	0x500200d0
 8002aec:	40020150 	.word	0x40020150
 8002af0:	50020150 	.word	0x50020150
 8002af4:	400201d0 	.word	0x400201d0
 8002af8:	500201d0 	.word	0x500201d0
 8002afc:	40020250 	.word	0x40020250
 8002b00:	50020250 	.word	0x50020250
 8002b04:	400202d0 	.word	0x400202d0
 8002b08:	500202d0 	.word	0x500202d0
 8002b0c:	40020350 	.word	0x40020350
 8002b10:	50020350 	.word	0x50020350
 8002b14:	400203d0 	.word	0x400203d0
 8002b18:	500203d0 	.word	0x500203d0
 8002b1c:	40021050 	.word	0x40021050
 8002b20:	50021050 	.word	0x50021050
 8002b24:	400210d0 	.word	0x400210d0
 8002b28:	500210d0 	.word	0x500210d0
 8002b2c:	40021150 	.word	0x40021150
 8002b30:	50021150 	.word	0x50021150
 8002b34:	400211d0 	.word	0x400211d0
 8002b38:	500211d0 	.word	0x500211d0
 8002b3c:	40021250 	.word	0x40021250
 8002b40:	50021250 	.word	0x50021250
 8002b44:	400212d0 	.word	0x400212d0
 8002b48:	500212d0 	.word	0x500212d0
 8002b4c:	40021350 	.word	0x40021350
 8002b50:	50021350 	.word	0x50021350
 8002b54:	400213d0 	.word	0x400213d0
 8002b58:	500213d0 	.word	0x500213d0
 8002b5c:	3cc02100 	.word	0x3cc02100

08002b60 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_DMAEx_List_Start_IT+0x16>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e082      	b.n	8002c80 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002b80:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b8c:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8002b8e:	7dfb      	ldrb	r3, [r7, #23]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d005      	beq.n	8002ba0 <HAL_DMAEx_List_Start_IT+0x40>
 8002b94:	7dfb      	ldrb	r3, [r7, #23]
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d16a      	bne.n	8002c70 <HAL_DMAEx_List_Start_IT+0x110>
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d067      	beq.n	8002c70 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d157      	bne.n	8002c5c <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d101      	bne.n	8002bba <HAL_DMAEx_List_Start_IT+0x5a>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	e062      	b.n	8002c80 <HAL_DMAEx_List_Start_IT+0x120>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bce:	2202      	movs	r2, #2
 8002bd0:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bdc:	2200      	movs	r2, #0
 8002bde:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695a      	ldr	r2, [r3, #20]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8002bee:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d007      	beq.n	8002c08 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	695a      	ldr	r2, [r3, #20]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c06:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d007      	beq.n	8002c20 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c1e:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f107 010c 	add.w	r1, r7, #12
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 f82b 	bl	8002c88 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4619      	mov	r1, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	0c0b      	lsrs	r3, r1, #16
 8002c40:	041b      	lsls	r3, r3, #16
 8002c42:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002c50:	4013      	ands	r3, r2
 8002c52:	68f9      	ldr	r1, [r7, #12]
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6812      	ldr	r2, [r2, #0]
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695a      	ldr	r2, [r3, #20]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0201 	orr.w	r2, r2, #1
 8002c6a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	e007      	b.n	8002c80 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2240      	movs	r2, #64	@ 0x40
 8002c74:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3718      	adds	r7, #24
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00c      	beq.n	8002cba <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d002      	beq.n	8002cac <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8002ce0 <DMA_List_GetCLLRNodeInfo+0x58>)
 8002caa:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00f      	beq.n	8002cd2 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2207      	movs	r2, #7
 8002cb6:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8002cb8:	e00b      	b.n	8002cd2 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d002      	beq.n	8002cc6 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	4a08      	ldr	r2, [pc, #32]	@ (8002ce4 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8002cc4:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2205      	movs	r2, #5
 8002cd0:	601a      	str	r2, [r3, #0]
}
 8002cd2:	bf00      	nop
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	fe010000 	.word	0xfe010000
 8002ce4:	f8010000 	.word	0xf8010000

08002ce8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b087      	sub	sp, #28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002cf6:	e136      	b.n	8002f66 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	fa01 f303 	lsl.w	r3, r1, r3
 8002d04:	4013      	ands	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 8128 	beq.w	8002f60 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d003      	beq.n	8002d20 <HAL_GPIO_Init+0x38>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b12      	cmp	r3, #18
 8002d1e:	d125      	bne.n	8002d6c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	08da      	lsrs	r2, r3, #3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3208      	adds	r2, #8
 8002d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d2c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	220f      	movs	r2, #15
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	4013      	ands	r3, r2
 8002d42:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	f003 020f 	and.w	r2, r3, #15
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	08da      	lsrs	r2, r3, #3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3208      	adds	r2, #8
 8002d66:	6979      	ldr	r1, [r7, #20]
 8002d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	2203      	movs	r2, #3
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	4013      	ands	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 0203 	and.w	r2, r3, #3
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d00b      	beq.n	8002dc0 <HAL_GPIO_Init+0xd8>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d007      	beq.n	8002dc0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002db4:	2b11      	cmp	r3, #17
 8002db6:	d003      	beq.n	8002dc0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b12      	cmp	r3, #18
 8002dbe:	d130      	bne.n	8002e22 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	2203      	movs	r2, #3
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002df6:	2201      	movs	r2, #1
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	4013      	ands	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	091b      	lsrs	r3, r3, #4
 8002e0c:	f003 0201 	and.w	r2, r3, #1
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	d017      	beq.n	8002e5a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	2203      	movs	r2, #3
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d07c      	beq.n	8002f60 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002e66:	4a47      	ldr	r2, [pc, #284]	@ (8002f84 <HAL_GPIO_Init+0x29c>)
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	089b      	lsrs	r3, r3, #2
 8002e6c:	3318      	adds	r3, #24
 8002e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e72:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	f003 0303 	and.w	r3, r3, #3
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	220f      	movs	r2, #15
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	43db      	mvns	r3, r3
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	4013      	ands	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	0a9a      	lsrs	r2, r3, #10
 8002e8e:	4b3e      	ldr	r3, [pc, #248]	@ (8002f88 <HAL_GPIO_Init+0x2a0>)
 8002e90:	4013      	ands	r3, r2
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	f002 0203 	and.w	r2, r2, #3
 8002e98:	00d2      	lsls	r2, r2, #3
 8002e9a:	4093      	lsls	r3, r2
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002ea2:	4938      	ldr	r1, [pc, #224]	@ (8002f84 <HAL_GPIO_Init+0x29c>)
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	089b      	lsrs	r3, r3, #2
 8002ea8:	3318      	adds	r3, #24
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002eb0:	4b34      	ldr	r3, [pc, #208]	@ (8002f84 <HAL_GPIO_Init+0x29c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002ed4:	4a2b      	ldr	r2, [pc, #172]	@ (8002f84 <HAL_GPIO_Init+0x29c>)
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002eda:	4b2a      	ldr	r3, [pc, #168]	@ (8002f84 <HAL_GPIO_Init+0x29c>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002efe:	4a21      	ldr	r2, [pc, #132]	@ (8002f84 <HAL_GPIO_Init+0x29c>)
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002f04:	4b1f      	ldr	r3, [pc, #124]	@ (8002f84 <HAL_GPIO_Init+0x29c>)
 8002f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f0a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	4013      	ands	r3, r2
 8002f14:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002f2a:	4a16      	ldr	r2, [pc, #88]	@ (8002f84 <HAL_GPIO_Init+0x29c>)
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002f32:	4b14      	ldr	r3, [pc, #80]	@ (8002f84 <HAL_GPIO_Init+0x29c>)
 8002f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f38:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	4013      	ands	r3, r2
 8002f42:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002f58:	4a0a      	ldr	r2, [pc, #40]	@ (8002f84 <HAL_GPIO_Init+0x29c>)
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	3301      	adds	r3, #1
 8002f64:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f47f aec1 	bne.w	8002cf8 <HAL_GPIO_Init+0x10>
  }
}
 8002f76:	bf00      	nop
 8002f78:	bf00      	nop
 8002f7a:	371c      	adds	r7, #28
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	44022000 	.word	0x44022000
 8002f88:	002f7f7f 	.word	0x002f7f7f

08002f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	807b      	strh	r3, [r7, #2]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f9c:	787b      	ldrb	r3, [r7, #1]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fa2:	887a      	ldrh	r2, [r7, #2]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fa8:	e002      	b.n	8002fb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002faa:	887a      	ldrh	r2, [r7, #2]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fce:	887a      	ldrh	r2, [r7, #2]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	041a      	lsls	r2, r3, #16
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	43d9      	mvns	r1, r3
 8002fda:	887b      	ldrh	r3, [r7, #2]
 8002fdc:	400b      	ands	r3, r1
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	619a      	str	r2, [r3, #24]
}
 8002fe4:	bf00      	nop
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b088      	sub	sp, #32
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d102      	bne.n	8003004 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	f000 bc28 	b.w	8003854 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003004:	4b94      	ldr	r3, [pc, #592]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	f003 0318 	and.w	r3, r3, #24
 800300c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800300e:	4b92      	ldr	r3, [pc, #584]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 8003010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0310 	and.w	r3, r3, #16
 8003020:	2b00      	cmp	r3, #0
 8003022:	d05b      	beq.n	80030dc <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	2b08      	cmp	r3, #8
 8003028:	d005      	beq.n	8003036 <HAL_RCC_OscConfig+0x46>
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	2b18      	cmp	r3, #24
 800302e:	d114      	bne.n	800305a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	2b02      	cmp	r3, #2
 8003034:	d111      	bne.n	800305a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d102      	bne.n	8003044 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	f000 bc08 	b.w	8003854 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003044:	4b84      	ldr	r3, [pc, #528]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	041b      	lsls	r3, r3, #16
 8003052:	4981      	ldr	r1, [pc, #516]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 8003054:	4313      	orrs	r3, r2
 8003056:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003058:	e040      	b.n	80030dc <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d023      	beq.n	80030aa <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003062:	4b7d      	ldr	r3, [pc, #500]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a7c      	ldr	r2, [pc, #496]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 8003068:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800306c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306e:	f7fe fd3f 	bl	8001af0 <HAL_GetTick>
 8003072:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003076:	f7fe fd3b 	bl	8001af0 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e3e5      	b.n	8003854 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003088:	4b73      	ldr	r3, [pc, #460]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0f0      	beq.n	8003076 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003094:	4b70      	ldr	r3, [pc, #448]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	041b      	lsls	r3, r3, #16
 80030a2:	496d      	ldr	r1, [pc, #436]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	618b      	str	r3, [r1, #24]
 80030a8:	e018      	b.n	80030dc <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80030aa:	4b6b      	ldr	r3, [pc, #428]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a6a      	ldr	r2, [pc, #424]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 80030b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b6:	f7fe fd1b 	bl	8001af0 <HAL_GetTick>
 80030ba:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80030be:	f7fe fd17 	bl	8001af0 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e3c1      	b.n	8003854 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80030d0:	4b61      	ldr	r3, [pc, #388]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1f0      	bne.n	80030be <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 80a0 	beq.w	800322a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	2b10      	cmp	r3, #16
 80030ee:	d005      	beq.n	80030fc <HAL_RCC_OscConfig+0x10c>
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	2b18      	cmp	r3, #24
 80030f4:	d109      	bne.n	800310a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	2b03      	cmp	r3, #3
 80030fa:	d106      	bne.n	800310a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	f040 8092 	bne.w	800322a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e3a4      	b.n	8003854 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003112:	d106      	bne.n	8003122 <HAL_RCC_OscConfig+0x132>
 8003114:	4b50      	ldr	r3, [pc, #320]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a4f      	ldr	r2, [pc, #316]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 800311a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800311e:	6013      	str	r3, [r2, #0]
 8003120:	e058      	b.n	80031d4 <HAL_RCC_OscConfig+0x1e4>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d112      	bne.n	8003150 <HAL_RCC_OscConfig+0x160>
 800312a:	4b4b      	ldr	r3, [pc, #300]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a4a      	ldr	r2, [pc, #296]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 8003130:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	4b48      	ldr	r3, [pc, #288]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a47      	ldr	r2, [pc, #284]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 800313c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	4b45      	ldr	r3, [pc, #276]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a44      	ldr	r2, [pc, #272]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 8003148:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	e041      	b.n	80031d4 <HAL_RCC_OscConfig+0x1e4>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003158:	d112      	bne.n	8003180 <HAL_RCC_OscConfig+0x190>
 800315a:	4b3f      	ldr	r3, [pc, #252]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a3e      	ldr	r2, [pc, #248]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 8003160:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	4b3c      	ldr	r3, [pc, #240]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a3b      	ldr	r2, [pc, #236]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 800316c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003170:	6013      	str	r3, [r2, #0]
 8003172:	4b39      	ldr	r3, [pc, #228]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a38      	ldr	r2, [pc, #224]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 8003178:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	e029      	b.n	80031d4 <HAL_RCC_OscConfig+0x1e4>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003188:	d112      	bne.n	80031b0 <HAL_RCC_OscConfig+0x1c0>
 800318a:	4b33      	ldr	r3, [pc, #204]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a32      	ldr	r2, [pc, #200]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 8003190:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	4b30      	ldr	r3, [pc, #192]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a2f      	ldr	r2, [pc, #188]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 800319c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031a0:	6013      	str	r3, [r2, #0]
 80031a2:	4b2d      	ldr	r3, [pc, #180]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 80031a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031ac:	6013      	str	r3, [r2, #0]
 80031ae:	e011      	b.n	80031d4 <HAL_RCC_OscConfig+0x1e4>
 80031b0:	4b29      	ldr	r3, [pc, #164]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a28      	ldr	r2, [pc, #160]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 80031b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	4b26      	ldr	r3, [pc, #152]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a25      	ldr	r2, [pc, #148]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 80031c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031c6:	6013      	str	r3, [r2, #0]
 80031c8:	4b23      	ldr	r3, [pc, #140]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a22      	ldr	r2, [pc, #136]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 80031ce:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80031d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d013      	beq.n	8003204 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031dc:	f7fe fc88 	bl	8001af0 <HAL_GetTick>
 80031e0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80031e4:	f7fe fc84 	bl	8001af0 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b64      	cmp	r3, #100	@ 0x64
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e32e      	b.n	8003854 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031f6:	4b18      	ldr	r3, [pc, #96]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0f0      	beq.n	80031e4 <HAL_RCC_OscConfig+0x1f4>
 8003202:	e012      	b.n	800322a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003204:	f7fe fc74 	bl	8001af0 <HAL_GetTick>
 8003208:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800320c:	f7fe fc70 	bl	8001af0 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b64      	cmp	r3, #100	@ 0x64
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e31a      	b.n	8003854 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800321e:	4b0e      	ldr	r3, [pc, #56]	@ (8003258 <HAL_RCC_OscConfig+0x268>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1f0      	bne.n	800320c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 809a 	beq.w	800336c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d005      	beq.n	800324a <HAL_RCC_OscConfig+0x25a>
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	2b18      	cmp	r3, #24
 8003242:	d149      	bne.n	80032d8 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d146      	bne.n	80032d8 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d104      	bne.n	800325c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e2fe      	b.n	8003854 <HAL_RCC_OscConfig+0x864>
 8003256:	bf00      	nop
 8003258:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d11c      	bne.n	800329c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8003262:	4b9a      	ldr	r3, [pc, #616]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0218 	and.w	r2, r3, #24
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	429a      	cmp	r2, r3
 8003270:	d014      	beq.n	800329c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003272:	4b96      	ldr	r3, [pc, #600]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f023 0218 	bic.w	r2, r3, #24
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	4993      	ldr	r1, [pc, #588]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 8003280:	4313      	orrs	r3, r2
 8003282:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003284:	f000 fdd0 	bl	8003e28 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003288:	4b91      	ldr	r3, [pc, #580]	@ (80034d0 <HAL_RCC_OscConfig+0x4e0>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f7fe fba5 	bl	80019dc <HAL_InitTick>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e2db      	b.n	8003854 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329c:	f7fe fc28 	bl	8001af0 <HAL_GetTick>
 80032a0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80032a4:	f7fe fc24 	bl	8001af0 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e2ce      	b.n	8003854 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032b6:	4b85      	ldr	r3, [pc, #532]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80032c2:	4b82      	ldr	r3, [pc, #520]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	041b      	lsls	r3, r3, #16
 80032d0:	497e      	ldr	r1, [pc, #504]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80032d6:	e049      	b.n	800336c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d02c      	beq.n	800333a <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80032e0:	4b7a      	ldr	r3, [pc, #488]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f023 0218 	bic.w	r2, r3, #24
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	4977      	ldr	r1, [pc, #476]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80032f2:	4b76      	ldr	r3, [pc, #472]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a75      	ldr	r2, [pc, #468]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fe:	f7fe fbf7 	bl	8001af0 <HAL_GetTick>
 8003302:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003306:	f7fe fbf3 	bl	8001af0 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e29d      	b.n	8003854 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003318:	4b6c      	ldr	r3, [pc, #432]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0f0      	beq.n	8003306 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003324:	4b69      	ldr	r3, [pc, #420]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	041b      	lsls	r3, r3, #16
 8003332:	4966      	ldr	r1, [pc, #408]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 8003334:	4313      	orrs	r3, r2
 8003336:	610b      	str	r3, [r1, #16]
 8003338:	e018      	b.n	800336c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800333a:	4b64      	ldr	r3, [pc, #400]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a63      	ldr	r2, [pc, #396]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 8003340:	f023 0301 	bic.w	r3, r3, #1
 8003344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003346:	f7fe fbd3 	bl	8001af0 <HAL_GetTick>
 800334a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800334e:	f7fe fbcf 	bl	8001af0 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e279      	b.n	8003854 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003360:	4b5a      	ldr	r3, [pc, #360]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1f0      	bne.n	800334e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0308 	and.w	r3, r3, #8
 8003374:	2b00      	cmp	r3, #0
 8003376:	d03c      	beq.n	80033f2 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d01c      	beq.n	80033ba <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003380:	4b52      	ldr	r3, [pc, #328]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 8003382:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003386:	4a51      	ldr	r2, [pc, #324]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 8003388:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800338c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003390:	f7fe fbae 	bl	8001af0 <HAL_GetTick>
 8003394:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003398:	f7fe fbaa 	bl	8001af0 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e254      	b.n	8003854 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80033aa:	4b48      	ldr	r3, [pc, #288]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 80033ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0ef      	beq.n	8003398 <HAL_RCC_OscConfig+0x3a8>
 80033b8:	e01b      	b.n	80033f2 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ba:	4b44      	ldr	r3, [pc, #272]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 80033bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033c0:	4a42      	ldr	r2, [pc, #264]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 80033c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80033c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ca:	f7fe fb91 	bl	8001af0 <HAL_GetTick>
 80033ce:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80033d2:	f7fe fb8d 	bl	8001af0 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e237      	b.n	8003854 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80033e4:	4b39      	ldr	r3, [pc, #228]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 80033e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1ef      	bne.n	80033d2 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 80d2 	beq.w	80035a4 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003400:	4b34      	ldr	r3, [pc, #208]	@ (80034d4 <HAL_RCC_OscConfig+0x4e4>)
 8003402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d118      	bne.n	800343e <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800340c:	4b31      	ldr	r3, [pc, #196]	@ (80034d4 <HAL_RCC_OscConfig+0x4e4>)
 800340e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003410:	4a30      	ldr	r2, [pc, #192]	@ (80034d4 <HAL_RCC_OscConfig+0x4e4>)
 8003412:	f043 0301 	orr.w	r3, r3, #1
 8003416:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003418:	f7fe fb6a 	bl	8001af0 <HAL_GetTick>
 800341c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003420:	f7fe fb66 	bl	8001af0 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e210      	b.n	8003854 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003432:	4b28      	ldr	r3, [pc, #160]	@ (80034d4 <HAL_RCC_OscConfig+0x4e4>)
 8003434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0f0      	beq.n	8003420 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d108      	bne.n	8003458 <HAL_RCC_OscConfig+0x468>
 8003446:	4b21      	ldr	r3, [pc, #132]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 8003448:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800344c:	4a1f      	ldr	r2, [pc, #124]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003456:	e074      	b.n	8003542 <HAL_RCC_OscConfig+0x552>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d118      	bne.n	8003492 <HAL_RCC_OscConfig+0x4a2>
 8003460:	4b1a      	ldr	r3, [pc, #104]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 8003462:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003466:	4a19      	ldr	r2, [pc, #100]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 8003468:	f023 0301 	bic.w	r3, r3, #1
 800346c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003470:	4b16      	ldr	r3, [pc, #88]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 8003472:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003476:	4a15      	ldr	r2, [pc, #84]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 8003478:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800347c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003480:	4b12      	ldr	r3, [pc, #72]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 8003482:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003486:	4a11      	ldr	r2, [pc, #68]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 8003488:	f023 0304 	bic.w	r3, r3, #4
 800348c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003490:	e057      	b.n	8003542 <HAL_RCC_OscConfig+0x552>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	2b05      	cmp	r3, #5
 8003498:	d11e      	bne.n	80034d8 <HAL_RCC_OscConfig+0x4e8>
 800349a:	4b0c      	ldr	r3, [pc, #48]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 800349c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034a0:	4a0a      	ldr	r2, [pc, #40]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 80034a2:	f043 0304 	orr.w	r3, r3, #4
 80034a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80034aa:	4b08      	ldr	r3, [pc, #32]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 80034ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034b0:	4a06      	ldr	r2, [pc, #24]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 80034b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80034ba:	4b04      	ldr	r3, [pc, #16]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 80034bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034c0:	4a02      	ldr	r2, [pc, #8]	@ (80034cc <HAL_RCC_OscConfig+0x4dc>)
 80034c2:	f043 0301 	orr.w	r3, r3, #1
 80034c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80034ca:	e03a      	b.n	8003542 <HAL_RCC_OscConfig+0x552>
 80034cc:	44020c00 	.word	0x44020c00
 80034d0:	20000004 	.word	0x20000004
 80034d4:	44020800 	.word	0x44020800
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b85      	cmp	r3, #133	@ 0x85
 80034de:	d118      	bne.n	8003512 <HAL_RCC_OscConfig+0x522>
 80034e0:	4ba2      	ldr	r3, [pc, #648]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 80034e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034e6:	4aa1      	ldr	r2, [pc, #644]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 80034e8:	f043 0304 	orr.w	r3, r3, #4
 80034ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80034f0:	4b9e      	ldr	r3, [pc, #632]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 80034f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034f6:	4a9d      	ldr	r2, [pc, #628]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 80034f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003500:	4b9a      	ldr	r3, [pc, #616]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 8003502:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003506:	4a99      	ldr	r2, [pc, #612]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003510:	e017      	b.n	8003542 <HAL_RCC_OscConfig+0x552>
 8003512:	4b96      	ldr	r3, [pc, #600]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 8003514:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003518:	4a94      	ldr	r2, [pc, #592]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 800351a:	f023 0301 	bic.w	r3, r3, #1
 800351e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003522:	4b92      	ldr	r3, [pc, #584]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 8003524:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003528:	4a90      	ldr	r2, [pc, #576]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 800352a:	f023 0304 	bic.w	r3, r3, #4
 800352e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003532:	4b8e      	ldr	r3, [pc, #568]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 8003534:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003538:	4a8c      	ldr	r2, [pc, #560]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 800353a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800353e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d016      	beq.n	8003578 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354a:	f7fe fad1 	bl	8001af0 <HAL_GetTick>
 800354e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003550:	e00a      	b.n	8003568 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003552:	f7fe facd 	bl	8001af0 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003560:	4293      	cmp	r3, r2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e175      	b.n	8003854 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003568:	4b80      	ldr	r3, [pc, #512]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 800356a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0ed      	beq.n	8003552 <HAL_RCC_OscConfig+0x562>
 8003576:	e015      	b.n	80035a4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003578:	f7fe faba 	bl	8001af0 <HAL_GetTick>
 800357c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800357e:	e00a      	b.n	8003596 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003580:	f7fe fab6 	bl	8001af0 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800358e:	4293      	cmp	r3, r2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e15e      	b.n	8003854 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003596:	4b75      	ldr	r3, [pc, #468]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 8003598:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1ed      	bne.n	8003580 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0320 	and.w	r3, r3, #32
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d036      	beq.n	800361e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d019      	beq.n	80035ec <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035b8:	4b6c      	ldr	r3, [pc, #432]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a6b      	ldr	r2, [pc, #428]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 80035be:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80035c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c4:	f7fe fa94 	bl	8001af0 <HAL_GetTick>
 80035c8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80035cc:	f7fe fa90 	bl	8001af0 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e13a      	b.n	8003854 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80035de:	4b63      	ldr	r3, [pc, #396]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0f0      	beq.n	80035cc <HAL_RCC_OscConfig+0x5dc>
 80035ea:	e018      	b.n	800361e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035ec:	4b5f      	ldr	r3, [pc, #380]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a5e      	ldr	r2, [pc, #376]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 80035f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80035f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f8:	f7fe fa7a 	bl	8001af0 <HAL_GetTick>
 80035fc:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003600:	f7fe fa76 	bl	8001af0 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e120      	b.n	8003854 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003612:	4b56      	ldr	r3, [pc, #344]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f0      	bne.n	8003600 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 8115 	beq.w	8003852 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	2b18      	cmp	r3, #24
 800362c:	f000 80af 	beq.w	800378e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003634:	2b02      	cmp	r3, #2
 8003636:	f040 8086 	bne.w	8003746 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800363a:	4b4c      	ldr	r3, [pc, #304]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a4b      	ldr	r2, [pc, #300]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 8003640:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003646:	f7fe fa53 	bl	8001af0 <HAL_GetTick>
 800364a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800364e:	f7fe fa4f 	bl	8001af0 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e0f9      	b.n	8003854 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003660:	4b42      	ldr	r3, [pc, #264]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1f0      	bne.n	800364e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 800366c:	4b3f      	ldr	r3, [pc, #252]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 800366e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003670:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003674:	f023 0303 	bic.w	r3, r3, #3
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003680:	0212      	lsls	r2, r2, #8
 8003682:	430a      	orrs	r2, r1
 8003684:	4939      	ldr	r1, [pc, #228]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 8003686:	4313      	orrs	r3, r2
 8003688:	628b      	str	r3, [r1, #40]	@ 0x28
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800368e:	3b01      	subs	r3, #1
 8003690:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003698:	3b01      	subs	r3, #1
 800369a:	025b      	lsls	r3, r3, #9
 800369c:	b29b      	uxth	r3, r3
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a4:	3b01      	subs	r3, #1
 80036a6:	041b      	lsls	r3, r3, #16
 80036a8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80036ac:	431a      	orrs	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b2:	3b01      	subs	r3, #1
 80036b4:	061b      	lsls	r3, r3, #24
 80036b6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80036ba:	492c      	ldr	r1, [pc, #176]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80036c0:	4b2a      	ldr	r3, [pc, #168]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 80036c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c4:	4a29      	ldr	r2, [pc, #164]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 80036c6:	f023 0310 	bic.w	r3, r3, #16
 80036ca:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036d0:	4a26      	ldr	r2, [pc, #152]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80036d6:	4b25      	ldr	r3, [pc, #148]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 80036d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036da:	4a24      	ldr	r2, [pc, #144]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 80036dc:	f043 0310 	orr.w	r3, r3, #16
 80036e0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80036e2:	4b22      	ldr	r3, [pc, #136]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 80036e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e6:	f023 020c 	bic.w	r2, r3, #12
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ee:	491f      	ldr	r1, [pc, #124]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80036f4:	4b1d      	ldr	r3, [pc, #116]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 80036f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f8:	f023 0220 	bic.w	r2, r3, #32
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003700:	491a      	ldr	r1, [pc, #104]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 8003702:	4313      	orrs	r3, r2
 8003704:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003706:	4b19      	ldr	r3, [pc, #100]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 8003708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800370a:	4a18      	ldr	r2, [pc, #96]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 800370c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003710:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8003712:	4b16      	ldr	r3, [pc, #88]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a15      	ldr	r2, [pc, #84]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 8003718:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800371c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371e:	f7fe f9e7 	bl	8001af0 <HAL_GetTick>
 8003722:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003726:	f7fe f9e3 	bl	8001af0 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e08d      	b.n	8003854 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003738:	4b0c      	ldr	r3, [pc, #48]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0f0      	beq.n	8003726 <HAL_RCC_OscConfig+0x736>
 8003744:	e085      	b.n	8003852 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003746:	4b09      	ldr	r3, [pc, #36]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a08      	ldr	r2, [pc, #32]	@ (800376c <HAL_RCC_OscConfig+0x77c>)
 800374c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003750:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003752:	f7fe f9cd 	bl	8001af0 <HAL_GetTick>
 8003756:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003758:	e00a      	b.n	8003770 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800375a:	f7fe f9c9 	bl	8001af0 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d903      	bls.n	8003770 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e073      	b.n	8003854 <HAL_RCC_OscConfig+0x864>
 800376c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003770:	4b3a      	ldr	r3, [pc, #232]	@ (800385c <HAL_RCC_OscConfig+0x86c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1ee      	bne.n	800375a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800377c:	4b37      	ldr	r3, [pc, #220]	@ (800385c <HAL_RCC_OscConfig+0x86c>)
 800377e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003780:	4a36      	ldr	r2, [pc, #216]	@ (800385c <HAL_RCC_OscConfig+0x86c>)
 8003782:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003786:	f023 0303 	bic.w	r3, r3, #3
 800378a:	6293      	str	r3, [r2, #40]	@ 0x28
 800378c:	e061      	b.n	8003852 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800378e:	4b33      	ldr	r3, [pc, #204]	@ (800385c <HAL_RCC_OscConfig+0x86c>)
 8003790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003792:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003794:	4b31      	ldr	r3, [pc, #196]	@ (800385c <HAL_RCC_OscConfig+0x86c>)
 8003796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003798:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d031      	beq.n	8003806 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	f003 0203 	and.w	r2, r3, #3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d12a      	bne.n	8003806 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	0a1b      	lsrs	r3, r3, #8
 80037b4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80037bc:	429a      	cmp	r2, r3
 80037be:	d122      	bne.n	8003806 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ca:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d11a      	bne.n	8003806 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	0a5b      	lsrs	r3, r3, #9
 80037d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037dc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80037de:	429a      	cmp	r2, r3
 80037e0:	d111      	bne.n	8003806 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	0c1b      	lsrs	r3, r3, #16
 80037e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ee:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d108      	bne.n	8003806 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	0e1b      	lsrs	r3, r3, #24
 80037f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003800:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003802:	429a      	cmp	r2, r3
 8003804:	d001      	beq.n	800380a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e024      	b.n	8003854 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800380a:	4b14      	ldr	r3, [pc, #80]	@ (800385c <HAL_RCC_OscConfig+0x86c>)
 800380c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800380e:	08db      	lsrs	r3, r3, #3
 8003810:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003818:	429a      	cmp	r2, r3
 800381a:	d01a      	beq.n	8003852 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800381c:	4b0f      	ldr	r3, [pc, #60]	@ (800385c <HAL_RCC_OscConfig+0x86c>)
 800381e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003820:	4a0e      	ldr	r2, [pc, #56]	@ (800385c <HAL_RCC_OscConfig+0x86c>)
 8003822:	f023 0310 	bic.w	r3, r3, #16
 8003826:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003828:	f7fe f962 	bl	8001af0 <HAL_GetTick>
 800382c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800382e:	bf00      	nop
 8003830:	f7fe f95e 	bl	8001af0 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	4293      	cmp	r3, r2
 800383a:	d0f9      	beq.n	8003830 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003840:	4a06      	ldr	r2, [pc, #24]	@ (800385c <HAL_RCC_OscConfig+0x86c>)
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003846:	4b05      	ldr	r3, [pc, #20]	@ (800385c <HAL_RCC_OscConfig+0x86c>)
 8003848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800384a:	4a04      	ldr	r2, [pc, #16]	@ (800385c <HAL_RCC_OscConfig+0x86c>)
 800384c:	f043 0310 	orr.w	r3, r3, #16
 8003850:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3720      	adds	r7, #32
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	44020c00 	.word	0x44020c00

08003860 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e19e      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003874:	4b83      	ldr	r3, [pc, #524]	@ (8003a84 <HAL_RCC_ClockConfig+0x224>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 030f 	and.w	r3, r3, #15
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d910      	bls.n	80038a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003882:	4b80      	ldr	r3, [pc, #512]	@ (8003a84 <HAL_RCC_ClockConfig+0x224>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f023 020f 	bic.w	r2, r3, #15
 800388a:	497e      	ldr	r1, [pc, #504]	@ (8003a84 <HAL_RCC_ClockConfig+0x224>)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	4313      	orrs	r3, r2
 8003890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003892:	4b7c      	ldr	r3, [pc, #496]	@ (8003a84 <HAL_RCC_ClockConfig+0x224>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d001      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e186      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d012      	beq.n	80038d6 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	695a      	ldr	r2, [r3, #20]
 80038b4:	4b74      	ldr	r3, [pc, #464]	@ (8003a88 <HAL_RCC_ClockConfig+0x228>)
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	0a1b      	lsrs	r3, r3, #8
 80038ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038be:	429a      	cmp	r2, r3
 80038c0:	d909      	bls.n	80038d6 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80038c2:	4b71      	ldr	r3, [pc, #452]	@ (8003a88 <HAL_RCC_ClockConfig+0x228>)
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	021b      	lsls	r3, r3, #8
 80038d0:	496d      	ldr	r1, [pc, #436]	@ (8003a88 <HAL_RCC_ClockConfig+0x228>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0308 	and.w	r3, r3, #8
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d012      	beq.n	8003908 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691a      	ldr	r2, [r3, #16]
 80038e6:	4b68      	ldr	r3, [pc, #416]	@ (8003a88 <HAL_RCC_ClockConfig+0x228>)
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	091b      	lsrs	r3, r3, #4
 80038ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d909      	bls.n	8003908 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80038f4:	4b64      	ldr	r3, [pc, #400]	@ (8003a88 <HAL_RCC_ClockConfig+0x228>)
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	011b      	lsls	r3, r3, #4
 8003902:	4961      	ldr	r1, [pc, #388]	@ (8003a88 <HAL_RCC_ClockConfig+0x228>)
 8003904:	4313      	orrs	r3, r2
 8003906:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	d010      	beq.n	8003936 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68da      	ldr	r2, [r3, #12]
 8003918:	4b5b      	ldr	r3, [pc, #364]	@ (8003a88 <HAL_RCC_ClockConfig+0x228>)
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003920:	429a      	cmp	r2, r3
 8003922:	d908      	bls.n	8003936 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003924:	4b58      	ldr	r3, [pc, #352]	@ (8003a88 <HAL_RCC_ClockConfig+0x228>)
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	4955      	ldr	r1, [pc, #340]	@ (8003a88 <HAL_RCC_ClockConfig+0x228>)
 8003932:	4313      	orrs	r3, r2
 8003934:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d010      	beq.n	8003964 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	4b50      	ldr	r3, [pc, #320]	@ (8003a88 <HAL_RCC_ClockConfig+0x228>)
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	429a      	cmp	r2, r3
 8003950:	d908      	bls.n	8003964 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003952:	4b4d      	ldr	r3, [pc, #308]	@ (8003a88 <HAL_RCC_ClockConfig+0x228>)
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	f023 020f 	bic.w	r2, r3, #15
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	494a      	ldr	r1, [pc, #296]	@ (8003a88 <HAL_RCC_ClockConfig+0x228>)
 8003960:	4313      	orrs	r3, r2
 8003962:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 8093 	beq.w	8003a98 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b03      	cmp	r3, #3
 8003978:	d107      	bne.n	800398a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800397a:	4b43      	ldr	r3, [pc, #268]	@ (8003a88 <HAL_RCC_ClockConfig+0x228>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d121      	bne.n	80039ca <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e113      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b02      	cmp	r3, #2
 8003990:	d107      	bne.n	80039a2 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003992:	4b3d      	ldr	r3, [pc, #244]	@ (8003a88 <HAL_RCC_ClockConfig+0x228>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d115      	bne.n	80039ca <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e107      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d107      	bne.n	80039ba <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80039aa:	4b37      	ldr	r3, [pc, #220]	@ (8003a88 <HAL_RCC_ClockConfig+0x228>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d109      	bne.n	80039ca <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e0fb      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039ba:	4b33      	ldr	r3, [pc, #204]	@ (8003a88 <HAL_RCC_ClockConfig+0x228>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e0f3      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80039ca:	4b2f      	ldr	r3, [pc, #188]	@ (8003a88 <HAL_RCC_ClockConfig+0x228>)
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	f023 0203 	bic.w	r2, r3, #3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	492c      	ldr	r1, [pc, #176]	@ (8003a88 <HAL_RCC_ClockConfig+0x228>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039dc:	f7fe f888 	bl	8001af0 <HAL_GetTick>
 80039e0:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b03      	cmp	r3, #3
 80039e8:	d112      	bne.n	8003a10 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039ea:	e00a      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80039ec:	f7fe f880 	bl	8001af0 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e0d7      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a02:	4b21      	ldr	r3, [pc, #132]	@ (8003a88 <HAL_RCC_ClockConfig+0x228>)
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	f003 0318 	and.w	r3, r3, #24
 8003a0a:	2b18      	cmp	r3, #24
 8003a0c:	d1ee      	bne.n	80039ec <HAL_RCC_ClockConfig+0x18c>
 8003a0e:	e043      	b.n	8003a98 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d112      	bne.n	8003a3e <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a18:	e00a      	b.n	8003a30 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003a1a:	f7fe f869 	bl	8001af0 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e0c0      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a30:	4b15      	ldr	r3, [pc, #84]	@ (8003a88 <HAL_RCC_ClockConfig+0x228>)
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	f003 0318 	and.w	r3, r3, #24
 8003a38:	2b10      	cmp	r3, #16
 8003a3a:	d1ee      	bne.n	8003a1a <HAL_RCC_ClockConfig+0x1ba>
 8003a3c:	e02c      	b.n	8003a98 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d122      	bne.n	8003a8c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003a46:	e00a      	b.n	8003a5e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003a48:	f7fe f852 	bl	8001af0 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e0a9      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a88 <HAL_RCC_ClockConfig+0x228>)
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	f003 0318 	and.w	r3, r3, #24
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d1ee      	bne.n	8003a48 <HAL_RCC_ClockConfig+0x1e8>
 8003a6a:	e015      	b.n	8003a98 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003a6c:	f7fe f840 	bl	8001af0 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d906      	bls.n	8003a8c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e097      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x352>
 8003a82:	bf00      	nop
 8003a84:	40022000 	.word	0x40022000
 8003a88:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a8c:	4b4b      	ldr	r3, [pc, #300]	@ (8003bbc <HAL_RCC_ClockConfig+0x35c>)
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	f003 0318 	and.w	r3, r3, #24
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1e9      	bne.n	8003a6c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d010      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	4b44      	ldr	r3, [pc, #272]	@ (8003bbc <HAL_RCC_ClockConfig+0x35c>)
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	f003 030f 	and.w	r3, r3, #15
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d208      	bcs.n	8003ac6 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003ab4:	4b41      	ldr	r3, [pc, #260]	@ (8003bbc <HAL_RCC_ClockConfig+0x35c>)
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	f023 020f 	bic.w	r2, r3, #15
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	493e      	ldr	r1, [pc, #248]	@ (8003bbc <HAL_RCC_ClockConfig+0x35c>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ac6:	4b3e      	ldr	r3, [pc, #248]	@ (8003bc0 <HAL_RCC_ClockConfig+0x360>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 030f 	and.w	r3, r3, #15
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d210      	bcs.n	8003af6 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad4:	4b3a      	ldr	r3, [pc, #232]	@ (8003bc0 <HAL_RCC_ClockConfig+0x360>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f023 020f 	bic.w	r2, r3, #15
 8003adc:	4938      	ldr	r1, [pc, #224]	@ (8003bc0 <HAL_RCC_ClockConfig+0x360>)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae4:	4b36      	ldr	r3, [pc, #216]	@ (8003bc0 <HAL_RCC_ClockConfig+0x360>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 030f 	and.w	r3, r3, #15
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d001      	beq.n	8003af6 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e05d      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0304 	and.w	r3, r3, #4
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d010      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	4b2d      	ldr	r3, [pc, #180]	@ (8003bbc <HAL_RCC_ClockConfig+0x35c>)
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d208      	bcs.n	8003b24 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003b12:	4b2a      	ldr	r3, [pc, #168]	@ (8003bbc <HAL_RCC_ClockConfig+0x35c>)
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	4927      	ldr	r1, [pc, #156]	@ (8003bbc <HAL_RCC_ClockConfig+0x35c>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d012      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	4b21      	ldr	r3, [pc, #132]	@ (8003bbc <HAL_RCC_ClockConfig+0x35c>)
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	091b      	lsrs	r3, r3, #4
 8003b3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d209      	bcs.n	8003b56 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003b42:	4b1e      	ldr	r3, [pc, #120]	@ (8003bbc <HAL_RCC_ClockConfig+0x35c>)
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	491a      	ldr	r1, [pc, #104]	@ (8003bbc <HAL_RCC_ClockConfig+0x35c>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0310 	and.w	r3, r3, #16
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d012      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	695a      	ldr	r2, [r3, #20]
 8003b66:	4b15      	ldr	r3, [pc, #84]	@ (8003bbc <HAL_RCC_ClockConfig+0x35c>)
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	0a1b      	lsrs	r3, r3, #8
 8003b6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d209      	bcs.n	8003b88 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003b74:	4b11      	ldr	r3, [pc, #68]	@ (8003bbc <HAL_RCC_ClockConfig+0x35c>)
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	021b      	lsls	r3, r3, #8
 8003b82:	490e      	ldr	r1, [pc, #56]	@ (8003bbc <HAL_RCC_ClockConfig+0x35c>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003b88:	f000 f822 	bl	8003bd0 <HAL_RCC_GetSysClockFreq>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003bbc <HAL_RCC_ClockConfig+0x35c>)
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	490b      	ldr	r1, [pc, #44]	@ (8003bc4 <HAL_RCC_ClockConfig+0x364>)
 8003b98:	5ccb      	ldrb	r3, [r1, r3]
 8003b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003bc8 <HAL_RCC_ClockConfig+0x368>)
 8003ba0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8003bcc <HAL_RCC_ClockConfig+0x36c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fd ff18 	bl	80019dc <HAL_InitTick>
 8003bac:	4603      	mov	r3, r0
 8003bae:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003bb0:	7afb      	ldrb	r3, [r7, #11]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	44020c00 	.word	0x44020c00
 8003bc0:	40022000 	.word	0x40022000
 8003bc4:	0800a44c 	.word	0x0800a44c
 8003bc8:	20000000 	.word	0x20000000
 8003bcc:	20000004 	.word	0x20000004

08003bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b089      	sub	sp, #36	@ 0x24
 8003bd4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003bd6:	4b8c      	ldr	r3, [pc, #560]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x238>)
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	f003 0318 	and.w	r3, r3, #24
 8003bde:	2b08      	cmp	r3, #8
 8003be0:	d102      	bne.n	8003be8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003be2:	4b8a      	ldr	r3, [pc, #552]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x23c>)
 8003be4:	61fb      	str	r3, [r7, #28]
 8003be6:	e107      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003be8:	4b87      	ldr	r3, [pc, #540]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x238>)
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	f003 0318 	and.w	r3, r3, #24
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d112      	bne.n	8003c1a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003bf4:	4b84      	ldr	r3, [pc, #528]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x238>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d009      	beq.n	8003c14 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003c00:	4b81      	ldr	r3, [pc, #516]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	08db      	lsrs	r3, r3, #3
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	4a81      	ldr	r2, [pc, #516]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x240>)
 8003c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c10:	61fb      	str	r3, [r7, #28]
 8003c12:	e0f1      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003c14:	4b7e      	ldr	r3, [pc, #504]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x240>)
 8003c16:	61fb      	str	r3, [r7, #28]
 8003c18:	e0ee      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c1a:	4b7b      	ldr	r3, [pc, #492]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	f003 0318 	and.w	r3, r3, #24
 8003c22:	2b10      	cmp	r3, #16
 8003c24:	d102      	bne.n	8003c2c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c26:	4b7b      	ldr	r3, [pc, #492]	@ (8003e14 <HAL_RCC_GetSysClockFreq+0x244>)
 8003c28:	61fb      	str	r3, [r7, #28]
 8003c2a:	e0e5      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c2c:	4b76      	ldr	r3, [pc, #472]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	f003 0318 	and.w	r3, r3, #24
 8003c34:	2b18      	cmp	r3, #24
 8003c36:	f040 80dd 	bne.w	8003df4 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003c3a:	4b73      	ldr	r3, [pc, #460]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c3e:	f003 0303 	and.w	r3, r3, #3
 8003c42:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003c44:	4b70      	ldr	r3, [pc, #448]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c48:	0a1b      	lsrs	r3, r3, #8
 8003c4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c4e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003c50:	4b6d      	ldr	r3, [pc, #436]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c54:	091b      	lsrs	r3, r3, #4
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003c5c:	4b6a      	ldr	r3, [pc, #424]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8003c60:	08db      	lsrs	r3, r3, #3
 8003c62:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	fb02 f303 	mul.w	r3, r2, r3
 8003c6c:	ee07 3a90 	vmov	s15, r3
 8003c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c74:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 80b7 	beq.w	8003dee <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d003      	beq.n	8003c8e <HAL_RCC_GetSysClockFreq+0xbe>
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2b03      	cmp	r3, #3
 8003c8a:	d056      	beq.n	8003d3a <HAL_RCC_GetSysClockFreq+0x16a>
 8003c8c:	e077      	b.n	8003d7e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003c8e:	4b5e      	ldr	r3, [pc, #376]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0320 	and.w	r3, r3, #32
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d02d      	beq.n	8003cf6 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003c9a:	4b5b      	ldr	r3, [pc, #364]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	08db      	lsrs	r3, r3, #3
 8003ca0:	f003 0303 	and.w	r3, r3, #3
 8003ca4:	4a5a      	ldr	r2, [pc, #360]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x240>)
 8003ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8003caa:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	ee07 3a90 	vmov	s15, r3
 8003cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	ee07 3a90 	vmov	s15, r3
 8003cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cc4:	4b50      	ldr	r3, [pc, #320]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x238>)
 8003cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ccc:	ee07 3a90 	vmov	s15, r3
 8003cd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003cd4:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cd8:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8003e18 <HAL_RCC_GetSysClockFreq+0x248>
 8003cdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ce0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ce4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ce8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003cec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf0:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8003cf4:	e065      	b.n	8003dc2 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	ee07 3a90 	vmov	s15, r3
 8003cfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d00:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8003e1c <HAL_RCC_GetSysClockFreq+0x24c>
 8003d04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d08:	4b3f      	ldr	r3, [pc, #252]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x238>)
 8003d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d10:	ee07 3a90 	vmov	s15, r3
 8003d14:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d18:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d1c:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003e18 <HAL_RCC_GetSysClockFreq+0x248>
 8003d20:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d24:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d34:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003d38:	e043      	b.n	8003dc2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	ee07 3a90 	vmov	s15, r3
 8003d40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d44:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8003e20 <HAL_RCC_GetSysClockFreq+0x250>
 8003d48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d4c:	4b2e      	ldr	r3, [pc, #184]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x238>)
 8003d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d54:	ee07 3a90 	vmov	s15, r3
 8003d58:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d5c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d60:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8003e18 <HAL_RCC_GetSysClockFreq+0x248>
 8003d64:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d68:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d70:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d78:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8003d7c:	e021      	b.n	8003dc2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	ee07 3a90 	vmov	s15, r3
 8003d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d88:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003e24 <HAL_RCC_GetSysClockFreq+0x254>
 8003d8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d90:	4b1d      	ldr	r3, [pc, #116]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x238>)
 8003d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d98:	ee07 3a90 	vmov	s15, r3
 8003d9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003da0:	ed97 6a02 	vldr	s12, [r7, #8]
 8003da4:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8003e18 <HAL_RCC_GetSysClockFreq+0x248>
 8003da8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003dac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003db0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003db4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dbc:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003dc0:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8003dc2:	4b11      	ldr	r3, [pc, #68]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x238>)
 8003dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dc6:	0a5b      	lsrs	r3, r3, #9
 8003dc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dcc:	3301      	adds	r3, #1
 8003dce:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	ee07 3a90 	vmov	s15, r3
 8003dd6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003dda:	edd7 6a06 	vldr	s13, [r7, #24]
 8003dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003de2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003de6:	ee17 3a90 	vmov	r3, s15
 8003dea:	61fb      	str	r3, [r7, #28]
 8003dec:	e004      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8003dee:	2300      	movs	r3, #0
 8003df0:	61fb      	str	r3, [r7, #28]
 8003df2:	e001      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8003df4:	4b06      	ldr	r3, [pc, #24]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x240>)
 8003df6:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8003df8:	69fb      	ldr	r3, [r7, #28]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3724      	adds	r7, #36	@ 0x24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	44020c00 	.word	0x44020c00
 8003e0c:	003d0900 	.word	0x003d0900
 8003e10:	03d09000 	.word	0x03d09000
 8003e14:	007a1200 	.word	0x007a1200
 8003e18:	46000000 	.word	0x46000000
 8003e1c:	4c742400 	.word	0x4c742400
 8003e20:	4af42400 	.word	0x4af42400
 8003e24:	4a742400 	.word	0x4a742400

08003e28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003e2c:	f7ff fed0 	bl	8003bd0 <HAL_RCC_GetSysClockFreq>
 8003e30:	4602      	mov	r2, r0
 8003e32:	4b08      	ldr	r3, [pc, #32]	@ (8003e54 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003e34:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003e36:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003e3a:	4907      	ldr	r1, [pc, #28]	@ (8003e58 <HAL_RCC_GetHCLKFreq+0x30>)
 8003e3c:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003e3e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003e42:	fa22 f303 	lsr.w	r3, r2, r3
 8003e46:	4a05      	ldr	r2, [pc, #20]	@ (8003e5c <HAL_RCC_GetHCLKFreq+0x34>)
 8003e48:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8003e4a:	4b04      	ldr	r3, [pc, #16]	@ (8003e5c <HAL_RCC_GetHCLKFreq+0x34>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	44020c00 	.word	0x44020c00
 8003e58:	0800a44c 	.word	0x0800a44c
 8003e5c:	20000000 	.word	0x20000000

08003e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8003e64:	f7ff ffe0 	bl	8003e28 <HAL_RCC_GetHCLKFreq>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	4b06      	ldr	r3, [pc, #24]	@ (8003e84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	091b      	lsrs	r3, r3, #4
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	4904      	ldr	r1, [pc, #16]	@ (8003e88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e76:	5ccb      	ldrb	r3, [r1, r3]
 8003e78:	f003 031f 	and.w	r3, r3, #31
 8003e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	44020c00 	.word	0x44020c00
 8003e88:	0800a45c 	.word	0x0800a45c

08003e8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8003e90:	f7ff ffca 	bl	8003e28 <HAL_RCC_GetHCLKFreq>
 8003e94:	4602      	mov	r2, r0
 8003e96:	4b06      	ldr	r3, [pc, #24]	@ (8003eb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	0a1b      	lsrs	r3, r3, #8
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	4904      	ldr	r1, [pc, #16]	@ (8003eb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ea2:	5ccb      	ldrb	r3, [r1, r3]
 8003ea4:	f003 031f 	and.w	r3, r3, #31
 8003ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	44020c00 	.word	0x44020c00
 8003eb4:	0800a45c 	.word	0x0800a45c

08003eb8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8003ebc:	f7ff ffb4 	bl	8003e28 <HAL_RCC_GetHCLKFreq>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	4b06      	ldr	r3, [pc, #24]	@ (8003edc <HAL_RCC_GetPCLK3Freq+0x24>)
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	0b1b      	lsrs	r3, r3, #12
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	4904      	ldr	r1, [pc, #16]	@ (8003ee0 <HAL_RCC_GetPCLK3Freq+0x28>)
 8003ece:	5ccb      	ldrb	r3, [r1, r3]
 8003ed0:	f003 031f 	and.w	r3, r3, #31
 8003ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	44020c00 	.word	0x44020c00
 8003ee0:	0800a45c 	.word	0x0800a45c

08003ee4 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ee8:	b0ba      	sub	sp, #232	@ 0xe8
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003efc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f04:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8003f08:	2500      	movs	r5, #0
 8003f0a:	ea54 0305 	orrs.w	r3, r4, r5
 8003f0e:	d00b      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8003f10:	4bcd      	ldr	r3, [pc, #820]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003f12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003f16:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8003f1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f20:	4ac9      	ldr	r2, [pc, #804]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003f22:	430b      	orrs	r3, r1
 8003f24:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f30:	f002 0801 	and.w	r8, r2, #1
 8003f34:	f04f 0900 	mov.w	r9, #0
 8003f38:	ea58 0309 	orrs.w	r3, r8, r9
 8003f3c:	d042      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8003f3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f44:	2b05      	cmp	r3, #5
 8003f46:	d823      	bhi.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8003f48:	a201      	add	r2, pc, #4	@ (adr r2, 8003f50 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8003f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4e:	bf00      	nop
 8003f50:	08003f99 	.word	0x08003f99
 8003f54:	08003f69 	.word	0x08003f69
 8003f58:	08003f7d 	.word	0x08003f7d
 8003f5c:	08003f99 	.word	0x08003f99
 8003f60:	08003f99 	.word	0x08003f99
 8003f64:	08003f99 	.word	0x08003f99
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f6c:	3308      	adds	r3, #8
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f003 f90c 	bl	800718c <RCCEx_PLL2_Config>
 8003f74:	4603      	mov	r3, r0
 8003f76:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8003f7a:	e00e      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f80:	3330      	adds	r3, #48	@ 0x30
 8003f82:	4618      	mov	r0, r3
 8003f84:	f003 f99a 	bl	80072bc <RCCEx_PLL3_Config>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8003f8e:	e004      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003f96:	e000      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8003f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f9a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10c      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003fa2:	4ba9      	ldr	r3, [pc, #676]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003fa4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003fa8:	f023 0107 	bic.w	r1, r3, #7
 8003fac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fb2:	4aa5      	ldr	r2, [pc, #660]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003fb4:	430b      	orrs	r3, r1
 8003fb6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003fba:	e003      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fbc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003fc0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fcc:	f002 0a02 	and.w	sl, r2, #2
 8003fd0:	f04f 0b00 	mov.w	fp, #0
 8003fd4:	ea5a 030b 	orrs.w	r3, sl, fp
 8003fd8:	f000 8088 	beq.w	80040ec <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8003fdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fe2:	2b28      	cmp	r3, #40	@ 0x28
 8003fe4:	d868      	bhi.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8003fec <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fec:	080040c1 	.word	0x080040c1
 8003ff0:	080040b9 	.word	0x080040b9
 8003ff4:	080040b9 	.word	0x080040b9
 8003ff8:	080040b9 	.word	0x080040b9
 8003ffc:	080040b9 	.word	0x080040b9
 8004000:	080040b9 	.word	0x080040b9
 8004004:	080040b9 	.word	0x080040b9
 8004008:	080040b9 	.word	0x080040b9
 800400c:	08004091 	.word	0x08004091
 8004010:	080040b9 	.word	0x080040b9
 8004014:	080040b9 	.word	0x080040b9
 8004018:	080040b9 	.word	0x080040b9
 800401c:	080040b9 	.word	0x080040b9
 8004020:	080040b9 	.word	0x080040b9
 8004024:	080040b9 	.word	0x080040b9
 8004028:	080040b9 	.word	0x080040b9
 800402c:	080040a5 	.word	0x080040a5
 8004030:	080040b9 	.word	0x080040b9
 8004034:	080040b9 	.word	0x080040b9
 8004038:	080040b9 	.word	0x080040b9
 800403c:	080040b9 	.word	0x080040b9
 8004040:	080040b9 	.word	0x080040b9
 8004044:	080040b9 	.word	0x080040b9
 8004048:	080040b9 	.word	0x080040b9
 800404c:	080040c1 	.word	0x080040c1
 8004050:	080040b9 	.word	0x080040b9
 8004054:	080040b9 	.word	0x080040b9
 8004058:	080040b9 	.word	0x080040b9
 800405c:	080040b9 	.word	0x080040b9
 8004060:	080040b9 	.word	0x080040b9
 8004064:	080040b9 	.word	0x080040b9
 8004068:	080040b9 	.word	0x080040b9
 800406c:	080040c1 	.word	0x080040c1
 8004070:	080040b9 	.word	0x080040b9
 8004074:	080040b9 	.word	0x080040b9
 8004078:	080040b9 	.word	0x080040b9
 800407c:	080040b9 	.word	0x080040b9
 8004080:	080040b9 	.word	0x080040b9
 8004084:	080040b9 	.word	0x080040b9
 8004088:	080040b9 	.word	0x080040b9
 800408c:	080040c1 	.word	0x080040c1
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004090:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004094:	3308      	adds	r3, #8
 8004096:	4618      	mov	r0, r3
 8004098:	f003 f878 	bl	800718c <RCCEx_PLL2_Config>
 800409c:	4603      	mov	r3, r0
 800409e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 80040a2:	e00e      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80040a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040a8:	3330      	adds	r3, #48	@ 0x30
 80040aa:	4618      	mov	r0, r3
 80040ac:	f003 f906 	bl	80072bc <RCCEx_PLL3_Config>
 80040b0:	4603      	mov	r3, r0
 80040b2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 80040b6:	e004      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80040be:	e000      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80040c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040c2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10c      	bne.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80040ca:	4b5f      	ldr	r3, [pc, #380]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80040cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80040d0:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80040d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040da:	4a5b      	ldr	r2, [pc, #364]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80040dc:	430b      	orrs	r3, r1
 80040de:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80040e2:	e003      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80040e8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f4:	f002 0304 	and.w	r3, r2, #4
 80040f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040fc:	2300      	movs	r3, #0
 80040fe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004102:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004106:	460b      	mov	r3, r1
 8004108:	4313      	orrs	r3, r2
 800410a:	d04e      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 800410c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004110:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004112:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004116:	d02c      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8004118:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800411c:	d825      	bhi.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800411e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004122:	d028      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004124:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004128:	d81f      	bhi.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800412a:	2bc0      	cmp	r3, #192	@ 0xc0
 800412c:	d025      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800412e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004130:	d81b      	bhi.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004132:	2b80      	cmp	r3, #128	@ 0x80
 8004134:	d00f      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8004136:	2b80      	cmp	r3, #128	@ 0x80
 8004138:	d817      	bhi.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800413a:	2b00      	cmp	r3, #0
 800413c:	d01f      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800413e:	2b40      	cmp	r3, #64	@ 0x40
 8004140:	d113      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004142:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004146:	3308      	adds	r3, #8
 8004148:	4618      	mov	r0, r3
 800414a:	f003 f81f 	bl	800718c <RCCEx_PLL2_Config>
 800414e:	4603      	mov	r3, r0
 8004150:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8004154:	e014      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004156:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800415a:	3330      	adds	r3, #48	@ 0x30
 800415c:	4618      	mov	r0, r3
 800415e:	f003 f8ad 	bl	80072bc <RCCEx_PLL3_Config>
 8004162:	4603      	mov	r3, r0
 8004164:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8004168:	e00a      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004170:	e006      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004172:	bf00      	nop
 8004174:	e004      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004176:	bf00      	nop
 8004178:	e002      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800417a:	bf00      	nop
 800417c:	e000      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800417e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004180:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10c      	bne.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004188:	4b2f      	ldr	r3, [pc, #188]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800418a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800418e:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004192:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004196:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004198:	4a2b      	ldr	r2, [pc, #172]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800419a:	430b      	orrs	r3, r1
 800419c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80041a0:	e003      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80041a6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b2:	f002 0308 	and.w	r3, r2, #8
 80041b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041ba:	2300      	movs	r3, #0
 80041bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80041c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4313      	orrs	r3, r2
 80041c8:	d056      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 80041ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041d0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80041d4:	d031      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x356>
 80041d6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80041da:	d82a      	bhi.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80041dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041e0:	d02d      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80041e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041e6:	d824      	bhi.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80041e8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80041ec:	d029      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80041ee:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80041f2:	d81e      	bhi.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80041f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041f8:	d011      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80041fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041fe:	d818      	bhi.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004200:	2b00      	cmp	r3, #0
 8004202:	d023      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004204:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004208:	d113      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800420a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800420e:	3308      	adds	r3, #8
 8004210:	4618      	mov	r0, r3
 8004212:	f002 ffbb 	bl	800718c <RCCEx_PLL2_Config>
 8004216:	4603      	mov	r3, r0
 8004218:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 800421c:	e017      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800421e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004222:	3330      	adds	r3, #48	@ 0x30
 8004224:	4618      	mov	r0, r3
 8004226:	f003 f849 	bl	80072bc <RCCEx_PLL3_Config>
 800422a:	4603      	mov	r3, r0
 800422c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8004230:	e00d      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004238:	e009      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800423a:	bf00      	nop
 800423c:	e007      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800423e:	bf00      	nop
 8004240:	e005      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004242:	bf00      	nop
 8004244:	e003      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004246:	bf00      	nop
 8004248:	44020c00 	.word	0x44020c00
        break;
 800424c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800424e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10c      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004256:	4bb9      	ldr	r3, [pc, #740]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004258:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800425c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004260:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004264:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004266:	4ab5      	ldr	r2, [pc, #724]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004268:	430b      	orrs	r3, r1
 800426a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800426e:	e003      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004270:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004274:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004278:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800427c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004280:	f002 0310 	and.w	r3, r2, #16
 8004284:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004288:	2300      	movs	r3, #0
 800428a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800428e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004292:	460b      	mov	r3, r1
 8004294:	4313      	orrs	r3, r2
 8004296:	d053      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8004298:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800429c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800429e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80042a2:	d031      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80042a4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80042a8:	d82a      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80042aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042ae:	d02d      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x428>
 80042b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042b4:	d824      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80042b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80042ba:	d029      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80042bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80042c0:	d81e      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80042c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042c6:	d011      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x408>
 80042c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042cc:	d818      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d020      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x430>
 80042d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042d6:	d113      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042dc:	3308      	adds	r3, #8
 80042de:	4618      	mov	r0, r3
 80042e0:	f002 ff54 	bl	800718c <RCCEx_PLL2_Config>
 80042e4:	4603      	mov	r3, r0
 80042e6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 80042ea:	e014      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80042ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042f0:	3330      	adds	r3, #48	@ 0x30
 80042f2:	4618      	mov	r0, r3
 80042f4:	f002 ffe2 	bl	80072bc <RCCEx_PLL3_Config>
 80042f8:	4603      	mov	r3, r0
 80042fa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 80042fe:	e00a      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004306:	e006      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004308:	bf00      	nop
 800430a:	e004      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800430c:	bf00      	nop
 800430e:	e002      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004310:	bf00      	nop
 8004312:	e000      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004314:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004316:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10c      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800431e:	4b87      	ldr	r3, [pc, #540]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004320:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004324:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004328:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800432c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800432e:	4a83      	ldr	r2, [pc, #524]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004330:	430b      	orrs	r3, r1
 8004332:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004336:	e003      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004338:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800433c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004340:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004348:	f002 0320 	and.w	r3, r2, #32
 800434c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004350:	2300      	movs	r3, #0
 8004352:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004356:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800435a:	460b      	mov	r3, r1
 800435c:	4313      	orrs	r3, r2
 800435e:	d053      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8004360:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004366:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800436a:	d031      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 800436c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004370:	d82a      	bhi.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004372:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004376:	d02d      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004378:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800437c:	d824      	bhi.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800437e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004382:	d029      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004384:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004388:	d81e      	bhi.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800438a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800438e:	d011      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004394:	d818      	bhi.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004396:	2b00      	cmp	r3, #0
 8004398:	d020      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800439a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800439e:	d113      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043a4:	3308      	adds	r3, #8
 80043a6:	4618      	mov	r0, r3
 80043a8:	f002 fef0 	bl	800718c <RCCEx_PLL2_Config>
 80043ac:	4603      	mov	r3, r0
 80043ae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 80043b2:	e014      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80043b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043b8:	3330      	adds	r3, #48	@ 0x30
 80043ba:	4618      	mov	r0, r3
 80043bc:	f002 ff7e 	bl	80072bc <RCCEx_PLL3_Config>
 80043c0:	4603      	mov	r3, r0
 80043c2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 80043c6:	e00a      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80043ce:	e006      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80043d0:	bf00      	nop
 80043d2:	e004      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80043d4:	bf00      	nop
 80043d6:	e002      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80043d8:	bf00      	nop
 80043da:	e000      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80043dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043de:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10c      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80043e6:	4b55      	ldr	r3, [pc, #340]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80043e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80043ec:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 80043f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f6:	4a51      	ldr	r2, [pc, #324]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80043f8:	430b      	orrs	r3, r1
 80043fa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80043fe:	e003      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004400:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004404:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004408:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800440c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004410:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004414:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004418:	2300      	movs	r3, #0
 800441a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800441e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004422:	460b      	mov	r3, r1
 8004424:	4313      	orrs	r3, r2
 8004426:	d053      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004428:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800442c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800442e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004432:	d031      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8004434:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004438:	d82a      	bhi.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800443a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800443e:	d02d      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8004440:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004444:	d824      	bhi.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004446:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800444a:	d029      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800444c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004450:	d81e      	bhi.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004452:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004456:	d011      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004458:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800445c:	d818      	bhi.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800445e:	2b00      	cmp	r3, #0
 8004460:	d020      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004462:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004466:	d113      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004468:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800446c:	3308      	adds	r3, #8
 800446e:	4618      	mov	r0, r3
 8004470:	f002 fe8c 	bl	800718c <RCCEx_PLL2_Config>
 8004474:	4603      	mov	r3, r0
 8004476:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800447a:	e014      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800447c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004480:	3330      	adds	r3, #48	@ 0x30
 8004482:	4618      	mov	r0, r3
 8004484:	f002 ff1a 	bl	80072bc <RCCEx_PLL3_Config>
 8004488:	4603      	mov	r3, r0
 800448a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800448e:	e00a      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004496:	e006      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004498:	bf00      	nop
 800449a:	e004      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800449c:	bf00      	nop
 800449e:	e002      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80044a0:	bf00      	nop
 80044a2:	e000      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80044a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044a6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10c      	bne.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80044ae:	4b23      	ldr	r3, [pc, #140]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80044b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80044b4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80044b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044be:	4a1f      	ldr	r2, [pc, #124]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80044c0:	430b      	orrs	r3, r1
 80044c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80044c6:	e003      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80044cc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d8:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80044dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80044e0:	2300      	movs	r3, #0
 80044e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80044e6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4313      	orrs	r3, r2
 80044ee:	d03d      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80044f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80044fa:	d01b      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x650>
 80044fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004500:	d814      	bhi.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x648>
 8004502:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004506:	d017      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8004508:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800450c:	d80e      	bhi.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x648>
 800450e:	2b00      	cmp	r3, #0
 8004510:	d016      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8004512:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004516:	d109      	bne.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004518:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800451c:	3330      	adds	r3, #48	@ 0x30
 800451e:	4618      	mov	r0, r3
 8004520:	f002 fecc 	bl	80072bc <RCCEx_PLL3_Config>
 8004524:	4603      	mov	r3, r0
 8004526:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800452a:	e00a      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004532:	e006      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8004534:	bf00      	nop
 8004536:	e004      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8004538:	bf00      	nop
 800453a:	e002      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x65e>
 800453c:	44020c00 	.word	0x44020c00
        break;
 8004540:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004542:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10c      	bne.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800454a:	4b99      	ldr	r3, [pc, #612]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800454c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004550:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004554:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004558:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800455a:	4a95      	ldr	r2, [pc, #596]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800455c:	430b      	orrs	r3, r1
 800455e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004562:	e003      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004564:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004568:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800456c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004574:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004578:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800457c:	2300      	movs	r3, #0
 800457e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004582:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004586:	460b      	mov	r3, r1
 8004588:	4313      	orrs	r3, r2
 800458a:	d03b      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800458c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004590:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004592:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004596:	d01b      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8004598:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800459c:	d814      	bhi.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 800459e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80045a2:	d017      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 80045a4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80045a8:	d80e      	bhi.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d014      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 80045ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80045b2:	d109      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80045b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045b8:	3330      	adds	r3, #48	@ 0x30
 80045ba:	4618      	mov	r0, r3
 80045bc:	f002 fe7e 	bl	80072bc <RCCEx_PLL3_Config>
 80045c0:	4603      	mov	r3, r0
 80045c2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80045c6:	e008      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80045ce:	e004      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 80045d0:	bf00      	nop
 80045d2:	e002      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 80045d4:	bf00      	nop
 80045d6:	e000      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 80045d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045da:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10c      	bne.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80045e2:	4b73      	ldr	r3, [pc, #460]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80045e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80045e8:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80045ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045f2:	4a6f      	ldr	r2, [pc, #444]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80045f4:	430b      	orrs	r3, r1
 80045f6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80045fa:	e003      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045fc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004600:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004604:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004610:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004614:	2300      	movs	r3, #0
 8004616:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800461a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800461e:	460b      	mov	r3, r1
 8004620:	4313      	orrs	r3, r2
 8004622:	d03d      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8004624:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004628:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800462c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004630:	d01b      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x786>
 8004632:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004636:	d814      	bhi.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8004638:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800463c:	d017      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x78a>
 800463e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004642:	d80e      	bhi.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8004644:	2b00      	cmp	r3, #0
 8004646:	d014      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8004648:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800464c:	d109      	bne.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800464e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004652:	3330      	adds	r3, #48	@ 0x30
 8004654:	4618      	mov	r0, r3
 8004656:	f002 fe31 	bl	80072bc <RCCEx_PLL3_Config>
 800465a:	4603      	mov	r3, r0
 800465c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 8004660:	e008      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004668:	e004      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 800466a:	bf00      	nop
 800466c:	e002      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 800466e:	bf00      	nop
 8004670:	e000      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8004672:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004674:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10d      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800467c:	4b4c      	ldr	r3, [pc, #304]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800467e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004682:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004686:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800468a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800468e:	4a48      	ldr	r2, [pc, #288]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004690:	430b      	orrs	r3, r1
 8004692:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004696:	e003      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004698:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800469c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80046a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80046ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80046b0:	2300      	movs	r3, #0
 80046b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80046b6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80046ba:	460b      	mov	r3, r1
 80046bc:	4313      	orrs	r3, r2
 80046be:	d035      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80046c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046cc:	d015      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x816>
 80046ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046d2:	d80e      	bhi.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d012      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80046d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046dc:	d109      	bne.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80046de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046e2:	3330      	adds	r3, #48	@ 0x30
 80046e4:	4618      	mov	r0, r3
 80046e6:	f002 fde9 	bl	80072bc <RCCEx_PLL3_Config>
 80046ea:	4603      	mov	r3, r0
 80046ec:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80046f0:	e006      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80046f8:	e002      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 80046fa:	bf00      	nop
 80046fc:	e000      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 80046fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004700:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10d      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8004708:	4b29      	ldr	r3, [pc, #164]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800470a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800470e:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8004712:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004716:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800471a:	4a25      	ldr	r2, [pc, #148]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800471c:	430b      	orrs	r3, r1
 800471e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004722:	e003      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004724:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004728:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 800472c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004734:	2100      	movs	r1, #0
 8004736:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 800473a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800473e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004742:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004746:	460b      	mov	r3, r1
 8004748:	4313      	orrs	r3, r2
 800474a:	d037      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 800474c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004754:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004758:	d015      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 800475a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800475e:	d80e      	bhi.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8004760:	2b00      	cmp	r3, #0
 8004762:	d012      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8004764:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004768:	d109      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800476a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800476e:	3330      	adds	r3, #48	@ 0x30
 8004770:	4618      	mov	r0, r3
 8004772:	f002 fda3 	bl	80072bc <RCCEx_PLL3_Config>
 8004776:	4603      	mov	r3, r0
 8004778:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 800477c:	e006      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004784:	e002      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8004786:	bf00      	nop
 8004788:	e000      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 800478a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800478c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10f      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8004794:	4b06      	ldr	r3, [pc, #24]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004796:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800479a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800479e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a6:	4a02      	ldr	r2, [pc, #8]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80047a8:	430b      	orrs	r3, r1
 80047aa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80047ae:	e005      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 80047b0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80047b8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80047bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c4:	2100      	movs	r1, #0
 80047c6:	67b9      	str	r1, [r7, #120]	@ 0x78
 80047c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80047ce:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80047d2:	460b      	mov	r3, r1
 80047d4:	4313      	orrs	r3, r2
 80047d6:	d00e      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80047d8:	4bb8      	ldr	r3, [pc, #736]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	4ab7      	ldr	r2, [pc, #732]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80047de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80047e2:	61d3      	str	r3, [r2, #28]
 80047e4:	4bb5      	ldr	r3, [pc, #724]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80047e6:	69d9      	ldr	r1, [r3, #28]
 80047e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047ec:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80047f0:	4ab2      	ldr	r2, [pc, #712]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80047f2:	430b      	orrs	r3, r1
 80047f4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004802:	673b      	str	r3, [r7, #112]	@ 0x70
 8004804:	2300      	movs	r3, #0
 8004806:	677b      	str	r3, [r7, #116]	@ 0x74
 8004808:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800480c:	460b      	mov	r3, r1
 800480e:	4313      	orrs	r3, r2
 8004810:	d055      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8004812:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004816:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800481a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800481e:	d031      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8004820:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004824:	d82a      	bhi.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004826:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800482a:	d02d      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 800482c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004830:	d824      	bhi.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004832:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004836:	d029      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8004838:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800483c:	d81e      	bhi.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x998>
 800483e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004842:	d011      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004844:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004848:	d818      	bhi.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x998>
 800484a:	2b00      	cmp	r3, #0
 800484c:	d020      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 800484e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004852:	d113      	bne.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004854:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004858:	3308      	adds	r3, #8
 800485a:	4618      	mov	r0, r3
 800485c:	f002 fc96 	bl	800718c <RCCEx_PLL2_Config>
 8004860:	4603      	mov	r3, r0
 8004862:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004866:	e014      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004868:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800486c:	3330      	adds	r3, #48	@ 0x30
 800486e:	4618      	mov	r0, r3
 8004870:	f002 fd24 	bl	80072bc <RCCEx_PLL3_Config>
 8004874:	4603      	mov	r3, r0
 8004876:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800487a:	e00a      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004882:	e006      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004884:	bf00      	nop
 8004886:	e004      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004888:	bf00      	nop
 800488a:	e002      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 800488c:	bf00      	nop
 800488e:	e000      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004890:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004892:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10d      	bne.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800489a:	4b88      	ldr	r3, [pc, #544]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800489c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80048a0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80048a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048ac:	4a83      	ldr	r2, [pc, #524]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80048ae:	430b      	orrs	r3, r1
 80048b0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80048b4:	e003      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80048ba:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80048be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80048ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048cc:	2300      	movs	r3, #0
 80048ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80048d0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80048d4:	460b      	mov	r3, r1
 80048d6:	4313      	orrs	r3, r2
 80048d8:	d055      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80048da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048e2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80048e6:	d031      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xa68>
 80048e8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80048ec:	d82a      	bhi.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80048ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048f2:	d02d      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 80048f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048f8:	d824      	bhi.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80048fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80048fe:	d029      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004900:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004904:	d81e      	bhi.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004906:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800490a:	d011      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 800490c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004910:	d818      	bhi.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004912:	2b00      	cmp	r3, #0
 8004914:	d020      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004916:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800491a:	d113      	bne.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800491c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004920:	3308      	adds	r3, #8
 8004922:	4618      	mov	r0, r3
 8004924:	f002 fc32 	bl	800718c <RCCEx_PLL2_Config>
 8004928:	4603      	mov	r3, r0
 800492a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800492e:	e014      	b.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004930:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004934:	3330      	adds	r3, #48	@ 0x30
 8004936:	4618      	mov	r0, r3
 8004938:	f002 fcc0 	bl	80072bc <RCCEx_PLL3_Config>
 800493c:	4603      	mov	r3, r0
 800493e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004942:	e00a      	b.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800494a:	e006      	b.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 800494c:	bf00      	nop
 800494e:	e004      	b.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004950:	bf00      	nop
 8004952:	e002      	b.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004954:	bf00      	nop
 8004956:	e000      	b.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004958:	bf00      	nop
    }

    if (ret == HAL_OK)
 800495a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10d      	bne.n	800497e <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004962:	4b56      	ldr	r3, [pc, #344]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004964:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004968:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800496c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004974:	4a51      	ldr	r2, [pc, #324]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004976:	430b      	orrs	r3, r1
 8004978:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800497c:	e003      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800497e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004982:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004986:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800498a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004992:	663b      	str	r3, [r7, #96]	@ 0x60
 8004994:	2300      	movs	r3, #0
 8004996:	667b      	str	r3, [r7, #100]	@ 0x64
 8004998:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800499c:	460b      	mov	r3, r1
 800499e:	4313      	orrs	r3, r2
 80049a0:	d032      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80049a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80049aa:	2b05      	cmp	r3, #5
 80049ac:	d80f      	bhi.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xaea>
 80049ae:	2b03      	cmp	r3, #3
 80049b0:	d211      	bcs.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d911      	bls.n	80049da <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d109      	bne.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049be:	3308      	adds	r3, #8
 80049c0:	4618      	mov	r0, r3
 80049c2:	f002 fbe3 	bl	800718c <RCCEx_PLL2_Config>
 80049c6:	4603      	mov	r3, r0
 80049c8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80049cc:	e006      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80049d4:	e002      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 80049d6:	bf00      	nop
 80049d8:	e000      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 80049da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049dc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10d      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80049e4:	4b35      	ldr	r3, [pc, #212]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80049e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80049ea:	f023 0107 	bic.w	r1, r3, #7
 80049ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80049f6:	4a31      	ldr	r2, [pc, #196]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80049f8:	430b      	orrs	r3, r1
 80049fa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80049fe:	e003      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a00:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004a04:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8004a08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a10:	2100      	movs	r1, #0
 8004a12:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004a14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a1a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4313      	orrs	r3, r2
 8004a22:	d024      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8004a24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d005      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d005      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004a3a:	e002      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8004a3c:	bf00      	nop
 8004a3e:	e000      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8004a40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a42:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10d      	bne.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8004a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004a4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a50:	f023 0108 	bic.w	r1, r3, #8
 8004a54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a5c:	4a17      	ldr	r2, [pc, #92]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004a5e:	430b      	orrs	r3, r1
 8004a60:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004a64:	e003      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a66:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004a6a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a76:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004a7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a80:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004a84:	460b      	mov	r3, r1
 8004a86:	4313      	orrs	r3, r2
 8004a88:	f000 80b9 	beq.w	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a90:	4a0b      	ldr	r2, [pc, #44]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8004a92:	f043 0301 	orr.w	r3, r3, #1
 8004a96:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a98:	f7fd f82a 	bl	8001af0 <HAL_GetTick>
 8004a9c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004aa0:	e010      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aa2:	f7fd f825 	bl	8001af0 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d908      	bls.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004ab8:	e00a      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8004aba:	bf00      	nop
 8004abc:	44020c00 	.word	0x44020c00
 8004ac0:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004ac4:	4bba      	ldr	r3, [pc, #744]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0e8      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 8004ad0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f040 808e 	bne.w	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ada:	4bb6      	ldr	r3, [pc, #728]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004adc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ae0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ae4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d023      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8004af0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004af4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8004af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d01b      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b00:	4bac      	ldr	r3, [pc, #688]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004b02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b0e:	4ba9      	ldr	r3, [pc, #676]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004b10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b14:	4aa7      	ldr	r2, [pc, #668]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004b16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b1a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b1e:	4ba5      	ldr	r3, [pc, #660]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004b20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b24:	4aa3      	ldr	r2, [pc, #652]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004b26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b2a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b2e:	4aa1      	ldr	r2, [pc, #644]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b34:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d019      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b44:	f7fc ffd4 	bl	8001af0 <HAL_GetTick>
 8004b48:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b4c:	e00d      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b4e:	f7fc ffcf 	bl	8001af0 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b58:	1ad2      	subs	r2, r2, r3
 8004b5a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d903      	bls.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8004b68:	e006      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b6a:	4b92      	ldr	r3, [pc, #584]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004b6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0ea      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8004b78:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d135      	bne.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004b80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b84:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004b88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b90:	d110      	bne.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 8004b92:	4b88      	ldr	r3, [pc, #544]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004b9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b9e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004ba2:	091b      	lsrs	r3, r3, #4
 8004ba4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004ba8:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004bac:	4a81      	ldr	r2, [pc, #516]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004bae:	430b      	orrs	r3, r1
 8004bb0:	61d3      	str	r3, [r2, #28]
 8004bb2:	e005      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8004bb4:	4b7f      	ldr	r3, [pc, #508]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004bb6:	69db      	ldr	r3, [r3, #28]
 8004bb8:	4a7e      	ldr	r2, [pc, #504]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004bba:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004bbe:	61d3      	str	r3, [r2, #28]
 8004bc0:	4b7c      	ldr	r3, [pc, #496]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004bc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bc6:	4a7b      	ldr	r2, [pc, #492]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004bc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bcc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004bd0:	4b78      	ldr	r3, [pc, #480]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004bd2:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8004bd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bda:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004be2:	4a74      	ldr	r2, [pc, #464]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004be4:	430b      	orrs	r3, r1
 8004be6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004bea:	e008      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bec:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004bf0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8004bf4:	e003      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004bfa:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004bfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c06:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c10:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004c14:	460b      	mov	r3, r1
 8004c16:	4313      	orrs	r3, r2
 8004c18:	d035      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004c1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c22:	2b30      	cmp	r3, #48	@ 0x30
 8004c24:	d014      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 8004c26:	2b30      	cmp	r3, #48	@ 0x30
 8004c28:	d80e      	bhi.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8004c2a:	2b20      	cmp	r3, #32
 8004c2c:	d012      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8004c2e:	2b20      	cmp	r3, #32
 8004c30:	d80a      	bhi.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d010      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 8004c36:	2b10      	cmp	r3, #16
 8004c38:	d106      	bne.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c3a:	4b5e      	ldr	r3, [pc, #376]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c3e:	4a5d      	ldr	r2, [pc, #372]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004c40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c44:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8004c46:	e008      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004c4e:	e004      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8004c50:	bf00      	nop
 8004c52:	e002      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8004c54:	bf00      	nop
 8004c56:	e000      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8004c58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c5a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10d      	bne.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004c62:	4b54      	ldr	r3, [pc, #336]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004c64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c68:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004c6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c70:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c74:	4a4f      	ldr	r2, [pc, #316]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004c76:	430b      	orrs	r3, r1
 8004c78:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004c7c:	e003      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c7e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c82:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004c86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8e:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004c92:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c94:	2300      	movs	r3, #0
 8004c96:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c98:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	d033      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8004ca2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ca6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 8004cae:	2b40      	cmp	r3, #64	@ 0x40
 8004cb0:	d007      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004cb2:	e010      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cb4:	4b3f      	ldr	r3, [pc, #252]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb8:	4a3e      	ldr	r2, [pc, #248]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004cba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cbe:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004cc0:	e00d      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cc6:	3308      	adds	r3, #8
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f002 fa5f 	bl	800718c <RCCEx_PLL2_Config>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004cd4:	e003      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cde:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10d      	bne.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8004ce6:	4b33      	ldr	r3, [pc, #204]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004ce8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004cec:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8004cf0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cf4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cf8:	4a2e      	ldr	r2, [pc, #184]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004cfa:	430b      	orrs	r3, r1
 8004cfc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004d00:	e003      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d02:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d06:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004d0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d12:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004d16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d18:	2300      	movs	r3, #0
 8004d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d1c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004d20:	460b      	mov	r3, r1
 8004d22:	4313      	orrs	r3, r2
 8004d24:	d04c      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8004d26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d827      	bhi.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8004d32:	a201      	add	r2, pc, #4	@ (adr r2, 8004d38 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 8004d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d38:	08004d4d 	.word	0x08004d4d
 8004d3c:	08004d5b 	.word	0x08004d5b
 8004d40:	08004d6f 	.word	0x08004d6f
 8004d44:	08004d8b 	.word	0x08004d8b
 8004d48:	08004d8b 	.word	0x08004d8b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d4c:	4b19      	ldr	r3, [pc, #100]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d50:	4a18      	ldr	r2, [pc, #96]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004d52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d56:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004d58:	e018      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d5e:	3308      	adds	r3, #8
 8004d60:	4618      	mov	r0, r3
 8004d62:	f002 fa13 	bl	800718c <RCCEx_PLL2_Config>
 8004d66:	4603      	mov	r3, r0
 8004d68:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004d6c:	e00e      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d72:	3330      	adds	r3, #48	@ 0x30
 8004d74:	4618      	mov	r0, r3
 8004d76:	f002 faa1 	bl	80072bc <RCCEx_PLL3_Config>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004d80:	e004      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004d88:	e000      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 8004d8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d8c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d111      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004d94:	4b07      	ldr	r3, [pc, #28]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d9a:	f023 0107 	bic.w	r1, r3, #7
 8004d9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004da2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004da6:	4a03      	ldr	r2, [pc, #12]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004da8:	430b      	orrs	r3, r1
 8004daa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004dae:	e007      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8004db0:	44020800 	.word	0x44020800
 8004db4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004dbc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004dc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004dcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dce:	2300      	movs	r3, #0
 8004dd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dd2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	f000 8081 	beq.w	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8004dde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004de2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004de6:	2b20      	cmp	r3, #32
 8004de8:	d85f      	bhi.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8004dea:	a201      	add	r2, pc, #4	@ (adr r2, 8004df0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8004dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df0:	08004e75 	.word	0x08004e75
 8004df4:	08004eab 	.word	0x08004eab
 8004df8:	08004eab 	.word	0x08004eab
 8004dfc:	08004eab 	.word	0x08004eab
 8004e00:	08004eab 	.word	0x08004eab
 8004e04:	08004eab 	.word	0x08004eab
 8004e08:	08004eab 	.word	0x08004eab
 8004e0c:	08004eab 	.word	0x08004eab
 8004e10:	08004e83 	.word	0x08004e83
 8004e14:	08004eab 	.word	0x08004eab
 8004e18:	08004eab 	.word	0x08004eab
 8004e1c:	08004eab 	.word	0x08004eab
 8004e20:	08004eab 	.word	0x08004eab
 8004e24:	08004eab 	.word	0x08004eab
 8004e28:	08004eab 	.word	0x08004eab
 8004e2c:	08004eab 	.word	0x08004eab
 8004e30:	08004e97 	.word	0x08004e97
 8004e34:	08004eab 	.word	0x08004eab
 8004e38:	08004eab 	.word	0x08004eab
 8004e3c:	08004eab 	.word	0x08004eab
 8004e40:	08004eab 	.word	0x08004eab
 8004e44:	08004eab 	.word	0x08004eab
 8004e48:	08004eab 	.word	0x08004eab
 8004e4c:	08004eab 	.word	0x08004eab
 8004e50:	08004eb3 	.word	0x08004eb3
 8004e54:	08004eab 	.word	0x08004eab
 8004e58:	08004eab 	.word	0x08004eab
 8004e5c:	08004eab 	.word	0x08004eab
 8004e60:	08004eab 	.word	0x08004eab
 8004e64:	08004eab 	.word	0x08004eab
 8004e68:	08004eab 	.word	0x08004eab
 8004e6c:	08004eab 	.word	0x08004eab
 8004e70:	08004eb3 	.word	0x08004eb3
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e74:	4bb9      	ldr	r3, [pc, #740]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e78:	4ab8      	ldr	r2, [pc, #736]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004e7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e7e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004e80:	e018      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e86:	3308      	adds	r3, #8
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f002 f97f 	bl	800718c <RCCEx_PLL2_Config>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004e94:	e00e      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e9a:	3330      	adds	r3, #48	@ 0x30
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f002 fa0d 	bl	80072bc <RCCEx_PLL3_Config>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004ea8:	e004      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004eb0:	e000      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 8004eb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eb4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10d      	bne.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004ebc:	4ba7      	ldr	r3, [pc, #668]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ec2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004ec6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004eca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004ece:	4aa3      	ldr	r2, [pc, #652]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004ed0:	430b      	orrs	r3, r1
 8004ed2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004ed6:	e003      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004edc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004ee0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004eec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004eee:	2300      	movs	r3, #0
 8004ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ef2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	d04e      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8004efc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f08:	d02e      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004f0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f0e:	d827      	bhi.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004f10:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f12:	d02b      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1088>
 8004f14:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f16:	d823      	bhi.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004f18:	2b80      	cmp	r3, #128	@ 0x80
 8004f1a:	d017      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1068>
 8004f1c:	2b80      	cmp	r3, #128	@ 0x80
 8004f1e:	d81f      	bhi.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d002      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x1046>
 8004f24:	2b40      	cmp	r3, #64	@ 0x40
 8004f26:	d007      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 8004f28:	e01a      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f2a:	4b8c      	ldr	r3, [pc, #560]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f2e:	4a8b      	ldr	r2, [pc, #556]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004f30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f34:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004f36:	e01a      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f3c:	3308      	adds	r3, #8
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f002 f924 	bl	800718c <RCCEx_PLL2_Config>
 8004f44:	4603      	mov	r3, r0
 8004f46:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004f4a:	e010      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f50:	3330      	adds	r3, #48	@ 0x30
 8004f52:	4618      	mov	r0, r3
 8004f54:	f002 f9b2 	bl	80072bc <RCCEx_PLL3_Config>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004f5e:	e006      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004f66:	e002      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8004f68:	bf00      	nop
 8004f6a:	e000      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8004f6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f6e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10d      	bne.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004f76:	4b79      	ldr	r3, [pc, #484]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f7c:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8004f80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f88:	4974      	ldr	r1, [pc, #464]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004f90:	e003      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f92:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f96:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004f9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004fa6:	623b      	str	r3, [r7, #32]
 8004fa8:	2300      	movs	r3, #0
 8004faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fac:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	d055      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8004fb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004fbe:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004fc2:	d031      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8004fc4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004fc8:	d82a      	bhi.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8004fca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fce:	d02d      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8004fd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fd4:	d824      	bhi.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8004fd6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004fda:	d029      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x114c>
 8004fdc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004fe0:	d81e      	bhi.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8004fe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fe6:	d011      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8004fe8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fec:	d818      	bhi.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d020      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 8004ff2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ff6:	d113      	bne.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ff8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ffc:	3308      	adds	r3, #8
 8004ffe:	4618      	mov	r0, r3
 8005000:	f002 f8c4 	bl	800718c <RCCEx_PLL2_Config>
 8005004:	4603      	mov	r3, r0
 8005006:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800500a:	e014      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800500c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005010:	3330      	adds	r3, #48	@ 0x30
 8005012:	4618      	mov	r0, r3
 8005014:	f002 f952 	bl	80072bc <RCCEx_PLL3_Config>
 8005018:	4603      	mov	r3, r0
 800501a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800501e:	e00a      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005026:	e006      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005028:	bf00      	nop
 800502a:	e004      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 800502c:	bf00      	nop
 800502e:	e002      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005030:	bf00      	nop
 8005032:	e000      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005034:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005036:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10d      	bne.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800503e:	4b47      	ldr	r3, [pc, #284]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005044:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 8005048:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800504c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005050:	4942      	ldr	r1, [pc, #264]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005052:	4313      	orrs	r3, r2
 8005054:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005058:	e003      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800505a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800505e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005062:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506a:	2100      	movs	r1, #0
 800506c:	61b9      	str	r1, [r7, #24]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	61fb      	str	r3, [r7, #28]
 8005074:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005078:	460b      	mov	r3, r1
 800507a:	4313      	orrs	r3, r2
 800507c:	d03c      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800507e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005082:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005086:	2b03      	cmp	r3, #3
 8005088:	d81b      	bhi.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x11de>
 800508a:	a201      	add	r2, pc, #4	@ (adr r2, 8005090 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 800508c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005090:	080050cb 	.word	0x080050cb
 8005094:	080050a1 	.word	0x080050a1
 8005098:	080050af 	.word	0x080050af
 800509c:	080050cb 	.word	0x080050cb
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050a0:	4b2e      	ldr	r3, [pc, #184]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80050a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a4:	4a2d      	ldr	r2, [pc, #180]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80050a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050aa:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80050ac:	e00e      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050b2:	3308      	adds	r3, #8
 80050b4:	4618      	mov	r0, r3
 80050b6:	f002 f869 	bl	800718c <RCCEx_PLL2_Config>
 80050ba:	4603      	mov	r3, r0
 80050bc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 80050c0:	e004      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80050c8:	e000      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 80050ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050cc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10d      	bne.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80050d4:	4b21      	ldr	r3, [pc, #132]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80050d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80050da:	f023 0203 	bic.w	r2, r3, #3
 80050de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80050e6:	491d      	ldr	r1, [pc, #116]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80050ee:	e003      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80050f4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80050f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005100:	2100      	movs	r1, #0
 8005102:	6139      	str	r1, [r7, #16]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	617b      	str	r3, [r7, #20]
 800510a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800510e:	460b      	mov	r3, r1
 8005110:	4313      	orrs	r3, r2
 8005112:	d03c      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005114:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005118:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800511c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005120:	d00e      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8005122:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005126:	d815      	bhi.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 8005128:	2b00      	cmp	r3, #0
 800512a:	d019      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x127c>
 800512c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005130:	d110      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005132:	4b0a      	ldr	r3, [pc, #40]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005136:	4a09      	ldr	r2, [pc, #36]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005138:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800513c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800513e:	e010      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005140:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005144:	3308      	adds	r3, #8
 8005146:	4618      	mov	r0, r3
 8005148:	f002 f820 	bl	800718c <RCCEx_PLL2_Config>
 800514c:	4603      	mov	r3, r0
 800514e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005152:	e006      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800515a:	e002      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x127e>
 800515c:	44020c00 	.word	0x44020c00
        break;
 8005160:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005162:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10d      	bne.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800516a:	4b3d      	ldr	r3, [pc, #244]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800516c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005170:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005174:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005178:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800517c:	4938      	ldr	r1, [pc, #224]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800517e:	4313      	orrs	r3, r2
 8005180:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8005184:	e003      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005186:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800518a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800518e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005196:	2100      	movs	r1, #0
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	f003 0310 	and.w	r3, r3, #16
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80051a4:	460b      	mov	r3, r1
 80051a6:	4313      	orrs	r3, r2
 80051a8:	d038      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80051aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051ae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80051b2:	2b30      	cmp	r3, #48	@ 0x30
 80051b4:	d01b      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x130a>
 80051b6:	2b30      	cmp	r3, #48	@ 0x30
 80051b8:	d815      	bhi.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x1302>
 80051ba:	2b10      	cmp	r3, #16
 80051bc:	d002      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 80051be:	2b20      	cmp	r3, #32
 80051c0:	d007      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 80051c2:	e010      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051c4:	4b26      	ldr	r3, [pc, #152]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80051c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c8:	4a25      	ldr	r2, [pc, #148]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80051ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051ce:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80051d0:	e00e      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051d6:	3330      	adds	r3, #48	@ 0x30
 80051d8:	4618      	mov	r0, r3
 80051da:	f002 f86f 	bl	80072bc <RCCEx_PLL3_Config>
 80051de:	4603      	mov	r3, r0
 80051e0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80051e4:	e004      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80051ec:	e000      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 80051ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051f0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10d      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80051f8:	4b19      	ldr	r3, [pc, #100]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80051fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80051fe:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005202:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005206:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800520a:	4915      	ldr	r1, [pc, #84]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800520c:	4313      	orrs	r3, r2
 800520e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005212:	e003      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005214:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005218:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800521c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005224:	2100      	movs	r1, #0
 8005226:	6039      	str	r1, [r7, #0]
 8005228:	f003 0308 	and.w	r3, r3, #8
 800522c:	607b      	str	r3, [r7, #4]
 800522e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005232:	460b      	mov	r3, r1
 8005234:	4313      	orrs	r3, r2
 8005236:	d00c      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005238:	4b09      	ldr	r3, [pc, #36]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800523a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800523e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005242:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005246:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800524a:	4905      	ldr	r1, [pc, #20]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800524c:	4313      	orrs	r3, r2
 800524e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8005252:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8005256:	4618      	mov	r0, r3
 8005258:	37e8      	adds	r7, #232	@ 0xe8
 800525a:	46bd      	mov	sp, r7
 800525c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005260:	44020c00 	.word	0x44020c00

08005264 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8005264:	b480      	push	{r7}
 8005266:	b08b      	sub	sp, #44	@ 0x2c
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800526c:	4bae      	ldr	r3, [pc, #696]	@ (8005528 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800526e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005274:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005276:	4bac      	ldr	r3, [pc, #688]	@ (8005528 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005280:	4ba9      	ldr	r3, [pc, #676]	@ (8005528 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005284:	0a1b      	lsrs	r3, r3, #8
 8005286:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800528a:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800528c:	4ba6      	ldr	r3, [pc, #664]	@ (8005528 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800528e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005290:	091b      	lsrs	r3, r3, #4
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005298:	4ba3      	ldr	r3, [pc, #652]	@ (8005528 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800529a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800529c:	08db      	lsrs	r3, r3, #3
 800529e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	fb02 f303 	mul.w	r3, r2, r3
 80052a8:	ee07 3a90 	vmov	s15, r3
 80052ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052b0:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f000 8126 	beq.w	8005508 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	2b03      	cmp	r3, #3
 80052c0:	d053      	beq.n	800536a <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	2b03      	cmp	r3, #3
 80052c6:	d86f      	bhi.n	80053a8 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d003      	beq.n	80052d6 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d02b      	beq.n	800532c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80052d4:	e068      	b.n	80053a8 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80052d6:	4b94      	ldr	r3, [pc, #592]	@ (8005528 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	08db      	lsrs	r3, r3, #3
 80052dc:	f003 0303 	and.w	r3, r3, #3
 80052e0:	4a92      	ldr	r2, [pc, #584]	@ (800552c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80052e2:	fa22 f303 	lsr.w	r3, r2, r3
 80052e6:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	ee07 3a90 	vmov	s15, r3
 80052ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	ee07 3a90 	vmov	s15, r3
 80052f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	ee07 3a90 	vmov	s15, r3
 8005306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800530a:	ed97 6a04 	vldr	s12, [r7, #16]
 800530e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8005530 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800531a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800531e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005326:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800532a:	e068      	b.n	80053fe <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	ee07 3a90 	vmov	s15, r3
 8005332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005336:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8005534 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800533a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800533e:	6a3b      	ldr	r3, [r7, #32]
 8005340:	ee07 3a90 	vmov	s15, r3
 8005344:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005348:	ed97 6a04 	vldr	s12, [r7, #16]
 800534c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005530 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005350:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005354:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005358:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800535c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005360:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005364:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005368:	e049      	b.n	80053fe <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	ee07 3a90 	vmov	s15, r3
 8005370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005374:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005538 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8005378:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800537c:	6a3b      	ldr	r3, [r7, #32]
 800537e:	ee07 3a90 	vmov	s15, r3
 8005382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005386:	ed97 6a04 	vldr	s12, [r7, #16]
 800538a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8005530 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800538e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005396:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800539a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800539e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053a2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80053a6:	e02a      	b.n	80053fe <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80053a8:	4b5f      	ldr	r3, [pc, #380]	@ (8005528 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	08db      	lsrs	r3, r3, #3
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	4a5e      	ldr	r2, [pc, #376]	@ (800552c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80053b4:	fa22 f303 	lsr.w	r3, r2, r3
 80053b8:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	ee07 3a90 	vmov	s15, r3
 80053c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	ee07 3a90 	vmov	s15, r3
 80053ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	ee07 3a90 	vmov	s15, r3
 80053d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053dc:	ed97 6a04 	vldr	s12, [r7, #16]
 80053e0:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005530 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80053e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053f8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80053fc:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80053fe:	4b4a      	ldr	r3, [pc, #296]	@ (8005528 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005406:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800540a:	d121      	bne.n	8005450 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800540c:	4b46      	ldr	r3, [pc, #280]	@ (8005528 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800540e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005410:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d017      	beq.n	8005448 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005418:	4b43      	ldr	r3, [pc, #268]	@ (8005528 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800541a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800541c:	0a5b      	lsrs	r3, r3, #9
 800541e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005422:	ee07 3a90 	vmov	s15, r3
 8005426:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800542a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800542e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005432:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005436:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800543a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800543e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	e006      	b.n	8005456 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	e002      	b.n	8005456 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005456:	4b34      	ldr	r3, [pc, #208]	@ (8005528 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800545e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005462:	d121      	bne.n	80054a8 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005464:	4b30      	ldr	r3, [pc, #192]	@ (8005528 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d017      	beq.n	80054a0 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005470:	4b2d      	ldr	r3, [pc, #180]	@ (8005528 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005474:	0c1b      	lsrs	r3, r3, #16
 8005476:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800547a:	ee07 3a90 	vmov	s15, r3
 800547e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005482:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005486:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800548a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800548e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005496:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	605a      	str	r2, [r3, #4]
 800549e:	e006      	b.n	80054ae <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	605a      	str	r2, [r3, #4]
 80054a6:	e002      	b.n	80054ae <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80054ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005528 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054ba:	d121      	bne.n	8005500 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80054bc:	4b1a      	ldr	r3, [pc, #104]	@ (8005528 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80054be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d017      	beq.n	80054f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80054c8:	4b17      	ldr	r3, [pc, #92]	@ (8005528 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80054ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054cc:	0e1b      	lsrs	r3, r3, #24
 80054ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054d2:	ee07 3a90 	vmov	s15, r3
 80054d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80054da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054de:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80054e2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80054e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ee:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80054f6:	e010      	b.n	800551a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	609a      	str	r2, [r3, #8]
}
 80054fe:	e00c      	b.n	800551a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	609a      	str	r2, [r3, #8]
}
 8005506:	e008      	b.n	800551a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	609a      	str	r2, [r3, #8]
}
 800551a:	bf00      	nop
 800551c:	372c      	adds	r7, #44	@ 0x2c
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	44020c00 	.word	0x44020c00
 800552c:	03d09000 	.word	0x03d09000
 8005530:	46000000 	.word	0x46000000
 8005534:	4a742400 	.word	0x4a742400
 8005538:	4af42400 	.word	0x4af42400

0800553c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 800553c:	b480      	push	{r7}
 800553e:	b08b      	sub	sp, #44	@ 0x2c
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005544:	4bae      	ldr	r3, [pc, #696]	@ (8005800 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800554c:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800554e:	4bac      	ldr	r3, [pc, #688]	@ (8005800 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8005558:	4ba9      	ldr	r3, [pc, #676]	@ (8005800 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800555a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800555c:	0a1b      	lsrs	r3, r3, #8
 800555e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005562:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005564:	4ba6      	ldr	r3, [pc, #664]	@ (8005800 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005568:	091b      	lsrs	r3, r3, #4
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005570:	4ba3      	ldr	r3, [pc, #652]	@ (8005800 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005574:	08db      	lsrs	r3, r3, #3
 8005576:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	fb02 f303 	mul.w	r3, r2, r3
 8005580:	ee07 3a90 	vmov	s15, r3
 8005584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005588:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	2b00      	cmp	r3, #0
 8005590:	f000 8126 	beq.w	80057e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	2b03      	cmp	r3, #3
 8005598:	d053      	beq.n	8005642 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	2b03      	cmp	r3, #3
 800559e:	d86f      	bhi.n	8005680 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d003      	beq.n	80055ae <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d02b      	beq.n	8005604 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80055ac:	e068      	b.n	8005680 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80055ae:	4b94      	ldr	r3, [pc, #592]	@ (8005800 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	08db      	lsrs	r3, r3, #3
 80055b4:	f003 0303 	and.w	r3, r3, #3
 80055b8:	4a92      	ldr	r2, [pc, #584]	@ (8005804 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80055ba:	fa22 f303 	lsr.w	r3, r2, r3
 80055be:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	ee07 3a90 	vmov	s15, r3
 80055c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	ee07 3a90 	vmov	s15, r3
 80055d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	ee07 3a90 	vmov	s15, r3
 80055de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055e2:	ed97 6a04 	vldr	s12, [r7, #16]
 80055e6:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8005808 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80055ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055fe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005602:	e068      	b.n	80056d6 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	ee07 3a90 	vmov	s15, r3
 800560a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800560e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800580c <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8005612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005616:	6a3b      	ldr	r3, [r7, #32]
 8005618:	ee07 3a90 	vmov	s15, r3
 800561c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005620:	ed97 6a04 	vldr	s12, [r7, #16]
 8005624:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005808 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005628:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800562c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005630:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005634:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800563c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005640:	e049      	b.n	80056d6 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	ee07 3a90 	vmov	s15, r3
 8005648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800564c:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8005650:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005654:	6a3b      	ldr	r3, [r7, #32]
 8005656:	ee07 3a90 	vmov	s15, r3
 800565a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800565e:	ed97 6a04 	vldr	s12, [r7, #16]
 8005662:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8005808 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800566a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800566e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800567a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800567e:	e02a      	b.n	80056d6 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005680:	4b5f      	ldr	r3, [pc, #380]	@ (8005800 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	08db      	lsrs	r3, r3, #3
 8005686:	f003 0303 	and.w	r3, r3, #3
 800568a:	4a5e      	ldr	r2, [pc, #376]	@ (8005804 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800568c:	fa22 f303 	lsr.w	r3, r2, r3
 8005690:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	ee07 3a90 	vmov	s15, r3
 8005698:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	ee07 3a90 	vmov	s15, r3
 80056a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	ee07 3a90 	vmov	s15, r3
 80056b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056b4:	ed97 6a04 	vldr	s12, [r7, #16]
 80056b8:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005808 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80056bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056d0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80056d4:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80056d6:	4b4a      	ldr	r3, [pc, #296]	@ (8005800 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056e2:	d121      	bne.n	8005728 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80056e4:	4b46      	ldr	r3, [pc, #280]	@ (8005800 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80056e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d017      	beq.n	8005720 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80056f0:	4b43      	ldr	r3, [pc, #268]	@ (8005800 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80056f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056f4:	0a5b      	lsrs	r3, r3, #9
 80056f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056fa:	ee07 3a90 	vmov	s15, r3
 80056fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8005702:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005706:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800570a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800570e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005716:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	e006      	b.n	800572e <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	e002      	b.n	800572e <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800572e:	4b34      	ldr	r3, [pc, #208]	@ (8005800 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005736:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800573a:	d121      	bne.n	8005780 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800573c:	4b30      	ldr	r3, [pc, #192]	@ (8005800 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800573e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005740:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d017      	beq.n	8005778 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005748:	4b2d      	ldr	r3, [pc, #180]	@ (8005800 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800574a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800574c:	0c1b      	lsrs	r3, r3, #16
 800574e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005752:	ee07 3a90 	vmov	s15, r3
 8005756:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800575a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800575e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005762:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005766:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800576a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800576e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	605a      	str	r2, [r3, #4]
 8005776:	e006      	b.n	8005786 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	605a      	str	r2, [r3, #4]
 800577e:	e002      	b.n	8005786 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005786:	4b1e      	ldr	r3, [pc, #120]	@ (8005800 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800578e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005792:	d121      	bne.n	80057d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005794:	4b1a      	ldr	r3, [pc, #104]	@ (8005800 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005798:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d017      	beq.n	80057d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80057a0:	4b17      	ldr	r3, [pc, #92]	@ (8005800 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80057a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057a4:	0e1b      	lsrs	r3, r3, #24
 80057a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057aa:	ee07 3a90 	vmov	s15, r3
 80057ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80057b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057b6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80057ba:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80057be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057c6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80057ce:	e010      	b.n	80057f2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	609a      	str	r2, [r3, #8]
}
 80057d6:	e00c      	b.n	80057f2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	609a      	str	r2, [r3, #8]
}
 80057de:	e008      	b.n	80057f2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	609a      	str	r2, [r3, #8]
}
 80057f2:	bf00      	nop
 80057f4:	372c      	adds	r7, #44	@ 0x2c
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	44020c00 	.word	0x44020c00
 8005804:	03d09000 	.word	0x03d09000
 8005808:	46000000 	.word	0x46000000
 800580c:	4a742400 	.word	0x4a742400
 8005810:	4af42400 	.word	0x4af42400

08005814 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8005814:	b480      	push	{r7}
 8005816:	b08b      	sub	sp, #44	@ 0x2c
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800581c:	4bae      	ldr	r3, [pc, #696]	@ (8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800581e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005824:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005826:	4bac      	ldr	r3, [pc, #688]	@ (8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800582a:	f003 0303 	and.w	r3, r3, #3
 800582e:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8005830:	4ba9      	ldr	r3, [pc, #676]	@ (8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005834:	0a1b      	lsrs	r3, r3, #8
 8005836:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800583a:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800583c:	4ba6      	ldr	r3, [pc, #664]	@ (8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800583e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005840:	091b      	lsrs	r3, r3, #4
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005848:	4ba3      	ldr	r3, [pc, #652]	@ (8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800584a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800584c:	08db      	lsrs	r3, r3, #3
 800584e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	fb02 f303 	mul.w	r3, r2, r3
 8005858:	ee07 3a90 	vmov	s15, r3
 800585c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005860:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	2b00      	cmp	r3, #0
 8005868:	f000 8126 	beq.w	8005ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	2b03      	cmp	r3, #3
 8005870:	d053      	beq.n	800591a <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	2b03      	cmp	r3, #3
 8005876:	d86f      	bhi.n	8005958 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d003      	beq.n	8005886 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	2b02      	cmp	r3, #2
 8005882:	d02b      	beq.n	80058dc <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005884:	e068      	b.n	8005958 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005886:	4b94      	ldr	r3, [pc, #592]	@ (8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	08db      	lsrs	r3, r3, #3
 800588c:	f003 0303 	and.w	r3, r3, #3
 8005890:	4a92      	ldr	r2, [pc, #584]	@ (8005adc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8005892:	fa22 f303 	lsr.w	r3, r2, r3
 8005896:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	ee07 3a90 	vmov	s15, r3
 800589e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	ee07 3a90 	vmov	s15, r3
 80058a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	ee07 3a90 	vmov	s15, r3
 80058b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ba:	ed97 6a04 	vldr	s12, [r7, #16]
 80058be:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8005ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80058c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058d6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80058da:	e068      	b.n	80059ae <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	ee07 3a90 	vmov	s15, r3
 80058e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058e6:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8005ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 80058ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ee:	6a3b      	ldr	r3, [r7, #32]
 80058f0:	ee07 3a90 	vmov	s15, r3
 80058f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058f8:	ed97 6a04 	vldr	s12, [r7, #16]
 80058fc:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8005900:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005904:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005908:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800590c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005914:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005918:	e049      	b.n	80059ae <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	ee07 3a90 	vmov	s15, r3
 8005920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005924:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8005928:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800592c:	6a3b      	ldr	r3, [r7, #32]
 800592e:	ee07 3a90 	vmov	s15, r3
 8005932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005936:	ed97 6a04 	vldr	s12, [r7, #16]
 800593a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8005ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800593e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005946:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800594a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800594e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005952:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005956:	e02a      	b.n	80059ae <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005958:	4b5f      	ldr	r3, [pc, #380]	@ (8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	08db      	lsrs	r3, r3, #3
 800595e:	f003 0303 	and.w	r3, r3, #3
 8005962:	4a5e      	ldr	r2, [pc, #376]	@ (8005adc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8005964:	fa22 f303 	lsr.w	r3, r2, r3
 8005968:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	ee07 3a90 	vmov	s15, r3
 8005970:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	ee07 3a90 	vmov	s15, r3
 800597a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800597e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005982:	6a3b      	ldr	r3, [r7, #32]
 8005984:	ee07 3a90 	vmov	s15, r3
 8005988:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800598c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005990:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8005994:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005998:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800599c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059a8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80059ac:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80059ae:	4b4a      	ldr	r3, [pc, #296]	@ (8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059ba:	d121      	bne.n	8005a00 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80059bc:	4b46      	ldr	r3, [pc, #280]	@ (8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80059be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d017      	beq.n	80059f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80059c8:	4b43      	ldr	r3, [pc, #268]	@ (8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80059ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059cc:	0a5b      	lsrs	r3, r3, #9
 80059ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059d2:	ee07 3a90 	vmov	s15, r3
 80059d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80059da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80059de:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80059e2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80059e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059ee:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	601a      	str	r2, [r3, #0]
 80059f6:	e006      	b.n	8005a06 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	e002      	b.n	8005a06 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a06:	4b34      	ldr	r3, [pc, #208]	@ (8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a12:	d121      	bne.n	8005a58 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005a14:	4b30      	ldr	r3, [pc, #192]	@ (8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d017      	beq.n	8005a50 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005a20:	4b2d      	ldr	r3, [pc, #180]	@ (8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005a22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a24:	0c1b      	lsrs	r3, r3, #16
 8005a26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a2a:	ee07 3a90 	vmov	s15, r3
 8005a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005a32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a36:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005a3a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a46:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	605a      	str	r2, [r3, #4]
 8005a4e:	e006      	b.n	8005a5e <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	605a      	str	r2, [r3, #4]
 8005a56:	e002      	b.n	8005a5e <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a6a:	d121      	bne.n	8005ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d017      	beq.n	8005aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005a78:	4b17      	ldr	r3, [pc, #92]	@ (8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a7c:	0e1b      	lsrs	r3, r3, #24
 8005a7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a82:	ee07 3a90 	vmov	s15, r3
 8005a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8005a8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a8e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005a92:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005a96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a9e:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8005aa6:	e010      	b.n	8005aca <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	609a      	str	r2, [r3, #8]
}
 8005aae:	e00c      	b.n	8005aca <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	609a      	str	r2, [r3, #8]
}
 8005ab6:	e008      	b.n	8005aca <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	609a      	str	r2, [r3, #8]
}
 8005aca:	bf00      	nop
 8005acc:	372c      	adds	r7, #44	@ 0x2c
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	44020c00 	.word	0x44020c00
 8005adc:	03d09000 	.word	0x03d09000
 8005ae0:	46000000 	.word	0x46000000
 8005ae4:	4a742400 	.word	0x4a742400
 8005ae8:	4af42400 	.word	0x4af42400

08005aec <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005aec:	b590      	push	{r4, r7, lr}
 8005aee:	b08f      	sub	sp, #60	@ 0x3c
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005af6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005afa:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8005afe:	4321      	orrs	r1, r4
 8005b00:	d150      	bne.n	8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005b02:	4b26      	ldr	r3, [pc, #152]	@ (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005b04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b0c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005b0e:	4b23      	ldr	r3, [pc, #140]	@ (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005b10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b14:	f003 0302 	and.w	r3, r3, #2
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d108      	bne.n	8005b2e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b22:	d104      	bne.n	8005b2e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005b24:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b28:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b2a:	f001 bb20 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005b2e:	4b1b      	ldr	r3, [pc, #108]	@ (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005b30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b3c:	d108      	bne.n	8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8005b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b44:	d104      	bne.n	8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8005b46:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005b4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b4c:	f001 bb0f 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8005b50:	4b12      	ldr	r3, [pc, #72]	@ (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b5c:	d119      	bne.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8005b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b64:	d115      	bne.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005b66:	4b0d      	ldr	r3, [pc, #52]	@ (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8005b6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b72:	d30a      	bcc.n	8005b8a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8005b74:	4b09      	ldr	r3, [pc, #36]	@ (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005b76:	69db      	ldr	r3, [r3, #28]
 8005b78:	0a1b      	lsrs	r3, r3, #8
 8005b7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b7e:	4a08      	ldr	r2, [pc, #32]	@ (8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b84:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005b86:	f001 baf2 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005b8e:	f001 baee 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005b92:	2300      	movs	r3, #0
 8005b94:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b96:	f001 baea 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005b9a:	bf00      	nop
 8005b9c:	44020c00 	.word	0x44020c00
 8005ba0:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8005ba4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ba8:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 8005bac:	ea50 0104 	orrs.w	r1, r0, r4
 8005bb0:	f000 8615 	beq.w	80067de <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 8005bb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bb8:	2801      	cmp	r0, #1
 8005bba:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 8005bbe:	f081 82d3 	bcs.w	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005bc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bc6:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8005bca:	ea50 0104 	orrs.w	r1, r0, r4
 8005bce:	f000 84d8 	beq.w	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8005bd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bd6:	2801      	cmp	r0, #1
 8005bd8:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8005bdc:	f081 82c4 	bcs.w	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005be0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005be4:	f1a1 0410 	sub.w	r4, r1, #16
 8005be8:	ea50 0104 	orrs.w	r1, r0, r4
 8005bec:	f001 8288 	beq.w	8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 8005bf0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bf4:	2801      	cmp	r0, #1
 8005bf6:	f171 0110 	sbcs.w	r1, r1, #16
 8005bfa:	f081 82b5 	bcs.w	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005bfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c02:	f1a1 0408 	sub.w	r4, r1, #8
 8005c06:	ea50 0104 	orrs.w	r1, r0, r4
 8005c0a:	f001 81fe 	beq.w	800700a <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 8005c0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c12:	2801      	cmp	r0, #1
 8005c14:	f171 0108 	sbcs.w	r1, r1, #8
 8005c18:	f081 82a6 	bcs.w	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005c1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c20:	1f0c      	subs	r4, r1, #4
 8005c22:	ea50 0104 	orrs.w	r1, r0, r4
 8005c26:	f000 8753 	beq.w	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 8005c2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c2e:	2801      	cmp	r0, #1
 8005c30:	f171 0104 	sbcs.w	r1, r1, #4
 8005c34:	f081 8298 	bcs.w	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005c38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c3c:	1e8c      	subs	r4, r1, #2
 8005c3e:	ea50 0104 	orrs.w	r1, r0, r4
 8005c42:	f001 8173 	beq.w	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 8005c46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c4a:	2801      	cmp	r0, #1
 8005c4c:	f171 0102 	sbcs.w	r1, r1, #2
 8005c50:	f081 828a 	bcs.w	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005c54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c58:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8005c5c:	4321      	orrs	r1, r4
 8005c5e:	f001 80fe 	beq.w	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8005c62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c66:	4ccb      	ldr	r4, [pc, #812]	@ (8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8005c68:	42a0      	cmp	r0, r4
 8005c6a:	f171 0100 	sbcs.w	r1, r1, #0
 8005c6e:	f081 827b 	bcs.w	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005c72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c76:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8005c7a:	4321      	orrs	r1, r4
 8005c7c:	f001 8076 	beq.w	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 8005c80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c84:	4cc4      	ldr	r4, [pc, #784]	@ (8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8005c86:	42a0      	cmp	r0, r4
 8005c88:	f171 0100 	sbcs.w	r1, r1, #0
 8005c8c:	f081 826c 	bcs.w	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005c90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c94:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8005c98:	4321      	orrs	r1, r4
 8005c9a:	f000 87b5 	beq.w	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 8005c9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ca2:	4cbe      	ldr	r4, [pc, #760]	@ (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 8005ca4:	42a0      	cmp	r0, r4
 8005ca6:	f171 0100 	sbcs.w	r1, r1, #0
 8005caa:	f081 825d 	bcs.w	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005cae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cb2:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8005cb6:	4321      	orrs	r1, r4
 8005cb8:	f000 8738 	beq.w	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8005cbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cc0:	4cb7      	ldr	r4, [pc, #732]	@ (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 8005cc2:	42a0      	cmp	r0, r4
 8005cc4:	f171 0100 	sbcs.w	r1, r1, #0
 8005cc8:	f081 824e 	bcs.w	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005ccc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cd0:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8005cd4:	4321      	orrs	r1, r4
 8005cd6:	f001 81cd 	beq.w	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 8005cda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cde:	4cb1      	ldr	r4, [pc, #708]	@ (8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 8005ce0:	42a0      	cmp	r0, r4
 8005ce2:	f171 0100 	sbcs.w	r1, r1, #0
 8005ce6:	f081 823f 	bcs.w	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005cea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cee:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8005cf2:	4321      	orrs	r1, r4
 8005cf4:	f000 80d9 	beq.w	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005cf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cfc:	4caa      	ldr	r4, [pc, #680]	@ (8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 8005cfe:	42a0      	cmp	r0, r4
 8005d00:	f171 0100 	sbcs.w	r1, r1, #0
 8005d04:	f081 8230 	bcs.w	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005d08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d0c:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8005d10:	4321      	orrs	r1, r4
 8005d12:	f000 83da 	beq.w	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8005d16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d1a:	4ca4      	ldr	r4, [pc, #656]	@ (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 8005d1c:	42a0      	cmp	r0, r4
 8005d1e:	f171 0100 	sbcs.w	r1, r1, #0
 8005d22:	f081 8221 	bcs.w	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005d26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d2a:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8005d2e:	4321      	orrs	r1, r4
 8005d30:	f000 8627 	beq.w	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 8005d34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d38:	4c9d      	ldr	r4, [pc, #628]	@ (8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 8005d3a:	42a0      	cmp	r0, r4
 8005d3c:	f171 0100 	sbcs.w	r1, r1, #0
 8005d40:	f081 8212 	bcs.w	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005d44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d48:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8005d4c:	4321      	orrs	r1, r4
 8005d4e:	f000 857a 	beq.w	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8005d52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d56:	4c97      	ldr	r4, [pc, #604]	@ (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 8005d58:	42a0      	cmp	r0, r4
 8005d5a:	f171 0100 	sbcs.w	r1, r1, #0
 8005d5e:	f081 8203 	bcs.w	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005d62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d66:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8005d6a:	4321      	orrs	r1, r4
 8005d6c:	f000 84fb 	beq.w	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8005d70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d74:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8005d78:	f171 0100 	sbcs.w	r1, r1, #0
 8005d7c:	f081 81f4 	bcs.w	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005d80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d84:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8005d88:	4321      	orrs	r1, r4
 8005d8a:	f000 84a9 	beq.w	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8005d8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d92:	f248 0401 	movw	r4, #32769	@ 0x8001
 8005d96:	42a0      	cmp	r0, r4
 8005d98:	f171 0100 	sbcs.w	r1, r1, #0
 8005d9c:	f081 81e4 	bcs.w	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005da0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005da4:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8005da8:	4321      	orrs	r1, r4
 8005daa:	f000 8456 	beq.w	800665a <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 8005dae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005db2:	f244 0401 	movw	r4, #16385	@ 0x4001
 8005db6:	42a0      	cmp	r0, r4
 8005db8:	f171 0100 	sbcs.w	r1, r1, #0
 8005dbc:	f081 81d4 	bcs.w	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005dc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dc4:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8005dc8:	4321      	orrs	r1, r4
 8005dca:	f000 8403 	beq.w	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8005dce:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dd2:	f242 0401 	movw	r4, #8193	@ 0x2001
 8005dd6:	42a0      	cmp	r0, r4
 8005dd8:	f171 0100 	sbcs.w	r1, r1, #0
 8005ddc:	f081 81c4 	bcs.w	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005de0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005de4:	2821      	cmp	r0, #33	@ 0x21
 8005de6:	f171 0100 	sbcs.w	r1, r1, #0
 8005dea:	d255      	bcs.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8005dec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005df0:	4301      	orrs	r1, r0
 8005df2:	f001 81b9 	beq.w	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005df6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dfa:	1e42      	subs	r2, r0, #1
 8005dfc:	f141 33ff 	adc.w	r3, r1, #4294967295
 8005e00:	2a20      	cmp	r2, #32
 8005e02:	f173 0100 	sbcs.w	r1, r3, #0
 8005e06:	f081 81af 	bcs.w	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005e0a:	2a1f      	cmp	r2, #31
 8005e0c:	f201 81ac 	bhi.w	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005e10:	a101      	add	r1, pc, #4	@ (adr r1, 8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8005e12:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005e16:	bf00      	nop
 8005e18:	08005eef 	.word	0x08005eef
 8005e1c:	08005fed 	.word	0x08005fed
 8005e20:	08007169 	.word	0x08007169
 8005e24:	080060ad 	.word	0x080060ad
 8005e28:	08007169 	.word	0x08007169
 8005e2c:	08007169 	.word	0x08007169
 8005e30:	08007169 	.word	0x08007169
 8005e34:	0800617d 	.word	0x0800617d
 8005e38:	08007169 	.word	0x08007169
 8005e3c:	08007169 	.word	0x08007169
 8005e40:	08007169 	.word	0x08007169
 8005e44:	08007169 	.word	0x08007169
 8005e48:	08007169 	.word	0x08007169
 8005e4c:	08007169 	.word	0x08007169
 8005e50:	08007169 	.word	0x08007169
 8005e54:	08006261 	.word	0x08006261
 8005e58:	08007169 	.word	0x08007169
 8005e5c:	08007169 	.word	0x08007169
 8005e60:	08007169 	.word	0x08007169
 8005e64:	08007169 	.word	0x08007169
 8005e68:	08007169 	.word	0x08007169
 8005e6c:	08007169 	.word	0x08007169
 8005e70:	08007169 	.word	0x08007169
 8005e74:	08007169 	.word	0x08007169
 8005e78:	08007169 	.word	0x08007169
 8005e7c:	08007169 	.word	0x08007169
 8005e80:	08007169 	.word	0x08007169
 8005e84:	08007169 	.word	0x08007169
 8005e88:	08007169 	.word	0x08007169
 8005e8c:	08007169 	.word	0x08007169
 8005e90:	08007169 	.word	0x08007169
 8005e94:	08006337 	.word	0x08006337
 8005e98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e9c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005ea0:	430b      	orrs	r3, r1
 8005ea2:	f000 82b3 	beq.w	800640c <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 8005ea6:	f001 b95f 	b.w	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8005eaa:	4b43      	ldr	r3, [pc, #268]	@ (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8005eac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eb4:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d108      	bne.n	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ebc:	f107 0320 	add.w	r3, r7, #32
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7ff f9cf 	bl	8005264 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005eca:	f001 b950 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8005ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed0:	2b40      	cmp	r3, #64	@ 0x40
 8005ed2:	d108      	bne.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ed4:	f107 0314 	add.w	r3, r7, #20
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7ff fb2f 	bl	800553c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ee2:	f001 b944 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005eea:	f001 b940 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005eee:	4b32      	ldr	r3, [pc, #200]	@ (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8005ef0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005ef4:	f003 0307 	and.w	r3, r3, #7
 8005ef8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d104      	bne.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8005f00:	f7fd ffc4 	bl	8003e8c <HAL_RCC_GetPCLK2Freq>
 8005f04:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005f06:	f001 b932 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8005f0a:	4b2b      	ldr	r3, [pc, #172]	@ (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f16:	d10a      	bne.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8005f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d107      	bne.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f1e:	f107 0314 	add.w	r3, r7, #20
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7ff fb0a 	bl	800553c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f2c:	e05c      	b.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8005f2e:	4b22      	ldr	r3, [pc, #136]	@ (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f3a:	d10a      	bne.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d107      	bne.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f42:	f107 0308 	add.w	r3, r7, #8
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7ff fc64 	bl	8005814 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f50:	e04a      	b.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005f52:	4b19      	ldr	r3, [pc, #100]	@ (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0302 	and.w	r3, r3, #2
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d10c      	bne.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f60:	2b03      	cmp	r3, #3
 8005f62:	d109      	bne.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005f64:	4b14      	ldr	r3, [pc, #80]	@ (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	08db      	lsrs	r3, r3, #3
 8005f6a:	f003 0303 	and.w	r3, r3, #3
 8005f6e:	4a13      	ldr	r2, [pc, #76]	@ (8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 8005f70:	fa22 f303 	lsr.w	r3, r2, r3
 8005f74:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f76:	e037      	b.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8005f78:	4b0f      	ldr	r3, [pc, #60]	@ (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f84:	d11e      	bne.n	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8005f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d11b      	bne.n	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 8005f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 8005f8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f90:	e02a      	b.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 8005f92:	bf00      	nop
 8005f94:	40000001 	.word	0x40000001
 8005f98:	20000001 	.word	0x20000001
 8005f9c:	10000001 	.word	0x10000001
 8005fa0:	08000001 	.word	0x08000001
 8005fa4:	04000001 	.word	0x04000001
 8005fa8:	00400001 	.word	0x00400001
 8005fac:	00200001 	.word	0x00200001
 8005fb0:	00040001 	.word	0x00040001
 8005fb4:	00020001 	.word	0x00020001
 8005fb8:	44020c00 	.word	0x44020c00
 8005fbc:	03d09000 	.word	0x03d09000
 8005fc0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005fc4:	4ba3      	ldr	r3, [pc, #652]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005fc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fca:	f003 0302 	and.w	r3, r3, #2
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d106      	bne.n	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd4:	2b05      	cmp	r3, #5
 8005fd6:	d103      	bne.n	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 8005fd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fde:	e003      	b.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005fe4:	f001 b8c3 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005fe8:	f001 b8c1 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005fec:	4b99      	ldr	r3, [pc, #612]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005fee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005ff2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ff6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d104      	bne.n	8006008 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005ffe:	f7fd ff2f 	bl	8003e60 <HAL_RCC_GetPCLK1Freq>
 8006002:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006004:	f001 b8b3 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8006008:	4b92      	ldr	r3, [pc, #584]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006010:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006014:	d10a      	bne.n	800602c <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 8006016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006018:	2b08      	cmp	r3, #8
 800601a:	d107      	bne.n	800602c <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800601c:	f107 0314 	add.w	r3, r7, #20
 8006020:	4618      	mov	r0, r3
 8006022:	f7ff fa8b 	bl	800553c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	637b      	str	r3, [r7, #52]	@ 0x34
 800602a:	e03d      	b.n	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 800602c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800602e:	2b10      	cmp	r3, #16
 8006030:	d108      	bne.n	8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006032:	f107 0308 	add.w	r3, r7, #8
 8006036:	4618      	mov	r0, r3
 8006038:	f7ff fbec 	bl	8005814 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006040:	f001 b895 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006044:	4b83      	ldr	r3, [pc, #524]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0302 	and.w	r3, r3, #2
 800604c:	2b02      	cmp	r3, #2
 800604e:	d10c      	bne.n	800606a <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8006050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006052:	2b18      	cmp	r3, #24
 8006054:	d109      	bne.n	800606a <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006056:	4b7f      	ldr	r3, [pc, #508]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	08db      	lsrs	r3, r3, #3
 800605c:	f003 0303 	and.w	r3, r3, #3
 8006060:	4a7d      	ldr	r2, [pc, #500]	@ (8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8006062:	fa22 f303 	lsr.w	r3, r2, r3
 8006066:	637b      	str	r3, [r7, #52]	@ 0x34
 8006068:	e01e      	b.n	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800606a:	4b7a      	ldr	r3, [pc, #488]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006072:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006076:	d105      	bne.n	8006084 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8006078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607a:	2b20      	cmp	r3, #32
 800607c:	d102      	bne.n	8006084 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 800607e:	4b77      	ldr	r3, [pc, #476]	@ (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8006080:	637b      	str	r3, [r7, #52]	@ 0x34
 8006082:	e011      	b.n	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006084:	4b73      	ldr	r3, [pc, #460]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006086:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800608a:	f003 0302 	and.w	r3, r3, #2
 800608e:	2b02      	cmp	r3, #2
 8006090:	d106      	bne.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8006092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006094:	2b28      	cmp	r3, #40	@ 0x28
 8006096:	d103      	bne.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 8006098:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800609c:	637b      	str	r3, [r7, #52]	@ 0x34
 800609e:	e003      	b.n	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 80060a0:	2300      	movs	r3, #0
 80060a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060a4:	f001 b863 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80060a8:	f001 b861 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80060ac:	4b69      	ldr	r3, [pc, #420]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80060ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80060b2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80060b6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80060b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d104      	bne.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80060be:	f7fd fecf 	bl	8003e60 <HAL_RCC_GetPCLK1Freq>
 80060c2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80060c4:	f001 b853 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80060c8:	4b62      	ldr	r3, [pc, #392]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060d4:	d10a      	bne.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 80060d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d8:	2b40      	cmp	r3, #64	@ 0x40
 80060da:	d107      	bne.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060dc:	f107 0314 	add.w	r3, r7, #20
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7ff fa2b 	bl	800553c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80060ea:	e045      	b.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 80060ec:	4b59      	ldr	r3, [pc, #356]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060f8:	d10a      	bne.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 80060fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fc:	2b80      	cmp	r3, #128	@ 0x80
 80060fe:	d107      	bne.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006100:	f107 0308 	add.w	r3, r7, #8
 8006104:	4618      	mov	r0, r3
 8006106:	f7ff fb85 	bl	8005814 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	637b      	str	r3, [r7, #52]	@ 0x34
 800610e:	e033      	b.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006110:	4b50      	ldr	r3, [pc, #320]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0302 	and.w	r3, r3, #2
 8006118:	2b02      	cmp	r3, #2
 800611a:	d10c      	bne.n	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 800611c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006120:	d109      	bne.n	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006122:	4b4c      	ldr	r3, [pc, #304]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	08db      	lsrs	r3, r3, #3
 8006128:	f003 0303 	and.w	r3, r3, #3
 800612c:	4a4a      	ldr	r2, [pc, #296]	@ (8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 800612e:	fa22 f303 	lsr.w	r3, r2, r3
 8006132:	637b      	str	r3, [r7, #52]	@ 0x34
 8006134:	e020      	b.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8006136:	4b47      	ldr	r3, [pc, #284]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800613e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006142:	d106      	bne.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 8006144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006146:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800614a:	d102      	bne.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 800614c:	4b43      	ldr	r3, [pc, #268]	@ (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 800614e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006150:	e012      	b.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006152:	4b40      	ldr	r3, [pc, #256]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006154:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006158:	f003 0302 	and.w	r3, r3, #2
 800615c:	2b02      	cmp	r3, #2
 800615e:	d107      	bne.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006162:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006166:	d103      	bne.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 8006168:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800616c:	637b      	str	r3, [r7, #52]	@ 0x34
 800616e:	e003      	b.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 8006170:	2300      	movs	r3, #0
 8006172:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006174:	f000 bffb 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006178:	f000 bff9 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800617c:	4b35      	ldr	r3, [pc, #212]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800617e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006182:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8006186:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618a:	2b00      	cmp	r3, #0
 800618c:	d104      	bne.n	8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800618e:	f7fd fe67 	bl	8003e60 <HAL_RCC_GetPCLK1Freq>
 8006192:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006194:	f000 bfeb 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8006198:	4b2e      	ldr	r3, [pc, #184]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061a4:	d10b      	bne.n	80061be <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 80061a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061ac:	d107      	bne.n	80061be <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061ae:	f107 0314 	add.w	r3, r7, #20
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7ff f9c2 	bl	800553c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80061bc:	e047      	b.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 80061be:	4b25      	ldr	r3, [pc, #148]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061ca:	d10b      	bne.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80061cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061d2:	d107      	bne.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061d4:	f107 0308 	add.w	r3, r7, #8
 80061d8:	4618      	mov	r0, r3
 80061da:	f7ff fb1b 	bl	8005814 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80061e2:	e034      	b.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80061e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0302 	and.w	r3, r3, #2
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d10d      	bne.n	800620c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80061f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80061f6:	d109      	bne.n	800620c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80061f8:	4b16      	ldr	r3, [pc, #88]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	08db      	lsrs	r3, r3, #3
 80061fe:	f003 0303 	and.w	r3, r3, #3
 8006202:	4a15      	ldr	r2, [pc, #84]	@ (8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8006204:	fa22 f303 	lsr.w	r3, r2, r3
 8006208:	637b      	str	r3, [r7, #52]	@ 0x34
 800620a:	e020      	b.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 800620c:	4b11      	ldr	r3, [pc, #68]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006214:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006218:	d106      	bne.n	8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800621a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006220:	d102      	bne.n	8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 8006222:	4b0e      	ldr	r3, [pc, #56]	@ (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8006224:	637b      	str	r3, [r7, #52]	@ 0x34
 8006226:	e012      	b.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006228:	4b0a      	ldr	r3, [pc, #40]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800622a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800622e:	f003 0302 	and.w	r3, r3, #2
 8006232:	2b02      	cmp	r3, #2
 8006234:	d107      	bne.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8006236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006238:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800623c:	d103      	bne.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 800623e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006242:	637b      	str	r3, [r7, #52]	@ 0x34
 8006244:	e003      	b.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 8006246:	2300      	movs	r3, #0
 8006248:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800624a:	f000 bf90 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800624e:	f000 bf8e 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006252:	bf00      	nop
 8006254:	44020c00 	.word	0x44020c00
 8006258:	03d09000 	.word	0x03d09000
 800625c:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006260:	4ba5      	ldr	r3, [pc, #660]	@ (80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006262:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006266:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800626a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800626c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626e:	2b00      	cmp	r3, #0
 8006270:	d104      	bne.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006272:	f7fd fdf5 	bl	8003e60 <HAL_RCC_GetPCLK1Freq>
 8006276:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8006278:	f000 bf79 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800627c:	4b9e      	ldr	r3, [pc, #632]	@ (80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006284:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006288:	d10b      	bne.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800628a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006290:	d107      	bne.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006292:	f107 0314 	add.w	r3, r7, #20
 8006296:	4618      	mov	r0, r3
 8006298:	f7ff f950 	bl	800553c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	637b      	str	r3, [r7, #52]	@ 0x34
 80062a0:	e047      	b.n	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 80062a2:	4b95      	ldr	r3, [pc, #596]	@ (80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062ae:	d10b      	bne.n	80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 80062b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062b6:	d107      	bne.n	80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062b8:	f107 0308 	add.w	r3, r7, #8
 80062bc:	4618      	mov	r0, r3
 80062be:	f7ff faa9 	bl	8005814 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80062c6:	e034      	b.n	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80062c8:	4b8b      	ldr	r3, [pc, #556]	@ (80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0302 	and.w	r3, r3, #2
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d10d      	bne.n	80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 80062d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80062da:	d109      	bne.n	80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80062dc:	4b86      	ldr	r3, [pc, #536]	@ (80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	08db      	lsrs	r3, r3, #3
 80062e2:	f003 0303 	and.w	r3, r3, #3
 80062e6:	4a85      	ldr	r2, [pc, #532]	@ (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 80062e8:	fa22 f303 	lsr.w	r3, r2, r3
 80062ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80062ee:	e020      	b.n	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 80062f0:	4b81      	ldr	r3, [pc, #516]	@ (80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062fc:	d106      	bne.n	800630c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80062fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006300:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006304:	d102      	bne.n	800630c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 8006306:	4b7e      	ldr	r3, [pc, #504]	@ (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8006308:	637b      	str	r3, [r7, #52]	@ 0x34
 800630a:	e012      	b.n	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800630c:	4b7a      	ldr	r3, [pc, #488]	@ (80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800630e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006312:	f003 0302 	and.w	r3, r3, #2
 8006316:	2b02      	cmp	r3, #2
 8006318:	d107      	bne.n	800632a <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 800631a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800631c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006320:	d103      	bne.n	800632a <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 8006322:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006326:	637b      	str	r3, [r7, #52]	@ 0x34
 8006328:	e003      	b.n	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800632e:	f000 bf1e 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006332:	f000 bf1c 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8006336:	4b70      	ldr	r3, [pc, #448]	@ (80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006338:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800633c:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8006340:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8006342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006344:	2b00      	cmp	r3, #0
 8006346:	d104      	bne.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006348:	f7fd fd8a 	bl	8003e60 <HAL_RCC_GetPCLK1Freq>
 800634c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800634e:	f000 bf0e 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8006352:	4b69      	ldr	r3, [pc, #420]	@ (80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800635a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800635e:	d10b      	bne.n	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8006360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006362:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006366:	d107      	bne.n	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006368:	f107 0314 	add.w	r3, r7, #20
 800636c:	4618      	mov	r0, r3
 800636e:	f7ff f8e5 	bl	800553c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	637b      	str	r3, [r7, #52]	@ 0x34
 8006376:	e047      	b.n	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8006378:	4b5f      	ldr	r3, [pc, #380]	@ (80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006380:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006384:	d10b      	bne.n	800639e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8006386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800638c:	d107      	bne.n	800639e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800638e:	f107 0308 	add.w	r3, r7, #8
 8006392:	4618      	mov	r0, r3
 8006394:	f7ff fa3e 	bl	8005814 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	637b      	str	r3, [r7, #52]	@ 0x34
 800639c:	e034      	b.n	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800639e:	4b56      	ldr	r3, [pc, #344]	@ (80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0302 	and.w	r3, r3, #2
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d10d      	bne.n	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 80063aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ac:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80063b0:	d109      	bne.n	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80063b2:	4b51      	ldr	r3, [pc, #324]	@ (80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	08db      	lsrs	r3, r3, #3
 80063b8:	f003 0303 	and.w	r3, r3, #3
 80063bc:	4a4f      	ldr	r2, [pc, #316]	@ (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 80063be:	fa22 f303 	lsr.w	r3, r2, r3
 80063c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80063c4:	e020      	b.n	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 80063c6:	4b4c      	ldr	r3, [pc, #304]	@ (80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063d2:	d106      	bne.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 80063d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063da:	d102      	bne.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 80063dc:	4b48      	ldr	r3, [pc, #288]	@ (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 80063de:	637b      	str	r3, [r7, #52]	@ 0x34
 80063e0:	e012      	b.n	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 80063e2:	4b45      	ldr	r3, [pc, #276]	@ (80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80063e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063e8:	f003 0302 	and.w	r3, r3, #2
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d107      	bne.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 80063f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f2:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80063f6:	d103      	bne.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 80063f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80063fe:	e003      	b.n	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8006400:	2300      	movs	r3, #0
 8006402:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006404:	f000 beb3 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006408:	f000 beb1 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800640c:	4b3a      	ldr	r3, [pc, #232]	@ (80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800640e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006412:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006416:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641a:	2b00      	cmp	r3, #0
 800641c:	d104      	bne.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800641e:	f7fd fd4b 	bl	8003eb8 <HAL_RCC_GetPCLK3Freq>
 8006422:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006424:	f000 bea3 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8006428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800642e:	d108      	bne.n	8006442 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006430:	f107 0314 	add.w	r3, r7, #20
 8006434:	4618      	mov	r0, r3
 8006436:	f7ff f881 	bl	800553c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800643e:	f000 be96 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8006442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006444:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006448:	d108      	bne.n	800645c <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800644a:	f107 0308 	add.w	r3, r7, #8
 800644e:	4618      	mov	r0, r3
 8006450:	f7ff f9e0 	bl	8005814 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006458:	f000 be89 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800645c:	4b26      	ldr	r3, [pc, #152]	@ (80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0302 	and.w	r3, r3, #2
 8006464:	2b02      	cmp	r3, #2
 8006466:	d10d      	bne.n	8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8006468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800646e:	d109      	bne.n	8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006470:	4b21      	ldr	r3, [pc, #132]	@ (80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	08db      	lsrs	r3, r3, #3
 8006476:	f003 0303 	and.w	r3, r3, #3
 800647a:	4a20      	ldr	r2, [pc, #128]	@ (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 800647c:	fa22 f303 	lsr.w	r3, r2, r3
 8006480:	637b      	str	r3, [r7, #52]	@ 0x34
 8006482:	e020      	b.n	80064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8006484:	4b1c      	ldr	r3, [pc, #112]	@ (80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800648c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006490:	d106      	bne.n	80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8006492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006494:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006498:	d102      	bne.n	80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 800649a:	4b19      	ldr	r3, [pc, #100]	@ (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 800649c:	637b      	str	r3, [r7, #52]	@ 0x34
 800649e:	e012      	b.n	80064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80064a0:	4b15      	ldr	r3, [pc, #84]	@ (80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80064a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064a6:	f003 0302 	and.w	r3, r3, #2
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d107      	bne.n	80064be <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 80064ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80064b4:	d103      	bne.n	80064be <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 80064b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80064bc:	e003      	b.n	80064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 80064be:	2300      	movs	r3, #0
 80064c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80064c2:	f000 be54 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80064c6:	f000 be52 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80064ca:	4b0b      	ldr	r3, [pc, #44]	@ (80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80064cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80064d0:	f003 0307 	and.w	r3, r3, #7
 80064d4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80064d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d104      	bne.n	80064e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 80064dc:	f7fd fca4 	bl	8003e28 <HAL_RCC_GetHCLKFreq>
 80064e0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80064e2:	f000 be44 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80064e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d10b      	bne.n	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 80064ec:	f7fd fb70 	bl	8003bd0 <HAL_RCC_GetSysClockFreq>
 80064f0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80064f2:	f000 be3c 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80064f6:	bf00      	nop
 80064f8:	44020c00 	.word	0x44020c00
 80064fc:	03d09000 	.word	0x03d09000
 8006500:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8006504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006506:	2b02      	cmp	r3, #2
 8006508:	d108      	bne.n	800651c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800650a:	f107 0314 	add.w	r3, r7, #20
 800650e:	4618      	mov	r0, r3
 8006510:	f7ff f814 	bl	800553c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006518:	f000 be29 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800651c:	4b9f      	ldr	r3, [pc, #636]	@ (800679c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006524:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006528:	d105      	bne.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 800652a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800652c:	2b03      	cmp	r3, #3
 800652e:	d102      	bne.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 8006530:	4b9b      	ldr	r3, [pc, #620]	@ (80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 8006532:	637b      	str	r3, [r7, #52]	@ 0x34
 8006534:	e023      	b.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006536:	4b99      	ldr	r3, [pc, #612]	@ (800679c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 0302 	and.w	r3, r3, #2
 800653e:	2b02      	cmp	r3, #2
 8006540:	d10c      	bne.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8006542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006544:	2b04      	cmp	r3, #4
 8006546:	d109      	bne.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006548:	4b94      	ldr	r3, [pc, #592]	@ (800679c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	08db      	lsrs	r3, r3, #3
 800654e:	f003 0303 	and.w	r3, r3, #3
 8006552:	4a94      	ldr	r2, [pc, #592]	@ (80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8006554:	fa22 f303 	lsr.w	r3, r2, r3
 8006558:	637b      	str	r3, [r7, #52]	@ 0x34
 800655a:	e010      	b.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800655c:	4b8f      	ldr	r3, [pc, #572]	@ (800679c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006564:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006568:	d105      	bne.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 800656a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800656c:	2b05      	cmp	r3, #5
 800656e:	d102      	bne.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 8006570:	4b8d      	ldr	r3, [pc, #564]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8006572:	637b      	str	r3, [r7, #52]	@ 0x34
 8006574:	e003      	b.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 8006576:	2300      	movs	r3, #0
 8006578:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800657a:	f000 bdf8 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800657e:	f000 bdf6 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8006582:	4b86      	ldr	r3, [pc, #536]	@ (800679c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006584:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006588:	f003 0308 	and.w	r3, r3, #8
 800658c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800658e:	4b83      	ldr	r3, [pc, #524]	@ (800679c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006590:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006594:	f003 0302 	and.w	r3, r3, #2
 8006598:	2b02      	cmp	r3, #2
 800659a:	d106      	bne.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800659c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d103      	bne.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 80065a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80065a8:	e012      	b.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80065aa:	4b7c      	ldr	r3, [pc, #496]	@ (800679c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80065ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065b8:	d106      	bne.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 80065ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065bc:	2b08      	cmp	r3, #8
 80065be:	d103      	bne.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 80065c0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80065c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80065c6:	e003      	b.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80065c8:	2300      	movs	r3, #0
 80065ca:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80065cc:	f000 bdcf 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80065d0:	f000 bdcd 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80065d4:	4b71      	ldr	r3, [pc, #452]	@ (800679c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80065d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80065da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80065de:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80065e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d104      	bne.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80065e6:	f7fd fc3b 	bl	8003e60 <HAL_RCC_GetPCLK1Freq>
 80065ea:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80065ec:	f000 bdbf 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 80065f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065f6:	d108      	bne.n	800660a <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065f8:	f107 0308 	add.w	r3, r7, #8
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7ff f909 	bl	8005814 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006606:	f000 bdb2 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800660a:	4b64      	ldr	r3, [pc, #400]	@ (800679c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0302 	and.w	r3, r3, #2
 8006612:	2b02      	cmp	r3, #2
 8006614:	d10d      	bne.n	8006632 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 8006616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006618:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800661c:	d109      	bne.n	8006632 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800661e:	4b5f      	ldr	r3, [pc, #380]	@ (800679c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	08db      	lsrs	r3, r3, #3
 8006624:	f003 0303 	and.w	r3, r3, #3
 8006628:	4a5e      	ldr	r2, [pc, #376]	@ (80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 800662a:	fa22 f303 	lsr.w	r3, r2, r3
 800662e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006630:	e011      	b.n	8006656 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8006632:	4b5a      	ldr	r3, [pc, #360]	@ (800679c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800663a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800663e:	d106      	bne.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 8006640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006642:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006646:	d102      	bne.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 8006648:	4b57      	ldr	r3, [pc, #348]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 800664a:	637b      	str	r3, [r7, #52]	@ 0x34
 800664c:	e003      	b.n	8006656 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 800664e:	2300      	movs	r3, #0
 8006650:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006652:	f000 bd8c 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006656:	f000 bd8a 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800665a:	4b50      	ldr	r3, [pc, #320]	@ (800679c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800665c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006660:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006664:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006668:	2b00      	cmp	r3, #0
 800666a:	d104      	bne.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800666c:	f7fd fbf8 	bl	8003e60 <HAL_RCC_GetPCLK1Freq>
 8006670:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006672:	f000 bd7c 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8006676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006678:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800667c:	d108      	bne.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800667e:	f107 0308 	add.w	r3, r7, #8
 8006682:	4618      	mov	r0, r3
 8006684:	f7ff f8c6 	bl	8005814 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800668c:	f000 bd6f 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006690:	4b42      	ldr	r3, [pc, #264]	@ (800679c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	2b02      	cmp	r3, #2
 800669a:	d10d      	bne.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 800669c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800669e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80066a2:	d109      	bne.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80066a4:	4b3d      	ldr	r3, [pc, #244]	@ (800679c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	08db      	lsrs	r3, r3, #3
 80066aa:	f003 0303 	and.w	r3, r3, #3
 80066ae:	4a3d      	ldr	r2, [pc, #244]	@ (80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80066b0:	fa22 f303 	lsr.w	r3, r2, r3
 80066b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80066b6:	e011      	b.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80066b8:	4b38      	ldr	r3, [pc, #224]	@ (800679c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066c4:	d106      	bne.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 80066c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80066cc:	d102      	bne.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 80066ce:	4b36      	ldr	r3, [pc, #216]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80066d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80066d2:	e003      	b.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 80066d4:	2300      	movs	r3, #0
 80066d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066d8:	f000 bd49 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80066dc:	f000 bd47 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80066e0:	4b2e      	ldr	r3, [pc, #184]	@ (800679c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80066e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80066e6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80066ea:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 80066ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d104      	bne.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80066f2:	f7fd fbe1 	bl	8003eb8 <HAL_RCC_GetPCLK3Freq>
 80066f6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 80066f8:	f000 bd39 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 80066fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006702:	d108      	bne.n	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006704:	f107 0308 	add.w	r3, r7, #8
 8006708:	4618      	mov	r0, r3
 800670a:	f7ff f883 	bl	8005814 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006712:	f000 bd2c 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8006716:	4b21      	ldr	r3, [pc, #132]	@ (800679c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0302 	and.w	r3, r3, #2
 800671e:	2b02      	cmp	r3, #2
 8006720:	d10d      	bne.n	800673e <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8006722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006724:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006728:	d109      	bne.n	800673e <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800672a:	4b1c      	ldr	r3, [pc, #112]	@ (800679c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	08db      	lsrs	r3, r3, #3
 8006730:	f003 0303 	and.w	r3, r3, #3
 8006734:	4a1b      	ldr	r2, [pc, #108]	@ (80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8006736:	fa22 f303 	lsr.w	r3, r2, r3
 800673a:	637b      	str	r3, [r7, #52]	@ 0x34
 800673c:	e011      	b.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800673e:	4b17      	ldr	r3, [pc, #92]	@ (800679c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006746:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800674a:	d106      	bne.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 800674c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006752:	d102      	bne.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 8006754:	4b14      	ldr	r3, [pc, #80]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8006756:	637b      	str	r3, [r7, #52]	@ 0x34
 8006758:	e003      	b.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 800675a:	2300      	movs	r3, #0
 800675c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800675e:	f000 bd06 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006762:	f000 bd04 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8006766:	4b0d      	ldr	r3, [pc, #52]	@ (800679c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006768:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800676c:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006770:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8006772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006774:	2b00      	cmp	r3, #0
 8006776:	d104      	bne.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006778:	f7fd fb72 	bl	8003e60 <HAL_RCC_GetPCLK1Freq>
 800677c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800677e:	f000 bcf6 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8006782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006784:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006788:	d110      	bne.n	80067ac <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800678a:	f107 0308 	add.w	r3, r7, #8
 800678e:	4618      	mov	r0, r3
 8006790:	f7ff f840 	bl	8005814 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006798:	f000 bce9 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800679c:	44020c00 	.word	0x44020c00
 80067a0:	007a1200 	.word	0x007a1200
 80067a4:	03d09000 	.word	0x03d09000
 80067a8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80067ac:	4ba4      	ldr	r3, [pc, #656]	@ (8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0302 	and.w	r3, r3, #2
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d10e      	bne.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 80067b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80067be:	d10a      	bne.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80067c0:	4b9f      	ldr	r3, [pc, #636]	@ (8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	08db      	lsrs	r3, r3, #3
 80067c6:	f003 0303 	and.w	r3, r3, #3
 80067ca:	4a9e      	ldr	r2, [pc, #632]	@ (8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 80067cc:	fa22 f303 	lsr.w	r3, r2, r3
 80067d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067d2:	f000 bccc 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80067d6:	2300      	movs	r3, #0
 80067d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067da:	f000 bcc8 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 80067de:	4b98      	ldr	r3, [pc, #608]	@ (8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80067e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80067e4:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80067e8:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 80067ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d104      	bne.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80067f0:	f7fd fb62 	bl	8003eb8 <HAL_RCC_GetPCLK3Freq>
 80067f4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80067f6:	f000 bcba 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 80067fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006800:	d108      	bne.n	8006814 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006802:	f107 0308 	add.w	r3, r7, #8
 8006806:	4618      	mov	r0, r3
 8006808:	f7ff f804 	bl	8005814 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006810:	f000 bcad 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8006814:	4b8a      	ldr	r3, [pc, #552]	@ (8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0302 	and.w	r3, r3, #2
 800681c:	2b02      	cmp	r3, #2
 800681e:	d10e      	bne.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8006820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006822:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006826:	d10a      	bne.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006828:	4b85      	ldr	r3, [pc, #532]	@ (8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	08db      	lsrs	r3, r3, #3
 800682e:	f003 0303 	and.w	r3, r3, #3
 8006832:	4a84      	ldr	r2, [pc, #528]	@ (8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8006834:	fa22 f303 	lsr.w	r3, r2, r3
 8006838:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800683a:	f000 bc98 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 800683e:	2300      	movs	r3, #0
 8006840:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006842:	f000 bc94 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006846:	4b7e      	ldr	r3, [pc, #504]	@ (8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006848:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800684c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006850:	633b      	str	r3, [r7, #48]	@ 0x30
 8006852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006854:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006858:	d056      	beq.n	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 800685a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006860:	f200 808b 	bhi.w	800697a <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006866:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800686a:	d03e      	beq.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 800686c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006872:	f200 8082 	bhi.w	800697a <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006878:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800687c:	d027      	beq.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 800687e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006880:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006884:	d879      	bhi.n	800697a <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006888:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800688c:	d017      	beq.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 800688e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006890:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006894:	d871      	bhi.n	800697a <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006898:	2b00      	cmp	r3, #0
 800689a:	d004      	beq.n	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 800689c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068a2:	d004      	beq.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 80068a4:	e069      	b.n	800697a <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80068a6:	f7fd fb07 	bl	8003eb8 <HAL_RCC_GetPCLK3Freq>
 80068aa:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80068ac:	e068      	b.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068ae:	f107 0314 	add.w	r3, r7, #20
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7fe fe42 	bl	800553c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80068bc:	e060      	b.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068be:	f107 0308 	add.w	r3, r7, #8
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7fe ffa6 	bl	8005814 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80068cc:	e058      	b.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80068ce:	4b5c      	ldr	r3, [pc, #368]	@ (8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80068d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068d4:	f003 0302 	and.w	r3, r3, #2
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d103      	bne.n	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 80068dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068e0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80068e2:	e04d      	b.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 80068e4:	2300      	movs	r3, #0
 80068e6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80068e8:	e04a      	b.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80068ea:	4b55      	ldr	r3, [pc, #340]	@ (8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80068ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068f8:	d103      	bne.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 80068fa:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80068fe:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006900:	e03e      	b.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8006902:	2300      	movs	r3, #0
 8006904:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006906:	e03b      	b.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006908:	4b4d      	ldr	r3, [pc, #308]	@ (8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800690a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800690e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006912:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006914:	4b4a      	ldr	r3, [pc, #296]	@ (8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0302 	and.w	r3, r3, #2
 800691c:	2b02      	cmp	r3, #2
 800691e:	d10c      	bne.n	800693a <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 8006920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006922:	2b00      	cmp	r3, #0
 8006924:	d109      	bne.n	800693a <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006926:	4b46      	ldr	r3, [pc, #280]	@ (8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	08db      	lsrs	r3, r3, #3
 800692c:	f003 0303 	and.w	r3, r3, #3
 8006930:	4a44      	ldr	r2, [pc, #272]	@ (8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8006932:	fa22 f303 	lsr.w	r3, r2, r3
 8006936:	637b      	str	r3, [r7, #52]	@ 0x34
 8006938:	e01e      	b.n	8006978 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800693a:	4b41      	ldr	r3, [pc, #260]	@ (8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006942:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006946:	d106      	bne.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800694a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800694e:	d102      	bne.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006950:	4b3d      	ldr	r3, [pc, #244]	@ (8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8006952:	637b      	str	r3, [r7, #52]	@ 0x34
 8006954:	e010      	b.n	8006978 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006956:	4b3a      	ldr	r3, [pc, #232]	@ (8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800695e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006962:	d106      	bne.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 8006964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006966:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800696a:	d102      	bne.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800696c:	4b37      	ldr	r3, [pc, #220]	@ (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 800696e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006970:	e002      	b.n	8006978 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006972:	2300      	movs	r3, #0
 8006974:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006976:	e003      	b.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8006978:	e002      	b.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 800697a:	2300      	movs	r3, #0
 800697c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800697e:	bf00      	nop
          }
        }
        break;
 8006980:	e3f5      	b.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006982:	4b2f      	ldr	r3, [pc, #188]	@ (8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006984:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006988:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800698c:	633b      	str	r3, [r7, #48]	@ 0x30
 800698e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006990:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006994:	d05f      	beq.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 8006996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006998:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800699c:	f200 8094 	bhi.w	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80069a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069a6:	d03f      	beq.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 80069a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069ae:	f200 808b 	bhi.w	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80069b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80069b8:	d028      	beq.n	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 80069ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80069c0:	f200 8082 	bhi.w	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80069c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069ca:	d017      	beq.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 80069cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069d2:	d879      	bhi.n	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80069d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d004      	beq.n	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 80069da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069e0:	d004      	beq.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 80069e2:	e071      	b.n	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80069e4:	f7fd fa3c 	bl	8003e60 <HAL_RCC_GetPCLK1Freq>
 80069e8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80069ea:	e070      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069ec:	f107 0314 	add.w	r3, r7, #20
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7fe fda3 	bl	800553c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80069fa:	e068      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069fc:	f107 0308 	add.w	r3, r7, #8
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7fe ff07 	bl	8005814 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006a0a:	e060      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006a0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a12:	f003 0302 	and.w	r3, r3, #2
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d103      	bne.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 8006a1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a1e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006a20:	e055      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 8006a22:	2300      	movs	r3, #0
 8006a24:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006a26:	e052      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006a28:	4b05      	ldr	r3, [pc, #20]	@ (8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006a2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a36:	d10b      	bne.n	8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 8006a38:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006a3c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006a3e:	e046      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8006a40:	44020c00 	.word	0x44020c00
 8006a44:	03d09000 	.word	0x03d09000
 8006a48:	003d0900 	.word	0x003d0900
 8006a4c:	007a1200 	.word	0x007a1200
              frequency = 0;
 8006a50:	2300      	movs	r3, #0
 8006a52:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006a54:	e03b      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a56:	4bae      	ldr	r3, [pc, #696]	@ (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006a58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a5c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006a60:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a62:	4bab      	ldr	r3, [pc, #684]	@ (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0302 	and.w	r3, r3, #2
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d10c      	bne.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 8006a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d109      	bne.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a74:	4ba6      	ldr	r3, [pc, #664]	@ (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	08db      	lsrs	r3, r3, #3
 8006a7a:	f003 0303 	and.w	r3, r3, #3
 8006a7e:	4aa5      	ldr	r2, [pc, #660]	@ (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8006a80:	fa22 f303 	lsr.w	r3, r2, r3
 8006a84:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a86:	e01e      	b.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a88:	4ba1      	ldr	r3, [pc, #644]	@ (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a94:	d106      	bne.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 8006a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a9c:	d102      	bne.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006a9e:	4b9e      	ldr	r3, [pc, #632]	@ (8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8006aa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aa2:	e010      	b.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006aa4:	4b9a      	ldr	r3, [pc, #616]	@ (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ab0:	d106      	bne.n	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 8006ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ab4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ab8:	d102      	bne.n	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006aba:	4b98      	ldr	r3, [pc, #608]	@ (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8006abc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006abe:	e002      	b.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006ac4:	e003      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8006ac6:	e002      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006acc:	bf00      	nop
          }
        }
        break;
 8006ace:	e34e      	b.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006ad0:	4b8f      	ldr	r3, [pc, #572]	@ (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006ad2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006ad6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ada:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8006adc:	4b8c      	ldr	r3, [pc, #560]	@ (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ae4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ae8:	d105      	bne.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 8006aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d102      	bne.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 8006af0:	4b8a      	ldr	r3, [pc, #552]	@ (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8006af2:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8006af4:	e33b      	b.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8006af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006afc:	d107      	bne.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006afe:	f107 0320 	add.w	r3, r7, #32
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fe fbae 	bl	8005264 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b0c:	e32f      	b.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8006b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b14:	d107      	bne.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b16:	f107 0314 	add.w	r3, r7, #20
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7fe fd0e 	bl	800553c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b24:	e323      	b.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8006b26:	2300      	movs	r3, #0
 8006b28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b2a:	e320      	b.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006b2c:	4b78      	ldr	r3, [pc, #480]	@ (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b32:	f003 0307 	and.w	r3, r3, #7
 8006b36:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b3a:	2b04      	cmp	r3, #4
 8006b3c:	d860      	bhi.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 8006b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8006b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b44:	08006b59 	.word	0x08006b59
 8006b48:	08006b69 	.word	0x08006b69
 8006b4c:	08006b79 	.word	0x08006b79
 8006b50:	08006b89 	.word	0x08006b89
 8006b54:	08006b8f 	.word	0x08006b8f
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b58:	f107 0320 	add.w	r3, r7, #32
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7fe fb81 	bl	8005264 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b64:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006b66:	e04e      	b.n	8006c06 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b68:	f107 0314 	add.w	r3, r7, #20
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7fe fce5 	bl	800553c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006b76:	e046      	b.n	8006c06 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b78:	f107 0308 	add.w	r3, r7, #8
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7fe fe49 	bl	8005814 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006b86:	e03e      	b.n	8006c06 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006b88:	4b65      	ldr	r3, [pc, #404]	@ (8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8006b8a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006b8c:	e03b      	b.n	8006c06 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b8e:	4b60      	ldr	r3, [pc, #384]	@ (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006b90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b94:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006b98:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b9a:	4b5d      	ldr	r3, [pc, #372]	@ (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d10c      	bne.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 8006ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d109      	bne.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006bac:	4b58      	ldr	r3, [pc, #352]	@ (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	08db      	lsrs	r3, r3, #3
 8006bb2:	f003 0303 	and.w	r3, r3, #3
 8006bb6:	4a57      	ldr	r2, [pc, #348]	@ (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8006bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bbe:	e01e      	b.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006bc0:	4b53      	ldr	r3, [pc, #332]	@ (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bcc:	d106      	bne.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 8006bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bd4:	d102      	bne.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006bd6:	4b50      	ldr	r3, [pc, #320]	@ (8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8006bd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bda:	e010      	b.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006bdc:	4b4c      	ldr	r3, [pc, #304]	@ (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006be4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006be8:	d106      	bne.n	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 8006bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bf0:	d102      	bne.n	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006bf2:	4b4a      	ldr	r3, [pc, #296]	@ (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8006bf4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bf6:	e002      	b.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006bfc:	e003      	b.n	8006c06 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8006bfe:	e002      	b.n	8006c06 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 8006c00:	2300      	movs	r3, #0
 8006c02:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006c04:	bf00      	nop
          }
        }
        break;
 8006c06:	e2b2      	b.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006c08:	4b41      	ldr	r3, [pc, #260]	@ (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c12:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c16:	2b20      	cmp	r3, #32
 8006c18:	f200 80a4 	bhi.w	8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 8006c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 8006c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c22:	bf00      	nop
 8006c24:	08006ca9 	.word	0x08006ca9
 8006c28:	08006d65 	.word	0x08006d65
 8006c2c:	08006d65 	.word	0x08006d65
 8006c30:	08006d65 	.word	0x08006d65
 8006c34:	08006d65 	.word	0x08006d65
 8006c38:	08006d65 	.word	0x08006d65
 8006c3c:	08006d65 	.word	0x08006d65
 8006c40:	08006d65 	.word	0x08006d65
 8006c44:	08006cb9 	.word	0x08006cb9
 8006c48:	08006d65 	.word	0x08006d65
 8006c4c:	08006d65 	.word	0x08006d65
 8006c50:	08006d65 	.word	0x08006d65
 8006c54:	08006d65 	.word	0x08006d65
 8006c58:	08006d65 	.word	0x08006d65
 8006c5c:	08006d65 	.word	0x08006d65
 8006c60:	08006d65 	.word	0x08006d65
 8006c64:	08006cc9 	.word	0x08006cc9
 8006c68:	08006d65 	.word	0x08006d65
 8006c6c:	08006d65 	.word	0x08006d65
 8006c70:	08006d65 	.word	0x08006d65
 8006c74:	08006d65 	.word	0x08006d65
 8006c78:	08006d65 	.word	0x08006d65
 8006c7c:	08006d65 	.word	0x08006d65
 8006c80:	08006d65 	.word	0x08006d65
 8006c84:	08006cd9 	.word	0x08006cd9
 8006c88:	08006d65 	.word	0x08006d65
 8006c8c:	08006d65 	.word	0x08006d65
 8006c90:	08006d65 	.word	0x08006d65
 8006c94:	08006d65 	.word	0x08006d65
 8006c98:	08006d65 	.word	0x08006d65
 8006c9c:	08006d65 	.word	0x08006d65
 8006ca0:	08006d65 	.word	0x08006d65
 8006ca4:	08006cdf 	.word	0x08006cdf
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ca8:	f107 0320 	add.w	r3, r7, #32
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7fe fad9 	bl	8005264 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006cb6:	e058      	b.n	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cb8:	f107 0314 	add.w	r3, r7, #20
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f7fe fc3d 	bl	800553c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006cc6:	e050      	b.n	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cc8:	f107 0308 	add.w	r3, r7, #8
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7fe fda1 	bl	8005814 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006cd6:	e048      	b.n	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006cd8:	4b11      	ldr	r3, [pc, #68]	@ (8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8006cda:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006cdc:	e045      	b.n	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006cde:	4b0c      	ldr	r3, [pc, #48]	@ (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006ce0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006ce4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006cea:	4b09      	ldr	r3, [pc, #36]	@ (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0302 	and.w	r3, r3, #2
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d116      	bne.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 8006cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d113      	bne.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006cfc:	4b04      	ldr	r3, [pc, #16]	@ (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	08db      	lsrs	r3, r3, #3
 8006d02:	f003 0303 	and.w	r3, r3, #3
 8006d06:	4a03      	ldr	r2, [pc, #12]	@ (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8006d08:	fa22 f303 	lsr.w	r3, r2, r3
 8006d0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d0e:	e028      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8006d10:	44020c00 	.word	0x44020c00
 8006d14:	03d09000 	.word	0x03d09000
 8006d18:	003d0900 	.word	0x003d0900
 8006d1c:	007a1200 	.word	0x007a1200
 8006d20:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d24:	4b95      	ldr	r3, [pc, #596]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d30:	d106      	bne.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 8006d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d38:	d102      	bne.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006d3a:	4b91      	ldr	r3, [pc, #580]	@ (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8006d3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d3e:	e010      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d40:	4b8e      	ldr	r3, [pc, #568]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d4c:	d106      	bne.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 8006d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d54:	d102      	bne.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006d56:	4b8b      	ldr	r3, [pc, #556]	@ (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8006d58:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d5a:	e002      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006d60:	e003      	b.n	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8006d62:	e002      	b.n	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 8006d64:	2300      	movs	r3, #0
 8006d66:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006d68:	bf00      	nop
          }
        }
        break;
 8006d6a:	e200      	b.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006d6c:	4b83      	ldr	r3, [pc, #524]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d72:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006d76:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d7e:	d031      	beq.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8006d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d86:	d866      	bhi.n	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8006d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d8c:	d027      	beq.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d90:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d92:	d860      	bhi.n	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8006d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d96:	2b80      	cmp	r3, #128	@ 0x80
 8006d98:	d019      	beq.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 8006d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9c:	2b80      	cmp	r3, #128	@ 0x80
 8006d9e:	d85a      	bhi.n	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8006da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d003      	beq.n	8006dae <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 8006da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da8:	2b40      	cmp	r3, #64	@ 0x40
 8006daa:	d008      	beq.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 8006dac:	e053      	b.n	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006dae:	f107 0320 	add.w	r3, r7, #32
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7fe fa56 	bl	8005264 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006dbc:	e04e      	b.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dbe:	f107 0314 	add.w	r3, r7, #20
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7fe fbba 	bl	800553c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006dcc:	e046      	b.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dce:	f107 0308 	add.w	r3, r7, #8
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7fe fd1e 	bl	8005814 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006ddc:	e03e      	b.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006dde:	4b6a      	ldr	r3, [pc, #424]	@ (8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 8006de0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006de2:	e03b      	b.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006de4:	4b65      	ldr	r3, [pc, #404]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006de6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006dea:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006dee:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006df0:	4b62      	ldr	r3, [pc, #392]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0302 	and.w	r3, r3, #2
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d10c      	bne.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8006dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d109      	bne.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e02:	4b5e      	ldr	r3, [pc, #376]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	08db      	lsrs	r3, r3, #3
 8006e08:	f003 0303 	and.w	r3, r3, #3
 8006e0c:	4a5f      	ldr	r2, [pc, #380]	@ (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8006e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e12:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e14:	e01e      	b.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e16:	4b59      	ldr	r3, [pc, #356]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e22:	d106      	bne.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8006e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e2a:	d102      	bne.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006e2c:	4b54      	ldr	r3, [pc, #336]	@ (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8006e2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e30:	e010      	b.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e32:	4b52      	ldr	r3, [pc, #328]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e3e:	d106      	bne.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 8006e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e46:	d102      	bne.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006e48:	4b4e      	ldr	r3, [pc, #312]	@ (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8006e4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e4c:	e002      	b.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006e52:	e003      	b.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 8006e54:	e002      	b.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 8006e56:	2300      	movs	r3, #0
 8006e58:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006e5a:	bf00      	nop
          }
        }
        break;
 8006e5c:	e187      	b.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8006e5e:	4b47      	ldr	r3, [pc, #284]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e64:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8006e68:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8006e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d103      	bne.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8006e70:	f7fd f80c 	bl	8003e8c <HAL_RCC_GetPCLK2Freq>
 8006e74:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8006e76:	e17a      	b.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8006e78:	4b40      	ldr	r3, [pc, #256]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e84:	d10b      	bne.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8006e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e8c:	d107      	bne.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e8e:	f107 0314 	add.w	r3, r7, #20
 8006e92:	4618      	mov	r0, r3
 8006e94:	f7fe fb52 	bl	800553c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e9c:	e045      	b.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8006e9e:	4b37      	ldr	r3, [pc, #220]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ea6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006eaa:	d10b      	bne.n	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 8006eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eb2:	d107      	bne.n	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006eb4:	f107 0308 	add.w	r3, r7, #8
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7fe fcab 	bl	8005814 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ec2:	e032      	b.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8006ec4:	4b2d      	ldr	r3, [pc, #180]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0302 	and.w	r3, r3, #2
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d10d      	bne.n	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 8006ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006ed6:	d109      	bne.n	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ed8:	4b28      	ldr	r3, [pc, #160]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	08db      	lsrs	r3, r3, #3
 8006ede:	f003 0303 	and.w	r3, r3, #3
 8006ee2:	4a2a      	ldr	r2, [pc, #168]	@ (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8006ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ee8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eea:	e01e      	b.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8006eec:	4b23      	ldr	r3, [pc, #140]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ef4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ef8:	d106      	bne.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 8006efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006efc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f00:	d102      	bne.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 8006f02:	4b1f      	ldr	r3, [pc, #124]	@ (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8006f04:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f06:	e010      	b.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8006f08:	4b1c      	ldr	r3, [pc, #112]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f14:	d106      	bne.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 8006f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f18:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006f1c:	d102      	bne.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 8006f1e:	4b19      	ldr	r3, [pc, #100]	@ (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8006f20:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f22:	e002      	b.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 8006f24:	2300      	movs	r3, #0
 8006f26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f28:	e121      	b.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006f2a:	e120      	b.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006f2c:	4b13      	ldr	r3, [pc, #76]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006f2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006f32:	f003 0303 	and.w	r3, r3, #3
 8006f36:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3a:	2b03      	cmp	r3, #3
 8006f3c:	d861      	bhi.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 8006f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 8006f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f44:	08006f55 	.word	0x08006f55
 8006f48:	08006f5d 	.word	0x08006f5d
 8006f4c:	08006f6d 	.word	0x08006f6d
 8006f50:	08006f91 	.word	0x08006f91

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8006f54:	f7fc ff68 	bl	8003e28 <HAL_RCC_GetHCLKFreq>
 8006f58:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006f5a:	e055      	b.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f5c:	f107 0320 	add.w	r3, r7, #32
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7fe f97f 	bl	8005264 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f68:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f6a:	e04d      	b.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f6c:	f107 0314 	add.w	r3, r7, #20
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7fe fae3 	bl	800553c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f7a:	e045      	b.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8006f7c:	44020c00 	.word	0x44020c00
 8006f80:	003d0900 	.word	0x003d0900
 8006f84:	007a1200 	.word	0x007a1200
 8006f88:	00bb8000 	.word	0x00bb8000
 8006f8c:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f90:	4b79      	ldr	r3, [pc, #484]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006f92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f96:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f9c:	4b76      	ldr	r3, [pc, #472]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0302 	and.w	r3, r3, #2
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d10c      	bne.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 8006fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d109      	bne.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006fae:	4b72      	ldr	r3, [pc, #456]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	08db      	lsrs	r3, r3, #3
 8006fb4:	f003 0303 	and.w	r3, r3, #3
 8006fb8:	4a70      	ldr	r2, [pc, #448]	@ (800717c <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 8006fba:	fa22 f303 	lsr.w	r3, r2, r3
 8006fbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fc0:	e01e      	b.n	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006fc2:	4b6d      	ldr	r3, [pc, #436]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006fca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fce:	d106      	bne.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 8006fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fd6:	d102      	bne.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006fd8:	4b69      	ldr	r3, [pc, #420]	@ (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 8006fda:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fdc:	e010      	b.n	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006fde:	4b66      	ldr	r3, [pc, #408]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fe6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fea:	d106      	bne.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8006fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ff2:	d102      	bne.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006ff4:	4b63      	ldr	r3, [pc, #396]	@ (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 8006ff6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ff8:	e002      	b.n	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006ffe:	e003      	b.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8007000:	e002      	b.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 8007002:	2300      	movs	r3, #0
 8007004:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007006:	bf00      	nop
          }
        }
        break;
 8007008:	e0b1      	b.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800700a:	4b5b      	ldr	r3, [pc, #364]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800700c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007010:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007014:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8007016:	4b58      	ldr	r3, [pc, #352]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007018:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800701c:	f003 0302 	and.w	r3, r3, #2
 8007020:	2b02      	cmp	r3, #2
 8007022:	d106      	bne.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 8007024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007026:	2b00      	cmp	r3, #0
 8007028:	d103      	bne.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 800702a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800702e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007030:	e01f      	b.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8007032:	4b51      	ldr	r3, [pc, #324]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007034:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007038:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800703c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007040:	d106      	bne.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 8007042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007044:	2b40      	cmp	r3, #64	@ 0x40
 8007046:	d103      	bne.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 8007048:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800704c:	637b      	str	r3, [r7, #52]	@ 0x34
 800704e:	e010      	b.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8007050:	4b49      	ldr	r3, [pc, #292]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007058:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800705c:	d106      	bne.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 800705e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007060:	2b80      	cmp	r3, #128	@ 0x80
 8007062:	d103      	bne.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 8007064:	f248 0312 	movw	r3, #32786	@ 0x8012
 8007068:	637b      	str	r3, [r7, #52]	@ 0x34
 800706a:	e002      	b.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800706c:	2300      	movs	r3, #0
 800706e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8007070:	e07d      	b.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007072:	e07c      	b.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007074:	4b40      	ldr	r3, [pc, #256]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007076:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800707a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800707e:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007080:	4b3d      	ldr	r3, [pc, #244]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007088:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800708c:	d105      	bne.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 800708e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007090:	2b00      	cmp	r3, #0
 8007092:	d102      	bne.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 8007094:	4b3c      	ldr	r3, [pc, #240]	@ (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8007096:	637b      	str	r3, [r7, #52]	@ 0x34
 8007098:	e031      	b.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800709a:	4b37      	ldr	r3, [pc, #220]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070a6:	d10a      	bne.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 80070a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070aa:	2b10      	cmp	r3, #16
 80070ac:	d107      	bne.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070ae:	f107 0320 	add.w	r3, r7, #32
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7fe f8d6 	bl	8005264 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80070bc:	e01f      	b.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 80070be:	4b2e      	ldr	r3, [pc, #184]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80070c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070c4:	f003 0302 	and.w	r3, r3, #2
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d106      	bne.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 80070cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ce:	2b20      	cmp	r3, #32
 80070d0:	d103      	bne.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 80070d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80070d8:	e011      	b.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 80070da:	4b27      	ldr	r3, [pc, #156]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80070dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070e8:	d106      	bne.n	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 80070ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ec:	2b30      	cmp	r3, #48	@ 0x30
 80070ee:	d103      	bne.n	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 80070f0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80070f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80070f6:	e002      	b.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 80070f8:	2300      	movs	r3, #0
 80070fa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80070fc:	e037      	b.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80070fe:	e036      	b.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8007100:	4b1d      	ldr	r3, [pc, #116]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007102:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007106:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800710a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800710c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710e:	2b10      	cmp	r3, #16
 8007110:	d107      	bne.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007112:	f107 0320 	add.w	r3, r7, #32
 8007116:	4618      	mov	r0, r3
 8007118:	f7fe f8a4 	bl	8005264 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800711c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007120:	e025      	b.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8007122:	4b15      	ldr	r3, [pc, #84]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800712a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800712e:	d10a      	bne.n	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 8007130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007132:	2b20      	cmp	r3, #32
 8007134:	d107      	bne.n	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007136:	f107 0308 	add.w	r3, r7, #8
 800713a:	4618      	mov	r0, r3
 800713c:	f7fe fb6a 	bl	8005814 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	637b      	str	r3, [r7, #52]	@ 0x34
 8007144:	e00f      	b.n	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8007146:	4b0c      	ldr	r3, [pc, #48]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800714e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007152:	d105      	bne.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 8007154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007156:	2b30      	cmp	r3, #48	@ 0x30
 8007158:	d102      	bne.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 800715a:	4b0b      	ldr	r3, [pc, #44]	@ (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 800715c:	637b      	str	r3, [r7, #52]	@ 0x34
 800715e:	e002      	b.n	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8007160:	2300      	movs	r3, #0
 8007162:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8007164:	e003      	b.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007166:	e002      	b.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 8007168:	2300      	movs	r3, #0
 800716a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800716c:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800716e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007170:	4618      	mov	r0, r3
 8007172:	373c      	adds	r7, #60	@ 0x3c
 8007174:	46bd      	mov	sp, r7
 8007176:	bd90      	pop	{r4, r7, pc}
 8007178:	44020c00 	.word	0x44020c00
 800717c:	03d09000 	.word	0x03d09000
 8007180:	003d0900 	.word	0x003d0900
 8007184:	007a1200 	.word	0x007a1200
 8007188:	02dc6c00 	.word	0x02dc6c00

0800718c <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8007194:	4b48      	ldr	r3, [pc, #288]	@ (80072b8 <RCCEx_PLL2_Config+0x12c>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a47      	ldr	r2, [pc, #284]	@ (80072b8 <RCCEx_PLL2_Config+0x12c>)
 800719a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800719e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80071a0:	f7fa fca6 	bl	8001af0 <HAL_GetTick>
 80071a4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80071a6:	e008      	b.n	80071ba <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80071a8:	f7fa fca2 	bl	8001af0 <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d901      	bls.n	80071ba <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e07a      	b.n	80072b0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80071ba:	4b3f      	ldr	r3, [pc, #252]	@ (80072b8 <RCCEx_PLL2_Config+0x12c>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1f0      	bne.n	80071a8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80071c6:	4b3c      	ldr	r3, [pc, #240]	@ (80072b8 <RCCEx_PLL2_Config+0x12c>)
 80071c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ca:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80071ce:	f023 0303 	bic.w	r3, r3, #3
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	6811      	ldr	r1, [r2, #0]
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	6852      	ldr	r2, [r2, #4]
 80071da:	0212      	lsls	r2, r2, #8
 80071dc:	430a      	orrs	r2, r1
 80071de:	4936      	ldr	r1, [pc, #216]	@ (80072b8 <RCCEx_PLL2_Config+0x12c>)
 80071e0:	4313      	orrs	r3, r2
 80071e2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	3b01      	subs	r3, #1
 80071ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	3b01      	subs	r3, #1
 80071f4:	025b      	lsls	r3, r3, #9
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	431a      	orrs	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	3b01      	subs	r3, #1
 8007200:	041b      	lsls	r3, r3, #16
 8007202:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007206:	431a      	orrs	r2, r3
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	695b      	ldr	r3, [r3, #20]
 800720c:	3b01      	subs	r3, #1
 800720e:	061b      	lsls	r3, r3, #24
 8007210:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007214:	4928      	ldr	r1, [pc, #160]	@ (80072b8 <RCCEx_PLL2_Config+0x12c>)
 8007216:	4313      	orrs	r3, r2
 8007218:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800721a:	4b27      	ldr	r3, [pc, #156]	@ (80072b8 <RCCEx_PLL2_Config+0x12c>)
 800721c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800721e:	f023 020c 	bic.w	r2, r3, #12
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	4924      	ldr	r1, [pc, #144]	@ (80072b8 <RCCEx_PLL2_Config+0x12c>)
 8007228:	4313      	orrs	r3, r2
 800722a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800722c:	4b22      	ldr	r3, [pc, #136]	@ (80072b8 <RCCEx_PLL2_Config+0x12c>)
 800722e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007230:	f023 0220 	bic.w	r2, r3, #32
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	69db      	ldr	r3, [r3, #28]
 8007238:	491f      	ldr	r1, [pc, #124]	@ (80072b8 <RCCEx_PLL2_Config+0x12c>)
 800723a:	4313      	orrs	r3, r2
 800723c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800723e:	4b1e      	ldr	r3, [pc, #120]	@ (80072b8 <RCCEx_PLL2_Config+0x12c>)
 8007240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007246:	491c      	ldr	r1, [pc, #112]	@ (80072b8 <RCCEx_PLL2_Config+0x12c>)
 8007248:	4313      	orrs	r3, r2
 800724a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800724c:	4b1a      	ldr	r3, [pc, #104]	@ (80072b8 <RCCEx_PLL2_Config+0x12c>)
 800724e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007250:	4a19      	ldr	r2, [pc, #100]	@ (80072b8 <RCCEx_PLL2_Config+0x12c>)
 8007252:	f023 0310 	bic.w	r3, r3, #16
 8007256:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8007258:	4b17      	ldr	r3, [pc, #92]	@ (80072b8 <RCCEx_PLL2_Config+0x12c>)
 800725a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800725c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007260:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	6a12      	ldr	r2, [r2, #32]
 8007268:	00d2      	lsls	r2, r2, #3
 800726a:	4913      	ldr	r1, [pc, #76]	@ (80072b8 <RCCEx_PLL2_Config+0x12c>)
 800726c:	4313      	orrs	r3, r2
 800726e:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8007270:	4b11      	ldr	r3, [pc, #68]	@ (80072b8 <RCCEx_PLL2_Config+0x12c>)
 8007272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007274:	4a10      	ldr	r2, [pc, #64]	@ (80072b8 <RCCEx_PLL2_Config+0x12c>)
 8007276:	f043 0310 	orr.w	r3, r3, #16
 800727a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800727c:	4b0e      	ldr	r3, [pc, #56]	@ (80072b8 <RCCEx_PLL2_Config+0x12c>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a0d      	ldr	r2, [pc, #52]	@ (80072b8 <RCCEx_PLL2_Config+0x12c>)
 8007282:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007286:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007288:	f7fa fc32 	bl	8001af0 <HAL_GetTick>
 800728c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800728e:	e008      	b.n	80072a2 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007290:	f7fa fc2e 	bl	8001af0 <HAL_GetTick>
 8007294:	4602      	mov	r2, r0
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	2b02      	cmp	r3, #2
 800729c:	d901      	bls.n	80072a2 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e006      	b.n	80072b0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80072a2:	4b05      	ldr	r3, [pc, #20]	@ (80072b8 <RCCEx_PLL2_Config+0x12c>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d0f0      	beq.n	8007290 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80072ae:	2300      	movs	r3, #0

}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	44020c00 	.word	0x44020c00

080072bc <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 80072c4:	4b48      	ldr	r3, [pc, #288]	@ (80073e8 <RCCEx_PLL3_Config+0x12c>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a47      	ldr	r2, [pc, #284]	@ (80073e8 <RCCEx_PLL3_Config+0x12c>)
 80072ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80072ce:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80072d0:	f7fa fc0e 	bl	8001af0 <HAL_GetTick>
 80072d4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80072d6:	e008      	b.n	80072ea <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80072d8:	f7fa fc0a 	bl	8001af0 <HAL_GetTick>
 80072dc:	4602      	mov	r2, r0
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d901      	bls.n	80072ea <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e07a      	b.n	80073e0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80072ea:	4b3f      	ldr	r3, [pc, #252]	@ (80073e8 <RCCEx_PLL3_Config+0x12c>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1f0      	bne.n	80072d8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80072f6:	4b3c      	ldr	r3, [pc, #240]	@ (80073e8 <RCCEx_PLL3_Config+0x12c>)
 80072f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072fa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80072fe:	f023 0303 	bic.w	r3, r3, #3
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	6811      	ldr	r1, [r2, #0]
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	6852      	ldr	r2, [r2, #4]
 800730a:	0212      	lsls	r2, r2, #8
 800730c:	430a      	orrs	r2, r1
 800730e:	4936      	ldr	r1, [pc, #216]	@ (80073e8 <RCCEx_PLL3_Config+0x12c>)
 8007310:	4313      	orrs	r3, r2
 8007312:	630b      	str	r3, [r1, #48]	@ 0x30
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	3b01      	subs	r3, #1
 800731a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	3b01      	subs	r3, #1
 8007324:	025b      	lsls	r3, r3, #9
 8007326:	b29b      	uxth	r3, r3
 8007328:	431a      	orrs	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	3b01      	subs	r3, #1
 8007330:	041b      	lsls	r3, r3, #16
 8007332:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007336:	431a      	orrs	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	695b      	ldr	r3, [r3, #20]
 800733c:	3b01      	subs	r3, #1
 800733e:	061b      	lsls	r3, r3, #24
 8007340:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007344:	4928      	ldr	r1, [pc, #160]	@ (80073e8 <RCCEx_PLL3_Config+0x12c>)
 8007346:	4313      	orrs	r3, r2
 8007348:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800734a:	4b27      	ldr	r3, [pc, #156]	@ (80073e8 <RCCEx_PLL3_Config+0x12c>)
 800734c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800734e:	f023 020c 	bic.w	r2, r3, #12
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	4924      	ldr	r1, [pc, #144]	@ (80073e8 <RCCEx_PLL3_Config+0x12c>)
 8007358:	4313      	orrs	r3, r2
 800735a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800735c:	4b22      	ldr	r3, [pc, #136]	@ (80073e8 <RCCEx_PLL3_Config+0x12c>)
 800735e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007360:	f023 0220 	bic.w	r2, r3, #32
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	69db      	ldr	r3, [r3, #28]
 8007368:	491f      	ldr	r1, [pc, #124]	@ (80073e8 <RCCEx_PLL3_Config+0x12c>)
 800736a:	4313      	orrs	r3, r2
 800736c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800736e:	4b1e      	ldr	r3, [pc, #120]	@ (80073e8 <RCCEx_PLL3_Config+0x12c>)
 8007370:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007376:	491c      	ldr	r1, [pc, #112]	@ (80073e8 <RCCEx_PLL3_Config+0x12c>)
 8007378:	4313      	orrs	r3, r2
 800737a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800737c:	4b1a      	ldr	r3, [pc, #104]	@ (80073e8 <RCCEx_PLL3_Config+0x12c>)
 800737e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007380:	4a19      	ldr	r2, [pc, #100]	@ (80073e8 <RCCEx_PLL3_Config+0x12c>)
 8007382:	f023 0310 	bic.w	r3, r3, #16
 8007386:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8007388:	4b17      	ldr	r3, [pc, #92]	@ (80073e8 <RCCEx_PLL3_Config+0x12c>)
 800738a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800738c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007390:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	6a12      	ldr	r2, [r2, #32]
 8007398:	00d2      	lsls	r2, r2, #3
 800739a:	4913      	ldr	r1, [pc, #76]	@ (80073e8 <RCCEx_PLL3_Config+0x12c>)
 800739c:	4313      	orrs	r3, r2
 800739e:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 80073a0:	4b11      	ldr	r3, [pc, #68]	@ (80073e8 <RCCEx_PLL3_Config+0x12c>)
 80073a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073a4:	4a10      	ldr	r2, [pc, #64]	@ (80073e8 <RCCEx_PLL3_Config+0x12c>)
 80073a6:	f043 0310 	orr.w	r3, r3, #16
 80073aa:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 80073ac:	4b0e      	ldr	r3, [pc, #56]	@ (80073e8 <RCCEx_PLL3_Config+0x12c>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a0d      	ldr	r2, [pc, #52]	@ (80073e8 <RCCEx_PLL3_Config+0x12c>)
 80073b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073b6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80073b8:	f7fa fb9a 	bl	8001af0 <HAL_GetTick>
 80073bc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80073be:	e008      	b.n	80073d2 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80073c0:	f7fa fb96 	bl	8001af0 <HAL_GetTick>
 80073c4:	4602      	mov	r2, r0
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d901      	bls.n	80073d2 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e006      	b.n	80073e0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80073d2:	4b05      	ldr	r3, [pc, #20]	@ (80073e8 <RCCEx_PLL3_Config+0x12c>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d0f0      	beq.n	80073c0 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	44020c00 	.word	0x44020c00

080073ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d101      	bne.n	80073fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	e049      	b.n	8007492 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d106      	bne.n	8007418 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f7fa f910 	bl	8001638 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2202      	movs	r2, #2
 800741c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	3304      	adds	r3, #4
 8007428:	4619      	mov	r1, r3
 800742a:	4610      	mov	r0, r2
 800742c:	f000 fd8e 	bl	8007f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3708      	adds	r7, #8
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b082      	sub	sp, #8
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d101      	bne.n	80074ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e049      	b.n	8007540 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d106      	bne.n	80074c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f841 	bl	8007548 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2202      	movs	r2, #2
 80074ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	3304      	adds	r3, #4
 80074d6:	4619      	mov	r1, r3
 80074d8:	4610      	mov	r0, r2
 80074da:	f000 fd37 	bl	8007f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2201      	movs	r2, #1
 8007502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2201      	movs	r2, #1
 8007512:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2201      	movs	r2, #1
 8007522:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007550:	bf00      	nop
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d109      	bne.n	8007580 <HAL_TIM_PWM_Start+0x24>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007572:	b2db      	uxtb	r3, r3
 8007574:	2b01      	cmp	r3, #1
 8007576:	bf14      	ite	ne
 8007578:	2301      	movne	r3, #1
 800757a:	2300      	moveq	r3, #0
 800757c:	b2db      	uxtb	r3, r3
 800757e:	e03c      	b.n	80075fa <HAL_TIM_PWM_Start+0x9e>
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	2b04      	cmp	r3, #4
 8007584:	d109      	bne.n	800759a <HAL_TIM_PWM_Start+0x3e>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800758c:	b2db      	uxtb	r3, r3
 800758e:	2b01      	cmp	r3, #1
 8007590:	bf14      	ite	ne
 8007592:	2301      	movne	r3, #1
 8007594:	2300      	moveq	r3, #0
 8007596:	b2db      	uxtb	r3, r3
 8007598:	e02f      	b.n	80075fa <HAL_TIM_PWM_Start+0x9e>
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	2b08      	cmp	r3, #8
 800759e:	d109      	bne.n	80075b4 <HAL_TIM_PWM_Start+0x58>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	bf14      	ite	ne
 80075ac:	2301      	movne	r3, #1
 80075ae:	2300      	moveq	r3, #0
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	e022      	b.n	80075fa <HAL_TIM_PWM_Start+0x9e>
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	2b0c      	cmp	r3, #12
 80075b8:	d109      	bne.n	80075ce <HAL_TIM_PWM_Start+0x72>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	bf14      	ite	ne
 80075c6:	2301      	movne	r3, #1
 80075c8:	2300      	moveq	r3, #0
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	e015      	b.n	80075fa <HAL_TIM_PWM_Start+0x9e>
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	2b10      	cmp	r3, #16
 80075d2:	d109      	bne.n	80075e8 <HAL_TIM_PWM_Start+0x8c>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	2b01      	cmp	r3, #1
 80075de:	bf14      	ite	ne
 80075e0:	2301      	movne	r3, #1
 80075e2:	2300      	moveq	r3, #0
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	e008      	b.n	80075fa <HAL_TIM_PWM_Start+0x9e>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	bf14      	ite	ne
 80075f4:	2301      	movne	r3, #1
 80075f6:	2300      	moveq	r3, #0
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d001      	beq.n	8007602 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e0ce      	b.n	80077a0 <HAL_TIM_PWM_Start+0x244>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d104      	bne.n	8007612 <HAL_TIM_PWM_Start+0xb6>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2202      	movs	r2, #2
 800760c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007610:	e023      	b.n	800765a <HAL_TIM_PWM_Start+0xfe>
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	2b04      	cmp	r3, #4
 8007616:	d104      	bne.n	8007622 <HAL_TIM_PWM_Start+0xc6>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2202      	movs	r2, #2
 800761c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007620:	e01b      	b.n	800765a <HAL_TIM_PWM_Start+0xfe>
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	2b08      	cmp	r3, #8
 8007626:	d104      	bne.n	8007632 <HAL_TIM_PWM_Start+0xd6>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2202      	movs	r2, #2
 800762c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007630:	e013      	b.n	800765a <HAL_TIM_PWM_Start+0xfe>
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	2b0c      	cmp	r3, #12
 8007636:	d104      	bne.n	8007642 <HAL_TIM_PWM_Start+0xe6>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2202      	movs	r2, #2
 800763c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007640:	e00b      	b.n	800765a <HAL_TIM_PWM_Start+0xfe>
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	2b10      	cmp	r3, #16
 8007646:	d104      	bne.n	8007652 <HAL_TIM_PWM_Start+0xf6>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2202      	movs	r2, #2
 800764c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007650:	e003      	b.n	800765a <HAL_TIM_PWM_Start+0xfe>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2202      	movs	r2, #2
 8007656:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2201      	movs	r2, #1
 8007660:	6839      	ldr	r1, [r7, #0]
 8007662:	4618      	mov	r0, r3
 8007664:	f001 f92e 	bl	80088c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a4e      	ldr	r2, [pc, #312]	@ (80077a8 <HAL_TIM_PWM_Start+0x24c>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d018      	beq.n	80076a4 <HAL_TIM_PWM_Start+0x148>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a4d      	ldr	r2, [pc, #308]	@ (80077ac <HAL_TIM_PWM_Start+0x250>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d013      	beq.n	80076a4 <HAL_TIM_PWM_Start+0x148>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a4b      	ldr	r2, [pc, #300]	@ (80077b0 <HAL_TIM_PWM_Start+0x254>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d00e      	beq.n	80076a4 <HAL_TIM_PWM_Start+0x148>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a4a      	ldr	r2, [pc, #296]	@ (80077b4 <HAL_TIM_PWM_Start+0x258>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d009      	beq.n	80076a4 <HAL_TIM_PWM_Start+0x148>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a48      	ldr	r2, [pc, #288]	@ (80077b8 <HAL_TIM_PWM_Start+0x25c>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d004      	beq.n	80076a4 <HAL_TIM_PWM_Start+0x148>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a47      	ldr	r2, [pc, #284]	@ (80077bc <HAL_TIM_PWM_Start+0x260>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d101      	bne.n	80076a8 <HAL_TIM_PWM_Start+0x14c>
 80076a4:	2301      	movs	r3, #1
 80076a6:	e000      	b.n	80076aa <HAL_TIM_PWM_Start+0x14e>
 80076a8:	2300      	movs	r3, #0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d007      	beq.n	80076be <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80076bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a39      	ldr	r2, [pc, #228]	@ (80077a8 <HAL_TIM_PWM_Start+0x24c>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d04a      	beq.n	800775e <HAL_TIM_PWM_Start+0x202>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a37      	ldr	r2, [pc, #220]	@ (80077ac <HAL_TIM_PWM_Start+0x250>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d045      	beq.n	800775e <HAL_TIM_PWM_Start+0x202>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076da:	d040      	beq.n	800775e <HAL_TIM_PWM_Start+0x202>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076e4:	d03b      	beq.n	800775e <HAL_TIM_PWM_Start+0x202>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a35      	ldr	r2, [pc, #212]	@ (80077c0 <HAL_TIM_PWM_Start+0x264>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d036      	beq.n	800775e <HAL_TIM_PWM_Start+0x202>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a33      	ldr	r2, [pc, #204]	@ (80077c4 <HAL_TIM_PWM_Start+0x268>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d031      	beq.n	800775e <HAL_TIM_PWM_Start+0x202>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a32      	ldr	r2, [pc, #200]	@ (80077c8 <HAL_TIM_PWM_Start+0x26c>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d02c      	beq.n	800775e <HAL_TIM_PWM_Start+0x202>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a30      	ldr	r2, [pc, #192]	@ (80077cc <HAL_TIM_PWM_Start+0x270>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d027      	beq.n	800775e <HAL_TIM_PWM_Start+0x202>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a2f      	ldr	r2, [pc, #188]	@ (80077d0 <HAL_TIM_PWM_Start+0x274>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d022      	beq.n	800775e <HAL_TIM_PWM_Start+0x202>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a2d      	ldr	r2, [pc, #180]	@ (80077d4 <HAL_TIM_PWM_Start+0x278>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d01d      	beq.n	800775e <HAL_TIM_PWM_Start+0x202>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a22      	ldr	r2, [pc, #136]	@ (80077b0 <HAL_TIM_PWM_Start+0x254>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d018      	beq.n	800775e <HAL_TIM_PWM_Start+0x202>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a20      	ldr	r2, [pc, #128]	@ (80077b4 <HAL_TIM_PWM_Start+0x258>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d013      	beq.n	800775e <HAL_TIM_PWM_Start+0x202>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a27      	ldr	r2, [pc, #156]	@ (80077d8 <HAL_TIM_PWM_Start+0x27c>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d00e      	beq.n	800775e <HAL_TIM_PWM_Start+0x202>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a25      	ldr	r2, [pc, #148]	@ (80077dc <HAL_TIM_PWM_Start+0x280>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d009      	beq.n	800775e <HAL_TIM_PWM_Start+0x202>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a1a      	ldr	r2, [pc, #104]	@ (80077b8 <HAL_TIM_PWM_Start+0x25c>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d004      	beq.n	800775e <HAL_TIM_PWM_Start+0x202>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a18      	ldr	r2, [pc, #96]	@ (80077bc <HAL_TIM_PWM_Start+0x260>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d115      	bne.n	800778a <HAL_TIM_PWM_Start+0x22e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	689a      	ldr	r2, [r3, #8]
 8007764:	4b1e      	ldr	r3, [pc, #120]	@ (80077e0 <HAL_TIM_PWM_Start+0x284>)
 8007766:	4013      	ands	r3, r2
 8007768:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2b06      	cmp	r3, #6
 800776e:	d015      	beq.n	800779c <HAL_TIM_PWM_Start+0x240>
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007776:	d011      	beq.n	800779c <HAL_TIM_PWM_Start+0x240>
    {
      __HAL_TIM_ENABLE(htim);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f042 0201 	orr.w	r2, r2, #1
 8007786:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007788:	e008      	b.n	800779c <HAL_TIM_PWM_Start+0x240>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f042 0201 	orr.w	r2, r2, #1
 8007798:	601a      	str	r2, [r3, #0]
 800779a:	e000      	b.n	800779e <HAL_TIM_PWM_Start+0x242>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800779c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3710      	adds	r7, #16
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	40012c00 	.word	0x40012c00
 80077ac:	50012c00 	.word	0x50012c00
 80077b0:	40013400 	.word	0x40013400
 80077b4:	50013400 	.word	0x50013400
 80077b8:	40014000 	.word	0x40014000
 80077bc:	50014000 	.word	0x50014000
 80077c0:	40000400 	.word	0x40000400
 80077c4:	50000400 	.word	0x50000400
 80077c8:	40000800 	.word	0x40000800
 80077cc:	50000800 	.word	0x50000800
 80077d0:	40000c00 	.word	0x40000c00
 80077d4:	50000c00 	.word	0x50000c00
 80077d8:	40001800 	.word	0x40001800
 80077dc:	50001800 	.word	0x50001800
 80077e0:	00010007 	.word	0x00010007

080077e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	f003 0302 	and.w	r3, r3, #2
 8007802:	2b00      	cmp	r3, #0
 8007804:	d020      	beq.n	8007848 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f003 0302 	and.w	r3, r3, #2
 800780c:	2b00      	cmp	r3, #0
 800780e:	d01b      	beq.n	8007848 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f06f 0202 	mvn.w	r2, #2
 8007818:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2201      	movs	r2, #1
 800781e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	699b      	ldr	r3, [r3, #24]
 8007826:	f003 0303 	and.w	r3, r3, #3
 800782a:	2b00      	cmp	r3, #0
 800782c:	d003      	beq.n	8007836 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fb6e 	bl	8007f10 <HAL_TIM_IC_CaptureCallback>
 8007834:	e005      	b.n	8007842 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 fb60 	bl	8007efc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fb71 	bl	8007f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	f003 0304 	and.w	r3, r3, #4
 800784e:	2b00      	cmp	r3, #0
 8007850:	d020      	beq.n	8007894 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f003 0304 	and.w	r3, r3, #4
 8007858:	2b00      	cmp	r3, #0
 800785a:	d01b      	beq.n	8007894 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f06f 0204 	mvn.w	r2, #4
 8007864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2202      	movs	r2, #2
 800786a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007876:	2b00      	cmp	r3, #0
 8007878:	d003      	beq.n	8007882 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fb48 	bl	8007f10 <HAL_TIM_IC_CaptureCallback>
 8007880:	e005      	b.n	800788e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fb3a 	bl	8007efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fb4b 	bl	8007f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	f003 0308 	and.w	r3, r3, #8
 800789a:	2b00      	cmp	r3, #0
 800789c:	d020      	beq.n	80078e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f003 0308 	and.w	r3, r3, #8
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d01b      	beq.n	80078e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f06f 0208 	mvn.w	r2, #8
 80078b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2204      	movs	r2, #4
 80078b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	69db      	ldr	r3, [r3, #28]
 80078be:	f003 0303 	and.w	r3, r3, #3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d003      	beq.n	80078ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fb22 	bl	8007f10 <HAL_TIM_IC_CaptureCallback>
 80078cc:	e005      	b.n	80078da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fb14 	bl	8007efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 fb25 	bl	8007f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	f003 0310 	and.w	r3, r3, #16
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d020      	beq.n	800792c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f003 0310 	and.w	r3, r3, #16
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d01b      	beq.n	800792c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f06f 0210 	mvn.w	r2, #16
 80078fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2208      	movs	r2, #8
 8007902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	69db      	ldr	r3, [r3, #28]
 800790a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800790e:	2b00      	cmp	r3, #0
 8007910:	d003      	beq.n	800791a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fafc 	bl	8007f10 <HAL_TIM_IC_CaptureCallback>
 8007918:	e005      	b.n	8007926 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 faee 	bl	8007efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 faff 	bl	8007f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	f003 0301 	and.w	r3, r3, #1
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00c      	beq.n	8007950 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f003 0301 	and.w	r3, r3, #1
 800793c:	2b00      	cmp	r3, #0
 800793e:	d007      	beq.n	8007950 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f06f 0201 	mvn.w	r2, #1
 8007948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 facc 	bl	8007ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007956:	2b00      	cmp	r3, #0
 8007958:	d104      	bne.n	8007964 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007960:	2b00      	cmp	r3, #0
 8007962:	d00c      	beq.n	800797e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800796a:	2b00      	cmp	r3, #0
 800796c:	d007      	beq.n	800797e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f001 f93d 	bl	8008bf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00c      	beq.n	80079a2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800798e:	2b00      	cmp	r3, #0
 8007990:	d007      	beq.n	80079a2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800799a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f001 f935 	bl	8008c0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00c      	beq.n	80079c6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d007      	beq.n	80079c6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80079be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 fab9 	bl	8007f38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	f003 0320 	and.w	r3, r3, #32
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00c      	beq.n	80079ea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f003 0320 	and.w	r3, r3, #32
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d007      	beq.n	80079ea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f06f 0220 	mvn.w	r2, #32
 80079e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f001 f8fd 	bl	8008be4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00c      	beq.n	8007a0e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d007      	beq.n	8007a0e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f001 f909 	bl	8008c20 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00c      	beq.n	8007a32 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d007      	beq.n	8007a32 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f001 f901 	bl	8008c34 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00c      	beq.n	8007a56 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d007      	beq.n	8007a56 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f001 f8f9 	bl	8008c48 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00c      	beq.n	8007a7a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d007      	beq.n	8007a7a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f001 f8f1 	bl	8008c5c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a7a:	bf00      	nop
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
	...

08007a84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b086      	sub	sp, #24
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a90:	2300      	movs	r3, #0
 8007a92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d101      	bne.n	8007aa2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007a9e:	2302      	movs	r3, #2
 8007aa0:	e0ff      	b.n	8007ca2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2b14      	cmp	r3, #20
 8007aae:	f200 80f0 	bhi.w	8007c92 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ab8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab8:	08007b0d 	.word	0x08007b0d
 8007abc:	08007c93 	.word	0x08007c93
 8007ac0:	08007c93 	.word	0x08007c93
 8007ac4:	08007c93 	.word	0x08007c93
 8007ac8:	08007b4d 	.word	0x08007b4d
 8007acc:	08007c93 	.word	0x08007c93
 8007ad0:	08007c93 	.word	0x08007c93
 8007ad4:	08007c93 	.word	0x08007c93
 8007ad8:	08007b8f 	.word	0x08007b8f
 8007adc:	08007c93 	.word	0x08007c93
 8007ae0:	08007c93 	.word	0x08007c93
 8007ae4:	08007c93 	.word	0x08007c93
 8007ae8:	08007bcf 	.word	0x08007bcf
 8007aec:	08007c93 	.word	0x08007c93
 8007af0:	08007c93 	.word	0x08007c93
 8007af4:	08007c93 	.word	0x08007c93
 8007af8:	08007c11 	.word	0x08007c11
 8007afc:	08007c93 	.word	0x08007c93
 8007b00:	08007c93 	.word	0x08007c93
 8007b04:	08007c93 	.word	0x08007c93
 8007b08:	08007c51 	.word	0x08007c51
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68b9      	ldr	r1, [r7, #8]
 8007b12:	4618      	mov	r0, r3
 8007b14:	f000 fb04 	bl	8008120 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	699a      	ldr	r2, [r3, #24]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f042 0208 	orr.w	r2, r2, #8
 8007b26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	699a      	ldr	r2, [r3, #24]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f022 0204 	bic.w	r2, r2, #4
 8007b36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	6999      	ldr	r1, [r3, #24]
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	691a      	ldr	r2, [r3, #16]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	430a      	orrs	r2, r1
 8007b48:	619a      	str	r2, [r3, #24]
      break;
 8007b4a:	e0a5      	b.n	8007c98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68b9      	ldr	r1, [r7, #8]
 8007b52:	4618      	mov	r0, r3
 8007b54:	f000 fb7e 	bl	8008254 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	699a      	ldr	r2, [r3, #24]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	699a      	ldr	r2, [r3, #24]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6999      	ldr	r1, [r3, #24]
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	021a      	lsls	r2, r3, #8
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	430a      	orrs	r2, r1
 8007b8a:	619a      	str	r2, [r3, #24]
      break;
 8007b8c:	e084      	b.n	8007c98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68b9      	ldr	r1, [r7, #8]
 8007b94:	4618      	mov	r0, r3
 8007b96:	f000 fbf5 	bl	8008384 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	69da      	ldr	r2, [r3, #28]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f042 0208 	orr.w	r2, r2, #8
 8007ba8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	69da      	ldr	r2, [r3, #28]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f022 0204 	bic.w	r2, r2, #4
 8007bb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	69d9      	ldr	r1, [r3, #28]
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	691a      	ldr	r2, [r3, #16]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	430a      	orrs	r2, r1
 8007bca:	61da      	str	r2, [r3, #28]
      break;
 8007bcc:	e064      	b.n	8007c98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68b9      	ldr	r1, [r7, #8]
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f000 fc6b 	bl	80084b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	69da      	ldr	r2, [r3, #28]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007be8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	69da      	ldr	r2, [r3, #28]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007bf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	69d9      	ldr	r1, [r3, #28]
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	021a      	lsls	r2, r3, #8
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	430a      	orrs	r2, r1
 8007c0c:	61da      	str	r2, [r3, #28]
      break;
 8007c0e:	e043      	b.n	8007c98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68b9      	ldr	r1, [r7, #8]
 8007c16:	4618      	mov	r0, r3
 8007c18:	f000 fce2 	bl	80085e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f042 0208 	orr.w	r2, r2, #8
 8007c2a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f022 0204 	bic.w	r2, r2, #4
 8007c3a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	691a      	ldr	r2, [r3, #16]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	430a      	orrs	r2, r1
 8007c4c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007c4e:	e023      	b.n	8007c98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68b9      	ldr	r1, [r7, #8]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f000 fd2c 	bl	80086b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c6a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c7a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	021a      	lsls	r2, r3, #8
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	430a      	orrs	r2, r1
 8007c8e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007c90:	e002      	b.n	8007c98 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	75fb      	strb	r3, [r7, #23]
      break;
 8007c96:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3718      	adds	r7, #24
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop

08007cac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d101      	bne.n	8007cc8 <HAL_TIM_ConfigClockSource+0x1c>
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	e0fe      	b.n	8007ec6 <HAL_TIM_ConfigClockSource+0x21a>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007ce6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007cea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007cf2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68ba      	ldr	r2, [r7, #8]
 8007cfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d04:	f000 80c9 	beq.w	8007e9a <HAL_TIM_ConfigClockSource+0x1ee>
 8007d08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d0c:	f200 80ce 	bhi.w	8007eac <HAL_TIM_ConfigClockSource+0x200>
 8007d10:	4a6f      	ldr	r2, [pc, #444]	@ (8007ed0 <HAL_TIM_ConfigClockSource+0x224>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	f000 80c1 	beq.w	8007e9a <HAL_TIM_ConfigClockSource+0x1ee>
 8007d18:	4a6d      	ldr	r2, [pc, #436]	@ (8007ed0 <HAL_TIM_ConfigClockSource+0x224>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	f200 80c6 	bhi.w	8007eac <HAL_TIM_ConfigClockSource+0x200>
 8007d20:	4a6c      	ldr	r2, [pc, #432]	@ (8007ed4 <HAL_TIM_ConfigClockSource+0x228>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	f000 80b9 	beq.w	8007e9a <HAL_TIM_ConfigClockSource+0x1ee>
 8007d28:	4a6a      	ldr	r2, [pc, #424]	@ (8007ed4 <HAL_TIM_ConfigClockSource+0x228>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	f200 80be 	bhi.w	8007eac <HAL_TIM_ConfigClockSource+0x200>
 8007d30:	4a69      	ldr	r2, [pc, #420]	@ (8007ed8 <HAL_TIM_ConfigClockSource+0x22c>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	f000 80b1 	beq.w	8007e9a <HAL_TIM_ConfigClockSource+0x1ee>
 8007d38:	4a67      	ldr	r2, [pc, #412]	@ (8007ed8 <HAL_TIM_ConfigClockSource+0x22c>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	f200 80b6 	bhi.w	8007eac <HAL_TIM_ConfigClockSource+0x200>
 8007d40:	4a66      	ldr	r2, [pc, #408]	@ (8007edc <HAL_TIM_ConfigClockSource+0x230>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	f000 80a9 	beq.w	8007e9a <HAL_TIM_ConfigClockSource+0x1ee>
 8007d48:	4a64      	ldr	r2, [pc, #400]	@ (8007edc <HAL_TIM_ConfigClockSource+0x230>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	f200 80ae 	bhi.w	8007eac <HAL_TIM_ConfigClockSource+0x200>
 8007d50:	4a63      	ldr	r2, [pc, #396]	@ (8007ee0 <HAL_TIM_ConfigClockSource+0x234>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	f000 80a1 	beq.w	8007e9a <HAL_TIM_ConfigClockSource+0x1ee>
 8007d58:	4a61      	ldr	r2, [pc, #388]	@ (8007ee0 <HAL_TIM_ConfigClockSource+0x234>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	f200 80a6 	bhi.w	8007eac <HAL_TIM_ConfigClockSource+0x200>
 8007d60:	4a60      	ldr	r2, [pc, #384]	@ (8007ee4 <HAL_TIM_ConfigClockSource+0x238>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	f000 8099 	beq.w	8007e9a <HAL_TIM_ConfigClockSource+0x1ee>
 8007d68:	4a5e      	ldr	r2, [pc, #376]	@ (8007ee4 <HAL_TIM_ConfigClockSource+0x238>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	f200 809e 	bhi.w	8007eac <HAL_TIM_ConfigClockSource+0x200>
 8007d70:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007d74:	f000 8091 	beq.w	8007e9a <HAL_TIM_ConfigClockSource+0x1ee>
 8007d78:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007d7c:	f200 8096 	bhi.w	8007eac <HAL_TIM_ConfigClockSource+0x200>
 8007d80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d84:	f000 8089 	beq.w	8007e9a <HAL_TIM_ConfigClockSource+0x1ee>
 8007d88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d8c:	f200 808e 	bhi.w	8007eac <HAL_TIM_ConfigClockSource+0x200>
 8007d90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d94:	d03e      	beq.n	8007e14 <HAL_TIM_ConfigClockSource+0x168>
 8007d96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d9a:	f200 8087 	bhi.w	8007eac <HAL_TIM_ConfigClockSource+0x200>
 8007d9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007da2:	f000 8086 	beq.w	8007eb2 <HAL_TIM_ConfigClockSource+0x206>
 8007da6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007daa:	d87f      	bhi.n	8007eac <HAL_TIM_ConfigClockSource+0x200>
 8007dac:	2b70      	cmp	r3, #112	@ 0x70
 8007dae:	d01a      	beq.n	8007de6 <HAL_TIM_ConfigClockSource+0x13a>
 8007db0:	2b70      	cmp	r3, #112	@ 0x70
 8007db2:	d87b      	bhi.n	8007eac <HAL_TIM_ConfigClockSource+0x200>
 8007db4:	2b60      	cmp	r3, #96	@ 0x60
 8007db6:	d050      	beq.n	8007e5a <HAL_TIM_ConfigClockSource+0x1ae>
 8007db8:	2b60      	cmp	r3, #96	@ 0x60
 8007dba:	d877      	bhi.n	8007eac <HAL_TIM_ConfigClockSource+0x200>
 8007dbc:	2b50      	cmp	r3, #80	@ 0x50
 8007dbe:	d03c      	beq.n	8007e3a <HAL_TIM_ConfigClockSource+0x18e>
 8007dc0:	2b50      	cmp	r3, #80	@ 0x50
 8007dc2:	d873      	bhi.n	8007eac <HAL_TIM_ConfigClockSource+0x200>
 8007dc4:	2b40      	cmp	r3, #64	@ 0x40
 8007dc6:	d058      	beq.n	8007e7a <HAL_TIM_ConfigClockSource+0x1ce>
 8007dc8:	2b40      	cmp	r3, #64	@ 0x40
 8007dca:	d86f      	bhi.n	8007eac <HAL_TIM_ConfigClockSource+0x200>
 8007dcc:	2b30      	cmp	r3, #48	@ 0x30
 8007dce:	d064      	beq.n	8007e9a <HAL_TIM_ConfigClockSource+0x1ee>
 8007dd0:	2b30      	cmp	r3, #48	@ 0x30
 8007dd2:	d86b      	bhi.n	8007eac <HAL_TIM_ConfigClockSource+0x200>
 8007dd4:	2b20      	cmp	r3, #32
 8007dd6:	d060      	beq.n	8007e9a <HAL_TIM_ConfigClockSource+0x1ee>
 8007dd8:	2b20      	cmp	r3, #32
 8007dda:	d867      	bhi.n	8007eac <HAL_TIM_ConfigClockSource+0x200>
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d05c      	beq.n	8007e9a <HAL_TIM_ConfigClockSource+0x1ee>
 8007de0:	2b10      	cmp	r3, #16
 8007de2:	d05a      	beq.n	8007e9a <HAL_TIM_ConfigClockSource+0x1ee>
 8007de4:	e062      	b.n	8007eac <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007df6:	f000 fd45 	bl	8008884 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007e08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	609a      	str	r2, [r3, #8]
      break;
 8007e12:	e04f      	b.n	8007eb4 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e24:	f000 fd2e 	bl	8008884 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	689a      	ldr	r2, [r3, #8]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007e36:	609a      	str	r2, [r3, #8]
      break;
 8007e38:	e03c      	b.n	8007eb4 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e46:	461a      	mov	r2, r3
 8007e48:	f000 fca0 	bl	800878c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2150      	movs	r1, #80	@ 0x50
 8007e52:	4618      	mov	r0, r3
 8007e54:	f000 fcf9 	bl	800884a <TIM_ITRx_SetConfig>
      break;
 8007e58:	e02c      	b.n	8007eb4 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e66:	461a      	mov	r2, r3
 8007e68:	f000 fcbf 	bl	80087ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2160      	movs	r1, #96	@ 0x60
 8007e72:	4618      	mov	r0, r3
 8007e74:	f000 fce9 	bl	800884a <TIM_ITRx_SetConfig>
      break;
 8007e78:	e01c      	b.n	8007eb4 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e86:	461a      	mov	r2, r3
 8007e88:	f000 fc80 	bl	800878c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2140      	movs	r1, #64	@ 0x40
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 fcd9 	bl	800884a <TIM_ITRx_SetConfig>
      break;
 8007e98:	e00c      	b.n	8007eb4 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	4610      	mov	r0, r2
 8007ea6:	f000 fcd0 	bl	800884a <TIM_ITRx_SetConfig>
      break;
 8007eaa:	e003      	b.n	8007eb4 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	73fb      	strb	r3, [r7, #15]
      break;
 8007eb0:	e000      	b.n	8007eb4 <HAL_TIM_ConfigClockSource+0x208>
      break;
 8007eb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	00100070 	.word	0x00100070
 8007ed4:	00100060 	.word	0x00100060
 8007ed8:	00100050 	.word	0x00100050
 8007edc:	00100040 	.word	0x00100040
 8007ee0:	00100030 	.word	0x00100030
 8007ee4:	00100020 	.word	0x00100020

08007ee8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f2c:	bf00      	nop
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f40:	bf00      	nop
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a62      	ldr	r2, [pc, #392]	@ (80080e8 <TIM_Base_SetConfig+0x19c>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d02b      	beq.n	8007fbc <TIM_Base_SetConfig+0x70>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a61      	ldr	r2, [pc, #388]	@ (80080ec <TIM_Base_SetConfig+0x1a0>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d027      	beq.n	8007fbc <TIM_Base_SetConfig+0x70>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f72:	d023      	beq.n	8007fbc <TIM_Base_SetConfig+0x70>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f7a:	d01f      	beq.n	8007fbc <TIM_Base_SetConfig+0x70>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a5c      	ldr	r2, [pc, #368]	@ (80080f0 <TIM_Base_SetConfig+0x1a4>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d01b      	beq.n	8007fbc <TIM_Base_SetConfig+0x70>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4a5b      	ldr	r2, [pc, #364]	@ (80080f4 <TIM_Base_SetConfig+0x1a8>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d017      	beq.n	8007fbc <TIM_Base_SetConfig+0x70>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	4a5a      	ldr	r2, [pc, #360]	@ (80080f8 <TIM_Base_SetConfig+0x1ac>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d013      	beq.n	8007fbc <TIM_Base_SetConfig+0x70>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4a59      	ldr	r2, [pc, #356]	@ (80080fc <TIM_Base_SetConfig+0x1b0>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d00f      	beq.n	8007fbc <TIM_Base_SetConfig+0x70>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4a58      	ldr	r2, [pc, #352]	@ (8008100 <TIM_Base_SetConfig+0x1b4>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d00b      	beq.n	8007fbc <TIM_Base_SetConfig+0x70>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a57      	ldr	r2, [pc, #348]	@ (8008104 <TIM_Base_SetConfig+0x1b8>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d007      	beq.n	8007fbc <TIM_Base_SetConfig+0x70>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	4a56      	ldr	r2, [pc, #344]	@ (8008108 <TIM_Base_SetConfig+0x1bc>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d003      	beq.n	8007fbc <TIM_Base_SetConfig+0x70>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a55      	ldr	r2, [pc, #340]	@ (800810c <TIM_Base_SetConfig+0x1c0>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d108      	bne.n	8007fce <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a45      	ldr	r2, [pc, #276]	@ (80080e8 <TIM_Base_SetConfig+0x19c>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d03b      	beq.n	800804e <TIM_Base_SetConfig+0x102>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a44      	ldr	r2, [pc, #272]	@ (80080ec <TIM_Base_SetConfig+0x1a0>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d037      	beq.n	800804e <TIM_Base_SetConfig+0x102>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fe4:	d033      	beq.n	800804e <TIM_Base_SetConfig+0x102>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007fec:	d02f      	beq.n	800804e <TIM_Base_SetConfig+0x102>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a3f      	ldr	r2, [pc, #252]	@ (80080f0 <TIM_Base_SetConfig+0x1a4>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d02b      	beq.n	800804e <TIM_Base_SetConfig+0x102>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a3e      	ldr	r2, [pc, #248]	@ (80080f4 <TIM_Base_SetConfig+0x1a8>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d027      	beq.n	800804e <TIM_Base_SetConfig+0x102>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a3d      	ldr	r2, [pc, #244]	@ (80080f8 <TIM_Base_SetConfig+0x1ac>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d023      	beq.n	800804e <TIM_Base_SetConfig+0x102>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a3c      	ldr	r2, [pc, #240]	@ (80080fc <TIM_Base_SetConfig+0x1b0>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d01f      	beq.n	800804e <TIM_Base_SetConfig+0x102>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a3b      	ldr	r2, [pc, #236]	@ (8008100 <TIM_Base_SetConfig+0x1b4>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d01b      	beq.n	800804e <TIM_Base_SetConfig+0x102>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a3a      	ldr	r2, [pc, #232]	@ (8008104 <TIM_Base_SetConfig+0x1b8>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d017      	beq.n	800804e <TIM_Base_SetConfig+0x102>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a39      	ldr	r2, [pc, #228]	@ (8008108 <TIM_Base_SetConfig+0x1bc>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d013      	beq.n	800804e <TIM_Base_SetConfig+0x102>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a38      	ldr	r2, [pc, #224]	@ (800810c <TIM_Base_SetConfig+0x1c0>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d00f      	beq.n	800804e <TIM_Base_SetConfig+0x102>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a37      	ldr	r2, [pc, #220]	@ (8008110 <TIM_Base_SetConfig+0x1c4>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d00b      	beq.n	800804e <TIM_Base_SetConfig+0x102>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a36      	ldr	r2, [pc, #216]	@ (8008114 <TIM_Base_SetConfig+0x1c8>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d007      	beq.n	800804e <TIM_Base_SetConfig+0x102>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a35      	ldr	r2, [pc, #212]	@ (8008118 <TIM_Base_SetConfig+0x1cc>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d003      	beq.n	800804e <TIM_Base_SetConfig+0x102>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4a34      	ldr	r2, [pc, #208]	@ (800811c <TIM_Base_SetConfig+0x1d0>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d108      	bne.n	8008060 <TIM_Base_SetConfig+0x114>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	68fa      	ldr	r2, [r7, #12]
 800805c:	4313      	orrs	r3, r2
 800805e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	4313      	orrs	r3, r2
 800806c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	689a      	ldr	r2, [r3, #8]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a18      	ldr	r2, [pc, #96]	@ (80080e8 <TIM_Base_SetConfig+0x19c>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d013      	beq.n	80080b4 <TIM_Base_SetConfig+0x168>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a17      	ldr	r2, [pc, #92]	@ (80080ec <TIM_Base_SetConfig+0x1a0>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d00f      	beq.n	80080b4 <TIM_Base_SetConfig+0x168>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a1c      	ldr	r2, [pc, #112]	@ (8008108 <TIM_Base_SetConfig+0x1bc>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d00b      	beq.n	80080b4 <TIM_Base_SetConfig+0x168>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a1b      	ldr	r2, [pc, #108]	@ (800810c <TIM_Base_SetConfig+0x1c0>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d007      	beq.n	80080b4 <TIM_Base_SetConfig+0x168>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a1c      	ldr	r2, [pc, #112]	@ (8008118 <TIM_Base_SetConfig+0x1cc>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d003      	beq.n	80080b4 <TIM_Base_SetConfig+0x168>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a1b      	ldr	r2, [pc, #108]	@ (800811c <TIM_Base_SetConfig+0x1d0>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d103      	bne.n	80080bc <TIM_Base_SetConfig+0x170>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	691a      	ldr	r2, [r3, #16]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	f003 0301 	and.w	r3, r3, #1
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d105      	bne.n	80080da <TIM_Base_SetConfig+0x18e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	f023 0201 	bic.w	r2, r3, #1
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	611a      	str	r2, [r3, #16]
  }
}
 80080da:	bf00      	nop
 80080dc:	3714      	adds	r7, #20
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop
 80080e8:	40012c00 	.word	0x40012c00
 80080ec:	50012c00 	.word	0x50012c00
 80080f0:	40000400 	.word	0x40000400
 80080f4:	50000400 	.word	0x50000400
 80080f8:	40000800 	.word	0x40000800
 80080fc:	50000800 	.word	0x50000800
 8008100:	40000c00 	.word	0x40000c00
 8008104:	50000c00 	.word	0x50000c00
 8008108:	40013400 	.word	0x40013400
 800810c:	50013400 	.word	0x50013400
 8008110:	40001800 	.word	0x40001800
 8008114:	50001800 	.word	0x50001800
 8008118:	40014000 	.word	0x40014000
 800811c:	50014000 	.word	0x50014000

08008120 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008120:	b480      	push	{r7}
 8008122:	b087      	sub	sp, #28
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6a1b      	ldr	r3, [r3, #32]
 800812e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a1b      	ldr	r3, [r3, #32]
 8008134:	f023 0201 	bic.w	r2, r3, #1
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	699b      	ldr	r3, [r3, #24]
 8008146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800814e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f023 0303 	bic.w	r3, r3, #3
 800815a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	4313      	orrs	r3, r2
 8008164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	f023 0302 	bic.w	r3, r3, #2
 800816c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	697a      	ldr	r2, [r7, #20]
 8008174:	4313      	orrs	r3, r2
 8008176:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4a30      	ldr	r2, [pc, #192]	@ (800823c <TIM_OC1_SetConfig+0x11c>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d013      	beq.n	80081a8 <TIM_OC1_SetConfig+0x88>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4a2f      	ldr	r2, [pc, #188]	@ (8008240 <TIM_OC1_SetConfig+0x120>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d00f      	beq.n	80081a8 <TIM_OC1_SetConfig+0x88>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4a2e      	ldr	r2, [pc, #184]	@ (8008244 <TIM_OC1_SetConfig+0x124>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d00b      	beq.n	80081a8 <TIM_OC1_SetConfig+0x88>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a2d      	ldr	r2, [pc, #180]	@ (8008248 <TIM_OC1_SetConfig+0x128>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d007      	beq.n	80081a8 <TIM_OC1_SetConfig+0x88>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a2c      	ldr	r2, [pc, #176]	@ (800824c <TIM_OC1_SetConfig+0x12c>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d003      	beq.n	80081a8 <TIM_OC1_SetConfig+0x88>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a2b      	ldr	r2, [pc, #172]	@ (8008250 <TIM_OC1_SetConfig+0x130>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d10c      	bne.n	80081c2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	f023 0308 	bic.w	r3, r3, #8
 80081ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	697a      	ldr	r2, [r7, #20]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	f023 0304 	bic.w	r3, r3, #4
 80081c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4a1d      	ldr	r2, [pc, #116]	@ (800823c <TIM_OC1_SetConfig+0x11c>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d013      	beq.n	80081f2 <TIM_OC1_SetConfig+0xd2>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4a1c      	ldr	r2, [pc, #112]	@ (8008240 <TIM_OC1_SetConfig+0x120>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d00f      	beq.n	80081f2 <TIM_OC1_SetConfig+0xd2>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a1b      	ldr	r2, [pc, #108]	@ (8008244 <TIM_OC1_SetConfig+0x124>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d00b      	beq.n	80081f2 <TIM_OC1_SetConfig+0xd2>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a1a      	ldr	r2, [pc, #104]	@ (8008248 <TIM_OC1_SetConfig+0x128>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d007      	beq.n	80081f2 <TIM_OC1_SetConfig+0xd2>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a19      	ldr	r2, [pc, #100]	@ (800824c <TIM_OC1_SetConfig+0x12c>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d003      	beq.n	80081f2 <TIM_OC1_SetConfig+0xd2>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a18      	ldr	r2, [pc, #96]	@ (8008250 <TIM_OC1_SetConfig+0x130>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d111      	bne.n	8008216 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	695b      	ldr	r3, [r3, #20]
 8008206:	693a      	ldr	r2, [r7, #16]
 8008208:	4313      	orrs	r3, r2
 800820a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	699b      	ldr	r3, [r3, #24]
 8008210:	693a      	ldr	r2, [r7, #16]
 8008212:	4313      	orrs	r3, r2
 8008214:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	693a      	ldr	r2, [r7, #16]
 800821a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	685a      	ldr	r2, [r3, #4]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	697a      	ldr	r2, [r7, #20]
 800822e:	621a      	str	r2, [r3, #32]
}
 8008230:	bf00      	nop
 8008232:	371c      	adds	r7, #28
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr
 800823c:	40012c00 	.word	0x40012c00
 8008240:	50012c00 	.word	0x50012c00
 8008244:	40013400 	.word	0x40013400
 8008248:	50013400 	.word	0x50013400
 800824c:	40014000 	.word	0x40014000
 8008250:	50014000 	.word	0x50014000

08008254 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008254:	b480      	push	{r7}
 8008256:	b087      	sub	sp, #28
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a1b      	ldr	r3, [r3, #32]
 8008262:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a1b      	ldr	r3, [r3, #32]
 8008268:	f023 0210 	bic.w	r2, r3, #16
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	699b      	ldr	r3, [r3, #24]
 800827a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008282:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800828e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	021b      	lsls	r3, r3, #8
 8008296:	68fa      	ldr	r2, [r7, #12]
 8008298:	4313      	orrs	r3, r2
 800829a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	f023 0320 	bic.w	r3, r3, #32
 80082a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	011b      	lsls	r3, r3, #4
 80082aa:	697a      	ldr	r2, [r7, #20]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	4a2e      	ldr	r2, [pc, #184]	@ (800836c <TIM_OC2_SetConfig+0x118>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d00b      	beq.n	80082d0 <TIM_OC2_SetConfig+0x7c>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a2d      	ldr	r2, [pc, #180]	@ (8008370 <TIM_OC2_SetConfig+0x11c>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d007      	beq.n	80082d0 <TIM_OC2_SetConfig+0x7c>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4a2c      	ldr	r2, [pc, #176]	@ (8008374 <TIM_OC2_SetConfig+0x120>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d003      	beq.n	80082d0 <TIM_OC2_SetConfig+0x7c>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a2b      	ldr	r2, [pc, #172]	@ (8008378 <TIM_OC2_SetConfig+0x124>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d10d      	bne.n	80082ec <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	011b      	lsls	r3, r3, #4
 80082de:	697a      	ldr	r2, [r7, #20]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4a1f      	ldr	r2, [pc, #124]	@ (800836c <TIM_OC2_SetConfig+0x118>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d013      	beq.n	800831c <TIM_OC2_SetConfig+0xc8>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a1e      	ldr	r2, [pc, #120]	@ (8008370 <TIM_OC2_SetConfig+0x11c>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d00f      	beq.n	800831c <TIM_OC2_SetConfig+0xc8>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a1d      	ldr	r2, [pc, #116]	@ (8008374 <TIM_OC2_SetConfig+0x120>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d00b      	beq.n	800831c <TIM_OC2_SetConfig+0xc8>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a1c      	ldr	r2, [pc, #112]	@ (8008378 <TIM_OC2_SetConfig+0x124>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d007      	beq.n	800831c <TIM_OC2_SetConfig+0xc8>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a1b      	ldr	r2, [pc, #108]	@ (800837c <TIM_OC2_SetConfig+0x128>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d003      	beq.n	800831c <TIM_OC2_SetConfig+0xc8>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a1a      	ldr	r2, [pc, #104]	@ (8008380 <TIM_OC2_SetConfig+0x12c>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d113      	bne.n	8008344 <TIM_OC2_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008322:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800832a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	695b      	ldr	r3, [r3, #20]
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	4313      	orrs	r3, r2
 8008336:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	699b      	ldr	r3, [r3, #24]
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	693a      	ldr	r2, [r7, #16]
 8008340:	4313      	orrs	r3, r2
 8008342:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	693a      	ldr	r2, [r7, #16]
 8008348:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	685a      	ldr	r2, [r3, #4]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	697a      	ldr	r2, [r7, #20]
 800835c:	621a      	str	r2, [r3, #32]
}
 800835e:	bf00      	nop
 8008360:	371c      	adds	r7, #28
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr
 800836a:	bf00      	nop
 800836c:	40012c00 	.word	0x40012c00
 8008370:	50012c00 	.word	0x50012c00
 8008374:	40013400 	.word	0x40013400
 8008378:	50013400 	.word	0x50013400
 800837c:	40014000 	.word	0x40014000
 8008380:	50014000 	.word	0x50014000

08008384 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008384:	b480      	push	{r7}
 8008386:	b087      	sub	sp, #28
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6a1b      	ldr	r3, [r3, #32]
 8008392:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6a1b      	ldr	r3, [r3, #32]
 8008398:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	69db      	ldr	r3, [r3, #28]
 80083aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f023 0303 	bic.w	r3, r3, #3
 80083be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	68fa      	ldr	r2, [r7, #12]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80083d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	021b      	lsls	r3, r3, #8
 80083d8:	697a      	ldr	r2, [r7, #20]
 80083da:	4313      	orrs	r3, r2
 80083dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a2d      	ldr	r2, [pc, #180]	@ (8008498 <TIM_OC3_SetConfig+0x114>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d00b      	beq.n	80083fe <TIM_OC3_SetConfig+0x7a>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4a2c      	ldr	r2, [pc, #176]	@ (800849c <TIM_OC3_SetConfig+0x118>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d007      	beq.n	80083fe <TIM_OC3_SetConfig+0x7a>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4a2b      	ldr	r2, [pc, #172]	@ (80084a0 <TIM_OC3_SetConfig+0x11c>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d003      	beq.n	80083fe <TIM_OC3_SetConfig+0x7a>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4a2a      	ldr	r2, [pc, #168]	@ (80084a4 <TIM_OC3_SetConfig+0x120>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d10d      	bne.n	800841a <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008404:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	021b      	lsls	r3, r3, #8
 800840c:	697a      	ldr	r2, [r7, #20]
 800840e:	4313      	orrs	r3, r2
 8008410:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008418:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a1e      	ldr	r2, [pc, #120]	@ (8008498 <TIM_OC3_SetConfig+0x114>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d013      	beq.n	800844a <TIM_OC3_SetConfig+0xc6>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a1d      	ldr	r2, [pc, #116]	@ (800849c <TIM_OC3_SetConfig+0x118>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d00f      	beq.n	800844a <TIM_OC3_SetConfig+0xc6>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a1c      	ldr	r2, [pc, #112]	@ (80084a0 <TIM_OC3_SetConfig+0x11c>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d00b      	beq.n	800844a <TIM_OC3_SetConfig+0xc6>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a1b      	ldr	r2, [pc, #108]	@ (80084a4 <TIM_OC3_SetConfig+0x120>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d007      	beq.n	800844a <TIM_OC3_SetConfig+0xc6>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a1a      	ldr	r2, [pc, #104]	@ (80084a8 <TIM_OC3_SetConfig+0x124>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d003      	beq.n	800844a <TIM_OC3_SetConfig+0xc6>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4a19      	ldr	r2, [pc, #100]	@ (80084ac <TIM_OC3_SetConfig+0x128>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d113      	bne.n	8008472 <TIM_OC3_SetConfig+0xee>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008450:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008458:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	695b      	ldr	r3, [r3, #20]
 800845e:	011b      	lsls	r3, r3, #4
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	4313      	orrs	r3, r2
 8008464:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	699b      	ldr	r3, [r3, #24]
 800846a:	011b      	lsls	r3, r3, #4
 800846c:	693a      	ldr	r2, [r7, #16]
 800846e:	4313      	orrs	r3, r2
 8008470:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	693a      	ldr	r2, [r7, #16]
 8008476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	68fa      	ldr	r2, [r7, #12]
 800847c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	685a      	ldr	r2, [r3, #4]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	697a      	ldr	r2, [r7, #20]
 800848a:	621a      	str	r2, [r3, #32]
}
 800848c:	bf00      	nop
 800848e:	371c      	adds	r7, #28
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr
 8008498:	40012c00 	.word	0x40012c00
 800849c:	50012c00 	.word	0x50012c00
 80084a0:	40013400 	.word	0x40013400
 80084a4:	50013400 	.word	0x50013400
 80084a8:	40014000 	.word	0x40014000
 80084ac:	50014000 	.word	0x50014000

080084b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b087      	sub	sp, #28
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a1b      	ldr	r3, [r3, #32]
 80084be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6a1b      	ldr	r3, [r3, #32]
 80084c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	69db      	ldr	r3, [r3, #28]
 80084d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80084de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	021b      	lsls	r3, r3, #8
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80084fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	031b      	lsls	r3, r3, #12
 8008506:	697a      	ldr	r2, [r7, #20]
 8008508:	4313      	orrs	r3, r2
 800850a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4a2e      	ldr	r2, [pc, #184]	@ (80085c8 <TIM_OC4_SetConfig+0x118>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d00b      	beq.n	800852c <TIM_OC4_SetConfig+0x7c>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4a2d      	ldr	r2, [pc, #180]	@ (80085cc <TIM_OC4_SetConfig+0x11c>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d007      	beq.n	800852c <TIM_OC4_SetConfig+0x7c>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4a2c      	ldr	r2, [pc, #176]	@ (80085d0 <TIM_OC4_SetConfig+0x120>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d003      	beq.n	800852c <TIM_OC4_SetConfig+0x7c>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a2b      	ldr	r2, [pc, #172]	@ (80085d4 <TIM_OC4_SetConfig+0x124>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d10d      	bne.n	8008548 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008532:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	031b      	lsls	r3, r3, #12
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	4313      	orrs	r3, r2
 800853e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008546:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a1f      	ldr	r2, [pc, #124]	@ (80085c8 <TIM_OC4_SetConfig+0x118>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d013      	beq.n	8008578 <TIM_OC4_SetConfig+0xc8>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a1e      	ldr	r2, [pc, #120]	@ (80085cc <TIM_OC4_SetConfig+0x11c>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d00f      	beq.n	8008578 <TIM_OC4_SetConfig+0xc8>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a1d      	ldr	r2, [pc, #116]	@ (80085d0 <TIM_OC4_SetConfig+0x120>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d00b      	beq.n	8008578 <TIM_OC4_SetConfig+0xc8>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a1c      	ldr	r2, [pc, #112]	@ (80085d4 <TIM_OC4_SetConfig+0x124>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d007      	beq.n	8008578 <TIM_OC4_SetConfig+0xc8>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a1b      	ldr	r2, [pc, #108]	@ (80085d8 <TIM_OC4_SetConfig+0x128>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d003      	beq.n	8008578 <TIM_OC4_SetConfig+0xc8>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a1a      	ldr	r2, [pc, #104]	@ (80085dc <TIM_OC4_SetConfig+0x12c>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d113      	bne.n	80085a0 <TIM_OC4_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800857e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008586:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	695b      	ldr	r3, [r3, #20]
 800858c:	019b      	lsls	r3, r3, #6
 800858e:	693a      	ldr	r2, [r7, #16]
 8008590:	4313      	orrs	r3, r2
 8008592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	699b      	ldr	r3, [r3, #24]
 8008598:	019b      	lsls	r3, r3, #6
 800859a:	693a      	ldr	r2, [r7, #16]
 800859c:	4313      	orrs	r3, r2
 800859e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	693a      	ldr	r2, [r7, #16]
 80085a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	685a      	ldr	r2, [r3, #4]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	697a      	ldr	r2, [r7, #20]
 80085b8:	621a      	str	r2, [r3, #32]
}
 80085ba:	bf00      	nop
 80085bc:	371c      	adds	r7, #28
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop
 80085c8:	40012c00 	.word	0x40012c00
 80085cc:	50012c00 	.word	0x50012c00
 80085d0:	40013400 	.word	0x40013400
 80085d4:	50013400 	.word	0x50013400
 80085d8:	40014000 	.word	0x40014000
 80085dc:	50014000 	.word	0x50014000

080085e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b087      	sub	sp, #28
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a1b      	ldr	r3, [r3, #32]
 80085ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6a1b      	ldr	r3, [r3, #32]
 80085f4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800860e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	4313      	orrs	r3, r2
 800861c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008624:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	041b      	lsls	r3, r3, #16
 800862c:	693a      	ldr	r2, [r7, #16]
 800862e:	4313      	orrs	r3, r2
 8008630:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4a19      	ldr	r2, [pc, #100]	@ (800869c <TIM_OC5_SetConfig+0xbc>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d013      	beq.n	8008662 <TIM_OC5_SetConfig+0x82>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4a18      	ldr	r2, [pc, #96]	@ (80086a0 <TIM_OC5_SetConfig+0xc0>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d00f      	beq.n	8008662 <TIM_OC5_SetConfig+0x82>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4a17      	ldr	r2, [pc, #92]	@ (80086a4 <TIM_OC5_SetConfig+0xc4>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d00b      	beq.n	8008662 <TIM_OC5_SetConfig+0x82>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4a16      	ldr	r2, [pc, #88]	@ (80086a8 <TIM_OC5_SetConfig+0xc8>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d007      	beq.n	8008662 <TIM_OC5_SetConfig+0x82>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a15      	ldr	r2, [pc, #84]	@ (80086ac <TIM_OC5_SetConfig+0xcc>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d003      	beq.n	8008662 <TIM_OC5_SetConfig+0x82>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a14      	ldr	r2, [pc, #80]	@ (80086b0 <TIM_OC5_SetConfig+0xd0>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d109      	bne.n	8008676 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008668:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	695b      	ldr	r3, [r3, #20]
 800866e:	021b      	lsls	r3, r3, #8
 8008670:	697a      	ldr	r2, [r7, #20]
 8008672:	4313      	orrs	r3, r2
 8008674:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	697a      	ldr	r2, [r7, #20]
 800867a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	68fa      	ldr	r2, [r7, #12]
 8008680:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	685a      	ldr	r2, [r3, #4]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	693a      	ldr	r2, [r7, #16]
 800868e:	621a      	str	r2, [r3, #32]
}
 8008690:	bf00      	nop
 8008692:	371c      	adds	r7, #28
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr
 800869c:	40012c00 	.word	0x40012c00
 80086a0:	50012c00 	.word	0x50012c00
 80086a4:	40013400 	.word	0x40013400
 80086a8:	50013400 	.word	0x50013400
 80086ac:	40014000 	.word	0x40014000
 80086b0:	50014000 	.word	0x50014000

080086b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b087      	sub	sp, #28
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a1b      	ldr	r3, [r3, #32]
 80086c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a1b      	ldr	r3, [r3, #32]
 80086c8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80086e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	021b      	lsls	r3, r3, #8
 80086ee:	68fa      	ldr	r2, [r7, #12]
 80086f0:	4313      	orrs	r3, r2
 80086f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80086fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	051b      	lsls	r3, r3, #20
 8008702:	693a      	ldr	r2, [r7, #16]
 8008704:	4313      	orrs	r3, r2
 8008706:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a1a      	ldr	r2, [pc, #104]	@ (8008774 <TIM_OC6_SetConfig+0xc0>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d013      	beq.n	8008738 <TIM_OC6_SetConfig+0x84>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4a19      	ldr	r2, [pc, #100]	@ (8008778 <TIM_OC6_SetConfig+0xc4>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d00f      	beq.n	8008738 <TIM_OC6_SetConfig+0x84>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4a18      	ldr	r2, [pc, #96]	@ (800877c <TIM_OC6_SetConfig+0xc8>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d00b      	beq.n	8008738 <TIM_OC6_SetConfig+0x84>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4a17      	ldr	r2, [pc, #92]	@ (8008780 <TIM_OC6_SetConfig+0xcc>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d007      	beq.n	8008738 <TIM_OC6_SetConfig+0x84>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a16      	ldr	r2, [pc, #88]	@ (8008784 <TIM_OC6_SetConfig+0xd0>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d003      	beq.n	8008738 <TIM_OC6_SetConfig+0x84>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4a15      	ldr	r2, [pc, #84]	@ (8008788 <TIM_OC6_SetConfig+0xd4>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d109      	bne.n	800874c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800873e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	695b      	ldr	r3, [r3, #20]
 8008744:	029b      	lsls	r3, r3, #10
 8008746:	697a      	ldr	r2, [r7, #20]
 8008748:	4313      	orrs	r3, r2
 800874a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	697a      	ldr	r2, [r7, #20]
 8008750:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	685a      	ldr	r2, [r3, #4]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	693a      	ldr	r2, [r7, #16]
 8008764:	621a      	str	r2, [r3, #32]
}
 8008766:	bf00      	nop
 8008768:	371c      	adds	r7, #28
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	40012c00 	.word	0x40012c00
 8008778:	50012c00 	.word	0x50012c00
 800877c:	40013400 	.word	0x40013400
 8008780:	50013400 	.word	0x50013400
 8008784:	40014000 	.word	0x40014000
 8008788:	50014000 	.word	0x50014000

0800878c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800878c:	b480      	push	{r7}
 800878e:	b087      	sub	sp, #28
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6a1b      	ldr	r3, [r3, #32]
 800879c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	6a1b      	ldr	r3, [r3, #32]
 80087a2:	f023 0201 	bic.w	r2, r3, #1
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	699b      	ldr	r3, [r3, #24]
 80087ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80087b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	011b      	lsls	r3, r3, #4
 80087bc:	693a      	ldr	r2, [r7, #16]
 80087be:	4313      	orrs	r3, r2
 80087c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	f023 030a 	bic.w	r3, r3, #10
 80087c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80087ca:	697a      	ldr	r2, [r7, #20]
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	4313      	orrs	r3, r2
 80087d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	693a      	ldr	r2, [r7, #16]
 80087d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	697a      	ldr	r2, [r7, #20]
 80087dc:	621a      	str	r2, [r3, #32]
}
 80087de:	bf00      	nop
 80087e0:	371c      	adds	r7, #28
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr

080087ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087ea:	b480      	push	{r7}
 80087ec:	b087      	sub	sp, #28
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	60f8      	str	r0, [r7, #12]
 80087f2:	60b9      	str	r1, [r7, #8]
 80087f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6a1b      	ldr	r3, [r3, #32]
 80087fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6a1b      	ldr	r3, [r3, #32]
 8008800:	f023 0210 	bic.w	r2, r3, #16
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	699b      	ldr	r3, [r3, #24]
 800880c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008814:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	031b      	lsls	r3, r3, #12
 800881a:	693a      	ldr	r2, [r7, #16]
 800881c:	4313      	orrs	r3, r2
 800881e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008826:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	011b      	lsls	r3, r3, #4
 800882c:	697a      	ldr	r2, [r7, #20]
 800882e:	4313      	orrs	r3, r2
 8008830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	693a      	ldr	r2, [r7, #16]
 8008836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	697a      	ldr	r2, [r7, #20]
 800883c:	621a      	str	r2, [r3, #32]
}
 800883e:	bf00      	nop
 8008840:	371c      	adds	r7, #28
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr

0800884a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800884a:	b480      	push	{r7}
 800884c:	b085      	sub	sp, #20
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
 8008852:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008860:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008864:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008866:	683a      	ldr	r2, [r7, #0]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	4313      	orrs	r3, r2
 800886c:	f043 0307 	orr.w	r3, r3, #7
 8008870:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	609a      	str	r2, [r3, #8]
}
 8008878:	bf00      	nop
 800887a:	3714      	adds	r7, #20
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008884:	b480      	push	{r7}
 8008886:	b087      	sub	sp, #28
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
 8008890:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800889e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	021a      	lsls	r2, r3, #8
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	431a      	orrs	r2, r3
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	697a      	ldr	r2, [r7, #20]
 80088ae:	4313      	orrs	r3, r2
 80088b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	697a      	ldr	r2, [r7, #20]
 80088b6:	609a      	str	r2, [r3, #8]
}
 80088b8:	bf00      	nop
 80088ba:	371c      	adds	r7, #28
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr

080088c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b087      	sub	sp, #28
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	f003 031f 	and.w	r3, r3, #31
 80088d6:	2201      	movs	r2, #1
 80088d8:	fa02 f303 	lsl.w	r3, r2, r3
 80088dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6a1a      	ldr	r2, [r3, #32]
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	43db      	mvns	r3, r3
 80088e6:	401a      	ands	r2, r3
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6a1a      	ldr	r2, [r3, #32]
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	f003 031f 	and.w	r3, r3, #31
 80088f6:	6879      	ldr	r1, [r7, #4]
 80088f8:	fa01 f303 	lsl.w	r3, r1, r3
 80088fc:	431a      	orrs	r2, r3
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	621a      	str	r2, [r3, #32]
}
 8008902:	bf00      	nop
 8008904:	371c      	adds	r7, #28
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr
	...

08008910 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008910:	b480      	push	{r7}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008920:	2b01      	cmp	r3, #1
 8008922:	d101      	bne.n	8008928 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008924:	2302      	movs	r3, #2
 8008926:	e0a1      	b.n	8008a6c <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2201      	movs	r2, #1
 800892c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2202      	movs	r2, #2
 8008934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a4a      	ldr	r2, [pc, #296]	@ (8008a78 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d00e      	beq.n	8008970 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a49      	ldr	r2, [pc, #292]	@ (8008a7c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d009      	beq.n	8008970 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a47      	ldr	r2, [pc, #284]	@ (8008a80 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d004      	beq.n	8008970 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a46      	ldr	r2, [pc, #280]	@ (8008a84 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d108      	bne.n	8008982 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008976:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	4313      	orrs	r3, r2
 8008980:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008988:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800898c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	4313      	orrs	r3, r2
 8008996:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a34      	ldr	r2, [pc, #208]	@ (8008a78 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d04a      	beq.n	8008a40 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a33      	ldr	r2, [pc, #204]	@ (8008a7c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d045      	beq.n	8008a40 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089bc:	d040      	beq.n	8008a40 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80089c6:	d03b      	beq.n	8008a40 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a2e      	ldr	r2, [pc, #184]	@ (8008a88 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d036      	beq.n	8008a40 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a2d      	ldr	r2, [pc, #180]	@ (8008a8c <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d031      	beq.n	8008a40 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a2b      	ldr	r2, [pc, #172]	@ (8008a90 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d02c      	beq.n	8008a40 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a2a      	ldr	r2, [pc, #168]	@ (8008a94 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d027      	beq.n	8008a40 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a28      	ldr	r2, [pc, #160]	@ (8008a98 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d022      	beq.n	8008a40 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a27      	ldr	r2, [pc, #156]	@ (8008a9c <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d01d      	beq.n	8008a40 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a1d      	ldr	r2, [pc, #116]	@ (8008a80 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d018      	beq.n	8008a40 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a1c      	ldr	r2, [pc, #112]	@ (8008a84 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d013      	beq.n	8008a40 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a20      	ldr	r2, [pc, #128]	@ (8008aa0 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d00e      	beq.n	8008a40 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a1f      	ldr	r2, [pc, #124]	@ (8008aa4 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d009      	beq.n	8008a40 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a1d      	ldr	r2, [pc, #116]	@ (8008aa8 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d004      	beq.n	8008a40 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a1c      	ldr	r2, [pc, #112]	@ (8008aac <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d10c      	bne.n	8008a5a <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	68ba      	ldr	r2, [r7, #8]
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	68ba      	ldr	r2, [r7, #8]
 8008a58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3714      	adds	r7, #20
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr
 8008a78:	40012c00 	.word	0x40012c00
 8008a7c:	50012c00 	.word	0x50012c00
 8008a80:	40013400 	.word	0x40013400
 8008a84:	50013400 	.word	0x50013400
 8008a88:	40000400 	.word	0x40000400
 8008a8c:	50000400 	.word	0x50000400
 8008a90:	40000800 	.word	0x40000800
 8008a94:	50000800 	.word	0x50000800
 8008a98:	40000c00 	.word	0x40000c00
 8008a9c:	50000c00 	.word	0x50000c00
 8008aa0:	40001800 	.word	0x40001800
 8008aa4:	50001800 	.word	0x50001800
 8008aa8:	40014000 	.word	0x40014000
 8008aac:	50014000 	.word	0x50014000

08008ab0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008aba:	2300      	movs	r3, #0
 8008abc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d101      	bne.n	8008acc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008ac8:	2302      	movs	r3, #2
 8008aca:	e07d      	b.n	8008bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	695b      	ldr	r3, [r3, #20]
 8008b24:	4313      	orrs	r3, r2
 8008b26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b32:	4313      	orrs	r3, r2
 8008b34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	699b      	ldr	r3, [r3, #24]
 8008b40:	041b      	lsls	r3, r3, #16
 8008b42:	4313      	orrs	r3, r2
 8008b44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	69db      	ldr	r3, [r3, #28]
 8008b50:	4313      	orrs	r3, r2
 8008b52:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a1e      	ldr	r2, [pc, #120]	@ (8008bd4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d00e      	beq.n	8008b7c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a1d      	ldr	r2, [pc, #116]	@ (8008bd8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d009      	beq.n	8008b7c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8008bdc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d004      	beq.n	8008b7c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a1a      	ldr	r2, [pc, #104]	@ (8008be0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d11c      	bne.n	8008bb6 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b86:	051b      	lsls	r3, r3, #20
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	6a1b      	ldr	r3, [r3, #32]
 8008b96:	4313      	orrs	r3, r2
 8008b98:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	68fa      	ldr	r2, [r7, #12]
 8008bbc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3714      	adds	r7, #20
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr
 8008bd4:	40012c00 	.word	0x40012c00
 8008bd8:	50012c00 	.word	0x50012c00
 8008bdc:	40013400 	.word	0x40013400
 8008be0:	50013400 	.word	0x50013400

08008be4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c00:	bf00      	nop
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008c14:	bf00      	nop
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008c28:	bf00      	nop
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008c3c:	bf00      	nop
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008c50:	bf00      	nop
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008c64:	bf00      	nop
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d101      	bne.n	8008c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e042      	b.n	8008d08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d106      	bne.n	8008c9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f7f8 fd97 	bl	80017c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2224      	movs	r2, #36	@ 0x24
 8008c9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f022 0201 	bic.w	r2, r2, #1
 8008cb0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d002      	beq.n	8008cc0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 fdde 	bl	800987c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 fc2d 	bl	8009520 <UART_SetConfig>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d101      	bne.n	8008cd0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e01b      	b.n	8008d08 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	685a      	ldr	r2, [r3, #4]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008cde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	689a      	ldr	r2, [r3, #8]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008cee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f042 0201 	orr.w	r2, r2, #1
 8008cfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 fe5d 	bl	80099c0 <UART_CheckIdleState>
 8008d06:	4603      	mov	r3, r0
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3708      	adds	r7, #8
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b08a      	sub	sp, #40	@ 0x28
 8008d14:	af02      	add	r7, sp, #8
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	603b      	str	r3, [r7, #0]
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d26:	2b20      	cmp	r3, #32
 8008d28:	f040 808b 	bne.w	8008e42 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d002      	beq.n	8008d38 <HAL_UART_Transmit+0x28>
 8008d32:	88fb      	ldrh	r3, [r7, #6]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d101      	bne.n	8008d3c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e083      	b.n	8008e44 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d46:	2b80      	cmp	r3, #128	@ 0x80
 8008d48:	d107      	bne.n	8008d5a <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	689a      	ldr	r2, [r3, #8]
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008d58:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2221      	movs	r2, #33	@ 0x21
 8008d66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008d6a:	f7f8 fec1 	bl	8001af0 <HAL_GetTick>
 8008d6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	88fa      	ldrh	r2, [r7, #6]
 8008d74:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	88fa      	ldrh	r2, [r7, #6]
 8008d7c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d88:	d108      	bne.n	8008d9c <HAL_UART_Transmit+0x8c>
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	691b      	ldr	r3, [r3, #16]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d104      	bne.n	8008d9c <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8008d92:	2300      	movs	r3, #0
 8008d94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	61bb      	str	r3, [r7, #24]
 8008d9a:	e003      	b.n	8008da4 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008da0:	2300      	movs	r3, #0
 8008da2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008da4:	e030      	b.n	8008e08 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	9300      	str	r3, [sp, #0]
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	2200      	movs	r2, #0
 8008dae:	2180      	movs	r1, #128	@ 0x80
 8008db0:	68f8      	ldr	r0, [r7, #12]
 8008db2:	f000 feaf 	bl	8009b14 <UART_WaitOnFlagUntilTimeout>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d005      	beq.n	8008dc8 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2220      	movs	r2, #32
 8008dc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008dc4:	2303      	movs	r3, #3
 8008dc6:	e03d      	b.n	8008e44 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10b      	bne.n	8008de6 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008dce:	69bb      	ldr	r3, [r7, #24]
 8008dd0:	881b      	ldrh	r3, [r3, #0]
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ddc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	3302      	adds	r3, #2
 8008de2:	61bb      	str	r3, [r7, #24]
 8008de4:	e007      	b.n	8008df6 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	781a      	ldrb	r2, [r3, #0]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	3301      	adds	r3, #1
 8008df4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	3b01      	subs	r3, #1
 8008e00:	b29a      	uxth	r2, r3
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d1c8      	bne.n	8008da6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	9300      	str	r3, [sp, #0]
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	2140      	movs	r1, #64	@ 0x40
 8008e1e:	68f8      	ldr	r0, [r7, #12]
 8008e20:	f000 fe78 	bl	8009b14 <UART_WaitOnFlagUntilTimeout>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d005      	beq.n	8008e36 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2220      	movs	r2, #32
 8008e2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008e32:	2303      	movs	r3, #3
 8008e34:	e006      	b.n	8008e44 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2220      	movs	r2, #32
 8008e3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	e000      	b.n	8008e44 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8008e42:	2302      	movs	r3, #2
  }
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3720      	adds	r7, #32
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b08a      	sub	sp, #40	@ 0x28
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	60b9      	str	r1, [r7, #8]
 8008e56:	4613      	mov	r3, r2
 8008e58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e60:	2b20      	cmp	r3, #32
 8008e62:	d13c      	bne.n	8008ede <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d002      	beq.n	8008e70 <HAL_UART_Receive_DMA+0x24>
 8008e6a:	88fb      	ldrh	r3, [r7, #6]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d101      	bne.n	8008e74 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008e70:	2301      	movs	r3, #1
 8008e72:	e035      	b.n	8008ee0 <HAL_UART_Receive_DMA+0x94>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2200      	movs	r2, #0
 8008e78:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a1a      	ldr	r2, [pc, #104]	@ (8008ee8 <HAL_UART_Receive_DMA+0x9c>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d024      	beq.n	8008ece <HAL_UART_Receive_DMA+0x82>
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a18      	ldr	r2, [pc, #96]	@ (8008eec <HAL_UART_Receive_DMA+0xa0>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d01f      	beq.n	8008ece <HAL_UART_Receive_DMA+0x82>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d018      	beq.n	8008ece <HAL_UART_Receive_DMA+0x82>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	e853 3f00 	ldrex	r3, [r3]
 8008ea8:	613b      	str	r3, [r7, #16]
   return(result);
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008eb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eba:	623b      	str	r3, [r7, #32]
 8008ebc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ebe:	69f9      	ldr	r1, [r7, #28]
 8008ec0:	6a3a      	ldr	r2, [r7, #32]
 8008ec2:	e841 2300 	strex	r3, r2, [r1]
 8008ec6:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ec8:	69bb      	ldr	r3, [r7, #24]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d1e6      	bne.n	8008e9c <HAL_UART_Receive_DMA+0x50>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008ece:	88fb      	ldrh	r3, [r7, #6]
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	68b9      	ldr	r1, [r7, #8]
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f000 fe8b 	bl	8009bf0 <UART_Start_Receive_DMA>
 8008eda:	4603      	mov	r3, r0
 8008edc:	e000      	b.n	8008ee0 <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008ede:	2302      	movs	r3, #2
  }
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3728      	adds	r7, #40	@ 0x28
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	44002400 	.word	0x44002400
 8008eec:	54002400 	.word	0x54002400

08008ef0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b0ae      	sub	sp, #184	@ 0xb8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	69db      	ldr	r3, [r3, #28]
 8008efe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008f16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008f1a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008f1e:	4013      	ands	r3, r2
 8008f20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 8008f24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d11b      	bne.n	8008f64 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008f2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008f30:	f003 0320 	and.w	r3, r3, #32
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d015      	beq.n	8008f64 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008f38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008f3c:	f003 0320 	and.w	r3, r3, #32
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d105      	bne.n	8008f50 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008f44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d009      	beq.n	8008f64 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	f000 82ac 	beq.w	80094b2 <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	4798      	blx	r3
      }
      return;
 8008f62:	e2a6      	b.n	80094b2 <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008f64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	f000 80fd 	beq.w	8009168 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008f6e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008f72:	4b7a      	ldr	r3, [pc, #488]	@ (800915c <HAL_UART_IRQHandler+0x26c>)
 8008f74:	4013      	ands	r3, r2
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d106      	bne.n	8008f88 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008f7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008f7e:	4b78      	ldr	r3, [pc, #480]	@ (8009160 <HAL_UART_IRQHandler+0x270>)
 8008f80:	4013      	ands	r3, r2
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	f000 80f0 	beq.w	8009168 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008f8c:	f003 0301 	and.w	r3, r3, #1
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d011      	beq.n	8008fb8 <HAL_UART_IRQHandler+0xc8>
 8008f94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00b      	beq.n	8008fb8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fae:	f043 0201 	orr.w	r2, r3, #1
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fb8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008fbc:	f003 0302 	and.w	r3, r3, #2
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d011      	beq.n	8008fe8 <HAL_UART_IRQHandler+0xf8>
 8008fc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fc8:	f003 0301 	and.w	r3, r3, #1
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00b      	beq.n	8008fe8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2202      	movs	r2, #2
 8008fd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fde:	f043 0204 	orr.w	r2, r3, #4
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fe8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008fec:	f003 0304 	and.w	r3, r3, #4
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d011      	beq.n	8009018 <HAL_UART_IRQHandler+0x128>
 8008ff4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ff8:	f003 0301 	and.w	r3, r3, #1
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d00b      	beq.n	8009018 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2204      	movs	r2, #4
 8009006:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800900e:	f043 0202 	orr.w	r2, r3, #2
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009018:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800901c:	f003 0308 	and.w	r3, r3, #8
 8009020:	2b00      	cmp	r3, #0
 8009022:	d017      	beq.n	8009054 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009024:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009028:	f003 0320 	and.w	r3, r3, #32
 800902c:	2b00      	cmp	r3, #0
 800902e:	d105      	bne.n	800903c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009030:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009034:	4b49      	ldr	r3, [pc, #292]	@ (800915c <HAL_UART_IRQHandler+0x26c>)
 8009036:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00b      	beq.n	8009054 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2208      	movs	r2, #8
 8009042:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800904a:	f043 0208 	orr.w	r2, r3, #8
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009054:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009058:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800905c:	2b00      	cmp	r3, #0
 800905e:	d012      	beq.n	8009086 <HAL_UART_IRQHandler+0x196>
 8009060:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009064:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00c      	beq.n	8009086 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009074:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800907c:	f043 0220 	orr.w	r2, r3, #32
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800908c:	2b00      	cmp	r3, #0
 800908e:	f000 8212 	beq.w	80094b6 <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009092:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009096:	f003 0320 	and.w	r3, r3, #32
 800909a:	2b00      	cmp	r3, #0
 800909c:	d013      	beq.n	80090c6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800909e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80090a2:	f003 0320 	and.w	r3, r3, #32
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d105      	bne.n	80090b6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80090aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d007      	beq.n	80090c6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d003      	beq.n	80090c6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090da:	2b40      	cmp	r3, #64	@ 0x40
 80090dc:	d005      	beq.n	80090ea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80090de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80090e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d02e      	beq.n	8009148 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 feb9 	bl	8009e62 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090fa:	2b40      	cmp	r3, #64	@ 0x40
 80090fc:	d120      	bne.n	8009140 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009104:	2b00      	cmp	r3, #0
 8009106:	d017      	beq.n	8009138 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800910e:	4a15      	ldr	r2, [pc, #84]	@ (8009164 <HAL_UART_IRQHandler+0x274>)
 8009110:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009118:	4618      	mov	r0, r3
 800911a:	f7f9 f8b1 	bl	8002280 <HAL_DMA_Abort_IT>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d019      	beq.n	8009158 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800912a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009132:	4610      	mov	r0, r2
 8009134:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009136:	e00f      	b.n	8009158 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 f9db 	bl	80094f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800913e:	e00b      	b.n	8009158 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 f9d7 	bl	80094f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009146:	e007      	b.n	8009158 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f9d3 	bl	80094f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009156:	e1ae      	b.n	80094b6 <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009158:	bf00      	nop
    return;
 800915a:	e1ac      	b.n	80094b6 <HAL_UART_IRQHandler+0x5c6>
 800915c:	10000001 	.word	0x10000001
 8009160:	04000120 	.word	0x04000120
 8009164:	0800a0df 	.word	0x0800a0df

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800916c:	2b01      	cmp	r3, #1
 800916e:	f040 8142 	bne.w	80093f6 <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009172:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009176:	f003 0310 	and.w	r3, r3, #16
 800917a:	2b00      	cmp	r3, #0
 800917c:	f000 813b 	beq.w	80093f6 <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009180:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009184:	f003 0310 	and.w	r3, r3, #16
 8009188:	2b00      	cmp	r3, #0
 800918a:	f000 8134 	beq.w	80093f6 <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2210      	movs	r2, #16
 8009194:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091a0:	2b40      	cmp	r3, #64	@ 0x40
 80091a2:	f040 80aa 	bne.w	80092fa <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80091b0:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 80091b4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	f000 8084 	beq.w	80092c6 <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80091c4:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d27c      	bcs.n	80092c6 <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 80091d2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091de:	2b81      	cmp	r3, #129	@ 0x81
 80091e0:	d060      	beq.n	80092a4 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80091ea:	e853 3f00 	ldrex	r3, [r3]
 80091ee:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80091f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80091f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80091f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	461a      	mov	r2, r3
 8009200:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009204:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009208:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800920c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009210:	e841 2300 	strex	r3, r2, [r1]
 8009214:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009216:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009218:	2b00      	cmp	r3, #0
 800921a:	d1e2      	bne.n	80091e2 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	3308      	adds	r3, #8
 8009222:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009224:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009226:	e853 3f00 	ldrex	r3, [r3]
 800922a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800922c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800922e:	f023 0301 	bic.w	r3, r3, #1
 8009232:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	3308      	adds	r3, #8
 800923c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009240:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009242:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009244:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009246:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009248:	e841 2300 	strex	r3, r2, [r1]
 800924c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800924e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009250:	2b00      	cmp	r3, #0
 8009252:	d1e3      	bne.n	800921c <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2220      	movs	r2, #32
 8009258:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009268:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800926a:	e853 3f00 	ldrex	r3, [r3]
 800926e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009270:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009272:	f023 0310 	bic.w	r3, r3, #16
 8009276:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	461a      	mov	r2, r3
 8009280:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009284:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009286:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009288:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800928a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800928c:	e841 2300 	strex	r3, r2, [r1]
 8009290:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009292:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009294:	2b00      	cmp	r3, #0
 8009296:	d1e4      	bne.n	8009262 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800929e:	4618      	mov	r0, r3
 80092a0:	f7f8 ff72 	bl	8002188 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2202      	movs	r2, #2
 80092a8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	1ad3      	subs	r3, r2, r3
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	4619      	mov	r1, r3
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 f922 	bl	8009508 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80092c4:	e0f9      	b.n	80094ba <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80092cc:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 80092d0:	429a      	cmp	r2, r3
 80092d2:	f040 80f2 	bne.w	80094ba <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092de:	2b81      	cmp	r3, #129	@ 0x81
 80092e0:	f040 80eb 	bne.w	80094ba <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2202      	movs	r2, #2
 80092e8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80092f0:	4619      	mov	r1, r3
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 f908 	bl	8009508 <HAL_UARTEx_RxEventCallback>
      return;
 80092f8:	e0df      	b.n	80094ba <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009306:	b29b      	uxth	r3, r3
 8009308:	1ad3      	subs	r3, r2, r3
 800930a:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009314:	b29b      	uxth	r3, r3
 8009316:	2b00      	cmp	r3, #0
 8009318:	f000 80d1 	beq.w	80094be <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 800931c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8009320:	2b00      	cmp	r3, #0
 8009322:	f000 80cc 	beq.w	80094be <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800932e:	e853 3f00 	ldrex	r3, [r3]
 8009332:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009336:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800933a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	461a      	mov	r2, r3
 8009344:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009348:	647b      	str	r3, [r7, #68]	@ 0x44
 800934a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800934e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009350:	e841 2300 	strex	r3, r2, [r1]
 8009354:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009358:	2b00      	cmp	r3, #0
 800935a:	d1e4      	bne.n	8009326 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	3308      	adds	r3, #8
 8009362:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009366:	e853 3f00 	ldrex	r3, [r3]
 800936a:	623b      	str	r3, [r7, #32]
   return(result);
 800936c:	6a3b      	ldr	r3, [r7, #32]
 800936e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009372:	f023 0301 	bic.w	r3, r3, #1
 8009376:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	3308      	adds	r3, #8
 8009380:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009384:	633a      	str	r2, [r7, #48]	@ 0x30
 8009386:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009388:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800938a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800938c:	e841 2300 	strex	r3, r2, [r1]
 8009390:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009394:	2b00      	cmp	r3, #0
 8009396:	d1e1      	bne.n	800935c <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2220      	movs	r2, #32
 800939c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2200      	movs	r2, #0
 80093aa:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	e853 3f00 	ldrex	r3, [r3]
 80093b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f023 0310 	bic.w	r3, r3, #16
 80093c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	461a      	mov	r2, r3
 80093ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80093ce:	61fb      	str	r3, [r7, #28]
 80093d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d2:	69b9      	ldr	r1, [r7, #24]
 80093d4:	69fa      	ldr	r2, [r7, #28]
 80093d6:	e841 2300 	strex	r3, r2, [r1]
 80093da:	617b      	str	r3, [r7, #20]
   return(result);
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d1e4      	bne.n	80093ac <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2202      	movs	r2, #2
 80093e6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80093e8:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80093ec:	4619      	mov	r1, r3
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 f88a 	bl	8009508 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80093f4:	e063      	b.n	80094be <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80093f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80093fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00e      	beq.n	8009420 <HAL_UART_IRQHandler+0x530>
 8009402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800940a:	2b00      	cmp	r3, #0
 800940c:	d008      	beq.n	8009420 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009416:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 fe9d 	bl	800a158 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800941e:	e051      	b.n	80094c4 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009420:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009428:	2b00      	cmp	r3, #0
 800942a:	d014      	beq.n	8009456 <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800942c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009430:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009434:	2b00      	cmp	r3, #0
 8009436:	d105      	bne.n	8009444 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009438:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800943c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009440:	2b00      	cmp	r3, #0
 8009442:	d008      	beq.n	8009456 <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009448:	2b00      	cmp	r3, #0
 800944a:	d03a      	beq.n	80094c2 <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	4798      	blx	r3
    }
    return;
 8009454:	e035      	b.n	80094c2 <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009456:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800945a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800945e:	2b00      	cmp	r3, #0
 8009460:	d009      	beq.n	8009476 <HAL_UART_IRQHandler+0x586>
 8009462:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800946a:	2b00      	cmp	r3, #0
 800946c:	d003      	beq.n	8009476 <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 fe47 	bl	800a102 <UART_EndTransmit_IT>
    return;
 8009474:	e026      	b.n	80094c4 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009476:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800947a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800947e:	2b00      	cmp	r3, #0
 8009480:	d009      	beq.n	8009496 <HAL_UART_IRQHandler+0x5a6>
 8009482:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009486:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800948a:	2b00      	cmp	r3, #0
 800948c:	d003      	beq.n	8009496 <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 fe76 	bl	800a180 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009494:	e016      	b.n	80094c4 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009496:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800949a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d010      	beq.n	80094c4 <HAL_UART_IRQHandler+0x5d4>
 80094a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	da0c      	bge.n	80094c4 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 fe5e 	bl	800a16c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80094b0:	e008      	b.n	80094c4 <HAL_UART_IRQHandler+0x5d4>
      return;
 80094b2:	bf00      	nop
 80094b4:	e006      	b.n	80094c4 <HAL_UART_IRQHandler+0x5d4>
    return;
 80094b6:	bf00      	nop
 80094b8:	e004      	b.n	80094c4 <HAL_UART_IRQHandler+0x5d4>
      return;
 80094ba:	bf00      	nop
 80094bc:	e002      	b.n	80094c4 <HAL_UART_IRQHandler+0x5d4>
      return;
 80094be:	bf00      	nop
 80094c0:	e000      	b.n	80094c4 <HAL_UART_IRQHandler+0x5d4>
    return;
 80094c2:	bf00      	nop
  }
}
 80094c4:	37b8      	adds	r7, #184	@ 0xb8
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop

080094cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80094d4:	bf00      	nop
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80094e8:	bf00      	nop
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80094fc:	bf00      	nop
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	460b      	mov	r3, r1
 8009512:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009514:	bf00      	nop
 8009516:	370c      	adds	r7, #12
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr

08009520 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009524:	b094      	sub	sp, #80	@ 0x50
 8009526:	af00      	add	r7, sp, #0
 8009528:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800952a:	2300      	movs	r3, #0
 800952c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	4b83      	ldr	r3, [pc, #524]	@ (8009744 <UART_SetConfig+0x224>)
 8009536:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800953a:	689a      	ldr	r2, [r3, #8]
 800953c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800953e:	691b      	ldr	r3, [r3, #16]
 8009540:	431a      	orrs	r2, r3
 8009542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009544:	695b      	ldr	r3, [r3, #20]
 8009546:	431a      	orrs	r2, r3
 8009548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800954a:	69db      	ldr	r3, [r3, #28]
 800954c:	4313      	orrs	r3, r2
 800954e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	497c      	ldr	r1, [pc, #496]	@ (8009748 <UART_SetConfig+0x228>)
 8009558:	4019      	ands	r1, r3
 800955a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009560:	430b      	orrs	r3, r1
 8009562:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800956e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009570:	68d9      	ldr	r1, [r3, #12]
 8009572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	ea40 0301 	orr.w	r3, r0, r1
 800957a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800957c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800957e:	699b      	ldr	r3, [r3, #24]
 8009580:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	4b6f      	ldr	r3, [pc, #444]	@ (8009744 <UART_SetConfig+0x224>)
 8009588:	429a      	cmp	r2, r3
 800958a:	d009      	beq.n	80095a0 <UART_SetConfig+0x80>
 800958c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800958e:	681a      	ldr	r2, [r3, #0]
 8009590:	4b6e      	ldr	r3, [pc, #440]	@ (800974c <UART_SetConfig+0x22c>)
 8009592:	429a      	cmp	r2, r3
 8009594:	d004      	beq.n	80095a0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009598:	6a1a      	ldr	r2, [r3, #32]
 800959a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800959c:	4313      	orrs	r3, r2
 800959e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80095a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80095aa:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80095ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095b4:	430b      	orrs	r3, r1
 80095b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80095b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095be:	f023 000f 	bic.w	r0, r3, #15
 80095c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095c4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80095c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	ea40 0301 	orr.w	r3, r0, r1
 80095ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	4b5e      	ldr	r3, [pc, #376]	@ (8009750 <UART_SetConfig+0x230>)
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d102      	bne.n	80095e0 <UART_SetConfig+0xc0>
 80095da:	2301      	movs	r3, #1
 80095dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095de:	e032      	b.n	8009646 <UART_SetConfig+0x126>
 80095e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	4b5b      	ldr	r3, [pc, #364]	@ (8009754 <UART_SetConfig+0x234>)
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d102      	bne.n	80095f0 <UART_SetConfig+0xd0>
 80095ea:	2302      	movs	r3, #2
 80095ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095ee:	e02a      	b.n	8009646 <UART_SetConfig+0x126>
 80095f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	4b58      	ldr	r3, [pc, #352]	@ (8009758 <UART_SetConfig+0x238>)
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d102      	bne.n	8009600 <UART_SetConfig+0xe0>
 80095fa:	2304      	movs	r3, #4
 80095fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095fe:	e022      	b.n	8009646 <UART_SetConfig+0x126>
 8009600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	4b55      	ldr	r3, [pc, #340]	@ (800975c <UART_SetConfig+0x23c>)
 8009606:	429a      	cmp	r2, r3
 8009608:	d102      	bne.n	8009610 <UART_SetConfig+0xf0>
 800960a:	2308      	movs	r3, #8
 800960c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800960e:	e01a      	b.n	8009646 <UART_SetConfig+0x126>
 8009610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	4b52      	ldr	r3, [pc, #328]	@ (8009760 <UART_SetConfig+0x240>)
 8009616:	429a      	cmp	r2, r3
 8009618:	d102      	bne.n	8009620 <UART_SetConfig+0x100>
 800961a:	2310      	movs	r3, #16
 800961c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800961e:	e012      	b.n	8009646 <UART_SetConfig+0x126>
 8009620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	4b4f      	ldr	r3, [pc, #316]	@ (8009764 <UART_SetConfig+0x244>)
 8009626:	429a      	cmp	r2, r3
 8009628:	d102      	bne.n	8009630 <UART_SetConfig+0x110>
 800962a:	2320      	movs	r3, #32
 800962c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800962e:	e00a      	b.n	8009646 <UART_SetConfig+0x126>
 8009630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	4b43      	ldr	r3, [pc, #268]	@ (8009744 <UART_SetConfig+0x224>)
 8009636:	429a      	cmp	r2, r3
 8009638:	d103      	bne.n	8009642 <UART_SetConfig+0x122>
 800963a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800963e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009640:	e001      	b.n	8009646 <UART_SetConfig+0x126>
 8009642:	2300      	movs	r3, #0
 8009644:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	4b3e      	ldr	r3, [pc, #248]	@ (8009744 <UART_SetConfig+0x224>)
 800964c:	429a      	cmp	r2, r3
 800964e:	d005      	beq.n	800965c <UART_SetConfig+0x13c>
 8009650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	4b3d      	ldr	r3, [pc, #244]	@ (800974c <UART_SetConfig+0x22c>)
 8009656:	429a      	cmp	r2, r3
 8009658:	f040 8088 	bne.w	800976c <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800965c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800965e:	2200      	movs	r2, #0
 8009660:	623b      	str	r3, [r7, #32]
 8009662:	627a      	str	r2, [r7, #36]	@ 0x24
 8009664:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009668:	f7fc fa40 	bl	8005aec <HAL_RCCEx_GetPeriphCLKFreq>
 800966c:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800966e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009670:	2b00      	cmp	r3, #0
 8009672:	f000 80eb 	beq.w	800984c <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800967a:	4a3b      	ldr	r2, [pc, #236]	@ (8009768 <UART_SetConfig+0x248>)
 800967c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009680:	461a      	mov	r2, r3
 8009682:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009684:	fbb3 f3f2 	udiv	r3, r3, r2
 8009688:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800968a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800968c:	685a      	ldr	r2, [r3, #4]
 800968e:	4613      	mov	r3, r2
 8009690:	005b      	lsls	r3, r3, #1
 8009692:	4413      	add	r3, r2
 8009694:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009696:	429a      	cmp	r2, r3
 8009698:	d305      	bcc.n	80096a6 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800969a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80096a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d903      	bls.n	80096ae <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 80096a6:	2301      	movs	r3, #1
 80096a8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80096ac:	e048      	b.n	8009740 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096b0:	2200      	movs	r2, #0
 80096b2:	61bb      	str	r3, [r7, #24]
 80096b4:	61fa      	str	r2, [r7, #28]
 80096b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ba:	4a2b      	ldr	r2, [pc, #172]	@ (8009768 <UART_SetConfig+0x248>)
 80096bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	2200      	movs	r2, #0
 80096c4:	613b      	str	r3, [r7, #16]
 80096c6:	617a      	str	r2, [r7, #20]
 80096c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80096cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80096d0:	f7f7 f920 	bl	8000914 <__aeabi_uldivmod>
 80096d4:	4602      	mov	r2, r0
 80096d6:	460b      	mov	r3, r1
 80096d8:	4610      	mov	r0, r2
 80096da:	4619      	mov	r1, r3
 80096dc:	f04f 0200 	mov.w	r2, #0
 80096e0:	f04f 0300 	mov.w	r3, #0
 80096e4:	020b      	lsls	r3, r1, #8
 80096e6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80096ea:	0202      	lsls	r2, r0, #8
 80096ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80096ee:	6849      	ldr	r1, [r1, #4]
 80096f0:	0849      	lsrs	r1, r1, #1
 80096f2:	2000      	movs	r0, #0
 80096f4:	460c      	mov	r4, r1
 80096f6:	4605      	mov	r5, r0
 80096f8:	eb12 0804 	adds.w	r8, r2, r4
 80096fc:	eb43 0905 	adc.w	r9, r3, r5
 8009700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	60bb      	str	r3, [r7, #8]
 8009708:	60fa      	str	r2, [r7, #12]
 800970a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800970e:	4640      	mov	r0, r8
 8009710:	4649      	mov	r1, r9
 8009712:	f7f7 f8ff 	bl	8000914 <__aeabi_uldivmod>
 8009716:	4602      	mov	r2, r0
 8009718:	460b      	mov	r3, r1
 800971a:	4613      	mov	r3, r2
 800971c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800971e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009720:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009724:	d308      	bcc.n	8009738 <UART_SetConfig+0x218>
 8009726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009728:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800972c:	d204      	bcs.n	8009738 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800972e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009734:	60da      	str	r2, [r3, #12]
 8009736:	e003      	b.n	8009740 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8009738:	2301      	movs	r3, #1
 800973a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800973e:	e085      	b.n	800984c <UART_SetConfig+0x32c>
 8009740:	e084      	b.n	800984c <UART_SetConfig+0x32c>
 8009742:	bf00      	nop
 8009744:	44002400 	.word	0x44002400
 8009748:	cfff69f3 	.word	0xcfff69f3
 800974c:	54002400 	.word	0x54002400
 8009750:	40013800 	.word	0x40013800
 8009754:	40004400 	.word	0x40004400
 8009758:	40004800 	.word	0x40004800
 800975c:	40004c00 	.word	0x40004c00
 8009760:	40005000 	.word	0x40005000
 8009764:	40006400 	.word	0x40006400
 8009768:	0800a464 	.word	0x0800a464
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800976c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800976e:	69db      	ldr	r3, [r3, #28]
 8009770:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009774:	d13c      	bne.n	80097f0 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009776:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009778:	2200      	movs	r2, #0
 800977a:	603b      	str	r3, [r7, #0]
 800977c:	607a      	str	r2, [r7, #4]
 800977e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009782:	f7fc f9b3 	bl	8005aec <HAL_RCCEx_GetPeriphCLKFreq>
 8009786:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009788:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800978a:	2b00      	cmp	r3, #0
 800978c:	d05e      	beq.n	800984c <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800978e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009792:	4a39      	ldr	r2, [pc, #228]	@ (8009878 <UART_SetConfig+0x358>)
 8009794:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009798:	461a      	mov	r2, r3
 800979a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800979c:	fbb3 f3f2 	udiv	r3, r3, r2
 80097a0:	005a      	lsls	r2, r3, #1
 80097a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	085b      	lsrs	r3, r3, #1
 80097a8:	441a      	add	r2, r3
 80097aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80097b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097b6:	2b0f      	cmp	r3, #15
 80097b8:	d916      	bls.n	80097e8 <UART_SetConfig+0x2c8>
 80097ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097c0:	d212      	bcs.n	80097e8 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80097c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	f023 030f 	bic.w	r3, r3, #15
 80097ca:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80097cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097ce:	085b      	lsrs	r3, r3, #1
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	f003 0307 	and.w	r3, r3, #7
 80097d6:	b29a      	uxth	r2, r3
 80097d8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80097da:	4313      	orrs	r3, r2
 80097dc:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80097de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80097e4:	60da      	str	r2, [r3, #12]
 80097e6:	e031      	b.n	800984c <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80097e8:	2301      	movs	r3, #1
 80097ea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80097ee:	e02d      	b.n	800984c <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80097f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097f2:	2200      	movs	r2, #0
 80097f4:	469a      	mov	sl, r3
 80097f6:	4693      	mov	fp, r2
 80097f8:	4650      	mov	r0, sl
 80097fa:	4659      	mov	r1, fp
 80097fc:	f7fc f976 	bl	8005aec <HAL_RCCEx_GetPeriphCLKFreq>
 8009800:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8009802:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009804:	2b00      	cmp	r3, #0
 8009806:	d021      	beq.n	800984c <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800980a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800980c:	4a1a      	ldr	r2, [pc, #104]	@ (8009878 <UART_SetConfig+0x358>)
 800980e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009812:	461a      	mov	r2, r3
 8009814:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009816:	fbb3 f2f2 	udiv	r2, r3, r2
 800981a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	085b      	lsrs	r3, r3, #1
 8009820:	441a      	add	r2, r3
 8009822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	fbb2 f3f3 	udiv	r3, r2, r3
 800982a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800982c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800982e:	2b0f      	cmp	r3, #15
 8009830:	d909      	bls.n	8009846 <UART_SetConfig+0x326>
 8009832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009838:	d205      	bcs.n	8009846 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800983a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800983c:	b29a      	uxth	r2, r3
 800983e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	60da      	str	r2, [r3, #12]
 8009844:	e002      	b.n	800984c <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800984c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800984e:	2201      	movs	r2, #1
 8009850:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009856:	2201      	movs	r2, #1
 8009858:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800985c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800985e:	2200      	movs	r2, #0
 8009860:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009864:	2200      	movs	r2, #0
 8009866:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009868:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800986c:	4618      	mov	r0, r3
 800986e:	3750      	adds	r7, #80	@ 0x50
 8009870:	46bd      	mov	sp, r7
 8009872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009876:	bf00      	nop
 8009878:	0800a464 	.word	0x0800a464

0800987c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009888:	f003 0308 	and.w	r3, r3, #8
 800988c:	2b00      	cmp	r3, #0
 800988e:	d00a      	beq.n	80098a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	430a      	orrs	r2, r1
 80098a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098aa:	f003 0301 	and.w	r3, r3, #1
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d00a      	beq.n	80098c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	430a      	orrs	r2, r1
 80098c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098cc:	f003 0302 	and.w	r3, r3, #2
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d00a      	beq.n	80098ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	430a      	orrs	r2, r1
 80098e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098ee:	f003 0304 	and.w	r3, r3, #4
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00a      	beq.n	800990c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	430a      	orrs	r2, r1
 800990a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009910:	f003 0310 	and.w	r3, r3, #16
 8009914:	2b00      	cmp	r3, #0
 8009916:	d00a      	beq.n	800992e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	430a      	orrs	r2, r1
 800992c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009932:	f003 0320 	and.w	r3, r3, #32
 8009936:	2b00      	cmp	r3, #0
 8009938:	d00a      	beq.n	8009950 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	430a      	orrs	r2, r1
 800994e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009958:	2b00      	cmp	r3, #0
 800995a:	d01a      	beq.n	8009992 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	430a      	orrs	r2, r1
 8009970:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009976:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800997a:	d10a      	bne.n	8009992 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	430a      	orrs	r2, r1
 8009990:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800999a:	2b00      	cmp	r3, #0
 800999c:	d00a      	beq.n	80099b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	430a      	orrs	r2, r1
 80099b2:	605a      	str	r2, [r3, #4]
  }
}
 80099b4:	bf00      	nop
 80099b6:	370c      	adds	r7, #12
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr

080099c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b098      	sub	sp, #96	@ 0x60
 80099c4:	af02      	add	r7, sp, #8
 80099c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80099d0:	f7f8 f88e 	bl	8001af0 <HAL_GetTick>
 80099d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f003 0308 	and.w	r3, r3, #8
 80099e0:	2b08      	cmp	r3, #8
 80099e2:	d12f      	bne.n	8009a44 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80099e8:	9300      	str	r3, [sp, #0]
 80099ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099ec:	2200      	movs	r2, #0
 80099ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 f88e 	bl	8009b14 <UART_WaitOnFlagUntilTimeout>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d022      	beq.n	8009a44 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a06:	e853 3f00 	ldrex	r3, [r3]
 8009a0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a12:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	461a      	mov	r2, r3
 8009a1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a1e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a24:	e841 2300 	strex	r3, r2, [r1]
 8009a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d1e6      	bne.n	80099fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2220      	movs	r2, #32
 8009a34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a40:	2303      	movs	r3, #3
 8009a42:	e063      	b.n	8009b0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f003 0304 	and.w	r3, r3, #4
 8009a4e:	2b04      	cmp	r3, #4
 8009a50:	d149      	bne.n	8009ae6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a52:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009a56:	9300      	str	r3, [sp, #0]
 8009a58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 f857 	bl	8009b14 <UART_WaitOnFlagUntilTimeout>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d03c      	beq.n	8009ae6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a74:	e853 3f00 	ldrex	r3, [r3]
 8009a78:	623b      	str	r3, [r7, #32]
   return(result);
 8009a7a:	6a3b      	ldr	r3, [r7, #32]
 8009a7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	461a      	mov	r2, r3
 8009a88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a92:	e841 2300 	strex	r3, r2, [r1]
 8009a96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d1e6      	bne.n	8009a6c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	3308      	adds	r3, #8
 8009aa4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	e853 3f00 	ldrex	r3, [r3]
 8009aac:	60fb      	str	r3, [r7, #12]
   return(result);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f023 0301 	bic.w	r3, r3, #1
 8009ab4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	3308      	adds	r3, #8
 8009abc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009abe:	61fa      	str	r2, [r7, #28]
 8009ac0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac2:	69b9      	ldr	r1, [r7, #24]
 8009ac4:	69fa      	ldr	r2, [r7, #28]
 8009ac6:	e841 2300 	strex	r3, r2, [r1]
 8009aca:	617b      	str	r3, [r7, #20]
   return(result);
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d1e5      	bne.n	8009a9e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2220      	movs	r2, #32
 8009ad6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ae2:	2303      	movs	r3, #3
 8009ae4:	e012      	b.n	8009b0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2220      	movs	r2, #32
 8009aea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2220      	movs	r2, #32
 8009af2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b0a:	2300      	movs	r3, #0
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3758      	adds	r7, #88	@ 0x58
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	603b      	str	r3, [r7, #0]
 8009b20:	4613      	mov	r3, r2
 8009b22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b24:	e04f      	b.n	8009bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b2c:	d04b      	beq.n	8009bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b2e:	f7f7 ffdf 	bl	8001af0 <HAL_GetTick>
 8009b32:	4602      	mov	r2, r0
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	1ad3      	subs	r3, r2, r3
 8009b38:	69ba      	ldr	r2, [r7, #24]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d302      	bcc.n	8009b44 <UART_WaitOnFlagUntilTimeout+0x30>
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d101      	bne.n	8009b48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009b44:	2303      	movs	r3, #3
 8009b46:	e04e      	b.n	8009be6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f003 0304 	and.w	r3, r3, #4
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d037      	beq.n	8009bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	2b80      	cmp	r3, #128	@ 0x80
 8009b5a:	d034      	beq.n	8009bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	2b40      	cmp	r3, #64	@ 0x40
 8009b60:	d031      	beq.n	8009bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	69db      	ldr	r3, [r3, #28]
 8009b68:	f003 0308 	and.w	r3, r3, #8
 8009b6c:	2b08      	cmp	r3, #8
 8009b6e:	d110      	bne.n	8009b92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2208      	movs	r2, #8
 8009b76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f000 f972 	bl	8009e62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2208      	movs	r2, #8
 8009b82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	e029      	b.n	8009be6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	69db      	ldr	r3, [r3, #28]
 8009b98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ba0:	d111      	bne.n	8009bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009baa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f000 f958 	bl	8009e62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2220      	movs	r2, #32
 8009bb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009bc2:	2303      	movs	r3, #3
 8009bc4:	e00f      	b.n	8009be6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	69da      	ldr	r2, [r3, #28]
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	4013      	ands	r3, r2
 8009bd0:	68ba      	ldr	r2, [r7, #8]
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	bf0c      	ite	eq
 8009bd6:	2301      	moveq	r3, #1
 8009bd8:	2300      	movne	r3, #0
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	461a      	mov	r2, r3
 8009bde:	79fb      	ldrb	r3, [r7, #7]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d0a0      	beq.n	8009b26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3710      	adds	r7, #16
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
	...

08009bf0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b098      	sub	sp, #96	@ 0x60
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	4613      	mov	r3, r2
 8009bfc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 8009bfe:	88fb      	ldrh	r3, [r7, #6]
 8009c00:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

  huart->pRxBuffPtr = pData;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	68ba      	ldr	r2, [r7, #8]
 8009c08:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	88fa      	ldrh	r2, [r7, #6]
 8009c0e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2200      	movs	r2, #0
 8009c16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2222      	movs	r2, #34	@ 0x22
 8009c1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d07c      	beq.n	8009d26 <UART_Start_Receive_DMA+0x136>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c32:	4a68      	ldr	r2, [pc, #416]	@ (8009dd4 <UART_Start_Receive_DMA+0x1e4>)
 8009c34:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c3c:	4a66      	ldr	r2, [pc, #408]	@ (8009dd8 <UART_Start_Receive_DMA+0x1e8>)
 8009c3e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c46:	4a65      	ldr	r2, [pc, #404]	@ (8009ddc <UART_Start_Receive_DMA+0x1ec>)
 8009c48:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c50:	2200      	movs	r2, #0
 8009c52:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	689b      	ldr	r3, [r3, #8]
 8009c58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c5c:	d107      	bne.n	8009c6e <UART_Start_Receive_DMA+0x7e>
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	691b      	ldr	r3, [r3, #16]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d103      	bne.n	8009c6e <UART_Start_Receive_DMA+0x7e>
    {
      nbByte = Size * 2U;
 8009c66:	88fb      	ldrh	r3, [r7, #6]
 8009c68:	005b      	lsls	r3, r3, #1
 8009c6a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }

    /* Check linked list mode */
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d034      	beq.n	8009ce8 <UART_Start_Receive_DMA+0xf8>
    {
      if ((huart->hdmarx->LinkedListQueue != NULL) && (huart->hdmarx->LinkedListQueue->Head != NULL))
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d02a      	beq.n	8009ce0 <UART_Start_Receive_DMA+0xf0>
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d023      	beq.n	8009ce0 <UART_Start_Receive_DMA+0xf0>
      {
        /* Set DMA data size */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8009ca6:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
          (uint32_t)&huart->Instance->RDR;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f103 0224 	add.w	r2, r3, #36	@ 0x24
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)huart->pRxBuffPtr;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	611a      	str	r2, [r3, #16]

        /* Enable the UART receive DMA channel */
        status = HAL_DMAEx_List_Start_IT(huart->hdmarx);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f7f8 ff44 	bl	8002b60 <HAL_DMAEx_List_Start_IT>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009cde:	e014      	b.n	8009d0a <UART_Start_Receive_DMA+0x11a>
      }
      else
      {
        /* Update status */
        status = HAL_ERROR;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009ce6:	e010      	b.n	8009d0a <UART_Start_Receive_DMA+0x11a>
      }
    }
    else
    {
      /* Enable the UART receive DMA channel */
      status = HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, nbByte);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	3324      	adds	r3, #36	@ 0x24
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8009d00:	f7f8 f9e2 	bl	80020c8 <HAL_DMA_Start_IT>
 8009d04:	4603      	mov	r3, r0
 8009d06:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    }

    if (status != HAL_OK)
 8009d0a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d009      	beq.n	8009d26 <UART_Start_Receive_DMA+0x136>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2210      	movs	r2, #16
 8009d16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2220      	movs	r2, #32
 8009d1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	e051      	b.n	8009dca <UART_Start_Receive_DMA+0x1da>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	691b      	ldr	r3, [r3, #16]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d018      	beq.n	8009d60 <UART_Start_Receive_DMA+0x170>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d36:	e853 3f00 	ldrex	r3, [r3]
 8009d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d42:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	461a      	mov	r2, r3
 8009d4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009d4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d4e:	64ba      	str	r2, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d50:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009d52:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009d54:	e841 2300 	strex	r3, r2, [r1]
 8009d58:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009d5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d1e6      	bne.n	8009d2e <UART_Start_Receive_DMA+0x13e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	3308      	adds	r3, #8
 8009d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d6a:	e853 3f00 	ldrex	r3, [r3]
 8009d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d72:	f043 0301 	orr.w	r3, r3, #1
 8009d76:	657b      	str	r3, [r7, #84]	@ 0x54
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	3308      	adds	r3, #8
 8009d7e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009d80:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009d82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d84:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009d86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009d88:	e841 2300 	strex	r3, r2, [r1]
 8009d8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d1e5      	bne.n	8009d60 <UART_Start_Receive_DMA+0x170>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	3308      	adds	r3, #8
 8009d9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	e853 3f00 	ldrex	r3, [r3]
 8009da2:	617b      	str	r3, [r7, #20]
   return(result);
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009daa:	653b      	str	r3, [r7, #80]	@ 0x50
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	3308      	adds	r3, #8
 8009db2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009db4:	627a      	str	r2, [r7, #36]	@ 0x24
 8009db6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db8:	6a39      	ldr	r1, [r7, #32]
 8009dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009dbc:	e841 2300 	strex	r3, r2, [r1]
 8009dc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8009dc2:	69fb      	ldr	r3, [r7, #28]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d1e5      	bne.n	8009d94 <UART_Start_Receive_DMA+0x1a4>

  return HAL_OK;
 8009dc8:	2300      	movs	r3, #0
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3760      	adds	r7, #96	@ 0x60
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	08009f2f 	.word	0x08009f2f
 8009dd8:	0800a021 	.word	0x0800a021
 8009ddc:	0800a05f 	.word	0x0800a05f

08009de0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b08f      	sub	sp, #60	@ 0x3c
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dee:	6a3b      	ldr	r3, [r7, #32]
 8009df0:	e853 3f00 	ldrex	r3, [r3]
 8009df4:	61fb      	str	r3, [r7, #28]
   return(result);
 8009df6:	69fb      	ldr	r3, [r7, #28]
 8009df8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009dfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	461a      	mov	r2, r3
 8009e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e08:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e0e:	e841 2300 	strex	r3, r2, [r1]
 8009e12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d1e6      	bne.n	8009de8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	3308      	adds	r3, #8
 8009e20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	e853 3f00 	ldrex	r3, [r3]
 8009e28:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009e30:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	3308      	adds	r3, #8
 8009e38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e3a:	61ba      	str	r2, [r7, #24]
 8009e3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3e:	6979      	ldr	r1, [r7, #20]
 8009e40:	69ba      	ldr	r2, [r7, #24]
 8009e42:	e841 2300 	strex	r3, r2, [r1]
 8009e46:	613b      	str	r3, [r7, #16]
   return(result);
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d1e5      	bne.n	8009e1a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2220      	movs	r2, #32
 8009e52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009e56:	bf00      	nop
 8009e58:	373c      	adds	r7, #60	@ 0x3c
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr

08009e62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e62:	b480      	push	{r7}
 8009e64:	b095      	sub	sp, #84	@ 0x54
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e72:	e853 3f00 	ldrex	r3, [r3]
 8009e76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	461a      	mov	r2, r3
 8009e86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e88:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e8a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009e8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009e90:	e841 2300 	strex	r3, r2, [r1]
 8009e94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d1e6      	bne.n	8009e6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	3308      	adds	r3, #8
 8009ea2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea4:	6a3b      	ldr	r3, [r7, #32]
 8009ea6:	e853 3f00 	ldrex	r3, [r3]
 8009eaa:	61fb      	str	r3, [r7, #28]
   return(result);
 8009eac:	69fb      	ldr	r3, [r7, #28]
 8009eae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009eb2:	f023 0301 	bic.w	r3, r3, #1
 8009eb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	3308      	adds	r3, #8
 8009ebe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ec0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ec6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ec8:	e841 2300 	strex	r3, r2, [r1]
 8009ecc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d1e3      	bne.n	8009e9c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d118      	bne.n	8009f0e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	e853 3f00 	ldrex	r3, [r3]
 8009ee8:	60bb      	str	r3, [r7, #8]
   return(result);
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	f023 0310 	bic.w	r3, r3, #16
 8009ef0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009efa:	61bb      	str	r3, [r7, #24]
 8009efc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009efe:	6979      	ldr	r1, [r7, #20]
 8009f00:	69ba      	ldr	r2, [r7, #24]
 8009f02:	e841 2300 	strex	r3, r2, [r1]
 8009f06:	613b      	str	r3, [r7, #16]
   return(result);
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d1e6      	bne.n	8009edc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2220      	movs	r2, #32
 8009f12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009f22:	bf00      	nop
 8009f24:	3754      	adds	r7, #84	@ 0x54
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr

08009f2e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b096      	sub	sp, #88	@ 0x58
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f3a:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f40:	2b81      	cmp	r3, #129	@ 0x81
 8009f42:	d057      	beq.n	8009ff4 <UART_DMAReceiveCplt+0xc6>
  {
    huart->RxXferCount = 0U;
 8009f44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f46:	2200      	movs	r2, #0
 8009f48:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f54:	e853 3f00 	ldrex	r3, [r3]
 8009f58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f60:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	461a      	mov	r2, r3
 8009f68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f6c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f72:	e841 2300 	strex	r3, r2, [r1]
 8009f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d1e6      	bne.n	8009f4c <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	3308      	adds	r3, #8
 8009f84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f88:	e853 3f00 	ldrex	r3, [r3]
 8009f8c:	623b      	str	r3, [r7, #32]
   return(result);
 8009f8e:	6a3b      	ldr	r3, [r7, #32]
 8009f90:	f023 0301 	bic.w	r3, r3, #1
 8009f94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	3308      	adds	r3, #8
 8009f9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009f9e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009fa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fa6:	e841 2300 	strex	r3, r2, [r1]
 8009faa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d1e5      	bne.n	8009f7e <UART_DMAReceiveCplt+0x50>
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009fb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fb4:	2220      	movs	r2, #32
 8009fb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d118      	bne.n	8009ff4 <UART_DMAReceiveCplt+0xc6>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	e853 3f00 	ldrex	r3, [r3]
 8009fce:	60fb      	str	r3, [r7, #12]
   return(result);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f023 0310 	bic.w	r3, r3, #16
 8009fd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009fd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	461a      	mov	r2, r3
 8009fde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009fe0:	61fb      	str	r3, [r7, #28]
 8009fe2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe4:	69b9      	ldr	r1, [r7, #24]
 8009fe6:	69fa      	ldr	r2, [r7, #28]
 8009fe8:	e841 2300 	strex	r3, r2, [r1]
 8009fec:	617b      	str	r3, [r7, #20]
   return(result);
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d1e6      	bne.n	8009fc2 <UART_DMAReceiveCplt+0x94>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ff4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ffc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d107      	bne.n	800a012 <UART_DMAReceiveCplt+0xe4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a004:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a008:	4619      	mov	r1, r3
 800a00a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800a00c:	f7ff fa7c 	bl	8009508 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a010:	e002      	b.n	800a018 <UART_DMAReceiveCplt+0xea>
    HAL_UART_RxCpltCallback(huart);
 800a012:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800a014:	f7f7 f8f4 	bl	8001200 <HAL_UART_RxCpltCallback>
}
 800a018:	bf00      	nop
 800a01a:	3758      	adds	r7, #88	@ 0x58
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a02c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2201      	movs	r2, #1
 800a032:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d109      	bne.n	800a050 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a042:	085b      	lsrs	r3, r3, #1
 800a044:	b29b      	uxth	r3, r3
 800a046:	4619      	mov	r1, r3
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	f7ff fa5d 	bl	8009508 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a04e:	e002      	b.n	800a056 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a050:	68f8      	ldr	r0, [r7, #12]
 800a052:	f7ff fa45 	bl	80094e0 <HAL_UART_RxHalfCpltCallback>
}
 800a056:	bf00      	nop
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a05e:	b580      	push	{r7, lr}
 800a060:	b086      	sub	sp, #24
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a06a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a072:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a07a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a086:	2b80      	cmp	r3, #128	@ 0x80
 800a088:	d109      	bne.n	800a09e <UART_DMAError+0x40>
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	2b21      	cmp	r3, #33	@ 0x21
 800a08e:	d106      	bne.n	800a09e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	2200      	movs	r2, #0
 800a094:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a098:	6978      	ldr	r0, [r7, #20]
 800a09a:	f7ff fea1 	bl	8009de0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0a8:	2b40      	cmp	r3, #64	@ 0x40
 800a0aa:	d109      	bne.n	800a0c0 <UART_DMAError+0x62>
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2b22      	cmp	r3, #34	@ 0x22
 800a0b0:	d106      	bne.n	800a0c0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a0ba:	6978      	ldr	r0, [r7, #20]
 800a0bc:	f7ff fed1 	bl	8009e62 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0c6:	f043 0210 	orr.w	r2, r3, #16
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a0d0:	6978      	ldr	r0, [r7, #20]
 800a0d2:	f7ff fa0f 	bl	80094f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0d6:	bf00      	nop
 800a0d8:	3718      	adds	r7, #24
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a0de:	b580      	push	{r7, lr}
 800a0e0:	b084      	sub	sp, #16
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a0f4:	68f8      	ldr	r0, [r7, #12]
 800a0f6:	f7ff f9fd 	bl	80094f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0fa:	bf00      	nop
 800a0fc:	3710      	adds	r7, #16
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a102:	b580      	push	{r7, lr}
 800a104:	b088      	sub	sp, #32
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	e853 3f00 	ldrex	r3, [r3]
 800a116:	60bb      	str	r3, [r7, #8]
   return(result);
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a11e:	61fb      	str	r3, [r7, #28]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	461a      	mov	r2, r3
 800a126:	69fb      	ldr	r3, [r7, #28]
 800a128:	61bb      	str	r3, [r7, #24]
 800a12a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a12c:	6979      	ldr	r1, [r7, #20]
 800a12e:	69ba      	ldr	r2, [r7, #24]
 800a130:	e841 2300 	strex	r3, r2, [r1]
 800a134:	613b      	str	r3, [r7, #16]
   return(result);
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d1e6      	bne.n	800a10a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2220      	movs	r2, #32
 800a140:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2200      	movs	r2, #0
 800a148:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f7ff f9be 	bl	80094cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a150:	bf00      	nop
 800a152:	3720      	adds	r7, #32
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a158:	b480      	push	{r7}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a160:	bf00      	nop
 800a162:	370c      	adds	r7, #12
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr

0800a16c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b083      	sub	sp, #12
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a174:	bf00      	nop
 800a176:	370c      	adds	r7, #12
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr

0800a180 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a180:	b480      	push	{r7}
 800a182:	b083      	sub	sp, #12
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a188:	bf00      	nop
 800a18a:	370c      	adds	r7, #12
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr

0800a194 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a194:	b480      	push	{r7}
 800a196:	b085      	sub	sp, #20
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d101      	bne.n	800a1aa <HAL_UARTEx_DisableFifoMode+0x16>
 800a1a6:	2302      	movs	r3, #2
 800a1a8:	e027      	b.n	800a1fa <HAL_UARTEx_DisableFifoMode+0x66>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2224      	movs	r2, #36	@ 0x24
 800a1b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f022 0201 	bic.w	r2, r2, #1
 800a1d0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a1d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	68fa      	ldr	r2, [r7, #12]
 800a1e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2220      	movs	r2, #32
 800a1ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a1f8:	2300      	movs	r3, #0
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3714      	adds	r7, #20
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr

0800a206 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a206:	b580      	push	{r7, lr}
 800a208:	b084      	sub	sp, #16
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
 800a20e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a216:	2b01      	cmp	r3, #1
 800a218:	d101      	bne.n	800a21e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a21a:	2302      	movs	r3, #2
 800a21c:	e02d      	b.n	800a27a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2201      	movs	r2, #1
 800a222:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2224      	movs	r2, #36	@ 0x24
 800a22a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f022 0201 	bic.w	r2, r2, #1
 800a244:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	683a      	ldr	r2, [r7, #0]
 800a256:	430a      	orrs	r2, r1
 800a258:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 f850 	bl	800a300 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	68fa      	ldr	r2, [r7, #12]
 800a266:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2220      	movs	r2, #32
 800a26c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a278:	2300      	movs	r3, #0
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3710      	adds	r7, #16
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a282:	b580      	push	{r7, lr}
 800a284:	b084      	sub	sp, #16
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
 800a28a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a292:	2b01      	cmp	r3, #1
 800a294:	d101      	bne.n	800a29a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a296:	2302      	movs	r3, #2
 800a298:	e02d      	b.n	800a2f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2201      	movs	r2, #1
 800a29e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2224      	movs	r2, #36	@ 0x24
 800a2a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	681a      	ldr	r2, [r3, #0]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f022 0201 	bic.w	r2, r2, #1
 800a2c0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	683a      	ldr	r2, [r7, #0]
 800a2d2:	430a      	orrs	r2, r1
 800a2d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 f812 	bl	800a300 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	68fa      	ldr	r2, [r7, #12]
 800a2e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2220      	movs	r2, #32
 800a2e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a2f4:	2300      	movs	r3, #0
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3710      	adds	r7, #16
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
	...

0800a300 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a300:	b480      	push	{r7}
 800a302:	b085      	sub	sp, #20
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d108      	bne.n	800a322 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2201      	movs	r2, #1
 800a314:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2201      	movs	r2, #1
 800a31c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a320:	e031      	b.n	800a386 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a322:	2308      	movs	r3, #8
 800a324:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a326:	2308      	movs	r3, #8
 800a328:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	689b      	ldr	r3, [r3, #8]
 800a330:	0e5b      	lsrs	r3, r3, #25
 800a332:	b2db      	uxtb	r3, r3
 800a334:	f003 0307 	and.w	r3, r3, #7
 800a338:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	0f5b      	lsrs	r3, r3, #29
 800a342:	b2db      	uxtb	r3, r3
 800a344:	f003 0307 	and.w	r3, r3, #7
 800a348:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a34a:	7bbb      	ldrb	r3, [r7, #14]
 800a34c:	7b3a      	ldrb	r2, [r7, #12]
 800a34e:	4911      	ldr	r1, [pc, #68]	@ (800a394 <UARTEx_SetNbDataToProcess+0x94>)
 800a350:	5c8a      	ldrb	r2, [r1, r2]
 800a352:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a356:	7b3a      	ldrb	r2, [r7, #12]
 800a358:	490f      	ldr	r1, [pc, #60]	@ (800a398 <UARTEx_SetNbDataToProcess+0x98>)
 800a35a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a35c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a360:	b29a      	uxth	r2, r3
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a368:	7bfb      	ldrb	r3, [r7, #15]
 800a36a:	7b7a      	ldrb	r2, [r7, #13]
 800a36c:	4909      	ldr	r1, [pc, #36]	@ (800a394 <UARTEx_SetNbDataToProcess+0x94>)
 800a36e:	5c8a      	ldrb	r2, [r1, r2]
 800a370:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a374:	7b7a      	ldrb	r2, [r7, #13]
 800a376:	4908      	ldr	r1, [pc, #32]	@ (800a398 <UARTEx_SetNbDataToProcess+0x98>)
 800a378:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a37a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a37e:	b29a      	uxth	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a386:	bf00      	nop
 800a388:	3714      	adds	r7, #20
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr
 800a392:	bf00      	nop
 800a394:	0800a47c 	.word	0x0800a47c
 800a398:	0800a484 	.word	0x0800a484

0800a39c <memset>:
 800a39c:	4402      	add	r2, r0
 800a39e:	4603      	mov	r3, r0
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d100      	bne.n	800a3a6 <memset+0xa>
 800a3a4:	4770      	bx	lr
 800a3a6:	f803 1b01 	strb.w	r1, [r3], #1
 800a3aa:	e7f9      	b.n	800a3a0 <memset+0x4>

0800a3ac <__libc_init_array>:
 800a3ac:	b570      	push	{r4, r5, r6, lr}
 800a3ae:	4d0d      	ldr	r5, [pc, #52]	@ (800a3e4 <__libc_init_array+0x38>)
 800a3b0:	2600      	movs	r6, #0
 800a3b2:	4c0d      	ldr	r4, [pc, #52]	@ (800a3e8 <__libc_init_array+0x3c>)
 800a3b4:	1b64      	subs	r4, r4, r5
 800a3b6:	10a4      	asrs	r4, r4, #2
 800a3b8:	42a6      	cmp	r6, r4
 800a3ba:	d109      	bne.n	800a3d0 <__libc_init_array+0x24>
 800a3bc:	4d0b      	ldr	r5, [pc, #44]	@ (800a3ec <__libc_init_array+0x40>)
 800a3be:	2600      	movs	r6, #0
 800a3c0:	4c0b      	ldr	r4, [pc, #44]	@ (800a3f0 <__libc_init_array+0x44>)
 800a3c2:	f000 f817 	bl	800a3f4 <_init>
 800a3c6:	1b64      	subs	r4, r4, r5
 800a3c8:	10a4      	asrs	r4, r4, #2
 800a3ca:	42a6      	cmp	r6, r4
 800a3cc:	d105      	bne.n	800a3da <__libc_init_array+0x2e>
 800a3ce:	bd70      	pop	{r4, r5, r6, pc}
 800a3d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3d4:	3601      	adds	r6, #1
 800a3d6:	4798      	blx	r3
 800a3d8:	e7ee      	b.n	800a3b8 <__libc_init_array+0xc>
 800a3da:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3de:	3601      	adds	r6, #1
 800a3e0:	4798      	blx	r3
 800a3e2:	e7f2      	b.n	800a3ca <__libc_init_array+0x1e>
 800a3e4:	0800a494 	.word	0x0800a494
 800a3e8:	0800a494 	.word	0x0800a494
 800a3ec:	0800a494 	.word	0x0800a494
 800a3f0:	0800a498 	.word	0x0800a498

0800a3f4 <_init>:
 800a3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3f6:	bf00      	nop
 800a3f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3fa:	bc08      	pop	{r3}
 800a3fc:	469e      	mov	lr, r3
 800a3fe:	4770      	bx	lr

0800a400 <_fini>:
 800a400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a402:	bf00      	nop
 800a404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a406:	bc08      	pop	{r3}
 800a408:	469e      	mov	lr, r3
 800a40a:	4770      	bx	lr
