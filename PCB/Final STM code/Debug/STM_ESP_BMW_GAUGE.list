
STM_ESP_BMW_GAUGE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000caac  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  0800cd04  0800cd04  0000dd04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce20  0800ce20  0000e0ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce20  0800ce20  0000de20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce28  0800ce28  0000e0ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce28  0800ce28  0000de28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ce2c  0800ce2c  0000de2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ec  20000000  0800ce30  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b0  200000ec  0800cf1c  0000e0ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000069c  0800cf1c  0000e69c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000e0ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c56a  00000000  00000000  0000e122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000342f  00000000  00000000  0002a68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e8  00000000  00000000  0002dac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011c9  00000000  00000000  0002f1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d884  00000000  00000000  00030371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e8ac  00000000  00000000  0005dbf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011dd89  00000000  00000000  0007c4a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019a22a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a94  00000000  00000000  0019a270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001a0d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	200000ec 	.word	0x200000ec
 8000274:	00000000 	.word	0x00000000
 8000278:	0800ccec 	.word	0x0800ccec

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	200000f0 	.word	0x200000f0
 8000294:	0800ccec 	.word	0x0800ccec

08000298 <strlen>:
 8000298:	4603      	mov	r3, r0
 800029a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029e:	2a00      	cmp	r2, #0
 80002a0:	d1fb      	bne.n	800029a <strlen+0x2>
 80002a2:	1a18      	subs	r0, r3, r0
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr

080002a8 <__aeabi_drsub>:
 80002a8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002ac:	e002      	b.n	80002b4 <__adddf3>
 80002ae:	bf00      	nop

080002b0 <__aeabi_dsub>:
 80002b0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002b4 <__adddf3>:
 80002b4:	b530      	push	{r4, r5, lr}
 80002b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002be:	ea94 0f05 	teq	r4, r5
 80002c2:	bf08      	it	eq
 80002c4:	ea90 0f02 	teqeq	r0, r2
 80002c8:	bf1f      	itttt	ne
 80002ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002da:	f000 80e2 	beq.w	80004a2 <__adddf3+0x1ee>
 80002de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e6:	bfb8      	it	lt
 80002e8:	426d      	neglt	r5, r5
 80002ea:	dd0c      	ble.n	8000306 <__adddf3+0x52>
 80002ec:	442c      	add	r4, r5
 80002ee:	ea80 0202 	eor.w	r2, r0, r2
 80002f2:	ea81 0303 	eor.w	r3, r1, r3
 80002f6:	ea82 0000 	eor.w	r0, r2, r0
 80002fa:	ea83 0101 	eor.w	r1, r3, r1
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	2d36      	cmp	r5, #54	@ 0x36
 8000308:	bf88      	it	hi
 800030a:	bd30      	pophi	{r4, r5, pc}
 800030c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000310:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000314:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000318:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x70>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000328:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800032c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000330:	d002      	beq.n	8000338 <__adddf3+0x84>
 8000332:	4252      	negs	r2, r2
 8000334:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000338:	ea94 0f05 	teq	r4, r5
 800033c:	f000 80a7 	beq.w	800048e <__adddf3+0x1da>
 8000340:	f1a4 0401 	sub.w	r4, r4, #1
 8000344:	f1d5 0e20 	rsbs	lr, r5, #32
 8000348:	db0d      	blt.n	8000366 <__adddf3+0xb2>
 800034a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034e:	fa22 f205 	lsr.w	r2, r2, r5
 8000352:	1880      	adds	r0, r0, r2
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	fa03 f20e 	lsl.w	r2, r3, lr
 800035c:	1880      	adds	r0, r0, r2
 800035e:	fa43 f305 	asr.w	r3, r3, r5
 8000362:	4159      	adcs	r1, r3
 8000364:	e00e      	b.n	8000384 <__adddf3+0xd0>
 8000366:	f1a5 0520 	sub.w	r5, r5, #32
 800036a:	f10e 0e20 	add.w	lr, lr, #32
 800036e:	2a01      	cmp	r2, #1
 8000370:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000374:	bf28      	it	cs
 8000376:	f04c 0c02 	orrcs.w	ip, ip, #2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	18c0      	adds	r0, r0, r3
 8000380:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000384:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000388:	d507      	bpl.n	800039a <__adddf3+0xe6>
 800038a:	f04f 0e00 	mov.w	lr, #0
 800038e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000392:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000396:	eb6e 0101 	sbc.w	r1, lr, r1
 800039a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800039e:	d31b      	bcc.n	80003d8 <__adddf3+0x124>
 80003a0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003a4:	d30c      	bcc.n	80003c0 <__adddf3+0x10c>
 80003a6:	0849      	lsrs	r1, r1, #1
 80003a8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b0:	f104 0401 	add.w	r4, r4, #1
 80003b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003bc:	f080 809a 	bcs.w	80004f4 <__adddf3+0x240>
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003c4:	bf08      	it	eq
 80003c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ca:	f150 0000 	adcs.w	r0, r0, #0
 80003ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003d2:	ea41 0105 	orr.w	r1, r1, r5
 80003d6:	bd30      	pop	{r4, r5, pc}
 80003d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003dc:	4140      	adcs	r0, r0
 80003de:	eb41 0101 	adc.w	r1, r1, r1
 80003e2:	3c01      	subs	r4, #1
 80003e4:	bf28      	it	cs
 80003e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ea:	d2e9      	bcs.n	80003c0 <__adddf3+0x10c>
 80003ec:	f091 0f00 	teq	r1, #0
 80003f0:	bf04      	itt	eq
 80003f2:	4601      	moveq	r1, r0
 80003f4:	2000      	moveq	r0, #0
 80003f6:	fab1 f381 	clz	r3, r1
 80003fa:	bf08      	it	eq
 80003fc:	3320      	addeq	r3, #32
 80003fe:	f1a3 030b 	sub.w	r3, r3, #11
 8000402:	f1b3 0220 	subs.w	r2, r3, #32
 8000406:	da0c      	bge.n	8000422 <__adddf3+0x16e>
 8000408:	320c      	adds	r2, #12
 800040a:	dd08      	ble.n	800041e <__adddf3+0x16a>
 800040c:	f102 0c14 	add.w	ip, r2, #20
 8000410:	f1c2 020c 	rsb	r2, r2, #12
 8000414:	fa01 f00c 	lsl.w	r0, r1, ip
 8000418:	fa21 f102 	lsr.w	r1, r1, r2
 800041c:	e00c      	b.n	8000438 <__adddf3+0x184>
 800041e:	f102 0214 	add.w	r2, r2, #20
 8000422:	bfd8      	it	le
 8000424:	f1c2 0c20 	rsble	ip, r2, #32
 8000428:	fa01 f102 	lsl.w	r1, r1, r2
 800042c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000430:	bfdc      	itt	le
 8000432:	ea41 010c 	orrle.w	r1, r1, ip
 8000436:	4090      	lslle	r0, r2
 8000438:	1ae4      	subs	r4, r4, r3
 800043a:	bfa2      	ittt	ge
 800043c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000440:	4329      	orrge	r1, r5
 8000442:	bd30      	popge	{r4, r5, pc}
 8000444:	ea6f 0404 	mvn.w	r4, r4
 8000448:	3c1f      	subs	r4, #31
 800044a:	da1c      	bge.n	8000486 <__adddf3+0x1d2>
 800044c:	340c      	adds	r4, #12
 800044e:	dc0e      	bgt.n	800046e <__adddf3+0x1ba>
 8000450:	f104 0414 	add.w	r4, r4, #20
 8000454:	f1c4 0220 	rsb	r2, r4, #32
 8000458:	fa20 f004 	lsr.w	r0, r0, r4
 800045c:	fa01 f302 	lsl.w	r3, r1, r2
 8000460:	ea40 0003 	orr.w	r0, r0, r3
 8000464:	fa21 f304 	lsr.w	r3, r1, r4
 8000468:	ea45 0103 	orr.w	r1, r5, r3
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f1c4 040c 	rsb	r4, r4, #12
 8000472:	f1c4 0220 	rsb	r2, r4, #32
 8000476:	fa20 f002 	lsr.w	r0, r0, r2
 800047a:	fa01 f304 	lsl.w	r3, r1, r4
 800047e:	ea40 0003 	orr.w	r0, r0, r3
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	fa21 f004 	lsr.w	r0, r1, r4
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f094 0f00 	teq	r4, #0
 8000492:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000496:	bf06      	itte	eq
 8000498:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800049c:	3401      	addeq	r4, #1
 800049e:	3d01      	subne	r5, #1
 80004a0:	e74e      	b.n	8000340 <__adddf3+0x8c>
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf18      	it	ne
 80004a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ac:	d029      	beq.n	8000502 <__adddf3+0x24e>
 80004ae:	ea94 0f05 	teq	r4, r5
 80004b2:	bf08      	it	eq
 80004b4:	ea90 0f02 	teqeq	r0, r2
 80004b8:	d005      	beq.n	80004c6 <__adddf3+0x212>
 80004ba:	ea54 0c00 	orrs.w	ip, r4, r0
 80004be:	bf04      	itt	eq
 80004c0:	4619      	moveq	r1, r3
 80004c2:	4610      	moveq	r0, r2
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	ea91 0f03 	teq	r1, r3
 80004ca:	bf1e      	ittt	ne
 80004cc:	2100      	movne	r1, #0
 80004ce:	2000      	movne	r0, #0
 80004d0:	bd30      	popne	{r4, r5, pc}
 80004d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d6:	d105      	bne.n	80004e4 <__adddf3+0x230>
 80004d8:	0040      	lsls	r0, r0, #1
 80004da:	4149      	adcs	r1, r1
 80004dc:	bf28      	it	cs
 80004de:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e8:	bf3c      	itt	cc
 80004ea:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ee:	bd30      	popcc	{r4, r5, pc}
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004fc:	f04f 0000 	mov.w	r0, #0
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000506:	bf1a      	itte	ne
 8000508:	4619      	movne	r1, r3
 800050a:	4610      	movne	r0, r2
 800050c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000510:	bf1c      	itt	ne
 8000512:	460b      	movne	r3, r1
 8000514:	4602      	movne	r2, r0
 8000516:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800051a:	bf06      	itte	eq
 800051c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000520:	ea91 0f03 	teqeq	r1, r3
 8000524:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	bf00      	nop

0800052c <__aeabi_ui2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f04f 0500 	mov.w	r5, #0
 8000544:	f04f 0100 	mov.w	r1, #0
 8000548:	e750      	b.n	80003ec <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_i2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000564:	bf48      	it	mi
 8000566:	4240      	negmi	r0, r0
 8000568:	f04f 0100 	mov.w	r1, #0
 800056c:	e73e      	b.n	80003ec <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_f2d>:
 8000570:	0042      	lsls	r2, r0, #1
 8000572:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000576:	ea4f 0131 	mov.w	r1, r1, rrx
 800057a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057e:	bf1f      	itttt	ne
 8000580:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000584:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000588:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800058c:	4770      	bxne	lr
 800058e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000592:	bf08      	it	eq
 8000594:	4770      	bxeq	lr
 8000596:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800059a:	bf04      	itt	eq
 800059c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ac:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b0:	e71c      	b.n	80003ec <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_ul2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	e00a      	b.n	80005da <__aeabi_l2d+0x16>

080005c4 <__aeabi_l2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005d2:	d502      	bpl.n	80005da <__aeabi_l2d+0x16>
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005de:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e6:	f43f aed8 	beq.w	800039a <__adddf3+0xe6>
 80005ea:	f04f 0203 	mov.w	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	fa00 fc03 	lsl.w	ip, r0, r3
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000612:	ea40 000e 	orr.w	r0, r0, lr
 8000616:	fa21 f102 	lsr.w	r1, r1, r2
 800061a:	4414      	add	r4, r2
 800061c:	e6bd      	b.n	800039a <__adddf3+0xe6>
 800061e:	bf00      	nop

08000620 <__aeabi_dmul>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000626:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062e:	bf1d      	ittte	ne
 8000630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000634:	ea94 0f0c 	teqne	r4, ip
 8000638:	ea95 0f0c 	teqne	r5, ip
 800063c:	f000 f8de 	bleq	80007fc <__aeabi_dmul+0x1dc>
 8000640:	442c      	add	r4, r5
 8000642:	ea81 0603 	eor.w	r6, r1, r3
 8000646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000652:	bf18      	it	ne
 8000654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000660:	d038      	beq.n	80006d4 <__aeabi_dmul+0xb4>
 8000662:	fba0 ce02 	umull	ip, lr, r0, r2
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000676:	f04f 0600 	mov.w	r6, #0
 800067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067e:	f09c 0f00 	teq	ip, #0
 8000682:	bf18      	it	ne
 8000684:	f04e 0e01 	orrne.w	lr, lr, #1
 8000688:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800068c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000690:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000694:	d204      	bcs.n	80006a0 <__aeabi_dmul+0x80>
 8000696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800069a:	416d      	adcs	r5, r5
 800069c:	eb46 0606 	adc.w	r6, r6, r6
 80006a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b8:	bf88      	it	hi
 80006ba:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006be:	d81e      	bhi.n	80006fe <__aeabi_dmul+0xde>
 80006c0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006c4:	bf08      	it	eq
 80006c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ca:	f150 0000 	adcs.w	r0, r0, #0
 80006ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d8:	ea46 0101 	orr.w	r1, r6, r1
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e8:	bfc2      	ittt	gt
 80006ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	popgt	{r4, r5, r6, pc}
 80006f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f8:	f04f 0e00 	mov.w	lr, #0
 80006fc:	3c01      	subs	r4, #1
 80006fe:	f300 80ab 	bgt.w	8000858 <__aeabi_dmul+0x238>
 8000702:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000706:	bfde      	ittt	le
 8000708:	2000      	movle	r0, #0
 800070a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd70      	pople	{r4, r5, r6, pc}
 8000710:	f1c4 0400 	rsb	r4, r4, #0
 8000714:	3c20      	subs	r4, #32
 8000716:	da35      	bge.n	8000784 <__aeabi_dmul+0x164>
 8000718:	340c      	adds	r4, #12
 800071a:	dc1b      	bgt.n	8000754 <__aeabi_dmul+0x134>
 800071c:	f104 0414 	add.w	r4, r4, #20
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f305 	lsl.w	r3, r0, r5
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	fa21 f604 	lsr.w	r6, r1, r4
 8000744:	eb42 0106 	adc.w	r1, r2, r6
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 040c 	rsb	r4, r4, #12
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f304 	lsl.w	r3, r0, r4
 8000760:	fa20 f005 	lsr.w	r0, r0, r5
 8000764:	fa01 f204 	lsl.w	r2, r1, r4
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	f141 0100 	adc.w	r1, r1, #0
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f205 	lsl.w	r2, r0, r5
 800078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000790:	fa20 f304 	lsr.w	r3, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea43 0302 	orr.w	r3, r3, r2
 800079c:	fa21 f004 	lsr.w	r0, r1, r4
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	fa21 f204 	lsr.w	r2, r1, r4
 80007a8:	ea20 0002 	bic.w	r0, r0, r2
 80007ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f094 0f00 	teq	r4, #0
 80007c0:	d10f      	bne.n	80007e2 <__aeabi_dmul+0x1c2>
 80007c2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007c6:	0040      	lsls	r0, r0, #1
 80007c8:	eb41 0101 	adc.w	r1, r1, r1
 80007cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3c01      	subeq	r4, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1a6>
 80007d6:	ea41 0106 	orr.w	r1, r1, r6
 80007da:	f095 0f00 	teq	r5, #0
 80007de:	bf18      	it	ne
 80007e0:	4770      	bxne	lr
 80007e2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	eb43 0303 	adc.w	r3, r3, r3
 80007ec:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3d01      	subeq	r5, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1c6>
 80007f6:	ea43 0306 	orr.w	r3, r3, r6
 80007fa:	4770      	bx	lr
 80007fc:	ea94 0f0c 	teq	r4, ip
 8000800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000804:	bf18      	it	ne
 8000806:	ea95 0f0c 	teqne	r5, ip
 800080a:	d00c      	beq.n	8000826 <__aeabi_dmul+0x206>
 800080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000816:	d1d1      	bne.n	80007bc <__aeabi_dmul+0x19c>
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082a:	bf06      	itte	eq
 800082c:	4610      	moveq	r0, r2
 800082e:	4619      	moveq	r1, r3
 8000830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000834:	d019      	beq.n	800086a <__aeabi_dmul+0x24a>
 8000836:	ea94 0f0c 	teq	r4, ip
 800083a:	d102      	bne.n	8000842 <__aeabi_dmul+0x222>
 800083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000840:	d113      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000842:	ea95 0f0c 	teq	r5, ip
 8000846:	d105      	bne.n	8000854 <__aeabi_dmul+0x234>
 8000848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800084c:	bf1c      	itt	ne
 800084e:	4610      	movne	r0, r2
 8000850:	4619      	movne	r1, r3
 8000852:	d10a      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800085c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000860:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800086e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000872:	bd70      	pop	{r4, r5, r6, pc}

08000874 <__aeabi_ddiv>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800087a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000882:	bf1d      	ittte	ne
 8000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000888:	ea94 0f0c 	teqne	r4, ip
 800088c:	ea95 0f0c 	teqne	r5, ip
 8000890:	f000 f8a7 	bleq	80009e2 <__aeabi_ddiv+0x16e>
 8000894:	eba4 0405 	sub.w	r4, r4, r5
 8000898:	ea81 0e03 	eor.w	lr, r1, r3
 800089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a4:	f000 8088 	beq.w	80009b8 <__aeabi_ddiv+0x144>
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf08      	it	eq
 80008d0:	4296      	cmpeq	r6, r2
 80008d2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008d6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008da:	d202      	bcs.n	80008e2 <__aeabi_ddiv+0x6e>
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	1ab6      	subs	r6, r6, r2
 80008e4:	eb65 0503 	sbc.w	r5, r5, r3
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008f2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 000c 	orrcs.w	r0, r0, ip
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000950:	ea55 0e06 	orrs.w	lr, r5, r6
 8000954:	d018      	beq.n	8000988 <__aeabi_ddiv+0x114>
 8000956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000972:	d1c0      	bne.n	80008f6 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000978:	d10b      	bne.n	8000992 <__aeabi_ddiv+0x11e>
 800097a:	ea41 0100 	orr.w	r1, r1, r0
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000986:	e7b6      	b.n	80008f6 <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800098c:	bf04      	itt	eq
 800098e:	4301      	orreq	r1, r0
 8000990:	2000      	moveq	r0, #0
 8000992:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000996:	bf88      	it	hi
 8000998:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800099c:	f63f aeaf 	bhi.w	80006fe <__aeabi_dmul+0xde>
 80009a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a4:	bf04      	itt	eq
 80009a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ae:	f150 0000 	adcs.w	r0, r0, #0
 80009b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c4:	bfc2      	ittt	gt
 80009c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	popgt	{r4, r5, r6, pc}
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009d4:	f04f 0e00 	mov.w	lr, #0
 80009d8:	3c01      	subs	r4, #1
 80009da:	e690      	b.n	80006fe <__aeabi_dmul+0xde>
 80009dc:	ea45 0e06 	orr.w	lr, r5, r6
 80009e0:	e68d      	b.n	80006fe <__aeabi_dmul+0xde>
 80009e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	bf08      	it	eq
 80009ec:	ea95 0f0c 	teqeq	r5, ip
 80009f0:	f43f af3b 	beq.w	800086a <__aeabi_dmul+0x24a>
 80009f4:	ea94 0f0c 	teq	r4, ip
 80009f8:	d10a      	bne.n	8000a10 <__aeabi_ddiv+0x19c>
 80009fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fe:	f47f af34 	bne.w	800086a <__aeabi_dmul+0x24a>
 8000a02:	ea95 0f0c 	teq	r5, ip
 8000a06:	f47f af25 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e72c      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a10:	ea95 0f0c 	teq	r5, ip
 8000a14:	d106      	bne.n	8000a24 <__aeabi_ddiv+0x1b0>
 8000a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a1a:	f43f aefd 	beq.w	8000818 <__aeabi_dmul+0x1f8>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e722      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	f47f aec5 	bne.w	80007bc <__aeabi_dmul+0x19c>
 8000a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a36:	f47f af0d 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3e:	f47f aeeb 	bne.w	8000818 <__aeabi_dmul+0x1f8>
 8000a42:	e712      	b.n	800086a <__aeabi_dmul+0x24a>

08000a44 <__aeabi_d2uiz>:
 8000a44:	004a      	lsls	r2, r1, #1
 8000a46:	d211      	bcs.n	8000a6c <__aeabi_d2uiz+0x28>
 8000a48:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a4c:	d211      	bcs.n	8000a72 <__aeabi_d2uiz+0x2e>
 8000a4e:	d50d      	bpl.n	8000a6c <__aeabi_d2uiz+0x28>
 8000a50:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a58:	d40e      	bmi.n	8000a78 <__aeabi_d2uiz+0x34>
 8000a5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a66:	fa23 f002 	lsr.w	r0, r3, r2
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a76:	d102      	bne.n	8000a7e <__aeabi_d2uiz+0x3a>
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7c:	4770      	bx	lr
 8000a7e:	f04f 0000 	mov.w	r0, #0
 8000a82:	4770      	bx	lr

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_uldivmod>:
 8000b24:	b953      	cbnz	r3, 8000b3c <__aeabi_uldivmod+0x18>
 8000b26:	b94a      	cbnz	r2, 8000b3c <__aeabi_uldivmod+0x18>
 8000b28:	2900      	cmp	r1, #0
 8000b2a:	bf08      	it	eq
 8000b2c:	2800      	cmpeq	r0, #0
 8000b2e:	bf1c      	itt	ne
 8000b30:	f04f 31ff 	movne.w	r1, #4294967295
 8000b34:	f04f 30ff 	movne.w	r0, #4294967295
 8000b38:	f000 b97e 	b.w	8000e38 <__aeabi_idiv0>
 8000b3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b44:	f000 f806 	bl	8000b54 <__udivmoddi4>
 8000b48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b50:	b004      	add	sp, #16
 8000b52:	4770      	bx	lr

08000b54 <__udivmoddi4>:
 8000b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b58:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000b5a:	460c      	mov	r4, r1
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d14d      	bne.n	8000bfc <__udivmoddi4+0xa8>
 8000b60:	428a      	cmp	r2, r1
 8000b62:	460f      	mov	r7, r1
 8000b64:	4684      	mov	ip, r0
 8000b66:	4696      	mov	lr, r2
 8000b68:	fab2 f382 	clz	r3, r2
 8000b6c:	d960      	bls.n	8000c30 <__udivmoddi4+0xdc>
 8000b6e:	b14b      	cbz	r3, 8000b84 <__udivmoddi4+0x30>
 8000b70:	fa02 fe03 	lsl.w	lr, r2, r3
 8000b74:	f1c3 0220 	rsb	r2, r3, #32
 8000b78:	409f      	lsls	r7, r3
 8000b7a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000b7e:	fa20 f202 	lsr.w	r2, r0, r2
 8000b82:	4317      	orrs	r7, r2
 8000b84:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000b88:	fa1f f48e 	uxth.w	r4, lr
 8000b8c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000b90:	fbb7 f1f6 	udiv	r1, r7, r6
 8000b94:	fb06 7711 	mls	r7, r6, r1, r7
 8000b98:	fb01 f004 	mul.w	r0, r1, r4
 8000b9c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ba0:	4290      	cmp	r0, r2
 8000ba2:	d908      	bls.n	8000bb6 <__udivmoddi4+0x62>
 8000ba4:	eb1e 0202 	adds.w	r2, lr, r2
 8000ba8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bac:	d202      	bcs.n	8000bb4 <__udivmoddi4+0x60>
 8000bae:	4290      	cmp	r0, r2
 8000bb0:	f200 812d 	bhi.w	8000e0e <__udivmoddi4+0x2ba>
 8000bb4:	4639      	mov	r1, r7
 8000bb6:	1a12      	subs	r2, r2, r0
 8000bb8:	fa1f fc8c 	uxth.w	ip, ip
 8000bbc:	fbb2 f0f6 	udiv	r0, r2, r6
 8000bc0:	fb06 2210 	mls	r2, r6, r0, r2
 8000bc4:	fb00 f404 	mul.w	r4, r0, r4
 8000bc8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000bcc:	4564      	cmp	r4, ip
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x8e>
 8000bd0:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000bd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x8c>
 8000bda:	4564      	cmp	r4, ip
 8000bdc:	f200 811a 	bhi.w	8000e14 <__udivmoddi4+0x2c0>
 8000be0:	4610      	mov	r0, r2
 8000be2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000be6:	ebac 0c04 	sub.w	ip, ip, r4
 8000bea:	2100      	movs	r1, #0
 8000bec:	b125      	cbz	r5, 8000bf8 <__udivmoddi4+0xa4>
 8000bee:	fa2c f303 	lsr.w	r3, ip, r3
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	e9c5 3200 	strd	r3, r2, [r5]
 8000bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bfc:	428b      	cmp	r3, r1
 8000bfe:	d905      	bls.n	8000c0c <__udivmoddi4+0xb8>
 8000c00:	b10d      	cbz	r5, 8000c06 <__udivmoddi4+0xb2>
 8000c02:	e9c5 0100 	strd	r0, r1, [r5]
 8000c06:	2100      	movs	r1, #0
 8000c08:	4608      	mov	r0, r1
 8000c0a:	e7f5      	b.n	8000bf8 <__udivmoddi4+0xa4>
 8000c0c:	fab3 f183 	clz	r1, r3
 8000c10:	2900      	cmp	r1, #0
 8000c12:	d14d      	bne.n	8000cb0 <__udivmoddi4+0x15c>
 8000c14:	42a3      	cmp	r3, r4
 8000c16:	f0c0 80f2 	bcc.w	8000dfe <__udivmoddi4+0x2aa>
 8000c1a:	4290      	cmp	r0, r2
 8000c1c:	f080 80ef 	bcs.w	8000dfe <__udivmoddi4+0x2aa>
 8000c20:	4606      	mov	r6, r0
 8000c22:	4623      	mov	r3, r4
 8000c24:	4608      	mov	r0, r1
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	d0e6      	beq.n	8000bf8 <__udivmoddi4+0xa4>
 8000c2a:	e9c5 6300 	strd	r6, r3, [r5]
 8000c2e:	e7e3      	b.n	8000bf8 <__udivmoddi4+0xa4>
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	f040 80a2 	bne.w	8000d7a <__udivmoddi4+0x226>
 8000c36:	1a8a      	subs	r2, r1, r2
 8000c38:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000c3c:	fa1f f68e 	uxth.w	r6, lr
 8000c40:	2101      	movs	r1, #1
 8000c42:	fbb2 f4f7 	udiv	r4, r2, r7
 8000c46:	fb07 2014 	mls	r0, r7, r4, r2
 8000c4a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000c4e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c52:	fb06 f004 	mul.w	r0, r6, r4
 8000c56:	4290      	cmp	r0, r2
 8000c58:	d90f      	bls.n	8000c7a <__udivmoddi4+0x126>
 8000c5a:	eb1e 0202 	adds.w	r2, lr, r2
 8000c5e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000c62:	bf2c      	ite	cs
 8000c64:	f04f 0901 	movcs.w	r9, #1
 8000c68:	f04f 0900 	movcc.w	r9, #0
 8000c6c:	4290      	cmp	r0, r2
 8000c6e:	d903      	bls.n	8000c78 <__udivmoddi4+0x124>
 8000c70:	f1b9 0f00 	cmp.w	r9, #0
 8000c74:	f000 80c8 	beq.w	8000e08 <__udivmoddi4+0x2b4>
 8000c78:	4644      	mov	r4, r8
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	fa1f fc8c 	uxth.w	ip, ip
 8000c80:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c84:	fb07 2210 	mls	r2, r7, r0, r2
 8000c88:	fb00 f606 	mul.w	r6, r0, r6
 8000c8c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000c90:	4566      	cmp	r6, ip
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x152>
 8000c94:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000c98:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9c:	d202      	bcs.n	8000ca4 <__udivmoddi4+0x150>
 8000c9e:	4566      	cmp	r6, ip
 8000ca0:	f200 80bb 	bhi.w	8000e1a <__udivmoddi4+0x2c6>
 8000ca4:	4610      	mov	r0, r2
 8000ca6:	ebac 0c06 	sub.w	ip, ip, r6
 8000caa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cae:	e79d      	b.n	8000bec <__udivmoddi4+0x98>
 8000cb0:	f1c1 0620 	rsb	r6, r1, #32
 8000cb4:	408b      	lsls	r3, r1
 8000cb6:	fa04 fe01 	lsl.w	lr, r4, r1
 8000cba:	fa22 f706 	lsr.w	r7, r2, r6
 8000cbe:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cc2:	40f4      	lsrs	r4, r6
 8000cc4:	408a      	lsls	r2, r1
 8000cc6:	431f      	orrs	r7, r3
 8000cc8:	ea4e 030c 	orr.w	r3, lr, ip
 8000ccc:	fa00 fe01 	lsl.w	lr, r0, r1
 8000cd0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cd4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ce0:	fb08 4410 	mls	r4, r8, r0, r4
 8000ce4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ce8:	fb00 f90c 	mul.w	r9, r0, ip
 8000cec:	45a1      	cmp	r9, r4
 8000cee:	d90e      	bls.n	8000d0e <__udivmoddi4+0x1ba>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000cf6:	bf2c      	ite	cs
 8000cf8:	f04f 0b01 	movcs.w	fp, #1
 8000cfc:	f04f 0b00 	movcc.w	fp, #0
 8000d00:	45a1      	cmp	r9, r4
 8000d02:	d903      	bls.n	8000d0c <__udivmoddi4+0x1b8>
 8000d04:	f1bb 0f00 	cmp.w	fp, #0
 8000d08:	f000 8093 	beq.w	8000e32 <__udivmoddi4+0x2de>
 8000d0c:	4650      	mov	r0, sl
 8000d0e:	eba4 0409 	sub.w	r4, r4, r9
 8000d12:	fa1f f983 	uxth.w	r9, r3
 8000d16:	fbb4 f3f8 	udiv	r3, r4, r8
 8000d1a:	fb08 4413 	mls	r4, r8, r3, r4
 8000d1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d22:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d26:	45a4      	cmp	ip, r4
 8000d28:	d906      	bls.n	8000d38 <__udivmoddi4+0x1e4>
 8000d2a:	193c      	adds	r4, r7, r4
 8000d2c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d30:	d201      	bcs.n	8000d36 <__udivmoddi4+0x1e2>
 8000d32:	45a4      	cmp	ip, r4
 8000d34:	d87a      	bhi.n	8000e2c <__udivmoddi4+0x2d8>
 8000d36:	4643      	mov	r3, r8
 8000d38:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d3c:	eba4 040c 	sub.w	r4, r4, ip
 8000d40:	fba0 9802 	umull	r9, r8, r0, r2
 8000d44:	4544      	cmp	r4, r8
 8000d46:	46cc      	mov	ip, r9
 8000d48:	4643      	mov	r3, r8
 8000d4a:	d302      	bcc.n	8000d52 <__udivmoddi4+0x1fe>
 8000d4c:	d106      	bne.n	8000d5c <__udivmoddi4+0x208>
 8000d4e:	45ce      	cmp	lr, r9
 8000d50:	d204      	bcs.n	8000d5c <__udivmoddi4+0x208>
 8000d52:	3801      	subs	r0, #1
 8000d54:	ebb9 0c02 	subs.w	ip, r9, r2
 8000d58:	eb68 0307 	sbc.w	r3, r8, r7
 8000d5c:	b15d      	cbz	r5, 8000d76 <__udivmoddi4+0x222>
 8000d5e:	ebbe 020c 	subs.w	r2, lr, ip
 8000d62:	eb64 0403 	sbc.w	r4, r4, r3
 8000d66:	fa04 f606 	lsl.w	r6, r4, r6
 8000d6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000d6e:	40cc      	lsrs	r4, r1
 8000d70:	431e      	orrs	r6, r3
 8000d72:	e9c5 6400 	strd	r6, r4, [r5]
 8000d76:	2100      	movs	r1, #0
 8000d78:	e73e      	b.n	8000bf8 <__udivmoddi4+0xa4>
 8000d7a:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d7e:	f1c3 0120 	rsb	r1, r3, #32
 8000d82:	fa04 f203 	lsl.w	r2, r4, r3
 8000d86:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d8a:	40cc      	lsrs	r4, r1
 8000d8c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000d90:	fa20 f101 	lsr.w	r1, r0, r1
 8000d94:	fa1f f68e 	uxth.w	r6, lr
 8000d98:	fbb4 f0f7 	udiv	r0, r4, r7
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	fb07 4410 	mls	r4, r7, r0, r4
 8000da2:	0c11      	lsrs	r1, r2, #16
 8000da4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000da8:	fb00 f406 	mul.w	r4, r0, r6
 8000dac:	428c      	cmp	r4, r1
 8000dae:	d90e      	bls.n	8000dce <__udivmoddi4+0x27a>
 8000db0:	eb1e 0101 	adds.w	r1, lr, r1
 8000db4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000db8:	bf2c      	ite	cs
 8000dba:	f04f 0901 	movcs.w	r9, #1
 8000dbe:	f04f 0900 	movcc.w	r9, #0
 8000dc2:	428c      	cmp	r4, r1
 8000dc4:	d902      	bls.n	8000dcc <__udivmoddi4+0x278>
 8000dc6:	f1b9 0f00 	cmp.w	r9, #0
 8000dca:	d02c      	beq.n	8000e26 <__udivmoddi4+0x2d2>
 8000dcc:	4640      	mov	r0, r8
 8000dce:	1b09      	subs	r1, r1, r4
 8000dd0:	b292      	uxth	r2, r2
 8000dd2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dd6:	fb07 1114 	mls	r1, r7, r4, r1
 8000dda:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dde:	fb04 f106 	mul.w	r1, r4, r6
 8000de2:	4291      	cmp	r1, r2
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x2a2>
 8000de6:	eb1e 0202 	adds.w	r2, lr, r2
 8000dea:	f104 38ff 	add.w	r8, r4, #4294967295
 8000dee:	d201      	bcs.n	8000df4 <__udivmoddi4+0x2a0>
 8000df0:	4291      	cmp	r1, r2
 8000df2:	d815      	bhi.n	8000e20 <__udivmoddi4+0x2cc>
 8000df4:	4644      	mov	r4, r8
 8000df6:	1a52      	subs	r2, r2, r1
 8000df8:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000dfc:	e721      	b.n	8000c42 <__udivmoddi4+0xee>
 8000dfe:	1a86      	subs	r6, r0, r2
 8000e00:	eb64 0303 	sbc.w	r3, r4, r3
 8000e04:	2001      	movs	r0, #1
 8000e06:	e70e      	b.n	8000c26 <__udivmoddi4+0xd2>
 8000e08:	3c02      	subs	r4, #2
 8000e0a:	4472      	add	r2, lr
 8000e0c:	e735      	b.n	8000c7a <__udivmoddi4+0x126>
 8000e0e:	3902      	subs	r1, #2
 8000e10:	4472      	add	r2, lr
 8000e12:	e6d0      	b.n	8000bb6 <__udivmoddi4+0x62>
 8000e14:	44f4      	add	ip, lr
 8000e16:	3802      	subs	r0, #2
 8000e18:	e6e3      	b.n	8000be2 <__udivmoddi4+0x8e>
 8000e1a:	44f4      	add	ip, lr
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	e742      	b.n	8000ca6 <__udivmoddi4+0x152>
 8000e20:	3c02      	subs	r4, #2
 8000e22:	4472      	add	r2, lr
 8000e24:	e7e7      	b.n	8000df6 <__udivmoddi4+0x2a2>
 8000e26:	3802      	subs	r0, #2
 8000e28:	4471      	add	r1, lr
 8000e2a:	e7d0      	b.n	8000dce <__udivmoddi4+0x27a>
 8000e2c:	3b02      	subs	r3, #2
 8000e2e:	443c      	add	r4, r7
 8000e30:	e782      	b.n	8000d38 <__udivmoddi4+0x1e4>
 8000e32:	3802      	subs	r0, #2
 8000e34:	443c      	add	r4, r7
 8000e36:	e76a      	b.n	8000d0e <__udivmoddi4+0x1ba>

08000e38 <__aeabi_idiv0>:
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000e42:	4b30      	ldr	r3, [pc, #192]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e44:	4a30      	ldr	r2, [pc, #192]	@ (8000f08 <MX_FDCAN1_Init+0xcc>)
 8000e46:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000e48:	4b2e      	ldr	r3, [pc, #184]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e4e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000e54:	4b2b      	ldr	r3, [pc, #172]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e60:	4b28      	ldr	r3, [pc, #160]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000e66:	4b27      	ldr	r3, [pc, #156]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000e6c:	4b25      	ldr	r3, [pc, #148]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000e72:	4b24      	ldr	r3, [pc, #144]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 11;
 8000e78:	4b22      	ldr	r3, [pc, #136]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e7a:	220b      	movs	r2, #11
 8000e7c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 8000e7e:	4b21      	ldr	r3, [pc, #132]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e80:	2204      	movs	r2, #4
 8000e82:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e84:	4b1f      	ldr	r3, [pc, #124]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000e90:	4b1c      	ldr	r3, [pc, #112]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000e96:	4b1b      	ldr	r3, [pc, #108]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000e9c:	4b19      	ldr	r3, [pc, #100]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000ea2:	4b18      	ldr	r3, [pc, #96]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ea8:	4b16      	ldr	r3, [pc, #88]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000eae:	4815      	ldr	r0, [pc, #84]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000eb0:	f002 fdda 	bl	8003a68 <HAL_FDCAN_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000eba:	f000 fe6d 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterIndex = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x316;
 8000eca:	f240 3316 	movw	r3, #790	@ 0x316
 8000ece:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x1FFFFFFF;
 8000ed0:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8000ed4:	617b      	str	r3, [r7, #20]

	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	4619      	mov	r1, r3
 8000eda:	480a      	ldr	r0, [pc, #40]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000edc:	f002 ff1e 	bl	8003d1c <HAL_FDCAN_ConfigFilter>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d002      	beq.n	8000eec <MX_FDCAN1_Init+0xb0>
	/* Filter configuration Error */
		printf("[CAN] Unable to configure!\n");
 8000ee6:	4809      	ldr	r0, [pc, #36]	@ (8000f0c <MX_FDCAN1_Init+0xd0>)
 8000ee8:	f00b f88a 	bl	800c000 <puts>
	}
	if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 8000eec:	4805      	ldr	r0, [pc, #20]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000eee:	f002 ff6f 	bl	8003dd0 <HAL_FDCAN_Start>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_FDCAN1_Init+0xc0>
	{
		Error_Handler();
 8000ef8:	f000 fe4e 	bl	8001b98 <Error_Handler>
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	3718      	adds	r7, #24
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000108 	.word	0x20000108
 8000f08:	4000a400 	.word	0x4000a400
 8000f0c:	0800cd04 	.word	0x0800cd04

08000f10 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b0be      	sub	sp, #248	@ 0xf8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	22d0      	movs	r2, #208	@ 0xd0
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f00b f945 	bl	800c1c0 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a2f      	ldr	r2, [pc, #188]	@ (8000ff8 <HAL_FDCAN_MspInit+0xe8>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d156      	bne.n	8000fee <HAL_FDCAN_MspInit+0xde>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000f40:	f04f 0200 	mov.w	r2, #0
 8000f44:	f04f 0304 	mov.w	r3, #4
 8000f48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f52:	f107 0310 	add.w	r3, r7, #16
 8000f56:	4618      	mov	r0, r3
 8000f58:	f004 fb4c 	bl	80055f4 <HAL_RCCEx_PeriphCLKConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8000f62:	f000 fe19 	bl	8001b98 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000f66:	4b25      	ldr	r3, [pc, #148]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000f6c:	4a23      	ldr	r2, [pc, #140]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f72:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8000f76:	4b21      	ldr	r3, [pc, #132]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000f7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	4b1d      	ldr	r3, [pc, #116]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f94:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000fa2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000fbc:	2309      	movs	r3, #9
 8000fbe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480d      	ldr	r0, [pc, #52]	@ (8001000 <HAL_FDCAN_MspInit+0xf0>)
 8000fca:	f003 f9e5 	bl	8004398 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2027      	movs	r0, #39	@ 0x27
 8000fd4:	f001 fd34 	bl	8002a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000fd8:	2027      	movs	r0, #39	@ 0x27
 8000fda:	f001 fd4b 	bl	8002a74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2028      	movs	r0, #40	@ 0x28
 8000fe4:	f001 fd2c 	bl	8002a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000fe8:	2028      	movs	r0, #40	@ 0x28
 8000fea:	f001 fd43 	bl	8002a74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000fee:	bf00      	nop
 8000ff0:	37f8      	adds	r7, #248	@ 0xf8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	4000a400 	.word	0x4000a400
 8000ffc:	44020c00 	.word	0x44020c00
 8001000:	42020000 	.word	0x42020000

08001004 <InitCANFrames>:
  /* USER CODE END FDCAN1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void InitCANFrames() {
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
    for (int i = 0; i < FRAME_COUNT; i++) {
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	e041      	b.n	8001094 <InitCANFrames+0x90>
        frames[i].header.IdType = FDCAN_STANDARD_ID;
 8001010:	4a25      	ldr	r2, [pc, #148]	@ (80010a8 <InitCANFrames+0xa4>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	212c      	movs	r1, #44	@ 0x2c
 8001016:	fb01 f303 	mul.w	r3, r1, r3
 800101a:	4413      	add	r3, r2
 800101c:	3304      	adds	r3, #4
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
        frames[i].header.TxFrameType = FDCAN_DATA_FRAME;
 8001022:	4a21      	ldr	r2, [pc, #132]	@ (80010a8 <InitCANFrames+0xa4>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	212c      	movs	r1, #44	@ 0x2c
 8001028:	fb01 f303 	mul.w	r3, r1, r3
 800102c:	4413      	add	r3, r2
 800102e:	3308      	adds	r3, #8
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
        frames[i].header.DataLength = FDCAN_DLC_BYTES_8;
 8001034:	4a1c      	ldr	r2, [pc, #112]	@ (80010a8 <InitCANFrames+0xa4>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	212c      	movs	r1, #44	@ 0x2c
 800103a:	fb01 f303 	mul.w	r3, r1, r3
 800103e:	4413      	add	r3, r2
 8001040:	330c      	adds	r3, #12
 8001042:	2208      	movs	r2, #8
 8001044:	601a      	str	r2, [r3, #0]
        frames[i].header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001046:	4a18      	ldr	r2, [pc, #96]	@ (80010a8 <InitCANFrames+0xa4>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	212c      	movs	r1, #44	@ 0x2c
 800104c:	fb01 f303 	mul.w	r3, r1, r3
 8001050:	4413      	add	r3, r2
 8001052:	3310      	adds	r3, #16
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
        frames[i].header.BitRateSwitch = FDCAN_BRS_OFF;
 8001058:	4a13      	ldr	r2, [pc, #76]	@ (80010a8 <InitCANFrames+0xa4>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	212c      	movs	r1, #44	@ 0x2c
 800105e:	fb01 f303 	mul.w	r3, r1, r3
 8001062:	4413      	add	r3, r2
 8001064:	3314      	adds	r3, #20
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
        frames[i].header.FDFormat = FDCAN_CLASSIC_CAN;
 800106a:	4a0f      	ldr	r2, [pc, #60]	@ (80010a8 <InitCANFrames+0xa4>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	212c      	movs	r1, #44	@ 0x2c
 8001070:	fb01 f303 	mul.w	r3, r1, r3
 8001074:	4413      	add	r3, r2
 8001076:	3318      	adds	r3, #24
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
        frames[i].header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800107c:	4a0a      	ldr	r2, [pc, #40]	@ (80010a8 <InitCANFrames+0xa4>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	212c      	movs	r1, #44	@ 0x2c
 8001082:	fb01 f303 	mul.w	r3, r1, r3
 8001086:	4413      	add	r3, r2
 8001088:	331c      	adds	r3, #28
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < FRAME_COUNT; i++) {
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3301      	adds	r3, #1
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b02      	cmp	r3, #2
 8001098:	ddba      	ble.n	8001010 <InitCANFrames+0xc>
    }
}
 800109a:	bf00      	nop
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	20000000 	.word	0x20000000

080010ac <SendCANFrame>:

void SendCANFrame(CAN_FrameIndex frameIndex) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
    if (frameIndex >= FRAME_COUNT) {
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d903      	bls.n	80010c4 <SendCANFrame+0x18>
    	printf("Over can frames index");
 80010bc:	480c      	ldr	r0, [pc, #48]	@ (80010f0 <SendCANFrame+0x44>)
 80010be:	f00a ff37 	bl	800bf30 <iprintf>
        return; // todo add error
 80010c2:	e011      	b.n	80010e8 <SendCANFrame+0x3c>

    }
    HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &frames[frameIndex].header, frames[frameIndex].data);
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	222c      	movs	r2, #44	@ 0x2c
 80010c8:	fb02 f303 	mul.w	r3, r2, r3
 80010cc:	4a09      	ldr	r2, [pc, #36]	@ (80010f4 <SendCANFrame+0x48>)
 80010ce:	1899      	adds	r1, r3, r2
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	222c      	movs	r2, #44	@ 0x2c
 80010d4:	fb02 f303 	mul.w	r3, r2, r3
 80010d8:	3320      	adds	r3, #32
 80010da:	4a06      	ldr	r2, [pc, #24]	@ (80010f4 <SendCANFrame+0x48>)
 80010dc:	4413      	add	r3, r2
 80010de:	3304      	adds	r3, #4
 80010e0:	461a      	mov	r2, r3
 80010e2:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <SendCANFrame+0x4c>)
 80010e4:	f002 fe9c 	bl	8003e20 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	0800cd20 	.word	0x0800cd20
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000108 	.word	0x20000108

080010fc <modify_can_frame_byte>:

void modify_can_frame_byte(uint8_t frameIndex,uint8_t byte_num, uint8_t value)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
 8001106:	460b      	mov	r3, r1
 8001108:	71bb      	strb	r3, [r7, #6]
 800110a:	4613      	mov	r3, r2
 800110c:	717b      	strb	r3, [r7, #5]
	//todo add wrong index error
   if (frameIndex >= FRAME_COUNT) {
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d903      	bls.n	800111c <modify_can_frame_byte+0x20>
		printf("Over can frames index");
 8001114:	480c      	ldr	r0, [pc, #48]	@ (8001148 <modify_can_frame_byte+0x4c>)
 8001116:	f00a ff0b 	bl	800bf30 <iprintf>
		return; // todo add error
 800111a:	e011      	b.n	8001140 <modify_can_frame_byte+0x44>
   }

   if (byte_num > 8) {
 800111c:	79bb      	ldrb	r3, [r7, #6]
 800111e:	2b08      	cmp	r3, #8
 8001120:	d903      	bls.n	800112a <modify_can_frame_byte+0x2e>
	   printf("Wrong byte index");
 8001122:	480a      	ldr	r0, [pc, #40]	@ (800114c <modify_can_frame_byte+0x50>)
 8001124:	f00a ff04 	bl	800bf30 <iprintf>
       return;
 8001128:	e00a      	b.n	8001140 <modify_can_frame_byte+0x44>
   }
	frames[frameIndex].data[byte_num] = value;
 800112a:	79fa      	ldrb	r2, [r7, #7]
 800112c:	79bb      	ldrb	r3, [r7, #6]
 800112e:	4908      	ldr	r1, [pc, #32]	@ (8001150 <modify_can_frame_byte+0x54>)
 8001130:	202c      	movs	r0, #44	@ 0x2c
 8001132:	fb00 f202 	mul.w	r2, r0, r2
 8001136:	440a      	add	r2, r1
 8001138:	4413      	add	r3, r2
 800113a:	3324      	adds	r3, #36	@ 0x24
 800113c:	797a      	ldrb	r2, [r7, #5]
 800113e:	701a      	strb	r2, [r3, #0]
}
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	0800cd20 	.word	0x0800cd20
 800114c:	0800cd38 	.word	0x0800cd38
 8001150:	20000000 	.word	0x20000000

08001154 <MX_GPDMA1_Init>:

/* USER CODE END 0 */

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800115a:	4b0d      	ldr	r3, [pc, #52]	@ (8001190 <MX_GPDMA1_Init+0x3c>)
 800115c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001160:	4a0b      	ldr	r2, [pc, #44]	@ (8001190 <MX_GPDMA1_Init+0x3c>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800116a:	4b09      	ldr	r3, [pc, #36]	@ (8001190 <MX_GPDMA1_Init+0x3c>)
 800116c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 1, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2101      	movs	r1, #1
 800117c:	201b      	movs	r0, #27
 800117e:	f001 fc5f 	bl	8002a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8001182:	201b      	movs	r0, #27
 8001184:	f001 fc76 	bl	8002a74 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	44020c00 	.word	0x44020c00

08001194 <MX_GPIO_Init>:
     PH1-OSC_OUT(PH1)   ------> RCC_OSC_OUT
     PA13(JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14(JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	@ 0x28
 8001198:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011aa:	4b46      	ldr	r3, [pc, #280]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011b0:	4a44      	ldr	r2, [pc, #272]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011ba:	4b42      	ldr	r3, [pc, #264]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011c8:	4b3e      	ldr	r3, [pc, #248]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011ce:	4a3d      	ldr	r2, [pc, #244]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011d8:	4b3a      	ldr	r3, [pc, #232]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	4b37      	ldr	r3, [pc, #220]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011ec:	4a35      	ldr	r2, [pc, #212]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011f6:	4b33      	ldr	r3, [pc, #204]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001204:	4b2f      	ldr	r3, [pc, #188]	@ (80012c4 <MX_GPIO_Init+0x130>)
 8001206:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800120a:	4a2e      	ldr	r2, [pc, #184]	@ (80012c4 <MX_GPIO_Init+0x130>)
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001214:	4b2b      	ldr	r3, [pc, #172]	@ (80012c4 <MX_GPIO_Init+0x130>)
 8001216:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(K_BUS_SLP_GPIO_Port, K_BUS_SLP_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001228:	4827      	ldr	r0, [pc, #156]	@ (80012c8 <MX_GPIO_Init+0x134>)
 800122a:	f003 fa07 	bl	800463c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BACKLIGHT_Pin|BATT_CHARGE_LIGHT_Pin|OIL_LIGHT_Pin|BRAKE_FLU_LIGHT_Pin
 800122e:	2200      	movs	r2, #0
 8001230:	f248 41f0 	movw	r1, #34032	@ 0x84f0
 8001234:	4825      	ldr	r0, [pc, #148]	@ (80012cc <MX_GPIO_Init+0x138>)
 8001236:	f003 fa01 	bl	800463c <HAL_GPIO_WritePin>
                          |TRCVR_MODE_Pin|D3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ABS_Pin|PARKING_BRAKE_Pin|BRAKE_WEAR_SENS_Pin|COOLANT_LVL_SENS_Pin
 800123a:	2200      	movs	r2, #0
 800123c:	f243 413e 	movw	r1, #13374	@ 0x343e
 8001240:	4823      	ldr	r0, [pc, #140]	@ (80012d0 <MX_GPIO_Init+0x13c>)
 8001242:	f003 f9fb 	bl	800463c <HAL_GPIO_WritePin>
                          |WASHER_FLU_LVL_Pin|D2_Pin|D1_Pin|Fuel_HVC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : STM_ESP_Pin */
  GPIO_InitStruct.Pin = STM_ESP_Pin;
 8001246:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124c:	2300      	movs	r3, #0
 800124e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(STM_ESP_GPIO_Port, &GPIO_InitStruct);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	481b      	ldr	r0, [pc, #108]	@ (80012c8 <MX_GPIO_Init+0x134>)
 800125c:	f003 f89c 	bl	8004398 <HAL_GPIO_Init>

  /*Configure GPIO pin : K_BUS_SLP_Pin */
  GPIO_InitStruct.Pin = K_BUS_SLP_Pin;
 8001260:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001264:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001266:	2301      	movs	r3, #1
 8001268:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(K_BUS_SLP_GPIO_Port, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	4813      	ldr	r0, [pc, #76]	@ (80012c8 <MX_GPIO_Init+0x134>)
 800127a:	f003 f88d 	bl	8004398 <HAL_GPIO_Init>

  /*Configure GPIO pins : BACKLIGHT_Pin BATT_CHARGE_LIGHT_Pin OIL_LIGHT_Pin BRAKE_FLU_LIGHT_Pin
                           TRCVR_MODE_Pin D3_Pin */
  GPIO_InitStruct.Pin = BACKLIGHT_Pin|BATT_CHARGE_LIGHT_Pin|OIL_LIGHT_Pin|BRAKE_FLU_LIGHT_Pin
 800127e:	f248 43f0 	movw	r3, #34032	@ 0x84f0
 8001282:	617b      	str	r3, [r7, #20]
                          |TRCVR_MODE_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001284:	2301      	movs	r3, #1
 8001286:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4619      	mov	r1, r3
 8001296:	480d      	ldr	r0, [pc, #52]	@ (80012cc <MX_GPIO_Init+0x138>)
 8001298:	f003 f87e 	bl	8004398 <HAL_GPIO_Init>

  /*Configure GPIO pins : ABS_Pin PARKING_BRAKE_Pin BRAKE_WEAR_SENS_Pin COOLANT_LVL_SENS_Pin
                           WASHER_FLU_LVL_Pin D2_Pin D1_Pin Fuel_HVC_Pin */
  GPIO_InitStruct.Pin = ABS_Pin|PARKING_BRAKE_Pin|BRAKE_WEAR_SENS_Pin|COOLANT_LVL_SENS_Pin
 800129c:	f243 433e 	movw	r3, #13374	@ 0x343e
 80012a0:	617b      	str	r3, [r7, #20]
                          |WASHER_FLU_LVL_Pin|D2_Pin|D1_Pin|Fuel_HVC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a2:	2301      	movs	r3, #1
 80012a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	4619      	mov	r1, r3
 80012b4:	4806      	ldr	r0, [pc, #24]	@ (80012d0 <MX_GPIO_Init+0x13c>)
 80012b6:	f003 f86f 	bl	8004398 <HAL_GPIO_Init>

}
 80012ba:	bf00      	nop
 80012bc:	3728      	adds	r7, #40	@ 0x28
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	44020c00 	.word	0x44020c00
 80012c8:	42020800 	.word	0x42020800
 80012cc:	42020000 	.word	0x42020000
 80012d0:	42020400 	.word	0x42020400

080012d4 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80012d8:	2000      	movs	r0, #0
 80012da:	f003 f9e1 	bl	80046a0 <HAL_ICACHE_ConfigAssociativityMode>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80012e4:	f000 fc58 	bl	8001b98 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80012e8:	f003 f9fa 	bl	80046e0 <HAL_ICACHE_Enable>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80012f2:	f000 fc51 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <ESP32_SendCommand>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ESP32_SendCommand(const char* command) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7fe ffc7 	bl	8000298 <strlen>
 800130a:	4603      	mov	r3, r0
 800130c:	b29a      	uxth	r2, r3
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	4808      	ldr	r0, [pc, #32]	@ (8001338 <ESP32_SendCommand+0x3c>)
 8001316:	f009 fa03 	bl	800a720 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);  // Końcówka komendy AT
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
 800131e:	2202      	movs	r2, #2
 8001320:	4906      	ldr	r1, [pc, #24]	@ (800133c <ESP32_SendCommand+0x40>)
 8001322:	4805      	ldr	r0, [pc, #20]	@ (8001338 <ESP32_SendCommand+0x3c>)
 8001324:	f009 f9fc 	bl	800a720 <HAL_UART_Transmit>
    HAL_Delay(100);  // Czekaj na odpowiedź
 8001328:	2064      	movs	r0, #100	@ 0x64
 800132a:	f001 faad 	bl	8002888 <HAL_Delay>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200003ac 	.word	0x200003ac
 800133c:	0800cd5c 	.word	0x0800cd5c

08001340 <parse_frame>:

void parse_frame(uint8_t *buffer) {
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]

    HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);  // Diagnostyka
 8001348:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800134c:	48b1      	ldr	r0, [pc, #708]	@ (8001614 <parse_frame+0x2d4>)
 800134e:	f003 f98d 	bl	800466c <HAL_GPIO_TogglePin>

    // Parsowanie danych z FrameBuffer do struktury FrameData
    uint8_t offset = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.time, &buffer[offset], sizeof(frame.time));
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	4413      	add	r3, r2
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	461a      	mov	r2, r3
 8001360:	4bad      	ldr	r3, [pc, #692]	@ (8001618 <parse_frame+0x2d8>)
 8001362:	601a      	str	r2, [r3, #0]
    offset += sizeof(frame.time);
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	3304      	adds	r3, #4
 8001368:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.car, &buffer[offset], sizeof(frame.car));
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	4413      	add	r3, r2
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	4ba8      	ldr	r3, [pc, #672]	@ (8001618 <parse_frame+0x2d8>)
 8001376:	605a      	str	r2, [r3, #4]
    offset += sizeof(frame.car);
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	3304      	adds	r3, #4
 800137c:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.flags, &buffer[offset], sizeof(frame.flags));
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	4413      	add	r3, r2
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	b29a      	uxth	r2, r3
 8001388:	4ba3      	ldr	r3, [pc, #652]	@ (8001618 <parse_frame+0x2d8>)
 800138a:	811a      	strh	r2, [r3, #8]
    offset += sizeof(frame.flags);
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	3302      	adds	r3, #2
 8001390:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.gear, &buffer[offset], sizeof(frame.gear));
 8001392:	7bfb      	ldrb	r3, [r7, #15]
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	4413      	add	r3, r2
 8001398:	781a      	ldrb	r2, [r3, #0]
 800139a:	4b9f      	ldr	r3, [pc, #636]	@ (8001618 <parse_frame+0x2d8>)
 800139c:	729a      	strb	r2, [r3, #10]
    offset += sizeof(frame.gear);
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	3301      	adds	r3, #1
 80013a2:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.plid, &buffer[offset], sizeof(frame.plid));
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	781a      	ldrb	r2, [r3, #0]
 80013ac:	4b9a      	ldr	r3, [pc, #616]	@ (8001618 <parse_frame+0x2d8>)
 80013ae:	72da      	strb	r2, [r3, #11]
    offset += sizeof(frame.plid);
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	3301      	adds	r3, #1
 80013b4:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.speed, &buffer[offset], sizeof(frame.speed));
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	4413      	add	r3, r2
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	4b95      	ldr	r3, [pc, #596]	@ (8001618 <parse_frame+0x2d8>)
 80013c2:	60da      	str	r2, [r3, #12]
    offset += sizeof(frame.speed);
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	3304      	adds	r3, #4
 80013c8:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.rpm, &buffer[offset], sizeof(frame.rpm));
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	4413      	add	r3, r2
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b90      	ldr	r3, [pc, #576]	@ (8001618 <parse_frame+0x2d8>)
 80013d6:	611a      	str	r2, [r3, #16]
    offset += sizeof(frame.rpm);
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	3304      	adds	r3, #4
 80013dc:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.turbo, &buffer[offset], sizeof(frame.turbo));
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	4413      	add	r3, r2
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	4b8b      	ldr	r3, [pc, #556]	@ (8001618 <parse_frame+0x2d8>)
 80013ea:	615a      	str	r2, [r3, #20]
    offset += sizeof(frame.turbo);
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	3304      	adds	r3, #4
 80013f0:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.engTemp, &buffer[offset], sizeof(frame.engTemp));
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	4413      	add	r3, r2
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	461a      	mov	r2, r3
 80013fc:	4b86      	ldr	r3, [pc, #536]	@ (8001618 <parse_frame+0x2d8>)
 80013fe:	619a      	str	r2, [r3, #24]
    offset += sizeof(frame.engTemp);
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	3304      	adds	r3, #4
 8001404:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.fuel, &buffer[offset], sizeof(frame.fuel));
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	4413      	add	r3, r2
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	461a      	mov	r2, r3
 8001410:	4b81      	ldr	r3, [pc, #516]	@ (8001618 <parse_frame+0x2d8>)
 8001412:	61da      	str	r2, [r3, #28]
    offset += sizeof(frame.fuel);
 8001414:	7bfb      	ldrb	r3, [r7, #15]
 8001416:	3304      	adds	r3, #4
 8001418:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.oilPressure, &buffer[offset], sizeof(frame.oilPressure));
 800141a:	7bfb      	ldrb	r3, [r7, #15]
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	4413      	add	r3, r2
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	4b7c      	ldr	r3, [pc, #496]	@ (8001618 <parse_frame+0x2d8>)
 8001426:	621a      	str	r2, [r3, #32]
    offset += sizeof(frame.oilPressure);
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	3304      	adds	r3, #4
 800142c:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.oilTemp, &buffer[offset], sizeof(frame.oilTemp));
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	4413      	add	r3, r2
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	461a      	mov	r2, r3
 8001438:	4b77      	ldr	r3, [pc, #476]	@ (8001618 <parse_frame+0x2d8>)
 800143a:	625a      	str	r2, [r3, #36]	@ 0x24
    offset += sizeof(frame.oilTemp);
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	3304      	adds	r3, #4
 8001440:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.dashLights, &buffer[offset], sizeof(frame.dashLights));
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	4413      	add	r3, r2
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	461a      	mov	r2, r3
 800144c:	4b72      	ldr	r3, [pc, #456]	@ (8001618 <parse_frame+0x2d8>)
 800144e:	629a      	str	r2, [r3, #40]	@ 0x28
    offset += sizeof(frame.dashLights);
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	3304      	adds	r3, #4
 8001454:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.showLights, &buffer[offset], sizeof(frame.showLights));
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	4413      	add	r3, r2
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	461a      	mov	r2, r3
 8001460:	4b6d      	ldr	r3, [pc, #436]	@ (8001618 <parse_frame+0x2d8>)
 8001462:	62da      	str	r2, [r3, #44]	@ 0x2c
    offset += sizeof(frame.showLights);
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	3304      	adds	r3, #4
 8001468:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.throttle, &buffer[offset], sizeof(frame.throttle));
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	4413      	add	r3, r2
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	461a      	mov	r2, r3
 8001474:	4b68      	ldr	r3, [pc, #416]	@ (8001618 <parse_frame+0x2d8>)
 8001476:	631a      	str	r2, [r3, #48]	@ 0x30
    offset += sizeof(frame.throttle);
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	3304      	adds	r3, #4
 800147c:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.brake, &buffer[offset], sizeof(frame.brake));
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	4413      	add	r3, r2
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	4b63      	ldr	r3, [pc, #396]	@ (8001618 <parse_frame+0x2d8>)
 800148a:	635a      	str	r2, [r3, #52]	@ 0x34
    offset += sizeof(frame.brake);
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	3304      	adds	r3, #4
 8001490:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.clutch, &buffer[offset], sizeof(frame.clutch));
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	4413      	add	r3, r2
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	461a      	mov	r2, r3
 800149c:	4b5e      	ldr	r3, [pc, #376]	@ (8001618 <parse_frame+0x2d8>)
 800149e:	639a      	str	r2, [r3, #56]	@ 0x38
    offset += sizeof(frame.clutch);
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
 80014a2:	3304      	adds	r3, #4
 80014a4:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.display1, &buffer[offset], sizeof(frame.display1));
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	441a      	add	r2, r3
 80014ac:	4b5a      	ldr	r3, [pc, #360]	@ (8001618 <parse_frame+0x2d8>)
 80014ae:	f103 043c 	add.w	r4, r3, #60	@ 0x3c
 80014b2:	4613      	mov	r3, r2
 80014b4:	6818      	ldr	r0, [r3, #0]
 80014b6:	6859      	ldr	r1, [r3, #4]
 80014b8:	689a      	ldr	r2, [r3, #8]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    offset += sizeof(frame.display1);
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	3310      	adds	r3, #16
 80014c2:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.display2, &buffer[offset], sizeof(frame.display2));
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	441a      	add	r2, r3
 80014ca:	4b53      	ldr	r3, [pc, #332]	@ (8001618 <parse_frame+0x2d8>)
 80014cc:	f103 044c 	add.w	r4, r3, #76	@ 0x4c
 80014d0:	4613      	mov	r3, r2
 80014d2:	6818      	ldr	r0, [r3, #0]
 80014d4:	6859      	ldr	r1, [r3, #4]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    offset += sizeof(frame.display2);
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	3310      	adds	r3, #16
 80014e0:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.id, &buffer[offset], sizeof(frame.id));
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	4413      	add	r3, r2
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b4a      	ldr	r3, [pc, #296]	@ (8001618 <parse_frame+0x2d8>)
 80014ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    uint16_t hexValue_RPM = (uint16_t)(frame.rpm / 0.15625);  // Rzutowanie na uint16_t
 80014f0:	4b49      	ldr	r3, [pc, #292]	@ (8001618 <parse_frame+0x2d8>)
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff f83b 	bl	8000570 <__aeabi_f2d>
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	4b47      	ldr	r3, [pc, #284]	@ (800161c <parse_frame+0x2dc>)
 8001500:	f7ff f9b8 	bl	8000874 <__aeabi_ddiv>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4610      	mov	r0, r2
 800150a:	4619      	mov	r1, r3
 800150c:	f7ff fa9a 	bl	8000a44 <__aeabi_d2uiz>
 8001510:	4603      	mov	r3, r0
 8001512:	81bb      	strh	r3, [r7, #12]
    uint8_t lsb = hexValue_RPM & 0xFF;  // Pobranie 8 najmłodszych bitów
 8001514:	89bb      	ldrh	r3, [r7, #12]
 8001516:	72fb      	strb	r3, [r7, #11]
    uint8_t msb = (hexValue_RPM >> 8) & 0xFF;  // Pobranie 8 najbardziej znaczących bitów
 8001518:	89bb      	ldrh	r3, [r7, #12]
 800151a:	0a1b      	lsrs	r3, r3, #8
 800151c:	b29b      	uxth	r3, r3
 800151e:	72bb      	strb	r3, [r7, #10]


    uint8_t hexValue_temperature = ((frame.engTemp + 48.0) / 0.75) ;
 8001520:	4b3d      	ldr	r3, [pc, #244]	@ (8001618 <parse_frame+0x2d8>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff f823 	bl	8000570 <__aeabi_f2d>
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	4b3c      	ldr	r3, [pc, #240]	@ (8001620 <parse_frame+0x2e0>)
 8001530:	f7fe fec0 	bl	80002b4 <__adddf3>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	4b38      	ldr	r3, [pc, #224]	@ (8001624 <parse_frame+0x2e4>)
 8001542:	f7ff f997 	bl	8000874 <__aeabi_ddiv>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	f7ff fa79 	bl	8000a44 <__aeabi_d2uiz>
 8001552:	4603      	mov	r3, r0
 8001554:	727b      	strb	r3, [r7, #9]

    isTurboActive = frame.flags & OG_TURBO;
 8001556:	4b30      	ldr	r3, [pc, #192]	@ (8001618 <parse_frame+0x2d8>)
 8001558:	891b      	ldrh	r3, [r3, #8]
 800155a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800155e:	2b00      	cmp	r3, #0
 8001560:	bf14      	ite	ne
 8001562:	2301      	movne	r3, #1
 8001564:	2300      	moveq	r3, #0
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b2f      	ldr	r3, [pc, #188]	@ (8001628 <parse_frame+0x2e8>)
 800156a:	701a      	strb	r2, [r3, #0]
    isMetric = frame.flags & OG_KM;
 800156c:	4b2a      	ldr	r3, [pc, #168]	@ (8001618 <parse_frame+0x2d8>)
 800156e:	891b      	ldrh	r3, [r3, #8]
 8001570:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001574:	2b00      	cmp	r3, #0
 8001576:	bf14      	ite	ne
 8001578:	2301      	movne	r3, #1
 800157a:	2300      	moveq	r3, #0
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4b2b      	ldr	r3, [pc, #172]	@ (800162c <parse_frame+0x2ec>)
 8001580:	701a      	strb	r2, [r3, #0]
    prefersBar = frame.flags & OG_BAR;
 8001582:	4b25      	ldr	r3, [pc, #148]	@ (8001618 <parse_frame+0x2d8>)
 8001584:	891b      	ldrh	r3, [r3, #8]
 8001586:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800158a:	2b00      	cmp	r3, #0
 800158c:	bf14      	ite	ne
 800158e:	2301      	movne	r3, #1
 8001590:	2300      	moveq	r3, #0
 8001592:	b2da      	uxtb	r2, r3
 8001594:	4b26      	ldr	r3, [pc, #152]	@ (8001630 <parse_frame+0x2f0>)
 8001596:	701a      	strb	r2, [r3, #0]

    isShiftLightOn = frame.showLights & DL_SHIFT;
 8001598:	4b1f      	ldr	r3, [pc, #124]	@ (8001618 <parse_frame+0x2d8>)
 800159a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	bf14      	ite	ne
 80015a4:	2301      	movne	r3, #1
 80015a6:	2300      	moveq	r3, #0
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4b22      	ldr	r3, [pc, #136]	@ (8001634 <parse_frame+0x2f4>)
 80015ac:	701a      	strb	r2, [r3, #0]
    isFullBeam = frame.showLights & DL_FULLBEAM;
 80015ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001618 <parse_frame+0x2d8>)
 80015b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	bf14      	ite	ne
 80015ba:	2301      	movne	r3, #1
 80015bc:	2300      	moveq	r3, #0
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001638 <parse_frame+0x2f8>)
 80015c2:	701a      	strb	r2, [r3, #0]
    isHandbrakeOn = frame.showLights & DL_HANDBRAKE;
 80015c4:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <parse_frame+0x2d8>)
 80015c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	bf14      	ite	ne
 80015d0:	2301      	movne	r3, #1
 80015d2:	2300      	moveq	r3, #0
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4b19      	ldr	r3, [pc, #100]	@ (800163c <parse_frame+0x2fc>)
 80015d8:	701a      	strb	r2, [r3, #0]
    isTractionCtrl = frame.showLights & DL_TC;
 80015da:	4b0f      	ldr	r3, [pc, #60]	@ (8001618 <parse_frame+0x2d8>)
 80015dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015de:	f003 0310 	and.w	r3, r3, #16
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	bf14      	ite	ne
 80015e6:	2301      	movne	r3, #1
 80015e8:	2300      	moveq	r3, #0
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	4b14      	ldr	r3, [pc, #80]	@ (8001640 <parse_frame+0x300>)
 80015ee:	701a      	strb	r2, [r3, #0]
    isABSActive = frame.showLights & DL_ABS;
 80015f0:	4b09      	ldr	r3, [pc, #36]	@ (8001618 <parse_frame+0x2d8>)
 80015f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	bf14      	ite	ne
 80015fc:	2301      	movne	r3, #1
 80015fe:	2300      	moveq	r3, #0
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4b10      	ldr	r3, [pc, #64]	@ (8001644 <parse_frame+0x304>)
 8001604:	701a      	strb	r2, [r3, #0]
    isOilWarning = frame.showLights & DL_OILWARN;
 8001606:	4b04      	ldr	r3, [pc, #16]	@ (8001618 <parse_frame+0x2d8>)
 8001608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800160a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800160e:	2b00      	cmp	r3, #0
 8001610:	e01a      	b.n	8001648 <parse_frame+0x308>
 8001612:	bf00      	nop
 8001614:	42020000 	.word	0x42020000
 8001618:	20000250 	.word	0x20000250
 800161c:	3fc40000 	.word	0x3fc40000
 8001620:	40480000 	.word	0x40480000
 8001624:	3fe80000 	.word	0x3fe80000
 8001628:	200002b4 	.word	0x200002b4
 800162c:	200002b5 	.word	0x200002b5
 8001630:	200002b6 	.word	0x200002b6
 8001634:	200002b7 	.word	0x200002b7
 8001638:	200002b8 	.word	0x200002b8
 800163c:	200002b9 	.word	0x200002b9
 8001640:	200002ba 	.word	0x200002ba
 8001644:	200002bb 	.word	0x200002bb
 8001648:	bf14      	ite	ne
 800164a:	2301      	movne	r3, #1
 800164c:	2300      	moveq	r3, #0
 800164e:	b2da      	uxtb	r2, r3
 8001650:	4b1c      	ldr	r3, [pc, #112]	@ (80016c4 <parse_frame+0x384>)
 8001652:	701a      	strb	r2, [r3, #0]
    isBatteryWarning = frame.showLights & DL_BATTERY;
 8001654:	4b1c      	ldr	r3, [pc, #112]	@ (80016c8 <parse_frame+0x388>)
 8001656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001658:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800165c:	2b00      	cmp	r3, #0
 800165e:	bf14      	ite	ne
 8001660:	2301      	movne	r3, #1
 8001662:	2300      	moveq	r3, #0
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4b19      	ldr	r3, [pc, #100]	@ (80016cc <parse_frame+0x38c>)
 8001668:	701a      	strb	r2, [r3, #0]
    isLeftSignal = frame.showLights & DL_SIGNAL_L;
 800166a:	4b17      	ldr	r3, [pc, #92]	@ (80016c8 <parse_frame+0x388>)
 800166c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800166e:	f003 0320 	and.w	r3, r3, #32
 8001672:	2b00      	cmp	r3, #0
 8001674:	bf14      	ite	ne
 8001676:	2301      	movne	r3, #1
 8001678:	2300      	moveq	r3, #0
 800167a:	b2da      	uxtb	r2, r3
 800167c:	4b14      	ldr	r3, [pc, #80]	@ (80016d0 <parse_frame+0x390>)
 800167e:	701a      	strb	r2, [r3, #0]
    isRightSignal = frame.showLights & DL_SIGNAL_R;
 8001680:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <parse_frame+0x388>)
 8001682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001688:	2b00      	cmp	r3, #0
 800168a:	bf14      	ite	ne
 800168c:	2301      	movne	r3, #1
 800168e:	2300      	moveq	r3, #0
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4b10      	ldr	r3, [pc, #64]	@ (80016d4 <parse_frame+0x394>)
 8001694:	701a      	strb	r2, [r3, #0]


    modify_can_frame_byte(FRAME_316, 2, lsb);  // Modyfikacja bajtu w ramce CAN
 8001696:	7afb      	ldrb	r3, [r7, #11]
 8001698:	461a      	mov	r2, r3
 800169a:	2102      	movs	r1, #2
 800169c:	2000      	movs	r0, #0
 800169e:	f7ff fd2d 	bl	80010fc <modify_can_frame_byte>
    modify_can_frame_byte(FRAME_316, 3, msb);  // Modyfikacja bajtu w ramce CAN
 80016a2:	7abb      	ldrb	r3, [r7, #10]
 80016a4:	461a      	mov	r2, r3
 80016a6:	2103      	movs	r1, #3
 80016a8:	2000      	movs	r0, #0
 80016aa:	f7ff fd27 	bl	80010fc <modify_can_frame_byte>
    modify_can_frame_byte(FRAME_329, 1, hexValue_temperature);
 80016ae:	7a7b      	ldrb	r3, [r7, #9]
 80016b0:	461a      	mov	r2, r3
 80016b2:	2101      	movs	r1, #1
 80016b4:	2001      	movs	r0, #1
 80016b6:	f7ff fd21 	bl	80010fc <modify_can_frame_byte>

}
 80016ba:	bf00      	nop
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd90      	pop	{r4, r7, pc}
 80016c2:	bf00      	nop
 80016c4:	200002bc 	.word	0x200002bc
 80016c8:	20000250 	.word	0x20000250
 80016cc:	200002bd 	.word	0x200002bd
 80016d0:	200002be 	.word	0x200002be
 80016d4:	200002bf 	.word	0x200002bf

080016d8 <calculate_checksum>:

uint8_t calculate_checksum(uint8_t *data, uint8_t length) {
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	70fb      	strb	r3, [r7, #3]
    uint8_t checksum = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; i++) {
 80016e8:	2300      	movs	r3, #0
 80016ea:	73bb      	strb	r3, [r7, #14]
 80016ec:	e009      	b.n	8001702 <calculate_checksum+0x2a>
        checksum ^= data[i];
 80016ee:	7bbb      	ldrb	r3, [r7, #14]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	4413      	add	r3, r2
 80016f4:	781a      	ldrb	r2, [r3, #0]
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
 80016f8:	4053      	eors	r3, r2
 80016fa:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; i++) {
 80016fc:	7bbb      	ldrb	r3, [r7, #14]
 80016fe:	3301      	adds	r3, #1
 8001700:	73bb      	strb	r3, [r7, #14]
 8001702:	7bba      	ldrb	r2, [r7, #14]
 8001704:	78fb      	ldrb	r3, [r7, #3]
 8001706:	429a      	cmp	r2, r3
 8001708:	d3f1      	bcc.n	80016ee <calculate_checksum+0x16>
    }
    return checksum;
 800170a:	7bfb      	ldrb	r3, [r7, #15]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <Send_KBUS_frame>:

void Send_KBUS_frame(uint8_t Source_ID, uint8_t Dest_ID, uint8_t command, uint8_t Byte1, uint8_t Byte2, uint8_t Byte3, uint8_t Byte4 )
{
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b087      	sub	sp, #28
 800171c:	af00      	add	r7, sp, #0
 800171e:	4604      	mov	r4, r0
 8001720:	4608      	mov	r0, r1
 8001722:	4611      	mov	r1, r2
 8001724:	461a      	mov	r2, r3
 8001726:	4623      	mov	r3, r4
 8001728:	71fb      	strb	r3, [r7, #7]
 800172a:	4603      	mov	r3, r0
 800172c:	71bb      	strb	r3, [r7, #6]
 800172e:	460b      	mov	r3, r1
 8001730:	717b      	strb	r3, [r7, #5]
 8001732:	4613      	mov	r3, r2
 8001734:	713b      	strb	r3, [r7, #4]
	uint8_t frame[10];
	uint8_t lenght;

	frame[0] = Source_ID; //LM 0xd0 → Broadcast 0xbf
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	733b      	strb	r3, [r7, #12]
	//frame[1] = lenght;
	frame[2] = Dest_ID;
 800173a:	79bb      	ldrb	r3, [r7, #6]
 800173c:	73bb      	strb	r3, [r7, #14]
	frame[3] = command;
 800173e:	797b      	ldrb	r3, [r7, #5]
 8001740:	73fb      	strb	r3, [r7, #15]
	frame[4] = Byte1;
 8001742:	793b      	ldrb	r3, [r7, #4]
 8001744:	743b      	strb	r3, [r7, #16]
	frame[5] = Byte2;
 8001746:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800174a:	747b      	strb	r3, [r7, #17]
	frame[6] = Byte3;
 800174c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001750:	74bb      	strb	r3, [r7, #18]
	frame[7] = Byte4;
 8001752:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001756:	74fb      	strb	r3, [r7, #19]
	frame[8] = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	753b      	strb	r3, [r7, #20]

	//lenght = sizeof(frame) - 2;
	frame[1] = 0x7; //lenght
 800175c:	2307      	movs	r3, #7
 800175e:	737b      	strb	r3, [r7, #13]
	frame[8] = calculate_checksum(frame, 8);
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	2108      	movs	r1, #8
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff ffb6 	bl	80016d8 <calculate_checksum>
 800176c:	4603      	mov	r3, r0
 800176e:	753b      	strb	r3, [r7, #20]
	frame[9] = '\n';
 8001770:	230a      	movs	r3, #10
 8001772:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart2, frame, sizeof(frame), 100);
 8001774:	f107 010c 	add.w	r1, r7, #12
 8001778:	2364      	movs	r3, #100	@ 0x64
 800177a:	220a      	movs	r2, #10
 800177c:	4803      	ldr	r0, [pc, #12]	@ (800178c <Send_KBUS_frame+0x74>)
 800177e:	f008 ffcf 	bl	800a720 <HAL_UART_Transmit>
}
 8001782:	bf00      	nop
 8001784:	371c      	adds	r7, #28
 8001786:	46bd      	mov	sp, r7
 8001788:	bd90      	pop	{r4, r7, pc}
 800178a:	bf00      	nop
 800178c:	20000440 	.word	0x20000440

08001790 <process_frame>:


void process_frame(void) {
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
    if (frameReady) {
 8001794:	4b05      	ldr	r3, [pc, #20]	@ (80017ac <process_frame+0x1c>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <process_frame+0x18>
        parse_frame(FrameBuffer);
 800179c:	4804      	ldr	r0, [pc, #16]	@ (80017b0 <process_frame+0x20>)
 800179e:	f7ff fdcf 	bl	8001340 <parse_frame>
        frameReady = false;
 80017a2:	4b02      	ldr	r3, [pc, #8]	@ (80017ac <process_frame+0x1c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]
    }
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	2000024e 	.word	0x2000024e
 80017b0:	200001ec 	.word	0x200001ec

080017b4 <Set_PWM_Frequency>:

void Set_PWM_Frequency(uint16_t speed_kmh) {
 80017b4:	b480      	push	{r7}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	80fb      	strh	r3, [r7, #6]
    uint32_t freq = MIN_FREQ + ((MAX_FREQ - MIN_FREQ) * speed_kmh) / MAX_SPEED;
 80017be:	88fb      	ldrh	r3, [r7, #6]
 80017c0:	f44f 62d7 	mov.w	r2, #1720	@ 0x6b8
 80017c4:	fb02 f303 	mul.w	r3, r2, r3
 80017c8:	4a22      	ldr	r2, [pc, #136]	@ (8001854 <Set_PWM_Frequency+0xa0>)
 80017ca:	fb82 1203 	smull	r1, r2, r2, r3
 80017ce:	441a      	add	r2, r3
 80017d0:	1212      	asrs	r2, r2, #8
 80017d2:	17db      	asrs	r3, r3, #31
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	3332      	adds	r3, #50	@ 0x32
 80017d8:	60fb      	str	r3, [r7, #12]

    uint32_t arr_value, psc_value;

    if (freq < 3800) {
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f640 62d7 	movw	r2, #3799	@ 0xed7
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d817      	bhi.n	8001814 <Set_PWM_Frequency+0x60>
        psc_value = (250000000 / (65536 * freq));
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	041b      	lsls	r3, r3, #16
 80017e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001858 <Set_PWM_Frequency+0xa4>)
 80017ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ee:	613b      	str	r3, [r7, #16]
        if (psc_value > 65535) psc_value = 65535;  // PSC nie może przekroczyć 16 bitów
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017f6:	d302      	bcc.n	80017fe <Set_PWM_Frequency+0x4a>
 80017f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017fc:	613b      	str	r3, [r7, #16]
        arr_value = (250000000 / ((psc_value + 1) * freq)) - 1;
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	3301      	adds	r3, #1
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	fb02 f303 	mul.w	r3, r2, r3
 8001808:	4a13      	ldr	r2, [pc, #76]	@ (8001858 <Set_PWM_Frequency+0xa4>)
 800180a:	fbb2 f3f3 	udiv	r3, r2, r3
 800180e:	3b01      	subs	r3, #1
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	e007      	b.n	8001824 <Set_PWM_Frequency+0x70>
    } else {
        psc_value = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	613b      	str	r3, [r7, #16]
        arr_value = (250000000 / freq) - 1;
 8001818:	4a0f      	ldr	r2, [pc, #60]	@ (8001858 <Set_PWM_Frequency+0xa4>)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001820:	3b01      	subs	r3, #1
 8001822:	617b      	str	r3, [r7, #20]
    }

    if (arr_value > 65535) arr_value = 65535;  // Ograniczenie ARR do 16 bitów
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800182a:	d302      	bcc.n	8001832 <Set_PWM_Frequency+0x7e>
 800182c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001830:	617b      	str	r3, [r7, #20]
    //printf("Speed: %d km/h, Freq: %lu Hz, PSC: %lu, ARR: %lu\n", speed_kmh, freq, psc_value, arr_value);

    __HAL_TIM_SET_PRESCALER(&htim1, psc_value);
 8001832:	4b0a      	ldr	r3, [pc, #40]	@ (800185c <Set_PWM_Frequency+0xa8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_TIM_SET_AUTORELOAD(&htim1, arr_value);
 800183a:	4b08      	ldr	r3, [pc, #32]	@ (800185c <Set_PWM_Frequency+0xa8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001842:	4a06      	ldr	r2, [pc, #24]	@ (800185c <Set_PWM_Frequency+0xa8>)
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	60d3      	str	r3, [r2, #12]
    //__HAL_TIM_SET_COUNTER(&htim1, 0);

}
 8001848:	bf00      	nop
 800184a:	371c      	adds	r7, #28
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	f2b9d649 	.word	0xf2b9d649
 8001858:	0ee6b280 	.word	0x0ee6b280
 800185c:	200002c8 	.word	0x200002c8

08001860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001864:	f000 ff52 	bl	800270c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001868:	f000 f872 	bl	8001950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800186c:	f7ff fc92 	bl	8001194 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8001870:	f7ff fc70 	bl	8001154 <MX_GPDMA1_Init>
  MX_USART1_UART_Init();
 8001874:	f000 fd7e 	bl	8002374 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001878:	f000 fb4e 	bl	8001f18 <MX_TIM1_Init>
  MX_ICACHE_Init();
 800187c:	f7ff fd2a 	bl	80012d4 <MX_ICACHE_Init>
  MX_FDCAN1_Init();
 8001880:	f7ff fadc 	bl	8000e3c <MX_FDCAN1_Init>
  MX_TIM2_Init();
 8001884:	f000 fbfa 	bl	800207c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001888:	f000 fdc0 	bl	800240c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800188c:	f000 fc6a 	bl	8002164 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001890:	2104      	movs	r1, #4
 8001892:	4825      	ldr	r0, [pc, #148]	@ (8001928 <main+0xc8>)
 8001894:	f007 fafa 	bl	8008e8c <HAL_TIM_PWM_Start>
  ESP32_SendCommand("AT+RST");  // Resetuj ESP32
 8001898:	4824      	ldr	r0, [pc, #144]	@ (800192c <main+0xcc>)
 800189a:	f7ff fd2f 	bl	80012fc <ESP32_SendCommand>
 // HAL_Delay(1000);
 // ESP32_SendCommand("AT+CWMODE=1");  // Ustaw tryb stacji (klient Wi-Fi)
 // HAL_Delay(1000);
 // ESP32_SendCommand("AT+CWJAP=\"PLAY_Swiatlowod_19A1\",\"t8Xv9auf7Z#D\"");  // Połącz z Wi-Fi
  HAL_Delay(5000);
 800189e:	f241 3088 	movw	r0, #5000	@ 0x1388
 80018a2:	f000 fff1 	bl	8002888 <HAL_Delay>
  ESP32_SendCommand("AT+CIPSTART=\"UDP\",\"0.0.0.0\",12345,12345,2");  // Ustaw tryb UDP
 80018a6:	4822      	ldr	r0, [pc, #136]	@ (8001930 <main+0xd0>)
 80018a8:	f7ff fd28 	bl	80012fc <ESP32_SendCommand>
  HAL_Delay(1000);
 80018ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018b0:	f000 ffea 	bl	8002888 <HAL_Delay>
  HAL_UART_Receive_DMA(&huart1, UartBuffer, 1);
 80018b4:	2201      	movs	r2, #1
 80018b6:	491f      	ldr	r1, [pc, #124]	@ (8001934 <main+0xd4>)
 80018b8:	481f      	ldr	r0, [pc, #124]	@ (8001938 <main+0xd8>)
 80018ba:	f008 ffcf 	bl	800a85c <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 80018be:	481f      	ldr	r0, [pc, #124]	@ (800193c <main+0xdc>)
 80018c0:	f007 f974 	bl	8008bac <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80018c4:	481e      	ldr	r0, [pc, #120]	@ (8001940 <main+0xe0>)
 80018c6:	f007 f971 	bl	8008bac <HAL_TIM_Base_Start_IT>
  InitCANFrames();
 80018ca:	f7ff fb9b 	bl	8001004 <InitCANFrames>
  HAL_GPIO_WritePin(K_BUS_SLP_GPIO_Port, K_BUS_SLP_Pin, SET); //turn off k-bus tranciver sleep mode
 80018ce:	2201      	movs	r2, #1
 80018d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018d4:	481b      	ldr	r0, [pc, #108]	@ (8001944 <main+0xe4>)
 80018d6:	f002 feb1 	bl	800463c <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 // process_frame();
	 speed = frame.speed * 3.6;
 80018da:	4b1b      	ldr	r3, [pc, #108]	@ (8001948 <main+0xe8>)
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fe46 	bl	8000570 <__aeabi_f2d>
 80018e4:	a30e      	add	r3, pc, #56	@ (adr r3, 8001920 <main+0xc0>)
 80018e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ea:	f7fe fe99 	bl	8000620 <__aeabi_dmul>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	f7ff f8c5 	bl	8000a84 <__aeabi_d2f>
 80018fa:	4603      	mov	r3, r0
 80018fc:	4a13      	ldr	r2, [pc, #76]	@ (800194c <main+0xec>)
 80018fe:	6013      	str	r3, [r2, #0]
     Set_PWM_Frequency(speed);
 8001900:	4b12      	ldr	r3, [pc, #72]	@ (800194c <main+0xec>)
 8001902:	edd3 7a00 	vldr	s15, [r3]
 8001906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800190a:	ee17 3a90 	vmov	r3, s15
 800190e:	b29b      	uxth	r3, r3
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff4f 	bl	80017b4 <Set_PWM_Frequency>
	 speed = frame.speed * 3.6;
 8001916:	bf00      	nop
 8001918:	e7df      	b.n	80018da <main+0x7a>
 800191a:	bf00      	nop
 800191c:	f3af 8000 	nop.w
 8001920:	cccccccd 	.word	0xcccccccd
 8001924:	400ccccc 	.word	0x400ccccc
 8001928:	200002c8 	.word	0x200002c8
 800192c:	0800cd60 	.word	0x0800cd60
 8001930:	0800cd68 	.word	0x0800cd68
 8001934:	2000016c 	.word	0x2000016c
 8001938:	200003ac 	.word	0x200003ac
 800193c:	20000314 	.word	0x20000314
 8001940:	20000360 	.word	0x20000360
 8001944:	42020800 	.word	0x42020800
 8001948:	20000250 	.word	0x20000250
 800194c:	200002b0 	.word	0x200002b0

08001950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b09c      	sub	sp, #112	@ 0x70
 8001954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001956:	f107 0320 	add.w	r3, r7, #32
 800195a:	2250      	movs	r2, #80	@ 0x50
 800195c:	2100      	movs	r1, #0
 800195e:	4618      	mov	r0, r3
 8001960:	f00a fc2e 	bl	800c1c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001964:	f107 0308 	add.w	r3, r7, #8
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
 8001974:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001976:	4b2d      	ldr	r3, [pc, #180]	@ (8001a2c <SystemClock_Config+0xdc>)
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	4a2c      	ldr	r2, [pc, #176]	@ (8001a2c <SystemClock_Config+0xdc>)
 800197c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001980:	6113      	str	r3, [r2, #16]
 8001982:	4b2a      	ldr	r3, [pc, #168]	@ (8001a2c <SystemClock_Config+0xdc>)
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800198e:	bf00      	nop
 8001990:	4b26      	ldr	r3, [pc, #152]	@ (8001a2c <SystemClock_Config+0xdc>)
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	2b08      	cmp	r3, #8
 800199a:	d1f9      	bne.n	8001990 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800199c:	2301      	movs	r3, #1
 800199e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019a6:	2302      	movs	r3, #2
 80019a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80019aa:	2303      	movs	r3, #3
 80019ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019ae:	2301      	movs	r3, #1
 80019b0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 62;
 80019b2:	233e      	movs	r3, #62	@ 0x3e
 80019b4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80019b6:	2302      	movs	r3, #2
 80019b8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80019ba:	2302      	movs	r3, #2
 80019bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80019be:	2302      	movs	r3, #2
 80019c0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 80019c2:	230c      	movs	r3, #12
 80019c4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 80019ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019d0:	f107 0320 	add.w	r3, r7, #32
 80019d4:	4618      	mov	r0, r3
 80019d6:	f002 fe93 	bl	8004700 <HAL_RCC_OscConfig>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019e0:	f000 f8da 	bl	8001b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019e4:	231f      	movs	r3, #31
 80019e6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019e8:	2303      	movs	r3, #3
 80019ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ec:	2300      	movs	r3, #0
 80019ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80019f8:	2300      	movs	r3, #0
 80019fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019fc:	f107 0308 	add.w	r3, r7, #8
 8001a00:	2105      	movs	r1, #5
 8001a02:	4618      	mov	r0, r3
 8001a04:	f003 fab4 	bl	8004f70 <HAL_RCC_ClockConfig>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a0e:	f000 f8c3 	bl	8001b98 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8001a12:	4b07      	ldr	r3, [pc, #28]	@ (8001a30 <SystemClock_Config+0xe0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001a1a:	4a05      	ldr	r2, [pc, #20]	@ (8001a30 <SystemClock_Config+0xe0>)
 8001a1c:	f043 0320 	orr.w	r3, r3, #32
 8001a20:	6013      	str	r3, [r2, #0]
}
 8001a22:	bf00      	nop
 8001a24:	3770      	adds	r7, #112	@ 0x70
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	44020800 	.word	0x44020800
 8001a30:	40022000 	.word	0x40022000

08001a34 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
    static uint8_t byte; // Przechowywany bajt
    HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 8001a3c:	2108      	movs	r1, #8
 8001a3e:	482e      	ldr	r0, [pc, #184]	@ (8001af8 <HAL_UART_RxCpltCallback+0xc4>)
 8001a40:	f002 fe14 	bl	800466c <HAL_GPIO_TogglePin>
    if (huart->Instance == USART1) {
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a2c      	ldr	r2, [pc, #176]	@ (8001afc <HAL_UART_RxCpltCallback+0xc8>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d150      	bne.n	8001af0 <HAL_UART_RxCpltCallback+0xbc>
        byte = UartBuffer[0]; // Odbieramy bajt po bajcie
 8001a4e:	4b2c      	ldr	r3, [pc, #176]	@ (8001b00 <HAL_UART_RxCpltCallback+0xcc>)
 8001a50:	781a      	ldrb	r2, [r3, #0]
 8001a52:	4b2c      	ldr	r3, [pc, #176]	@ (8001b04 <HAL_UART_RxCpltCallback+0xd0>)
 8001a54:	701a      	strb	r2, [r3, #0]

        // Sprawdzamy nagłówek "+IPD"
        if (headerMatch < 4) {
 8001a56:	4b2c      	ldr	r3, [pc, #176]	@ (8001b08 <HAL_UART_RxCpltCallback+0xd4>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	d813      	bhi.n	8001a86 <HAL_UART_RxCpltCallback+0x52>
            if (byte == HEADER[headerMatch]) {
 8001a5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001b08 <HAL_UART_RxCpltCallback+0xd4>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b29      	ldr	r3, [pc, #164]	@ (8001b0c <HAL_UART_RxCpltCallback+0xd8>)
 8001a66:	5c9a      	ldrb	r2, [r3, r2]
 8001a68:	4b26      	ldr	r3, [pc, #152]	@ (8001b04 <HAL_UART_RxCpltCallback+0xd0>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d106      	bne.n	8001a7e <HAL_UART_RxCpltCallback+0x4a>
                headerMatch++;
 8001a70:	4b25      	ldr	r3, [pc, #148]	@ (8001b08 <HAL_UART_RxCpltCallback+0xd4>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	3301      	adds	r3, #1
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	4b23      	ldr	r3, [pc, #140]	@ (8001b08 <HAL_UART_RxCpltCallback+0xd4>)
 8001a7a:	701a      	strb	r2, [r3, #0]
 8001a7c:	e033      	b.n	8001ae6 <HAL_UART_RxCpltCallback+0xb2>
            } else {
                headerMatch = 0; // Reset, jeśli się nie zgadza
 8001a7e:	4b22      	ldr	r3, [pc, #136]	@ (8001b08 <HAL_UART_RxCpltCallback+0xd4>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	701a      	strb	r2, [r3, #0]
 8001a84:	e02f      	b.n	8001ae6 <HAL_UART_RxCpltCallback+0xb2>
            }
        } else if (headerMatch == 4) {
 8001a86:	4b20      	ldr	r3, [pc, #128]	@ (8001b08 <HAL_UART_RxCpltCallback+0xd4>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	d10d      	bne.n	8001aaa <HAL_UART_RxCpltCallback+0x76>
            // Oczekujemy na długość ramki, pomijamy "xx:"
            if (byte == ':') {
 8001a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001b04 <HAL_UART_RxCpltCallback+0xd0>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b3a      	cmp	r3, #58	@ 0x3a
 8001a94:	d127      	bne.n	8001ae6 <HAL_UART_RxCpltCallback+0xb2>
                headerMatch++; // Przechodzimy do odbioru danych
 8001a96:	4b1c      	ldr	r3, [pc, #112]	@ (8001b08 <HAL_UART_RxCpltCallback+0xd4>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b08 <HAL_UART_RxCpltCallback+0xd4>)
 8001aa0:	701a      	strb	r2, [r3, #0]
                frameIndex = 0;
 8001aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b10 <HAL_UART_RxCpltCallback+0xdc>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	701a      	strb	r2, [r3, #0]
 8001aa8:	e01d      	b.n	8001ae6 <HAL_UART_RxCpltCallback+0xb2>
            }
        } else {
            // Odbiór danych ramki
            if (frameIndex < 96 ) {
 8001aaa:	4b19      	ldr	r3, [pc, #100]	@ (8001b10 <HAL_UART_RxCpltCallback+0xdc>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b5f      	cmp	r3, #95	@ 0x5f
 8001ab0:	d80a      	bhi.n	8001ac8 <HAL_UART_RxCpltCallback+0x94>
                FrameBuffer[frameIndex++] = byte;
 8001ab2:	4b17      	ldr	r3, [pc, #92]	@ (8001b10 <HAL_UART_RxCpltCallback+0xdc>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	b2d1      	uxtb	r1, r2
 8001aba:	4a15      	ldr	r2, [pc, #84]	@ (8001b10 <HAL_UART_RxCpltCallback+0xdc>)
 8001abc:	7011      	strb	r1, [r2, #0]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4b10      	ldr	r3, [pc, #64]	@ (8001b04 <HAL_UART_RxCpltCallback+0xd0>)
 8001ac2:	7819      	ldrb	r1, [r3, #0]
 8001ac4:	4b13      	ldr	r3, [pc, #76]	@ (8001b14 <HAL_UART_RxCpltCallback+0xe0>)
 8001ac6:	5499      	strb	r1, [r3, r2]
            }

            if (frameIndex >= 96 ) {
 8001ac8:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <HAL_UART_RxCpltCallback+0xdc>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b5f      	cmp	r3, #95	@ 0x5f
 8001ace:	d90a      	bls.n	8001ae6 <HAL_UART_RxCpltCallback+0xb2>
                frameReady = true;  // Pełna ramka odebrana
 8001ad0:	4b11      	ldr	r3, [pc, #68]	@ (8001b18 <HAL_UART_RxCpltCallback+0xe4>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	701a      	strb	r2, [r3, #0]
                process_frame();
 8001ad6:	f7ff fe5b 	bl	8001790 <process_frame>
                headerMatch = 0;    // Reset detekcji nagłówka
 8001ada:	4b0b      	ldr	r3, [pc, #44]	@ (8001b08 <HAL_UART_RxCpltCallback+0xd4>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]
                frameIndex = 0;     // Reset indeksu bufora ramki
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <HAL_UART_RxCpltCallback+0xdc>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
            }}
        HAL_UART_Receive_DMA(&huart1, UartBuffer, 1);
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	4905      	ldr	r1, [pc, #20]	@ (8001b00 <HAL_UART_RxCpltCallback+0xcc>)
 8001aea:	480c      	ldr	r0, [pc, #48]	@ (8001b1c <HAL_UART_RxCpltCallback+0xe8>)
 8001aec:	f008 feb6 	bl	800a85c <HAL_UART_Receive_DMA>
    }
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	42020400 	.word	0x42020400
 8001afc:	40013800 	.word	0x40013800
 8001b00:	2000016c 	.word	0x2000016c
 8001b04:	200002c0 	.word	0x200002c0
 8001b08:	2000024c 	.word	0x2000024c
 8001b0c:	0800cd94 	.word	0x0800cd94
 8001b10:	2000024d 	.word	0x2000024d
 8001b14:	200001ec 	.word	0x200001ec
 8001b18:	2000024e 	.word	0x2000024e
 8001b1c:	200003ac 	.word	0x200003ac

08001b20 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af04      	add	r7, sp, #16
 8001b26:	6078      	str	r0, [r7, #4]
	 if (htim == &htim2)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a18      	ldr	r2, [pc, #96]	@ (8001b8c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d108      	bne.n	8001b42 <HAL_TIM_PeriodElapsedCallback+0x22>
	 {
	     SendCANFrame(FRAME_316);  // Wysyła ramkę o ID 0x316
 8001b30:	2000      	movs	r0, #0
 8001b32:	f7ff fabb 	bl	80010ac <SendCANFrame>
	     SendCANFrame(FRAME_329);  // Wysyła ramkę o ID 0x329
 8001b36:	2001      	movs	r0, #1
 8001b38:	f7ff fab8 	bl	80010ac <SendCANFrame>
	     SendCANFrame(FRAME_545);  // Wysyła ramkę o ID 0x545
 8001b3c:	2002      	movs	r0, #2
 8001b3e:	f7ff fab5 	bl	80010ac <SendCANFrame>

	 }
	 if (htim == &htim3)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a12      	ldr	r2, [pc, #72]	@ (8001b90 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d11c      	bne.n	8001b84 <HAL_TIM_PeriodElapsedCallback+0x64>
	 {
	 if(isFullBeam){
 8001b4a:	4b12      	ldr	r3, [pc, #72]	@ (8001b94 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00c      	beq.n	8001b6c <HAL_TIM_PeriodElapsedCallback+0x4c>
				Send_KBUS_frame(LM,Broadcast, 0x5B,  0x07, 0x83, 0x0a, 0x3f);
 8001b52:	233f      	movs	r3, #63	@ 0x3f
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	230a      	movs	r3, #10
 8001b58:	9301      	str	r3, [sp, #4]
 8001b5a:	2383      	movs	r3, #131	@ 0x83
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	2307      	movs	r3, #7
 8001b60:	225b      	movs	r2, #91	@ 0x5b
 8001b62:	21bf      	movs	r1, #191	@ 0xbf
 8001b64:	20d0      	movs	r0, #208	@ 0xd0
 8001b66:	f7ff fdd7 	bl	8001718 <Send_KBUS_frame>
			}
			else{
				Send_KBUS_frame(LM,Broadcast, 0x5B,  0x00, 0x83, 0x0a, 0x3f);
			}
	 }
}
 8001b6a:	e00b      	b.n	8001b84 <HAL_TIM_PeriodElapsedCallback+0x64>
				Send_KBUS_frame(LM,Broadcast, 0x5B,  0x00, 0x83, 0x0a, 0x3f);
 8001b6c:	233f      	movs	r3, #63	@ 0x3f
 8001b6e:	9302      	str	r3, [sp, #8]
 8001b70:	230a      	movs	r3, #10
 8001b72:	9301      	str	r3, [sp, #4]
 8001b74:	2383      	movs	r3, #131	@ 0x83
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	2300      	movs	r3, #0
 8001b7a:	225b      	movs	r2, #91	@ 0x5b
 8001b7c:	21bf      	movs	r1, #191	@ 0xbf
 8001b7e:	20d0      	movs	r0, #208	@ 0xd0
 8001b80:	f7ff fdca 	bl	8001718 <Send_KBUS_frame>
}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000314 	.word	0x20000314
 8001b90:	20000360 	.word	0x20000360
 8001b94:	200002b8 	.word	0x200002b8

08001b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b9c:	b672      	cpsid	i
}
 8001b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ba0:	bf00      	nop
 8001ba2:	e7fd      	b.n	8001ba0 <Error_Handler+0x8>

08001ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bb6:	bf00      	nop
 8001bb8:	e7fd      	b.n	8001bb6 <NMI_Handler+0x4>

08001bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bbe:	bf00      	nop
 8001bc0:	e7fd      	b.n	8001bbe <HardFault_Handler+0x4>

08001bc2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc6:	bf00      	nop
 8001bc8:	e7fd      	b.n	8001bc6 <MemManage_Handler+0x4>

08001bca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bce:	bf00      	nop
 8001bd0:	e7fd      	b.n	8001bce <BusFault_Handler+0x4>

08001bd2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd6:	bf00      	nop
 8001bd8:	e7fd      	b.n	8001bd6 <UsageFault_Handler+0x4>

08001bda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c08:	f000 fe1e 	bl	8002848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8001c14:	4802      	ldr	r0, [pc, #8]	@ (8001c20 <GPDMA1_Channel0_IRQHandler+0x10>)
 8001c16:	f001 fa1c 	bl	8003052 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200004d4 	.word	0x200004d4

08001c24 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001c28:	4802      	ldr	r0, [pc, #8]	@ (8001c34 <FDCAN1_IT0_IRQHandler+0x10>)
 8001c2a:	f002 f93d 	bl	8003ea8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000108 	.word	0x20000108

08001c38 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001c3c:	4802      	ldr	r0, [pc, #8]	@ (8001c48 <FDCAN1_IT1_IRQHandler+0x10>)
 8001c3e:	f002 f933 	bl	8003ea8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000108 	.word	0x20000108

08001c4c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 Break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c50:	4802      	ldr	r0, [pc, #8]	@ (8001c5c <TIM1_BRK_IRQHandler+0x10>)
 8001c52:	f007 fa5f 	bl	8009114 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	200002c8 	.word	0x200002c8

08001c60 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c64:	4802      	ldr	r0, [pc, #8]	@ (8001c70 <TIM1_UP_IRQHandler+0x10>)
 8001c66:	f007 fa55 	bl	8009114 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200002c8 	.word	0x200002c8

08001c74 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 Trigger and Commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c78:	4802      	ldr	r0, [pc, #8]	@ (8001c84 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001c7a:	f007 fa4b 	bl	8009114 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200002c8 	.word	0x200002c8

08001c88 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 Capture Compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c8c:	4802      	ldr	r0, [pc, #8]	@ (8001c98 <TIM1_CC_IRQHandler+0x10>)
 8001c8e:	f007 fa41 	bl	8009114 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	200002c8 	.word	0x200002c8

08001c9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ca0:	4802      	ldr	r0, [pc, #8]	@ (8001cac <TIM2_IRQHandler+0x10>)
 8001ca2:	f007 fa37 	bl	8009114 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000314 	.word	0x20000314

08001cb0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001cb4:	4802      	ldr	r0, [pc, #8]	@ (8001cc0 <TIM3_IRQHandler+0x10>)
 8001cb6:	f007 fa2d 	bl	8009114 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000360 	.word	0x20000360

08001cc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cc8:	4802      	ldr	r0, [pc, #8]	@ (8001cd4 <USART1_IRQHandler+0x10>)
 8001cca:	f008 fe19 	bl	800a900 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	200003ac 	.word	0x200003ac

08001cd8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	e00a      	b.n	8001d00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cea:	f3af 8000 	nop.w
 8001cee:	4601      	mov	r1, r0
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	1c5a      	adds	r2, r3, #1
 8001cf4:	60ba      	str	r2, [r7, #8]
 8001cf6:	b2ca      	uxtb	r2, r1
 8001cf8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	dbf0      	blt.n	8001cea <_read+0x12>
  }

  return len;
 8001d08:	687b      	ldr	r3, [r7, #4]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b086      	sub	sp, #24
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	60f8      	str	r0, [r7, #12]
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	e009      	b.n	8001d38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	1c5a      	adds	r2, r3, #1
 8001d28:	60ba      	str	r2, [r7, #8]
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	3301      	adds	r3, #1
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	dbf1      	blt.n	8001d24 <_write+0x12>
  }
  return len;
 8001d40:	687b      	ldr	r3, [r7, #4]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <_close>:

int _close(int file)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
 8001d6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d72:	605a      	str	r2, [r3, #4]
  return 0;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <_isatty>:

int _isatty(int file)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d8a:	2301      	movs	r3, #1
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dbc:	4a14      	ldr	r2, [pc, #80]	@ (8001e10 <_sbrk+0x5c>)
 8001dbe:	4b15      	ldr	r3, [pc, #84]	@ (8001e14 <_sbrk+0x60>)
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dc8:	4b13      	ldr	r3, [pc, #76]	@ (8001e18 <_sbrk+0x64>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d102      	bne.n	8001dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dd0:	4b11      	ldr	r3, [pc, #68]	@ (8001e18 <_sbrk+0x64>)
 8001dd2:	4a12      	ldr	r2, [pc, #72]	@ (8001e1c <_sbrk+0x68>)
 8001dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dd6:	4b10      	ldr	r3, [pc, #64]	@ (8001e18 <_sbrk+0x64>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d207      	bcs.n	8001df4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001de4:	f00a fa3a 	bl	800c25c <__errno>
 8001de8:	4603      	mov	r3, r0
 8001dea:	220c      	movs	r2, #12
 8001dec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dee:	f04f 33ff 	mov.w	r3, #4294967295
 8001df2:	e009      	b.n	8001e08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001df4:	4b08      	ldr	r3, [pc, #32]	@ (8001e18 <_sbrk+0x64>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dfa:	4b07      	ldr	r3, [pc, #28]	@ (8001e18 <_sbrk+0x64>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	4a05      	ldr	r2, [pc, #20]	@ (8001e18 <_sbrk+0x64>)
 8001e04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e06:	68fb      	ldr	r3, [r7, #12]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20044000 	.word	0x20044000
 8001e14:	00000400 	.word	0x00000400
 8001e18:	200002c4 	.word	0x200002c4
 8001e1c:	200006a0 	.word	0x200006a0

08001e20 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e26:	4b35      	ldr	r3, [pc, #212]	@ (8001efc <SystemInit+0xdc>)
 8001e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e2c:	4a33      	ldr	r2, [pc, #204]	@ (8001efc <SystemInit+0xdc>)
 8001e2e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e32:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001e36:	4b32      	ldr	r3, [pc, #200]	@ (8001f00 <SystemInit+0xe0>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001e3c:	4b30      	ldr	r3, [pc, #192]	@ (8001f00 <SystemInit+0xe0>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001e42:	4b2f      	ldr	r3, [pc, #188]	@ (8001f00 <SystemInit+0xe0>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001e48:	4b2d      	ldr	r3, [pc, #180]	@ (8001f00 <SystemInit+0xe0>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	492c      	ldr	r1, [pc, #176]	@ (8001f00 <SystemInit+0xe0>)
 8001e4e:	4b2d      	ldr	r3, [pc, #180]	@ (8001f04 <SystemInit+0xe4>)
 8001e50:	4013      	ands	r3, r2
 8001e52:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001e54:	4b2a      	ldr	r3, [pc, #168]	@ (8001f00 <SystemInit+0xe0>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001e5a:	4b29      	ldr	r3, [pc, #164]	@ (8001f00 <SystemInit+0xe0>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001e60:	4b27      	ldr	r3, [pc, #156]	@ (8001f00 <SystemInit+0xe0>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001e66:	4b26      	ldr	r3, [pc, #152]	@ (8001f00 <SystemInit+0xe0>)
 8001e68:	4a27      	ldr	r2, [pc, #156]	@ (8001f08 <SystemInit+0xe8>)
 8001e6a:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001e6c:	4b24      	ldr	r3, [pc, #144]	@ (8001f00 <SystemInit+0xe0>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001e72:	4b23      	ldr	r3, [pc, #140]	@ (8001f00 <SystemInit+0xe0>)
 8001e74:	4a24      	ldr	r2, [pc, #144]	@ (8001f08 <SystemInit+0xe8>)
 8001e76:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001e78:	4b21      	ldr	r3, [pc, #132]	@ (8001f00 <SystemInit+0xe0>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001e7e:	4b20      	ldr	r3, [pc, #128]	@ (8001f00 <SystemInit+0xe0>)
 8001e80:	4a21      	ldr	r2, [pc, #132]	@ (8001f08 <SystemInit+0xe8>)
 8001e82:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001e84:	4b1e      	ldr	r3, [pc, #120]	@ (8001f00 <SystemInit+0xe0>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001f00 <SystemInit+0xe0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a1c      	ldr	r2, [pc, #112]	@ (8001f00 <SystemInit+0xe0>)
 8001e90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e94:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001e96:	4b1a      	ldr	r3, [pc, #104]	@ (8001f00 <SystemInit+0xe0>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e9c:	4b17      	ldr	r3, [pc, #92]	@ (8001efc <SystemInit+0xdc>)
 8001e9e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001ea2:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001ea4:	4b19      	ldr	r3, [pc, #100]	@ (8001f0c <SystemInit+0xec>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001eac:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001eb4:	d003      	beq.n	8001ebe <SystemInit+0x9e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001ebc:	d117      	bne.n	8001eee <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001ebe:	4b13      	ldr	r3, [pc, #76]	@ (8001f0c <SystemInit+0xec>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d005      	beq.n	8001ed6 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001eca:	4b10      	ldr	r3, [pc, #64]	@ (8001f0c <SystemInit+0xec>)
 8001ecc:	4a10      	ldr	r2, [pc, #64]	@ (8001f10 <SystemInit+0xf0>)
 8001ece:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8001f0c <SystemInit+0xec>)
 8001ed2:	4a10      	ldr	r2, [pc, #64]	@ (8001f14 <SystemInit+0xf4>)
 8001ed4:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8001f0c <SystemInit+0xec>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	4a0c      	ldr	r2, [pc, #48]	@ (8001f0c <SystemInit+0xec>)
 8001edc:	f043 0302 	orr.w	r3, r3, #2
 8001ee0:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8001f0c <SystemInit+0xec>)
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	4a09      	ldr	r2, [pc, #36]	@ (8001f0c <SystemInit+0xec>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	61d3      	str	r3, [r2, #28]
  }
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000ed00 	.word	0xe000ed00
 8001f00:	44020c00 	.word	0x44020c00
 8001f04:	eae2eae3 	.word	0xeae2eae3
 8001f08:	01010280 	.word	0x01010280
 8001f0c:	40022000 	.word	0x40022000
 8001f10:	08192a3b 	.word	0x08192a3b
 8001f14:	4c5d6e7f 	.word	0x4c5d6e7f

08001f18 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b09c      	sub	sp, #112	@ 0x70
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f1e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f38:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
 8001f48:	615a      	str	r2, [r3, #20]
 8001f4a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f4c:	1d3b      	adds	r3, r7, #4
 8001f4e:	2234      	movs	r2, #52	@ 0x34
 8001f50:	2100      	movs	r1, #0
 8001f52:	4618      	mov	r0, r3
 8001f54:	f00a f934 	bl	800c1c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f58:	4b46      	ldr	r3, [pc, #280]	@ (8002074 <MX_TIM1_Init+0x15c>)
 8001f5a:	4a47      	ldr	r2, [pc, #284]	@ (8002078 <MX_TIM1_Init+0x160>)
 8001f5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 49;
 8001f5e:	4b45      	ldr	r3, [pc, #276]	@ (8002074 <MX_TIM1_Init+0x15c>)
 8001f60:	2231      	movs	r2, #49	@ 0x31
 8001f62:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f64:	4b43      	ldr	r3, [pc, #268]	@ (8002074 <MX_TIM1_Init+0x15c>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f6a:	4b42      	ldr	r3, [pc, #264]	@ (8002074 <MX_TIM1_Init+0x15c>)
 8001f6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f70:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f72:	4b40      	ldr	r3, [pc, #256]	@ (8002074 <MX_TIM1_Init+0x15c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f78:	4b3e      	ldr	r3, [pc, #248]	@ (8002074 <MX_TIM1_Init+0x15c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f7e:	4b3d      	ldr	r3, [pc, #244]	@ (8002074 <MX_TIM1_Init+0x15c>)
 8001f80:	2280      	movs	r2, #128	@ 0x80
 8001f82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f84:	483b      	ldr	r0, [pc, #236]	@ (8002074 <MX_TIM1_Init+0x15c>)
 8001f86:	f006 fdb9 	bl	8008afc <HAL_TIM_Base_Init>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001f90:	f7ff fe02 	bl	8001b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f98:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f9a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4834      	ldr	r0, [pc, #208]	@ (8002074 <MX_TIM1_Init+0x15c>)
 8001fa2:	f007 fb95 	bl	80096d0 <HAL_TIM_ConfigClockSource>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001fac:	f7ff fdf4 	bl	8001b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fb0:	4830      	ldr	r0, [pc, #192]	@ (8002074 <MX_TIM1_Init+0x15c>)
 8001fb2:	f006 ff0a 	bl	8008dca <HAL_TIM_PWM_Init>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001fbc:	f7ff fdec 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fcc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4828      	ldr	r0, [pc, #160]	@ (8002074 <MX_TIM1_Init+0x15c>)
 8001fd4:	f008 f9a4 	bl	800a320 <HAL_TIMEx_MasterConfigSynchronization>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001fde:	f7ff fddb 	bl	8001b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fe2:	2360      	movs	r3, #96	@ 0x60
 8001fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 5000;
 8001fe6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fec:	2300      	movs	r3, #0
 8001fee:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002000:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002004:	2204      	movs	r2, #4
 8002006:	4619      	mov	r1, r3
 8002008:	481a      	ldr	r0, [pc, #104]	@ (8002074 <MX_TIM1_Init+0x15c>)
 800200a:	f007 fa4d 	bl	80094a8 <HAL_TIM_PWM_ConfigChannel>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002014:	f7ff fdc0 	bl	8001b98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002018:	2300      	movs	r3, #0
 800201a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800201c:	2300      	movs	r3, #0
 800201e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800202c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002030:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002036:	2300      	movs	r3, #0
 8002038:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800203a:	2300      	movs	r3, #0
 800203c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800203e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002042:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002044:	2300      	movs	r3, #0
 8002046:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002048:	2300      	movs	r3, #0
 800204a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	4619      	mov	r1, r3
 8002054:	4807      	ldr	r0, [pc, #28]	@ (8002074 <MX_TIM1_Init+0x15c>)
 8002056:	f008 fa33 	bl	800a4c0 <HAL_TIMEx_ConfigBreakDeadTime>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8002060:	f7ff fd9a 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002064:	4803      	ldr	r0, [pc, #12]	@ (8002074 <MX_TIM1_Init+0x15c>)
 8002066:	f000 f949 	bl	80022fc <HAL_TIM_MspPostInit>

}
 800206a:	bf00      	nop
 800206c:	3770      	adds	r7, #112	@ 0x70
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	200002c8 	.word	0x200002c8
 8002078:	40012c00 	.word	0x40012c00

0800207c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08e      	sub	sp, #56	@ 0x38
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002082:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	609a      	str	r2, [r3, #8]
 800208e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002090:	f107 031c 	add.w	r3, r7, #28
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800209c:	463b      	mov	r3, r7
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	605a      	str	r2, [r3, #4]
 80020a4:	609a      	str	r2, [r3, #8]
 80020a6:	60da      	str	r2, [r3, #12]
 80020a8:	611a      	str	r2, [r3, #16]
 80020aa:	615a      	str	r2, [r3, #20]
 80020ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020ae:	4b2c      	ldr	r3, [pc, #176]	@ (8002160 <MX_TIM2_Init+0xe4>)
 80020b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80020b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 49;
 80020b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002160 <MX_TIM2_Init+0xe4>)
 80020b8:	2231      	movs	r2, #49	@ 0x31
 80020ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020bc:	4b28      	ldr	r3, [pc, #160]	@ (8002160 <MX_TIM2_Init+0xe4>)
 80020be:	2200      	movs	r2, #0
 80020c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 80020c2:	4b27      	ldr	r3, [pc, #156]	@ (8002160 <MX_TIM2_Init+0xe4>)
 80020c4:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80020c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ca:	4b25      	ldr	r3, [pc, #148]	@ (8002160 <MX_TIM2_Init+0xe4>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d0:	4b23      	ldr	r3, [pc, #140]	@ (8002160 <MX_TIM2_Init+0xe4>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020d6:	4822      	ldr	r0, [pc, #136]	@ (8002160 <MX_TIM2_Init+0xe4>)
 80020d8:	f006 fd10 	bl	8008afc <HAL_TIM_Base_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80020e2:	f7ff fd59 	bl	8001b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020f0:	4619      	mov	r1, r3
 80020f2:	481b      	ldr	r0, [pc, #108]	@ (8002160 <MX_TIM2_Init+0xe4>)
 80020f4:	f007 faec 	bl	80096d0 <HAL_TIM_ConfigClockSource>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80020fe:	f7ff fd4b 	bl	8001b98 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8002102:	4817      	ldr	r0, [pc, #92]	@ (8002160 <MX_TIM2_Init+0xe4>)
 8002104:	f006 fe00 	bl	8008d08 <HAL_TIM_OC_Init>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800210e:	f7ff fd43 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002116:	2300      	movs	r3, #0
 8002118:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800211a:	f107 031c 	add.w	r3, r7, #28
 800211e:	4619      	mov	r1, r3
 8002120:	480f      	ldr	r0, [pc, #60]	@ (8002160 <MX_TIM2_Init+0xe4>)
 8002122:	f008 f8fd 	bl	800a320 <HAL_TIMEx_MasterConfigSynchronization>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800212c:	f7ff fd34 	bl	8001b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002130:	2300      	movs	r3, #0
 8002132:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002138:	2300      	movs	r3, #0
 800213a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800213c:	2300      	movs	r3, #0
 800213e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002140:	463b      	mov	r3, r7
 8002142:	2204      	movs	r2, #4
 8002144:	4619      	mov	r1, r3
 8002146:	4806      	ldr	r0, [pc, #24]	@ (8002160 <MX_TIM2_Init+0xe4>)
 8002148:	f007 f934 	bl	80093b4 <HAL_TIM_OC_ConfigChannel>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002152:	f7ff fd21 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002156:	bf00      	nop
 8002158:	3738      	adds	r7, #56	@ 0x38
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20000314 	.word	0x20000314

08002164 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800216a:	f107 0310 	add.w	r3, r7, #16
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	605a      	str	r2, [r3, #4]
 8002174:	609a      	str	r2, [r3, #8]
 8002176:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002178:	1d3b      	adds	r3, r7, #4
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	605a      	str	r2, [r3, #4]
 8002180:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002182:	4b1e      	ldr	r3, [pc, #120]	@ (80021fc <MX_TIM3_Init+0x98>)
 8002184:	4a1e      	ldr	r2, [pc, #120]	@ (8002200 <MX_TIM3_Init+0x9c>)
 8002186:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8002188:	4b1c      	ldr	r3, [pc, #112]	@ (80021fc <MX_TIM3_Init+0x98>)
 800218a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800218e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002190:	4b1a      	ldr	r3, [pc, #104]	@ (80021fc <MX_TIM3_Init+0x98>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 8002196:	4b19      	ldr	r3, [pc, #100]	@ (80021fc <MX_TIM3_Init+0x98>)
 8002198:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 800219c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800219e:	4b17      	ldr	r3, [pc, #92]	@ (80021fc <MX_TIM3_Init+0x98>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021a4:	4b15      	ldr	r3, [pc, #84]	@ (80021fc <MX_TIM3_Init+0x98>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021aa:	4814      	ldr	r0, [pc, #80]	@ (80021fc <MX_TIM3_Init+0x98>)
 80021ac:	f006 fca6 	bl	8008afc <HAL_TIM_Base_Init>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80021b6:	f7ff fcef 	bl	8001b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021c0:	f107 0310 	add.w	r3, r7, #16
 80021c4:	4619      	mov	r1, r3
 80021c6:	480d      	ldr	r0, [pc, #52]	@ (80021fc <MX_TIM3_Init+0x98>)
 80021c8:	f007 fa82 	bl	80096d0 <HAL_TIM_ConfigClockSource>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80021d2:	f7ff fce1 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021d6:	2300      	movs	r3, #0
 80021d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021de:	1d3b      	adds	r3, r7, #4
 80021e0:	4619      	mov	r1, r3
 80021e2:	4806      	ldr	r0, [pc, #24]	@ (80021fc <MX_TIM3_Init+0x98>)
 80021e4:	f008 f89c 	bl	800a320 <HAL_TIMEx_MasterConfigSynchronization>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80021ee:	f7ff fcd3 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80021f2:	bf00      	nop
 80021f4:	3720      	adds	r7, #32
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000360 	.word	0x20000360
 8002200:	40000400 	.word	0x40000400

08002204 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a37      	ldr	r2, [pc, #220]	@ (80022f0 <HAL_TIM_Base_MspInit+0xec>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d12f      	bne.n	8002276 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002216:	4b37      	ldr	r3, [pc, #220]	@ (80022f4 <HAL_TIM_Base_MspInit+0xf0>)
 8002218:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800221c:	4a35      	ldr	r2, [pc, #212]	@ (80022f4 <HAL_TIM_Base_MspInit+0xf0>)
 800221e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002222:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002226:	4b33      	ldr	r3, [pc, #204]	@ (80022f4 <HAL_TIM_Base_MspInit+0xf0>)
 8002228:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800222c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002234:	2200      	movs	r2, #0
 8002236:	2100      	movs	r1, #0
 8002238:	2029      	movs	r0, #41	@ 0x29
 800223a:	f000 fc01 	bl	8002a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800223e:	2029      	movs	r0, #41	@ 0x29
 8002240:	f000 fc18 	bl	8002a74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 2, 0);
 8002244:	2200      	movs	r2, #0
 8002246:	2102      	movs	r1, #2
 8002248:	202a      	movs	r0, #42	@ 0x2a
 800224a:	f000 fbf9 	bl	8002a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800224e:	202a      	movs	r0, #42	@ 0x2a
 8002250:	f000 fc10 	bl	8002a74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 2, 0);
 8002254:	2200      	movs	r2, #0
 8002256:	2102      	movs	r1, #2
 8002258:	202b      	movs	r0, #43	@ 0x2b
 800225a:	f000 fbf1 	bl	8002a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800225e:	202b      	movs	r0, #43	@ 0x2b
 8002260:	f000 fc08 	bl	8002a74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 2, 0);
 8002264:	2200      	movs	r2, #0
 8002266:	2102      	movs	r1, #2
 8002268:	202c      	movs	r0, #44	@ 0x2c
 800226a:	f000 fbe9 	bl	8002a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800226e:	202c      	movs	r0, #44	@ 0x2c
 8002270:	f000 fc00 	bl	8002a74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002274:	e038      	b.n	80022e8 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM2)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800227e:	d117      	bne.n	80022b0 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002280:	4b1c      	ldr	r3, [pc, #112]	@ (80022f4 <HAL_TIM_Base_MspInit+0xf0>)
 8002282:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002286:	4a1b      	ldr	r2, [pc, #108]	@ (80022f4 <HAL_TIM_Base_MspInit+0xf0>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002290:	4b18      	ldr	r3, [pc, #96]	@ (80022f4 <HAL_TIM_Base_MspInit+0xf0>)
 8002292:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 800229e:	2200      	movs	r2, #0
 80022a0:	2103      	movs	r1, #3
 80022a2:	202d      	movs	r0, #45	@ 0x2d
 80022a4:	f000 fbcc 	bl	8002a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022a8:	202d      	movs	r0, #45	@ 0x2d
 80022aa:	f000 fbe3 	bl	8002a74 <HAL_NVIC_EnableIRQ>
}
 80022ae:	e01b      	b.n	80022e8 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM3)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a10      	ldr	r2, [pc, #64]	@ (80022f8 <HAL_TIM_Base_MspInit+0xf4>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d116      	bne.n	80022e8 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022ba:	4b0e      	ldr	r3, [pc, #56]	@ (80022f4 <HAL_TIM_Base_MspInit+0xf0>)
 80022bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022c0:	4a0c      	ldr	r2, [pc, #48]	@ (80022f4 <HAL_TIM_Base_MspInit+0xf0>)
 80022c2:	f043 0302 	orr.w	r3, r3, #2
 80022c6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80022ca:	4b0a      	ldr	r3, [pc, #40]	@ (80022f4 <HAL_TIM_Base_MspInit+0xf0>)
 80022cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 80022d8:	2200      	movs	r2, #0
 80022da:	2106      	movs	r1, #6
 80022dc:	202e      	movs	r0, #46	@ 0x2e
 80022de:	f000 fbaf 	bl	8002a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022e2:	202e      	movs	r0, #46	@ 0x2e
 80022e4:	f000 fbc6 	bl	8002a74 <HAL_NVIC_EnableIRQ>
}
 80022e8:	bf00      	nop
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40012c00 	.word	0x40012c00
 80022f4:	44020c00 	.word	0x44020c00
 80022f8:	40000400 	.word	0x40000400

080022fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002304:	f107 030c 	add.w	r3, r7, #12
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a13      	ldr	r2, [pc, #76]	@ (8002368 <HAL_TIM_MspPostInit+0x6c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d11f      	bne.n	800235e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231e:	4b13      	ldr	r3, [pc, #76]	@ (800236c <HAL_TIM_MspPostInit+0x70>)
 8002320:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002324:	4a11      	ldr	r2, [pc, #68]	@ (800236c <HAL_TIM_MspPostInit+0x70>)
 8002326:	f043 0301 	orr.w	r3, r3, #1
 800232a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800232e:	4b0f      	ldr	r3, [pc, #60]	@ (800236c <HAL_TIM_MspPostInit+0x70>)
 8002330:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800233c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002340:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002342:	2302      	movs	r3, #2
 8002344:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234a:	2300      	movs	r3, #0
 800234c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800234e:	2301      	movs	r3, #1
 8002350:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002352:	f107 030c 	add.w	r3, r7, #12
 8002356:	4619      	mov	r1, r3
 8002358:	4805      	ldr	r0, [pc, #20]	@ (8002370 <HAL_TIM_MspPostInit+0x74>)
 800235a:	f002 f81d 	bl	8004398 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800235e:	bf00      	nop
 8002360:	3720      	adds	r7, #32
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40012c00 	.word	0x40012c00
 800236c:	44020c00 	.word	0x44020c00
 8002370:	42020000 	.word	0x42020000

08002374 <MX_USART1_UART_Init>:
DMA_HandleTypeDef handle_GPDMA1_Channel0;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002378:	4b22      	ldr	r3, [pc, #136]	@ (8002404 <MX_USART1_UART_Init+0x90>)
 800237a:	4a23      	ldr	r2, [pc, #140]	@ (8002408 <MX_USART1_UART_Init+0x94>)
 800237c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800237e:	4b21      	ldr	r3, [pc, #132]	@ (8002404 <MX_USART1_UART_Init+0x90>)
 8002380:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002384:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002386:	4b1f      	ldr	r3, [pc, #124]	@ (8002404 <MX_USART1_UART_Init+0x90>)
 8002388:	2200      	movs	r2, #0
 800238a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800238c:	4b1d      	ldr	r3, [pc, #116]	@ (8002404 <MX_USART1_UART_Init+0x90>)
 800238e:	2200      	movs	r2, #0
 8002390:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002392:	4b1c      	ldr	r3, [pc, #112]	@ (8002404 <MX_USART1_UART_Init+0x90>)
 8002394:	2200      	movs	r2, #0
 8002396:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002398:	4b1a      	ldr	r3, [pc, #104]	@ (8002404 <MX_USART1_UART_Init+0x90>)
 800239a:	220c      	movs	r2, #12
 800239c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800239e:	4b19      	ldr	r3, [pc, #100]	@ (8002404 <MX_USART1_UART_Init+0x90>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023a4:	4b17      	ldr	r3, [pc, #92]	@ (8002404 <MX_USART1_UART_Init+0x90>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023aa:	4b16      	ldr	r3, [pc, #88]	@ (8002404 <MX_USART1_UART_Init+0x90>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023b0:	4b14      	ldr	r3, [pc, #80]	@ (8002404 <MX_USART1_UART_Init+0x90>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023b6:	4b13      	ldr	r3, [pc, #76]	@ (8002404 <MX_USART1_UART_Init+0x90>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023bc:	4811      	ldr	r0, [pc, #68]	@ (8002404 <MX_USART1_UART_Init+0x90>)
 80023be:	f008 f95f 	bl	800a680 <HAL_UART_Init>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80023c8:	f7ff fbe6 	bl	8001b98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023cc:	2100      	movs	r1, #0
 80023ce:	480d      	ldr	r0, [pc, #52]	@ (8002404 <MX_USART1_UART_Init+0x90>)
 80023d0:	f009 fc21 	bl	800bc16 <HAL_UARTEx_SetTxFifoThreshold>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80023da:	f7ff fbdd 	bl	8001b98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023de:	2100      	movs	r1, #0
 80023e0:	4808      	ldr	r0, [pc, #32]	@ (8002404 <MX_USART1_UART_Init+0x90>)
 80023e2:	f009 fc56 	bl	800bc92 <HAL_UARTEx_SetRxFifoThreshold>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80023ec:	f7ff fbd4 	bl	8001b98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80023f0:	4804      	ldr	r0, [pc, #16]	@ (8002404 <MX_USART1_UART_Init+0x90>)
 80023f2:	f009 fbd7 	bl	800bba4 <HAL_UARTEx_DisableFifoMode>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80023fc:	f7ff fbcc 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002400:	bf00      	nop
 8002402:	bd80      	pop	{r7, pc}
 8002404:	200003ac 	.word	0x200003ac
 8002408:	40013800 	.word	0x40013800

0800240c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002410:	4b23      	ldr	r3, [pc, #140]	@ (80024a0 <MX_USART2_UART_Init+0x94>)
 8002412:	4a24      	ldr	r2, [pc, #144]	@ (80024a4 <MX_USART2_UART_Init+0x98>)
 8002414:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002416:	4b22      	ldr	r3, [pc, #136]	@ (80024a0 <MX_USART2_UART_Init+0x94>)
 8002418:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800241c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800241e:	4b20      	ldr	r3, [pc, #128]	@ (80024a0 <MX_USART2_UART_Init+0x94>)
 8002420:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002424:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002426:	4b1e      	ldr	r3, [pc, #120]	@ (80024a0 <MX_USART2_UART_Init+0x94>)
 8002428:	2200      	movs	r2, #0
 800242a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800242c:	4b1c      	ldr	r3, [pc, #112]	@ (80024a0 <MX_USART2_UART_Init+0x94>)
 800242e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002432:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002434:	4b1a      	ldr	r3, [pc, #104]	@ (80024a0 <MX_USART2_UART_Init+0x94>)
 8002436:	220c      	movs	r2, #12
 8002438:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800243a:	4b19      	ldr	r3, [pc, #100]	@ (80024a0 <MX_USART2_UART_Init+0x94>)
 800243c:	2200      	movs	r2, #0
 800243e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002440:	4b17      	ldr	r3, [pc, #92]	@ (80024a0 <MX_USART2_UART_Init+0x94>)
 8002442:	2200      	movs	r2, #0
 8002444:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002446:	4b16      	ldr	r3, [pc, #88]	@ (80024a0 <MX_USART2_UART_Init+0x94>)
 8002448:	2200      	movs	r2, #0
 800244a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800244c:	4b14      	ldr	r3, [pc, #80]	@ (80024a0 <MX_USART2_UART_Init+0x94>)
 800244e:	2200      	movs	r2, #0
 8002450:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002452:	4b13      	ldr	r3, [pc, #76]	@ (80024a0 <MX_USART2_UART_Init+0x94>)
 8002454:	2200      	movs	r2, #0
 8002456:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002458:	4811      	ldr	r0, [pc, #68]	@ (80024a0 <MX_USART2_UART_Init+0x94>)
 800245a:	f008 f911 	bl	800a680 <HAL_UART_Init>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8002464:	f7ff fb98 	bl	8001b98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002468:	2100      	movs	r1, #0
 800246a:	480d      	ldr	r0, [pc, #52]	@ (80024a0 <MX_USART2_UART_Init+0x94>)
 800246c:	f009 fbd3 	bl	800bc16 <HAL_UARTEx_SetTxFifoThreshold>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8002476:	f7ff fb8f 	bl	8001b98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800247a:	2100      	movs	r1, #0
 800247c:	4808      	ldr	r0, [pc, #32]	@ (80024a0 <MX_USART2_UART_Init+0x94>)
 800247e:	f009 fc08 	bl	800bc92 <HAL_UARTEx_SetRxFifoThreshold>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8002488:	f7ff fb86 	bl	8001b98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800248c:	4804      	ldr	r0, [pc, #16]	@ (80024a0 <MX_USART2_UART_Init+0x94>)
 800248e:	f009 fb89 	bl	800bba4 <HAL_UARTEx_DisableFifoMode>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8002498:	f7ff fb7e 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800249c:	bf00      	nop
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000440 	.word	0x20000440
 80024a4:	40004400 	.word	0x40004400

080024a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b0c0      	sub	sp, #256	@ 0x100
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
 80024be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024c0:	f107 0318 	add.w	r3, r7, #24
 80024c4:	22d0      	movs	r2, #208	@ 0xd0
 80024c6:	2100      	movs	r1, #0
 80024c8:	4618      	mov	r0, r3
 80024ca:	f009 fe79 	bl	800c1c0 <memset>
  if(uartHandle->Instance==USART1)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a72      	ldr	r2, [pc, #456]	@ (800269c <HAL_UART_MspInit+0x1f4>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	f040 8091 	bne.w	80025fc <HAL_UART_MspInit+0x154>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80024da:	f04f 0201 	mov.w	r2, #1
 80024de:	f04f 0300 	mov.w	r3, #0
 80024e2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80024e6:	2300      	movs	r3, #0
 80024e8:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024ea:	f107 0318 	add.w	r3, r7, #24
 80024ee:	4618      	mov	r0, r3
 80024f0:	f003 f880 	bl	80055f4 <HAL_RCCEx_PeriphCLKConfig>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80024fa:	f7ff fb4d 	bl	8001b98 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024fe:	4b68      	ldr	r3, [pc, #416]	@ (80026a0 <HAL_UART_MspInit+0x1f8>)
 8002500:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002504:	4a66      	ldr	r2, [pc, #408]	@ (80026a0 <HAL_UART_MspInit+0x1f8>)
 8002506:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800250a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800250e:	4b64      	ldr	r3, [pc, #400]	@ (80026a0 <HAL_UART_MspInit+0x1f8>)
 8002510:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002514:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800251c:	4b60      	ldr	r3, [pc, #384]	@ (80026a0 <HAL_UART_MspInit+0x1f8>)
 800251e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002522:	4a5f      	ldr	r2, [pc, #380]	@ (80026a0 <HAL_UART_MspInit+0x1f8>)
 8002524:	f043 0302 	orr.w	r3, r3, #2
 8002528:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800252c:	4b5c      	ldr	r3, [pc, #368]	@ (80026a0 <HAL_UART_MspInit+0x1f8>)
 800252e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800253a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800253e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002542:	2302      	movs	r3, #2
 8002544:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254e:	2300      	movs	r3, #0
 8002550:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002554:	2304      	movs	r3, #4
 8002556:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800255a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800255e:	4619      	mov	r1, r3
 8002560:	4850      	ldr	r0, [pc, #320]	@ (80026a4 <HAL_UART_MspInit+0x1fc>)
 8002562:	f001 ff19 	bl	8004398 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* GPDMA1_REQUEST_USART1_RX Init */
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8002566:	4b50      	ldr	r3, [pc, #320]	@ (80026a8 <HAL_UART_MspInit+0x200>)
 8002568:	4a50      	ldr	r2, [pc, #320]	@ (80026ac <HAL_UART_MspInit+0x204>)
 800256a:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_USART1_RX;
 800256c:	4b4e      	ldr	r3, [pc, #312]	@ (80026a8 <HAL_UART_MspInit+0x200>)
 800256e:	2215      	movs	r2, #21
 8002570:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002572:	4b4d      	ldr	r3, [pc, #308]	@ (80026a8 <HAL_UART_MspInit+0x200>)
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002578:	4b4b      	ldr	r3, [pc, #300]	@ (80026a8 <HAL_UART_MspInit+0x200>)
 800257a:	2200      	movs	r2, #0
 800257c:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 800257e:	4b4a      	ldr	r3, [pc, #296]	@ (80026a8 <HAL_UART_MspInit+0x200>)
 8002580:	2200      	movs	r2, #0
 8002582:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_FIXED;
 8002584:	4b48      	ldr	r3, [pc, #288]	@ (80026a8 <HAL_UART_MspInit+0x200>)
 8002586:	2200      	movs	r2, #0
 8002588:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 800258a:	4b47      	ldr	r3, [pc, #284]	@ (80026a8 <HAL_UART_MspInit+0x200>)
 800258c:	2200      	movs	r2, #0
 800258e:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8002590:	4b45      	ldr	r3, [pc, #276]	@ (80026a8 <HAL_UART_MspInit+0x200>)
 8002592:	2200      	movs	r2, #0
 8002594:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8002596:	4b44      	ldr	r3, [pc, #272]	@ (80026a8 <HAL_UART_MspInit+0x200>)
 8002598:	2200      	movs	r2, #0
 800259a:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 800259c:	4b42      	ldr	r3, [pc, #264]	@ (80026a8 <HAL_UART_MspInit+0x200>)
 800259e:	2201      	movs	r2, #1
 80025a0:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 80025a2:	4b41      	ldr	r3, [pc, #260]	@ (80026a8 <HAL_UART_MspInit+0x200>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80025a8:	4b3f      	ldr	r3, [pc, #252]	@ (80026a8 <HAL_UART_MspInit+0x200>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80025ae:	4b3e      	ldr	r3, [pc, #248]	@ (80026a8 <HAL_UART_MspInit+0x200>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 80025b4:	4b3c      	ldr	r3, [pc, #240]	@ (80026a8 <HAL_UART_MspInit+0x200>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80025ba:	483b      	ldr	r0, [pc, #236]	@ (80026a8 <HAL_UART_MspInit+0x200>)
 80025bc:	f000 fb18 	bl	8002bf0 <HAL_DMA_Init>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <HAL_UART_MspInit+0x122>
    {
      Error_Handler();
 80025c6:	f7ff fae7 	bl	8001b98 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmarx, handle_GPDMA1_Channel0);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a36      	ldr	r2, [pc, #216]	@ (80026a8 <HAL_UART_MspInit+0x200>)
 80025ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80025d2:	4a35      	ldr	r2, [pc, #212]	@ (80026a8 <HAL_UART_MspInit+0x200>)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 80025d8:	2110      	movs	r1, #16
 80025da:	4833      	ldr	r0, [pc, #204]	@ (80026a8 <HAL_UART_MspInit+0x200>)
 80025dc:	f000 fe9a 	bl	8003314 <HAL_DMA_ConfigChannelAttributes>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 80025e6:	f7ff fad7 	bl	8001b98 <Error_Handler>
    }

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80025ea:	2200      	movs	r2, #0
 80025ec:	2101      	movs	r1, #1
 80025ee:	203a      	movs	r0, #58	@ 0x3a
 80025f0:	f000 fa26 	bl	8002a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025f4:	203a      	movs	r0, #58	@ 0x3a
 80025f6:	f000 fa3d 	bl	8002a74 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80025fa:	e049      	b.n	8002690 <HAL_UART_MspInit+0x1e8>
  else if(uartHandle->Instance==USART2)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a2b      	ldr	r2, [pc, #172]	@ (80026b0 <HAL_UART_MspInit+0x208>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d144      	bne.n	8002690 <HAL_UART_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002606:	f04f 0202 	mov.w	r2, #2
 800260a:	f04f 0300 	mov.w	r3, #0
 800260e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002612:	2300      	movs	r3, #0
 8002614:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002616:	f107 0318 	add.w	r3, r7, #24
 800261a:	4618      	mov	r0, r3
 800261c:	f002 ffea 	bl	80055f4 <HAL_RCCEx_PeriphCLKConfig>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_UART_MspInit+0x182>
      Error_Handler();
 8002626:	f7ff fab7 	bl	8001b98 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800262a:	4b1d      	ldr	r3, [pc, #116]	@ (80026a0 <HAL_UART_MspInit+0x1f8>)
 800262c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002630:	4a1b      	ldr	r2, [pc, #108]	@ (80026a0 <HAL_UART_MspInit+0x1f8>)
 8002632:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002636:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800263a:	4b19      	ldr	r3, [pc, #100]	@ (80026a0 <HAL_UART_MspInit+0x1f8>)
 800263c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002640:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002648:	4b15      	ldr	r3, [pc, #84]	@ (80026a0 <HAL_UART_MspInit+0x1f8>)
 800264a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800264e:	4a14      	ldr	r2, [pc, #80]	@ (80026a0 <HAL_UART_MspInit+0x1f8>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002658:	4b11      	ldr	r3, [pc, #68]	@ (80026a0 <HAL_UART_MspInit+0x1f8>)
 800265a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002666:	230c      	movs	r3, #12
 8002668:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266c:	2302      	movs	r3, #2
 800266e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002672:	2300      	movs	r3, #0
 8002674:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002678:	2303      	movs	r3, #3
 800267a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800267e:	2307      	movs	r3, #7
 8002680:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002684:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002688:	4619      	mov	r1, r3
 800268a:	480a      	ldr	r0, [pc, #40]	@ (80026b4 <HAL_UART_MspInit+0x20c>)
 800268c:	f001 fe84 	bl	8004398 <HAL_GPIO_Init>
}
 8002690:	bf00      	nop
 8002692:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40013800 	.word	0x40013800
 80026a0:	44020c00 	.word	0x44020c00
 80026a4:	42020400 	.word	0x42020400
 80026a8:	200004d4 	.word	0x200004d4
 80026ac:	40020050 	.word	0x40020050
 80026b0:	40004400 	.word	0x40004400
 80026b4:	42020000 	.word	0x42020000

080026b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026b8:	480d      	ldr	r0, [pc, #52]	@ (80026f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80026bc:	f7ff fbb0 	bl	8001e20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026c0:	480c      	ldr	r0, [pc, #48]	@ (80026f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80026c2:	490d      	ldr	r1, [pc, #52]	@ (80026f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026c4:	4a0d      	ldr	r2, [pc, #52]	@ (80026fc <LoopForever+0xe>)
  movs r3, #0
 80026c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026c8:	e002      	b.n	80026d0 <LoopCopyDataInit>

080026ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ce:	3304      	adds	r3, #4

080026d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026d4:	d3f9      	bcc.n	80026ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002700 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026d8:	4c0a      	ldr	r4, [pc, #40]	@ (8002704 <LoopForever+0x16>)
  movs r3, #0
 80026da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026dc:	e001      	b.n	80026e2 <LoopFillZerobss>

080026de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e0:	3204      	adds	r2, #4

080026e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026e4:	d3fb      	bcc.n	80026de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80026e6:	f009 fdbf 	bl	800c268 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026ea:	f7ff f8b9 	bl	8001860 <main>

080026ee <LoopForever>:

LoopForever:
    b LoopForever
 80026ee:	e7fe      	b.n	80026ee <LoopForever>
  ldr   r0, =_estack
 80026f0:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 80026f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026f8:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 80026fc:	0800ce30 	.word	0x0800ce30
  ldr r2, =_sbss
 8002700:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8002704:	2000069c 	.word	0x2000069c

08002708 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002708:	e7fe      	b.n	8002708 <ADC1_IRQHandler>
	...

0800270c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002710:	2003      	movs	r0, #3
 8002712:	f000 f98a 	bl	8002a2a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002716:	f002 fde3 	bl	80052e0 <HAL_RCC_GetSysClockFreq>
 800271a:	4602      	mov	r2, r0
 800271c:	4b0c      	ldr	r3, [pc, #48]	@ (8002750 <HAL_Init+0x44>)
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	f003 030f 	and.w	r3, r3, #15
 8002724:	490b      	ldr	r1, [pc, #44]	@ (8002754 <HAL_Init+0x48>)
 8002726:	5ccb      	ldrb	r3, [r1, r3]
 8002728:	fa22 f303 	lsr.w	r3, r2, r3
 800272c:	4a0a      	ldr	r2, [pc, #40]	@ (8002758 <HAL_Init+0x4c>)
 800272e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002730:	2004      	movs	r0, #4
 8002732:	f000 f9cf 	bl	8002ad4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002736:	2000      	movs	r0, #0
 8002738:	f000 f810 	bl	800275c <HAL_InitTick>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e002      	b.n	800274c <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002746:	f7ff fa2d 	bl	8001ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	bd80      	pop	{r7, pc}
 8002750:	44020c00 	.word	0x44020c00
 8002754:	0800cd9c 	.word	0x0800cd9c
 8002758:	20000084 	.word	0x20000084

0800275c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002764:	2300      	movs	r3, #0
 8002766:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002768:	4b33      	ldr	r3, [pc, #204]	@ (8002838 <HAL_InitTick+0xdc>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e05c      	b.n	800282e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002774:	4b31      	ldr	r3, [pc, #196]	@ (800283c <HAL_InitTick+0xe0>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b04      	cmp	r3, #4
 800277e:	d10c      	bne.n	800279a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002780:	4b2f      	ldr	r3, [pc, #188]	@ (8002840 <HAL_InitTick+0xe4>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4b2c      	ldr	r3, [pc, #176]	@ (8002838 <HAL_InitTick+0xdc>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	4619      	mov	r1, r3
 800278a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800278e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002792:	fbb2 f3f3 	udiv	r3, r2, r3
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	e037      	b.n	800280a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800279a:	f000 f9f3 	bl	8002b84 <HAL_SYSTICK_GetCLKSourceConfig>
 800279e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d023      	beq.n	80027ee <HAL_InitTick+0x92>
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d82d      	bhi.n	8002808 <HAL_InitTick+0xac>
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_InitTick+0x5e>
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d00d      	beq.n	80027d4 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80027b8:	e026      	b.n	8002808 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80027ba:	4b21      	ldr	r3, [pc, #132]	@ (8002840 <HAL_InitTick+0xe4>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	4b1e      	ldr	r3, [pc, #120]	@ (8002838 <HAL_InitTick+0xdc>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	4619      	mov	r1, r3
 80027c4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80027c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80027cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d0:	60fb      	str	r3, [r7, #12]
        break;
 80027d2:	e01a      	b.n	800280a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80027d4:	4b18      	ldr	r3, [pc, #96]	@ (8002838 <HAL_InitTick+0xdc>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027de:	fbb3 f3f2 	udiv	r3, r3, r2
 80027e2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80027e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ea:	60fb      	str	r3, [r7, #12]
        break;
 80027ec:	e00d      	b.n	800280a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80027ee:	4b12      	ldr	r3, [pc, #72]	@ (8002838 <HAL_InitTick+0xdc>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80027fc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002800:	fbb2 f3f3 	udiv	r3, r2, r3
 8002804:	60fb      	str	r3, [r7, #12]
        break;
 8002806:	e000      	b.n	800280a <HAL_InitTick+0xae>
        break;
 8002808:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 f940 	bl	8002a90 <HAL_SYSTICK_Config>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e009      	b.n	800282e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800281a:	2200      	movs	r2, #0
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	f04f 30ff 	mov.w	r0, #4294967295
 8002822:	f000 f90d 	bl	8002a40 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002826:	4a07      	ldr	r2, [pc, #28]	@ (8002844 <HAL_InitTick+0xe8>)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	2000008c 	.word	0x2000008c
 800283c:	e000e010 	.word	0xe000e010
 8002840:	20000084 	.word	0x20000084
 8002844:	20000088 	.word	0x20000088

08002848 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800284c:	4b06      	ldr	r3, [pc, #24]	@ (8002868 <HAL_IncTick+0x20>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	461a      	mov	r2, r3
 8002852:	4b06      	ldr	r3, [pc, #24]	@ (800286c <HAL_IncTick+0x24>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4413      	add	r3, r2
 8002858:	4a04      	ldr	r2, [pc, #16]	@ (800286c <HAL_IncTick+0x24>)
 800285a:	6013      	str	r3, [r2, #0]
}
 800285c:	bf00      	nop
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	2000008c 	.word	0x2000008c
 800286c:	2000054c 	.word	0x2000054c

08002870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  return uwTick;
 8002874:	4b03      	ldr	r3, [pc, #12]	@ (8002884 <HAL_GetTick+0x14>)
 8002876:	681b      	ldr	r3, [r3, #0]
}
 8002878:	4618      	mov	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	2000054c 	.word	0x2000054c

08002888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002890:	f7ff ffee 	bl	8002870 <HAL_GetTick>
 8002894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a0:	d005      	beq.n	80028ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028a2:	4b0a      	ldr	r3, [pc, #40]	@ (80028cc <HAL_Delay+0x44>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4413      	add	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028ae:	bf00      	nop
 80028b0:	f7ff ffde 	bl	8002870 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d8f7      	bhi.n	80028b0 <HAL_Delay+0x28>
  {
  }
}
 80028c0:	bf00      	nop
 80028c2:	bf00      	nop
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	2000008c 	.word	0x2000008c

080028d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002914 <__NVIC_SetPriorityGrouping+0x44>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028ec:	4013      	ands	r3, r2
 80028ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002902:	4a04      	ldr	r2, [pc, #16]	@ (8002914 <__NVIC_SetPriorityGrouping+0x44>)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	60d3      	str	r3, [r2, #12]
}
 8002908:	bf00      	nop
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800291c:	4b04      	ldr	r3, [pc, #16]	@ (8002930 <__NVIC_GetPriorityGrouping+0x18>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	0a1b      	lsrs	r3, r3, #8
 8002922:	f003 0307 	and.w	r3, r3, #7
}
 8002926:	4618      	mov	r0, r3
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	e000ed00 	.word	0xe000ed00

08002934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800293e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002942:	2b00      	cmp	r3, #0
 8002944:	db0b      	blt.n	800295e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002946:	88fb      	ldrh	r3, [r7, #6]
 8002948:	f003 021f 	and.w	r2, r3, #31
 800294c:	4907      	ldr	r1, [pc, #28]	@ (800296c <__NVIC_EnableIRQ+0x38>)
 800294e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002952:	095b      	lsrs	r3, r3, #5
 8002954:	2001      	movs	r0, #1
 8002956:	fa00 f202 	lsl.w	r2, r0, r2
 800295a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	e000e100 	.word	0xe000e100

08002970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	6039      	str	r1, [r7, #0]
 800297a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800297c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002980:	2b00      	cmp	r3, #0
 8002982:	db0a      	blt.n	800299a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	b2da      	uxtb	r2, r3
 8002988:	490c      	ldr	r1, [pc, #48]	@ (80029bc <__NVIC_SetPriority+0x4c>)
 800298a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800298e:	0112      	lsls	r2, r2, #4
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	440b      	add	r3, r1
 8002994:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002998:	e00a      	b.n	80029b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	b2da      	uxtb	r2, r3
 800299e:	4908      	ldr	r1, [pc, #32]	@ (80029c0 <__NVIC_SetPriority+0x50>)
 80029a0:	88fb      	ldrh	r3, [r7, #6]
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	3b04      	subs	r3, #4
 80029a8:	0112      	lsls	r2, r2, #4
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	440b      	add	r3, r1
 80029ae:	761a      	strb	r2, [r3, #24]
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	e000e100 	.word	0xe000e100
 80029c0:	e000ed00 	.word	0xe000ed00

080029c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b089      	sub	sp, #36	@ 0x24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f1c3 0307 	rsb	r3, r3, #7
 80029de:	2b04      	cmp	r3, #4
 80029e0:	bf28      	it	cs
 80029e2:	2304      	movcs	r3, #4
 80029e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	3304      	adds	r3, #4
 80029ea:	2b06      	cmp	r3, #6
 80029ec:	d902      	bls.n	80029f4 <NVIC_EncodePriority+0x30>
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3b03      	subs	r3, #3
 80029f2:	e000      	b.n	80029f6 <NVIC_EncodePriority+0x32>
 80029f4:	2300      	movs	r3, #0
 80029f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f8:	f04f 32ff 	mov.w	r2, #4294967295
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	43da      	mvns	r2, r3
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	401a      	ands	r2, r3
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	fa01 f303 	lsl.w	r3, r1, r3
 8002a16:	43d9      	mvns	r1, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a1c:	4313      	orrs	r3, r2
         );
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3724      	adds	r7, #36	@ 0x24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b082      	sub	sp, #8
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7ff ff4c 	bl	80028d0 <__NVIC_SetPriorityGrouping>
}
 8002a38:	bf00      	nop
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
 8002a4c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a4e:	f7ff ff63 	bl	8002918 <__NVIC_GetPriorityGrouping>
 8002a52:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	68b9      	ldr	r1, [r7, #8]
 8002a58:	6978      	ldr	r0, [r7, #20]
 8002a5a:	f7ff ffb3 	bl	80029c4 <NVIC_EncodePriority>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a64:	4611      	mov	r1, r2
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff ff82 	bl	8002970 <__NVIC_SetPriority>
}
 8002a6c:	bf00      	nop
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff ff56 	bl	8002934 <__NVIC_EnableIRQ>
}
 8002a88:	bf00      	nop
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002aa0:	d301      	bcc.n	8002aa6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e00d      	b.n	8002ac2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ad0 <HAL_SYSTICK_Config+0x40>)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002aae:	4b08      	ldr	r3, [pc, #32]	@ (8002ad0 <HAL_SYSTICK_Config+0x40>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002ab4:	4b06      	ldr	r3, [pc, #24]	@ (8002ad0 <HAL_SYSTICK_Config+0x40>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a05      	ldr	r2, [pc, #20]	@ (8002ad0 <HAL_SYSTICK_Config+0x40>)
 8002aba:	f043 0303 	orr.w	r3, r3, #3
 8002abe:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	e000e010 	.word	0xe000e010

08002ad4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d844      	bhi.n	8002b6c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ae8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae8:	08002b0b 	.word	0x08002b0b
 8002aec:	08002b29 	.word	0x08002b29
 8002af0:	08002b4b 	.word	0x08002b4b
 8002af4:	08002b6d 	.word	0x08002b6d
 8002af8:	08002afd 	.word	0x08002afd
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002afc:	4b1f      	ldr	r3, [pc, #124]	@ (8002b7c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a1e      	ldr	r2, [pc, #120]	@ (8002b7c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b02:	f043 0304 	orr.w	r3, r3, #4
 8002b06:	6013      	str	r3, [r2, #0]
      break;
 8002b08:	e031      	b.n	8002b6e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002b0a:	4b1c      	ldr	r3, [pc, #112]	@ (8002b7c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a1b      	ldr	r2, [pc, #108]	@ (8002b7c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b10:	f023 0304 	bic.w	r3, r3, #4
 8002b14:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8002b16:	4b1a      	ldr	r3, [pc, #104]	@ (8002b80 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002b18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002b1c:	4a18      	ldr	r2, [pc, #96]	@ (8002b80 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002b1e:	f023 030c 	bic.w	r3, r3, #12
 8002b22:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002b26:	e022      	b.n	8002b6e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002b28:	4b14      	ldr	r3, [pc, #80]	@ (8002b7c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a13      	ldr	r2, [pc, #76]	@ (8002b7c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b2e:	f023 0304 	bic.w	r3, r3, #4
 8002b32:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8002b34:	4b12      	ldr	r3, [pc, #72]	@ (8002b80 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002b36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002b3a:	f023 030c 	bic.w	r3, r3, #12
 8002b3e:	4a10      	ldr	r2, [pc, #64]	@ (8002b80 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002b40:	f043 0304 	orr.w	r3, r3, #4
 8002b44:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002b48:	e011      	b.n	8002b6e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b7c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a0b      	ldr	r2, [pc, #44]	@ (8002b7c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b50:	f023 0304 	bic.w	r3, r3, #4
 8002b54:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8002b56:	4b0a      	ldr	r3, [pc, #40]	@ (8002b80 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002b58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002b5c:	f023 030c 	bic.w	r3, r3, #12
 8002b60:	4a07      	ldr	r2, [pc, #28]	@ (8002b80 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002b62:	f043 0308 	orr.w	r3, r3, #8
 8002b66:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002b6a:	e000      	b.n	8002b6e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002b6c:	bf00      	nop
  }
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	e000e010 	.word	0xe000e010
 8002b80:	44020c00 	.word	0x44020c00

08002b84 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002b8a:	4b17      	ldr	r3, [pc, #92]	@ (8002be8 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002b96:	2304      	movs	r3, #4
 8002b98:	607b      	str	r3, [r7, #4]
 8002b9a:	e01e      	b.n	8002bda <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8002b9c:	4b13      	ldr	r3, [pc, #76]	@ (8002bec <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8002b9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002ba2:	f003 030c 	and.w	r3, r3, #12
 8002ba6:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	d00f      	beq.n	8002bce <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d80f      	bhi.n	8002bd4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	2b04      	cmp	r3, #4
 8002bbe:	d003      	beq.n	8002bc8 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002bc0:	e008      	b.n	8002bd4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	607b      	str	r3, [r7, #4]
        break;
 8002bc6:	e008      	b.n	8002bda <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	607b      	str	r3, [r7, #4]
        break;
 8002bcc:	e005      	b.n	8002bda <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	607b      	str	r3, [r7, #4]
        break;
 8002bd2:	e002      	b.n	8002bda <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	607b      	str	r3, [r7, #4]
        break;
 8002bd8:	bf00      	nop
    }
  }
  return systick_source;
 8002bda:	687b      	ldr	r3, [r7, #4]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	e000e010 	.word	0xe000e010
 8002bec:	44020c00 	.word	0x44020c00

08002bf0 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8002bf8:	f7ff fe3a 	bl	8002870 <HAL_GetTick>
 8002bfc:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0db      	b.n	8002dc0 <HAL_DMA_Init+0x1d0>
  if (hdma->Init.Mode == DMA_PFCTRL)
  {
    assert_param(IS_DMA_PFREQ_INSTANCE(hdma->Instance));
  }
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a6e      	ldr	r2, [pc, #440]	@ (8002dc8 <HAL_DMA_Init+0x1d8>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	f000 809f 	beq.w	8002d52 <HAL_DMA_Init+0x162>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a6c      	ldr	r2, [pc, #432]	@ (8002dcc <HAL_DMA_Init+0x1dc>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	f000 8099 	beq.w	8002d52 <HAL_DMA_Init+0x162>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a6a      	ldr	r2, [pc, #424]	@ (8002dd0 <HAL_DMA_Init+0x1e0>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	f000 8093 	beq.w	8002d52 <HAL_DMA_Init+0x162>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a68      	ldr	r2, [pc, #416]	@ (8002dd4 <HAL_DMA_Init+0x1e4>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	f000 808d 	beq.w	8002d52 <HAL_DMA_Init+0x162>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a66      	ldr	r2, [pc, #408]	@ (8002dd8 <HAL_DMA_Init+0x1e8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	f000 8087 	beq.w	8002d52 <HAL_DMA_Init+0x162>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a64      	ldr	r2, [pc, #400]	@ (8002ddc <HAL_DMA_Init+0x1ec>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	f000 8081 	beq.w	8002d52 <HAL_DMA_Init+0x162>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a62      	ldr	r2, [pc, #392]	@ (8002de0 <HAL_DMA_Init+0x1f0>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d07b      	beq.n	8002d52 <HAL_DMA_Init+0x162>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a61      	ldr	r2, [pc, #388]	@ (8002de4 <HAL_DMA_Init+0x1f4>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d076      	beq.n	8002d52 <HAL_DMA_Init+0x162>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a5f      	ldr	r2, [pc, #380]	@ (8002de8 <HAL_DMA_Init+0x1f8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d071      	beq.n	8002d52 <HAL_DMA_Init+0x162>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a5e      	ldr	r2, [pc, #376]	@ (8002dec <HAL_DMA_Init+0x1fc>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d06c      	beq.n	8002d52 <HAL_DMA_Init+0x162>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a5c      	ldr	r2, [pc, #368]	@ (8002df0 <HAL_DMA_Init+0x200>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d067      	beq.n	8002d52 <HAL_DMA_Init+0x162>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a5b      	ldr	r2, [pc, #364]	@ (8002df4 <HAL_DMA_Init+0x204>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d062      	beq.n	8002d52 <HAL_DMA_Init+0x162>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a59      	ldr	r2, [pc, #356]	@ (8002df8 <HAL_DMA_Init+0x208>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d05d      	beq.n	8002d52 <HAL_DMA_Init+0x162>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a58      	ldr	r2, [pc, #352]	@ (8002dfc <HAL_DMA_Init+0x20c>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d058      	beq.n	8002d52 <HAL_DMA_Init+0x162>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a56      	ldr	r2, [pc, #344]	@ (8002e00 <HAL_DMA_Init+0x210>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d053      	beq.n	8002d52 <HAL_DMA_Init+0x162>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a55      	ldr	r2, [pc, #340]	@ (8002e04 <HAL_DMA_Init+0x214>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d04e      	beq.n	8002d52 <HAL_DMA_Init+0x162>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a53      	ldr	r2, [pc, #332]	@ (8002e08 <HAL_DMA_Init+0x218>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d049      	beq.n	8002d52 <HAL_DMA_Init+0x162>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a52      	ldr	r2, [pc, #328]	@ (8002e0c <HAL_DMA_Init+0x21c>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d044      	beq.n	8002d52 <HAL_DMA_Init+0x162>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a50      	ldr	r2, [pc, #320]	@ (8002e10 <HAL_DMA_Init+0x220>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d03f      	beq.n	8002d52 <HAL_DMA_Init+0x162>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a4f      	ldr	r2, [pc, #316]	@ (8002e14 <HAL_DMA_Init+0x224>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d03a      	beq.n	8002d52 <HAL_DMA_Init+0x162>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a4d      	ldr	r2, [pc, #308]	@ (8002e18 <HAL_DMA_Init+0x228>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d035      	beq.n	8002d52 <HAL_DMA_Init+0x162>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a4c      	ldr	r2, [pc, #304]	@ (8002e1c <HAL_DMA_Init+0x22c>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d030      	beq.n	8002d52 <HAL_DMA_Init+0x162>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a4a      	ldr	r2, [pc, #296]	@ (8002e20 <HAL_DMA_Init+0x230>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d02b      	beq.n	8002d52 <HAL_DMA_Init+0x162>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a49      	ldr	r2, [pc, #292]	@ (8002e24 <HAL_DMA_Init+0x234>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d026      	beq.n	8002d52 <HAL_DMA_Init+0x162>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a47      	ldr	r2, [pc, #284]	@ (8002e28 <HAL_DMA_Init+0x238>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d021      	beq.n	8002d52 <HAL_DMA_Init+0x162>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a46      	ldr	r2, [pc, #280]	@ (8002e2c <HAL_DMA_Init+0x23c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d01c      	beq.n	8002d52 <HAL_DMA_Init+0x162>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a44      	ldr	r2, [pc, #272]	@ (8002e30 <HAL_DMA_Init+0x240>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d017      	beq.n	8002d52 <HAL_DMA_Init+0x162>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a43      	ldr	r2, [pc, #268]	@ (8002e34 <HAL_DMA_Init+0x244>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d012      	beq.n	8002d52 <HAL_DMA_Init+0x162>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a41      	ldr	r2, [pc, #260]	@ (8002e38 <HAL_DMA_Init+0x248>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00d      	beq.n	8002d52 <HAL_DMA_Init+0x162>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a40      	ldr	r2, [pc, #256]	@ (8002e3c <HAL_DMA_Init+0x24c>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d008      	beq.n	8002d52 <HAL_DMA_Init+0x162>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a3e      	ldr	r2, [pc, #248]	@ (8002e40 <HAL_DMA_Init+0x250>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d003      	beq.n	8002d52 <HAL_DMA_Init+0x162>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a3d      	ldr	r2, [pc, #244]	@ (8002e44 <HAL_DMA_Init+0x254>)
 8002d50:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	695a      	ldr	r2, [r3, #20]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f042 0206 	orr.w	r2, r2, #6
 8002d70:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002d72:	e00f      	b.n	8002d94 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002d74:	f7ff fd7c 	bl	8002870 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b05      	cmp	r3, #5
 8002d80:	d908      	bls.n	8002d94 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2210      	movs	r2, #16
 8002d86:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2203      	movs	r2, #3
 8002d8c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e015      	b.n	8002dc0 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1e8      	bne.n	8002d74 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 fb18 	bl	80033d8 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40020050 	.word	0x40020050
 8002dcc:	50020050 	.word	0x50020050
 8002dd0:	400200d0 	.word	0x400200d0
 8002dd4:	500200d0 	.word	0x500200d0
 8002dd8:	40020150 	.word	0x40020150
 8002ddc:	50020150 	.word	0x50020150
 8002de0:	400201d0 	.word	0x400201d0
 8002de4:	500201d0 	.word	0x500201d0
 8002de8:	40020250 	.word	0x40020250
 8002dec:	50020250 	.word	0x50020250
 8002df0:	400202d0 	.word	0x400202d0
 8002df4:	500202d0 	.word	0x500202d0
 8002df8:	40020350 	.word	0x40020350
 8002dfc:	50020350 	.word	0x50020350
 8002e00:	400203d0 	.word	0x400203d0
 8002e04:	500203d0 	.word	0x500203d0
 8002e08:	40021050 	.word	0x40021050
 8002e0c:	50021050 	.word	0x50021050
 8002e10:	400210d0 	.word	0x400210d0
 8002e14:	500210d0 	.word	0x500210d0
 8002e18:	40021150 	.word	0x40021150
 8002e1c:	50021150 	.word	0x50021150
 8002e20:	400211d0 	.word	0x400211d0
 8002e24:	500211d0 	.word	0x500211d0
 8002e28:	40021250 	.word	0x40021250
 8002e2c:	50021250 	.word	0x50021250
 8002e30:	400212d0 	.word	0x400212d0
 8002e34:	500212d0 	.word	0x500212d0
 8002e38:	40021350 	.word	0x40021350
 8002e3c:	50021350 	.word	0x50021350
 8002e40:	400213d0 	.word	0x400213d0
 8002e44:	500213d0 	.word	0x500213d0

08002e48 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
 8002e54:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e04f      	b.n	8002f00 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d101      	bne.n	8002e6e <HAL_DMA_Start_IT+0x26>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e048      	b.n	8002f00 <HAL_DMA_Start_IT+0xb8>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d136      	bne.n	8002ef0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2202      	movs	r2, #2
 8002e86:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	68b9      	ldr	r1, [r7, #8]
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 fa78 	bl	800338c <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	695a      	ldr	r2, [r3, #20]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8002eaa:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d007      	beq.n	8002ec4 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	695a      	ldr	r2, [r3, #20]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ec2:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d007      	beq.n	8002edc <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695a      	ldr	r2, [r3, #20]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002eda:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695a      	ldr	r2, [r3, #20]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
 8002eee:	e007      	b.n	8002f00 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2240      	movs	r2, #64	@ 0x40
 8002ef4:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8002f10:	f7ff fcae 	bl	8002870 <HAL_GetTick>
 8002f14:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e06b      	b.n	8002ff8 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d008      	beq.n	8002f3e <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e05c      	b.n	8002ff8 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695a      	ldr	r2, [r3, #20]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f042 0204 	orr.w	r2, r2, #4
 8002f4c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2205      	movs	r2, #5
 8002f52:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002f56:	e020      	b.n	8002f9a <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002f58:	f7ff fc8a 	bl	8002870 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b05      	cmp	r3, #5
 8002f64:	d919      	bls.n	8002f9a <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f6a:	f043 0210 	orr.w	r2, r3, #16
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2203      	movs	r2, #3
 8002f76:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e02e      	b.n	8002ff8 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0d7      	beq.n	8002f58 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695a      	ldr	r2, [r3, #20]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0202 	orr.w	r2, r2, #2
 8002fb6:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2204      	movs	r2, #4
 8002fbc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8002fc8:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d007      	beq.n	8002fee <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2200      	movs	r2, #0
 8002fec:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e019      	b.n	8003046 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d004      	beq.n	8003028 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2220      	movs	r2, #32
 8003022:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e00e      	b.n	8003046 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2204      	movs	r2, #4
 800302c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6812      	ldr	r2, [r2, #0]
 800303a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800303e:	f043 0304 	orr.w	r3, r3, #4
 8003042:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b086      	sub	sp, #24
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003062:	f023 030f 	bic.w	r3, r3, #15
 8003066:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003070:	3b50      	subs	r3, #80	@ 0x50
 8003072:	09db      	lsrs	r3, r3, #7
 8003074:	f003 031f 	and.w	r3, r3, #31
 8003078:	2201      	movs	r2, #1
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	4013      	ands	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 813b 	beq.w	8003308 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800309c:	2b00      	cmp	r3, #0
 800309e:	d011      	beq.n	80030c4 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00a      	beq.n	80030c4 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030b6:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030bc:	f043 0201 	orr.w	r2, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d011      	beq.n	80030f6 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00a      	beq.n	80030f6 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80030e8:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ee:	f043 0202 	orr.w	r2, r3, #2
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d011      	beq.n	8003128 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00a      	beq.n	8003128 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800311a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003120:	f043 0204 	orr.w	r2, r3, #4
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d011      	beq.n	800315a <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00a      	beq.n	800315a <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800314c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003152:	f043 0208 	orr.w	r2, r3, #8
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003164:	2b00      	cmp	r3, #0
 8003166:	d013      	beq.n	8003190 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00c      	beq.n	8003190 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800317e:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d04c      	beq.n	8003238 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d045      	beq.n	8003238 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031b4:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d12e      	bne.n	8003220 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	695a      	ldr	r2, [r3, #20]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031d0:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695a      	ldr	r2, [r3, #20]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 0202 	orr.w	r2, r2, #2
 80031e0:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d007      	beq.n	8003206 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031fa:	2201      	movs	r2, #1
 80031fc:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2200      	movs	r2, #0
 8003204:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003212:	2b00      	cmp	r3, #0
 8003214:	d07a      	beq.n	800330c <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	4798      	blx	r3
        }

        return;
 800321e:	e075      	b.n	800330c <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2205      	movs	r2, #5
 8003224:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003242:	2b00      	cmp	r3, #0
 8003244:	d039      	beq.n	80032ba <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003250:	2b00      	cmp	r3, #0
 8003252:	d032      	beq.n	80032ba <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800325c:	2b00      	cmp	r3, #0
 800325e:	d012      	beq.n	8003286 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003266:	2b00      	cmp	r3, #0
 8003268:	d116      	bne.n	8003298 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003270:	2b00      	cmp	r3, #0
 8003272:	d111      	bne.n	8003298 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003280:	2201      	movs	r2, #1
 8003282:	731a      	strb	r2, [r3, #12]
 8003284:	e008      	b.n	8003298 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800328c:	2b00      	cmp	r3, #0
 800328e:	d103      	bne.n	8003298 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80032a0:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d025      	beq.n	800330e <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695a      	ldr	r2, [r3, #20]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f042 0202 	orr.w	r2, r2, #2
 80032d0:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ea:	2201      	movs	r2, #1
 80032ec:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d007      	beq.n	800330e <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	4798      	blx	r3
 8003306:	e002      	b.n	800330e <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8003308:	bf00      	nop
 800330a:	e000      	b.n	800330e <HAL_DMA_IRQHandler+0x2bc>
        return;
 800330c:	bf00      	nop
    }
  }
}
 800330e:	3718      	adds	r7, #24
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e02b      	b.n	8003380 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003330:	f023 030f 	bic.w	r3, r3, #15
 8003334:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800333e:	3b50      	subs	r3, #80	@ 0x50
 8003340:	09db      	lsrs	r3, r3, #7
 8003342:	f003 031f 	and.w	r3, r3, #31
 8003346:	2201      	movs	r2, #1
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	f003 0310 	and.w	r3, r3, #16
 8003354:	2b00      	cmp	r3, #0
 8003356:	d012      	beq.n	800337e <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	f003 0311 	and.w	r3, r3, #17
 800335e:	2b11      	cmp	r3, #17
 8003360:	d106      	bne.n	8003370 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	431a      	orrs	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	605a      	str	r2, [r3, #4]
 800336e:	e006      	b.n	800337e <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	43db      	mvns	r3, r3
 8003378:	401a      	ands	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
 8003398:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033a0:	0c1b      	lsrs	r3, r3, #16
 80033a2:	041b      	lsls	r3, r3, #16
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	b291      	uxth	r1, r2
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	6812      	ldr	r2, [r2, #0]
 80033ac:	430b      	orrs	r3, r1
 80033ae:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80033b8:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80033ca:	bf00      	nop
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
	...

080033d8 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695a      	ldr	r2, [r3, #20]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	431a      	orrs	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a53      	ldr	r2, [pc, #332]	@ (8003564 <DMA_Init+0x18c>)
 8003418:	4293      	cmp	r3, r2
 800341a:	f000 80a0 	beq.w	800355e <DMA_Init+0x186>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a51      	ldr	r2, [pc, #324]	@ (8003568 <DMA_Init+0x190>)
 8003424:	4293      	cmp	r3, r2
 8003426:	f000 809a 	beq.w	800355e <DMA_Init+0x186>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a4f      	ldr	r2, [pc, #316]	@ (800356c <DMA_Init+0x194>)
 8003430:	4293      	cmp	r3, r2
 8003432:	f000 8094 	beq.w	800355e <DMA_Init+0x186>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a4d      	ldr	r2, [pc, #308]	@ (8003570 <DMA_Init+0x198>)
 800343c:	4293      	cmp	r3, r2
 800343e:	f000 808e 	beq.w	800355e <DMA_Init+0x186>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a4b      	ldr	r2, [pc, #300]	@ (8003574 <DMA_Init+0x19c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	f000 8088 	beq.w	800355e <DMA_Init+0x186>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a49      	ldr	r2, [pc, #292]	@ (8003578 <DMA_Init+0x1a0>)
 8003454:	4293      	cmp	r3, r2
 8003456:	f000 8082 	beq.w	800355e <DMA_Init+0x186>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a47      	ldr	r2, [pc, #284]	@ (800357c <DMA_Init+0x1a4>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d07c      	beq.n	800355e <DMA_Init+0x186>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a45      	ldr	r2, [pc, #276]	@ (8003580 <DMA_Init+0x1a8>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d077      	beq.n	800355e <DMA_Init+0x186>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a44      	ldr	r2, [pc, #272]	@ (8003584 <DMA_Init+0x1ac>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d072      	beq.n	800355e <DMA_Init+0x186>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a42      	ldr	r2, [pc, #264]	@ (8003588 <DMA_Init+0x1b0>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d06d      	beq.n	800355e <DMA_Init+0x186>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a41      	ldr	r2, [pc, #260]	@ (800358c <DMA_Init+0x1b4>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d068      	beq.n	800355e <DMA_Init+0x186>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a3f      	ldr	r2, [pc, #252]	@ (8003590 <DMA_Init+0x1b8>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d063      	beq.n	800355e <DMA_Init+0x186>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a3e      	ldr	r2, [pc, #248]	@ (8003594 <DMA_Init+0x1bc>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d05e      	beq.n	800355e <DMA_Init+0x186>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a3c      	ldr	r2, [pc, #240]	@ (8003598 <DMA_Init+0x1c0>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d059      	beq.n	800355e <DMA_Init+0x186>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a3b      	ldr	r2, [pc, #236]	@ (800359c <DMA_Init+0x1c4>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d054      	beq.n	800355e <DMA_Init+0x186>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a39      	ldr	r2, [pc, #228]	@ (80035a0 <DMA_Init+0x1c8>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d04f      	beq.n	800355e <DMA_Init+0x186>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a38      	ldr	r2, [pc, #224]	@ (80035a4 <DMA_Init+0x1cc>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d04a      	beq.n	800355e <DMA_Init+0x186>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a36      	ldr	r2, [pc, #216]	@ (80035a8 <DMA_Init+0x1d0>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d045      	beq.n	800355e <DMA_Init+0x186>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a35      	ldr	r2, [pc, #212]	@ (80035ac <DMA_Init+0x1d4>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d040      	beq.n	800355e <DMA_Init+0x186>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a33      	ldr	r2, [pc, #204]	@ (80035b0 <DMA_Init+0x1d8>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d03b      	beq.n	800355e <DMA_Init+0x186>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a32      	ldr	r2, [pc, #200]	@ (80035b4 <DMA_Init+0x1dc>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d036      	beq.n	800355e <DMA_Init+0x186>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a30      	ldr	r2, [pc, #192]	@ (80035b8 <DMA_Init+0x1e0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d031      	beq.n	800355e <DMA_Init+0x186>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a2f      	ldr	r2, [pc, #188]	@ (80035bc <DMA_Init+0x1e4>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d02c      	beq.n	800355e <DMA_Init+0x186>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a2d      	ldr	r2, [pc, #180]	@ (80035c0 <DMA_Init+0x1e8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d027      	beq.n	800355e <DMA_Init+0x186>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a2c      	ldr	r2, [pc, #176]	@ (80035c4 <DMA_Init+0x1ec>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d022      	beq.n	800355e <DMA_Init+0x186>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a2a      	ldr	r2, [pc, #168]	@ (80035c8 <DMA_Init+0x1f0>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d01d      	beq.n	800355e <DMA_Init+0x186>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a29      	ldr	r2, [pc, #164]	@ (80035cc <DMA_Init+0x1f4>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d018      	beq.n	800355e <DMA_Init+0x186>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a27      	ldr	r2, [pc, #156]	@ (80035d0 <DMA_Init+0x1f8>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d013      	beq.n	800355e <DMA_Init+0x186>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a26      	ldr	r2, [pc, #152]	@ (80035d4 <DMA_Init+0x1fc>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d00e      	beq.n	800355e <DMA_Init+0x186>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a24      	ldr	r2, [pc, #144]	@ (80035d8 <DMA_Init+0x200>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d009      	beq.n	800355e <DMA_Init+0x186>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a23      	ldr	r2, [pc, #140]	@ (80035dc <DMA_Init+0x204>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d004      	beq.n	800355e <DMA_Init+0x186>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a21      	ldr	r2, [pc, #132]	@ (80035e0 <DMA_Init+0x208>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d142      	bne.n	80035e4 <DMA_Init+0x20c>
 800355e:	2301      	movs	r3, #1
 8003560:	e041      	b.n	80035e6 <DMA_Init+0x20e>
 8003562:	bf00      	nop
 8003564:	40020050 	.word	0x40020050
 8003568:	50020050 	.word	0x50020050
 800356c:	400200d0 	.word	0x400200d0
 8003570:	500200d0 	.word	0x500200d0
 8003574:	40020150 	.word	0x40020150
 8003578:	50020150 	.word	0x50020150
 800357c:	400201d0 	.word	0x400201d0
 8003580:	500201d0 	.word	0x500201d0
 8003584:	40020250 	.word	0x40020250
 8003588:	50020250 	.word	0x50020250
 800358c:	400202d0 	.word	0x400202d0
 8003590:	500202d0 	.word	0x500202d0
 8003594:	40020350 	.word	0x40020350
 8003598:	50020350 	.word	0x50020350
 800359c:	400203d0 	.word	0x400203d0
 80035a0:	500203d0 	.word	0x500203d0
 80035a4:	40021050 	.word	0x40021050
 80035a8:	50021050 	.word	0x50021050
 80035ac:	400210d0 	.word	0x400210d0
 80035b0:	500210d0 	.word	0x500210d0
 80035b4:	40021150 	.word	0x40021150
 80035b8:	50021150 	.word	0x50021150
 80035bc:	400211d0 	.word	0x400211d0
 80035c0:	500211d0 	.word	0x500211d0
 80035c4:	40021250 	.word	0x40021250
 80035c8:	50021250 	.word	0x50021250
 80035cc:	400212d0 	.word	0x400212d0
 80035d0:	500212d0 	.word	0x500212d0
 80035d4:	40021350 	.word	0x40021350
 80035d8:	50021350 	.word	0x50021350
 80035dc:	400213d0 	.word	0x400213d0
 80035e0:	500213d0 	.word	0x500213d0
 80035e4:	2300      	movs	r3, #0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d012      	beq.n	8003610 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f2:	3b01      	subs	r3, #1
 80035f4:	051b      	lsls	r3, r3, #20
 80035f6:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80035fa:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003600:	3b01      	subs	r3, #1
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8003608:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4313      	orrs	r3, r2
 800360e:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003616:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	430a      	orrs	r2, r1
 8003622:	641a      	str	r2, [r3, #64]	@ 0x40
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
#endif /* DMA_CTR1_SSEC */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	b2db      	uxtb	r3, r3
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003634:	4313      	orrs	r3, r2
 8003636:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003640:	f040 80b0 	bne.w	80037a4 <DMA_Init+0x3cc>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a84      	ldr	r2, [pc, #528]	@ (800385c <DMA_Init+0x484>)
 800364a:	4293      	cmp	r3, r2
 800364c:	f000 80a0 	beq.w	8003790 <DMA_Init+0x3b8>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a82      	ldr	r2, [pc, #520]	@ (8003860 <DMA_Init+0x488>)
 8003656:	4293      	cmp	r3, r2
 8003658:	f000 809a 	beq.w	8003790 <DMA_Init+0x3b8>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a80      	ldr	r2, [pc, #512]	@ (8003864 <DMA_Init+0x48c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	f000 8094 	beq.w	8003790 <DMA_Init+0x3b8>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a7e      	ldr	r2, [pc, #504]	@ (8003868 <DMA_Init+0x490>)
 800366e:	4293      	cmp	r3, r2
 8003670:	f000 808e 	beq.w	8003790 <DMA_Init+0x3b8>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a7c      	ldr	r2, [pc, #496]	@ (800386c <DMA_Init+0x494>)
 800367a:	4293      	cmp	r3, r2
 800367c:	f000 8088 	beq.w	8003790 <DMA_Init+0x3b8>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a7a      	ldr	r2, [pc, #488]	@ (8003870 <DMA_Init+0x498>)
 8003686:	4293      	cmp	r3, r2
 8003688:	f000 8082 	beq.w	8003790 <DMA_Init+0x3b8>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a78      	ldr	r2, [pc, #480]	@ (8003874 <DMA_Init+0x49c>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d07c      	beq.n	8003790 <DMA_Init+0x3b8>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a77      	ldr	r2, [pc, #476]	@ (8003878 <DMA_Init+0x4a0>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d077      	beq.n	8003790 <DMA_Init+0x3b8>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a75      	ldr	r2, [pc, #468]	@ (800387c <DMA_Init+0x4a4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d072      	beq.n	8003790 <DMA_Init+0x3b8>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a74      	ldr	r2, [pc, #464]	@ (8003880 <DMA_Init+0x4a8>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d06d      	beq.n	8003790 <DMA_Init+0x3b8>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a72      	ldr	r2, [pc, #456]	@ (8003884 <DMA_Init+0x4ac>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d068      	beq.n	8003790 <DMA_Init+0x3b8>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a71      	ldr	r2, [pc, #452]	@ (8003888 <DMA_Init+0x4b0>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d063      	beq.n	8003790 <DMA_Init+0x3b8>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a6f      	ldr	r2, [pc, #444]	@ (800388c <DMA_Init+0x4b4>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d05e      	beq.n	8003790 <DMA_Init+0x3b8>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a6e      	ldr	r2, [pc, #440]	@ (8003890 <DMA_Init+0x4b8>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d059      	beq.n	8003790 <DMA_Init+0x3b8>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a6c      	ldr	r2, [pc, #432]	@ (8003894 <DMA_Init+0x4bc>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d054      	beq.n	8003790 <DMA_Init+0x3b8>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a6b      	ldr	r2, [pc, #428]	@ (8003898 <DMA_Init+0x4c0>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d04f      	beq.n	8003790 <DMA_Init+0x3b8>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a69      	ldr	r2, [pc, #420]	@ (800389c <DMA_Init+0x4c4>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d04a      	beq.n	8003790 <DMA_Init+0x3b8>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a68      	ldr	r2, [pc, #416]	@ (80038a0 <DMA_Init+0x4c8>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d045      	beq.n	8003790 <DMA_Init+0x3b8>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a66      	ldr	r2, [pc, #408]	@ (80038a4 <DMA_Init+0x4cc>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d040      	beq.n	8003790 <DMA_Init+0x3b8>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a65      	ldr	r2, [pc, #404]	@ (80038a8 <DMA_Init+0x4d0>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d03b      	beq.n	8003790 <DMA_Init+0x3b8>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a63      	ldr	r2, [pc, #396]	@ (80038ac <DMA_Init+0x4d4>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d036      	beq.n	8003790 <DMA_Init+0x3b8>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a62      	ldr	r2, [pc, #392]	@ (80038b0 <DMA_Init+0x4d8>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d031      	beq.n	8003790 <DMA_Init+0x3b8>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a60      	ldr	r2, [pc, #384]	@ (80038b4 <DMA_Init+0x4dc>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d02c      	beq.n	8003790 <DMA_Init+0x3b8>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a5f      	ldr	r2, [pc, #380]	@ (80038b8 <DMA_Init+0x4e0>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d027      	beq.n	8003790 <DMA_Init+0x3b8>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a5d      	ldr	r2, [pc, #372]	@ (80038bc <DMA_Init+0x4e4>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d022      	beq.n	8003790 <DMA_Init+0x3b8>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a5c      	ldr	r2, [pc, #368]	@ (80038c0 <DMA_Init+0x4e8>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d01d      	beq.n	8003790 <DMA_Init+0x3b8>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a5a      	ldr	r2, [pc, #360]	@ (80038c4 <DMA_Init+0x4ec>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d018      	beq.n	8003790 <DMA_Init+0x3b8>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a59      	ldr	r2, [pc, #356]	@ (80038c8 <DMA_Init+0x4f0>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d013      	beq.n	8003790 <DMA_Init+0x3b8>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a57      	ldr	r2, [pc, #348]	@ (80038cc <DMA_Init+0x4f4>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d00e      	beq.n	8003790 <DMA_Init+0x3b8>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a56      	ldr	r2, [pc, #344]	@ (80038d0 <DMA_Init+0x4f8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d009      	beq.n	8003790 <DMA_Init+0x3b8>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a54      	ldr	r2, [pc, #336]	@ (80038d4 <DMA_Init+0x4fc>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d004      	beq.n	8003790 <DMA_Init+0x3b8>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a53      	ldr	r2, [pc, #332]	@ (80038d8 <DMA_Init+0x500>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d101      	bne.n	8003794 <DMA_Init+0x3bc>
 8003790:	2301      	movs	r3, #1
 8003792:	e000      	b.n	8003796 <DMA_Init+0x3be>
 8003794:	2300      	movs	r3, #0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00d      	beq.n	80037b6 <DMA_Init+0x3de>
    {
      tmpreg |= DMA_CTR2_DREQ;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	e008      	b.n	80037b6 <DMA_Init+0x3de>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037ac:	d103      	bne.n	80037b6 <DMA_Init+0x3de>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037b4:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Set DMA channel operation mode */
  tmpreg |= hdma->Init.Mode;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	4313      	orrs	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037c6:	4b45      	ldr	r3, [pc, #276]	@ (80038dc <DMA_Init+0x504>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6812      	ldr	r2, [r2, #0]
 80037ce:	68f9      	ldr	r1, [r7, #12]
 80037d0:	430b      	orrs	r3, r1
 80037d2:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2200      	movs	r2, #0
 80037da:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a2a      	ldr	r2, [pc, #168]	@ (800388c <DMA_Init+0x4b4>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d022      	beq.n	800382c <DMA_Init+0x454>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a29      	ldr	r2, [pc, #164]	@ (8003890 <DMA_Init+0x4b8>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d01d      	beq.n	800382c <DMA_Init+0x454>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a27      	ldr	r2, [pc, #156]	@ (8003894 <DMA_Init+0x4bc>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d018      	beq.n	800382c <DMA_Init+0x454>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a26      	ldr	r2, [pc, #152]	@ (8003898 <DMA_Init+0x4c0>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d013      	beq.n	800382c <DMA_Init+0x454>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a30      	ldr	r2, [pc, #192]	@ (80038cc <DMA_Init+0x4f4>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d00e      	beq.n	800382c <DMA_Init+0x454>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a2f      	ldr	r2, [pc, #188]	@ (80038d0 <DMA_Init+0x4f8>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d009      	beq.n	800382c <DMA_Init+0x454>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a2d      	ldr	r2, [pc, #180]	@ (80038d4 <DMA_Init+0x4fc>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d004      	beq.n	800382c <DMA_Init+0x454>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a2c      	ldr	r2, [pc, #176]	@ (80038d8 <DMA_Init+0x500>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d101      	bne.n	8003830 <DMA_Init+0x458>
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <DMA_Init+0x45a>
 8003830:	2300      	movs	r3, #0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d007      	beq.n	8003846 <DMA_Init+0x46e>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2200      	movs	r2, #0
 800383c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2200      	movs	r2, #0
 8003844:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2200      	movs	r2, #0
 800384c:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800384e:	bf00      	nop
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	40020050 	.word	0x40020050
 8003860:	50020050 	.word	0x50020050
 8003864:	400200d0 	.word	0x400200d0
 8003868:	500200d0 	.word	0x500200d0
 800386c:	40020150 	.word	0x40020150
 8003870:	50020150 	.word	0x50020150
 8003874:	400201d0 	.word	0x400201d0
 8003878:	500201d0 	.word	0x500201d0
 800387c:	40020250 	.word	0x40020250
 8003880:	50020250 	.word	0x50020250
 8003884:	400202d0 	.word	0x400202d0
 8003888:	500202d0 	.word	0x500202d0
 800388c:	40020350 	.word	0x40020350
 8003890:	50020350 	.word	0x50020350
 8003894:	400203d0 	.word	0x400203d0
 8003898:	500203d0 	.word	0x500203d0
 800389c:	40021050 	.word	0x40021050
 80038a0:	50021050 	.word	0x50021050
 80038a4:	400210d0 	.word	0x400210d0
 80038a8:	500210d0 	.word	0x500210d0
 80038ac:	40021150 	.word	0x40021150
 80038b0:	50021150 	.word	0x50021150
 80038b4:	400211d0 	.word	0x400211d0
 80038b8:	500211d0 	.word	0x500211d0
 80038bc:	40021250 	.word	0x40021250
 80038c0:	50021250 	.word	0x50021250
 80038c4:	400212d0 	.word	0x400212d0
 80038c8:	500212d0 	.word	0x500212d0
 80038cc:	40021350 	.word	0x40021350
 80038d0:	50021350 	.word	0x50021350
 80038d4:	400213d0 	.word	0x400213d0
 80038d8:	500213d0 	.word	0x500213d0
 80038dc:	3cc02100 	.word	0x3cc02100

080038e0 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_DMAEx_List_Start_IT+0x16>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e082      	b.n	8003a00 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003900:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800390c:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 800390e:	7dfb      	ldrb	r3, [r7, #23]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d005      	beq.n	8003920 <HAL_DMAEx_List_Start_IT+0x40>
 8003914:	7dfb      	ldrb	r3, [r7, #23]
 8003916:	2b02      	cmp	r3, #2
 8003918:	d16a      	bne.n	80039f0 <HAL_DMAEx_List_Start_IT+0x110>
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d067      	beq.n	80039f0 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b01      	cmp	r3, #1
 800392a:	d157      	bne.n	80039dc <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003932:	2b01      	cmp	r3, #1
 8003934:	d101      	bne.n	800393a <HAL_DMAEx_List_Start_IT+0x5a>
 8003936:	2302      	movs	r3, #2
 8003938:	e062      	b.n	8003a00 <HAL_DMAEx_List_Start_IT+0x120>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2202      	movs	r2, #2
 8003946:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800394e:	2202      	movs	r2, #2
 8003950:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800395c:	2200      	movs	r2, #0
 800395e:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695a      	ldr	r2, [r3, #20]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800396e:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003974:	2b00      	cmp	r3, #0
 8003976:	d007      	beq.n	8003988 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695a      	ldr	r2, [r3, #20]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003986:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800398c:	2b00      	cmp	r3, #0
 800398e:	d007      	beq.n	80039a0 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695a      	ldr	r2, [r3, #20]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800399e:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f107 010c 	add.w	r1, r7, #12
 80039aa:	2200      	movs	r2, #0
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 f82b 	bl	8003a08 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4619      	mov	r1, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	0c0b      	lsrs	r3, r1, #16
 80039c0:	041b      	lsls	r3, r3, #16
 80039c2:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80039d0:	4013      	ands	r3, r2
 80039d2:	68f9      	ldr	r1, [r7, #12]
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6812      	ldr	r2, [r2, #0]
 80039d8:	430b      	orrs	r3, r1
 80039da:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695a      	ldr	r2, [r3, #20]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0201 	orr.w	r2, r2, #1
 80039ea:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	e007      	b.n	8003a00 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2240      	movs	r2, #64	@ 0x40
 80039f4:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3718      	adds	r7, #24
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00c      	beq.n	8003a3a <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d002      	beq.n	8003a2c <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	4a0d      	ldr	r2, [pc, #52]	@ (8003a60 <DMA_List_GetCLLRNodeInfo+0x58>)
 8003a2a:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00f      	beq.n	8003a52 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2207      	movs	r2, #7
 8003a36:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8003a38:	e00b      	b.n	8003a52 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d002      	beq.n	8003a46 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	4a08      	ldr	r2, [pc, #32]	@ (8003a64 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8003a44:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d002      	beq.n	8003a52 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2205      	movs	r2, #5
 8003a50:	601a      	str	r2, [r3, #0]
}
 8003a52:	bf00      	nop
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	fe010000 	.word	0xfe010000
 8003a64:	f8010000 	.word	0xf8010000

08003a68 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e147      	b.n	8003d0a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d106      	bne.n	8003a94 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7fd fa3e 	bl	8000f10 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699a      	ldr	r2, [r3, #24]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0210 	bic.w	r2, r2, #16
 8003aa2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003aa4:	f7fe fee4 	bl	8002870 <HAL_GetTick>
 8003aa8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003aaa:	e012      	b.n	8003ad2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003aac:	f7fe fee0 	bl	8002870 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b0a      	cmp	r3, #10
 8003ab8:	d90b      	bls.n	8003ad2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003abe:	f043 0201 	orr.w	r2, r3, #1
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2203      	movs	r2, #3
 8003aca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e11b      	b.n	8003d0a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	f003 0308 	and.w	r3, r3, #8
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d0e5      	beq.n	8003aac <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699a      	ldr	r2, [r3, #24]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0201 	orr.w	r2, r2, #1
 8003aee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003af0:	f7fe febe 	bl	8002870 <HAL_GetTick>
 8003af4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003af6:	e012      	b.n	8003b1e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003af8:	f7fe feba 	bl	8002870 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b0a      	cmp	r3, #10
 8003b04:	d90b      	bls.n	8003b1e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b0a:	f043 0201 	orr.w	r2, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2203      	movs	r2, #3
 8003b16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e0f5      	b.n	8003d0a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0e5      	beq.n	8003af8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	699a      	ldr	r2, [r3, #24]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0202 	orr.w	r2, r2, #2
 8003b3a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a74      	ldr	r2, [pc, #464]	@ (8003d14 <HAL_FDCAN_Init+0x2ac>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d103      	bne.n	8003b4e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003b46:	4a74      	ldr	r2, [pc, #464]	@ (8003d18 <HAL_FDCAN_Init+0x2b0>)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	7c1b      	ldrb	r3, [r3, #16]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d108      	bne.n	8003b68 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	699a      	ldr	r2, [r3, #24]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b64:	619a      	str	r2, [r3, #24]
 8003b66:	e007      	b.n	8003b78 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	699a      	ldr	r2, [r3, #24]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b76:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	7c5b      	ldrb	r3, [r3, #17]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d108      	bne.n	8003b92 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699a      	ldr	r2, [r3, #24]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b8e:	619a      	str	r2, [r3, #24]
 8003b90:	e007      	b.n	8003ba2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	699a      	ldr	r2, [r3, #24]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003ba0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	7c9b      	ldrb	r3, [r3, #18]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d108      	bne.n	8003bbc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	699a      	ldr	r2, [r3, #24]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003bb8:	619a      	str	r2, [r3, #24]
 8003bba:	e007      	b.n	8003bcc <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	699a      	ldr	r2, [r3, #24]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003bca:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	699a      	ldr	r2, [r3, #24]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003bf0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	691a      	ldr	r2, [r3, #16]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0210 	bic.w	r2, r2, #16
 8003c00:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d108      	bne.n	8003c1c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	699a      	ldr	r2, [r3, #24]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f042 0204 	orr.w	r2, r2, #4
 8003c18:	619a      	str	r2, [r3, #24]
 8003c1a:	e02c      	b.n	8003c76 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d028      	beq.n	8003c76 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d01c      	beq.n	8003c66 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699a      	ldr	r2, [r3, #24]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003c3a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	691a      	ldr	r2, [r3, #16]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0210 	orr.w	r2, r2, #16
 8003c4a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d110      	bne.n	8003c76 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0220 	orr.w	r2, r2, #32
 8003c62:	619a      	str	r2, [r3, #24]
 8003c64:	e007      	b.n	8003c76 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	699a      	ldr	r2, [r3, #24]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f042 0220 	orr.w	r2, r2, #32
 8003c74:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c86:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003c8e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	3b01      	subs	r3, #1
 8003c98:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003c9e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003ca0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003caa:	d115      	bne.n	8003cd8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003cba:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003cc4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003cd4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003cd6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 fa74 	bl	80041dc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	4000a400 	.word	0x4000a400
 8003d18:	4000a500 	.word	0x4000a500

08003d1c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b087      	sub	sp, #28
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003d2c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003d2e:	7dfb      	ldrb	r3, [r7, #23]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d002      	beq.n	8003d3a <HAL_FDCAN_ConfigFilter+0x1e>
 8003d34:	7dfb      	ldrb	r3, [r7, #23]
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d13d      	bne.n	8003db6 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d119      	bne.n	8003d76 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003d4e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8003d56:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4413      	add	r3, r2
 8003d6c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	e01d      	b.n	8003db2 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	075a      	lsls	r2, r3, #29
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	079a      	lsls	r2, r3, #30
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	4413      	add	r3, r2
 8003d9e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	3304      	adds	r3, #4
 8003daa:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003db2:	2300      	movs	r3, #0
 8003db4:	e006      	b.n	8003dc4 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dba:	f043 0202 	orr.w	r2, r3, #2
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
  }
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	371c      	adds	r7, #28
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d110      	bne.n	8003e06 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	699a      	ldr	r2, [r3, #24]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 0201 	bic.w	r2, r2, #1
 8003dfa:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	e006      	b.n	8003e14 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e0a:	f043 0204 	orr.w	r2, r3, #4
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
  }
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d12c      	bne.n	8003e92 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003e40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d007      	beq.n	8003e58 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e4c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e023      	b.n	8003ea0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003e60:	0c1b      	lsrs	r3, r3, #16
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	68b9      	ldr	r1, [r7, #8]
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 fa16 	bl	80042a0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2101      	movs	r1, #1
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e80:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003e84:	2201      	movs	r2, #1
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	409a      	lsls	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	e006      	b.n	8003ea0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e96:	f043 0208 	orr.w	r2, r3, #8
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
  }
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3718      	adds	r7, #24
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08c      	sub	sp, #48	@ 0x30
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eb6:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8003eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003edc:	4013      	ands	r3, r2
 8003ede:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ee6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003eea:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003efe:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8003f02:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f0a:	6a3a      	ldr	r2, [r7, #32]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f16:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003f1a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f22:	69fa      	ldr	r2, [r7, #28]
 8003f24:	4013      	ands	r3, r2
 8003f26:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f2e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f36:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00b      	beq.n	8003f5a <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d006      	beq.n	8003f5a <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2240      	movs	r2, #64	@ 0x40
 8003f52:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f921 	bl	800419c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d019      	beq.n	8003f98 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d014      	beq.n	8003f98 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003f76:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	4013      	ands	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f8e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003f90:	6939      	ldr	r1, [r7, #16]
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f8e3 	bl	800415e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d007      	beq.n	8003fae <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fa4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003fa6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f8a2 	bl	80040f2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d007      	beq.n	8003fc4 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fba:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003fbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f8a2 	bl	8004108 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d007      	beq.n	8003fda <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003fd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f8a2 	bl	800411e <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00c      	beq.n	8003ffe <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d007      	beq.n	8003ffe <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ff6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f89b 	bl	8004134 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004004:	2b00      	cmp	r3, #0
 8004006:	d018      	beq.n	800403a <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800400e:	2b00      	cmp	r3, #0
 8004010:	d013      	beq.n	800403a <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800401a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	4013      	ands	r3, r2
 8004028:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2280      	movs	r2, #128	@ 0x80
 8004030:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004032:	68f9      	ldr	r1, [r7, #12]
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f887 	bl	8004148 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00c      	beq.n	800405e <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d007      	beq.n	800405e <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004056:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f88b 	bl	8004174 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00c      	beq.n	8004082 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d007      	beq.n	8004082 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800407a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 f883 	bl	8004188 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00f      	beq.n	80040ac <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800409e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040a4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d007      	beq.n	80040c2 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	69fa      	ldr	r2, [r7, #28]
 80040b8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80040ba:	69f9      	ldr	r1, [r7, #28]
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f881 	bl	80041c4 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d009      	beq.n	80040dc <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6a3a      	ldr	r2, [r7, #32]
 80040ce:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d002      	beq.n	80040ea <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f863 	bl	80041b0 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80040ea:	bf00      	nop
 80040ec:	3730      	adds	r7, #48	@ 0x30
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
 80040fa:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8004112:	bf00      	nop
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
 8004126:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
 8004166:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
	...

080041dc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80041e4:	4b2c      	ldr	r3, [pc, #176]	@ (8004298 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 80041e6:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a2b      	ldr	r2, [pc, #172]	@ (800429c <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d103      	bne.n	80041fa <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80041f8:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004208:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004210:	041a      	lsls	r2, r3, #16
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800422e:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004236:	061a      	lsls	r2, r3, #24
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	e005      	b.n	800427c <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	3304      	adds	r3, #4
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	429a      	cmp	r2, r3
 8004286:	d3f3      	bcc.n	8004270 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8004288:	bf00      	nop
 800428a:	bf00      	nop
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	4000ac00 	.word	0x4000ac00
 800429c:	4000a800 	.word	0x4000a800

080042a0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b089      	sub	sp, #36	@ 0x24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
 80042ac:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10a      	bne.n	80042cc <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80042be:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80042c6:	4313      	orrs	r3, r2
 80042c8:	61fb      	str	r3, [r7, #28]
 80042ca:	e00a      	b.n	80042e2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80042d4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80042da:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80042dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80042e0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80042ec:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80042f2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80042f8:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004300:	4313      	orrs	r3, r2
 8004302:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	4613      	mov	r3, r2
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	4413      	add	r3, r2
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	440b      	add	r3, r1
 8004314:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	69fa      	ldr	r2, [r7, #28]
 800431a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	3304      	adds	r3, #4
 8004320:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	3304      	adds	r3, #4
 800432c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800432e:	2300      	movs	r3, #0
 8004330:	617b      	str	r3, [r7, #20]
 8004332:	e020      	b.n	8004376 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	3303      	adds	r3, #3
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	4413      	add	r3, r2
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	3302      	adds	r3, #2
 8004344:	6879      	ldr	r1, [r7, #4]
 8004346:	440b      	add	r3, r1
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800434c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	3301      	adds	r3, #1
 8004352:	6879      	ldr	r1, [r7, #4]
 8004354:	440b      	add	r3, r1
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800435a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800435c:	6879      	ldr	r1, [r7, #4]
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	440a      	add	r2, r1
 8004362:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004364:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	3304      	adds	r3, #4
 800436e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	3304      	adds	r3, #4
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	4a06      	ldr	r2, [pc, #24]	@ (8004394 <FDCAN_CopyMessageToRAM+0xf4>)
 800437c:	5cd3      	ldrb	r3, [r2, r3]
 800437e:	461a      	mov	r2, r3
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	4293      	cmp	r3, r2
 8004384:	d3d6      	bcc.n	8004334 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8004386:	bf00      	nop
 8004388:	bf00      	nop
 800438a:	3724      	adds	r7, #36	@ 0x24
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	0800cdb4 	.word	0x0800cdb4

08004398 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004398:	b480      	push	{r7}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80043a6:	e136      	b.n	8004616 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	2101      	movs	r1, #1
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	fa01 f303 	lsl.w	r3, r1, r3
 80043b4:	4013      	ands	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 8128 	beq.w	8004610 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d003      	beq.n	80043d0 <HAL_GPIO_Init+0x38>
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2b12      	cmp	r3, #18
 80043ce:	d125      	bne.n	800441c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	08da      	lsrs	r2, r3, #3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3208      	adds	r2, #8
 80043d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043dc:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	220f      	movs	r2, #15
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	43db      	mvns	r3, r3
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	4013      	ands	r3, r2
 80043f2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	f003 020f 	and.w	r2, r3, #15
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f003 0307 	and.w	r3, r3, #7
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	4313      	orrs	r3, r2
 800440c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	08da      	lsrs	r2, r3, #3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	3208      	adds	r2, #8
 8004416:	6979      	ldr	r1, [r7, #20]
 8004418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	2203      	movs	r2, #3
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	43db      	mvns	r3, r3
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	4013      	ands	r3, r2
 8004432:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f003 0203 	and.w	r2, r3, #3
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	fa02 f303 	lsl.w	r3, r2, r3
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	4313      	orrs	r3, r2
 8004448:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d00b      	beq.n	8004470 <HAL_GPIO_Init+0xd8>
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b02      	cmp	r3, #2
 800445e:	d007      	beq.n	8004470 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004464:	2b11      	cmp	r3, #17
 8004466:	d003      	beq.n	8004470 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2b12      	cmp	r3, #18
 800446e:	d130      	bne.n	80044d2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	2203      	movs	r2, #3
 800447c:	fa02 f303 	lsl.w	r3, r2, r3
 8004480:	43db      	mvns	r3, r3
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	4013      	ands	r3, r2
 8004486:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	68da      	ldr	r2, [r3, #12]
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	4313      	orrs	r3, r2
 8004498:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044a6:	2201      	movs	r2, #1
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	fa02 f303 	lsl.w	r3, r2, r3
 80044ae:	43db      	mvns	r3, r3
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	4013      	ands	r3, r2
 80044b4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	091b      	lsrs	r3, r3, #4
 80044bc:	f003 0201 	and.w	r2, r3, #1
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	fa02 f303 	lsl.w	r3, r2, r3
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2b03      	cmp	r3, #3
 80044d8:	d017      	beq.n	800450a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	2203      	movs	r2, #3
 80044e6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ea:	43db      	mvns	r3, r3
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	4013      	ands	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	689a      	ldr	r2, [r3, #8]
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	fa02 f303 	lsl.w	r3, r2, r3
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	4313      	orrs	r3, r2
 8004502:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d07c      	beq.n	8004610 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004516:	4a47      	ldr	r2, [pc, #284]	@ (8004634 <HAL_GPIO_Init+0x29c>)
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	089b      	lsrs	r3, r3, #2
 800451c:	3318      	adds	r3, #24
 800451e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004522:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f003 0303 	and.w	r3, r3, #3
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	220f      	movs	r2, #15
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	43db      	mvns	r3, r3
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	4013      	ands	r3, r2
 8004538:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	0a9a      	lsrs	r2, r3, #10
 800453e:	4b3e      	ldr	r3, [pc, #248]	@ (8004638 <HAL_GPIO_Init+0x2a0>)
 8004540:	4013      	ands	r3, r2
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	f002 0203 	and.w	r2, r2, #3
 8004548:	00d2      	lsls	r2, r2, #3
 800454a:	4093      	lsls	r3, r2
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	4313      	orrs	r3, r2
 8004550:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004552:	4938      	ldr	r1, [pc, #224]	@ (8004634 <HAL_GPIO_Init+0x29c>)
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	089b      	lsrs	r3, r3, #2
 8004558:	3318      	adds	r3, #24
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004560:	4b34      	ldr	r3, [pc, #208]	@ (8004634 <HAL_GPIO_Init+0x29c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	43db      	mvns	r3, r3
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	4013      	ands	r3, r2
 800456e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	4313      	orrs	r3, r2
 8004582:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8004584:	4a2b      	ldr	r2, [pc, #172]	@ (8004634 <HAL_GPIO_Init+0x29c>)
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800458a:	4b2a      	ldr	r3, [pc, #168]	@ (8004634 <HAL_GPIO_Init+0x29c>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	43db      	mvns	r3, r3
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	4013      	ands	r3, r2
 8004598:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80045ae:	4a21      	ldr	r2, [pc, #132]	@ (8004634 <HAL_GPIO_Init+0x29c>)
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80045b4:	4b1f      	ldr	r3, [pc, #124]	@ (8004634 <HAL_GPIO_Init+0x29c>)
 80045b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045ba:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	43db      	mvns	r3, r3
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	4013      	ands	r3, r2
 80045c4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80045da:	4a16      	ldr	r2, [pc, #88]	@ (8004634 <HAL_GPIO_Init+0x29c>)
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80045e2:	4b14      	ldr	r3, [pc, #80]	@ (8004634 <HAL_GPIO_Init+0x29c>)
 80045e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045e8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	43db      	mvns	r3, r3
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	4013      	ands	r3, r2
 80045f2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4313      	orrs	r3, r2
 8004606:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8004608:	4a0a      	ldr	r2, [pc, #40]	@ (8004634 <HAL_GPIO_Init+0x29c>)
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	3301      	adds	r3, #1
 8004614:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	fa22 f303 	lsr.w	r3, r2, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	f47f aec1 	bne.w	80043a8 <HAL_GPIO_Init+0x10>
  }
}
 8004626:	bf00      	nop
 8004628:	bf00      	nop
 800462a:	371c      	adds	r7, #28
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	44022000 	.word	0x44022000
 8004638:	002f7f7f 	.word	0x002f7f7f

0800463c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	460b      	mov	r3, r1
 8004646:	807b      	strh	r3, [r7, #2]
 8004648:	4613      	mov	r3, r2
 800464a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800464c:	787b      	ldrb	r3, [r7, #1]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004652:	887a      	ldrh	r2, [r7, #2]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004658:	e002      	b.n	8004660 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800465a:	887a      	ldrh	r2, [r7, #2]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	460b      	mov	r3, r1
 8004676:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800467e:	887a      	ldrh	r2, [r7, #2]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4013      	ands	r3, r2
 8004684:	041a      	lsls	r2, r3, #16
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	43d9      	mvns	r1, r3
 800468a:	887b      	ldrh	r3, [r7, #2]
 800468c:	400b      	ands	r3, r1
 800468e:	431a      	orrs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	619a      	str	r2, [r3, #24]
}
 8004694:	bf00      	nop
 8004696:	3714      	adds	r7, #20
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046a8:	2300      	movs	r3, #0
 80046aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80046ac:	4b0b      	ldr	r3, [pc, #44]	@ (80046dc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d002      	beq.n	80046be <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	73fb      	strb	r3, [r7, #15]
 80046bc:	e007      	b.n	80046ce <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80046be:	4b07      	ldr	r3, [pc, #28]	@ (80046dc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f023 0204 	bic.w	r2, r3, #4
 80046c6:	4905      	ldr	r1, [pc, #20]	@ (80046dc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	600b      	str	r3, [r1, #0]
  }

  return status;
 80046ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3714      	adds	r7, #20
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	40030400 	.word	0x40030400

080046e0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80046e4:	4b05      	ldr	r3, [pc, #20]	@ (80046fc <HAL_ICACHE_Enable+0x1c>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a04      	ldr	r2, [pc, #16]	@ (80046fc <HAL_ICACHE_Enable+0x1c>)
 80046ea:	f043 0301 	orr.w	r3, r3, #1
 80046ee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	40030400 	.word	0x40030400

08004700 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b088      	sub	sp, #32
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d102      	bne.n	8004714 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	f000 bc28 	b.w	8004f64 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004714:	4b94      	ldr	r3, [pc, #592]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 8004716:	69db      	ldr	r3, [r3, #28]
 8004718:	f003 0318 	and.w	r3, r3, #24
 800471c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800471e:	4b92      	ldr	r3, [pc, #584]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 8004720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004722:	f003 0303 	and.w	r3, r3, #3
 8004726:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0310 	and.w	r3, r3, #16
 8004730:	2b00      	cmp	r3, #0
 8004732:	d05b      	beq.n	80047ec <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	2b08      	cmp	r3, #8
 8004738:	d005      	beq.n	8004746 <HAL_RCC_OscConfig+0x46>
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	2b18      	cmp	r3, #24
 800473e:	d114      	bne.n	800476a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	2b02      	cmp	r3, #2
 8004744:	d111      	bne.n	800476a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d102      	bne.n	8004754 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	f000 bc08 	b.w	8004f64 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8004754:	4b84      	ldr	r3, [pc, #528]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	041b      	lsls	r3, r3, #16
 8004762:	4981      	ldr	r1, [pc, #516]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 8004764:	4313      	orrs	r3, r2
 8004766:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8004768:	e040      	b.n	80047ec <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d023      	beq.n	80047ba <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004772:	4b7d      	ldr	r3, [pc, #500]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a7c      	ldr	r2, [pc, #496]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 8004778:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800477c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800477e:	f7fe f877 	bl	8002870 <HAL_GetTick>
 8004782:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004784:	e008      	b.n	8004798 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8004786:	f7fe f873 	bl	8002870 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e3e5      	b.n	8004f64 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004798:	4b73      	ldr	r3, [pc, #460]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0f0      	beq.n	8004786 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80047a4:	4b70      	ldr	r3, [pc, #448]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	041b      	lsls	r3, r3, #16
 80047b2:	496d      	ldr	r1, [pc, #436]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	618b      	str	r3, [r1, #24]
 80047b8:	e018      	b.n	80047ec <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80047ba:	4b6b      	ldr	r3, [pc, #428]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a6a      	ldr	r2, [pc, #424]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 80047c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c6:	f7fe f853 	bl	8002870 <HAL_GetTick>
 80047ca:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80047cc:	e008      	b.n	80047e0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80047ce:	f7fe f84f 	bl	8002870 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e3c1      	b.n	8004f64 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80047e0:	4b61      	ldr	r3, [pc, #388]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1f0      	bne.n	80047ce <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 80a0 	beq.w	800493a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	2b10      	cmp	r3, #16
 80047fe:	d005      	beq.n	800480c <HAL_RCC_OscConfig+0x10c>
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	2b18      	cmp	r3, #24
 8004804:	d109      	bne.n	800481a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	2b03      	cmp	r3, #3
 800480a:	d106      	bne.n	800481a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	f040 8092 	bne.w	800493a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e3a4      	b.n	8004f64 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004822:	d106      	bne.n	8004832 <HAL_RCC_OscConfig+0x132>
 8004824:	4b50      	ldr	r3, [pc, #320]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a4f      	ldr	r2, [pc, #316]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 800482a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800482e:	6013      	str	r3, [r2, #0]
 8004830:	e058      	b.n	80048e4 <HAL_RCC_OscConfig+0x1e4>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d112      	bne.n	8004860 <HAL_RCC_OscConfig+0x160>
 800483a:	4b4b      	ldr	r3, [pc, #300]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a4a      	ldr	r2, [pc, #296]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 8004840:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004844:	6013      	str	r3, [r2, #0]
 8004846:	4b48      	ldr	r3, [pc, #288]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a47      	ldr	r2, [pc, #284]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 800484c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004850:	6013      	str	r3, [r2, #0]
 8004852:	4b45      	ldr	r3, [pc, #276]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a44      	ldr	r2, [pc, #272]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 8004858:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	e041      	b.n	80048e4 <HAL_RCC_OscConfig+0x1e4>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004868:	d112      	bne.n	8004890 <HAL_RCC_OscConfig+0x190>
 800486a:	4b3f      	ldr	r3, [pc, #252]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a3e      	ldr	r2, [pc, #248]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 8004870:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004874:	6013      	str	r3, [r2, #0]
 8004876:	4b3c      	ldr	r3, [pc, #240]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a3b      	ldr	r2, [pc, #236]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 800487c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004880:	6013      	str	r3, [r2, #0]
 8004882:	4b39      	ldr	r3, [pc, #228]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a38      	ldr	r2, [pc, #224]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 8004888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	e029      	b.n	80048e4 <HAL_RCC_OscConfig+0x1e4>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004898:	d112      	bne.n	80048c0 <HAL_RCC_OscConfig+0x1c0>
 800489a:	4b33      	ldr	r3, [pc, #204]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a32      	ldr	r2, [pc, #200]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 80048a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048a4:	6013      	str	r3, [r2, #0]
 80048a6:	4b30      	ldr	r3, [pc, #192]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a2f      	ldr	r2, [pc, #188]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 80048ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	4b2d      	ldr	r3, [pc, #180]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a2c      	ldr	r2, [pc, #176]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 80048b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048bc:	6013      	str	r3, [r2, #0]
 80048be:	e011      	b.n	80048e4 <HAL_RCC_OscConfig+0x1e4>
 80048c0:	4b29      	ldr	r3, [pc, #164]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a28      	ldr	r2, [pc, #160]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 80048c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048ca:	6013      	str	r3, [r2, #0]
 80048cc:	4b26      	ldr	r3, [pc, #152]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a25      	ldr	r2, [pc, #148]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 80048d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048d6:	6013      	str	r3, [r2, #0]
 80048d8:	4b23      	ldr	r3, [pc, #140]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a22      	ldr	r2, [pc, #136]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 80048de:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80048e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d013      	beq.n	8004914 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ec:	f7fd ffc0 	bl	8002870 <HAL_GetTick>
 80048f0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80048f4:	f7fd ffbc 	bl	8002870 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b64      	cmp	r3, #100	@ 0x64
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e32e      	b.n	8004f64 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004906:	4b18      	ldr	r3, [pc, #96]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0f0      	beq.n	80048f4 <HAL_RCC_OscConfig+0x1f4>
 8004912:	e012      	b.n	800493a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004914:	f7fd ffac 	bl	8002870 <HAL_GetTick>
 8004918:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800491a:	e008      	b.n	800492e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800491c:	f7fd ffa8 	bl	8002870 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b64      	cmp	r3, #100	@ 0x64
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e31a      	b.n	8004f64 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800492e:	4b0e      	ldr	r3, [pc, #56]	@ (8004968 <HAL_RCC_OscConfig+0x268>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1f0      	bne.n	800491c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 809a 	beq.w	8004a7c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d005      	beq.n	800495a <HAL_RCC_OscConfig+0x25a>
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	2b18      	cmp	r3, #24
 8004952:	d149      	bne.n	80049e8 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d146      	bne.n	80049e8 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d104      	bne.n	800496c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e2fe      	b.n	8004f64 <HAL_RCC_OscConfig+0x864>
 8004966:	bf00      	nop
 8004968:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d11c      	bne.n	80049ac <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8004972:	4b9a      	ldr	r3, [pc, #616]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0218 	and.w	r2, r3, #24
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	429a      	cmp	r2, r3
 8004980:	d014      	beq.n	80049ac <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004982:	4b96      	ldr	r3, [pc, #600]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f023 0218 	bic.w	r2, r3, #24
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	4993      	ldr	r1, [pc, #588]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 8004990:	4313      	orrs	r3, r2
 8004992:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8004994:	f000 fdd0 	bl	8005538 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004998:	4b91      	ldr	r3, [pc, #580]	@ (8004be0 <HAL_RCC_OscConfig+0x4e0>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4618      	mov	r0, r3
 800499e:	f7fd fedd 	bl	800275c <HAL_InitTick>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e2db      	b.n	8004f64 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ac:	f7fd ff60 	bl	8002870 <HAL_GetTick>
 80049b0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80049b4:	f7fd ff5c 	bl	8002870 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e2ce      	b.n	8004f64 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049c6:	4b85      	ldr	r3, [pc, #532]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0f0      	beq.n	80049b4 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80049d2:	4b82      	ldr	r3, [pc, #520]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	041b      	lsls	r3, r3, #16
 80049e0:	497e      	ldr	r1, [pc, #504]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80049e6:	e049      	b.n	8004a7c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d02c      	beq.n	8004a4a <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80049f0:	4b7a      	ldr	r3, [pc, #488]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f023 0218 	bic.w	r2, r3, #24
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	4977      	ldr	r1, [pc, #476]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8004a02:	4b76      	ldr	r3, [pc, #472]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a75      	ldr	r2, [pc, #468]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 8004a08:	f043 0301 	orr.w	r3, r3, #1
 8004a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0e:	f7fd ff2f 	bl	8002870 <HAL_GetTick>
 8004a12:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a14:	e008      	b.n	8004a28 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004a16:	f7fd ff2b 	bl	8002870 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d901      	bls.n	8004a28 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e29d      	b.n	8004f64 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a28:	4b6c      	ldr	r3, [pc, #432]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0f0      	beq.n	8004a16 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004a34:	4b69      	ldr	r3, [pc, #420]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	041b      	lsls	r3, r3, #16
 8004a42:	4966      	ldr	r1, [pc, #408]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	610b      	str	r3, [r1, #16]
 8004a48:	e018      	b.n	8004a7c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a4a:	4b64      	ldr	r3, [pc, #400]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a63      	ldr	r2, [pc, #396]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 8004a50:	f023 0301 	bic.w	r3, r3, #1
 8004a54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a56:	f7fd ff0b 	bl	8002870 <HAL_GetTick>
 8004a5a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a5c:	e008      	b.n	8004a70 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004a5e:	f7fd ff07 	bl	8002870 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e279      	b.n	8004f64 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a70:	4b5a      	ldr	r3, [pc, #360]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1f0      	bne.n	8004a5e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0308 	and.w	r3, r3, #8
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d03c      	beq.n	8004b02 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d01c      	beq.n	8004aca <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a90:	4b52      	ldr	r3, [pc, #328]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 8004a92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a96:	4a51      	ldr	r2, [pc, #324]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 8004a98:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a9c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa0:	f7fd fee6 	bl	8002870 <HAL_GetTick>
 8004aa4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004aa8:	f7fd fee2 	bl	8002870 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e254      	b.n	8004f64 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004aba:	4b48      	ldr	r3, [pc, #288]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 8004abc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ac0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d0ef      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x3a8>
 8004ac8:	e01b      	b.n	8004b02 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aca:	4b44      	ldr	r3, [pc, #272]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 8004acc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ad0:	4a42      	ldr	r2, [pc, #264]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 8004ad2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ad6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ada:	f7fd fec9 	bl	8002870 <HAL_GetTick>
 8004ade:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004ae0:	e008      	b.n	8004af4 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004ae2:	f7fd fec5 	bl	8002870 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d901      	bls.n	8004af4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e237      	b.n	8004f64 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004af4:	4b39      	ldr	r3, [pc, #228]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 8004af6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004afa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1ef      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0304 	and.w	r3, r3, #4
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f000 80d2 	beq.w	8004cb4 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004b10:	4b34      	ldr	r3, [pc, #208]	@ (8004be4 <HAL_RCC_OscConfig+0x4e4>)
 8004b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d118      	bne.n	8004b4e <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004b1c:	4b31      	ldr	r3, [pc, #196]	@ (8004be4 <HAL_RCC_OscConfig+0x4e4>)
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b20:	4a30      	ldr	r2, [pc, #192]	@ (8004be4 <HAL_RCC_OscConfig+0x4e4>)
 8004b22:	f043 0301 	orr.w	r3, r3, #1
 8004b26:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b28:	f7fd fea2 	bl	8002870 <HAL_GetTick>
 8004b2c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b30:	f7fd fe9e 	bl	8002870 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e210      	b.n	8004f64 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004b42:	4b28      	ldr	r3, [pc, #160]	@ (8004be4 <HAL_RCC_OscConfig+0x4e4>)
 8004b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d0f0      	beq.n	8004b30 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d108      	bne.n	8004b68 <HAL_RCC_OscConfig+0x468>
 8004b56:	4b21      	ldr	r3, [pc, #132]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 8004b58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b5c:	4a1f      	ldr	r2, [pc, #124]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 8004b5e:	f043 0301 	orr.w	r3, r3, #1
 8004b62:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004b66:	e074      	b.n	8004c52 <HAL_RCC_OscConfig+0x552>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d118      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x4a2>
 8004b70:	4b1a      	ldr	r3, [pc, #104]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 8004b72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b76:	4a19      	ldr	r2, [pc, #100]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 8004b78:	f023 0301 	bic.w	r3, r3, #1
 8004b7c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004b80:	4b16      	ldr	r3, [pc, #88]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 8004b82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b86:	4a15      	ldr	r2, [pc, #84]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 8004b88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b8c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004b90:	4b12      	ldr	r3, [pc, #72]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 8004b92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b96:	4a11      	ldr	r2, [pc, #68]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 8004b98:	f023 0304 	bic.w	r3, r3, #4
 8004b9c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004ba0:	e057      	b.n	8004c52 <HAL_RCC_OscConfig+0x552>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	2b05      	cmp	r3, #5
 8004ba8:	d11e      	bne.n	8004be8 <HAL_RCC_OscConfig+0x4e8>
 8004baa:	4b0c      	ldr	r3, [pc, #48]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 8004bac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 8004bb2:	f043 0304 	orr.w	r3, r3, #4
 8004bb6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004bba:	4b08      	ldr	r3, [pc, #32]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 8004bbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bc0:	4a06      	ldr	r2, [pc, #24]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 8004bc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004bca:	4b04      	ldr	r3, [pc, #16]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 8004bcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bd0:	4a02      	ldr	r2, [pc, #8]	@ (8004bdc <HAL_RCC_OscConfig+0x4dc>)
 8004bd2:	f043 0301 	orr.w	r3, r3, #1
 8004bd6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004bda:	e03a      	b.n	8004c52 <HAL_RCC_OscConfig+0x552>
 8004bdc:	44020c00 	.word	0x44020c00
 8004be0:	20000088 	.word	0x20000088
 8004be4:	44020800 	.word	0x44020800
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	2b85      	cmp	r3, #133	@ 0x85
 8004bee:	d118      	bne.n	8004c22 <HAL_RCC_OscConfig+0x522>
 8004bf0:	4ba2      	ldr	r3, [pc, #648]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004bf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bf6:	4aa1      	ldr	r2, [pc, #644]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004bf8:	f043 0304 	orr.w	r3, r3, #4
 8004bfc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004c00:	4b9e      	ldr	r3, [pc, #632]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004c02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c06:	4a9d      	ldr	r2, [pc, #628]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004c08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c0c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004c10:	4b9a      	ldr	r3, [pc, #616]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004c12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c16:	4a99      	ldr	r2, [pc, #612]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004c18:	f043 0301 	orr.w	r3, r3, #1
 8004c1c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004c20:	e017      	b.n	8004c52 <HAL_RCC_OscConfig+0x552>
 8004c22:	4b96      	ldr	r3, [pc, #600]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004c24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c28:	4a94      	ldr	r2, [pc, #592]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004c2a:	f023 0301 	bic.w	r3, r3, #1
 8004c2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004c32:	4b92      	ldr	r3, [pc, #584]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004c34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c38:	4a90      	ldr	r2, [pc, #576]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004c3a:	f023 0304 	bic.w	r3, r3, #4
 8004c3e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004c42:	4b8e      	ldr	r3, [pc, #568]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004c44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c48:	4a8c      	ldr	r2, [pc, #560]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004c4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c4e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d016      	beq.n	8004c88 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c5a:	f7fd fe09 	bl	8002870 <HAL_GetTick>
 8004c5e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c60:	e00a      	b.n	8004c78 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c62:	f7fd fe05 	bl	8002870 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e175      	b.n	8004f64 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c78:	4b80      	ldr	r3, [pc, #512]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004c7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d0ed      	beq.n	8004c62 <HAL_RCC_OscConfig+0x562>
 8004c86:	e015      	b.n	8004cb4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c88:	f7fd fdf2 	bl	8002870 <HAL_GetTick>
 8004c8c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c8e:	e00a      	b.n	8004ca6 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c90:	f7fd fdee 	bl	8002870 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e15e      	b.n	8004f64 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ca6:	4b75      	ldr	r3, [pc, #468]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004ca8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1ed      	bne.n	8004c90 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0320 	and.w	r3, r3, #32
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d036      	beq.n	8004d2e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d019      	beq.n	8004cfc <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004cc8:	4b6c      	ldr	r3, [pc, #432]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a6b      	ldr	r2, [pc, #428]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004cce:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004cd2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd4:	f7fd fdcc 	bl	8002870 <HAL_GetTick>
 8004cd8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004cdc:	f7fd fdc8 	bl	8002870 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e13a      	b.n	8004f64 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004cee:	4b63      	ldr	r3, [pc, #396]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0f0      	beq.n	8004cdc <HAL_RCC_OscConfig+0x5dc>
 8004cfa:	e018      	b.n	8004d2e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004cfc:	4b5f      	ldr	r3, [pc, #380]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a5e      	ldr	r2, [pc, #376]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004d02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d08:	f7fd fdb2 	bl	8002870 <HAL_GetTick>
 8004d0c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004d10:	f7fd fdae 	bl	8002870 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e120      	b.n	8004f64 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004d22:	4b56      	ldr	r3, [pc, #344]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1f0      	bne.n	8004d10 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 8115 	beq.w	8004f62 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	2b18      	cmp	r3, #24
 8004d3c:	f000 80af 	beq.w	8004e9e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	f040 8086 	bne.w	8004e56 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004d4a:	4b4c      	ldr	r3, [pc, #304]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a4b      	ldr	r2, [pc, #300]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004d50:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d56:	f7fd fd8b 	bl	8002870 <HAL_GetTick>
 8004d5a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004d5c:	e008      	b.n	8004d70 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004d5e:	f7fd fd87 	bl	8002870 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e0f9      	b.n	8004f64 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004d70:	4b42      	ldr	r3, [pc, #264]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1f0      	bne.n	8004d5e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8004d7c:	4b3f      	ldr	r3, [pc, #252]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d80:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004d84:	f023 0303 	bic.w	r3, r3, #3
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004d90:	0212      	lsls	r2, r2, #8
 8004d92:	430a      	orrs	r2, r1
 8004d94:	4939      	ldr	r1, [pc, #228]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da8:	3b01      	subs	r3, #1
 8004daa:	025b      	lsls	r3, r3, #9
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004db4:	3b01      	subs	r3, #1
 8004db6:	041b      	lsls	r3, r3, #16
 8004db8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	061b      	lsls	r3, r3, #24
 8004dc6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004dca:	492c      	ldr	r1, [pc, #176]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004dd0:	4b2a      	ldr	r3, [pc, #168]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd4:	4a29      	ldr	r2, [pc, #164]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004dd6:	f023 0310 	bic.w	r3, r3, #16
 8004dda:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004de0:	4a26      	ldr	r2, [pc, #152]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004de2:	00db      	lsls	r3, r3, #3
 8004de4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004de6:	4b25      	ldr	r3, [pc, #148]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dea:	4a24      	ldr	r2, [pc, #144]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004dec:	f043 0310 	orr.w	r3, r3, #16
 8004df0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8004df2:	4b22      	ldr	r3, [pc, #136]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df6:	f023 020c 	bic.w	r2, r3, #12
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dfe:	491f      	ldr	r1, [pc, #124]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8004e04:	4b1d      	ldr	r3, [pc, #116]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e08:	f023 0220 	bic.w	r2, r3, #32
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e10:	491a      	ldr	r1, [pc, #104]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004e16:	4b19      	ldr	r3, [pc, #100]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e1a:	4a18      	ldr	r2, [pc, #96]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004e1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e20:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8004e22:	4b16      	ldr	r3, [pc, #88]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a15      	ldr	r2, [pc, #84]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004e28:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2e:	f7fd fd1f 	bl	8002870 <HAL_GetTick>
 8004e32:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004e34:	e008      	b.n	8004e48 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004e36:	f7fd fd1b 	bl	8002870 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e08d      	b.n	8004f64 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004e48:	4b0c      	ldr	r3, [pc, #48]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0f0      	beq.n	8004e36 <HAL_RCC_OscConfig+0x736>
 8004e54:	e085      	b.n	8004f62 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004e56:	4b09      	ldr	r3, [pc, #36]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a08      	ldr	r2, [pc, #32]	@ (8004e7c <HAL_RCC_OscConfig+0x77c>)
 8004e5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e62:	f7fd fd05 	bl	8002870 <HAL_GetTick>
 8004e66:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004e68:	e00a      	b.n	8004e80 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004e6a:	f7fd fd01 	bl	8002870 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d903      	bls.n	8004e80 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e073      	b.n	8004f64 <HAL_RCC_OscConfig+0x864>
 8004e7c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004e80:	4b3a      	ldr	r3, [pc, #232]	@ (8004f6c <HAL_RCC_OscConfig+0x86c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1ee      	bne.n	8004e6a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004e8c:	4b37      	ldr	r3, [pc, #220]	@ (8004f6c <HAL_RCC_OscConfig+0x86c>)
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e90:	4a36      	ldr	r2, [pc, #216]	@ (8004f6c <HAL_RCC_OscConfig+0x86c>)
 8004e92:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004e96:	f023 0303 	bic.w	r3, r3, #3
 8004e9a:	6293      	str	r3, [r2, #40]	@ 0x28
 8004e9c:	e061      	b.n	8004f62 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004e9e:	4b33      	ldr	r3, [pc, #204]	@ (8004f6c <HAL_RCC_OscConfig+0x86c>)
 8004ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004ea4:	4b31      	ldr	r3, [pc, #196]	@ (8004f6c <HAL_RCC_OscConfig+0x86c>)
 8004ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ea8:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d031      	beq.n	8004f16 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f003 0203 	and.w	r2, r3, #3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d12a      	bne.n	8004f16 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	0a1b      	lsrs	r3, r3, #8
 8004ec4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d122      	bne.n	8004f16 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eda:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d11a      	bne.n	8004f16 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	0a5b      	lsrs	r3, r3, #9
 8004ee4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eec:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d111      	bne.n	8004f16 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	0c1b      	lsrs	r3, r3, #16
 8004ef6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004efe:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d108      	bne.n	8004f16 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	0e1b      	lsrs	r3, r3, #24
 8004f08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f10:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d001      	beq.n	8004f1a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e024      	b.n	8004f64 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004f1a:	4b14      	ldr	r3, [pc, #80]	@ (8004f6c <HAL_RCC_OscConfig+0x86c>)
 8004f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f1e:	08db      	lsrs	r3, r3, #3
 8004f20:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d01a      	beq.n	8004f62 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f6c <HAL_RCC_OscConfig+0x86c>)
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f30:	4a0e      	ldr	r2, [pc, #56]	@ (8004f6c <HAL_RCC_OscConfig+0x86c>)
 8004f32:	f023 0310 	bic.w	r3, r3, #16
 8004f36:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f38:	f7fd fc9a 	bl	8002870 <HAL_GetTick>
 8004f3c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8004f3e:	bf00      	nop
 8004f40:	f7fd fc96 	bl	8002870 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d0f9      	beq.n	8004f40 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f50:	4a06      	ldr	r2, [pc, #24]	@ (8004f6c <HAL_RCC_OscConfig+0x86c>)
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004f56:	4b05      	ldr	r3, [pc, #20]	@ (8004f6c <HAL_RCC_OscConfig+0x86c>)
 8004f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f5a:	4a04      	ldr	r2, [pc, #16]	@ (8004f6c <HAL_RCC_OscConfig+0x86c>)
 8004f5c:	f043 0310 	orr.w	r3, r3, #16
 8004f60:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3720      	adds	r7, #32
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	44020c00 	.word	0x44020c00

08004f70 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d101      	bne.n	8004f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e19e      	b.n	80052c2 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f84:	4b83      	ldr	r3, [pc, #524]	@ (8005194 <HAL_RCC_ClockConfig+0x224>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 030f 	and.w	r3, r3, #15
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d910      	bls.n	8004fb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f92:	4b80      	ldr	r3, [pc, #512]	@ (8005194 <HAL_RCC_ClockConfig+0x224>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f023 020f 	bic.w	r2, r3, #15
 8004f9a:	497e      	ldr	r1, [pc, #504]	@ (8005194 <HAL_RCC_ClockConfig+0x224>)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fa2:	4b7c      	ldr	r3, [pc, #496]	@ (8005194 <HAL_RCC_ClockConfig+0x224>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 030f 	and.w	r3, r3, #15
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d001      	beq.n	8004fb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e186      	b.n	80052c2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0310 	and.w	r3, r3, #16
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d012      	beq.n	8004fe6 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	695a      	ldr	r2, [r3, #20]
 8004fc4:	4b74      	ldr	r3, [pc, #464]	@ (8005198 <HAL_RCC_ClockConfig+0x228>)
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	0a1b      	lsrs	r3, r3, #8
 8004fca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d909      	bls.n	8004fe6 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004fd2:	4b71      	ldr	r3, [pc, #452]	@ (8005198 <HAL_RCC_ClockConfig+0x228>)
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	021b      	lsls	r3, r3, #8
 8004fe0:	496d      	ldr	r1, [pc, #436]	@ (8005198 <HAL_RCC_ClockConfig+0x228>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0308 	and.w	r3, r3, #8
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d012      	beq.n	8005018 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691a      	ldr	r2, [r3, #16]
 8004ff6:	4b68      	ldr	r3, [pc, #416]	@ (8005198 <HAL_RCC_ClockConfig+0x228>)
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	091b      	lsrs	r3, r3, #4
 8004ffc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005000:	429a      	cmp	r2, r3
 8005002:	d909      	bls.n	8005018 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8005004:	4b64      	ldr	r3, [pc, #400]	@ (8005198 <HAL_RCC_ClockConfig+0x228>)
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	011b      	lsls	r3, r3, #4
 8005012:	4961      	ldr	r1, [pc, #388]	@ (8005198 <HAL_RCC_ClockConfig+0x228>)
 8005014:	4313      	orrs	r3, r2
 8005016:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0304 	and.w	r3, r3, #4
 8005020:	2b00      	cmp	r3, #0
 8005022:	d010      	beq.n	8005046 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68da      	ldr	r2, [r3, #12]
 8005028:	4b5b      	ldr	r3, [pc, #364]	@ (8005198 <HAL_RCC_ClockConfig+0x228>)
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005030:	429a      	cmp	r2, r3
 8005032:	d908      	bls.n	8005046 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8005034:	4b58      	ldr	r3, [pc, #352]	@ (8005198 <HAL_RCC_ClockConfig+0x228>)
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	4955      	ldr	r1, [pc, #340]	@ (8005198 <HAL_RCC_ClockConfig+0x228>)
 8005042:	4313      	orrs	r3, r2
 8005044:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d010      	beq.n	8005074 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689a      	ldr	r2, [r3, #8]
 8005056:	4b50      	ldr	r3, [pc, #320]	@ (8005198 <HAL_RCC_ClockConfig+0x228>)
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	f003 030f 	and.w	r3, r3, #15
 800505e:	429a      	cmp	r2, r3
 8005060:	d908      	bls.n	8005074 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8005062:	4b4d      	ldr	r3, [pc, #308]	@ (8005198 <HAL_RCC_ClockConfig+0x228>)
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	f023 020f 	bic.w	r2, r3, #15
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	494a      	ldr	r1, [pc, #296]	@ (8005198 <HAL_RCC_ClockConfig+0x228>)
 8005070:	4313      	orrs	r3, r2
 8005072:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 8093 	beq.w	80051a8 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	2b03      	cmp	r3, #3
 8005088:	d107      	bne.n	800509a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800508a:	4b43      	ldr	r3, [pc, #268]	@ (8005198 <HAL_RCC_ClockConfig+0x228>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d121      	bne.n	80050da <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e113      	b.n	80052c2 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d107      	bne.n	80050b2 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050a2:	4b3d      	ldr	r3, [pc, #244]	@ (8005198 <HAL_RCC_ClockConfig+0x228>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d115      	bne.n	80050da <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e107      	b.n	80052c2 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d107      	bne.n	80050ca <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80050ba:	4b37      	ldr	r3, [pc, #220]	@ (8005198 <HAL_RCC_ClockConfig+0x228>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d109      	bne.n	80050da <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e0fb      	b.n	80052c2 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050ca:	4b33      	ldr	r3, [pc, #204]	@ (8005198 <HAL_RCC_ClockConfig+0x228>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e0f3      	b.n	80052c2 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80050da:	4b2f      	ldr	r3, [pc, #188]	@ (8005198 <HAL_RCC_ClockConfig+0x228>)
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	f023 0203 	bic.w	r2, r3, #3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	492c      	ldr	r1, [pc, #176]	@ (8005198 <HAL_RCC_ClockConfig+0x228>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ec:	f7fd fbc0 	bl	8002870 <HAL_GetTick>
 80050f0:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	2b03      	cmp	r3, #3
 80050f8:	d112      	bne.n	8005120 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050fa:	e00a      	b.n	8005112 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80050fc:	f7fd fbb8 	bl	8002870 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800510a:	4293      	cmp	r3, r2
 800510c:	d901      	bls.n	8005112 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e0d7      	b.n	80052c2 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005112:	4b21      	ldr	r3, [pc, #132]	@ (8005198 <HAL_RCC_ClockConfig+0x228>)
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	f003 0318 	and.w	r3, r3, #24
 800511a:	2b18      	cmp	r3, #24
 800511c:	d1ee      	bne.n	80050fc <HAL_RCC_ClockConfig+0x18c>
 800511e:	e043      	b.n	80051a8 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b02      	cmp	r3, #2
 8005126:	d112      	bne.n	800514e <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005128:	e00a      	b.n	8005140 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800512a:	f7fd fba1 	bl	8002870 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005138:	4293      	cmp	r3, r2
 800513a:	d901      	bls.n	8005140 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e0c0      	b.n	80052c2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005140:	4b15      	ldr	r3, [pc, #84]	@ (8005198 <HAL_RCC_ClockConfig+0x228>)
 8005142:	69db      	ldr	r3, [r3, #28]
 8005144:	f003 0318 	and.w	r3, r3, #24
 8005148:	2b10      	cmp	r3, #16
 800514a:	d1ee      	bne.n	800512a <HAL_RCC_ClockConfig+0x1ba>
 800514c:	e02c      	b.n	80051a8 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d122      	bne.n	800519c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8005156:	e00a      	b.n	800516e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005158:	f7fd fb8a 	bl	8002870 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005166:	4293      	cmp	r3, r2
 8005168:	d901      	bls.n	800516e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e0a9      	b.n	80052c2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800516e:	4b0a      	ldr	r3, [pc, #40]	@ (8005198 <HAL_RCC_ClockConfig+0x228>)
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	f003 0318 	and.w	r3, r3, #24
 8005176:	2b08      	cmp	r3, #8
 8005178:	d1ee      	bne.n	8005158 <HAL_RCC_ClockConfig+0x1e8>
 800517a:	e015      	b.n	80051a8 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800517c:	f7fd fb78 	bl	8002870 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	f241 3288 	movw	r2, #5000	@ 0x1388
 800518a:	4293      	cmp	r3, r2
 800518c:	d906      	bls.n	800519c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e097      	b.n	80052c2 <HAL_RCC_ClockConfig+0x352>
 8005192:	bf00      	nop
 8005194:	40022000 	.word	0x40022000
 8005198:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800519c:	4b4b      	ldr	r3, [pc, #300]	@ (80052cc <HAL_RCC_ClockConfig+0x35c>)
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	f003 0318 	and.w	r3, r3, #24
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1e9      	bne.n	800517c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d010      	beq.n	80051d6 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689a      	ldr	r2, [r3, #8]
 80051b8:	4b44      	ldr	r3, [pc, #272]	@ (80052cc <HAL_RCC_ClockConfig+0x35c>)
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	f003 030f 	and.w	r3, r3, #15
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d208      	bcs.n	80051d6 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80051c4:	4b41      	ldr	r3, [pc, #260]	@ (80052cc <HAL_RCC_ClockConfig+0x35c>)
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	f023 020f 	bic.w	r2, r3, #15
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	493e      	ldr	r1, [pc, #248]	@ (80052cc <HAL_RCC_ClockConfig+0x35c>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051d6:	4b3e      	ldr	r3, [pc, #248]	@ (80052d0 <HAL_RCC_ClockConfig+0x360>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d210      	bcs.n	8005206 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051e4:	4b3a      	ldr	r3, [pc, #232]	@ (80052d0 <HAL_RCC_ClockConfig+0x360>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f023 020f 	bic.w	r2, r3, #15
 80051ec:	4938      	ldr	r1, [pc, #224]	@ (80052d0 <HAL_RCC_ClockConfig+0x360>)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051f4:	4b36      	ldr	r3, [pc, #216]	@ (80052d0 <HAL_RCC_ClockConfig+0x360>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 030f 	and.w	r3, r3, #15
 80051fc:	683a      	ldr	r2, [r7, #0]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d001      	beq.n	8005206 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e05d      	b.n	80052c2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0304 	and.w	r3, r3, #4
 800520e:	2b00      	cmp	r3, #0
 8005210:	d010      	beq.n	8005234 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68da      	ldr	r2, [r3, #12]
 8005216:	4b2d      	ldr	r3, [pc, #180]	@ (80052cc <HAL_RCC_ClockConfig+0x35c>)
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800521e:	429a      	cmp	r2, r3
 8005220:	d208      	bcs.n	8005234 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8005222:	4b2a      	ldr	r3, [pc, #168]	@ (80052cc <HAL_RCC_ClockConfig+0x35c>)
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	4927      	ldr	r1, [pc, #156]	@ (80052cc <HAL_RCC_ClockConfig+0x35c>)
 8005230:	4313      	orrs	r3, r2
 8005232:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0308 	and.w	r3, r3, #8
 800523c:	2b00      	cmp	r3, #0
 800523e:	d012      	beq.n	8005266 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	4b21      	ldr	r3, [pc, #132]	@ (80052cc <HAL_RCC_ClockConfig+0x35c>)
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	091b      	lsrs	r3, r3, #4
 800524a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800524e:	429a      	cmp	r2, r3
 8005250:	d209      	bcs.n	8005266 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8005252:	4b1e      	ldr	r3, [pc, #120]	@ (80052cc <HAL_RCC_ClockConfig+0x35c>)
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	011b      	lsls	r3, r3, #4
 8005260:	491a      	ldr	r1, [pc, #104]	@ (80052cc <HAL_RCC_ClockConfig+0x35c>)
 8005262:	4313      	orrs	r3, r2
 8005264:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0310 	and.w	r3, r3, #16
 800526e:	2b00      	cmp	r3, #0
 8005270:	d012      	beq.n	8005298 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	695a      	ldr	r2, [r3, #20]
 8005276:	4b15      	ldr	r3, [pc, #84]	@ (80052cc <HAL_RCC_ClockConfig+0x35c>)
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	0a1b      	lsrs	r3, r3, #8
 800527c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005280:	429a      	cmp	r2, r3
 8005282:	d209      	bcs.n	8005298 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8005284:	4b11      	ldr	r3, [pc, #68]	@ (80052cc <HAL_RCC_ClockConfig+0x35c>)
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	021b      	lsls	r3, r3, #8
 8005292:	490e      	ldr	r1, [pc, #56]	@ (80052cc <HAL_RCC_ClockConfig+0x35c>)
 8005294:	4313      	orrs	r3, r2
 8005296:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005298:	f000 f822 	bl	80052e0 <HAL_RCC_GetSysClockFreq>
 800529c:	4602      	mov	r2, r0
 800529e:	4b0b      	ldr	r3, [pc, #44]	@ (80052cc <HAL_RCC_ClockConfig+0x35c>)
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	f003 030f 	and.w	r3, r3, #15
 80052a6:	490b      	ldr	r1, [pc, #44]	@ (80052d4 <HAL_RCC_ClockConfig+0x364>)
 80052a8:	5ccb      	ldrb	r3, [r1, r3]
 80052aa:	fa22 f303 	lsr.w	r3, r2, r3
 80052ae:	4a0a      	ldr	r2, [pc, #40]	@ (80052d8 <HAL_RCC_ClockConfig+0x368>)
 80052b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80052b2:	4b0a      	ldr	r3, [pc, #40]	@ (80052dc <HAL_RCC_ClockConfig+0x36c>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7fd fa50 	bl	800275c <HAL_InitTick>
 80052bc:	4603      	mov	r3, r0
 80052be:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80052c0:	7afb      	ldrb	r3, [r7, #11]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	44020c00 	.word	0x44020c00
 80052d0:	40022000 	.word	0x40022000
 80052d4:	0800cd9c 	.word	0x0800cd9c
 80052d8:	20000084 	.word	0x20000084
 80052dc:	20000088 	.word	0x20000088

080052e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b089      	sub	sp, #36	@ 0x24
 80052e4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80052e6:	4b8c      	ldr	r3, [pc, #560]	@ (8005518 <HAL_RCC_GetSysClockFreq+0x238>)
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	f003 0318 	and.w	r3, r3, #24
 80052ee:	2b08      	cmp	r3, #8
 80052f0:	d102      	bne.n	80052f8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80052f2:	4b8a      	ldr	r3, [pc, #552]	@ (800551c <HAL_RCC_GetSysClockFreq+0x23c>)
 80052f4:	61fb      	str	r3, [r7, #28]
 80052f6:	e107      	b.n	8005508 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052f8:	4b87      	ldr	r3, [pc, #540]	@ (8005518 <HAL_RCC_GetSysClockFreq+0x238>)
 80052fa:	69db      	ldr	r3, [r3, #28]
 80052fc:	f003 0318 	and.w	r3, r3, #24
 8005300:	2b00      	cmp	r3, #0
 8005302:	d112      	bne.n	800532a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8005304:	4b84      	ldr	r3, [pc, #528]	@ (8005518 <HAL_RCC_GetSysClockFreq+0x238>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0320 	and.w	r3, r3, #32
 800530c:	2b00      	cmp	r3, #0
 800530e:	d009      	beq.n	8005324 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005310:	4b81      	ldr	r3, [pc, #516]	@ (8005518 <HAL_RCC_GetSysClockFreq+0x238>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	08db      	lsrs	r3, r3, #3
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	4a81      	ldr	r2, [pc, #516]	@ (8005520 <HAL_RCC_GetSysClockFreq+0x240>)
 800531c:	fa22 f303 	lsr.w	r3, r2, r3
 8005320:	61fb      	str	r3, [r7, #28]
 8005322:	e0f1      	b.n	8005508 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8005324:	4b7e      	ldr	r3, [pc, #504]	@ (8005520 <HAL_RCC_GetSysClockFreq+0x240>)
 8005326:	61fb      	str	r3, [r7, #28]
 8005328:	e0ee      	b.n	8005508 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800532a:	4b7b      	ldr	r3, [pc, #492]	@ (8005518 <HAL_RCC_GetSysClockFreq+0x238>)
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	f003 0318 	and.w	r3, r3, #24
 8005332:	2b10      	cmp	r3, #16
 8005334:	d102      	bne.n	800533c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005336:	4b7b      	ldr	r3, [pc, #492]	@ (8005524 <HAL_RCC_GetSysClockFreq+0x244>)
 8005338:	61fb      	str	r3, [r7, #28]
 800533a:	e0e5      	b.n	8005508 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800533c:	4b76      	ldr	r3, [pc, #472]	@ (8005518 <HAL_RCC_GetSysClockFreq+0x238>)
 800533e:	69db      	ldr	r3, [r3, #28]
 8005340:	f003 0318 	and.w	r3, r3, #24
 8005344:	2b18      	cmp	r3, #24
 8005346:	f040 80dd 	bne.w	8005504 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800534a:	4b73      	ldr	r3, [pc, #460]	@ (8005518 <HAL_RCC_GetSysClockFreq+0x238>)
 800534c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800534e:	f003 0303 	and.w	r3, r3, #3
 8005352:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005354:	4b70      	ldr	r3, [pc, #448]	@ (8005518 <HAL_RCC_GetSysClockFreq+0x238>)
 8005356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005358:	0a1b      	lsrs	r3, r3, #8
 800535a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800535e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005360:	4b6d      	ldr	r3, [pc, #436]	@ (8005518 <HAL_RCC_GetSysClockFreq+0x238>)
 8005362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005364:	091b      	lsrs	r3, r3, #4
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800536c:	4b6a      	ldr	r3, [pc, #424]	@ (8005518 <HAL_RCC_GetSysClockFreq+0x238>)
 800536e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8005370:	08db      	lsrs	r3, r3, #3
 8005372:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	fb02 f303 	mul.w	r3, r2, r3
 800537c:	ee07 3a90 	vmov	s15, r3
 8005380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005384:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 80b7 	beq.w	80054fe <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d003      	beq.n	800539e <HAL_RCC_GetSysClockFreq+0xbe>
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	2b03      	cmp	r3, #3
 800539a:	d056      	beq.n	800544a <HAL_RCC_GetSysClockFreq+0x16a>
 800539c:	e077      	b.n	800548e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800539e:	4b5e      	ldr	r3, [pc, #376]	@ (8005518 <HAL_RCC_GetSysClockFreq+0x238>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0320 	and.w	r3, r3, #32
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d02d      	beq.n	8005406 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80053aa:	4b5b      	ldr	r3, [pc, #364]	@ (8005518 <HAL_RCC_GetSysClockFreq+0x238>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	08db      	lsrs	r3, r3, #3
 80053b0:	f003 0303 	and.w	r3, r3, #3
 80053b4:	4a5a      	ldr	r2, [pc, #360]	@ (8005520 <HAL_RCC_GetSysClockFreq+0x240>)
 80053b6:	fa22 f303 	lsr.w	r3, r2, r3
 80053ba:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	ee07 3a90 	vmov	s15, r3
 80053c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	ee07 3a90 	vmov	s15, r3
 80053cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053d4:	4b50      	ldr	r3, [pc, #320]	@ (8005518 <HAL_RCC_GetSysClockFreq+0x238>)
 80053d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053dc:	ee07 3a90 	vmov	s15, r3
 80053e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80053e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80053e8:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8005528 <HAL_RCC_GetSysClockFreq+0x248>
 80053ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80053f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005400:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8005404:	e065      	b.n	80054d2 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	ee07 3a90 	vmov	s15, r3
 800540c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005410:	eddf 6a46 	vldr	s13, [pc, #280]	@ 800552c <HAL_RCC_GetSysClockFreq+0x24c>
 8005414:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005418:	4b3f      	ldr	r3, [pc, #252]	@ (8005518 <HAL_RCC_GetSysClockFreq+0x238>)
 800541a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800541c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005420:	ee07 3a90 	vmov	s15, r3
 8005424:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8005428:	ed97 6a02 	vldr	s12, [r7, #8]
 800542c:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005528 <HAL_RCC_GetSysClockFreq+0x248>
 8005430:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005434:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8005438:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800543c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005444:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8005448:	e043      	b.n	80054d2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	ee07 3a90 	vmov	s15, r3
 8005450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005454:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8005530 <HAL_RCC_GetSysClockFreq+0x250>
 8005458:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800545c:	4b2e      	ldr	r3, [pc, #184]	@ (8005518 <HAL_RCC_GetSysClockFreq+0x238>)
 800545e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005464:	ee07 3a90 	vmov	s15, r3
 8005468:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800546c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005470:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8005528 <HAL_RCC_GetSysClockFreq+0x248>
 8005474:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005478:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800547c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005480:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005484:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005488:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 800548c:	e021      	b.n	80054d2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	ee07 3a90 	vmov	s15, r3
 8005494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005498:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005534 <HAL_RCC_GetSysClockFreq+0x254>
 800549c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005518 <HAL_RCC_GetSysClockFreq+0x238>)
 80054a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054a8:	ee07 3a90 	vmov	s15, r3
 80054ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80054b0:	ed97 6a02 	vldr	s12, [r7, #8]
 80054b4:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8005528 <HAL_RCC_GetSysClockFreq+0x248>
 80054b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80054bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80054c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80054c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054cc:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80054d0:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80054d2:	4b11      	ldr	r3, [pc, #68]	@ (8005518 <HAL_RCC_GetSysClockFreq+0x238>)
 80054d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054d6:	0a5b      	lsrs	r3, r3, #9
 80054d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054dc:	3301      	adds	r3, #1
 80054de:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	ee07 3a90 	vmov	s15, r3
 80054e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80054ea:	edd7 6a06 	vldr	s13, [r7, #24]
 80054ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054f6:	ee17 3a90 	vmov	r3, s15
 80054fa:	61fb      	str	r3, [r7, #28]
 80054fc:	e004      	b.n	8005508 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80054fe:	2300      	movs	r3, #0
 8005500:	61fb      	str	r3, [r7, #28]
 8005502:	e001      	b.n	8005508 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8005504:	4b06      	ldr	r3, [pc, #24]	@ (8005520 <HAL_RCC_GetSysClockFreq+0x240>)
 8005506:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8005508:	69fb      	ldr	r3, [r7, #28]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3724      	adds	r7, #36	@ 0x24
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	44020c00 	.word	0x44020c00
 800551c:	003d0900 	.word	0x003d0900
 8005520:	03d09000 	.word	0x03d09000
 8005524:	007a1200 	.word	0x007a1200
 8005528:	46000000 	.word	0x46000000
 800552c:	4c742400 	.word	0x4c742400
 8005530:	4af42400 	.word	0x4af42400
 8005534:	4a742400 	.word	0x4a742400

08005538 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800553c:	f7ff fed0 	bl	80052e0 <HAL_RCC_GetSysClockFreq>
 8005540:	4602      	mov	r2, r0
 8005542:	4b08      	ldr	r3, [pc, #32]	@ (8005564 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005544:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8005546:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800554a:	4907      	ldr	r1, [pc, #28]	@ (8005568 <HAL_RCC_GetHCLKFreq+0x30>)
 800554c:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800554e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005552:	fa22 f303 	lsr.w	r3, r2, r3
 8005556:	4a05      	ldr	r2, [pc, #20]	@ (800556c <HAL_RCC_GetHCLKFreq+0x34>)
 8005558:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800555a:	4b04      	ldr	r3, [pc, #16]	@ (800556c <HAL_RCC_GetHCLKFreq+0x34>)
 800555c:	681b      	ldr	r3, [r3, #0]
}
 800555e:	4618      	mov	r0, r3
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	44020c00 	.word	0x44020c00
 8005568:	0800cd9c 	.word	0x0800cd9c
 800556c:	20000084 	.word	0x20000084

08005570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8005574:	f7ff ffe0 	bl	8005538 <HAL_RCC_GetHCLKFreq>
 8005578:	4602      	mov	r2, r0
 800557a:	4b06      	ldr	r3, [pc, #24]	@ (8005594 <HAL_RCC_GetPCLK1Freq+0x24>)
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	091b      	lsrs	r3, r3, #4
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	4904      	ldr	r1, [pc, #16]	@ (8005598 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005586:	5ccb      	ldrb	r3, [r1, r3]
 8005588:	f003 031f 	and.w	r3, r3, #31
 800558c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005590:	4618      	mov	r0, r3
 8005592:	bd80      	pop	{r7, pc}
 8005594:	44020c00 	.word	0x44020c00
 8005598:	0800cdac 	.word	0x0800cdac

0800559c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80055a0:	f7ff ffca 	bl	8005538 <HAL_RCC_GetHCLKFreq>
 80055a4:	4602      	mov	r2, r0
 80055a6:	4b06      	ldr	r3, [pc, #24]	@ (80055c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	0a1b      	lsrs	r3, r3, #8
 80055ac:	f003 0307 	and.w	r3, r3, #7
 80055b0:	4904      	ldr	r1, [pc, #16]	@ (80055c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80055b2:	5ccb      	ldrb	r3, [r1, r3]
 80055b4:	f003 031f 	and.w	r3, r3, #31
 80055b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055bc:	4618      	mov	r0, r3
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	44020c00 	.word	0x44020c00
 80055c4:	0800cdac 	.word	0x0800cdac

080055c8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80055cc:	f7ff ffb4 	bl	8005538 <HAL_RCC_GetHCLKFreq>
 80055d0:	4602      	mov	r2, r0
 80055d2:	4b06      	ldr	r3, [pc, #24]	@ (80055ec <HAL_RCC_GetPCLK3Freq+0x24>)
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	0b1b      	lsrs	r3, r3, #12
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	4904      	ldr	r1, [pc, #16]	@ (80055f0 <HAL_RCC_GetPCLK3Freq+0x28>)
 80055de:	5ccb      	ldrb	r3, [r1, r3]
 80055e0:	f003 031f 	and.w	r3, r3, #31
 80055e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	44020c00 	.word	0x44020c00
 80055f0:	0800cdac 	.word	0x0800cdac

080055f4 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80055f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055f8:	b0ba      	sub	sp, #232	@ 0xe8
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005600:	2300      	movs	r3, #0
 8005602:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005606:	2300      	movs	r3, #0
 8005608:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800560c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005614:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8005618:	2500      	movs	r5, #0
 800561a:	ea54 0305 	orrs.w	r3, r4, r5
 800561e:	d00b      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8005620:	4bcd      	ldr	r3, [pc, #820]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005622:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005626:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 800562a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800562e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005630:	4ac9      	ldr	r2, [pc, #804]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005632:	430b      	orrs	r3, r1
 8005634:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005638:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800563c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005640:	f002 0801 	and.w	r8, r2, #1
 8005644:	f04f 0900 	mov.w	r9, #0
 8005648:	ea58 0309 	orrs.w	r3, r8, r9
 800564c:	d042      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800564e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005652:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005654:	2b05      	cmp	r3, #5
 8005656:	d823      	bhi.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8005658:	a201      	add	r2, pc, #4	@ (adr r2, 8005660 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800565a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565e:	bf00      	nop
 8005660:	080056a9 	.word	0x080056a9
 8005664:	08005679 	.word	0x08005679
 8005668:	0800568d 	.word	0x0800568d
 800566c:	080056a9 	.word	0x080056a9
 8005670:	080056a9 	.word	0x080056a9
 8005674:	080056a9 	.word	0x080056a9
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005678:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800567c:	3308      	adds	r3, #8
 800567e:	4618      	mov	r0, r3
 8005680:	f003 f90c 	bl	800889c <RCCEx_PLL2_Config>
 8005684:	4603      	mov	r3, r0
 8005686:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 800568a:	e00e      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800568c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005690:	3330      	adds	r3, #48	@ 0x30
 8005692:	4618      	mov	r0, r3
 8005694:	f003 f99a 	bl	80089cc <RCCEx_PLL3_Config>
 8005698:	4603      	mov	r3, r0
 800569a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 800569e:	e004      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80056a6:	e000      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80056a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056aa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10c      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80056b2:	4ba9      	ldr	r3, [pc, #676]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80056b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80056b8:	f023 0107 	bic.w	r1, r3, #7
 80056bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056c2:	4aa5      	ldr	r2, [pc, #660]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80056c4:	430b      	orrs	r3, r1
 80056c6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80056ca:	e003      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056cc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80056d0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056dc:	f002 0a02 	and.w	sl, r2, #2
 80056e0:	f04f 0b00 	mov.w	fp, #0
 80056e4:	ea5a 030b 	orrs.w	r3, sl, fp
 80056e8:	f000 8088 	beq.w	80057fc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80056ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056f2:	2b28      	cmp	r3, #40	@ 0x28
 80056f4:	d868      	bhi.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80056f6:	a201      	add	r2, pc, #4	@ (adr r2, 80056fc <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80056f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fc:	080057d1 	.word	0x080057d1
 8005700:	080057c9 	.word	0x080057c9
 8005704:	080057c9 	.word	0x080057c9
 8005708:	080057c9 	.word	0x080057c9
 800570c:	080057c9 	.word	0x080057c9
 8005710:	080057c9 	.word	0x080057c9
 8005714:	080057c9 	.word	0x080057c9
 8005718:	080057c9 	.word	0x080057c9
 800571c:	080057a1 	.word	0x080057a1
 8005720:	080057c9 	.word	0x080057c9
 8005724:	080057c9 	.word	0x080057c9
 8005728:	080057c9 	.word	0x080057c9
 800572c:	080057c9 	.word	0x080057c9
 8005730:	080057c9 	.word	0x080057c9
 8005734:	080057c9 	.word	0x080057c9
 8005738:	080057c9 	.word	0x080057c9
 800573c:	080057b5 	.word	0x080057b5
 8005740:	080057c9 	.word	0x080057c9
 8005744:	080057c9 	.word	0x080057c9
 8005748:	080057c9 	.word	0x080057c9
 800574c:	080057c9 	.word	0x080057c9
 8005750:	080057c9 	.word	0x080057c9
 8005754:	080057c9 	.word	0x080057c9
 8005758:	080057c9 	.word	0x080057c9
 800575c:	080057d1 	.word	0x080057d1
 8005760:	080057c9 	.word	0x080057c9
 8005764:	080057c9 	.word	0x080057c9
 8005768:	080057c9 	.word	0x080057c9
 800576c:	080057c9 	.word	0x080057c9
 8005770:	080057c9 	.word	0x080057c9
 8005774:	080057c9 	.word	0x080057c9
 8005778:	080057c9 	.word	0x080057c9
 800577c:	080057d1 	.word	0x080057d1
 8005780:	080057c9 	.word	0x080057c9
 8005784:	080057c9 	.word	0x080057c9
 8005788:	080057c9 	.word	0x080057c9
 800578c:	080057c9 	.word	0x080057c9
 8005790:	080057c9 	.word	0x080057c9
 8005794:	080057c9 	.word	0x080057c9
 8005798:	080057c9 	.word	0x080057c9
 800579c:	080057d1 	.word	0x080057d1
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80057a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057a4:	3308      	adds	r3, #8
 80057a6:	4618      	mov	r0, r3
 80057a8:	f003 f878 	bl	800889c <RCCEx_PLL2_Config>
 80057ac:	4603      	mov	r3, r0
 80057ae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 80057b2:	e00e      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80057b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057b8:	3330      	adds	r3, #48	@ 0x30
 80057ba:	4618      	mov	r0, r3
 80057bc:	f003 f906 	bl	80089cc <RCCEx_PLL3_Config>
 80057c0:	4603      	mov	r3, r0
 80057c2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 80057c6:	e004      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80057ce:	e000      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80057d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057d2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10c      	bne.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80057da:	4b5f      	ldr	r3, [pc, #380]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80057dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80057e0:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80057e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057ea:	4a5b      	ldr	r2, [pc, #364]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80057ec:	430b      	orrs	r3, r1
 80057ee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80057f2:	e003      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80057f8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80057fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005804:	f002 0304 	and.w	r3, r2, #4
 8005808:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800580c:	2300      	movs	r3, #0
 800580e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005812:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005816:	460b      	mov	r3, r1
 8005818:	4313      	orrs	r3, r2
 800581a:	d04e      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 800581c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005820:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005822:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005826:	d02c      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8005828:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800582c:	d825      	bhi.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800582e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005832:	d028      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005834:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005838:	d81f      	bhi.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800583a:	2bc0      	cmp	r3, #192	@ 0xc0
 800583c:	d025      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800583e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005840:	d81b      	bhi.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005842:	2b80      	cmp	r3, #128	@ 0x80
 8005844:	d00f      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8005846:	2b80      	cmp	r3, #128	@ 0x80
 8005848:	d817      	bhi.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800584a:	2b00      	cmp	r3, #0
 800584c:	d01f      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800584e:	2b40      	cmp	r3, #64	@ 0x40
 8005850:	d113      	bne.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005852:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005856:	3308      	adds	r3, #8
 8005858:	4618      	mov	r0, r3
 800585a:	f003 f81f 	bl	800889c <RCCEx_PLL2_Config>
 800585e:	4603      	mov	r3, r0
 8005860:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8005864:	e014      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005866:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800586a:	3330      	adds	r3, #48	@ 0x30
 800586c:	4618      	mov	r0, r3
 800586e:	f003 f8ad 	bl	80089cc <RCCEx_PLL3_Config>
 8005872:	4603      	mov	r3, r0
 8005874:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8005878:	e00a      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005880:	e006      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005882:	bf00      	nop
 8005884:	e004      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005886:	bf00      	nop
 8005888:	e002      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800588a:	bf00      	nop
 800588c:	e000      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800588e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005890:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005894:	2b00      	cmp	r3, #0
 8005896:	d10c      	bne.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005898:	4b2f      	ldr	r3, [pc, #188]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800589a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800589e:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80058a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058a8:	4a2b      	ldr	r2, [pc, #172]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80058aa:	430b      	orrs	r3, r1
 80058ac:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80058b0:	e003      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80058b6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c2:	f002 0308 	and.w	r3, r2, #8
 80058c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058ca:	2300      	movs	r3, #0
 80058cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80058d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4313      	orrs	r3, r2
 80058d8:	d056      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 80058da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058e0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80058e4:	d031      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x356>
 80058e6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80058ea:	d82a      	bhi.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80058ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058f0:	d02d      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80058f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058f6:	d824      	bhi.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80058f8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80058fc:	d029      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80058fe:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005902:	d81e      	bhi.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005904:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005908:	d011      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800590a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800590e:	d818      	bhi.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005910:	2b00      	cmp	r3, #0
 8005912:	d023      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005914:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005918:	d113      	bne.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800591a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800591e:	3308      	adds	r3, #8
 8005920:	4618      	mov	r0, r3
 8005922:	f002 ffbb 	bl	800889c <RCCEx_PLL2_Config>
 8005926:	4603      	mov	r3, r0
 8005928:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 800592c:	e017      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800592e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005932:	3330      	adds	r3, #48	@ 0x30
 8005934:	4618      	mov	r0, r3
 8005936:	f003 f849 	bl	80089cc <RCCEx_PLL3_Config>
 800593a:	4603      	mov	r3, r0
 800593c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8005940:	e00d      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005948:	e009      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800594a:	bf00      	nop
 800594c:	e007      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800594e:	bf00      	nop
 8005950:	e005      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005952:	bf00      	nop
 8005954:	e003      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8005956:	bf00      	nop
 8005958:	44020c00 	.word	0x44020c00
        break;
 800595c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800595e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10c      	bne.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005966:	4bb9      	ldr	r3, [pc, #740]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005968:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800596c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8005970:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005974:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005976:	4ab5      	ldr	r2, [pc, #724]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005978:	430b      	orrs	r3, r1
 800597a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800597e:	e003      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005980:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005984:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005988:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800598c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005990:	f002 0310 	and.w	r3, r2, #16
 8005994:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005998:	2300      	movs	r3, #0
 800599a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800599e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80059a2:	460b      	mov	r3, r1
 80059a4:	4313      	orrs	r3, r2
 80059a6:	d053      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 80059a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059ae:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80059b2:	d031      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80059b4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80059b8:	d82a      	bhi.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80059ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059be:	d02d      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x428>
 80059c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059c4:	d824      	bhi.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80059c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80059ca:	d029      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80059cc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80059d0:	d81e      	bhi.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80059d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059d6:	d011      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x408>
 80059d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059dc:	d818      	bhi.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d020      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x430>
 80059e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059e6:	d113      	bne.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80059e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059ec:	3308      	adds	r3, #8
 80059ee:	4618      	mov	r0, r3
 80059f0:	f002 ff54 	bl	800889c <RCCEx_PLL2_Config>
 80059f4:	4603      	mov	r3, r0
 80059f6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 80059fa:	e014      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80059fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a00:	3330      	adds	r3, #48	@ 0x30
 8005a02:	4618      	mov	r0, r3
 8005a04:	f002 ffe2 	bl	80089cc <RCCEx_PLL3_Config>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8005a0e:	e00a      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005a16:	e006      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005a18:	bf00      	nop
 8005a1a:	e004      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005a1c:	bf00      	nop
 8005a1e:	e002      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005a20:	bf00      	nop
 8005a22:	e000      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005a24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a26:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10c      	bne.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005a2e:	4b87      	ldr	r3, [pc, #540]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005a30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005a34:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005a38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a3e:	4a83      	ldr	r2, [pc, #524]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005a40:	430b      	orrs	r3, r1
 8005a42:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005a46:	e003      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a48:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a4c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005a50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a58:	f002 0320 	and.w	r3, r2, #32
 8005a5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a60:	2300      	movs	r3, #0
 8005a62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a66:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	d053      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8005a70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a76:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005a7a:	d031      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8005a7c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005a80:	d82a      	bhi.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005a82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a86:	d02d      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005a88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a8c:	d824      	bhi.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005a8e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005a92:	d029      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8005a94:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005a98:	d81e      	bhi.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005a9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a9e:	d011      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005aa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005aa4:	d818      	bhi.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d020      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8005aaa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005aae:	d113      	bne.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ab0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ab4:	3308      	adds	r3, #8
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f002 fef0 	bl	800889c <RCCEx_PLL2_Config>
 8005abc:	4603      	mov	r3, r0
 8005abe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8005ac2:	e014      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ac4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ac8:	3330      	adds	r3, #48	@ 0x30
 8005aca:	4618      	mov	r0, r3
 8005acc:	f002 ff7e 	bl	80089cc <RCCEx_PLL3_Config>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8005ad6:	e00a      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005ade:	e006      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005ae0:	bf00      	nop
 8005ae2:	e004      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005ae4:	bf00      	nop
 8005ae6:	e002      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005ae8:	bf00      	nop
 8005aea:	e000      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005aec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10c      	bne.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8005af6:	4b55      	ldr	r3, [pc, #340]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005af8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005afc:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8005b00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b06:	4a51      	ldr	r2, [pc, #324]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005b08:	430b      	orrs	r3, r1
 8005b0a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005b0e:	e003      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b10:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005b14:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b20:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005b24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b28:	2300      	movs	r3, #0
 8005b2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b2e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b32:	460b      	mov	r3, r1
 8005b34:	4313      	orrs	r3, r2
 8005b36:	d053      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8005b38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b3e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005b42:	d031      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8005b44:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005b48:	d82a      	bhi.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005b4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b4e:	d02d      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8005b50:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b54:	d824      	bhi.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005b56:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b5a:	d029      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005b5c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b60:	d81e      	bhi.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005b62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b66:	d011      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8005b68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b6c:	d818      	bhi.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d020      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005b72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b76:	d113      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b7c:	3308      	adds	r3, #8
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f002 fe8c 	bl	800889c <RCCEx_PLL2_Config>
 8005b84:	4603      	mov	r3, r0
 8005b86:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005b8a:	e014      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b90:	3330      	adds	r3, #48	@ 0x30
 8005b92:	4618      	mov	r0, r3
 8005b94:	f002 ff1a 	bl	80089cc <RCCEx_PLL3_Config>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005b9e:	e00a      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005ba6:	e006      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005ba8:	bf00      	nop
 8005baa:	e004      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005bac:	bf00      	nop
 8005bae:	e002      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005bb0:	bf00      	nop
 8005bb2:	e000      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005bb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bb6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10c      	bne.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005bbe:	4b23      	ldr	r3, [pc, #140]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005bc4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005bc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bce:	4a1f      	ldr	r2, [pc, #124]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005bd0:	430b      	orrs	r3, r1
 8005bd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005bd6:	e003      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005bdc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005be0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be8:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005bec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005bf6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	d03d      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8005c00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c06:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c0a:	d01b      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8005c0c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c10:	d814      	bhi.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x648>
 8005c12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c16:	d017      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8005c18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c1c:	d80e      	bhi.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x648>
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d016      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8005c22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c26:	d109      	bne.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c2c:	3330      	adds	r3, #48	@ 0x30
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f002 fecc 	bl	80089cc <RCCEx_PLL3_Config>
 8005c34:	4603      	mov	r3, r0
 8005c36:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8005c3a:	e00a      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005c42:	e006      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8005c44:	bf00      	nop
 8005c46:	e004      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8005c48:	bf00      	nop
 8005c4a:	e002      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8005c4c:	44020c00 	.word	0x44020c00
        break;
 8005c50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c52:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10c      	bne.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005c5a:	4b99      	ldr	r3, [pc, #612]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005c5c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c60:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005c64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c6a:	4a95      	ldr	r2, [pc, #596]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005c6c:	430b      	orrs	r3, r1
 8005c6e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005c72:	e003      	b.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c74:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005c78:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c84:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005c88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005c92:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005c96:	460b      	mov	r3, r1
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	d03b      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8005c9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ca0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ca2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005ca6:	d01b      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8005ca8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005cac:	d814      	bhi.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8005cae:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005cb2:	d017      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8005cb4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005cb8:	d80e      	bhi.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d014      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8005cbe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005cc2:	d109      	bne.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005cc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005cc8:	3330      	adds	r3, #48	@ 0x30
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f002 fe7e 	bl	80089cc <RCCEx_PLL3_Config>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8005cd6:	e008      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005cde:	e004      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8005ce0:	bf00      	nop
 8005ce2:	e002      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8005ce4:	bf00      	nop
 8005ce6:	e000      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8005ce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cea:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10c      	bne.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005cf2:	4b73      	ldr	r3, [pc, #460]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005cf4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005cf8:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8005cfc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d02:	4a6f      	ldr	r2, [pc, #444]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005d04:	430b      	orrs	r3, r1
 8005d06:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005d0a:	e003      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d0c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005d10:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005d20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d24:	2300      	movs	r3, #0
 8005d26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005d2a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005d2e:	460b      	mov	r3, r1
 8005d30:	4313      	orrs	r3, r2
 8005d32:	d03d      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8005d34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d40:	d01b      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x786>
 8005d42:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d46:	d814      	bhi.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8005d48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d4c:	d017      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8005d4e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d52:	d80e      	bhi.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d014      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8005d58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d5c:	d109      	bne.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d62:	3330      	adds	r3, #48	@ 0x30
 8005d64:	4618      	mov	r0, r3
 8005d66:	f002 fe31 	bl	80089cc <RCCEx_PLL3_Config>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 8005d70:	e008      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005d78:	e004      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8005d7a:	bf00      	nop
 8005d7c:	e002      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8005d7e:	bf00      	nop
 8005d80:	e000      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8005d82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d84:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10d      	bne.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005d8c:	4b4c      	ldr	r3, [pc, #304]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005d8e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005d92:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005d96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d9e:	4a48      	ldr	r2, [pc, #288]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005da0:	430b      	orrs	r3, r1
 8005da2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005da6:	e003      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005da8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005dac:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8005db0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005dbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005dc6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005dca:	460b      	mov	r3, r1
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	d035      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8005dd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dd8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ddc:	d015      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x816>
 8005dde:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005de2:	d80e      	bhi.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d012      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8005de8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005dec:	d109      	bne.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005dee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005df2:	3330      	adds	r3, #48	@ 0x30
 8005df4:	4618      	mov	r0, r3
 8005df6:	f002 fde9 	bl	80089cc <RCCEx_PLL3_Config>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8005e00:	e006      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005e08:	e002      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8005e0a:	bf00      	nop
 8005e0c:	e000      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8005e0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e10:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10d      	bne.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8005e18:	4b29      	ldr	r3, [pc, #164]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e1a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005e1e:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8005e22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e2a:	4a25      	ldr	r2, [pc, #148]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e2c:	430b      	orrs	r3, r1
 8005e2e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005e32:	e003      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e34:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005e38:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8005e3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e44:	2100      	movs	r1, #0
 8005e46:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8005e4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e52:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005e56:	460b      	mov	r3, r1
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	d037      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8005e5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e68:	d015      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8005e6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e6e:	d80e      	bhi.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d012      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8005e74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e78:	d109      	bne.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e7e:	3330      	adds	r3, #48	@ 0x30
 8005e80:	4618      	mov	r0, r3
 8005e82:	f002 fda3 	bl	80089cc <RCCEx_PLL3_Config>
 8005e86:	4603      	mov	r3, r0
 8005e88:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8005e8c:	e006      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005e94:	e002      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8005e96:	bf00      	nop
 8005e98:	e000      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8005e9a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005e9c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10f      	bne.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8005ea4:	4b06      	ldr	r3, [pc, #24]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ea6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005eaa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005eae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eb6:	4a02      	ldr	r2, [pc, #8]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005eb8:	430b      	orrs	r3, r1
 8005eba:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005ebe:	e005      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 8005ec0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ec4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005ec8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005ecc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	67b9      	str	r1, [r7, #120]	@ 0x78
 8005ed8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005edc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005ede:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	d00e      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8005ee8:	4bb8      	ldr	r3, [pc, #736]	@ (80061cc <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005eea:	69db      	ldr	r3, [r3, #28]
 8005eec:	4ab7      	ldr	r2, [pc, #732]	@ (80061cc <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005eee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005ef2:	61d3      	str	r3, [r2, #28]
 8005ef4:	4bb5      	ldr	r3, [pc, #724]	@ (80061cc <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005ef6:	69d9      	ldr	r1, [r3, #28]
 8005ef8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005efc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005f00:	4ab2      	ldr	r2, [pc, #712]	@ (80061cc <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005f02:	430b      	orrs	r3, r1
 8005f04:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005f12:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f14:	2300      	movs	r3, #0
 8005f16:	677b      	str	r3, [r7, #116]	@ 0x74
 8005f18:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	d055      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8005f22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f2a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005f2e:	d031      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8005f30:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005f34:	d82a      	bhi.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x998>
 8005f36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f3a:	d02d      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8005f3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f40:	d824      	bhi.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x998>
 8005f42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f46:	d029      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8005f48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f4c:	d81e      	bhi.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x998>
 8005f4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f52:	d011      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8005f54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f58:	d818      	bhi.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x998>
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d020      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 8005f5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f62:	d113      	bne.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f68:	3308      	adds	r3, #8
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f002 fc96 	bl	800889c <RCCEx_PLL2_Config>
 8005f70:	4603      	mov	r3, r0
 8005f72:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005f76:	e014      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005f78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f7c:	3330      	adds	r3, #48	@ 0x30
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f002 fd24 	bl	80089cc <RCCEx_PLL3_Config>
 8005f84:	4603      	mov	r3, r0
 8005f86:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005f8a:	e00a      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005f92:	e006      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8005f94:	bf00      	nop
 8005f96:	e004      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8005f98:	bf00      	nop
 8005f9a:	e002      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8005f9c:	bf00      	nop
 8005f9e:	e000      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8005fa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fa2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10d      	bne.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005faa:	4b88      	ldr	r3, [pc, #544]	@ (80061cc <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005fac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005fb0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005fb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fbc:	4a83      	ldr	r2, [pc, #524]	@ (80061cc <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005fbe:	430b      	orrs	r3, r1
 8005fc0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005fc4:	e003      	b.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fc6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005fca:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005fce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005fda:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005fdc:	2300      	movs	r3, #0
 8005fde:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005fe0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	d055      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8005fea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ff2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005ff6:	d031      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8005ff8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005ffc:	d82a      	bhi.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8005ffe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006002:	d02d      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8006004:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006008:	d824      	bhi.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800600a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800600e:	d029      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006010:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006014:	d81e      	bhi.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8006016:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800601a:	d011      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 800601c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006020:	d818      	bhi.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8006022:	2b00      	cmp	r3, #0
 8006024:	d020      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006026:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800602a:	d113      	bne.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800602c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006030:	3308      	adds	r3, #8
 8006032:	4618      	mov	r0, r3
 8006034:	f002 fc32 	bl	800889c <RCCEx_PLL2_Config>
 8006038:	4603      	mov	r3, r0
 800603a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800603e:	e014      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006040:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006044:	3330      	adds	r3, #48	@ 0x30
 8006046:	4618      	mov	r0, r3
 8006048:	f002 fcc0 	bl	80089cc <RCCEx_PLL3_Config>
 800604c:	4603      	mov	r3, r0
 800604e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8006052:	e00a      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800605a:	e006      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 800605c:	bf00      	nop
 800605e:	e004      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8006060:	bf00      	nop
 8006062:	e002      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8006064:	bf00      	nop
 8006066:	e000      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8006068:	bf00      	nop
    }

    if (ret == HAL_OK)
 800606a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10d      	bne.n	800608e <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006072:	4b56      	ldr	r3, [pc, #344]	@ (80061cc <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006074:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006078:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800607c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006084:	4a51      	ldr	r2, [pc, #324]	@ (80061cc <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006086:	430b      	orrs	r3, r1
 8006088:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800608c:	e003      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800608e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006092:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006096:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800609a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80060a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80060a4:	2300      	movs	r3, #0
 80060a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80060a8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80060ac:	460b      	mov	r3, r1
 80060ae:	4313      	orrs	r3, r2
 80060b0:	d032      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80060b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80060ba:	2b05      	cmp	r3, #5
 80060bc:	d80f      	bhi.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xaea>
 80060be:	2b03      	cmp	r3, #3
 80060c0:	d211      	bcs.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d911      	bls.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d109      	bne.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80060ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060ce:	3308      	adds	r3, #8
 80060d0:	4618      	mov	r0, r3
 80060d2:	f002 fbe3 	bl	800889c <RCCEx_PLL2_Config>
 80060d6:	4603      	mov	r3, r0
 80060d8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80060dc:	e006      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80060e4:	e002      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 80060e6:	bf00      	nop
 80060e8:	e000      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 80060ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ec:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10d      	bne.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80060f4:	4b35      	ldr	r3, [pc, #212]	@ (80061cc <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80060f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80060fa:	f023 0107 	bic.w	r1, r3, #7
 80060fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006102:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006106:	4a31      	ldr	r2, [pc, #196]	@ (80061cc <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006108:	430b      	orrs	r3, r1
 800610a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800610e:	e003      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006110:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006114:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8006118:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800611c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006120:	2100      	movs	r1, #0
 8006122:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006124:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006128:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800612a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800612e:	460b      	mov	r3, r1
 8006130:	4313      	orrs	r3, r2
 8006132:	d024      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8006134:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006138:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800613c:	2b00      	cmp	r3, #0
 800613e:	d005      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8006140:	2b08      	cmp	r3, #8
 8006142:	d005      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800614a:	e002      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 800614c:	bf00      	nop
 800614e:	e000      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8006150:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006152:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10d      	bne.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800615a:	4b1c      	ldr	r3, [pc, #112]	@ (80061cc <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800615c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006160:	f023 0108 	bic.w	r1, r3, #8
 8006164:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006168:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800616c:	4a17      	ldr	r2, [pc, #92]	@ (80061cc <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800616e:	430b      	orrs	r3, r1
 8006170:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006174:	e003      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006176:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800617a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800617e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006186:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800618a:	653b      	str	r3, [r7, #80]	@ 0x50
 800618c:	2300      	movs	r3, #0
 800618e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006190:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006194:	460b      	mov	r3, r1
 8006196:	4313      	orrs	r3, r2
 8006198:	f000 80b9 	beq.w	800630e <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800619c:	4b0c      	ldr	r3, [pc, #48]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 800619e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a0:	4a0b      	ldr	r2, [pc, #44]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 80061a2:	f043 0301 	orr.w	r3, r3, #1
 80061a6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061a8:	f7fc fb62 	bl	8002870 <HAL_GetTick>
 80061ac:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80061b0:	e010      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061b2:	f7fc fb5d 	bl	8002870 <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d908      	bls.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80061c8:	e00a      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 80061ca:	bf00      	nop
 80061cc:	44020c00 	.word	0x44020c00
 80061d0:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80061d4:	4bba      	ldr	r3, [pc, #744]	@ (80064c0 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 80061d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d8:	f003 0301 	and.w	r3, r3, #1
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d0e8      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 80061e0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f040 808e 	bne.w	8006306 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80061ea:	4bb6      	ldr	r3, [pc, #728]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80061ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80061f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d023      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8006200:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006204:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8006208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800620c:	4293      	cmp	r3, r2
 800620e:	d01b      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006210:	4bac      	ldr	r3, [pc, #688]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006212:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006216:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800621a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800621e:	4ba9      	ldr	r3, [pc, #676]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006220:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006224:	4aa7      	ldr	r2, [pc, #668]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006226:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800622a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800622e:	4ba5      	ldr	r3, [pc, #660]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006230:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006234:	4aa3      	ldr	r2, [pc, #652]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006236:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800623a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800623e:	4aa1      	ldr	r2, [pc, #644]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006244:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	2b00      	cmp	r3, #0
 8006252:	d019      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006254:	f7fc fb0c 	bl	8002870 <HAL_GetTick>
 8006258:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800625c:	e00d      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800625e:	f7fc fb07 	bl	8002870 <HAL_GetTick>
 8006262:	4602      	mov	r2, r0
 8006264:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006268:	1ad2      	subs	r2, r2, r3
 800626a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800626e:	429a      	cmp	r2, r3
 8006270:	d903      	bls.n	800627a <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8006278:	e006      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800627a:	4b92      	ldr	r3, [pc, #584]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800627c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006280:	f003 0302 	and.w	r3, r3, #2
 8006284:	2b00      	cmp	r3, #0
 8006286:	d0ea      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8006288:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800628c:	2b00      	cmp	r3, #0
 800628e:	d135      	bne.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006290:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006294:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006298:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800629c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062a0:	d110      	bne.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 80062a2:	4b88      	ldr	r3, [pc, #544]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80062a4:	69db      	ldr	r3, [r3, #28]
 80062a6:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80062aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80062b2:	091b      	lsrs	r3, r3, #4
 80062b4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80062b8:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80062bc:	4a81      	ldr	r2, [pc, #516]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80062be:	430b      	orrs	r3, r1
 80062c0:	61d3      	str	r3, [r2, #28]
 80062c2:	e005      	b.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80062c4:	4b7f      	ldr	r3, [pc, #508]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	4a7e      	ldr	r2, [pc, #504]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80062ca:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80062ce:	61d3      	str	r3, [r2, #28]
 80062d0:	4b7c      	ldr	r3, [pc, #496]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80062d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062d6:	4a7b      	ldr	r2, [pc, #492]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80062d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80062e0:	4b78      	ldr	r3, [pc, #480]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80062e2:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80062e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062ea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80062ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062f2:	4a74      	ldr	r2, [pc, #464]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80062f4:	430b      	orrs	r3, r1
 80062f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80062fa:	e008      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062fc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006300:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8006304:	e003      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006306:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800630a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800630e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006316:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800631a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800631c:	2300      	movs	r3, #0
 800631e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006320:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006324:	460b      	mov	r3, r1
 8006326:	4313      	orrs	r3, r2
 8006328:	d035      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800632a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800632e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006332:	2b30      	cmp	r3, #48	@ 0x30
 8006334:	d014      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 8006336:	2b30      	cmp	r3, #48	@ 0x30
 8006338:	d80e      	bhi.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 800633a:	2b20      	cmp	r3, #32
 800633c:	d012      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 800633e:	2b20      	cmp	r3, #32
 8006340:	d80a      	bhi.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8006342:	2b00      	cmp	r3, #0
 8006344:	d010      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 8006346:	2b10      	cmp	r3, #16
 8006348:	d106      	bne.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800634a:	4b5e      	ldr	r3, [pc, #376]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800634c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800634e:	4a5d      	ldr	r2, [pc, #372]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006350:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006354:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8006356:	e008      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800635e:	e004      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8006360:	bf00      	nop
 8006362:	e002      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8006364:	bf00      	nop
 8006366:	e000      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8006368:	bf00      	nop
    }

    if (ret == HAL_OK)
 800636a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10d      	bne.n	800638e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006372:	4b54      	ldr	r3, [pc, #336]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006374:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006378:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800637c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006380:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006384:	4a4f      	ldr	r2, [pc, #316]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006386:	430b      	orrs	r3, r1
 8006388:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800638c:	e003      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800638e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006392:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800639a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639e:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80063a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80063a4:	2300      	movs	r3, #0
 80063a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80063a8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80063ac:	460b      	mov	r3, r1
 80063ae:	4313      	orrs	r3, r2
 80063b0:	d033      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80063b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d002      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 80063be:	2b40      	cmp	r3, #64	@ 0x40
 80063c0:	d007      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80063c2:	e010      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063c4:	4b3f      	ldr	r3, [pc, #252]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80063c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c8:	4a3e      	ldr	r2, [pc, #248]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80063ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063ce:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80063d0:	e00d      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80063d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063d6:	3308      	adds	r3, #8
 80063d8:	4618      	mov	r0, r3
 80063da:	f002 fa5f 	bl	800889c <RCCEx_PLL2_Config>
 80063de:	4603      	mov	r3, r0
 80063e0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80063e4:	e003      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80063ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10d      	bne.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80063f6:	4b33      	ldr	r3, [pc, #204]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80063f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80063fc:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8006400:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006404:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006408:	4a2e      	ldr	r2, [pc, #184]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800640a:	430b      	orrs	r3, r1
 800640c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006410:	e003      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006412:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006416:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800641a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800641e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006422:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006426:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006428:	2300      	movs	r3, #0
 800642a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800642c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006430:	460b      	mov	r3, r1
 8006432:	4313      	orrs	r3, r2
 8006434:	d04c      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8006436:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800643a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800643e:	2b04      	cmp	r3, #4
 8006440:	d827      	bhi.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8006442:	a201      	add	r2, pc, #4	@ (adr r2, 8006448 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 8006444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006448:	0800645d 	.word	0x0800645d
 800644c:	0800646b 	.word	0x0800646b
 8006450:	0800647f 	.word	0x0800647f
 8006454:	0800649b 	.word	0x0800649b
 8006458:	0800649b 	.word	0x0800649b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800645c:	4b19      	ldr	r3, [pc, #100]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800645e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006460:	4a18      	ldr	r2, [pc, #96]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006462:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006466:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006468:	e018      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800646a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800646e:	3308      	adds	r3, #8
 8006470:	4618      	mov	r0, r3
 8006472:	f002 fa13 	bl	800889c <RCCEx_PLL2_Config>
 8006476:	4603      	mov	r3, r0
 8006478:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800647c:	e00e      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800647e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006482:	3330      	adds	r3, #48	@ 0x30
 8006484:	4618      	mov	r0, r3
 8006486:	f002 faa1 	bl	80089cc <RCCEx_PLL3_Config>
 800648a:	4603      	mov	r3, r0
 800648c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006490:	e004      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006498:	e000      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 800649a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800649c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d111      	bne.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80064a4:	4b07      	ldr	r3, [pc, #28]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80064a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064aa:	f023 0107 	bic.w	r1, r3, #7
 80064ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80064b6:	4a03      	ldr	r2, [pc, #12]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80064b8:	430b      	orrs	r3, r1
 80064ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80064be:	e007      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 80064c0:	44020800 	.word	0x44020800
 80064c4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80064cc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80064d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80064dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80064de:	2300      	movs	r3, #0
 80064e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80064e2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80064e6:	460b      	mov	r3, r1
 80064e8:	4313      	orrs	r3, r2
 80064ea:	f000 8081 	beq.w	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80064ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80064f6:	2b20      	cmp	r3, #32
 80064f8:	d85f      	bhi.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 80064fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006500 <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 80064fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006500:	08006585 	.word	0x08006585
 8006504:	080065bb 	.word	0x080065bb
 8006508:	080065bb 	.word	0x080065bb
 800650c:	080065bb 	.word	0x080065bb
 8006510:	080065bb 	.word	0x080065bb
 8006514:	080065bb 	.word	0x080065bb
 8006518:	080065bb 	.word	0x080065bb
 800651c:	080065bb 	.word	0x080065bb
 8006520:	08006593 	.word	0x08006593
 8006524:	080065bb 	.word	0x080065bb
 8006528:	080065bb 	.word	0x080065bb
 800652c:	080065bb 	.word	0x080065bb
 8006530:	080065bb 	.word	0x080065bb
 8006534:	080065bb 	.word	0x080065bb
 8006538:	080065bb 	.word	0x080065bb
 800653c:	080065bb 	.word	0x080065bb
 8006540:	080065a7 	.word	0x080065a7
 8006544:	080065bb 	.word	0x080065bb
 8006548:	080065bb 	.word	0x080065bb
 800654c:	080065bb 	.word	0x080065bb
 8006550:	080065bb 	.word	0x080065bb
 8006554:	080065bb 	.word	0x080065bb
 8006558:	080065bb 	.word	0x080065bb
 800655c:	080065bb 	.word	0x080065bb
 8006560:	080065c3 	.word	0x080065c3
 8006564:	080065bb 	.word	0x080065bb
 8006568:	080065bb 	.word	0x080065bb
 800656c:	080065bb 	.word	0x080065bb
 8006570:	080065bb 	.word	0x080065bb
 8006574:	080065bb 	.word	0x080065bb
 8006578:	080065bb 	.word	0x080065bb
 800657c:	080065bb 	.word	0x080065bb
 8006580:	080065c3 	.word	0x080065c3
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006584:	4bb9      	ldr	r3, [pc, #740]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8006586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006588:	4ab8      	ldr	r2, [pc, #736]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800658a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800658e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006590:	e018      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006592:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006596:	3308      	adds	r3, #8
 8006598:	4618      	mov	r0, r3
 800659a:	f002 f97f 	bl	800889c <RCCEx_PLL2_Config>
 800659e:	4603      	mov	r3, r0
 80065a0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80065a4:	e00e      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80065a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065aa:	3330      	adds	r3, #48	@ 0x30
 80065ac:	4618      	mov	r0, r3
 80065ae:	f002 fa0d 	bl	80089cc <RCCEx_PLL3_Config>
 80065b2:	4603      	mov	r3, r0
 80065b4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80065b8:	e004      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80065c0:	e000      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 80065c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065c4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10d      	bne.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80065cc:	4ba7      	ldr	r3, [pc, #668]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80065ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065d2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80065d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80065de:	4aa3      	ldr	r2, [pc, #652]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80065e0:	430b      	orrs	r3, r1
 80065e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80065e6:	e003      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80065ec:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80065f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80065fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065fe:	2300      	movs	r3, #0
 8006600:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006602:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006606:	460b      	mov	r3, r1
 8006608:	4313      	orrs	r3, r2
 800660a:	d04e      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 800660c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006610:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006614:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006618:	d02e      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800661a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800661e:	d827      	bhi.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006620:	2bc0      	cmp	r3, #192	@ 0xc0
 8006622:	d02b      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x1088>
 8006624:	2bc0      	cmp	r3, #192	@ 0xc0
 8006626:	d823      	bhi.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006628:	2b80      	cmp	r3, #128	@ 0x80
 800662a:	d017      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x1068>
 800662c:	2b80      	cmp	r3, #128	@ 0x80
 800662e:	d81f      	bhi.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006630:	2b00      	cmp	r3, #0
 8006632:	d002      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x1046>
 8006634:	2b40      	cmp	r3, #64	@ 0x40
 8006636:	d007      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 8006638:	e01a      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800663a:	4b8c      	ldr	r3, [pc, #560]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800663c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800663e:	4a8b      	ldr	r2, [pc, #556]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8006640:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006644:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006646:	e01a      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006648:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800664c:	3308      	adds	r3, #8
 800664e:	4618      	mov	r0, r3
 8006650:	f002 f924 	bl	800889c <RCCEx_PLL2_Config>
 8006654:	4603      	mov	r3, r0
 8006656:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800665a:	e010      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800665c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006660:	3330      	adds	r3, #48	@ 0x30
 8006662:	4618      	mov	r0, r3
 8006664:	f002 f9b2 	bl	80089cc <RCCEx_PLL3_Config>
 8006668:	4603      	mov	r3, r0
 800666a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800666e:	e006      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006676:	e002      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8006678:	bf00      	nop
 800667a:	e000      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 800667c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800667e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d10d      	bne.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006686:	4b79      	ldr	r3, [pc, #484]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8006688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800668c:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8006690:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006694:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006698:	4974      	ldr	r1, [pc, #464]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800669a:	4313      	orrs	r3, r2
 800669c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80066a0:	e003      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80066a6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80066aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80066b6:	623b      	str	r3, [r7, #32]
 80066b8:	2300      	movs	r3, #0
 80066ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80066bc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80066c0:	460b      	mov	r3, r1
 80066c2:	4313      	orrs	r3, r2
 80066c4:	d055      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 80066c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066ca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80066ce:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80066d2:	d031      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 80066d4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80066d8:	d82a      	bhi.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 80066da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066de:	d02d      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x1148>
 80066e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066e4:	d824      	bhi.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 80066e6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80066ea:	d029      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x114c>
 80066ec:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80066f0:	d81e      	bhi.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 80066f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066f6:	d011      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x1128>
 80066f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066fc:	d818      	bhi.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d020      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 8006702:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006706:	d113      	bne.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006708:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800670c:	3308      	adds	r3, #8
 800670e:	4618      	mov	r0, r3
 8006710:	f002 f8c4 	bl	800889c <RCCEx_PLL2_Config>
 8006714:	4603      	mov	r3, r0
 8006716:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800671a:	e014      	b.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800671c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006720:	3330      	adds	r3, #48	@ 0x30
 8006722:	4618      	mov	r0, r3
 8006724:	f002 f952 	bl	80089cc <RCCEx_PLL3_Config>
 8006728:	4603      	mov	r3, r0
 800672a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800672e:	e00a      	b.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006736:	e006      	b.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8006738:	bf00      	nop
 800673a:	e004      	b.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 800673c:	bf00      	nop
 800673e:	e002      	b.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8006740:	bf00      	nop
 8006742:	e000      	b.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8006744:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006746:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800674a:	2b00      	cmp	r3, #0
 800674c:	d10d      	bne.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800674e:	4b47      	ldr	r3, [pc, #284]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8006750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006754:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 8006758:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800675c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006760:	4942      	ldr	r1, [pc, #264]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8006762:	4313      	orrs	r3, r2
 8006764:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006768:	e003      	b.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800676a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800676e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006772:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677a:	2100      	movs	r1, #0
 800677c:	61b9      	str	r1, [r7, #24]
 800677e:	f003 0302 	and.w	r3, r3, #2
 8006782:	61fb      	str	r3, [r7, #28]
 8006784:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006788:	460b      	mov	r3, r1
 800678a:	4313      	orrs	r3, r2
 800678c:	d03c      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800678e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006792:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006796:	2b03      	cmp	r3, #3
 8006798:	d81b      	bhi.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x11de>
 800679a:	a201      	add	r2, pc, #4	@ (adr r2, 80067a0 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 800679c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a0:	080067db 	.word	0x080067db
 80067a4:	080067b1 	.word	0x080067b1
 80067a8:	080067bf 	.word	0x080067bf
 80067ac:	080067db 	.word	0x080067db
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067b0:	4b2e      	ldr	r3, [pc, #184]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80067b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b4:	4a2d      	ldr	r2, [pc, #180]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80067b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067ba:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80067bc:	e00e      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80067be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067c2:	3308      	adds	r3, #8
 80067c4:	4618      	mov	r0, r3
 80067c6:	f002 f869 	bl	800889c <RCCEx_PLL2_Config>
 80067ca:	4603      	mov	r3, r0
 80067cc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 80067d0:	e004      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80067d8:	e000      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 80067da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067dc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10d      	bne.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80067e4:	4b21      	ldr	r3, [pc, #132]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80067e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80067ea:	f023 0203 	bic.w	r2, r3, #3
 80067ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80067f6:	491d      	ldr	r1, [pc, #116]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80067fe:	e003      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006800:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006804:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006808:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800680c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006810:	2100      	movs	r1, #0
 8006812:	6139      	str	r1, [r7, #16]
 8006814:	f003 0304 	and.w	r3, r3, #4
 8006818:	617b      	str	r3, [r7, #20]
 800681a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800681e:	460b      	mov	r3, r1
 8006820:	4313      	orrs	r3, r2
 8006822:	d03c      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8006824:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006828:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800682c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006830:	d00e      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8006832:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006836:	d815      	bhi.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 8006838:	2b00      	cmp	r3, #0
 800683a:	d019      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x127c>
 800683c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006840:	d110      	bne.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006842:	4b0a      	ldr	r3, [pc, #40]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8006844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006846:	4a09      	ldr	r2, [pc, #36]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8006848:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800684c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800684e:	e010      	b.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006850:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006854:	3308      	adds	r3, #8
 8006856:	4618      	mov	r0, r3
 8006858:	f002 f820 	bl	800889c <RCCEx_PLL2_Config>
 800685c:	4603      	mov	r3, r0
 800685e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006862:	e006      	b.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800686a:	e002      	b.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x127e>
 800686c:	44020c00 	.word	0x44020c00
        break;
 8006870:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006872:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10d      	bne.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800687a:	4b3d      	ldr	r3, [pc, #244]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800687c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006880:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006884:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006888:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800688c:	4938      	ldr	r1, [pc, #224]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800688e:	4313      	orrs	r3, r2
 8006890:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8006894:	e003      	b.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006896:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800689a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800689e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a6:	2100      	movs	r1, #0
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	f003 0310 	and.w	r3, r3, #16
 80068ae:	60fb      	str	r3, [r7, #12]
 80068b0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80068b4:	460b      	mov	r3, r1
 80068b6:	4313      	orrs	r3, r2
 80068b8:	d038      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80068ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068be:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80068c2:	2b30      	cmp	r3, #48	@ 0x30
 80068c4:	d01b      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x130a>
 80068c6:	2b30      	cmp	r3, #48	@ 0x30
 80068c8:	d815      	bhi.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x1302>
 80068ca:	2b10      	cmp	r3, #16
 80068cc:	d002      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 80068ce:	2b20      	cmp	r3, #32
 80068d0:	d007      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 80068d2:	e010      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068d4:	4b26      	ldr	r3, [pc, #152]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80068d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d8:	4a25      	ldr	r2, [pc, #148]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80068da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068de:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80068e0:	e00e      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80068e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068e6:	3330      	adds	r3, #48	@ 0x30
 80068e8:	4618      	mov	r0, r3
 80068ea:	f002 f86f 	bl	80089cc <RCCEx_PLL3_Config>
 80068ee:	4603      	mov	r3, r0
 80068f0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80068f4:	e004      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80068fc:	e000      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 80068fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006900:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10d      	bne.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8006908:	4b19      	ldr	r3, [pc, #100]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800690a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800690e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006912:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006916:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800691a:	4915      	ldr	r1, [pc, #84]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800691c:	4313      	orrs	r3, r2
 800691e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006922:	e003      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006924:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006928:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800692c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006934:	2100      	movs	r1, #0
 8006936:	6039      	str	r1, [r7, #0]
 8006938:	f003 0308 	and.w	r3, r3, #8
 800693c:	607b      	str	r3, [r7, #4]
 800693e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006942:	460b      	mov	r3, r1
 8006944:	4313      	orrs	r3, r2
 8006946:	d00c      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8006948:	4b09      	ldr	r3, [pc, #36]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800694a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800694e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006952:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006956:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800695a:	4905      	ldr	r1, [pc, #20]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800695c:	4313      	orrs	r3, r2
 800695e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8006962:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8006966:	4618      	mov	r0, r3
 8006968:	37e8      	adds	r7, #232	@ 0xe8
 800696a:	46bd      	mov	sp, r7
 800696c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006970:	44020c00 	.word	0x44020c00

08006974 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8006974:	b480      	push	{r7}
 8006976:	b08b      	sub	sp, #44	@ 0x2c
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800697c:	4bae      	ldr	r3, [pc, #696]	@ (8006c38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800697e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006984:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006986:	4bac      	ldr	r3, [pc, #688]	@ (8006c38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800698a:	f003 0303 	and.w	r3, r3, #3
 800698e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8006990:	4ba9      	ldr	r3, [pc, #676]	@ (8006c38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006994:	0a1b      	lsrs	r3, r3, #8
 8006996:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800699a:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800699c:	4ba6      	ldr	r3, [pc, #664]	@ (8006c38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800699e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a0:	091b      	lsrs	r3, r3, #4
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80069a8:	4ba3      	ldr	r3, [pc, #652]	@ (8006c38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80069aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ac:	08db      	lsrs	r3, r3, #3
 80069ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	fb02 f303 	mul.w	r3, r2, r3
 80069b8:	ee07 3a90 	vmov	s15, r3
 80069bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069c0:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f000 8126 	beq.w	8006c18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	2b03      	cmp	r3, #3
 80069d0:	d053      	beq.n	8006a7a <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	2b03      	cmp	r3, #3
 80069d6:	d86f      	bhi.n	8006ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d003      	beq.n	80069e6 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d02b      	beq.n	8006a3c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80069e4:	e068      	b.n	8006ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80069e6:	4b94      	ldr	r3, [pc, #592]	@ (8006c38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	08db      	lsrs	r3, r3, #3
 80069ec:	f003 0303 	and.w	r3, r3, #3
 80069f0:	4a92      	ldr	r2, [pc, #584]	@ (8006c3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80069f2:	fa22 f303 	lsr.w	r3, r2, r3
 80069f6:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	ee07 3a90 	vmov	s15, r3
 80069fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	ee07 3a90 	vmov	s15, r3
 8006a08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a10:	6a3b      	ldr	r3, [r7, #32]
 8006a12:	ee07 3a90 	vmov	s15, r3
 8006a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a1a:	ed97 6a04 	vldr	s12, [r7, #16]
 8006a1e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8006c40 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a36:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006a3a:	e068      	b.n	8006b0e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	ee07 3a90 	vmov	s15, r3
 8006a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a46:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8006c44 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8006a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a4e:	6a3b      	ldr	r3, [r7, #32]
 8006a50:	ee07 3a90 	vmov	s15, r3
 8006a54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a58:	ed97 6a04 	vldr	s12, [r7, #16]
 8006a5c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006c40 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006a60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a74:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006a78:	e049      	b.n	8006b0e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	ee07 3a90 	vmov	s15, r3
 8006a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a84:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006c48 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8006a88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a8c:	6a3b      	ldr	r3, [r7, #32]
 8006a8e:	ee07 3a90 	vmov	s15, r3
 8006a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a96:	ed97 6a04 	vldr	s12, [r7, #16]
 8006a9a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8006c40 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ab2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006ab6:	e02a      	b.n	8006b0e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ab8:	4b5f      	ldr	r3, [pc, #380]	@ (8006c38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	08db      	lsrs	r3, r3, #3
 8006abe:	f003 0303 	and.w	r3, r3, #3
 8006ac2:	4a5e      	ldr	r2, [pc, #376]	@ (8006c3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ac8:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	ee07 3a90 	vmov	s15, r3
 8006ad0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	ee07 3a90 	vmov	s15, r3
 8006ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	ee07 3a90 	vmov	s15, r3
 8006ae8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aec:	ed97 6a04 	vldr	s12, [r7, #16]
 8006af0:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006c40 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006af4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006af8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006afc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b08:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006b0c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b0e:	4b4a      	ldr	r3, [pc, #296]	@ (8006c38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b1a:	d121      	bne.n	8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006b1c:	4b46      	ldr	r3, [pc, #280]	@ (8006c38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d017      	beq.n	8006b58 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006b28:	4b43      	ldr	r3, [pc, #268]	@ (8006c38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b2c:	0a5b      	lsrs	r3, r3, #9
 8006b2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b32:	ee07 3a90 	vmov	s15, r3
 8006b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8006b3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b3e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006b42:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006b46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b4e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	601a      	str	r2, [r3, #0]
 8006b56:	e006      	b.n	8006b66 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	601a      	str	r2, [r3, #0]
 8006b5e:	e002      	b.n	8006b66 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b66:	4b34      	ldr	r3, [pc, #208]	@ (8006c38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b72:	d121      	bne.n	8006bb8 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006b74:	4b30      	ldr	r3, [pc, #192]	@ (8006c38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d017      	beq.n	8006bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006b80:	4b2d      	ldr	r3, [pc, #180]	@ (8006c38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b84:	0c1b      	lsrs	r3, r3, #16
 8006b86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b8a:	ee07 3a90 	vmov	s15, r3
 8006b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006b92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b96:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006b9a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006b9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ba2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ba6:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	605a      	str	r2, [r3, #4]
 8006bae:	e006      	b.n	8006bbe <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	605a      	str	r2, [r3, #4]
 8006bb6:	e002      	b.n	8006bbe <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006bbe:	4b1e      	ldr	r3, [pc, #120]	@ (8006c38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006bca:	d121      	bne.n	8006c10 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8006c38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d017      	beq.n	8006c08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006bd8:	4b17      	ldr	r3, [pc, #92]	@ (8006c38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bdc:	0e1b      	lsrs	r3, r3, #24
 8006bde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006be2:	ee07 3a90 	vmov	s15, r3
 8006be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8006bea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bee:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006bf2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006bf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bfe:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006c06:	e010      	b.n	8006c2a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	609a      	str	r2, [r3, #8]
}
 8006c0e:	e00c      	b.n	8006c2a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	609a      	str	r2, [r3, #8]
}
 8006c16:	e008      	b.n	8006c2a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	609a      	str	r2, [r3, #8]
}
 8006c2a:	bf00      	nop
 8006c2c:	372c      	adds	r7, #44	@ 0x2c
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	44020c00 	.word	0x44020c00
 8006c3c:	03d09000 	.word	0x03d09000
 8006c40:	46000000 	.word	0x46000000
 8006c44:	4a742400 	.word	0x4a742400
 8006c48:	4af42400 	.word	0x4af42400

08006c4c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b08b      	sub	sp, #44	@ 0x2c
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006c54:	4bae      	ldr	r3, [pc, #696]	@ (8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c5c:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006c5e:	4bac      	ldr	r3, [pc, #688]	@ (8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c62:	f003 0303 	and.w	r3, r3, #3
 8006c66:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8006c68:	4ba9      	ldr	r3, [pc, #676]	@ (8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c6c:	0a1b      	lsrs	r3, r3, #8
 8006c6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c72:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8006c74:	4ba6      	ldr	r3, [pc, #664]	@ (8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c78:	091b      	lsrs	r3, r3, #4
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006c80:	4ba3      	ldr	r3, [pc, #652]	@ (8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c84:	08db      	lsrs	r3, r3, #3
 8006c86:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	fb02 f303 	mul.w	r3, r2, r3
 8006c90:	ee07 3a90 	vmov	s15, r3
 8006c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c98:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	f000 8126 	beq.w	8006ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	2b03      	cmp	r3, #3
 8006ca8:	d053      	beq.n	8006d52 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	2b03      	cmp	r3, #3
 8006cae:	d86f      	bhi.n	8006d90 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d003      	beq.n	8006cbe <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d02b      	beq.n	8006d14 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8006cbc:	e068      	b.n	8006d90 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006cbe:	4b94      	ldr	r3, [pc, #592]	@ (8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	08db      	lsrs	r3, r3, #3
 8006cc4:	f003 0303 	and.w	r3, r3, #3
 8006cc8:	4a92      	ldr	r2, [pc, #584]	@ (8006f14 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006cca:	fa22 f303 	lsr.w	r3, r2, r3
 8006cce:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	ee07 3a90 	vmov	s15, r3
 8006cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	ee07 3a90 	vmov	s15, r3
 8006ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ce4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ce8:	6a3b      	ldr	r3, [r7, #32]
 8006cea:	ee07 3a90 	vmov	s15, r3
 8006cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cf2:	ed97 6a04 	vldr	s12, [r7, #16]
 8006cf6:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8006f18 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d0e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006d12:	e068      	b.n	8006de6 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	ee07 3a90 	vmov	s15, r3
 8006d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d1e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8006f1c <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8006d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d26:	6a3b      	ldr	r3, [r7, #32]
 8006d28:	ee07 3a90 	vmov	s15, r3
 8006d2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d30:	ed97 6a04 	vldr	s12, [r7, #16]
 8006d34:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006f18 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006d38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d4c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006d50:	e049      	b.n	8006de6 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	ee07 3a90 	vmov	s15, r3
 8006d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d5c:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8006d60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d64:	6a3b      	ldr	r3, [r7, #32]
 8006d66:	ee07 3a90 	vmov	s15, r3
 8006d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d6e:	ed97 6a04 	vldr	s12, [r7, #16]
 8006d72:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8006f18 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d8a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006d8e:	e02a      	b.n	8006de6 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d90:	4b5f      	ldr	r3, [pc, #380]	@ (8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	08db      	lsrs	r3, r3, #3
 8006d96:	f003 0303 	and.w	r3, r3, #3
 8006d9a:	4a5e      	ldr	r2, [pc, #376]	@ (8006f14 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8006da0:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	ee07 3a90 	vmov	s15, r3
 8006da8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	ee07 3a90 	vmov	s15, r3
 8006db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dba:	6a3b      	ldr	r3, [r7, #32]
 8006dbc:	ee07 3a90 	vmov	s15, r3
 8006dc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dc4:	ed97 6a04 	vldr	s12, [r7, #16]
 8006dc8:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006f18 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006dcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dd4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006de0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006de4:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006de6:	4b4a      	ldr	r3, [pc, #296]	@ (8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006dee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006df2:	d121      	bne.n	8006e38 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006df4:	4b46      	ldr	r3, [pc, #280]	@ (8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d017      	beq.n	8006e30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006e00:	4b43      	ldr	r3, [pc, #268]	@ (8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e04:	0a5b      	lsrs	r3, r3, #9
 8006e06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e0a:	ee07 3a90 	vmov	s15, r3
 8006e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8006e12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e16:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006e1a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006e1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e26:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	601a      	str	r2, [r3, #0]
 8006e2e:	e006      	b.n	8006e3e <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	601a      	str	r2, [r3, #0]
 8006e36:	e002      	b.n	8006e3e <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e3e:	4b34      	ldr	r3, [pc, #208]	@ (8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e4a:	d121      	bne.n	8006e90 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006e4c:	4b30      	ldr	r3, [pc, #192]	@ (8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d017      	beq.n	8006e88 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006e58:	4b2d      	ldr	r3, [pc, #180]	@ (8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e5c:	0c1b      	lsrs	r3, r3, #16
 8006e5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e62:	ee07 3a90 	vmov	s15, r3
 8006e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006e6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e6e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006e72:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006e76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e7e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	605a      	str	r2, [r3, #4]
 8006e86:	e006      	b.n	8006e96 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	605a      	str	r2, [r3, #4]
 8006e8e:	e002      	b.n	8006e96 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e96:	4b1e      	ldr	r3, [pc, #120]	@ (8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ea2:	d121      	bne.n	8006ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d017      	beq.n	8006ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006eb0:	4b17      	ldr	r3, [pc, #92]	@ (8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eb4:	0e1b      	lsrs	r3, r3, #24
 8006eb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006eba:	ee07 3a90 	vmov	s15, r3
 8006ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8006ec2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ec6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006eca:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006ece:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ed2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ed6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006ede:	e010      	b.n	8006f02 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	609a      	str	r2, [r3, #8]
}
 8006ee6:	e00c      	b.n	8006f02 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	609a      	str	r2, [r3, #8]
}
 8006eee:	e008      	b.n	8006f02 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	609a      	str	r2, [r3, #8]
}
 8006f02:	bf00      	nop
 8006f04:	372c      	adds	r7, #44	@ 0x2c
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	44020c00 	.word	0x44020c00
 8006f14:	03d09000 	.word	0x03d09000
 8006f18:	46000000 	.word	0x46000000
 8006f1c:	4a742400 	.word	0x4a742400
 8006f20:	4af42400 	.word	0x4af42400

08006f24 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b08b      	sub	sp, #44	@ 0x2c
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006f2c:	4bae      	ldr	r3, [pc, #696]	@ (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f34:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006f36:	4bac      	ldr	r3, [pc, #688]	@ (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f3a:	f003 0303 	and.w	r3, r3, #3
 8006f3e:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8006f40:	4ba9      	ldr	r3, [pc, #676]	@ (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f44:	0a1b      	lsrs	r3, r3, #8
 8006f46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f4a:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8006f4c:	4ba6      	ldr	r3, [pc, #664]	@ (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f50:	091b      	lsrs	r3, r3, #4
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006f58:	4ba3      	ldr	r3, [pc, #652]	@ (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006f5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f5c:	08db      	lsrs	r3, r3, #3
 8006f5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	fb02 f303 	mul.w	r3, r2, r3
 8006f68:	ee07 3a90 	vmov	s15, r3
 8006f6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f70:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f000 8126 	beq.w	80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	2b03      	cmp	r3, #3
 8006f80:	d053      	beq.n	800702a <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	2b03      	cmp	r3, #3
 8006f86:	d86f      	bhi.n	8007068 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d003      	beq.n	8006f96 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d02b      	beq.n	8006fec <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8006f94:	e068      	b.n	8007068 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f96:	4b94      	ldr	r3, [pc, #592]	@ (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	08db      	lsrs	r3, r3, #3
 8006f9c:	f003 0303 	and.w	r3, r3, #3
 8006fa0:	4a92      	ldr	r2, [pc, #584]	@ (80071ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8006fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8006fa6:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	ee07 3a90 	vmov	s15, r3
 8006fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	ee07 3a90 	vmov	s15, r3
 8006fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fc0:	6a3b      	ldr	r3, [r7, #32]
 8006fc2:	ee07 3a90 	vmov	s15, r3
 8006fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fca:	ed97 6a04 	vldr	s12, [r7, #16]
 8006fce:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80071f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8006fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fe6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006fea:	e068      	b.n	80070be <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	ee07 3a90 	vmov	s15, r3
 8006ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ff6:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80071f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8006ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ffe:	6a3b      	ldr	r3, [r7, #32]
 8007000:	ee07 3a90 	vmov	s15, r3
 8007004:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007008:	ed97 6a04 	vldr	s12, [r7, #16]
 800700c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80071f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007010:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007014:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007018:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800701c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007024:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007028:	e049      	b.n	80070be <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	ee07 3a90 	vmov	s15, r3
 8007030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007034:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80071f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8007038:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800703c:	6a3b      	ldr	r3, [r7, #32]
 800703e:	ee07 3a90 	vmov	s15, r3
 8007042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007046:	ed97 6a04 	vldr	s12, [r7, #16]
 800704a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80071f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800704e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007056:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800705a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800705e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007062:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007066:	e02a      	b.n	80070be <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007068:	4b5f      	ldr	r3, [pc, #380]	@ (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	08db      	lsrs	r3, r3, #3
 800706e:	f003 0303 	and.w	r3, r3, #3
 8007072:	4a5e      	ldr	r2, [pc, #376]	@ (80071ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007074:	fa22 f303 	lsr.w	r3, r2, r3
 8007078:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	ee07 3a90 	vmov	s15, r3
 8007080:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	ee07 3a90 	vmov	s15, r3
 800708a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800708e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007092:	6a3b      	ldr	r3, [r7, #32]
 8007094:	ee07 3a90 	vmov	s15, r3
 8007098:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800709c:	ed97 6a04 	vldr	s12, [r7, #16]
 80070a0:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80071f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80070a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070b8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80070bc:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070be:	4b4a      	ldr	r3, [pc, #296]	@ (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070ca:	d121      	bne.n	8007110 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80070cc:	4b46      	ldr	r3, [pc, #280]	@ (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80070ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d017      	beq.n	8007108 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80070d8:	4b43      	ldr	r3, [pc, #268]	@ (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80070da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070dc:	0a5b      	lsrs	r3, r3, #9
 80070de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070e2:	ee07 3a90 	vmov	s15, r3
 80070e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80070ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070ee:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80070f2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80070f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070fe:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	601a      	str	r2, [r3, #0]
 8007106:	e006      	b.n	8007116 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	601a      	str	r2, [r3, #0]
 800710e:	e002      	b.n	8007116 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007116:	4b34      	ldr	r3, [pc, #208]	@ (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800711e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007122:	d121      	bne.n	8007168 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007124:	4b30      	ldr	r3, [pc, #192]	@ (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007128:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d017      	beq.n	8007160 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007130:	4b2d      	ldr	r3, [pc, #180]	@ (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007134:	0c1b      	lsrs	r3, r3, #16
 8007136:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800713a:	ee07 3a90 	vmov	s15, r3
 800713e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007142:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007146:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800714a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800714e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007152:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007156:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	605a      	str	r2, [r3, #4]
 800715e:	e006      	b.n	800716e <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	605a      	str	r2, [r3, #4]
 8007166:	e002      	b.n	800716e <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800716e:	4b1e      	ldr	r3, [pc, #120]	@ (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007176:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800717a:	d121      	bne.n	80071c0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800717c:	4b1a      	ldr	r3, [pc, #104]	@ (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800717e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007180:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d017      	beq.n	80071b8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007188:	4b17      	ldr	r3, [pc, #92]	@ (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800718a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800718c:	0e1b      	lsrs	r3, r3, #24
 800718e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007192:	ee07 3a90 	vmov	s15, r3
 8007196:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800719a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800719e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80071a2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80071a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071ae:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80071b6:	e010      	b.n	80071da <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	609a      	str	r2, [r3, #8]
}
 80071be:	e00c      	b.n	80071da <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	609a      	str	r2, [r3, #8]
}
 80071c6:	e008      	b.n	80071da <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	609a      	str	r2, [r3, #8]
}
 80071da:	bf00      	nop
 80071dc:	372c      	adds	r7, #44	@ 0x2c
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	44020c00 	.word	0x44020c00
 80071ec:	03d09000 	.word	0x03d09000
 80071f0:	46000000 	.word	0x46000000
 80071f4:	4a742400 	.word	0x4a742400
 80071f8:	4af42400 	.word	0x4af42400

080071fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80071fc:	b590      	push	{r4, r7, lr}
 80071fe:	b08f      	sub	sp, #60	@ 0x3c
 8007200:	af00      	add	r7, sp, #0
 8007202:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8007206:	e9d7 0100 	ldrd	r0, r1, [r7]
 800720a:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 800720e:	4321      	orrs	r1, r4
 8007210:	d150      	bne.n	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007212:	4b26      	ldr	r3, [pc, #152]	@ (80072ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007214:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007218:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800721c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800721e:	4b23      	ldr	r3, [pc, #140]	@ (80072ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007220:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007224:	f003 0302 	and.w	r3, r3, #2
 8007228:	2b02      	cmp	r3, #2
 800722a:	d108      	bne.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800722c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800722e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007232:	d104      	bne.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007234:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007238:	637b      	str	r3, [r7, #52]	@ 0x34
 800723a:	f001 bb20 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800723e:	4b1b      	ldr	r3, [pc, #108]	@ (80072ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007240:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007244:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007248:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800724c:	d108      	bne.n	8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800724e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007250:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007254:	d104      	bne.n	8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8007256:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800725a:	637b      	str	r3, [r7, #52]	@ 0x34
 800725c:	f001 bb0f 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8007260:	4b12      	ldr	r3, [pc, #72]	@ (80072ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007268:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800726c:	d119      	bne.n	80072a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800726e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007270:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007274:	d115      	bne.n	80072a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007276:	4b0d      	ldr	r3, [pc, #52]	@ (80072ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007278:	69db      	ldr	r3, [r3, #28]
 800727a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800727e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007282:	d30a      	bcc.n	800729a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8007284:	4b09      	ldr	r3, [pc, #36]	@ (80072ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007286:	69db      	ldr	r3, [r3, #28]
 8007288:	0a1b      	lsrs	r3, r3, #8
 800728a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800728e:	4a08      	ldr	r2, [pc, #32]	@ (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007290:	fbb2 f3f3 	udiv	r3, r2, r3
 8007294:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007296:	f001 baf2 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 800729a:	2300      	movs	r3, #0
 800729c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800729e:	f001 baee 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80072a2:	2300      	movs	r3, #0
 80072a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80072a6:	f001 baea 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80072aa:	bf00      	nop
 80072ac:	44020c00 	.word	0x44020c00
 80072b0:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80072b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072b8:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 80072bc:	ea50 0104 	orrs.w	r1, r0, r4
 80072c0:	f000 8615 	beq.w	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 80072c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072c8:	2801      	cmp	r0, #1
 80072ca:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 80072ce:	f081 82d3 	bcs.w	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80072d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072d6:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 80072da:	ea50 0104 	orrs.w	r1, r0, r4
 80072de:	f000 84d8 	beq.w	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 80072e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072e6:	2801      	cmp	r0, #1
 80072e8:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 80072ec:	f081 82c4 	bcs.w	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80072f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072f4:	f1a1 0410 	sub.w	r4, r1, #16
 80072f8:	ea50 0104 	orrs.w	r1, r0, r4
 80072fc:	f001 8288 	beq.w	8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 8007300:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007304:	2801      	cmp	r0, #1
 8007306:	f171 0110 	sbcs.w	r1, r1, #16
 800730a:	f081 82b5 	bcs.w	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800730e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007312:	f1a1 0408 	sub.w	r4, r1, #8
 8007316:	ea50 0104 	orrs.w	r1, r0, r4
 800731a:	f001 81fe 	beq.w	800871a <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 800731e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007322:	2801      	cmp	r0, #1
 8007324:	f171 0108 	sbcs.w	r1, r1, #8
 8007328:	f081 82a6 	bcs.w	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800732c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007330:	1f0c      	subs	r4, r1, #4
 8007332:	ea50 0104 	orrs.w	r1, r0, r4
 8007336:	f000 8753 	beq.w	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 800733a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800733e:	2801      	cmp	r0, #1
 8007340:	f171 0104 	sbcs.w	r1, r1, #4
 8007344:	f081 8298 	bcs.w	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007348:	e9d7 0100 	ldrd	r0, r1, [r7]
 800734c:	1e8c      	subs	r4, r1, #2
 800734e:	ea50 0104 	orrs.w	r1, r0, r4
 8007352:	f001 8173 	beq.w	800863c <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 8007356:	e9d7 0100 	ldrd	r0, r1, [r7]
 800735a:	2801      	cmp	r0, #1
 800735c:	f171 0102 	sbcs.w	r1, r1, #2
 8007360:	f081 828a 	bcs.w	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007364:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007368:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 800736c:	4321      	orrs	r1, r4
 800736e:	f001 80fe 	beq.w	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8007372:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007376:	4ccb      	ldr	r4, [pc, #812]	@ (80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8007378:	42a0      	cmp	r0, r4
 800737a:	f171 0100 	sbcs.w	r1, r1, #0
 800737e:	f081 827b 	bcs.w	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007382:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007386:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 800738a:	4321      	orrs	r1, r4
 800738c:	f001 8076 	beq.w	800847c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 8007390:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007394:	4cc4      	ldr	r4, [pc, #784]	@ (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8007396:	42a0      	cmp	r0, r4
 8007398:	f171 0100 	sbcs.w	r1, r1, #0
 800739c:	f081 826c 	bcs.w	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80073a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073a4:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 80073a8:	4321      	orrs	r1, r4
 80073aa:	f000 87b5 	beq.w	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 80073ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073b2:	4cbe      	ldr	r4, [pc, #760]	@ (80076ac <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 80073b4:	42a0      	cmp	r0, r4
 80073b6:	f171 0100 	sbcs.w	r1, r1, #0
 80073ba:	f081 825d 	bcs.w	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80073be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073c2:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 80073c6:	4321      	orrs	r1, r4
 80073c8:	f000 8738 	beq.w	800823c <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 80073cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073d0:	4cb7      	ldr	r4, [pc, #732]	@ (80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 80073d2:	42a0      	cmp	r0, r4
 80073d4:	f171 0100 	sbcs.w	r1, r1, #0
 80073d8:	f081 824e 	bcs.w	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80073dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073e0:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 80073e4:	4321      	orrs	r1, r4
 80073e6:	f001 81cd 	beq.w	8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 80073ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073ee:	4cb1      	ldr	r4, [pc, #708]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 80073f0:	42a0      	cmp	r0, r4
 80073f2:	f171 0100 	sbcs.w	r1, r1, #0
 80073f6:	f081 823f 	bcs.w	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80073fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073fe:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8007402:	4321      	orrs	r1, r4
 8007404:	f000 80d9 	beq.w	80075ba <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007408:	e9d7 0100 	ldrd	r0, r1, [r7]
 800740c:	4caa      	ldr	r4, [pc, #680]	@ (80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 800740e:	42a0      	cmp	r0, r4
 8007410:	f171 0100 	sbcs.w	r1, r1, #0
 8007414:	f081 8230 	bcs.w	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007418:	e9d7 0100 	ldrd	r0, r1, [r7]
 800741c:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8007420:	4321      	orrs	r1, r4
 8007422:	f000 83da 	beq.w	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8007426:	e9d7 0100 	ldrd	r0, r1, [r7]
 800742a:	4ca4      	ldr	r4, [pc, #656]	@ (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 800742c:	42a0      	cmp	r0, r4
 800742e:	f171 0100 	sbcs.w	r1, r1, #0
 8007432:	f081 8221 	bcs.w	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007436:	e9d7 0100 	ldrd	r0, r1, [r7]
 800743a:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 800743e:	4321      	orrs	r1, r4
 8007440:	f000 8627 	beq.w	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 8007444:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007448:	4c9d      	ldr	r4, [pc, #628]	@ (80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 800744a:	42a0      	cmp	r0, r4
 800744c:	f171 0100 	sbcs.w	r1, r1, #0
 8007450:	f081 8212 	bcs.w	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007454:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007458:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 800745c:	4321      	orrs	r1, r4
 800745e:	f000 857a 	beq.w	8007f56 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8007462:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007466:	4c97      	ldr	r4, [pc, #604]	@ (80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 8007468:	42a0      	cmp	r0, r4
 800746a:	f171 0100 	sbcs.w	r1, r1, #0
 800746e:	f081 8203 	bcs.w	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007472:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007476:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 800747a:	4321      	orrs	r1, r4
 800747c:	f000 84fb 	beq.w	8007e76 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8007480:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007484:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8007488:	f171 0100 	sbcs.w	r1, r1, #0
 800748c:	f081 81f4 	bcs.w	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007490:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007494:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8007498:	4321      	orrs	r1, r4
 800749a:	f000 84a9 	beq.w	8007df0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 800749e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074a2:	f248 0401 	movw	r4, #32769	@ 0x8001
 80074a6:	42a0      	cmp	r0, r4
 80074a8:	f171 0100 	sbcs.w	r1, r1, #0
 80074ac:	f081 81e4 	bcs.w	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80074b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074b4:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 80074b8:	4321      	orrs	r1, r4
 80074ba:	f000 8456 	beq.w	8007d6a <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 80074be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074c2:	f244 0401 	movw	r4, #16385	@ 0x4001
 80074c6:	42a0      	cmp	r0, r4
 80074c8:	f171 0100 	sbcs.w	r1, r1, #0
 80074cc:	f081 81d4 	bcs.w	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80074d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074d4:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 80074d8:	4321      	orrs	r1, r4
 80074da:	f000 8403 	beq.w	8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 80074de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074e2:	f242 0401 	movw	r4, #8193	@ 0x2001
 80074e6:	42a0      	cmp	r0, r4
 80074e8:	f171 0100 	sbcs.w	r1, r1, #0
 80074ec:	f081 81c4 	bcs.w	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80074f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074f4:	2821      	cmp	r0, #33	@ 0x21
 80074f6:	f171 0100 	sbcs.w	r1, r1, #0
 80074fa:	d255      	bcs.n	80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 80074fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007500:	4301      	orrs	r1, r0
 8007502:	f001 81b9 	beq.w	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007506:	e9d7 0100 	ldrd	r0, r1, [r7]
 800750a:	1e42      	subs	r2, r0, #1
 800750c:	f141 33ff 	adc.w	r3, r1, #4294967295
 8007510:	2a20      	cmp	r2, #32
 8007512:	f173 0100 	sbcs.w	r1, r3, #0
 8007516:	f081 81af 	bcs.w	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800751a:	2a1f      	cmp	r2, #31
 800751c:	f201 81ac 	bhi.w	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007520:	a101      	add	r1, pc, #4	@ (adr r1, 8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8007522:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007526:	bf00      	nop
 8007528:	080075ff 	.word	0x080075ff
 800752c:	080076fd 	.word	0x080076fd
 8007530:	08008879 	.word	0x08008879
 8007534:	080077bd 	.word	0x080077bd
 8007538:	08008879 	.word	0x08008879
 800753c:	08008879 	.word	0x08008879
 8007540:	08008879 	.word	0x08008879
 8007544:	0800788d 	.word	0x0800788d
 8007548:	08008879 	.word	0x08008879
 800754c:	08008879 	.word	0x08008879
 8007550:	08008879 	.word	0x08008879
 8007554:	08008879 	.word	0x08008879
 8007558:	08008879 	.word	0x08008879
 800755c:	08008879 	.word	0x08008879
 8007560:	08008879 	.word	0x08008879
 8007564:	08007971 	.word	0x08007971
 8007568:	08008879 	.word	0x08008879
 800756c:	08008879 	.word	0x08008879
 8007570:	08008879 	.word	0x08008879
 8007574:	08008879 	.word	0x08008879
 8007578:	08008879 	.word	0x08008879
 800757c:	08008879 	.word	0x08008879
 8007580:	08008879 	.word	0x08008879
 8007584:	08008879 	.word	0x08008879
 8007588:	08008879 	.word	0x08008879
 800758c:	08008879 	.word	0x08008879
 8007590:	08008879 	.word	0x08008879
 8007594:	08008879 	.word	0x08008879
 8007598:	08008879 	.word	0x08008879
 800759c:	08008879 	.word	0x08008879
 80075a0:	08008879 	.word	0x08008879
 80075a4:	08007a47 	.word	0x08007a47
 80075a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075ac:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80075b0:	430b      	orrs	r3, r1
 80075b2:	f000 82b3 	beq.w	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 80075b6:	f001 b95f 	b.w	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 80075ba:	4b43      	ldr	r3, [pc, #268]	@ (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80075bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80075c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075c4:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 80075c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d108      	bne.n	80075de <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075cc:	f107 0320 	add.w	r3, r7, #32
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7ff f9cf 	bl	8006974 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80075d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80075da:	f001 b950 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 80075de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e0:	2b40      	cmp	r3, #64	@ 0x40
 80075e2:	d108      	bne.n	80075f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075e4:	f107 0314 	add.w	r3, r7, #20
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7ff fb2f 	bl	8006c4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075f2:	f001 b944 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80075f6:	2300      	movs	r3, #0
 80075f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075fa:	f001 b940 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80075fe:	4b32      	ldr	r3, [pc, #200]	@ (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8007600:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007604:	f003 0307 	and.w	r3, r3, #7
 8007608:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800760a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800760c:	2b00      	cmp	r3, #0
 800760e:	d104      	bne.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007610:	f7fd ffc4 	bl	800559c <HAL_RCC_GetPCLK2Freq>
 8007614:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007616:	f001 b932 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800761a:	4b2b      	ldr	r3, [pc, #172]	@ (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007622:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007626:	d10a      	bne.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8007628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800762a:	2b01      	cmp	r3, #1
 800762c:	d107      	bne.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800762e:	f107 0314 	add.w	r3, r7, #20
 8007632:	4618      	mov	r0, r3
 8007634:	f7ff fb0a 	bl	8006c4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	637b      	str	r3, [r7, #52]	@ 0x34
 800763c:	e05c      	b.n	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800763e:	4b22      	ldr	r3, [pc, #136]	@ (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007646:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800764a:	d10a      	bne.n	8007662 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800764c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764e:	2b02      	cmp	r3, #2
 8007650:	d107      	bne.n	8007662 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007652:	f107 0308 	add.w	r3, r7, #8
 8007656:	4618      	mov	r0, r3
 8007658:	f7ff fc64 	bl	8006f24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007660:	e04a      	b.n	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007662:	4b19      	ldr	r3, [pc, #100]	@ (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 0302 	and.w	r3, r3, #2
 800766a:	2b02      	cmp	r3, #2
 800766c:	d10c      	bne.n	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 800766e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007670:	2b03      	cmp	r3, #3
 8007672:	d109      	bne.n	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007674:	4b14      	ldr	r3, [pc, #80]	@ (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	08db      	lsrs	r3, r3, #3
 800767a:	f003 0303 	and.w	r3, r3, #3
 800767e:	4a13      	ldr	r2, [pc, #76]	@ (80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 8007680:	fa22 f303 	lsr.w	r3, r2, r3
 8007684:	637b      	str	r3, [r7, #52]	@ 0x34
 8007686:	e037      	b.n	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8007688:	4b0f      	ldr	r3, [pc, #60]	@ (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007690:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007694:	d11e      	bne.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8007696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007698:	2b04      	cmp	r3, #4
 800769a:	d11b      	bne.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 800769c:	4b0c      	ldr	r3, [pc, #48]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 800769e:	637b      	str	r3, [r7, #52]	@ 0x34
 80076a0:	e02a      	b.n	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 80076a2:	bf00      	nop
 80076a4:	40000001 	.word	0x40000001
 80076a8:	20000001 	.word	0x20000001
 80076ac:	10000001 	.word	0x10000001
 80076b0:	08000001 	.word	0x08000001
 80076b4:	04000001 	.word	0x04000001
 80076b8:	00400001 	.word	0x00400001
 80076bc:	00200001 	.word	0x00200001
 80076c0:	00040001 	.word	0x00040001
 80076c4:	00020001 	.word	0x00020001
 80076c8:	44020c00 	.word	0x44020c00
 80076cc:	03d09000 	.word	0x03d09000
 80076d0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80076d4:	4ba3      	ldr	r3, [pc, #652]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80076d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076da:	f003 0302 	and.w	r3, r3, #2
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d106      	bne.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 80076e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e4:	2b05      	cmp	r3, #5
 80076e6:	d103      	bne.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 80076e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80076ee:	e003      	b.n	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 80076f0:	2300      	movs	r3, #0
 80076f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076f4:	f001 b8c3 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80076f8:	f001 b8c1 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80076fc:	4b99      	ldr	r3, [pc, #612]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80076fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007702:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007706:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800770a:	2b00      	cmp	r3, #0
 800770c:	d104      	bne.n	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800770e:	f7fd ff2f 	bl	8005570 <HAL_RCC_GetPCLK1Freq>
 8007712:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007714:	f001 b8b3 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8007718:	4b92      	ldr	r3, [pc, #584]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007720:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007724:	d10a      	bne.n	800773c <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 8007726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007728:	2b08      	cmp	r3, #8
 800772a:	d107      	bne.n	800773c <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800772c:	f107 0314 	add.w	r3, r7, #20
 8007730:	4618      	mov	r0, r3
 8007732:	f7ff fa8b 	bl	8006c4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	637b      	str	r3, [r7, #52]	@ 0x34
 800773a:	e03d      	b.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 800773c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773e:	2b10      	cmp	r3, #16
 8007740:	d108      	bne.n	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007742:	f107 0308 	add.w	r3, r7, #8
 8007746:	4618      	mov	r0, r3
 8007748:	f7ff fbec 	bl	8006f24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007750:	f001 b895 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007754:	4b83      	ldr	r3, [pc, #524]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0302 	and.w	r3, r3, #2
 800775c:	2b02      	cmp	r3, #2
 800775e:	d10c      	bne.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8007760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007762:	2b18      	cmp	r3, #24
 8007764:	d109      	bne.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007766:	4b7f      	ldr	r3, [pc, #508]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	08db      	lsrs	r3, r3, #3
 800776c:	f003 0303 	and.w	r3, r3, #3
 8007770:	4a7d      	ldr	r2, [pc, #500]	@ (8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8007772:	fa22 f303 	lsr.w	r3, r2, r3
 8007776:	637b      	str	r3, [r7, #52]	@ 0x34
 8007778:	e01e      	b.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800777a:	4b7a      	ldr	r3, [pc, #488]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007782:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007786:	d105      	bne.n	8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8007788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800778a:	2b20      	cmp	r3, #32
 800778c:	d102      	bne.n	8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 800778e:	4b77      	ldr	r3, [pc, #476]	@ (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8007790:	637b      	str	r3, [r7, #52]	@ 0x34
 8007792:	e011      	b.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007794:	4b73      	ldr	r3, [pc, #460]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007796:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800779a:	f003 0302 	and.w	r3, r3, #2
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d106      	bne.n	80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 80077a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a4:	2b28      	cmp	r3, #40	@ 0x28
 80077a6:	d103      	bne.n	80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 80077a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80077ae:	e003      	b.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 80077b0:	2300      	movs	r3, #0
 80077b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077b4:	f001 b863 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80077b8:	f001 b861 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80077bc:	4b69      	ldr	r3, [pc, #420]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80077be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80077c2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80077c6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80077c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d104      	bne.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80077ce:	f7fd fecf 	bl	8005570 <HAL_RCC_GetPCLK1Freq>
 80077d2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80077d4:	f001 b853 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80077d8:	4b62      	ldr	r3, [pc, #392]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077e4:	d10a      	bne.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 80077e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e8:	2b40      	cmp	r3, #64	@ 0x40
 80077ea:	d107      	bne.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077ec:	f107 0314 	add.w	r3, r7, #20
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7ff fa2b 	bl	8006c4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80077fa:	e045      	b.n	8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 80077fc:	4b59      	ldr	r3, [pc, #356]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007804:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007808:	d10a      	bne.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 800780a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780c:	2b80      	cmp	r3, #128	@ 0x80
 800780e:	d107      	bne.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007810:	f107 0308 	add.w	r3, r7, #8
 8007814:	4618      	mov	r0, r3
 8007816:	f7ff fb85 	bl	8006f24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	637b      	str	r3, [r7, #52]	@ 0x34
 800781e:	e033      	b.n	8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007820:	4b50      	ldr	r3, [pc, #320]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 0302 	and.w	r3, r3, #2
 8007828:	2b02      	cmp	r3, #2
 800782a:	d10c      	bne.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 800782c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007830:	d109      	bne.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007832:	4b4c      	ldr	r3, [pc, #304]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	08db      	lsrs	r3, r3, #3
 8007838:	f003 0303 	and.w	r3, r3, #3
 800783c:	4a4a      	ldr	r2, [pc, #296]	@ (8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 800783e:	fa22 f303 	lsr.w	r3, r2, r3
 8007842:	637b      	str	r3, [r7, #52]	@ 0x34
 8007844:	e020      	b.n	8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8007846:	4b47      	ldr	r3, [pc, #284]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800784e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007852:	d106      	bne.n	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 8007854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007856:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800785a:	d102      	bne.n	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 800785c:	4b43      	ldr	r3, [pc, #268]	@ (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 800785e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007860:	e012      	b.n	8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007862:	4b40      	ldr	r3, [pc, #256]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007864:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007868:	f003 0302 	and.w	r3, r3, #2
 800786c:	2b02      	cmp	r3, #2
 800786e:	d107      	bne.n	8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007872:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007876:	d103      	bne.n	8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 8007878:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800787c:	637b      	str	r3, [r7, #52]	@ 0x34
 800787e:	e003      	b.n	8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 8007880:	2300      	movs	r3, #0
 8007882:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007884:	f000 bffb 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007888:	f000 bff9 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800788c:	4b35      	ldr	r3, [pc, #212]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800788e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007892:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8007896:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789a:	2b00      	cmp	r3, #0
 800789c:	d104      	bne.n	80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800789e:	f7fd fe67 	bl	8005570 <HAL_RCC_GetPCLK1Freq>
 80078a2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80078a4:	f000 bfeb 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 80078a8:	4b2e      	ldr	r3, [pc, #184]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078b4:	d10b      	bne.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 80078b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078bc:	d107      	bne.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078be:	f107 0314 	add.w	r3, r7, #20
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7ff f9c2 	bl	8006c4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80078cc:	e047      	b.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 80078ce:	4b25      	ldr	r3, [pc, #148]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078da:	d10b      	bne.n	80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80078dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078e2:	d107      	bne.n	80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078e4:	f107 0308 	add.w	r3, r7, #8
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7ff fb1b 	bl	8006f24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80078f2:	e034      	b.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80078f4:	4b1b      	ldr	r3, [pc, #108]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0302 	and.w	r3, r3, #2
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d10d      	bne.n	800791c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8007900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007902:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007906:	d109      	bne.n	800791c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007908:	4b16      	ldr	r3, [pc, #88]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	08db      	lsrs	r3, r3, #3
 800790e:	f003 0303 	and.w	r3, r3, #3
 8007912:	4a15      	ldr	r2, [pc, #84]	@ (8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8007914:	fa22 f303 	lsr.w	r3, r2, r3
 8007918:	637b      	str	r3, [r7, #52]	@ 0x34
 800791a:	e020      	b.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 800791c:	4b11      	ldr	r3, [pc, #68]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007928:	d106      	bne.n	8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800792a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800792c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007930:	d102      	bne.n	8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 8007932:	4b0e      	ldr	r3, [pc, #56]	@ (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8007934:	637b      	str	r3, [r7, #52]	@ 0x34
 8007936:	e012      	b.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007938:	4b0a      	ldr	r3, [pc, #40]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800793a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800793e:	f003 0302 	and.w	r3, r3, #2
 8007942:	2b02      	cmp	r3, #2
 8007944:	d107      	bne.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8007946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007948:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800794c:	d103      	bne.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 800794e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007952:	637b      	str	r3, [r7, #52]	@ 0x34
 8007954:	e003      	b.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 8007956:	2300      	movs	r3, #0
 8007958:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800795a:	f000 bf90 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800795e:	f000 bf8e 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007962:	bf00      	nop
 8007964:	44020c00 	.word	0x44020c00
 8007968:	03d09000 	.word	0x03d09000
 800796c:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007970:	4ba5      	ldr	r3, [pc, #660]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007976:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800797a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800797c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800797e:	2b00      	cmp	r3, #0
 8007980:	d104      	bne.n	800798c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007982:	f7fd fdf5 	bl	8005570 <HAL_RCC_GetPCLK1Freq>
 8007986:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8007988:	f000 bf79 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800798c:	4b9e      	ldr	r3, [pc, #632]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007994:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007998:	d10b      	bne.n	80079b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800799a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800799c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079a0:	d107      	bne.n	80079b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079a2:	f107 0314 	add.w	r3, r7, #20
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7ff f950 	bl	8006c4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80079b0:	e047      	b.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 80079b2:	4b95      	ldr	r3, [pc, #596]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079be:	d10b      	bne.n	80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 80079c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079c6:	d107      	bne.n	80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079c8:	f107 0308 	add.w	r3, r7, #8
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7ff faa9 	bl	8006f24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80079d6:	e034      	b.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80079d8:	4b8b      	ldr	r3, [pc, #556]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0302 	and.w	r3, r3, #2
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d10d      	bne.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 80079e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80079ea:	d109      	bne.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80079ec:	4b86      	ldr	r3, [pc, #536]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	08db      	lsrs	r3, r3, #3
 80079f2:	f003 0303 	and.w	r3, r3, #3
 80079f6:	4a85      	ldr	r2, [pc, #532]	@ (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 80079f8:	fa22 f303 	lsr.w	r3, r2, r3
 80079fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80079fe:	e020      	b.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8007a00:	4b81      	ldr	r3, [pc, #516]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a0c:	d106      	bne.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8007a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a14:	d102      	bne.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 8007a16:	4b7e      	ldr	r3, [pc, #504]	@ (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8007a18:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a1a:	e012      	b.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007a1c:	4b7a      	ldr	r3, [pc, #488]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007a1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a22:	f003 0302 	and.w	r3, r3, #2
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d107      	bne.n	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 8007a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a2c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007a30:	d103      	bne.n	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 8007a32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a36:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a38:	e003      	b.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a3e:	f000 bf1e 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007a42:	f000 bf1c 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8007a46:	4b70      	ldr	r3, [pc, #448]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007a48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007a4c:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8007a50:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8007a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d104      	bne.n	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007a58:	f7fd fd8a 	bl	8005570 <HAL_RCC_GetPCLK1Freq>
 8007a5c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8007a5e:	f000 bf0e 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8007a62:	4b69      	ldr	r3, [pc, #420]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a6e:	d10b      	bne.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8007a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a76:	d107      	bne.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a78:	f107 0314 	add.w	r3, r7, #20
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7ff f8e5 	bl	8006c4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a86:	e047      	b.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8007a88:	4b5f      	ldr	r3, [pc, #380]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a94:	d10b      	bne.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8007a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a9c:	d107      	bne.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a9e:	f107 0308 	add.w	r3, r7, #8
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7ff fa3e 	bl	8006f24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aac:	e034      	b.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8007aae:	4b56      	ldr	r3, [pc, #344]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d10d      	bne.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8007aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007abc:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007ac0:	d109      	bne.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ac2:	4b51      	ldr	r3, [pc, #324]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	08db      	lsrs	r3, r3, #3
 8007ac8:	f003 0303 	and.w	r3, r3, #3
 8007acc:	4a4f      	ldr	r2, [pc, #316]	@ (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8007ace:	fa22 f303 	lsr.w	r3, r2, r3
 8007ad2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ad4:	e020      	b.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8007ad6:	4b4c      	ldr	r3, [pc, #304]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ade:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ae2:	d106      	bne.n	8007af2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 8007ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007aea:	d102      	bne.n	8007af2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 8007aec:	4b48      	ldr	r3, [pc, #288]	@ (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8007aee:	637b      	str	r3, [r7, #52]	@ 0x34
 8007af0:	e012      	b.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8007af2:	4b45      	ldr	r3, [pc, #276]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007af4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007af8:	f003 0302 	and.w	r3, r3, #2
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	d107      	bne.n	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8007b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b02:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007b06:	d103      	bne.n	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8007b08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b0e:	e003      	b.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8007b10:	2300      	movs	r3, #0
 8007b12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b14:	f000 beb3 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007b18:	f000 beb1 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007b1c:	4b3a      	ldr	r3, [pc, #232]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b22:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007b26:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d104      	bne.n	8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007b2e:	f7fd fd4b 	bl	80055c8 <HAL_RCC_GetPCLK3Freq>
 8007b32:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007b34:	f000 bea3 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8007b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b3e:	d108      	bne.n	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b40:	f107 0314 	add.w	r3, r7, #20
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7ff f881 	bl	8006c4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b4e:	f000 be96 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8007b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b58:	d108      	bne.n	8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b5a:	f107 0308 	add.w	r3, r7, #8
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7ff f9e0 	bl	8006f24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b68:	f000 be89 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007b6c:	4b26      	ldr	r3, [pc, #152]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 0302 	and.w	r3, r3, #2
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d10d      	bne.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8007b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b7a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b7e:	d109      	bne.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b80:	4b21      	ldr	r3, [pc, #132]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	08db      	lsrs	r3, r3, #3
 8007b86:	f003 0303 	and.w	r3, r3, #3
 8007b8a:	4a20      	ldr	r2, [pc, #128]	@ (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8007b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b90:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b92:	e020      	b.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8007b94:	4b1c      	ldr	r3, [pc, #112]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ba0:	d106      	bne.n	8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8007ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007ba8:	d102      	bne.n	8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 8007baa:	4b19      	ldr	r3, [pc, #100]	@ (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8007bac:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bae:	e012      	b.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007bb0:	4b15      	ldr	r3, [pc, #84]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007bb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007bb6:	f003 0302 	and.w	r3, r3, #2
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d107      	bne.n	8007bce <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8007bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007bc4:	d103      	bne.n	8007bce <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 8007bc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bca:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bcc:	e003      	b.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bd2:	f000 be54 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007bd6:	f000 be52 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007bda:	4b0b      	ldr	r3, [pc, #44]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007bdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007be0:	f003 0307 	and.w	r3, r3, #7
 8007be4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d104      	bne.n	8007bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8007bec:	f7fd fca4 	bl	8005538 <HAL_RCC_GetHCLKFreq>
 8007bf0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8007bf2:	f000 be44 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d10b      	bne.n	8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 8007bfc:	f7fd fb70 	bl	80052e0 <HAL_RCC_GetSysClockFreq>
 8007c00:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007c02:	f000 be3c 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007c06:	bf00      	nop
 8007c08:	44020c00 	.word	0x44020c00
 8007c0c:	03d09000 	.word	0x03d09000
 8007c10:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8007c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d108      	bne.n	8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c1a:	f107 0314 	add.w	r3, r7, #20
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7ff f814 	bl	8006c4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c28:	f000 be29 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007c2c:	4b9f      	ldr	r3, [pc, #636]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c38:	d105      	bne.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8007c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c3c:	2b03      	cmp	r3, #3
 8007c3e:	d102      	bne.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 8007c40:	4b9b      	ldr	r3, [pc, #620]	@ (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 8007c42:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c44:	e023      	b.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007c46:	4b99      	ldr	r3, [pc, #612]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f003 0302 	and.w	r3, r3, #2
 8007c4e:	2b02      	cmp	r3, #2
 8007c50:	d10c      	bne.n	8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8007c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c54:	2b04      	cmp	r3, #4
 8007c56:	d109      	bne.n	8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c58:	4b94      	ldr	r3, [pc, #592]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	08db      	lsrs	r3, r3, #3
 8007c5e:	f003 0303 	and.w	r3, r3, #3
 8007c62:	4a94      	ldr	r2, [pc, #592]	@ (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8007c64:	fa22 f303 	lsr.w	r3, r2, r3
 8007c68:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c6a:	e010      	b.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8007c6c:	4b8f      	ldr	r3, [pc, #572]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c78:	d105      	bne.n	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 8007c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c7c:	2b05      	cmp	r3, #5
 8007c7e:	d102      	bne.n	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 8007c80:	4b8d      	ldr	r3, [pc, #564]	@ (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8007c82:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c84:	e003      	b.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 8007c86:	2300      	movs	r3, #0
 8007c88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c8a:	f000 bdf8 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007c8e:	f000 bdf6 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8007c92:	4b86      	ldr	r3, [pc, #536]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007c94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c98:	f003 0308 	and.w	r3, r3, #8
 8007c9c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8007c9e:	4b83      	ldr	r3, [pc, #524]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007ca0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ca4:	f003 0302 	and.w	r3, r3, #2
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d106      	bne.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8007cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d103      	bne.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 8007cb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cb8:	e012      	b.n	8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8007cba:	4b7c      	ldr	r3, [pc, #496]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007cbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cc8:	d106      	bne.n	8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 8007cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ccc:	2b08      	cmp	r3, #8
 8007cce:	d103      	bne.n	8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 8007cd0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007cd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cd6:	e003      	b.n	8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8007cdc:	f000 bdcf 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007ce0:	f000 bdcd 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007ce4:	4b71      	ldr	r3, [pc, #452]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007ce6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007cea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007cee:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d104      	bne.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007cf6:	f7fd fc3b 	bl	8005570 <HAL_RCC_GetPCLK1Freq>
 8007cfa:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007cfc:	f000 bdbf 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8007d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d06:	d108      	bne.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d08:	f107 0308 	add.w	r3, r7, #8
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7ff f909 	bl	8006f24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d16:	f000 bdb2 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007d1a:	4b64      	ldr	r3, [pc, #400]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 0302 	and.w	r3, r3, #2
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	d10d      	bne.n	8007d42 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 8007d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d2c:	d109      	bne.n	8007d42 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d2e:	4b5f      	ldr	r3, [pc, #380]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	08db      	lsrs	r3, r3, #3
 8007d34:	f003 0303 	and.w	r3, r3, #3
 8007d38:	4a5e      	ldr	r2, [pc, #376]	@ (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8007d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d40:	e011      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8007d42:	4b5a      	ldr	r3, [pc, #360]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d4e:	d106      	bne.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 8007d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d52:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d56:	d102      	bne.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 8007d58:	4b57      	ldr	r3, [pc, #348]	@ (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8007d5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d5c:	e003      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d62:	f000 bd8c 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007d66:	f000 bd8a 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007d6a:	4b50      	ldr	r3, [pc, #320]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007d6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007d70:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007d74:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d104      	bne.n	8007d86 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007d7c:	f7fd fbf8 	bl	8005570 <HAL_RCC_GetPCLK1Freq>
 8007d80:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007d82:	f000 bd7c 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8007d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d88:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d8c:	d108      	bne.n	8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d8e:	f107 0308 	add.w	r3, r7, #8
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7ff f8c6 	bl	8006f24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d9c:	f000 bd6f 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007da0:	4b42      	ldr	r3, [pc, #264]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 0302 	and.w	r3, r3, #2
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	d10d      	bne.n	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 8007dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dae:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007db2:	d109      	bne.n	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007db4:	4b3d      	ldr	r3, [pc, #244]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	08db      	lsrs	r3, r3, #3
 8007dba:	f003 0303 	and.w	r3, r3, #3
 8007dbe:	4a3d      	ldr	r2, [pc, #244]	@ (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8007dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8007dc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dc6:	e011      	b.n	8007dec <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8007dc8:	4b38      	ldr	r3, [pc, #224]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007dd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007dd4:	d106      	bne.n	8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007ddc:	d102      	bne.n	8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 8007dde:	4b36      	ldr	r3, [pc, #216]	@ (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8007de0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007de2:	e003      	b.n	8007dec <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 8007de4:	2300      	movs	r3, #0
 8007de6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007de8:	f000 bd49 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007dec:	f000 bd47 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007df0:	4b2e      	ldr	r3, [pc, #184]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007df2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007df6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007dfa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8007dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d104      	bne.n	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007e02:	f7fd fbe1 	bl	80055c8 <HAL_RCC_GetPCLK3Freq>
 8007e06:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007e08:	f000 bd39 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8007e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e12:	d108      	bne.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e14:	f107 0308 	add.w	r3, r7, #8
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7ff f883 	bl	8006f24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e22:	f000 bd2c 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8007e26:	4b21      	ldr	r3, [pc, #132]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 0302 	and.w	r3, r3, #2
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	d10d      	bne.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8007e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e38:	d109      	bne.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e3a:	4b1c      	ldr	r3, [pc, #112]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	08db      	lsrs	r3, r3, #3
 8007e40:	f003 0303 	and.w	r3, r3, #3
 8007e44:	4a1b      	ldr	r2, [pc, #108]	@ (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8007e46:	fa22 f303 	lsr.w	r3, r2, r3
 8007e4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e4c:	e011      	b.n	8007e72 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8007e4e:	4b17      	ldr	r3, [pc, #92]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e5a:	d106      	bne.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 8007e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e5e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007e62:	d102      	bne.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 8007e64:	4b14      	ldr	r3, [pc, #80]	@ (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8007e66:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e68:	e003      	b.n	8007e72 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e6e:	f000 bd06 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007e72:	f000 bd04 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8007e76:	4b0d      	ldr	r3, [pc, #52]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007e78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007e7c:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8007e80:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8007e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d104      	bne.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007e88:	f7fd fb72 	bl	8005570 <HAL_RCC_GetPCLK1Freq>
 8007e8c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007e8e:	f000 bcf6 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8007e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e98:	d110      	bne.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e9a:	f107 0308 	add.w	r3, r7, #8
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7ff f840 	bl	8006f24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ea8:	f000 bce9 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007eac:	44020c00 	.word	0x44020c00
 8007eb0:	007a1200 	.word	0x007a1200
 8007eb4:	03d09000 	.word	0x03d09000
 8007eb8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8007ebc:	4ba4      	ldr	r3, [pc, #656]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 0302 	and.w	r3, r3, #2
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d10e      	bne.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 8007ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ece:	d10a      	bne.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ed0:	4b9f      	ldr	r3, [pc, #636]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	08db      	lsrs	r3, r3, #3
 8007ed6:	f003 0303 	and.w	r3, r3, #3
 8007eda:	4a9e      	ldr	r2, [pc, #632]	@ (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8007edc:	fa22 f303 	lsr.w	r3, r2, r3
 8007ee0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ee2:	f000 bccc 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007eea:	f000 bcc8 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8007eee:	4b98      	ldr	r3, [pc, #608]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007ef0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007ef4:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007ef8:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8007efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d104      	bne.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007f00:	f7fd fb62 	bl	80055c8 <HAL_RCC_GetPCLK3Freq>
 8007f04:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007f06:	f000 bcba 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 8007f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f0c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007f10:	d108      	bne.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f12:	f107 0308 	add.w	r3, r7, #8
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7ff f804 	bl	8006f24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f20:	f000 bcad 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8007f24:	4b8a      	ldr	r3, [pc, #552]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f003 0302 	and.w	r3, r3, #2
 8007f2c:	2b02      	cmp	r3, #2
 8007f2e:	d10e      	bne.n	8007f4e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8007f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f36:	d10a      	bne.n	8007f4e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007f38:	4b85      	ldr	r3, [pc, #532]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	08db      	lsrs	r3, r3, #3
 8007f3e:	f003 0303 	and.w	r3, r3, #3
 8007f42:	4a84      	ldr	r2, [pc, #528]	@ (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8007f44:	fa22 f303 	lsr.w	r3, r2, r3
 8007f48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f4a:	f000 bc98 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f52:	f000 bc94 	b.w	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007f56:	4b7e      	ldr	r3, [pc, #504]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007f58:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007f5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007f60:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f64:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007f68:	d056      	beq.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 8007f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f6c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007f70:	f200 808b 	bhi.w	800808a <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8007f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f7a:	d03e      	beq.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 8007f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f82:	f200 8082 	bhi.w	800808a <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8007f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f8c:	d027      	beq.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f94:	d879      	bhi.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8007f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f9c:	d017      	beq.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 8007f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fa4:	d871      	bhi.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8007fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d004      	beq.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8007fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fb2:	d004      	beq.n	8007fbe <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 8007fb4:	e069      	b.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007fb6:	f7fd fb07 	bl	80055c8 <HAL_RCC_GetPCLK3Freq>
 8007fba:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007fbc:	e068      	b.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fbe:	f107 0314 	add.w	r3, r7, #20
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7fe fe42 	bl	8006c4c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007fcc:	e060      	b.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fce:	f107 0308 	add.w	r3, r7, #8
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7fe ffa6 	bl	8006f24 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007fdc:	e058      	b.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007fde:	4b5c      	ldr	r3, [pc, #368]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007fe0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007fe4:	f003 0302 	and.w	r3, r3, #2
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	d103      	bne.n	8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 8007fec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ff0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007ff2:	e04d      	b.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007ff8:	e04a      	b.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007ffa:	4b55      	ldr	r3, [pc, #340]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007ffc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008000:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008004:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008008:	d103      	bne.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 800800a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800800e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008010:	e03e      	b.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8008012:	2300      	movs	r3, #0
 8008014:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008016:	e03b      	b.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008018:	4b4d      	ldr	r3, [pc, #308]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800801a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800801e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008022:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008024:	4b4a      	ldr	r3, [pc, #296]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0302 	and.w	r3, r3, #2
 800802c:	2b02      	cmp	r3, #2
 800802e:	d10c      	bne.n	800804a <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 8008030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008032:	2b00      	cmp	r3, #0
 8008034:	d109      	bne.n	800804a <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008036:	4b46      	ldr	r3, [pc, #280]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	08db      	lsrs	r3, r3, #3
 800803c:	f003 0303 	and.w	r3, r3, #3
 8008040:	4a44      	ldr	r2, [pc, #272]	@ (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8008042:	fa22 f303 	lsr.w	r3, r2, r3
 8008046:	637b      	str	r3, [r7, #52]	@ 0x34
 8008048:	e01e      	b.n	8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800804a:	4b41      	ldr	r3, [pc, #260]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008052:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008056:	d106      	bne.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8008058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800805a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800805e:	d102      	bne.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008060:	4b3d      	ldr	r3, [pc, #244]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8008062:	637b      	str	r3, [r7, #52]	@ 0x34
 8008064:	e010      	b.n	8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008066:	4b3a      	ldr	r3, [pc, #232]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800806e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008072:	d106      	bne.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 8008074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008076:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800807a:	d102      	bne.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800807c:	4b37      	ldr	r3, [pc, #220]	@ (800815c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 800807e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008080:	e002      	b.n	8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008082:	2300      	movs	r3, #0
 8008084:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008086:	e003      	b.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8008088:	e002      	b.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 800808a:	2300      	movs	r3, #0
 800808c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800808e:	bf00      	nop
          }
        }
        break;
 8008090:	e3f5      	b.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008092:	4b2f      	ldr	r3, [pc, #188]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008094:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008098:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800809c:	633b      	str	r3, [r7, #48]	@ 0x30
 800809e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80080a4:	d05f      	beq.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 80080a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80080ac:	f200 8094 	bhi.w	80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80080b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080b6:	d03f      	beq.n	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 80080b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080be:	f200 808b 	bhi.w	80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80080c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80080c8:	d028      	beq.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 80080ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080cc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80080d0:	f200 8082 	bhi.w	80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80080d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080da:	d017      	beq.n	800810c <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 80080dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080e2:	d879      	bhi.n	80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80080e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d004      	beq.n	80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 80080ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080f0:	d004      	beq.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 80080f2:	e071      	b.n	80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80080f4:	f7fd fa3c 	bl	8005570 <HAL_RCC_GetPCLK1Freq>
 80080f8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80080fa:	e070      	b.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080fc:	f107 0314 	add.w	r3, r7, #20
 8008100:	4618      	mov	r0, r3
 8008102:	f7fe fda3 	bl	8006c4c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800810a:	e068      	b.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800810c:	f107 0308 	add.w	r3, r7, #8
 8008110:	4618      	mov	r0, r3
 8008112:	f7fe ff07 	bl	8006f24 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800811a:	e060      	b.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800811c:	4b0c      	ldr	r3, [pc, #48]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800811e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008122:	f003 0302 	and.w	r3, r3, #2
 8008126:	2b02      	cmp	r3, #2
 8008128:	d103      	bne.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 800812a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800812e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008130:	e055      	b.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 8008132:	2300      	movs	r3, #0
 8008134:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008136:	e052      	b.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008138:	4b05      	ldr	r3, [pc, #20]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800813a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800813e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008142:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008146:	d10b      	bne.n	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 8008148:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800814c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800814e:	e046      	b.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8008150:	44020c00 	.word	0x44020c00
 8008154:	03d09000 	.word	0x03d09000
 8008158:	003d0900 	.word	0x003d0900
 800815c:	007a1200 	.word	0x007a1200
              frequency = 0;
 8008160:	2300      	movs	r3, #0
 8008162:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008164:	e03b      	b.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008166:	4bae      	ldr	r3, [pc, #696]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008168:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800816c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008170:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008172:	4bab      	ldr	r3, [pc, #684]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 0302 	and.w	r3, r3, #2
 800817a:	2b02      	cmp	r3, #2
 800817c:	d10c      	bne.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 800817e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008180:	2b00      	cmp	r3, #0
 8008182:	d109      	bne.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008184:	4ba6      	ldr	r3, [pc, #664]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	08db      	lsrs	r3, r3, #3
 800818a:	f003 0303 	and.w	r3, r3, #3
 800818e:	4aa5      	ldr	r2, [pc, #660]	@ (8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8008190:	fa22 f303 	lsr.w	r3, r2, r3
 8008194:	637b      	str	r3, [r7, #52]	@ 0x34
 8008196:	e01e      	b.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008198:	4ba1      	ldr	r3, [pc, #644]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80081a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081a4:	d106      	bne.n	80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 80081a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081ac:	d102      	bne.n	80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80081ae:	4b9e      	ldr	r3, [pc, #632]	@ (8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 80081b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80081b2:	e010      	b.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80081b4:	4b9a      	ldr	r3, [pc, #616]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081c0:	d106      	bne.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 80081c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081c8:	d102      	bne.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80081ca:	4b98      	ldr	r3, [pc, #608]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 80081cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80081ce:	e002      	b.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80081d0:	2300      	movs	r3, #0
 80081d2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80081d4:	e003      	b.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 80081d6:	e002      	b.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 80081d8:	2300      	movs	r3, #0
 80081da:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80081dc:	bf00      	nop
          }
        }
        break;
 80081de:	e34e      	b.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80081e0:	4b8f      	ldr	r3, [pc, #572]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80081e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80081e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081ea:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80081ec:	4b8c      	ldr	r3, [pc, #560]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081f8:	d105      	bne.n	8008206 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 80081fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d102      	bne.n	8008206 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 8008200:	4b8a      	ldr	r3, [pc, #552]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8008202:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8008204:	e33b      	b.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8008206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008208:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800820c:	d107      	bne.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800820e:	f107 0320 	add.w	r3, r7, #32
 8008212:	4618      	mov	r0, r3
 8008214:	f7fe fbae 	bl	8006974 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800821a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800821c:	e32f      	b.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800821e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008224:	d107      	bne.n	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008226:	f107 0314 	add.w	r3, r7, #20
 800822a:	4618      	mov	r0, r3
 800822c:	f7fe fd0e 	bl	8006c4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008234:	e323      	b.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8008236:	2300      	movs	r3, #0
 8008238:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800823a:	e320      	b.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800823c:	4b78      	ldr	r3, [pc, #480]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800823e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008242:	f003 0307 	and.w	r3, r3, #7
 8008246:	633b      	str	r3, [r7, #48]	@ 0x30
 8008248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800824a:	2b04      	cmp	r3, #4
 800824c:	d860      	bhi.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 800824e:	a201      	add	r2, pc, #4	@ (adr r2, 8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8008250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008254:	08008269 	.word	0x08008269
 8008258:	08008279 	.word	0x08008279
 800825c:	08008289 	.word	0x08008289
 8008260:	08008299 	.word	0x08008299
 8008264:	0800829f 	.word	0x0800829f
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008268:	f107 0320 	add.w	r3, r7, #32
 800826c:	4618      	mov	r0, r3
 800826e:	f7fe fb81 	bl	8006974 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008274:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008276:	e04e      	b.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008278:	f107 0314 	add.w	r3, r7, #20
 800827c:	4618      	mov	r0, r3
 800827e:	f7fe fce5 	bl	8006c4c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008286:	e046      	b.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008288:	f107 0308 	add.w	r3, r7, #8
 800828c:	4618      	mov	r0, r3
 800828e:	f7fe fe49 	bl	8006f24 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008296:	e03e      	b.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008298:	4b65      	ldr	r3, [pc, #404]	@ (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 800829a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800829c:	e03b      	b.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800829e:	4b60      	ldr	r3, [pc, #384]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80082a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80082a4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80082a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082aa:	4b5d      	ldr	r3, [pc, #372]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f003 0302 	and.w	r3, r3, #2
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d10c      	bne.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 80082b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d109      	bne.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80082bc:	4b58      	ldr	r3, [pc, #352]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	08db      	lsrs	r3, r3, #3
 80082c2:	f003 0303 	and.w	r3, r3, #3
 80082c6:	4a57      	ldr	r2, [pc, #348]	@ (8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 80082c8:	fa22 f303 	lsr.w	r3, r2, r3
 80082cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80082ce:	e01e      	b.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082d0:	4b53      	ldr	r3, [pc, #332]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80082d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082dc:	d106      	bne.n	80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 80082de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082e4:	d102      	bne.n	80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80082e6:	4b50      	ldr	r3, [pc, #320]	@ (8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 80082e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80082ea:	e010      	b.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082ec:	4b4c      	ldr	r3, [pc, #304]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082f8:	d106      	bne.n	8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 80082fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008300:	d102      	bne.n	8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008302:	4b4a      	ldr	r3, [pc, #296]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8008304:	637b      	str	r3, [r7, #52]	@ 0x34
 8008306:	e002      	b.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008308:	2300      	movs	r3, #0
 800830a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800830c:	e003      	b.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 800830e:	e002      	b.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 8008310:	2300      	movs	r3, #0
 8008312:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008314:	bf00      	nop
          }
        }
        break;
 8008316:	e2b2      	b.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008318:	4b41      	ldr	r3, [pc, #260]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800831a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800831e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008322:	633b      	str	r3, [r7, #48]	@ 0x30
 8008324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008326:	2b20      	cmp	r3, #32
 8008328:	f200 80a4 	bhi.w	8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 800832c:	a201      	add	r2, pc, #4	@ (adr r2, 8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 800832e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008332:	bf00      	nop
 8008334:	080083b9 	.word	0x080083b9
 8008338:	08008475 	.word	0x08008475
 800833c:	08008475 	.word	0x08008475
 8008340:	08008475 	.word	0x08008475
 8008344:	08008475 	.word	0x08008475
 8008348:	08008475 	.word	0x08008475
 800834c:	08008475 	.word	0x08008475
 8008350:	08008475 	.word	0x08008475
 8008354:	080083c9 	.word	0x080083c9
 8008358:	08008475 	.word	0x08008475
 800835c:	08008475 	.word	0x08008475
 8008360:	08008475 	.word	0x08008475
 8008364:	08008475 	.word	0x08008475
 8008368:	08008475 	.word	0x08008475
 800836c:	08008475 	.word	0x08008475
 8008370:	08008475 	.word	0x08008475
 8008374:	080083d9 	.word	0x080083d9
 8008378:	08008475 	.word	0x08008475
 800837c:	08008475 	.word	0x08008475
 8008380:	08008475 	.word	0x08008475
 8008384:	08008475 	.word	0x08008475
 8008388:	08008475 	.word	0x08008475
 800838c:	08008475 	.word	0x08008475
 8008390:	08008475 	.word	0x08008475
 8008394:	080083e9 	.word	0x080083e9
 8008398:	08008475 	.word	0x08008475
 800839c:	08008475 	.word	0x08008475
 80083a0:	08008475 	.word	0x08008475
 80083a4:	08008475 	.word	0x08008475
 80083a8:	08008475 	.word	0x08008475
 80083ac:	08008475 	.word	0x08008475
 80083b0:	08008475 	.word	0x08008475
 80083b4:	080083ef 	.word	0x080083ef
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083b8:	f107 0320 	add.w	r3, r7, #32
 80083bc:	4618      	mov	r0, r3
 80083be:	f7fe fad9 	bl	8006974 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80083c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80083c6:	e058      	b.n	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083c8:	f107 0314 	add.w	r3, r7, #20
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7fe fc3d 	bl	8006c4c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80083d6:	e050      	b.n	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083d8:	f107 0308 	add.w	r3, r7, #8
 80083dc:	4618      	mov	r0, r3
 80083de:	f7fe fda1 	bl	8006f24 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80083e6:	e048      	b.n	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80083e8:	4b11      	ldr	r3, [pc, #68]	@ (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 80083ea:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80083ec:	e045      	b.n	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80083ee:	4b0c      	ldr	r3, [pc, #48]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80083f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80083f4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80083f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083fa:	4b09      	ldr	r3, [pc, #36]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f003 0302 	and.w	r3, r3, #2
 8008402:	2b02      	cmp	r3, #2
 8008404:	d116      	bne.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 8008406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008408:	2b00      	cmp	r3, #0
 800840a:	d113      	bne.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800840c:	4b04      	ldr	r3, [pc, #16]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	08db      	lsrs	r3, r3, #3
 8008412:	f003 0303 	and.w	r3, r3, #3
 8008416:	4a03      	ldr	r2, [pc, #12]	@ (8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8008418:	fa22 f303 	lsr.w	r3, r2, r3
 800841c:	637b      	str	r3, [r7, #52]	@ 0x34
 800841e:	e028      	b.n	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8008420:	44020c00 	.word	0x44020c00
 8008424:	03d09000 	.word	0x03d09000
 8008428:	003d0900 	.word	0x003d0900
 800842c:	007a1200 	.word	0x007a1200
 8008430:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008434:	4b95      	ldr	r3, [pc, #596]	@ (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800843c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008440:	d106      	bne.n	8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 8008442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008444:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008448:	d102      	bne.n	8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800844a:	4b91      	ldr	r3, [pc, #580]	@ (8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 800844c:	637b      	str	r3, [r7, #52]	@ 0x34
 800844e:	e010      	b.n	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008450:	4b8e      	ldr	r3, [pc, #568]	@ (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008458:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800845c:	d106      	bne.n	800846c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 800845e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008460:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008464:	d102      	bne.n	800846c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008466:	4b8b      	ldr	r3, [pc, #556]	@ (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8008468:	637b      	str	r3, [r7, #52]	@ 0x34
 800846a:	e002      	b.n	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800846c:	2300      	movs	r3, #0
 800846e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008470:	e003      	b.n	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8008472:	e002      	b.n	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 8008474:	2300      	movs	r3, #0
 8008476:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008478:	bf00      	nop
          }
        }
        break;
 800847a:	e200      	b.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800847c:	4b83      	ldr	r3, [pc, #524]	@ (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800847e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008482:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008486:	633b      	str	r3, [r7, #48]	@ 0x30
 8008488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800848a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800848e:	d031      	beq.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8008490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008492:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008496:	d866      	bhi.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8008498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849a:	2bc0      	cmp	r3, #192	@ 0xc0
 800849c:	d027      	beq.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 800849e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a0:	2bc0      	cmp	r3, #192	@ 0xc0
 80084a2:	d860      	bhi.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 80084a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a6:	2b80      	cmp	r3, #128	@ 0x80
 80084a8:	d019      	beq.n	80084de <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 80084aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ac:	2b80      	cmp	r3, #128	@ 0x80
 80084ae:	d85a      	bhi.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 80084b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d003      	beq.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 80084b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b8:	2b40      	cmp	r3, #64	@ 0x40
 80084ba:	d008      	beq.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 80084bc:	e053      	b.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084be:	f107 0320 	add.w	r3, r7, #32
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7fe fa56 	bl	8006974 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80084c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80084cc:	e04e      	b.n	800856c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084ce:	f107 0314 	add.w	r3, r7, #20
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7fe fbba 	bl	8006c4c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80084dc:	e046      	b.n	800856c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084de:	f107 0308 	add.w	r3, r7, #8
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7fe fd1e 	bl	8006f24 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80084ec:	e03e      	b.n	800856c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80084ee:	4b6a      	ldr	r3, [pc, #424]	@ (8008698 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 80084f0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80084f2:	e03b      	b.n	800856c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80084f4:	4b65      	ldr	r3, [pc, #404]	@ (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80084f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80084fa:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80084fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008500:	4b62      	ldr	r3, [pc, #392]	@ (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 0302 	and.w	r3, r3, #2
 8008508:	2b02      	cmp	r3, #2
 800850a:	d10c      	bne.n	8008526 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 800850c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800850e:	2b00      	cmp	r3, #0
 8008510:	d109      	bne.n	8008526 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008512:	4b5e      	ldr	r3, [pc, #376]	@ (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	08db      	lsrs	r3, r3, #3
 8008518:	f003 0303 	and.w	r3, r3, #3
 800851c:	4a5f      	ldr	r2, [pc, #380]	@ (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 800851e:	fa22 f303 	lsr.w	r3, r2, r3
 8008522:	637b      	str	r3, [r7, #52]	@ 0x34
 8008524:	e01e      	b.n	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008526:	4b59      	ldr	r3, [pc, #356]	@ (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800852e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008532:	d106      	bne.n	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8008534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800853a:	d102      	bne.n	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800853c:	4b54      	ldr	r3, [pc, #336]	@ (8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 800853e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008540:	e010      	b.n	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008542:	4b52      	ldr	r3, [pc, #328]	@ (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800854a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800854e:	d106      	bne.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 8008550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008552:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008556:	d102      	bne.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008558:	4b4e      	ldr	r3, [pc, #312]	@ (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 800855a:	637b      	str	r3, [r7, #52]	@ 0x34
 800855c:	e002      	b.n	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800855e:	2300      	movs	r3, #0
 8008560:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008562:	e003      	b.n	800856c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 8008564:	e002      	b.n	800856c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 8008566:	2300      	movs	r3, #0
 8008568:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800856a:	bf00      	nop
          }
        }
        break;
 800856c:	e187      	b.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800856e:	4b47      	ldr	r3, [pc, #284]	@ (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8008570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008574:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8008578:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800857a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857c:	2b00      	cmp	r3, #0
 800857e:	d103      	bne.n	8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008580:	f7fd f80c 	bl	800559c <HAL_RCC_GetPCLK2Freq>
 8008584:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008586:	e17a      	b.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8008588:	4b40      	ldr	r3, [pc, #256]	@ (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008590:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008594:	d10b      	bne.n	80085ae <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8008596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008598:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800859c:	d107      	bne.n	80085ae <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800859e:	f107 0314 	add.w	r3, r7, #20
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fe fb52 	bl	8006c4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80085ac:	e045      	b.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 80085ae:	4b37      	ldr	r3, [pc, #220]	@ (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085ba:	d10b      	bne.n	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 80085bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085c2:	d107      	bne.n	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085c4:	f107 0308 	add.w	r3, r7, #8
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7fe fcab 	bl	8006f24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80085d2:	e032      	b.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 80085d4:	4b2d      	ldr	r3, [pc, #180]	@ (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 0302 	and.w	r3, r3, #2
 80085dc:	2b02      	cmp	r3, #2
 80085de:	d10d      	bne.n	80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 80085e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80085e6:	d109      	bne.n	80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80085e8:	4b28      	ldr	r3, [pc, #160]	@ (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	08db      	lsrs	r3, r3, #3
 80085ee:	f003 0303 	and.w	r3, r3, #3
 80085f2:	4a2a      	ldr	r2, [pc, #168]	@ (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 80085f4:	fa22 f303 	lsr.w	r3, r2, r3
 80085f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80085fa:	e01e      	b.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 80085fc:	4b23      	ldr	r3, [pc, #140]	@ (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008604:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008608:	d106      	bne.n	8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 800860a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008610:	d102      	bne.n	8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 8008612:	4b1f      	ldr	r3, [pc, #124]	@ (8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8008614:	637b      	str	r3, [r7, #52]	@ 0x34
 8008616:	e010      	b.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8008618:	4b1c      	ldr	r3, [pc, #112]	@ (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008620:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008624:	d106      	bne.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 8008626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008628:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800862c:	d102      	bne.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 800862e:	4b19      	ldr	r3, [pc, #100]	@ (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8008630:	637b      	str	r3, [r7, #52]	@ 0x34
 8008632:	e002      	b.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 8008634:	2300      	movs	r3, #0
 8008636:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008638:	e121      	b.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800863a:	e120      	b.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800863c:	4b13      	ldr	r3, [pc, #76]	@ (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800863e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008642:	f003 0303 	and.w	r3, r3, #3
 8008646:	633b      	str	r3, [r7, #48]	@ 0x30
 8008648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864a:	2b03      	cmp	r3, #3
 800864c:	d861      	bhi.n	8008712 <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 800864e:	a201      	add	r2, pc, #4	@ (adr r2, 8008654 <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 8008650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008654:	08008665 	.word	0x08008665
 8008658:	0800866d 	.word	0x0800866d
 800865c:	0800867d 	.word	0x0800867d
 8008660:	080086a1 	.word	0x080086a1

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8008664:	f7fc ff68 	bl	8005538 <HAL_RCC_GetHCLKFreq>
 8008668:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800866a:	e055      	b.n	8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800866c:	f107 0320 	add.w	r3, r7, #32
 8008670:	4618      	mov	r0, r3
 8008672:	f7fe f97f 	bl	8006974 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008678:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800867a:	e04d      	b.n	8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800867c:	f107 0314 	add.w	r3, r7, #20
 8008680:	4618      	mov	r0, r3
 8008682:	f7fe fae3 	bl	8006c4c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800868a:	e045      	b.n	8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800868c:	44020c00 	.word	0x44020c00
 8008690:	003d0900 	.word	0x003d0900
 8008694:	007a1200 	.word	0x007a1200
 8008698:	00bb8000 	.word	0x00bb8000
 800869c:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80086a0:	4b79      	ldr	r3, [pc, #484]	@ (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80086a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80086a6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80086aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086ac:	4b76      	ldr	r3, [pc, #472]	@ (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 0302 	and.w	r3, r3, #2
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	d10c      	bne.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 80086b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d109      	bne.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80086be:	4b72      	ldr	r3, [pc, #456]	@ (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	08db      	lsrs	r3, r3, #3
 80086c4:	f003 0303 	and.w	r3, r3, #3
 80086c8:	4a70      	ldr	r2, [pc, #448]	@ (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 80086ca:	fa22 f303 	lsr.w	r3, r2, r3
 80086ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80086d0:	e01e      	b.n	8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086d2:	4b6d      	ldr	r3, [pc, #436]	@ (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80086da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086de:	d106      	bne.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 80086e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086e6:	d102      	bne.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80086e8:	4b69      	ldr	r3, [pc, #420]	@ (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 80086ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80086ec:	e010      	b.n	8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086ee:	4b66      	ldr	r3, [pc, #408]	@ (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086fa:	d106      	bne.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 80086fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008702:	d102      	bne.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008704:	4b63      	ldr	r3, [pc, #396]	@ (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 8008706:	637b      	str	r3, [r7, #52]	@ 0x34
 8008708:	e002      	b.n	8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800870a:	2300      	movs	r3, #0
 800870c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800870e:	e003      	b.n	8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8008710:	e002      	b.n	8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 8008712:	2300      	movs	r3, #0
 8008714:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008716:	bf00      	nop
          }
        }
        break;
 8008718:	e0b1      	b.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800871a:	4b5b      	ldr	r3, [pc, #364]	@ (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800871c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008720:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008724:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8008726:	4b58      	ldr	r3, [pc, #352]	@ (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8008728:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800872c:	f003 0302 	and.w	r3, r3, #2
 8008730:	2b02      	cmp	r3, #2
 8008732:	d106      	bne.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 8008734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008736:	2b00      	cmp	r3, #0
 8008738:	d103      	bne.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 800873a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800873e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008740:	e01f      	b.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8008742:	4b51      	ldr	r3, [pc, #324]	@ (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8008744:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008748:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800874c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008750:	d106      	bne.n	8008760 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 8008752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008754:	2b40      	cmp	r3, #64	@ 0x40
 8008756:	d103      	bne.n	8008760 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 8008758:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800875c:	637b      	str	r3, [r7, #52]	@ 0x34
 800875e:	e010      	b.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8008760:	4b49      	ldr	r3, [pc, #292]	@ (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008768:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800876c:	d106      	bne.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 800876e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008770:	2b80      	cmp	r3, #128	@ 0x80
 8008772:	d103      	bne.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 8008774:	f248 0312 	movw	r3, #32786	@ 0x8012
 8008778:	637b      	str	r3, [r7, #52]	@ 0x34
 800877a:	e002      	b.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800877c:	2300      	movs	r3, #0
 800877e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8008780:	e07d      	b.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008782:	e07c      	b.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008784:	4b40      	ldr	r3, [pc, #256]	@ (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8008786:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800878a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800878e:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008790:	4b3d      	ldr	r3, [pc, #244]	@ (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008798:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800879c:	d105      	bne.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 800879e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d102      	bne.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 80087a4:	4b3c      	ldr	r3, [pc, #240]	@ (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 80087a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80087a8:	e031      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80087aa:	4b37      	ldr	r3, [pc, #220]	@ (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80087b6:	d10a      	bne.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 80087b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ba:	2b10      	cmp	r3, #16
 80087bc:	d107      	bne.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087be:	f107 0320 	add.w	r3, r7, #32
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7fe f8d6 	bl	8006974 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80087cc:	e01f      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 80087ce:	4b2e      	ldr	r3, [pc, #184]	@ (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80087d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80087d4:	f003 0302 	and.w	r3, r3, #2
 80087d8:	2b02      	cmp	r3, #2
 80087da:	d106      	bne.n	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 80087dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087de:	2b20      	cmp	r3, #32
 80087e0:	d103      	bne.n	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 80087e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80087e8:	e011      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 80087ea:	4b27      	ldr	r3, [pc, #156]	@ (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80087ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80087f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087f8:	d106      	bne.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 80087fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fc:	2b30      	cmp	r3, #48	@ 0x30
 80087fe:	d103      	bne.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 8008800:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008804:	637b      	str	r3, [r7, #52]	@ 0x34
 8008806:	e002      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8008808:	2300      	movs	r3, #0
 800880a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800880c:	e037      	b.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800880e:	e036      	b.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8008810:	4b1d      	ldr	r3, [pc, #116]	@ (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8008812:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008816:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800881a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800881c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800881e:	2b10      	cmp	r3, #16
 8008820:	d107      	bne.n	8008832 <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008822:	f107 0320 	add.w	r3, r7, #32
 8008826:	4618      	mov	r0, r3
 8008828:	f7fe f8a4 	bl	8006974 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800882c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800882e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008830:	e025      	b.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8008832:	4b15      	ldr	r3, [pc, #84]	@ (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800883a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800883e:	d10a      	bne.n	8008856 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 8008840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008842:	2b20      	cmp	r3, #32
 8008844:	d107      	bne.n	8008856 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008846:	f107 0308 	add.w	r3, r7, #8
 800884a:	4618      	mov	r0, r3
 800884c:	f7fe fb6a 	bl	8006f24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	637b      	str	r3, [r7, #52]	@ 0x34
 8008854:	e00f      	b.n	8008876 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8008856:	4b0c      	ldr	r3, [pc, #48]	@ (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800885e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008862:	d105      	bne.n	8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 8008864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008866:	2b30      	cmp	r3, #48	@ 0x30
 8008868:	d102      	bne.n	8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 800886a:	4b0b      	ldr	r3, [pc, #44]	@ (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 800886c:	637b      	str	r3, [r7, #52]	@ 0x34
 800886e:	e002      	b.n	8008876 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8008870:	2300      	movs	r3, #0
 8008872:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8008874:	e003      	b.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008876:	e002      	b.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 8008878:	2300      	movs	r3, #0
 800887a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800887c:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800887e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008880:	4618      	mov	r0, r3
 8008882:	373c      	adds	r7, #60	@ 0x3c
 8008884:	46bd      	mov	sp, r7
 8008886:	bd90      	pop	{r4, r7, pc}
 8008888:	44020c00 	.word	0x44020c00
 800888c:	03d09000 	.word	0x03d09000
 8008890:	003d0900 	.word	0x003d0900
 8008894:	007a1200 	.word	0x007a1200
 8008898:	02dc6c00 	.word	0x02dc6c00

0800889c <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80088a4:	4b48      	ldr	r3, [pc, #288]	@ (80089c8 <RCCEx_PLL2_Config+0x12c>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a47      	ldr	r2, [pc, #284]	@ (80089c8 <RCCEx_PLL2_Config+0x12c>)
 80088aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80088ae:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80088b0:	f7f9 ffde 	bl	8002870 <HAL_GetTick>
 80088b4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80088b6:	e008      	b.n	80088ca <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80088b8:	f7f9 ffda 	bl	8002870 <HAL_GetTick>
 80088bc:	4602      	mov	r2, r0
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	1ad3      	subs	r3, r2, r3
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d901      	bls.n	80088ca <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80088c6:	2303      	movs	r3, #3
 80088c8:	e07a      	b.n	80089c0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80088ca:	4b3f      	ldr	r3, [pc, #252]	@ (80089c8 <RCCEx_PLL2_Config+0x12c>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d1f0      	bne.n	80088b8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80088d6:	4b3c      	ldr	r3, [pc, #240]	@ (80089c8 <RCCEx_PLL2_Config+0x12c>)
 80088d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088da:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80088de:	f023 0303 	bic.w	r3, r3, #3
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	6811      	ldr	r1, [r2, #0]
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	6852      	ldr	r2, [r2, #4]
 80088ea:	0212      	lsls	r2, r2, #8
 80088ec:	430a      	orrs	r2, r1
 80088ee:	4936      	ldr	r1, [pc, #216]	@ (80089c8 <RCCEx_PLL2_Config+0x12c>)
 80088f0:	4313      	orrs	r3, r2
 80088f2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	3b01      	subs	r3, #1
 80088fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	3b01      	subs	r3, #1
 8008904:	025b      	lsls	r3, r3, #9
 8008906:	b29b      	uxth	r3, r3
 8008908:	431a      	orrs	r2, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	3b01      	subs	r3, #1
 8008910:	041b      	lsls	r3, r3, #16
 8008912:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008916:	431a      	orrs	r2, r3
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	695b      	ldr	r3, [r3, #20]
 800891c:	3b01      	subs	r3, #1
 800891e:	061b      	lsls	r3, r3, #24
 8008920:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008924:	4928      	ldr	r1, [pc, #160]	@ (80089c8 <RCCEx_PLL2_Config+0x12c>)
 8008926:	4313      	orrs	r3, r2
 8008928:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800892a:	4b27      	ldr	r3, [pc, #156]	@ (80089c8 <RCCEx_PLL2_Config+0x12c>)
 800892c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800892e:	f023 020c 	bic.w	r2, r3, #12
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	699b      	ldr	r3, [r3, #24]
 8008936:	4924      	ldr	r1, [pc, #144]	@ (80089c8 <RCCEx_PLL2_Config+0x12c>)
 8008938:	4313      	orrs	r3, r2
 800893a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800893c:	4b22      	ldr	r3, [pc, #136]	@ (80089c8 <RCCEx_PLL2_Config+0x12c>)
 800893e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008940:	f023 0220 	bic.w	r2, r3, #32
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	69db      	ldr	r3, [r3, #28]
 8008948:	491f      	ldr	r1, [pc, #124]	@ (80089c8 <RCCEx_PLL2_Config+0x12c>)
 800894a:	4313      	orrs	r3, r2
 800894c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800894e:	4b1e      	ldr	r3, [pc, #120]	@ (80089c8 <RCCEx_PLL2_Config+0x12c>)
 8008950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008956:	491c      	ldr	r1, [pc, #112]	@ (80089c8 <RCCEx_PLL2_Config+0x12c>)
 8008958:	4313      	orrs	r3, r2
 800895a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800895c:	4b1a      	ldr	r3, [pc, #104]	@ (80089c8 <RCCEx_PLL2_Config+0x12c>)
 800895e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008960:	4a19      	ldr	r2, [pc, #100]	@ (80089c8 <RCCEx_PLL2_Config+0x12c>)
 8008962:	f023 0310 	bic.w	r3, r3, #16
 8008966:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8008968:	4b17      	ldr	r3, [pc, #92]	@ (80089c8 <RCCEx_PLL2_Config+0x12c>)
 800896a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800896c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008970:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	6a12      	ldr	r2, [r2, #32]
 8008978:	00d2      	lsls	r2, r2, #3
 800897a:	4913      	ldr	r1, [pc, #76]	@ (80089c8 <RCCEx_PLL2_Config+0x12c>)
 800897c:	4313      	orrs	r3, r2
 800897e:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8008980:	4b11      	ldr	r3, [pc, #68]	@ (80089c8 <RCCEx_PLL2_Config+0x12c>)
 8008982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008984:	4a10      	ldr	r2, [pc, #64]	@ (80089c8 <RCCEx_PLL2_Config+0x12c>)
 8008986:	f043 0310 	orr.w	r3, r3, #16
 800898a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800898c:	4b0e      	ldr	r3, [pc, #56]	@ (80089c8 <RCCEx_PLL2_Config+0x12c>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a0d      	ldr	r2, [pc, #52]	@ (80089c8 <RCCEx_PLL2_Config+0x12c>)
 8008992:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008996:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008998:	f7f9 ff6a 	bl	8002870 <HAL_GetTick>
 800899c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800899e:	e008      	b.n	80089b2 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80089a0:	f7f9 ff66 	bl	8002870 <HAL_GetTick>
 80089a4:	4602      	mov	r2, r0
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	d901      	bls.n	80089b2 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80089ae:	2303      	movs	r3, #3
 80089b0:	e006      	b.n	80089c0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80089b2:	4b05      	ldr	r3, [pc, #20]	@ (80089c8 <RCCEx_PLL2_Config+0x12c>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d0f0      	beq.n	80089a0 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80089be:	2300      	movs	r3, #0

}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}
 80089c8:	44020c00 	.word	0x44020c00

080089cc <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 80089d4:	4b48      	ldr	r3, [pc, #288]	@ (8008af8 <RCCEx_PLL3_Config+0x12c>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a47      	ldr	r2, [pc, #284]	@ (8008af8 <RCCEx_PLL3_Config+0x12c>)
 80089da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089de:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80089e0:	f7f9 ff46 	bl	8002870 <HAL_GetTick>
 80089e4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80089e6:	e008      	b.n	80089fa <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80089e8:	f7f9 ff42 	bl	8002870 <HAL_GetTick>
 80089ec:	4602      	mov	r2, r0
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	2b02      	cmp	r3, #2
 80089f4:	d901      	bls.n	80089fa <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80089f6:	2303      	movs	r3, #3
 80089f8:	e07a      	b.n	8008af0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80089fa:	4b3f      	ldr	r3, [pc, #252]	@ (8008af8 <RCCEx_PLL3_Config+0x12c>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d1f0      	bne.n	80089e8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008a06:	4b3c      	ldr	r3, [pc, #240]	@ (8008af8 <RCCEx_PLL3_Config+0x12c>)
 8008a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a0a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008a0e:	f023 0303 	bic.w	r3, r3, #3
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	6811      	ldr	r1, [r2, #0]
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	6852      	ldr	r2, [r2, #4]
 8008a1a:	0212      	lsls	r2, r2, #8
 8008a1c:	430a      	orrs	r2, r1
 8008a1e:	4936      	ldr	r1, [pc, #216]	@ (8008af8 <RCCEx_PLL3_Config+0x12c>)
 8008a20:	4313      	orrs	r3, r2
 8008a22:	630b      	str	r3, [r1, #48]	@ 0x30
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	3b01      	subs	r3, #1
 8008a34:	025b      	lsls	r3, r3, #9
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	431a      	orrs	r2, r3
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	691b      	ldr	r3, [r3, #16]
 8008a3e:	3b01      	subs	r3, #1
 8008a40:	041b      	lsls	r3, r3, #16
 8008a42:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008a46:	431a      	orrs	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	695b      	ldr	r3, [r3, #20]
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	061b      	lsls	r3, r3, #24
 8008a50:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008a54:	4928      	ldr	r1, [pc, #160]	@ (8008af8 <RCCEx_PLL3_Config+0x12c>)
 8008a56:	4313      	orrs	r3, r2
 8008a58:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008a5a:	4b27      	ldr	r3, [pc, #156]	@ (8008af8 <RCCEx_PLL3_Config+0x12c>)
 8008a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a5e:	f023 020c 	bic.w	r2, r3, #12
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	699b      	ldr	r3, [r3, #24]
 8008a66:	4924      	ldr	r1, [pc, #144]	@ (8008af8 <RCCEx_PLL3_Config+0x12c>)
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8008a6c:	4b22      	ldr	r3, [pc, #136]	@ (8008af8 <RCCEx_PLL3_Config+0x12c>)
 8008a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a70:	f023 0220 	bic.w	r2, r3, #32
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	69db      	ldr	r3, [r3, #28]
 8008a78:	491f      	ldr	r1, [pc, #124]	@ (8008af8 <RCCEx_PLL3_Config+0x12c>)
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8008af8 <RCCEx_PLL3_Config+0x12c>)
 8008a80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a86:	491c      	ldr	r1, [pc, #112]	@ (8008af8 <RCCEx_PLL3_Config+0x12c>)
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8008a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8008af8 <RCCEx_PLL3_Config+0x12c>)
 8008a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a90:	4a19      	ldr	r2, [pc, #100]	@ (8008af8 <RCCEx_PLL3_Config+0x12c>)
 8008a92:	f023 0310 	bic.w	r3, r3, #16
 8008a96:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8008a98:	4b17      	ldr	r3, [pc, #92]	@ (8008af8 <RCCEx_PLL3_Config+0x12c>)
 8008a9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a9c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008aa0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	6a12      	ldr	r2, [r2, #32]
 8008aa8:	00d2      	lsls	r2, r2, #3
 8008aaa:	4913      	ldr	r1, [pc, #76]	@ (8008af8 <RCCEx_PLL3_Config+0x12c>)
 8008aac:	4313      	orrs	r3, r2
 8008aae:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8008ab0:	4b11      	ldr	r3, [pc, #68]	@ (8008af8 <RCCEx_PLL3_Config+0x12c>)
 8008ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ab4:	4a10      	ldr	r2, [pc, #64]	@ (8008af8 <RCCEx_PLL3_Config+0x12c>)
 8008ab6:	f043 0310 	orr.w	r3, r3, #16
 8008aba:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8008abc:	4b0e      	ldr	r3, [pc, #56]	@ (8008af8 <RCCEx_PLL3_Config+0x12c>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8008af8 <RCCEx_PLL3_Config+0x12c>)
 8008ac2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ac6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008ac8:	f7f9 fed2 	bl	8002870 <HAL_GetTick>
 8008acc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ace:	e008      	b.n	8008ae2 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008ad0:	f7f9 fece 	bl	8002870 <HAL_GetTick>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	1ad3      	subs	r3, r2, r3
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d901      	bls.n	8008ae2 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8008ade:	2303      	movs	r3, #3
 8008ae0:	e006      	b.n	8008af0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ae2:	4b05      	ldr	r3, [pc, #20]	@ (8008af8 <RCCEx_PLL3_Config+0x12c>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d0f0      	beq.n	8008ad0 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	44020c00 	.word	0x44020c00

08008afc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d101      	bne.n	8008b0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e049      	b.n	8008ba2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d106      	bne.n	8008b28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f7f9 fb6e 	bl	8002204 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2202      	movs	r2, #2
 8008b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	3304      	adds	r3, #4
 8008b38:	4619      	mov	r1, r3
 8008b3a:	4610      	mov	r0, r2
 8008b3c:	f000 ff0e 	bl	800995c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2201      	movs	r2, #1
 8008b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3708      	adds	r7, #8
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
	...

08008bac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d001      	beq.n	8008bc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e07c      	b.n	8008cbe <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2202      	movs	r2, #2
 8008bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	68da      	ldr	r2, [r3, #12]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f042 0201 	orr.w	r2, r2, #1
 8008bda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a3a      	ldr	r2, [pc, #232]	@ (8008ccc <HAL_TIM_Base_Start_IT+0x120>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d04a      	beq.n	8008c7c <HAL_TIM_Base_Start_IT+0xd0>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a39      	ldr	r2, [pc, #228]	@ (8008cd0 <HAL_TIM_Base_Start_IT+0x124>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d045      	beq.n	8008c7c <HAL_TIM_Base_Start_IT+0xd0>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bf8:	d040      	beq.n	8008c7c <HAL_TIM_Base_Start_IT+0xd0>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c02:	d03b      	beq.n	8008c7c <HAL_TIM_Base_Start_IT+0xd0>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a32      	ldr	r2, [pc, #200]	@ (8008cd4 <HAL_TIM_Base_Start_IT+0x128>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d036      	beq.n	8008c7c <HAL_TIM_Base_Start_IT+0xd0>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a31      	ldr	r2, [pc, #196]	@ (8008cd8 <HAL_TIM_Base_Start_IT+0x12c>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d031      	beq.n	8008c7c <HAL_TIM_Base_Start_IT+0xd0>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a2f      	ldr	r2, [pc, #188]	@ (8008cdc <HAL_TIM_Base_Start_IT+0x130>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d02c      	beq.n	8008c7c <HAL_TIM_Base_Start_IT+0xd0>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a2e      	ldr	r2, [pc, #184]	@ (8008ce0 <HAL_TIM_Base_Start_IT+0x134>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d027      	beq.n	8008c7c <HAL_TIM_Base_Start_IT+0xd0>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a2c      	ldr	r2, [pc, #176]	@ (8008ce4 <HAL_TIM_Base_Start_IT+0x138>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d022      	beq.n	8008c7c <HAL_TIM_Base_Start_IT+0xd0>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a2b      	ldr	r2, [pc, #172]	@ (8008ce8 <HAL_TIM_Base_Start_IT+0x13c>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d01d      	beq.n	8008c7c <HAL_TIM_Base_Start_IT+0xd0>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a29      	ldr	r2, [pc, #164]	@ (8008cec <HAL_TIM_Base_Start_IT+0x140>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d018      	beq.n	8008c7c <HAL_TIM_Base_Start_IT+0xd0>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a28      	ldr	r2, [pc, #160]	@ (8008cf0 <HAL_TIM_Base_Start_IT+0x144>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d013      	beq.n	8008c7c <HAL_TIM_Base_Start_IT+0xd0>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a26      	ldr	r2, [pc, #152]	@ (8008cf4 <HAL_TIM_Base_Start_IT+0x148>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d00e      	beq.n	8008c7c <HAL_TIM_Base_Start_IT+0xd0>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a25      	ldr	r2, [pc, #148]	@ (8008cf8 <HAL_TIM_Base_Start_IT+0x14c>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d009      	beq.n	8008c7c <HAL_TIM_Base_Start_IT+0xd0>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a23      	ldr	r2, [pc, #140]	@ (8008cfc <HAL_TIM_Base_Start_IT+0x150>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d004      	beq.n	8008c7c <HAL_TIM_Base_Start_IT+0xd0>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a22      	ldr	r2, [pc, #136]	@ (8008d00 <HAL_TIM_Base_Start_IT+0x154>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d115      	bne.n	8008ca8 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	689a      	ldr	r2, [r3, #8]
 8008c82:	4b20      	ldr	r3, [pc, #128]	@ (8008d04 <HAL_TIM_Base_Start_IT+0x158>)
 8008c84:	4013      	ands	r3, r2
 8008c86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2b06      	cmp	r3, #6
 8008c8c:	d015      	beq.n	8008cba <HAL_TIM_Base_Start_IT+0x10e>
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c94:	d011      	beq.n	8008cba <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f042 0201 	orr.w	r2, r2, #1
 8008ca4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ca6:	e008      	b.n	8008cba <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f042 0201 	orr.w	r2, r2, #1
 8008cb6:	601a      	str	r2, [r3, #0]
 8008cb8:	e000      	b.n	8008cbc <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3714      	adds	r7, #20
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	40012c00 	.word	0x40012c00
 8008cd0:	50012c00 	.word	0x50012c00
 8008cd4:	40000400 	.word	0x40000400
 8008cd8:	50000400 	.word	0x50000400
 8008cdc:	40000800 	.word	0x40000800
 8008ce0:	50000800 	.word	0x50000800
 8008ce4:	40000c00 	.word	0x40000c00
 8008ce8:	50000c00 	.word	0x50000c00
 8008cec:	40013400 	.word	0x40013400
 8008cf0:	50013400 	.word	0x50013400
 8008cf4:	40001800 	.word	0x40001800
 8008cf8:	50001800 	.word	0x50001800
 8008cfc:	40014000 	.word	0x40014000
 8008d00:	50014000 	.word	0x50014000
 8008d04:	00010007 	.word	0x00010007

08008d08 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d101      	bne.n	8008d1a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e049      	b.n	8008dae <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d106      	bne.n	8008d34 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 f841 	bl	8008db6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2202      	movs	r2, #2
 8008d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	3304      	adds	r3, #4
 8008d44:	4619      	mov	r1, r3
 8008d46:	4610      	mov	r0, r2
 8008d48:	f000 fe08 	bl	800995c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2201      	movs	r2, #1
 8008d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2201      	movs	r2, #1
 8008d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2201      	movs	r2, #1
 8008d88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2201      	movs	r2, #1
 8008d98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3708      	adds	r7, #8
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008db6:	b480      	push	{r7}
 8008db8:	b083      	sub	sp, #12
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008dbe:	bf00      	nop
 8008dc0:	370c      	adds	r7, #12
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr

08008dca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b082      	sub	sp, #8
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d101      	bne.n	8008ddc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e049      	b.n	8008e70 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d106      	bne.n	8008df6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 f841 	bl	8008e78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2202      	movs	r2, #2
 8008dfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	3304      	adds	r3, #4
 8008e06:	4619      	mov	r1, r3
 8008e08:	4610      	mov	r0, r2
 8008e0a:	f000 fda7 	bl	800995c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2201      	movs	r2, #1
 8008e12:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2201      	movs	r2, #1
 8008e22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2201      	movs	r2, #1
 8008e32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2201      	movs	r2, #1
 8008e42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2201      	movs	r2, #1
 8008e52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2201      	movs	r2, #1
 8008e5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2201      	movs	r2, #1
 8008e62:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e6e:	2300      	movs	r3, #0
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3708      	adds	r7, #8
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008e80:	bf00      	nop
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d109      	bne.n	8008eb0 <HAL_TIM_PWM_Start+0x24>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	bf14      	ite	ne
 8008ea8:	2301      	movne	r3, #1
 8008eaa:	2300      	moveq	r3, #0
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	e03c      	b.n	8008f2a <HAL_TIM_PWM_Start+0x9e>
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	2b04      	cmp	r3, #4
 8008eb4:	d109      	bne.n	8008eca <HAL_TIM_PWM_Start+0x3e>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	bf14      	ite	ne
 8008ec2:	2301      	movne	r3, #1
 8008ec4:	2300      	moveq	r3, #0
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	e02f      	b.n	8008f2a <HAL_TIM_PWM_Start+0x9e>
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	2b08      	cmp	r3, #8
 8008ece:	d109      	bne.n	8008ee4 <HAL_TIM_PWM_Start+0x58>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	bf14      	ite	ne
 8008edc:	2301      	movne	r3, #1
 8008ede:	2300      	moveq	r3, #0
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	e022      	b.n	8008f2a <HAL_TIM_PWM_Start+0x9e>
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	2b0c      	cmp	r3, #12
 8008ee8:	d109      	bne.n	8008efe <HAL_TIM_PWM_Start+0x72>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	bf14      	ite	ne
 8008ef6:	2301      	movne	r3, #1
 8008ef8:	2300      	moveq	r3, #0
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	e015      	b.n	8008f2a <HAL_TIM_PWM_Start+0x9e>
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	2b10      	cmp	r3, #16
 8008f02:	d109      	bne.n	8008f18 <HAL_TIM_PWM_Start+0x8c>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	bf14      	ite	ne
 8008f10:	2301      	movne	r3, #1
 8008f12:	2300      	moveq	r3, #0
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	e008      	b.n	8008f2a <HAL_TIM_PWM_Start+0x9e>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	bf14      	ite	ne
 8008f24:	2301      	movne	r3, #1
 8008f26:	2300      	moveq	r3, #0
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d001      	beq.n	8008f32 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e0ce      	b.n	80090d0 <HAL_TIM_PWM_Start+0x244>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d104      	bne.n	8008f42 <HAL_TIM_PWM_Start+0xb6>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2202      	movs	r2, #2
 8008f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f40:	e023      	b.n	8008f8a <HAL_TIM_PWM_Start+0xfe>
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	2b04      	cmp	r3, #4
 8008f46:	d104      	bne.n	8008f52 <HAL_TIM_PWM_Start+0xc6>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2202      	movs	r2, #2
 8008f4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f50:	e01b      	b.n	8008f8a <HAL_TIM_PWM_Start+0xfe>
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	2b08      	cmp	r3, #8
 8008f56:	d104      	bne.n	8008f62 <HAL_TIM_PWM_Start+0xd6>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2202      	movs	r2, #2
 8008f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f60:	e013      	b.n	8008f8a <HAL_TIM_PWM_Start+0xfe>
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	2b0c      	cmp	r3, #12
 8008f66:	d104      	bne.n	8008f72 <HAL_TIM_PWM_Start+0xe6>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2202      	movs	r2, #2
 8008f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008f70:	e00b      	b.n	8008f8a <HAL_TIM_PWM_Start+0xfe>
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	2b10      	cmp	r3, #16
 8008f76:	d104      	bne.n	8008f82 <HAL_TIM_PWM_Start+0xf6>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2202      	movs	r2, #2
 8008f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008f80:	e003      	b.n	8008f8a <HAL_TIM_PWM_Start+0xfe>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2202      	movs	r2, #2
 8008f86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	6839      	ldr	r1, [r7, #0]
 8008f92:	4618      	mov	r0, r3
 8008f94:	f001 f99e 	bl	800a2d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a4e      	ldr	r2, [pc, #312]	@ (80090d8 <HAL_TIM_PWM_Start+0x24c>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d018      	beq.n	8008fd4 <HAL_TIM_PWM_Start+0x148>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a4d      	ldr	r2, [pc, #308]	@ (80090dc <HAL_TIM_PWM_Start+0x250>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d013      	beq.n	8008fd4 <HAL_TIM_PWM_Start+0x148>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a4b      	ldr	r2, [pc, #300]	@ (80090e0 <HAL_TIM_PWM_Start+0x254>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d00e      	beq.n	8008fd4 <HAL_TIM_PWM_Start+0x148>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a4a      	ldr	r2, [pc, #296]	@ (80090e4 <HAL_TIM_PWM_Start+0x258>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d009      	beq.n	8008fd4 <HAL_TIM_PWM_Start+0x148>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a48      	ldr	r2, [pc, #288]	@ (80090e8 <HAL_TIM_PWM_Start+0x25c>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d004      	beq.n	8008fd4 <HAL_TIM_PWM_Start+0x148>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a47      	ldr	r2, [pc, #284]	@ (80090ec <HAL_TIM_PWM_Start+0x260>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d101      	bne.n	8008fd8 <HAL_TIM_PWM_Start+0x14c>
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e000      	b.n	8008fda <HAL_TIM_PWM_Start+0x14e>
 8008fd8:	2300      	movs	r3, #0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d007      	beq.n	8008fee <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008fec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a39      	ldr	r2, [pc, #228]	@ (80090d8 <HAL_TIM_PWM_Start+0x24c>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d04a      	beq.n	800908e <HAL_TIM_PWM_Start+0x202>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a37      	ldr	r2, [pc, #220]	@ (80090dc <HAL_TIM_PWM_Start+0x250>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d045      	beq.n	800908e <HAL_TIM_PWM_Start+0x202>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800900a:	d040      	beq.n	800908e <HAL_TIM_PWM_Start+0x202>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009014:	d03b      	beq.n	800908e <HAL_TIM_PWM_Start+0x202>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a35      	ldr	r2, [pc, #212]	@ (80090f0 <HAL_TIM_PWM_Start+0x264>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d036      	beq.n	800908e <HAL_TIM_PWM_Start+0x202>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a33      	ldr	r2, [pc, #204]	@ (80090f4 <HAL_TIM_PWM_Start+0x268>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d031      	beq.n	800908e <HAL_TIM_PWM_Start+0x202>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a32      	ldr	r2, [pc, #200]	@ (80090f8 <HAL_TIM_PWM_Start+0x26c>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d02c      	beq.n	800908e <HAL_TIM_PWM_Start+0x202>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a30      	ldr	r2, [pc, #192]	@ (80090fc <HAL_TIM_PWM_Start+0x270>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d027      	beq.n	800908e <HAL_TIM_PWM_Start+0x202>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a2f      	ldr	r2, [pc, #188]	@ (8009100 <HAL_TIM_PWM_Start+0x274>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d022      	beq.n	800908e <HAL_TIM_PWM_Start+0x202>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a2d      	ldr	r2, [pc, #180]	@ (8009104 <HAL_TIM_PWM_Start+0x278>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d01d      	beq.n	800908e <HAL_TIM_PWM_Start+0x202>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a22      	ldr	r2, [pc, #136]	@ (80090e0 <HAL_TIM_PWM_Start+0x254>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d018      	beq.n	800908e <HAL_TIM_PWM_Start+0x202>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a20      	ldr	r2, [pc, #128]	@ (80090e4 <HAL_TIM_PWM_Start+0x258>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d013      	beq.n	800908e <HAL_TIM_PWM_Start+0x202>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a27      	ldr	r2, [pc, #156]	@ (8009108 <HAL_TIM_PWM_Start+0x27c>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d00e      	beq.n	800908e <HAL_TIM_PWM_Start+0x202>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a25      	ldr	r2, [pc, #148]	@ (800910c <HAL_TIM_PWM_Start+0x280>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d009      	beq.n	800908e <HAL_TIM_PWM_Start+0x202>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a1a      	ldr	r2, [pc, #104]	@ (80090e8 <HAL_TIM_PWM_Start+0x25c>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d004      	beq.n	800908e <HAL_TIM_PWM_Start+0x202>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a18      	ldr	r2, [pc, #96]	@ (80090ec <HAL_TIM_PWM_Start+0x260>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d115      	bne.n	80090ba <HAL_TIM_PWM_Start+0x22e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	689a      	ldr	r2, [r3, #8]
 8009094:	4b1e      	ldr	r3, [pc, #120]	@ (8009110 <HAL_TIM_PWM_Start+0x284>)
 8009096:	4013      	ands	r3, r2
 8009098:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2b06      	cmp	r3, #6
 800909e:	d015      	beq.n	80090cc <HAL_TIM_PWM_Start+0x240>
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090a6:	d011      	beq.n	80090cc <HAL_TIM_PWM_Start+0x240>
    {
      __HAL_TIM_ENABLE(htim);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f042 0201 	orr.w	r2, r2, #1
 80090b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090b8:	e008      	b.n	80090cc <HAL_TIM_PWM_Start+0x240>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f042 0201 	orr.w	r2, r2, #1
 80090c8:	601a      	str	r2, [r3, #0]
 80090ca:	e000      	b.n	80090ce <HAL_TIM_PWM_Start+0x242>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3710      	adds	r7, #16
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	40012c00 	.word	0x40012c00
 80090dc:	50012c00 	.word	0x50012c00
 80090e0:	40013400 	.word	0x40013400
 80090e4:	50013400 	.word	0x50013400
 80090e8:	40014000 	.word	0x40014000
 80090ec:	50014000 	.word	0x50014000
 80090f0:	40000400 	.word	0x40000400
 80090f4:	50000400 	.word	0x50000400
 80090f8:	40000800 	.word	0x40000800
 80090fc:	50000800 	.word	0x50000800
 8009100:	40000c00 	.word	0x40000c00
 8009104:	50000c00 	.word	0x50000c00
 8009108:	40001800 	.word	0x40001800
 800910c:	50001800 	.word	0x50001800
 8009110:	00010007 	.word	0x00010007

08009114 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	f003 0302 	and.w	r3, r3, #2
 8009132:	2b00      	cmp	r3, #0
 8009134:	d020      	beq.n	8009178 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f003 0302 	and.w	r3, r3, #2
 800913c:	2b00      	cmp	r3, #0
 800913e:	d01b      	beq.n	8009178 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f06f 0202 	mvn.w	r2, #2
 8009148:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2201      	movs	r2, #1
 800914e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	699b      	ldr	r3, [r3, #24]
 8009156:	f003 0303 	and.w	r3, r3, #3
 800915a:	2b00      	cmp	r3, #0
 800915c:	d003      	beq.n	8009166 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 fbde 	bl	8009920 <HAL_TIM_IC_CaptureCallback>
 8009164:	e005      	b.n	8009172 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 fbd0 	bl	800990c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 fbe1 	bl	8009934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	f003 0304 	and.w	r3, r3, #4
 800917e:	2b00      	cmp	r3, #0
 8009180:	d020      	beq.n	80091c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f003 0304 	and.w	r3, r3, #4
 8009188:	2b00      	cmp	r3, #0
 800918a:	d01b      	beq.n	80091c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f06f 0204 	mvn.w	r2, #4
 8009194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2202      	movs	r2, #2
 800919a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	699b      	ldr	r3, [r3, #24]
 80091a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d003      	beq.n	80091b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fbb8 	bl	8009920 <HAL_TIM_IC_CaptureCallback>
 80091b0:	e005      	b.n	80091be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fbaa 	bl	800990c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 fbbb 	bl	8009934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2200      	movs	r2, #0
 80091c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	f003 0308 	and.w	r3, r3, #8
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d020      	beq.n	8009210 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f003 0308 	and.w	r3, r3, #8
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d01b      	beq.n	8009210 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f06f 0208 	mvn.w	r2, #8
 80091e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2204      	movs	r2, #4
 80091e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	69db      	ldr	r3, [r3, #28]
 80091ee:	f003 0303 	and.w	r3, r3, #3
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d003      	beq.n	80091fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 fb92 	bl	8009920 <HAL_TIM_IC_CaptureCallback>
 80091fc:	e005      	b.n	800920a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 fb84 	bl	800990c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 fb95 	bl	8009934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	f003 0310 	and.w	r3, r3, #16
 8009216:	2b00      	cmp	r3, #0
 8009218:	d020      	beq.n	800925c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f003 0310 	and.w	r3, r3, #16
 8009220:	2b00      	cmp	r3, #0
 8009222:	d01b      	beq.n	800925c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f06f 0210 	mvn.w	r2, #16
 800922c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2208      	movs	r2, #8
 8009232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	69db      	ldr	r3, [r3, #28]
 800923a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800923e:	2b00      	cmp	r3, #0
 8009240:	d003      	beq.n	800924a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 fb6c 	bl	8009920 <HAL_TIM_IC_CaptureCallback>
 8009248:	e005      	b.n	8009256 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 fb5e 	bl	800990c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 fb6f 	bl	8009934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	f003 0301 	and.w	r3, r3, #1
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00c      	beq.n	8009280 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f003 0301 	and.w	r3, r3, #1
 800926c:	2b00      	cmp	r3, #0
 800926e:	d007      	beq.n	8009280 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f06f 0201 	mvn.w	r2, #1
 8009278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f7f8 fc50 	bl	8001b20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009286:	2b00      	cmp	r3, #0
 8009288:	d104      	bne.n	8009294 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00c      	beq.n	80092ae <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800929a:	2b00      	cmp	r3, #0
 800929c:	d007      	beq.n	80092ae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80092a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f001 f9ad 	bl	800a608 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d00c      	beq.n	80092d2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d007      	beq.n	80092d2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80092ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f001 f9a5 	bl	800a61c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00c      	beq.n	80092f6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d007      	beq.n	80092f6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80092ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 fb29 	bl	8009948 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	f003 0320 	and.w	r3, r3, #32
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d00c      	beq.n	800931a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f003 0320 	and.w	r3, r3, #32
 8009306:	2b00      	cmp	r3, #0
 8009308:	d007      	beq.n	800931a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f06f 0220 	mvn.w	r2, #32
 8009312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f001 f96d 	bl	800a5f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00c      	beq.n	800933e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800932a:	2b00      	cmp	r3, #0
 800932c:	d007      	beq.n	800933e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f001 f979 	bl	800a630 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009344:	2b00      	cmp	r3, #0
 8009346:	d00c      	beq.n	8009362 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800934e:	2b00      	cmp	r3, #0
 8009350:	d007      	beq.n	8009362 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800935a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f001 f971 	bl	800a644 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009368:	2b00      	cmp	r3, #0
 800936a:	d00c      	beq.n	8009386 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009372:	2b00      	cmp	r3, #0
 8009374:	d007      	beq.n	8009386 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800937e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f001 f969 	bl	800a658 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800938c:	2b00      	cmp	r3, #0
 800938e:	d00c      	beq.n	80093aa <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009396:	2b00      	cmp	r3, #0
 8009398:	d007      	beq.n	80093aa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80093a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f001 f961 	bl	800a66c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80093aa:	bf00      	nop
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
	...

080093b4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b086      	sub	sp, #24
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	60f8      	str	r0, [r7, #12]
 80093bc:	60b9      	str	r1, [r7, #8]
 80093be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093c0:	2300      	movs	r3, #0
 80093c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d101      	bne.n	80093d2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80093ce:	2302      	movs	r3, #2
 80093d0:	e066      	b.n	80094a0 <HAL_TIM_OC_ConfigChannel+0xec>
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2201      	movs	r2, #1
 80093d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2b14      	cmp	r3, #20
 80093de:	d857      	bhi.n	8009490 <HAL_TIM_OC_ConfigChannel+0xdc>
 80093e0:	a201      	add	r2, pc, #4	@ (adr r2, 80093e8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80093e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e6:	bf00      	nop
 80093e8:	0800943d 	.word	0x0800943d
 80093ec:	08009491 	.word	0x08009491
 80093f0:	08009491 	.word	0x08009491
 80093f4:	08009491 	.word	0x08009491
 80093f8:	0800944b 	.word	0x0800944b
 80093fc:	08009491 	.word	0x08009491
 8009400:	08009491 	.word	0x08009491
 8009404:	08009491 	.word	0x08009491
 8009408:	08009459 	.word	0x08009459
 800940c:	08009491 	.word	0x08009491
 8009410:	08009491 	.word	0x08009491
 8009414:	08009491 	.word	0x08009491
 8009418:	08009467 	.word	0x08009467
 800941c:	08009491 	.word	0x08009491
 8009420:	08009491 	.word	0x08009491
 8009424:	08009491 	.word	0x08009491
 8009428:	08009475 	.word	0x08009475
 800942c:	08009491 	.word	0x08009491
 8009430:	08009491 	.word	0x08009491
 8009434:	08009491 	.word	0x08009491
 8009438:	08009483 	.word	0x08009483
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	68b9      	ldr	r1, [r7, #8]
 8009442:	4618      	mov	r0, r3
 8009444:	f000 fb74 	bl	8009b30 <TIM_OC1_SetConfig>
      break;
 8009448:	e025      	b.n	8009496 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68b9      	ldr	r1, [r7, #8]
 8009450:	4618      	mov	r0, r3
 8009452:	f000 fc07 	bl	8009c64 <TIM_OC2_SetConfig>
      break;
 8009456:	e01e      	b.n	8009496 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	68b9      	ldr	r1, [r7, #8]
 800945e:	4618      	mov	r0, r3
 8009460:	f000 fc98 	bl	8009d94 <TIM_OC3_SetConfig>
      break;
 8009464:	e017      	b.n	8009496 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	68b9      	ldr	r1, [r7, #8]
 800946c:	4618      	mov	r0, r3
 800946e:	f000 fd27 	bl	8009ec0 <TIM_OC4_SetConfig>
      break;
 8009472:	e010      	b.n	8009496 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68b9      	ldr	r1, [r7, #8]
 800947a:	4618      	mov	r0, r3
 800947c:	f000 fdb8 	bl	8009ff0 <TIM_OC5_SetConfig>
      break;
 8009480:	e009      	b.n	8009496 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	68b9      	ldr	r1, [r7, #8]
 8009488:	4618      	mov	r0, r3
 800948a:	f000 fe1b 	bl	800a0c4 <TIM_OC6_SetConfig>
      break;
 800948e:	e002      	b.n	8009496 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	75fb      	strb	r3, [r7, #23]
      break;
 8009494:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2200      	movs	r2, #0
 800949a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800949e:	7dfb      	ldrb	r3, [r7, #23]
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3718      	adds	r7, #24
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b086      	sub	sp, #24
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094b4:	2300      	movs	r3, #0
 80094b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d101      	bne.n	80094c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80094c2:	2302      	movs	r3, #2
 80094c4:	e0ff      	b.n	80096c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2201      	movs	r2, #1
 80094ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2b14      	cmp	r3, #20
 80094d2:	f200 80f0 	bhi.w	80096b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80094d6:	a201      	add	r2, pc, #4	@ (adr r2, 80094dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80094d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094dc:	08009531 	.word	0x08009531
 80094e0:	080096b7 	.word	0x080096b7
 80094e4:	080096b7 	.word	0x080096b7
 80094e8:	080096b7 	.word	0x080096b7
 80094ec:	08009571 	.word	0x08009571
 80094f0:	080096b7 	.word	0x080096b7
 80094f4:	080096b7 	.word	0x080096b7
 80094f8:	080096b7 	.word	0x080096b7
 80094fc:	080095b3 	.word	0x080095b3
 8009500:	080096b7 	.word	0x080096b7
 8009504:	080096b7 	.word	0x080096b7
 8009508:	080096b7 	.word	0x080096b7
 800950c:	080095f3 	.word	0x080095f3
 8009510:	080096b7 	.word	0x080096b7
 8009514:	080096b7 	.word	0x080096b7
 8009518:	080096b7 	.word	0x080096b7
 800951c:	08009635 	.word	0x08009635
 8009520:	080096b7 	.word	0x080096b7
 8009524:	080096b7 	.word	0x080096b7
 8009528:	080096b7 	.word	0x080096b7
 800952c:	08009675 	.word	0x08009675
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	68b9      	ldr	r1, [r7, #8]
 8009536:	4618      	mov	r0, r3
 8009538:	f000 fafa 	bl	8009b30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	699a      	ldr	r2, [r3, #24]
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f042 0208 	orr.w	r2, r2, #8
 800954a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	699a      	ldr	r2, [r3, #24]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f022 0204 	bic.w	r2, r2, #4
 800955a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	6999      	ldr	r1, [r3, #24]
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	691a      	ldr	r2, [r3, #16]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	430a      	orrs	r2, r1
 800956c:	619a      	str	r2, [r3, #24]
      break;
 800956e:	e0a5      	b.n	80096bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	68b9      	ldr	r1, [r7, #8]
 8009576:	4618      	mov	r0, r3
 8009578:	f000 fb74 	bl	8009c64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	699a      	ldr	r2, [r3, #24]
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800958a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	699a      	ldr	r2, [r3, #24]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800959a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	6999      	ldr	r1, [r3, #24]
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	691b      	ldr	r3, [r3, #16]
 80095a6:	021a      	lsls	r2, r3, #8
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	430a      	orrs	r2, r1
 80095ae:	619a      	str	r2, [r3, #24]
      break;
 80095b0:	e084      	b.n	80096bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	68b9      	ldr	r1, [r7, #8]
 80095b8:	4618      	mov	r0, r3
 80095ba:	f000 fbeb 	bl	8009d94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	69da      	ldr	r2, [r3, #28]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f042 0208 	orr.w	r2, r2, #8
 80095cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	69da      	ldr	r2, [r3, #28]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f022 0204 	bic.w	r2, r2, #4
 80095dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	69d9      	ldr	r1, [r3, #28]
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	691a      	ldr	r2, [r3, #16]
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	430a      	orrs	r2, r1
 80095ee:	61da      	str	r2, [r3, #28]
      break;
 80095f0:	e064      	b.n	80096bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68b9      	ldr	r1, [r7, #8]
 80095f8:	4618      	mov	r0, r3
 80095fa:	f000 fc61 	bl	8009ec0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	69da      	ldr	r2, [r3, #28]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800960c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	69da      	ldr	r2, [r3, #28]
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800961c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	69d9      	ldr	r1, [r3, #28]
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	691b      	ldr	r3, [r3, #16]
 8009628:	021a      	lsls	r2, r3, #8
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	430a      	orrs	r2, r1
 8009630:	61da      	str	r2, [r3, #28]
      break;
 8009632:	e043      	b.n	80096bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	68b9      	ldr	r1, [r7, #8]
 800963a:	4618      	mov	r0, r3
 800963c:	f000 fcd8 	bl	8009ff0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f042 0208 	orr.w	r2, r2, #8
 800964e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f022 0204 	bic.w	r2, r2, #4
 800965e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	691a      	ldr	r2, [r3, #16]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	430a      	orrs	r2, r1
 8009670:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009672:	e023      	b.n	80096bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	68b9      	ldr	r1, [r7, #8]
 800967a:	4618      	mov	r0, r3
 800967c:	f000 fd22 	bl	800a0c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800968e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800969e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	691b      	ldr	r3, [r3, #16]
 80096aa:	021a      	lsls	r2, r3, #8
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	430a      	orrs	r2, r1
 80096b2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80096b4:	e002      	b.n	80096bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80096b6:	2301      	movs	r3, #1
 80096b8:	75fb      	strb	r3, [r7, #23]
      break;
 80096ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2200      	movs	r2, #0
 80096c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80096c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3718      	adds	r7, #24
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop

080096d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80096da:	2300      	movs	r3, #0
 80096dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d101      	bne.n	80096ec <HAL_TIM_ConfigClockSource+0x1c>
 80096e8:	2302      	movs	r3, #2
 80096ea:	e0fe      	b.n	80098ea <HAL_TIM_ConfigClockSource+0x21a>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2202      	movs	r2, #2
 80096f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800970a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800970e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009716:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68ba      	ldr	r2, [r7, #8]
 800971e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009728:	f000 80c9 	beq.w	80098be <HAL_TIM_ConfigClockSource+0x1ee>
 800972c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009730:	f200 80ce 	bhi.w	80098d0 <HAL_TIM_ConfigClockSource+0x200>
 8009734:	4a6f      	ldr	r2, [pc, #444]	@ (80098f4 <HAL_TIM_ConfigClockSource+0x224>)
 8009736:	4293      	cmp	r3, r2
 8009738:	f000 80c1 	beq.w	80098be <HAL_TIM_ConfigClockSource+0x1ee>
 800973c:	4a6d      	ldr	r2, [pc, #436]	@ (80098f4 <HAL_TIM_ConfigClockSource+0x224>)
 800973e:	4293      	cmp	r3, r2
 8009740:	f200 80c6 	bhi.w	80098d0 <HAL_TIM_ConfigClockSource+0x200>
 8009744:	4a6c      	ldr	r2, [pc, #432]	@ (80098f8 <HAL_TIM_ConfigClockSource+0x228>)
 8009746:	4293      	cmp	r3, r2
 8009748:	f000 80b9 	beq.w	80098be <HAL_TIM_ConfigClockSource+0x1ee>
 800974c:	4a6a      	ldr	r2, [pc, #424]	@ (80098f8 <HAL_TIM_ConfigClockSource+0x228>)
 800974e:	4293      	cmp	r3, r2
 8009750:	f200 80be 	bhi.w	80098d0 <HAL_TIM_ConfigClockSource+0x200>
 8009754:	4a69      	ldr	r2, [pc, #420]	@ (80098fc <HAL_TIM_ConfigClockSource+0x22c>)
 8009756:	4293      	cmp	r3, r2
 8009758:	f000 80b1 	beq.w	80098be <HAL_TIM_ConfigClockSource+0x1ee>
 800975c:	4a67      	ldr	r2, [pc, #412]	@ (80098fc <HAL_TIM_ConfigClockSource+0x22c>)
 800975e:	4293      	cmp	r3, r2
 8009760:	f200 80b6 	bhi.w	80098d0 <HAL_TIM_ConfigClockSource+0x200>
 8009764:	4a66      	ldr	r2, [pc, #408]	@ (8009900 <HAL_TIM_ConfigClockSource+0x230>)
 8009766:	4293      	cmp	r3, r2
 8009768:	f000 80a9 	beq.w	80098be <HAL_TIM_ConfigClockSource+0x1ee>
 800976c:	4a64      	ldr	r2, [pc, #400]	@ (8009900 <HAL_TIM_ConfigClockSource+0x230>)
 800976e:	4293      	cmp	r3, r2
 8009770:	f200 80ae 	bhi.w	80098d0 <HAL_TIM_ConfigClockSource+0x200>
 8009774:	4a63      	ldr	r2, [pc, #396]	@ (8009904 <HAL_TIM_ConfigClockSource+0x234>)
 8009776:	4293      	cmp	r3, r2
 8009778:	f000 80a1 	beq.w	80098be <HAL_TIM_ConfigClockSource+0x1ee>
 800977c:	4a61      	ldr	r2, [pc, #388]	@ (8009904 <HAL_TIM_ConfigClockSource+0x234>)
 800977e:	4293      	cmp	r3, r2
 8009780:	f200 80a6 	bhi.w	80098d0 <HAL_TIM_ConfigClockSource+0x200>
 8009784:	4a60      	ldr	r2, [pc, #384]	@ (8009908 <HAL_TIM_ConfigClockSource+0x238>)
 8009786:	4293      	cmp	r3, r2
 8009788:	f000 8099 	beq.w	80098be <HAL_TIM_ConfigClockSource+0x1ee>
 800978c:	4a5e      	ldr	r2, [pc, #376]	@ (8009908 <HAL_TIM_ConfigClockSource+0x238>)
 800978e:	4293      	cmp	r3, r2
 8009790:	f200 809e 	bhi.w	80098d0 <HAL_TIM_ConfigClockSource+0x200>
 8009794:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009798:	f000 8091 	beq.w	80098be <HAL_TIM_ConfigClockSource+0x1ee>
 800979c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80097a0:	f200 8096 	bhi.w	80098d0 <HAL_TIM_ConfigClockSource+0x200>
 80097a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80097a8:	f000 8089 	beq.w	80098be <HAL_TIM_ConfigClockSource+0x1ee>
 80097ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80097b0:	f200 808e 	bhi.w	80098d0 <HAL_TIM_ConfigClockSource+0x200>
 80097b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097b8:	d03e      	beq.n	8009838 <HAL_TIM_ConfigClockSource+0x168>
 80097ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097be:	f200 8087 	bhi.w	80098d0 <HAL_TIM_ConfigClockSource+0x200>
 80097c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097c6:	f000 8086 	beq.w	80098d6 <HAL_TIM_ConfigClockSource+0x206>
 80097ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097ce:	d87f      	bhi.n	80098d0 <HAL_TIM_ConfigClockSource+0x200>
 80097d0:	2b70      	cmp	r3, #112	@ 0x70
 80097d2:	d01a      	beq.n	800980a <HAL_TIM_ConfigClockSource+0x13a>
 80097d4:	2b70      	cmp	r3, #112	@ 0x70
 80097d6:	d87b      	bhi.n	80098d0 <HAL_TIM_ConfigClockSource+0x200>
 80097d8:	2b60      	cmp	r3, #96	@ 0x60
 80097da:	d050      	beq.n	800987e <HAL_TIM_ConfigClockSource+0x1ae>
 80097dc:	2b60      	cmp	r3, #96	@ 0x60
 80097de:	d877      	bhi.n	80098d0 <HAL_TIM_ConfigClockSource+0x200>
 80097e0:	2b50      	cmp	r3, #80	@ 0x50
 80097e2:	d03c      	beq.n	800985e <HAL_TIM_ConfigClockSource+0x18e>
 80097e4:	2b50      	cmp	r3, #80	@ 0x50
 80097e6:	d873      	bhi.n	80098d0 <HAL_TIM_ConfigClockSource+0x200>
 80097e8:	2b40      	cmp	r3, #64	@ 0x40
 80097ea:	d058      	beq.n	800989e <HAL_TIM_ConfigClockSource+0x1ce>
 80097ec:	2b40      	cmp	r3, #64	@ 0x40
 80097ee:	d86f      	bhi.n	80098d0 <HAL_TIM_ConfigClockSource+0x200>
 80097f0:	2b30      	cmp	r3, #48	@ 0x30
 80097f2:	d064      	beq.n	80098be <HAL_TIM_ConfigClockSource+0x1ee>
 80097f4:	2b30      	cmp	r3, #48	@ 0x30
 80097f6:	d86b      	bhi.n	80098d0 <HAL_TIM_ConfigClockSource+0x200>
 80097f8:	2b20      	cmp	r3, #32
 80097fa:	d060      	beq.n	80098be <HAL_TIM_ConfigClockSource+0x1ee>
 80097fc:	2b20      	cmp	r3, #32
 80097fe:	d867      	bhi.n	80098d0 <HAL_TIM_ConfigClockSource+0x200>
 8009800:	2b00      	cmp	r3, #0
 8009802:	d05c      	beq.n	80098be <HAL_TIM_ConfigClockSource+0x1ee>
 8009804:	2b10      	cmp	r3, #16
 8009806:	d05a      	beq.n	80098be <HAL_TIM_ConfigClockSource+0x1ee>
 8009808:	e062      	b.n	80098d0 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800981a:	f000 fd3b 	bl	800a294 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800982c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	68ba      	ldr	r2, [r7, #8]
 8009834:	609a      	str	r2, [r3, #8]
      break;
 8009836:	e04f      	b.n	80098d8 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009848:	f000 fd24 	bl	800a294 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	689a      	ldr	r2, [r3, #8]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800985a:	609a      	str	r2, [r3, #8]
      break;
 800985c:	e03c      	b.n	80098d8 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800986a:	461a      	mov	r2, r3
 800986c:	f000 fc96 	bl	800a19c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2150      	movs	r1, #80	@ 0x50
 8009876:	4618      	mov	r0, r3
 8009878:	f000 fcef 	bl	800a25a <TIM_ITRx_SetConfig>
      break;
 800987c:	e02c      	b.n	80098d8 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800988a:	461a      	mov	r2, r3
 800988c:	f000 fcb5 	bl	800a1fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2160      	movs	r1, #96	@ 0x60
 8009896:	4618      	mov	r0, r3
 8009898:	f000 fcdf 	bl	800a25a <TIM_ITRx_SetConfig>
      break;
 800989c:	e01c      	b.n	80098d8 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80098aa:	461a      	mov	r2, r3
 80098ac:	f000 fc76 	bl	800a19c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	2140      	movs	r1, #64	@ 0x40
 80098b6:	4618      	mov	r0, r3
 80098b8:	f000 fccf 	bl	800a25a <TIM_ITRx_SetConfig>
      break;
 80098bc:	e00c      	b.n	80098d8 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4619      	mov	r1, r3
 80098c8:	4610      	mov	r0, r2
 80098ca:	f000 fcc6 	bl	800a25a <TIM_ITRx_SetConfig>
      break;
 80098ce:	e003      	b.n	80098d8 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 80098d0:	2301      	movs	r3, #1
 80098d2:	73fb      	strb	r3, [r7, #15]
      break;
 80098d4:	e000      	b.n	80098d8 <HAL_TIM_ConfigClockSource+0x208>
      break;
 80098d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80098e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3710      	adds	r7, #16
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop
 80098f4:	00100070 	.word	0x00100070
 80098f8:	00100060 	.word	0x00100060
 80098fc:	00100050 	.word	0x00100050
 8009900:	00100040 	.word	0x00100040
 8009904:	00100030 	.word	0x00100030
 8009908:	00100020 	.word	0x00100020

0800990c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800990c:	b480      	push	{r7}
 800990e:	b083      	sub	sp, #12
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009914:	bf00      	nop
 8009916:	370c      	adds	r7, #12
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr

08009920 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009928:	bf00      	nop
 800992a:	370c      	adds	r7, #12
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800993c:	bf00      	nop
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009950:	bf00      	nop
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800995c:	b480      	push	{r7}
 800995e:	b085      	sub	sp, #20
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	4a62      	ldr	r2, [pc, #392]	@ (8009af8 <TIM_Base_SetConfig+0x19c>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d02b      	beq.n	80099cc <TIM_Base_SetConfig+0x70>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	4a61      	ldr	r2, [pc, #388]	@ (8009afc <TIM_Base_SetConfig+0x1a0>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d027      	beq.n	80099cc <TIM_Base_SetConfig+0x70>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009982:	d023      	beq.n	80099cc <TIM_Base_SetConfig+0x70>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800998a:	d01f      	beq.n	80099cc <TIM_Base_SetConfig+0x70>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	4a5c      	ldr	r2, [pc, #368]	@ (8009b00 <TIM_Base_SetConfig+0x1a4>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d01b      	beq.n	80099cc <TIM_Base_SetConfig+0x70>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	4a5b      	ldr	r2, [pc, #364]	@ (8009b04 <TIM_Base_SetConfig+0x1a8>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d017      	beq.n	80099cc <TIM_Base_SetConfig+0x70>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	4a5a      	ldr	r2, [pc, #360]	@ (8009b08 <TIM_Base_SetConfig+0x1ac>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d013      	beq.n	80099cc <TIM_Base_SetConfig+0x70>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	4a59      	ldr	r2, [pc, #356]	@ (8009b0c <TIM_Base_SetConfig+0x1b0>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d00f      	beq.n	80099cc <TIM_Base_SetConfig+0x70>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	4a58      	ldr	r2, [pc, #352]	@ (8009b10 <TIM_Base_SetConfig+0x1b4>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d00b      	beq.n	80099cc <TIM_Base_SetConfig+0x70>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4a57      	ldr	r2, [pc, #348]	@ (8009b14 <TIM_Base_SetConfig+0x1b8>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d007      	beq.n	80099cc <TIM_Base_SetConfig+0x70>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4a56      	ldr	r2, [pc, #344]	@ (8009b18 <TIM_Base_SetConfig+0x1bc>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d003      	beq.n	80099cc <TIM_Base_SetConfig+0x70>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	4a55      	ldr	r2, [pc, #340]	@ (8009b1c <TIM_Base_SetConfig+0x1c0>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d108      	bne.n	80099de <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	4313      	orrs	r3, r2
 80099dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	4a45      	ldr	r2, [pc, #276]	@ (8009af8 <TIM_Base_SetConfig+0x19c>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d03b      	beq.n	8009a5e <TIM_Base_SetConfig+0x102>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	4a44      	ldr	r2, [pc, #272]	@ (8009afc <TIM_Base_SetConfig+0x1a0>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d037      	beq.n	8009a5e <TIM_Base_SetConfig+0x102>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099f4:	d033      	beq.n	8009a5e <TIM_Base_SetConfig+0x102>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80099fc:	d02f      	beq.n	8009a5e <TIM_Base_SetConfig+0x102>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	4a3f      	ldr	r2, [pc, #252]	@ (8009b00 <TIM_Base_SetConfig+0x1a4>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d02b      	beq.n	8009a5e <TIM_Base_SetConfig+0x102>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	4a3e      	ldr	r2, [pc, #248]	@ (8009b04 <TIM_Base_SetConfig+0x1a8>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d027      	beq.n	8009a5e <TIM_Base_SetConfig+0x102>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	4a3d      	ldr	r2, [pc, #244]	@ (8009b08 <TIM_Base_SetConfig+0x1ac>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d023      	beq.n	8009a5e <TIM_Base_SetConfig+0x102>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	4a3c      	ldr	r2, [pc, #240]	@ (8009b0c <TIM_Base_SetConfig+0x1b0>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d01f      	beq.n	8009a5e <TIM_Base_SetConfig+0x102>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	4a3b      	ldr	r2, [pc, #236]	@ (8009b10 <TIM_Base_SetConfig+0x1b4>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d01b      	beq.n	8009a5e <TIM_Base_SetConfig+0x102>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	4a3a      	ldr	r2, [pc, #232]	@ (8009b14 <TIM_Base_SetConfig+0x1b8>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d017      	beq.n	8009a5e <TIM_Base_SetConfig+0x102>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	4a39      	ldr	r2, [pc, #228]	@ (8009b18 <TIM_Base_SetConfig+0x1bc>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d013      	beq.n	8009a5e <TIM_Base_SetConfig+0x102>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	4a38      	ldr	r2, [pc, #224]	@ (8009b1c <TIM_Base_SetConfig+0x1c0>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d00f      	beq.n	8009a5e <TIM_Base_SetConfig+0x102>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	4a37      	ldr	r2, [pc, #220]	@ (8009b20 <TIM_Base_SetConfig+0x1c4>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d00b      	beq.n	8009a5e <TIM_Base_SetConfig+0x102>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	4a36      	ldr	r2, [pc, #216]	@ (8009b24 <TIM_Base_SetConfig+0x1c8>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d007      	beq.n	8009a5e <TIM_Base_SetConfig+0x102>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	4a35      	ldr	r2, [pc, #212]	@ (8009b28 <TIM_Base_SetConfig+0x1cc>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d003      	beq.n	8009a5e <TIM_Base_SetConfig+0x102>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	4a34      	ldr	r2, [pc, #208]	@ (8009b2c <TIM_Base_SetConfig+0x1d0>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d108      	bne.n	8009a70 <TIM_Base_SetConfig+0x114>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	695b      	ldr	r3, [r3, #20]
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	68fa      	ldr	r2, [r7, #12]
 8009a82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	689a      	ldr	r2, [r3, #8]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	4a18      	ldr	r2, [pc, #96]	@ (8009af8 <TIM_Base_SetConfig+0x19c>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d013      	beq.n	8009ac4 <TIM_Base_SetConfig+0x168>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4a17      	ldr	r2, [pc, #92]	@ (8009afc <TIM_Base_SetConfig+0x1a0>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d00f      	beq.n	8009ac4 <TIM_Base_SetConfig+0x168>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4a1c      	ldr	r2, [pc, #112]	@ (8009b18 <TIM_Base_SetConfig+0x1bc>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d00b      	beq.n	8009ac4 <TIM_Base_SetConfig+0x168>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	4a1b      	ldr	r2, [pc, #108]	@ (8009b1c <TIM_Base_SetConfig+0x1c0>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d007      	beq.n	8009ac4 <TIM_Base_SetConfig+0x168>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	4a1c      	ldr	r2, [pc, #112]	@ (8009b28 <TIM_Base_SetConfig+0x1cc>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d003      	beq.n	8009ac4 <TIM_Base_SetConfig+0x168>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	4a1b      	ldr	r2, [pc, #108]	@ (8009b2c <TIM_Base_SetConfig+0x1d0>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d103      	bne.n	8009acc <TIM_Base_SetConfig+0x170>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	691a      	ldr	r2, [r3, #16]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	691b      	ldr	r3, [r3, #16]
 8009ad6:	f003 0301 	and.w	r3, r3, #1
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d105      	bne.n	8009aea <TIM_Base_SetConfig+0x18e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	691b      	ldr	r3, [r3, #16]
 8009ae2:	f023 0201 	bic.w	r2, r3, #1
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	611a      	str	r2, [r3, #16]
  }
}
 8009aea:	bf00      	nop
 8009aec:	3714      	adds	r7, #20
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr
 8009af6:	bf00      	nop
 8009af8:	40012c00 	.word	0x40012c00
 8009afc:	50012c00 	.word	0x50012c00
 8009b00:	40000400 	.word	0x40000400
 8009b04:	50000400 	.word	0x50000400
 8009b08:	40000800 	.word	0x40000800
 8009b0c:	50000800 	.word	0x50000800
 8009b10:	40000c00 	.word	0x40000c00
 8009b14:	50000c00 	.word	0x50000c00
 8009b18:	40013400 	.word	0x40013400
 8009b1c:	50013400 	.word	0x50013400
 8009b20:	40001800 	.word	0x40001800
 8009b24:	50001800 	.word	0x50001800
 8009b28:	40014000 	.word	0x40014000
 8009b2c:	50014000 	.word	0x50014000

08009b30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b087      	sub	sp, #28
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6a1b      	ldr	r3, [r3, #32]
 8009b3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6a1b      	ldr	r3, [r3, #32]
 8009b44:	f023 0201 	bic.w	r2, r3, #1
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	699b      	ldr	r3, [r3, #24]
 8009b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f023 0303 	bic.w	r3, r3, #3
 8009b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	68fa      	ldr	r2, [r7, #12]
 8009b72:	4313      	orrs	r3, r2
 8009b74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	f023 0302 	bic.w	r3, r3, #2
 8009b7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	689b      	ldr	r3, [r3, #8]
 8009b82:	697a      	ldr	r2, [r7, #20]
 8009b84:	4313      	orrs	r3, r2
 8009b86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	4a30      	ldr	r2, [pc, #192]	@ (8009c4c <TIM_OC1_SetConfig+0x11c>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d013      	beq.n	8009bb8 <TIM_OC1_SetConfig+0x88>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	4a2f      	ldr	r2, [pc, #188]	@ (8009c50 <TIM_OC1_SetConfig+0x120>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d00f      	beq.n	8009bb8 <TIM_OC1_SetConfig+0x88>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	4a2e      	ldr	r2, [pc, #184]	@ (8009c54 <TIM_OC1_SetConfig+0x124>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d00b      	beq.n	8009bb8 <TIM_OC1_SetConfig+0x88>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	4a2d      	ldr	r2, [pc, #180]	@ (8009c58 <TIM_OC1_SetConfig+0x128>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d007      	beq.n	8009bb8 <TIM_OC1_SetConfig+0x88>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	4a2c      	ldr	r2, [pc, #176]	@ (8009c5c <TIM_OC1_SetConfig+0x12c>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d003      	beq.n	8009bb8 <TIM_OC1_SetConfig+0x88>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	4a2b      	ldr	r2, [pc, #172]	@ (8009c60 <TIM_OC1_SetConfig+0x130>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d10c      	bne.n	8009bd2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	f023 0308 	bic.w	r3, r3, #8
 8009bbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	697a      	ldr	r2, [r7, #20]
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	f023 0304 	bic.w	r3, r3, #4
 8009bd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	4a1d      	ldr	r2, [pc, #116]	@ (8009c4c <TIM_OC1_SetConfig+0x11c>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d013      	beq.n	8009c02 <TIM_OC1_SetConfig+0xd2>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	4a1c      	ldr	r2, [pc, #112]	@ (8009c50 <TIM_OC1_SetConfig+0x120>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d00f      	beq.n	8009c02 <TIM_OC1_SetConfig+0xd2>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	4a1b      	ldr	r2, [pc, #108]	@ (8009c54 <TIM_OC1_SetConfig+0x124>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d00b      	beq.n	8009c02 <TIM_OC1_SetConfig+0xd2>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	4a1a      	ldr	r2, [pc, #104]	@ (8009c58 <TIM_OC1_SetConfig+0x128>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d007      	beq.n	8009c02 <TIM_OC1_SetConfig+0xd2>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	4a19      	ldr	r2, [pc, #100]	@ (8009c5c <TIM_OC1_SetConfig+0x12c>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d003      	beq.n	8009c02 <TIM_OC1_SetConfig+0xd2>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	4a18      	ldr	r2, [pc, #96]	@ (8009c60 <TIM_OC1_SetConfig+0x130>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d111      	bne.n	8009c26 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009c10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	695b      	ldr	r3, [r3, #20]
 8009c16:	693a      	ldr	r2, [r7, #16]
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	699b      	ldr	r3, [r3, #24]
 8009c20:	693a      	ldr	r2, [r7, #16]
 8009c22:	4313      	orrs	r3, r2
 8009c24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	693a      	ldr	r2, [r7, #16]
 8009c2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	68fa      	ldr	r2, [r7, #12]
 8009c30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	685a      	ldr	r2, [r3, #4]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	697a      	ldr	r2, [r7, #20]
 8009c3e:	621a      	str	r2, [r3, #32]
}
 8009c40:	bf00      	nop
 8009c42:	371c      	adds	r7, #28
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr
 8009c4c:	40012c00 	.word	0x40012c00
 8009c50:	50012c00 	.word	0x50012c00
 8009c54:	40013400 	.word	0x40013400
 8009c58:	50013400 	.word	0x50013400
 8009c5c:	40014000 	.word	0x40014000
 8009c60:	50014000 	.word	0x50014000

08009c64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b087      	sub	sp, #28
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6a1b      	ldr	r3, [r3, #32]
 8009c72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6a1b      	ldr	r3, [r3, #32]
 8009c78:	f023 0210 	bic.w	r2, r3, #16
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	699b      	ldr	r3, [r3, #24]
 8009c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009c92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	021b      	lsls	r3, r3, #8
 8009ca6:	68fa      	ldr	r2, [r7, #12]
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	f023 0320 	bic.w	r3, r3, #32
 8009cb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	011b      	lsls	r3, r3, #4
 8009cba:	697a      	ldr	r2, [r7, #20]
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	4a2e      	ldr	r2, [pc, #184]	@ (8009d7c <TIM_OC2_SetConfig+0x118>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d00b      	beq.n	8009ce0 <TIM_OC2_SetConfig+0x7c>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	4a2d      	ldr	r2, [pc, #180]	@ (8009d80 <TIM_OC2_SetConfig+0x11c>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d007      	beq.n	8009ce0 <TIM_OC2_SetConfig+0x7c>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	4a2c      	ldr	r2, [pc, #176]	@ (8009d84 <TIM_OC2_SetConfig+0x120>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d003      	beq.n	8009ce0 <TIM_OC2_SetConfig+0x7c>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	4a2b      	ldr	r2, [pc, #172]	@ (8009d88 <TIM_OC2_SetConfig+0x124>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d10d      	bne.n	8009cfc <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ce6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	68db      	ldr	r3, [r3, #12]
 8009cec:	011b      	lsls	r3, r3, #4
 8009cee:	697a      	ldr	r2, [r7, #20]
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009cfa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4a1f      	ldr	r2, [pc, #124]	@ (8009d7c <TIM_OC2_SetConfig+0x118>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d013      	beq.n	8009d2c <TIM_OC2_SetConfig+0xc8>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	4a1e      	ldr	r2, [pc, #120]	@ (8009d80 <TIM_OC2_SetConfig+0x11c>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d00f      	beq.n	8009d2c <TIM_OC2_SetConfig+0xc8>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	4a1d      	ldr	r2, [pc, #116]	@ (8009d84 <TIM_OC2_SetConfig+0x120>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d00b      	beq.n	8009d2c <TIM_OC2_SetConfig+0xc8>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4a1c      	ldr	r2, [pc, #112]	@ (8009d88 <TIM_OC2_SetConfig+0x124>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d007      	beq.n	8009d2c <TIM_OC2_SetConfig+0xc8>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4a1b      	ldr	r2, [pc, #108]	@ (8009d8c <TIM_OC2_SetConfig+0x128>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d003      	beq.n	8009d2c <TIM_OC2_SetConfig+0xc8>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a1a      	ldr	r2, [pc, #104]	@ (8009d90 <TIM_OC2_SetConfig+0x12c>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d113      	bne.n	8009d54 <TIM_OC2_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009d32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	695b      	ldr	r3, [r3, #20]
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	693a      	ldr	r2, [r7, #16]
 8009d44:	4313      	orrs	r3, r2
 8009d46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	699b      	ldr	r3, [r3, #24]
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	693a      	ldr	r2, [r7, #16]
 8009d50:	4313      	orrs	r3, r2
 8009d52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	693a      	ldr	r2, [r7, #16]
 8009d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	685a      	ldr	r2, [r3, #4]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	697a      	ldr	r2, [r7, #20]
 8009d6c:	621a      	str	r2, [r3, #32]
}
 8009d6e:	bf00      	nop
 8009d70:	371c      	adds	r7, #28
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr
 8009d7a:	bf00      	nop
 8009d7c:	40012c00 	.word	0x40012c00
 8009d80:	50012c00 	.word	0x50012c00
 8009d84:	40013400 	.word	0x40013400
 8009d88:	50013400 	.word	0x50013400
 8009d8c:	40014000 	.word	0x40014000
 8009d90:	50014000 	.word	0x50014000

08009d94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b087      	sub	sp, #28
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6a1b      	ldr	r3, [r3, #32]
 8009da2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6a1b      	ldr	r3, [r3, #32]
 8009da8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	69db      	ldr	r3, [r3, #28]
 8009dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009dc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f023 0303 	bic.w	r3, r3, #3
 8009dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	68fa      	ldr	r2, [r7, #12]
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009de0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	021b      	lsls	r3, r3, #8
 8009de8:	697a      	ldr	r2, [r7, #20]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	4a2d      	ldr	r2, [pc, #180]	@ (8009ea8 <TIM_OC3_SetConfig+0x114>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d00b      	beq.n	8009e0e <TIM_OC3_SetConfig+0x7a>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	4a2c      	ldr	r2, [pc, #176]	@ (8009eac <TIM_OC3_SetConfig+0x118>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d007      	beq.n	8009e0e <TIM_OC3_SetConfig+0x7a>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	4a2b      	ldr	r2, [pc, #172]	@ (8009eb0 <TIM_OC3_SetConfig+0x11c>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d003      	beq.n	8009e0e <TIM_OC3_SetConfig+0x7a>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	4a2a      	ldr	r2, [pc, #168]	@ (8009eb4 <TIM_OC3_SetConfig+0x120>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d10d      	bne.n	8009e2a <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009e14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	021b      	lsls	r3, r3, #8
 8009e1c:	697a      	ldr	r2, [r7, #20]
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009e28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	4a1e      	ldr	r2, [pc, #120]	@ (8009ea8 <TIM_OC3_SetConfig+0x114>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d013      	beq.n	8009e5a <TIM_OC3_SetConfig+0xc6>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	4a1d      	ldr	r2, [pc, #116]	@ (8009eac <TIM_OC3_SetConfig+0x118>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d00f      	beq.n	8009e5a <TIM_OC3_SetConfig+0xc6>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	4a1c      	ldr	r2, [pc, #112]	@ (8009eb0 <TIM_OC3_SetConfig+0x11c>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d00b      	beq.n	8009e5a <TIM_OC3_SetConfig+0xc6>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	4a1b      	ldr	r2, [pc, #108]	@ (8009eb4 <TIM_OC3_SetConfig+0x120>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d007      	beq.n	8009e5a <TIM_OC3_SetConfig+0xc6>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4a1a      	ldr	r2, [pc, #104]	@ (8009eb8 <TIM_OC3_SetConfig+0x124>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d003      	beq.n	8009e5a <TIM_OC3_SetConfig+0xc6>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4a19      	ldr	r2, [pc, #100]	@ (8009ebc <TIM_OC3_SetConfig+0x128>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d113      	bne.n	8009e82 <TIM_OC3_SetConfig+0xee>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009e60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009e68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	695b      	ldr	r3, [r3, #20]
 8009e6e:	011b      	lsls	r3, r3, #4
 8009e70:	693a      	ldr	r2, [r7, #16]
 8009e72:	4313      	orrs	r3, r2
 8009e74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	699b      	ldr	r3, [r3, #24]
 8009e7a:	011b      	lsls	r3, r3, #4
 8009e7c:	693a      	ldr	r2, [r7, #16]
 8009e7e:	4313      	orrs	r3, r2
 8009e80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	693a      	ldr	r2, [r7, #16]
 8009e86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	68fa      	ldr	r2, [r7, #12]
 8009e8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	685a      	ldr	r2, [r3, #4]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	697a      	ldr	r2, [r7, #20]
 8009e9a:	621a      	str	r2, [r3, #32]
}
 8009e9c:	bf00      	nop
 8009e9e:	371c      	adds	r7, #28
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr
 8009ea8:	40012c00 	.word	0x40012c00
 8009eac:	50012c00 	.word	0x50012c00
 8009eb0:	40013400 	.word	0x40013400
 8009eb4:	50013400 	.word	0x50013400
 8009eb8:	40014000 	.word	0x40014000
 8009ebc:	50014000 	.word	0x50014000

08009ec0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b087      	sub	sp, #28
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6a1b      	ldr	r3, [r3, #32]
 8009ece:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6a1b      	ldr	r3, [r3, #32]
 8009ed4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	69db      	ldr	r3, [r3, #28]
 8009ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009eee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009efa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	021b      	lsls	r3, r3, #8
 8009f02:	68fa      	ldr	r2, [r7, #12]
 8009f04:	4313      	orrs	r3, r2
 8009f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009f0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	031b      	lsls	r3, r3, #12
 8009f16:	697a      	ldr	r2, [r7, #20]
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	4a2e      	ldr	r2, [pc, #184]	@ (8009fd8 <TIM_OC4_SetConfig+0x118>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d00b      	beq.n	8009f3c <TIM_OC4_SetConfig+0x7c>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	4a2d      	ldr	r2, [pc, #180]	@ (8009fdc <TIM_OC4_SetConfig+0x11c>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d007      	beq.n	8009f3c <TIM_OC4_SetConfig+0x7c>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	4a2c      	ldr	r2, [pc, #176]	@ (8009fe0 <TIM_OC4_SetConfig+0x120>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d003      	beq.n	8009f3c <TIM_OC4_SetConfig+0x7c>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	4a2b      	ldr	r2, [pc, #172]	@ (8009fe4 <TIM_OC4_SetConfig+0x124>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d10d      	bne.n	8009f58 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009f42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	031b      	lsls	r3, r3, #12
 8009f4a:	697a      	ldr	r2, [r7, #20]
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009f56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	4a1f      	ldr	r2, [pc, #124]	@ (8009fd8 <TIM_OC4_SetConfig+0x118>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d013      	beq.n	8009f88 <TIM_OC4_SetConfig+0xc8>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	4a1e      	ldr	r2, [pc, #120]	@ (8009fdc <TIM_OC4_SetConfig+0x11c>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d00f      	beq.n	8009f88 <TIM_OC4_SetConfig+0xc8>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	4a1d      	ldr	r2, [pc, #116]	@ (8009fe0 <TIM_OC4_SetConfig+0x120>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d00b      	beq.n	8009f88 <TIM_OC4_SetConfig+0xc8>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	4a1c      	ldr	r2, [pc, #112]	@ (8009fe4 <TIM_OC4_SetConfig+0x124>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d007      	beq.n	8009f88 <TIM_OC4_SetConfig+0xc8>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	4a1b      	ldr	r2, [pc, #108]	@ (8009fe8 <TIM_OC4_SetConfig+0x128>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d003      	beq.n	8009f88 <TIM_OC4_SetConfig+0xc8>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	4a1a      	ldr	r2, [pc, #104]	@ (8009fec <TIM_OC4_SetConfig+0x12c>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d113      	bne.n	8009fb0 <TIM_OC4_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009f8e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009f96:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	695b      	ldr	r3, [r3, #20]
 8009f9c:	019b      	lsls	r3, r3, #6
 8009f9e:	693a      	ldr	r2, [r7, #16]
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	699b      	ldr	r3, [r3, #24]
 8009fa8:	019b      	lsls	r3, r3, #6
 8009faa:	693a      	ldr	r2, [r7, #16]
 8009fac:	4313      	orrs	r3, r2
 8009fae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	693a      	ldr	r2, [r7, #16]
 8009fb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	68fa      	ldr	r2, [r7, #12]
 8009fba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	685a      	ldr	r2, [r3, #4]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	697a      	ldr	r2, [r7, #20]
 8009fc8:	621a      	str	r2, [r3, #32]
}
 8009fca:	bf00      	nop
 8009fcc:	371c      	adds	r7, #28
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd4:	4770      	bx	lr
 8009fd6:	bf00      	nop
 8009fd8:	40012c00 	.word	0x40012c00
 8009fdc:	50012c00 	.word	0x50012c00
 8009fe0:	40013400 	.word	0x40013400
 8009fe4:	50013400 	.word	0x50013400
 8009fe8:	40014000 	.word	0x40014000
 8009fec:	50014000 	.word	0x50014000

08009ff0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b087      	sub	sp, #28
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a1b      	ldr	r3, [r3, #32]
 8009ffe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6a1b      	ldr	r3, [r3, #32]
 800a004:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a01e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	68fa      	ldr	r2, [r7, #12]
 800a02a:	4313      	orrs	r3, r2
 800a02c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a034:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	689b      	ldr	r3, [r3, #8]
 800a03a:	041b      	lsls	r3, r3, #16
 800a03c:	693a      	ldr	r2, [r7, #16]
 800a03e:	4313      	orrs	r3, r2
 800a040:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	4a19      	ldr	r2, [pc, #100]	@ (800a0ac <TIM_OC5_SetConfig+0xbc>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d013      	beq.n	800a072 <TIM_OC5_SetConfig+0x82>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	4a18      	ldr	r2, [pc, #96]	@ (800a0b0 <TIM_OC5_SetConfig+0xc0>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d00f      	beq.n	800a072 <TIM_OC5_SetConfig+0x82>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	4a17      	ldr	r2, [pc, #92]	@ (800a0b4 <TIM_OC5_SetConfig+0xc4>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d00b      	beq.n	800a072 <TIM_OC5_SetConfig+0x82>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	4a16      	ldr	r2, [pc, #88]	@ (800a0b8 <TIM_OC5_SetConfig+0xc8>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d007      	beq.n	800a072 <TIM_OC5_SetConfig+0x82>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	4a15      	ldr	r2, [pc, #84]	@ (800a0bc <TIM_OC5_SetConfig+0xcc>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d003      	beq.n	800a072 <TIM_OC5_SetConfig+0x82>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	4a14      	ldr	r2, [pc, #80]	@ (800a0c0 <TIM_OC5_SetConfig+0xd0>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d109      	bne.n	800a086 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a078:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	695b      	ldr	r3, [r3, #20]
 800a07e:	021b      	lsls	r3, r3, #8
 800a080:	697a      	ldr	r2, [r7, #20]
 800a082:	4313      	orrs	r3, r2
 800a084:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	697a      	ldr	r2, [r7, #20]
 800a08a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	68fa      	ldr	r2, [r7, #12]
 800a090:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	685a      	ldr	r2, [r3, #4]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	693a      	ldr	r2, [r7, #16]
 800a09e:	621a      	str	r2, [r3, #32]
}
 800a0a0:	bf00      	nop
 800a0a2:	371c      	adds	r7, #28
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr
 800a0ac:	40012c00 	.word	0x40012c00
 800a0b0:	50012c00 	.word	0x50012c00
 800a0b4:	40013400 	.word	0x40013400
 800a0b8:	50013400 	.word	0x50013400
 800a0bc:	40014000 	.word	0x40014000
 800a0c0:	50014000 	.word	0x50014000

0800a0c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b087      	sub	sp, #28
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6a1b      	ldr	r3, [r3, #32]
 800a0d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6a1b      	ldr	r3, [r3, #32]
 800a0d8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a0f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a0f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	021b      	lsls	r3, r3, #8
 800a0fe:	68fa      	ldr	r2, [r7, #12]
 800a100:	4313      	orrs	r3, r2
 800a102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a10a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	689b      	ldr	r3, [r3, #8]
 800a110:	051b      	lsls	r3, r3, #20
 800a112:	693a      	ldr	r2, [r7, #16]
 800a114:	4313      	orrs	r3, r2
 800a116:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	4a1a      	ldr	r2, [pc, #104]	@ (800a184 <TIM_OC6_SetConfig+0xc0>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d013      	beq.n	800a148 <TIM_OC6_SetConfig+0x84>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	4a19      	ldr	r2, [pc, #100]	@ (800a188 <TIM_OC6_SetConfig+0xc4>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d00f      	beq.n	800a148 <TIM_OC6_SetConfig+0x84>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	4a18      	ldr	r2, [pc, #96]	@ (800a18c <TIM_OC6_SetConfig+0xc8>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d00b      	beq.n	800a148 <TIM_OC6_SetConfig+0x84>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	4a17      	ldr	r2, [pc, #92]	@ (800a190 <TIM_OC6_SetConfig+0xcc>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d007      	beq.n	800a148 <TIM_OC6_SetConfig+0x84>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	4a16      	ldr	r2, [pc, #88]	@ (800a194 <TIM_OC6_SetConfig+0xd0>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d003      	beq.n	800a148 <TIM_OC6_SetConfig+0x84>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	4a15      	ldr	r2, [pc, #84]	@ (800a198 <TIM_OC6_SetConfig+0xd4>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d109      	bne.n	800a15c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a14e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	695b      	ldr	r3, [r3, #20]
 800a154:	029b      	lsls	r3, r3, #10
 800a156:	697a      	ldr	r2, [r7, #20]
 800a158:	4313      	orrs	r3, r2
 800a15a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	697a      	ldr	r2, [r7, #20]
 800a160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	685a      	ldr	r2, [r3, #4]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	693a      	ldr	r2, [r7, #16]
 800a174:	621a      	str	r2, [r3, #32]
}
 800a176:	bf00      	nop
 800a178:	371c      	adds	r7, #28
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr
 800a182:	bf00      	nop
 800a184:	40012c00 	.word	0x40012c00
 800a188:	50012c00 	.word	0x50012c00
 800a18c:	40013400 	.word	0x40013400
 800a190:	50013400 	.word	0x50013400
 800a194:	40014000 	.word	0x40014000
 800a198:	50014000 	.word	0x50014000

0800a19c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b087      	sub	sp, #28
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	60b9      	str	r1, [r7, #8]
 800a1a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	6a1b      	ldr	r3, [r3, #32]
 800a1ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	6a1b      	ldr	r3, [r3, #32]
 800a1b2:	f023 0201 	bic.w	r2, r3, #1
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	699b      	ldr	r3, [r3, #24]
 800a1be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a1c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	011b      	lsls	r3, r3, #4
 800a1cc:	693a      	ldr	r2, [r7, #16]
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	f023 030a 	bic.w	r3, r3, #10
 800a1d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a1da:	697a      	ldr	r2, [r7, #20]
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	693a      	ldr	r2, [r7, #16]
 800a1e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	697a      	ldr	r2, [r7, #20]
 800a1ec:	621a      	str	r2, [r3, #32]
}
 800a1ee:	bf00      	nop
 800a1f0:	371c      	adds	r7, #28
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f8:	4770      	bx	lr

0800a1fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1fa:	b480      	push	{r7}
 800a1fc:	b087      	sub	sp, #28
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	60f8      	str	r0, [r7, #12]
 800a202:	60b9      	str	r1, [r7, #8]
 800a204:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	6a1b      	ldr	r3, [r3, #32]
 800a20a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	6a1b      	ldr	r3, [r3, #32]
 800a210:	f023 0210 	bic.w	r2, r3, #16
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	699b      	ldr	r3, [r3, #24]
 800a21c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a224:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	031b      	lsls	r3, r3, #12
 800a22a:	693a      	ldr	r2, [r7, #16]
 800a22c:	4313      	orrs	r3, r2
 800a22e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a236:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	011b      	lsls	r3, r3, #4
 800a23c:	697a      	ldr	r2, [r7, #20]
 800a23e:	4313      	orrs	r3, r2
 800a240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	693a      	ldr	r2, [r7, #16]
 800a246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	697a      	ldr	r2, [r7, #20]
 800a24c:	621a      	str	r2, [r3, #32]
}
 800a24e:	bf00      	nop
 800a250:	371c      	adds	r7, #28
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr

0800a25a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a25a:	b480      	push	{r7}
 800a25c:	b085      	sub	sp, #20
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
 800a262:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	689b      	ldr	r3, [r3, #8]
 800a268:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a270:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a274:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a276:	683a      	ldr	r2, [r7, #0]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	4313      	orrs	r3, r2
 800a27c:	f043 0307 	orr.w	r3, r3, #7
 800a280:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	68fa      	ldr	r2, [r7, #12]
 800a286:	609a      	str	r2, [r3, #8]
}
 800a288:	bf00      	nop
 800a28a:	3714      	adds	r7, #20
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr

0800a294 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a294:	b480      	push	{r7}
 800a296:	b087      	sub	sp, #28
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	607a      	str	r2, [r7, #4]
 800a2a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a2ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	021a      	lsls	r2, r3, #8
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	431a      	orrs	r2, r3
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	697a      	ldr	r2, [r7, #20]
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	697a      	ldr	r2, [r7, #20]
 800a2c6:	609a      	str	r2, [r3, #8]
}
 800a2c8:	bf00      	nop
 800a2ca:	371c      	adds	r7, #28
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b087      	sub	sp, #28
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	60f8      	str	r0, [r7, #12]
 800a2dc:	60b9      	str	r1, [r7, #8]
 800a2de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	f003 031f 	and.w	r3, r3, #31
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	6a1a      	ldr	r2, [r3, #32]
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	43db      	mvns	r3, r3
 800a2f6:	401a      	ands	r2, r3
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	6a1a      	ldr	r2, [r3, #32]
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	f003 031f 	and.w	r3, r3, #31
 800a306:	6879      	ldr	r1, [r7, #4]
 800a308:	fa01 f303 	lsl.w	r3, r1, r3
 800a30c:	431a      	orrs	r2, r3
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	621a      	str	r2, [r3, #32]
}
 800a312:	bf00      	nop
 800a314:	371c      	adds	r7, #28
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr
	...

0800a320 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a320:	b480      	push	{r7}
 800a322:	b085      	sub	sp, #20
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a330:	2b01      	cmp	r3, #1
 800a332:	d101      	bne.n	800a338 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a334:	2302      	movs	r3, #2
 800a336:	e0a1      	b.n	800a47c <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2202      	movs	r2, #2
 800a344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	689b      	ldr	r3, [r3, #8]
 800a356:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a4a      	ldr	r2, [pc, #296]	@ (800a488 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d00e      	beq.n	800a380 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a49      	ldr	r2, [pc, #292]	@ (800a48c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d009      	beq.n	800a380 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a47      	ldr	r2, [pc, #284]	@ (800a490 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d004      	beq.n	800a380 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a46      	ldr	r2, [pc, #280]	@ (800a494 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d108      	bne.n	800a392 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a386:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	68fa      	ldr	r2, [r7, #12]
 800a38e:	4313      	orrs	r3, r2
 800a390:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a398:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a39c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	68fa      	ldr	r2, [r7, #12]
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a34      	ldr	r2, [pc, #208]	@ (800a488 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d04a      	beq.n	800a450 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a33      	ldr	r2, [pc, #204]	@ (800a48c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d045      	beq.n	800a450 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3cc:	d040      	beq.n	800a450 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a3d6:	d03b      	beq.n	800a450 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a2e      	ldr	r2, [pc, #184]	@ (800a498 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d036      	beq.n	800a450 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a2d      	ldr	r2, [pc, #180]	@ (800a49c <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d031      	beq.n	800a450 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a2b      	ldr	r2, [pc, #172]	@ (800a4a0 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d02c      	beq.n	800a450 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a2a      	ldr	r2, [pc, #168]	@ (800a4a4 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d027      	beq.n	800a450 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a28      	ldr	r2, [pc, #160]	@ (800a4a8 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d022      	beq.n	800a450 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4a27      	ldr	r2, [pc, #156]	@ (800a4ac <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d01d      	beq.n	800a450 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4a1d      	ldr	r2, [pc, #116]	@ (800a490 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d018      	beq.n	800a450 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a1c      	ldr	r2, [pc, #112]	@ (800a494 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d013      	beq.n	800a450 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a20      	ldr	r2, [pc, #128]	@ (800a4b0 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d00e      	beq.n	800a450 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a1f      	ldr	r2, [pc, #124]	@ (800a4b4 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d009      	beq.n	800a450 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a1d      	ldr	r2, [pc, #116]	@ (800a4b8 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d004      	beq.n	800a450 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a1c      	ldr	r2, [pc, #112]	@ (800a4bc <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d10c      	bne.n	800a46a <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a456:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	68ba      	ldr	r2, [r7, #8]
 800a45e:	4313      	orrs	r3, r2
 800a460:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	68ba      	ldr	r2, [r7, #8]
 800a468:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2201      	movs	r2, #1
 800a46e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2200      	movs	r2, #0
 800a476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a47a:	2300      	movs	r3, #0
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3714      	adds	r7, #20
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr
 800a488:	40012c00 	.word	0x40012c00
 800a48c:	50012c00 	.word	0x50012c00
 800a490:	40013400 	.word	0x40013400
 800a494:	50013400 	.word	0x50013400
 800a498:	40000400 	.word	0x40000400
 800a49c:	50000400 	.word	0x50000400
 800a4a0:	40000800 	.word	0x40000800
 800a4a4:	50000800 	.word	0x50000800
 800a4a8:	40000c00 	.word	0x40000c00
 800a4ac:	50000c00 	.word	0x50000c00
 800a4b0:	40001800 	.word	0x40001800
 800a4b4:	50001800 	.word	0x50001800
 800a4b8:	40014000 	.word	0x40014000
 800a4bc:	50014000 	.word	0x50014000

0800a4c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b085      	sub	sp, #20
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d101      	bne.n	800a4dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a4d8:	2302      	movs	r3, #2
 800a4da:	e07d      	b.n	800a5d8 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2201      	movs	r2, #1
 800a4e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	689b      	ldr	r3, [r3, #8]
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	4313      	orrs	r3, r2
 800a50c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4313      	orrs	r3, r2
 800a51a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	691b      	ldr	r3, [r3, #16]
 800a526:	4313      	orrs	r3, r2
 800a528:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	695b      	ldr	r3, [r3, #20]
 800a534:	4313      	orrs	r3, r2
 800a536:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a542:	4313      	orrs	r3, r2
 800a544:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	699b      	ldr	r3, [r3, #24]
 800a550:	041b      	lsls	r3, r3, #16
 800a552:	4313      	orrs	r3, r2
 800a554:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	69db      	ldr	r3, [r3, #28]
 800a560:	4313      	orrs	r3, r2
 800a562:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a1e      	ldr	r2, [pc, #120]	@ (800a5e4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d00e      	beq.n	800a58c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4a1d      	ldr	r2, [pc, #116]	@ (800a5e8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d009      	beq.n	800a58c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4a1b      	ldr	r2, [pc, #108]	@ (800a5ec <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d004      	beq.n	800a58c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	4a1a      	ldr	r2, [pc, #104]	@ (800a5f0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d11c      	bne.n	800a5c6 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a596:	051b      	lsls	r3, r3, #20
 800a598:	4313      	orrs	r3, r2
 800a59a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	6a1b      	ldr	r3, [r3, #32]
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	68fa      	ldr	r2, [r7, #12]
 800a5cc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a5d6:	2300      	movs	r3, #0
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3714      	adds	r7, #20
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr
 800a5e4:	40012c00 	.word	0x40012c00
 800a5e8:	50012c00 	.word	0x50012c00
 800a5ec:	40013400 	.word	0x40013400
 800a5f0:	50013400 	.word	0x50013400

0800a5f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a5fc:	bf00      	nop
 800a5fe:	370c      	adds	r7, #12
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a608:	b480      	push	{r7}
 800a60a:	b083      	sub	sp, #12
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a610:	bf00      	nop
 800a612:	370c      	adds	r7, #12
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a624:	bf00      	nop
 800a626:	370c      	adds	r7, #12
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a638:	bf00      	nop
 800a63a:	370c      	adds	r7, #12
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr

0800a644 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a644:	b480      	push	{r7}
 800a646:	b083      	sub	sp, #12
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a64c:	bf00      	nop
 800a64e:	370c      	adds	r7, #12
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a660:	bf00      	nop
 800a662:	370c      	adds	r7, #12
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr

0800a66c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b083      	sub	sp, #12
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a674:	bf00      	nop
 800a676:	370c      	adds	r7, #12
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr

0800a680 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d101      	bne.n	800a692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a68e:	2301      	movs	r3, #1
 800a690:	e042      	b.n	800a718 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d106      	bne.n	800a6aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f7f7 feff 	bl	80024a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2224      	movs	r2, #36	@ 0x24
 800a6ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	681a      	ldr	r2, [r3, #0]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f022 0201 	bic.w	r2, r2, #1
 800a6c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d002      	beq.n	800a6d0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 fdde 	bl	800b28c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f000 fc2d 	bl	800af30 <UART_SetConfig>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d101      	bne.n	800a6e0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	e01b      	b.n	800a718 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	685a      	ldr	r2, [r3, #4]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a6ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	689a      	ldr	r2, [r3, #8]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a6fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f042 0201 	orr.w	r2, r2, #1
 800a70e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f000 fe5d 	bl	800b3d0 <UART_CheckIdleState>
 800a716:	4603      	mov	r3, r0
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3708      	adds	r7, #8
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b08a      	sub	sp, #40	@ 0x28
 800a724:	af02      	add	r7, sp, #8
 800a726:	60f8      	str	r0, [r7, #12]
 800a728:	60b9      	str	r1, [r7, #8]
 800a72a:	603b      	str	r3, [r7, #0]
 800a72c:	4613      	mov	r3, r2
 800a72e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a736:	2b20      	cmp	r3, #32
 800a738:	f040 808b 	bne.w	800a852 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d002      	beq.n	800a748 <HAL_UART_Transmit+0x28>
 800a742:	88fb      	ldrh	r3, [r7, #6]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d101      	bne.n	800a74c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a748:	2301      	movs	r3, #1
 800a74a:	e083      	b.n	800a854 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	689b      	ldr	r3, [r3, #8]
 800a752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a756:	2b80      	cmp	r3, #128	@ 0x80
 800a758:	d107      	bne.n	800a76a <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	689a      	ldr	r2, [r3, #8]
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a768:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2200      	movs	r2, #0
 800a76e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2221      	movs	r2, #33	@ 0x21
 800a776:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a77a:	f7f8 f879 	bl	8002870 <HAL_GetTick>
 800a77e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	88fa      	ldrh	r2, [r7, #6]
 800a784:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	88fa      	ldrh	r2, [r7, #6]
 800a78c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	689b      	ldr	r3, [r3, #8]
 800a794:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a798:	d108      	bne.n	800a7ac <HAL_UART_Transmit+0x8c>
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	691b      	ldr	r3, [r3, #16]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d104      	bne.n	800a7ac <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	61bb      	str	r3, [r7, #24]
 800a7aa:	e003      	b.n	800a7b4 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a7b4:	e030      	b.n	800a818 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	9300      	str	r3, [sp, #0]
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	2180      	movs	r1, #128	@ 0x80
 800a7c0:	68f8      	ldr	r0, [r7, #12]
 800a7c2:	f000 feaf 	bl	800b524 <UART_WaitOnFlagUntilTimeout>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d005      	beq.n	800a7d8 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2220      	movs	r2, #32
 800a7d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a7d4:	2303      	movs	r3, #3
 800a7d6:	e03d      	b.n	800a854 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800a7d8:	69fb      	ldr	r3, [r7, #28]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d10b      	bne.n	800a7f6 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	881b      	ldrh	r3, [r3, #0]
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a7ec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a7ee:	69bb      	ldr	r3, [r7, #24]
 800a7f0:	3302      	adds	r3, #2
 800a7f2:	61bb      	str	r3, [r7, #24]
 800a7f4:	e007      	b.n	800a806 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	781a      	ldrb	r2, [r3, #0]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a800:	69fb      	ldr	r3, [r7, #28]
 800a802:	3301      	adds	r3, #1
 800a804:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	3b01      	subs	r3, #1
 800a810:	b29a      	uxth	r2, r3
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a81e:	b29b      	uxth	r3, r3
 800a820:	2b00      	cmp	r3, #0
 800a822:	d1c8      	bne.n	800a7b6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	9300      	str	r3, [sp, #0]
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	2200      	movs	r2, #0
 800a82c:	2140      	movs	r1, #64	@ 0x40
 800a82e:	68f8      	ldr	r0, [r7, #12]
 800a830:	f000 fe78 	bl	800b524 <UART_WaitOnFlagUntilTimeout>
 800a834:	4603      	mov	r3, r0
 800a836:	2b00      	cmp	r3, #0
 800a838:	d005      	beq.n	800a846 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2220      	movs	r2, #32
 800a83e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a842:	2303      	movs	r3, #3
 800a844:	e006      	b.n	800a854 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2220      	movs	r2, #32
 800a84a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a84e:	2300      	movs	r3, #0
 800a850:	e000      	b.n	800a854 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800a852:	2302      	movs	r3, #2
  }
}
 800a854:	4618      	mov	r0, r3
 800a856:	3720      	adds	r7, #32
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b08a      	sub	sp, #40	@ 0x28
 800a860:	af00      	add	r7, sp, #0
 800a862:	60f8      	str	r0, [r7, #12]
 800a864:	60b9      	str	r1, [r7, #8]
 800a866:	4613      	mov	r3, r2
 800a868:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a870:	2b20      	cmp	r3, #32
 800a872:	d13c      	bne.n	800a8ee <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d002      	beq.n	800a880 <HAL_UART_Receive_DMA+0x24>
 800a87a:	88fb      	ldrh	r3, [r7, #6]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d101      	bne.n	800a884 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a880:	2301      	movs	r3, #1
 800a882:	e035      	b.n	800a8f0 <HAL_UART_Receive_DMA+0x94>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2200      	movs	r2, #0
 800a888:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	4a1a      	ldr	r2, [pc, #104]	@ (800a8f8 <HAL_UART_Receive_DMA+0x9c>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d024      	beq.n	800a8de <HAL_UART_Receive_DMA+0x82>
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4a18      	ldr	r2, [pc, #96]	@ (800a8fc <HAL_UART_Receive_DMA+0xa0>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d01f      	beq.n	800a8de <HAL_UART_Receive_DMA+0x82>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d018      	beq.n	800a8de <HAL_UART_Receive_DMA+0x82>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	e853 3f00 	ldrex	r3, [r3]
 800a8b8:	613b      	str	r3, [r7, #16]
   return(result);
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a8c0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ca:	623b      	str	r3, [r7, #32]
 800a8cc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ce:	69f9      	ldr	r1, [r7, #28]
 800a8d0:	6a3a      	ldr	r2, [r7, #32]
 800a8d2:	e841 2300 	strex	r3, r2, [r1]
 800a8d6:	61bb      	str	r3, [r7, #24]
   return(result);
 800a8d8:	69bb      	ldr	r3, [r7, #24]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d1e6      	bne.n	800a8ac <HAL_UART_Receive_DMA+0x50>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a8de:	88fb      	ldrh	r3, [r7, #6]
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	68b9      	ldr	r1, [r7, #8]
 800a8e4:	68f8      	ldr	r0, [r7, #12]
 800a8e6:	f000 fe8b 	bl	800b600 <UART_Start_Receive_DMA>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	e000      	b.n	800a8f0 <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a8ee:	2302      	movs	r3, #2
  }
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3728      	adds	r7, #40	@ 0x28
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	44002400 	.word	0x44002400
 800a8fc:	54002400 	.word	0x54002400

0800a900 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b0ae      	sub	sp, #184	@ 0xb8
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	69db      	ldr	r3, [r3, #28]
 800a90e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	689b      	ldr	r3, [r3, #8]
 800a922:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a926:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a92a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a92e:	4013      	ands	r3, r2
 800a930:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 800a934:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d11b      	bne.n	800a974 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a93c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a940:	f003 0320 	and.w	r3, r3, #32
 800a944:	2b00      	cmp	r3, #0
 800a946:	d015      	beq.n	800a974 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a948:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a94c:	f003 0320 	and.w	r3, r3, #32
 800a950:	2b00      	cmp	r3, #0
 800a952:	d105      	bne.n	800a960 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a954:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a958:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d009      	beq.n	800a974 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a964:	2b00      	cmp	r3, #0
 800a966:	f000 82ac 	beq.w	800aec2 <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	4798      	blx	r3
      }
      return;
 800a972:	e2a6      	b.n	800aec2 <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a974:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a978:	2b00      	cmp	r3, #0
 800a97a:	f000 80fd 	beq.w	800ab78 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a97e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a982:	4b7a      	ldr	r3, [pc, #488]	@ (800ab6c <HAL_UART_IRQHandler+0x26c>)
 800a984:	4013      	ands	r3, r2
 800a986:	2b00      	cmp	r3, #0
 800a988:	d106      	bne.n	800a998 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a98a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a98e:	4b78      	ldr	r3, [pc, #480]	@ (800ab70 <HAL_UART_IRQHandler+0x270>)
 800a990:	4013      	ands	r3, r2
 800a992:	2b00      	cmp	r3, #0
 800a994:	f000 80f0 	beq.w	800ab78 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a998:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a99c:	f003 0301 	and.w	r3, r3, #1
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d011      	beq.n	800a9c8 <HAL_UART_IRQHandler+0xc8>
 800a9a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a9a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d00b      	beq.n	800a9c8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9be:	f043 0201 	orr.w	r2, r3, #1
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a9c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a9cc:	f003 0302 	and.w	r3, r3, #2
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d011      	beq.n	800a9f8 <HAL_UART_IRQHandler+0xf8>
 800a9d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a9d8:	f003 0301 	and.w	r3, r3, #1
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d00b      	beq.n	800a9f8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	2202      	movs	r2, #2
 800a9e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9ee:	f043 0204 	orr.w	r2, r3, #4
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a9f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a9fc:	f003 0304 	and.w	r3, r3, #4
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d011      	beq.n	800aa28 <HAL_UART_IRQHandler+0x128>
 800aa04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa08:	f003 0301 	and.w	r3, r3, #1
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d00b      	beq.n	800aa28 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	2204      	movs	r2, #4
 800aa16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa1e:	f043 0202 	orr.w	r2, r3, #2
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aa28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aa2c:	f003 0308 	and.w	r3, r3, #8
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d017      	beq.n	800aa64 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aa34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800aa38:	f003 0320 	and.w	r3, r3, #32
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d105      	bne.n	800aa4c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800aa40:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800aa44:	4b49      	ldr	r3, [pc, #292]	@ (800ab6c <HAL_UART_IRQHandler+0x26c>)
 800aa46:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d00b      	beq.n	800aa64 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	2208      	movs	r2, #8
 800aa52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa5a:	f043 0208 	orr.w	r2, r3, #8
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aa64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aa68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d012      	beq.n	800aa96 <HAL_UART_IRQHandler+0x196>
 800aa70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800aa74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d00c      	beq.n	800aa96 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aa84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa8c:	f043 0220 	orr.w	r2, r3, #32
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	f000 8212 	beq.w	800aec6 <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aaa2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aaa6:	f003 0320 	and.w	r3, r3, #32
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d013      	beq.n	800aad6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aaae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800aab2:	f003 0320 	and.w	r3, r3, #32
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d105      	bne.n	800aac6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aaba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aabe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d007      	beq.n	800aad6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d003      	beq.n	800aad6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aadc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	689b      	ldr	r3, [r3, #8]
 800aae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aaea:	2b40      	cmp	r3, #64	@ 0x40
 800aaec:	d005      	beq.n	800aafa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aaee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800aaf2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d02e      	beq.n	800ab58 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 feb9 	bl	800b872 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	689b      	ldr	r3, [r3, #8]
 800ab06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab0a:	2b40      	cmp	r3, #64	@ 0x40
 800ab0c:	d120      	bne.n	800ab50 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d017      	beq.n	800ab48 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab1e:	4a15      	ldr	r2, [pc, #84]	@ (800ab74 <HAL_UART_IRQHandler+0x274>)
 800ab20:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f7f8 fa69 	bl	8003000 <HAL_DMA_Abort_IT>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d019      	beq.n	800ab68 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ab42:	4610      	mov	r0, r2
 800ab44:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab46:	e00f      	b.n	800ab68 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f000 f9db 	bl	800af04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab4e:	e00b      	b.n	800ab68 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 f9d7 	bl	800af04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab56:	e007      	b.n	800ab68 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f000 f9d3 	bl	800af04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2200      	movs	r2, #0
 800ab62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ab66:	e1ae      	b.n	800aec6 <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab68:	bf00      	nop
    return;
 800ab6a:	e1ac      	b.n	800aec6 <HAL_UART_IRQHandler+0x5c6>
 800ab6c:	10000001 	.word	0x10000001
 800ab70:	04000120 	.word	0x04000120
 800ab74:	0800baef 	.word	0x0800baef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	f040 8142 	bne.w	800ae06 <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ab82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ab86:	f003 0310 	and.w	r3, r3, #16
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	f000 813b 	beq.w	800ae06 <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ab90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ab94:	f003 0310 	and.w	r3, r3, #16
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	f000 8134 	beq.w	800ae06 <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	2210      	movs	r2, #16
 800aba4:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abb0:	2b40      	cmp	r3, #64	@ 0x40
 800abb2:	f040 80aa 	bne.w	800ad0a <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800abc0:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 800abc4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800abc8:	2b00      	cmp	r3, #0
 800abca:	f000 8084 	beq.w	800acd6 <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800abd4:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800abd8:	429a      	cmp	r2, r3
 800abda:	d27c      	bcs.n	800acd6 <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800abe2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800abec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abee:	2b81      	cmp	r3, #129	@ 0x81
 800abf0:	d060      	beq.n	800acb4 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abf8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800abfa:	e853 3f00 	ldrex	r3, [r3]
 800abfe:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ac00:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ac02:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ac06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	461a      	mov	r2, r3
 800ac10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ac14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ac18:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac1a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ac1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ac20:	e841 2300 	strex	r3, r2, [r1]
 800ac24:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ac26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d1e2      	bne.n	800abf2 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	3308      	adds	r3, #8
 800ac32:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ac36:	e853 3f00 	ldrex	r3, [r3]
 800ac3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ac3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac3e:	f023 0301 	bic.w	r3, r3, #1
 800ac42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	3308      	adds	r3, #8
 800ac4c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ac50:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ac52:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac54:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ac56:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ac58:	e841 2300 	strex	r3, r2, [r1]
 800ac5c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ac5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d1e3      	bne.n	800ac2c <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2220      	movs	r2, #32
 800ac68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac7a:	e853 3f00 	ldrex	r3, [r3]
 800ac7e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ac80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac82:	f023 0310 	bic.w	r3, r3, #16
 800ac86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	461a      	mov	r2, r3
 800ac90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ac94:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ac96:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac98:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ac9a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ac9c:	e841 2300 	strex	r3, r2, [r1]
 800aca0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aca2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d1e4      	bne.n	800ac72 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acae:	4618      	mov	r0, r3
 800acb0:	f7f8 f92a 	bl	8002f08 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2202      	movs	r2, #2
 800acb8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	1ad3      	subs	r3, r2, r3
 800acca:	b29b      	uxth	r3, r3
 800accc:	4619      	mov	r1, r3
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 f922 	bl	800af18 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800acd4:	e0f9      	b.n	800aeca <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800acdc:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800ace0:	429a      	cmp	r2, r3
 800ace2:	f040 80f2 	bne.w	800aeca <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acee:	2b81      	cmp	r3, #129	@ 0x81
 800acf0:	f040 80eb 	bne.w	800aeca <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2202      	movs	r2, #2
 800acf8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ad00:	4619      	mov	r1, r3
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 f908 	bl	800af18 <HAL_UARTEx_RxEventCallback>
      return;
 800ad08:	e0df      	b.n	800aeca <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	1ad3      	subs	r3, r2, r3
 800ad1a:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	f000 80d1 	beq.w	800aece <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 800ad2c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	f000 80cc 	beq.w	800aece <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad3e:	e853 3f00 	ldrex	r3, [r3]
 800ad42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ad44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	461a      	mov	r2, r3
 800ad54:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ad58:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad5a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ad5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad60:	e841 2300 	strex	r3, r2, [r1]
 800ad64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ad66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d1e4      	bne.n	800ad36 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	3308      	adds	r3, #8
 800ad72:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad76:	e853 3f00 	ldrex	r3, [r3]
 800ad7a:	623b      	str	r3, [r7, #32]
   return(result);
 800ad7c:	6a3b      	ldr	r3, [r7, #32]
 800ad7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ad82:	f023 0301 	bic.w	r3, r3, #1
 800ad86:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	3308      	adds	r3, #8
 800ad90:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800ad94:	633a      	str	r2, [r7, #48]	@ 0x30
 800ad96:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad9c:	e841 2300 	strex	r3, r2, [r1]
 800ada0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ada2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d1e1      	bne.n	800ad6c <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2220      	movs	r2, #32
 800adac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2200      	movs	r2, #0
 800adb4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2200      	movs	r2, #0
 800adba:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	e853 3f00 	ldrex	r3, [r3]
 800adc8:	60fb      	str	r3, [r7, #12]
   return(result);
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	f023 0310 	bic.w	r3, r3, #16
 800add0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	461a      	mov	r2, r3
 800adda:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800adde:	61fb      	str	r3, [r7, #28]
 800ade0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ade2:	69b9      	ldr	r1, [r7, #24]
 800ade4:	69fa      	ldr	r2, [r7, #28]
 800ade6:	e841 2300 	strex	r3, r2, [r1]
 800adea:	617b      	str	r3, [r7, #20]
   return(result);
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d1e4      	bne.n	800adbc <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2202      	movs	r2, #2
 800adf6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800adf8:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800adfc:	4619      	mov	r1, r3
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f000 f88a 	bl	800af18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ae04:	e063      	b.n	800aece <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ae06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ae0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d00e      	beq.n	800ae30 <HAL_UART_IRQHandler+0x530>
 800ae12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ae16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d008      	beq.n	800ae30 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ae26:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f000 fe9d 	bl	800bb68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ae2e:	e051      	b.n	800aed4 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ae30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ae34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d014      	beq.n	800ae66 <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ae3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ae40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d105      	bne.n	800ae54 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ae48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ae4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d008      	beq.n	800ae66 <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d03a      	beq.n	800aed2 <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	4798      	blx	r3
    }
    return;
 800ae64:	e035      	b.n	800aed2 <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ae66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ae6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d009      	beq.n	800ae86 <HAL_UART_IRQHandler+0x586>
 800ae72:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ae76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d003      	beq.n	800ae86 <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 fe47 	bl	800bb12 <UART_EndTransmit_IT>
    return;
 800ae84:	e026      	b.n	800aed4 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ae86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ae8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d009      	beq.n	800aea6 <HAL_UART_IRQHandler+0x5a6>
 800ae92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ae96:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d003      	beq.n	800aea6 <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 fe76 	bl	800bb90 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aea4:	e016      	b.n	800aed4 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800aea6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aeaa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d010      	beq.n	800aed4 <HAL_UART_IRQHandler+0x5d4>
 800aeb2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	da0c      	bge.n	800aed4 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 fe5e 	bl	800bb7c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aec0:	e008      	b.n	800aed4 <HAL_UART_IRQHandler+0x5d4>
      return;
 800aec2:	bf00      	nop
 800aec4:	e006      	b.n	800aed4 <HAL_UART_IRQHandler+0x5d4>
    return;
 800aec6:	bf00      	nop
 800aec8:	e004      	b.n	800aed4 <HAL_UART_IRQHandler+0x5d4>
      return;
 800aeca:	bf00      	nop
 800aecc:	e002      	b.n	800aed4 <HAL_UART_IRQHandler+0x5d4>
      return;
 800aece:	bf00      	nop
 800aed0:	e000      	b.n	800aed4 <HAL_UART_IRQHandler+0x5d4>
    return;
 800aed2:	bf00      	nop
  }
}
 800aed4:	37b8      	adds	r7, #184	@ 0xb8
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop

0800aedc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aedc:	b480      	push	{r7}
 800aede:	b083      	sub	sp, #12
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800aee4:	bf00      	nop
 800aee6:	370c      	adds	r7, #12
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr

0800aef0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b083      	sub	sp, #12
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800aef8:	bf00      	nop
 800aefa:	370c      	adds	r7, #12
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr

0800af04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800af04:	b480      	push	{r7}
 800af06:	b083      	sub	sp, #12
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800af0c:	bf00      	nop
 800af0e:	370c      	adds	r7, #12
 800af10:	46bd      	mov	sp, r7
 800af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af16:	4770      	bx	lr

0800af18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800af18:	b480      	push	{r7}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	460b      	mov	r3, r1
 800af22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800af24:	bf00      	nop
 800af26:	370c      	adds	r7, #12
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr

0800af30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af34:	b094      	sub	sp, #80	@ 0x50
 800af36:	af00      	add	r7, sp, #0
 800af38:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800af3a:	2300      	movs	r3, #0
 800af3c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800af40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	4b83      	ldr	r3, [pc, #524]	@ (800b154 <UART_SetConfig+0x224>)
 800af46:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800af48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af4a:	689a      	ldr	r2, [r3, #8]
 800af4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af4e:	691b      	ldr	r3, [r3, #16]
 800af50:	431a      	orrs	r2, r3
 800af52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af54:	695b      	ldr	r3, [r3, #20]
 800af56:	431a      	orrs	r2, r3
 800af58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af5a:	69db      	ldr	r3, [r3, #28]
 800af5c:	4313      	orrs	r3, r2
 800af5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800af60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	497c      	ldr	r1, [pc, #496]	@ (800b158 <UART_SetConfig+0x228>)
 800af68:	4019      	ands	r1, r3
 800af6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af6c:	681a      	ldr	r2, [r3, #0]
 800af6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af70:	430b      	orrs	r3, r1
 800af72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800af7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af80:	68d9      	ldr	r1, [r3, #12]
 800af82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af84:	681a      	ldr	r2, [r3, #0]
 800af86:	ea40 0301 	orr.w	r3, r0, r1
 800af8a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800af8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af8e:	699b      	ldr	r3, [r3, #24]
 800af90:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800af92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	4b6f      	ldr	r3, [pc, #444]	@ (800b154 <UART_SetConfig+0x224>)
 800af98:	429a      	cmp	r2, r3
 800af9a:	d009      	beq.n	800afb0 <UART_SetConfig+0x80>
 800af9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af9e:	681a      	ldr	r2, [r3, #0]
 800afa0:	4b6e      	ldr	r3, [pc, #440]	@ (800b15c <UART_SetConfig+0x22c>)
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d004      	beq.n	800afb0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800afa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afa8:	6a1a      	ldr	r2, [r3, #32]
 800afaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afac:	4313      	orrs	r3, r2
 800afae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800afb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800afba:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800afbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afc4:	430b      	orrs	r3, r1
 800afc6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800afc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afce:	f023 000f 	bic.w	r0, r3, #15
 800afd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afd4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800afd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afd8:	681a      	ldr	r2, [r3, #0]
 800afda:	ea40 0301 	orr.w	r3, r0, r1
 800afde:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800afe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afe2:	681a      	ldr	r2, [r3, #0]
 800afe4:	4b5e      	ldr	r3, [pc, #376]	@ (800b160 <UART_SetConfig+0x230>)
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d102      	bne.n	800aff0 <UART_SetConfig+0xc0>
 800afea:	2301      	movs	r3, #1
 800afec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800afee:	e032      	b.n	800b056 <UART_SetConfig+0x126>
 800aff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	4b5b      	ldr	r3, [pc, #364]	@ (800b164 <UART_SetConfig+0x234>)
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d102      	bne.n	800b000 <UART_SetConfig+0xd0>
 800affa:	2302      	movs	r3, #2
 800affc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800affe:	e02a      	b.n	800b056 <UART_SetConfig+0x126>
 800b000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	4b58      	ldr	r3, [pc, #352]	@ (800b168 <UART_SetConfig+0x238>)
 800b006:	429a      	cmp	r2, r3
 800b008:	d102      	bne.n	800b010 <UART_SetConfig+0xe0>
 800b00a:	2304      	movs	r3, #4
 800b00c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b00e:	e022      	b.n	800b056 <UART_SetConfig+0x126>
 800b010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b012:	681a      	ldr	r2, [r3, #0]
 800b014:	4b55      	ldr	r3, [pc, #340]	@ (800b16c <UART_SetConfig+0x23c>)
 800b016:	429a      	cmp	r2, r3
 800b018:	d102      	bne.n	800b020 <UART_SetConfig+0xf0>
 800b01a:	2308      	movs	r3, #8
 800b01c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b01e:	e01a      	b.n	800b056 <UART_SetConfig+0x126>
 800b020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b022:	681a      	ldr	r2, [r3, #0]
 800b024:	4b52      	ldr	r3, [pc, #328]	@ (800b170 <UART_SetConfig+0x240>)
 800b026:	429a      	cmp	r2, r3
 800b028:	d102      	bne.n	800b030 <UART_SetConfig+0x100>
 800b02a:	2310      	movs	r3, #16
 800b02c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b02e:	e012      	b.n	800b056 <UART_SetConfig+0x126>
 800b030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	4b4f      	ldr	r3, [pc, #316]	@ (800b174 <UART_SetConfig+0x244>)
 800b036:	429a      	cmp	r2, r3
 800b038:	d102      	bne.n	800b040 <UART_SetConfig+0x110>
 800b03a:	2320      	movs	r3, #32
 800b03c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b03e:	e00a      	b.n	800b056 <UART_SetConfig+0x126>
 800b040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b042:	681a      	ldr	r2, [r3, #0]
 800b044:	4b43      	ldr	r3, [pc, #268]	@ (800b154 <UART_SetConfig+0x224>)
 800b046:	429a      	cmp	r2, r3
 800b048:	d103      	bne.n	800b052 <UART_SetConfig+0x122>
 800b04a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b04e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b050:	e001      	b.n	800b056 <UART_SetConfig+0x126>
 800b052:	2300      	movs	r3, #0
 800b054:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	4b3e      	ldr	r3, [pc, #248]	@ (800b154 <UART_SetConfig+0x224>)
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d005      	beq.n	800b06c <UART_SetConfig+0x13c>
 800b060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	4b3d      	ldr	r3, [pc, #244]	@ (800b15c <UART_SetConfig+0x22c>)
 800b066:	429a      	cmp	r2, r3
 800b068:	f040 8088 	bne.w	800b17c <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b06c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b06e:	2200      	movs	r2, #0
 800b070:	623b      	str	r3, [r7, #32]
 800b072:	627a      	str	r2, [r7, #36]	@ 0x24
 800b074:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b078:	f7fc f8c0 	bl	80071fc <HAL_RCCEx_GetPeriphCLKFreq>
 800b07c:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800b07e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b080:	2b00      	cmp	r3, #0
 800b082:	f000 80eb 	beq.w	800b25c <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b08a:	4a3b      	ldr	r2, [pc, #236]	@ (800b178 <UART_SetConfig+0x248>)
 800b08c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b090:	461a      	mov	r2, r3
 800b092:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b094:	fbb3 f3f2 	udiv	r3, r3, r2
 800b098:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b09a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b09c:	685a      	ldr	r2, [r3, #4]
 800b09e:	4613      	mov	r3, r2
 800b0a0:	005b      	lsls	r3, r3, #1
 800b0a2:	4413      	add	r3, r2
 800b0a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	d305      	bcc.n	800b0b6 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b0aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b0b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d903      	bls.n	800b0be <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b0bc:	e048      	b.n	800b150 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	61bb      	str	r3, [r7, #24]
 800b0c4:	61fa      	str	r2, [r7, #28]
 800b0c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0ca:	4a2b      	ldr	r2, [pc, #172]	@ (800b178 <UART_SetConfig+0x248>)
 800b0cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	613b      	str	r3, [r7, #16]
 800b0d6:	617a      	str	r2, [r7, #20]
 800b0d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b0dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b0e0:	f7f5 fd20 	bl	8000b24 <__aeabi_uldivmod>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	460b      	mov	r3, r1
 800b0e8:	4610      	mov	r0, r2
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	f04f 0200 	mov.w	r2, #0
 800b0f0:	f04f 0300 	mov.w	r3, #0
 800b0f4:	020b      	lsls	r3, r1, #8
 800b0f6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b0fa:	0202      	lsls	r2, r0, #8
 800b0fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b0fe:	6849      	ldr	r1, [r1, #4]
 800b100:	0849      	lsrs	r1, r1, #1
 800b102:	2000      	movs	r0, #0
 800b104:	460c      	mov	r4, r1
 800b106:	4605      	mov	r5, r0
 800b108:	eb12 0804 	adds.w	r8, r2, r4
 800b10c:	eb43 0905 	adc.w	r9, r3, r5
 800b110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	2200      	movs	r2, #0
 800b116:	60bb      	str	r3, [r7, #8]
 800b118:	60fa      	str	r2, [r7, #12]
 800b11a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b11e:	4640      	mov	r0, r8
 800b120:	4649      	mov	r1, r9
 800b122:	f7f5 fcff 	bl	8000b24 <__aeabi_uldivmod>
 800b126:	4602      	mov	r2, r0
 800b128:	460b      	mov	r3, r1
 800b12a:	4613      	mov	r3, r2
 800b12c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b12e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b130:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b134:	d308      	bcc.n	800b148 <UART_SetConfig+0x218>
 800b136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b138:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b13c:	d204      	bcs.n	800b148 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800b13e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b144:	60da      	str	r2, [r3, #12]
 800b146:	e003      	b.n	800b150 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800b148:	2301      	movs	r3, #1
 800b14a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800b14e:	e085      	b.n	800b25c <UART_SetConfig+0x32c>
 800b150:	e084      	b.n	800b25c <UART_SetConfig+0x32c>
 800b152:	bf00      	nop
 800b154:	44002400 	.word	0x44002400
 800b158:	cfff69f3 	.word	0xcfff69f3
 800b15c:	54002400 	.word	0x54002400
 800b160:	40013800 	.word	0x40013800
 800b164:	40004400 	.word	0x40004400
 800b168:	40004800 	.word	0x40004800
 800b16c:	40004c00 	.word	0x40004c00
 800b170:	40005000 	.word	0x40005000
 800b174:	40006400 	.word	0x40006400
 800b178:	0800cdc4 	.word	0x0800cdc4
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b17c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b17e:	69db      	ldr	r3, [r3, #28]
 800b180:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b184:	d13c      	bne.n	800b200 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b186:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b188:	2200      	movs	r2, #0
 800b18a:	603b      	str	r3, [r7, #0]
 800b18c:	607a      	str	r2, [r7, #4]
 800b18e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b192:	f7fc f833 	bl	80071fc <HAL_RCCEx_GetPeriphCLKFreq>
 800b196:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b198:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d05e      	beq.n	800b25c <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b19e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1a2:	4a39      	ldr	r2, [pc, #228]	@ (800b288 <UART_SetConfig+0x358>)
 800b1a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1b0:	005a      	lsls	r2, r3, #1
 800b1b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	085b      	lsrs	r3, r3, #1
 800b1b8:	441a      	add	r2, r3
 800b1ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b1c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1c6:	2b0f      	cmp	r3, #15
 800b1c8:	d916      	bls.n	800b1f8 <UART_SetConfig+0x2c8>
 800b1ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b1d0:	d212      	bcs.n	800b1f8 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b1d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	f023 030f 	bic.w	r3, r3, #15
 800b1da:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b1dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1de:	085b      	lsrs	r3, r3, #1
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	f003 0307 	and.w	r3, r3, #7
 800b1e6:	b29a      	uxth	r2, r3
 800b1e8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800b1ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b1f4:	60da      	str	r2, [r3, #12]
 800b1f6:	e031      	b.n	800b25c <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b1fe:	e02d      	b.n	800b25c <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b200:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b202:	2200      	movs	r2, #0
 800b204:	469a      	mov	sl, r3
 800b206:	4693      	mov	fp, r2
 800b208:	4650      	mov	r0, sl
 800b20a:	4659      	mov	r1, fp
 800b20c:	f7fb fff6 	bl	80071fc <HAL_RCCEx_GetPeriphCLKFreq>
 800b210:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800b212:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b214:	2b00      	cmp	r3, #0
 800b216:	d021      	beq.n	800b25c <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b21a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b21c:	4a1a      	ldr	r2, [pc, #104]	@ (800b288 <UART_SetConfig+0x358>)
 800b21e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b222:	461a      	mov	r2, r3
 800b224:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b226:	fbb3 f2f2 	udiv	r2, r3, r2
 800b22a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	085b      	lsrs	r3, r3, #1
 800b230:	441a      	add	r2, r3
 800b232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	fbb2 f3f3 	udiv	r3, r2, r3
 800b23a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b23c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b23e:	2b0f      	cmp	r3, #15
 800b240:	d909      	bls.n	800b256 <UART_SetConfig+0x326>
 800b242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b248:	d205      	bcs.n	800b256 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b24a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b24c:	b29a      	uxth	r2, r3
 800b24e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	60da      	str	r2, [r3, #12]
 800b254:	e002      	b.n	800b25c <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800b256:	2301      	movs	r3, #1
 800b258:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b25c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b25e:	2201      	movs	r2, #1
 800b260:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b266:	2201      	movs	r2, #1
 800b268:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b26c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b26e:	2200      	movs	r2, #0
 800b270:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b274:	2200      	movs	r2, #0
 800b276:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b278:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3750      	adds	r7, #80	@ 0x50
 800b280:	46bd      	mov	sp, r7
 800b282:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b286:	bf00      	nop
 800b288:	0800cdc4 	.word	0x0800cdc4

0800b28c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b083      	sub	sp, #12
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b298:	f003 0308 	and.w	r3, r3, #8
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d00a      	beq.n	800b2b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	430a      	orrs	r2, r1
 800b2b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2ba:	f003 0301 	and.w	r3, r3, #1
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d00a      	beq.n	800b2d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	430a      	orrs	r2, r1
 800b2d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2dc:	f003 0302 	and.w	r3, r3, #2
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d00a      	beq.n	800b2fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	430a      	orrs	r2, r1
 800b2f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2fe:	f003 0304 	and.w	r3, r3, #4
 800b302:	2b00      	cmp	r3, #0
 800b304:	d00a      	beq.n	800b31c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	430a      	orrs	r2, r1
 800b31a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b320:	f003 0310 	and.w	r3, r3, #16
 800b324:	2b00      	cmp	r3, #0
 800b326:	d00a      	beq.n	800b33e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	689b      	ldr	r3, [r3, #8]
 800b32e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	430a      	orrs	r2, r1
 800b33c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b342:	f003 0320 	and.w	r3, r3, #32
 800b346:	2b00      	cmp	r3, #0
 800b348:	d00a      	beq.n	800b360 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	689b      	ldr	r3, [r3, #8]
 800b350:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	430a      	orrs	r2, r1
 800b35e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d01a      	beq.n	800b3a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	430a      	orrs	r2, r1
 800b380:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b386:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b38a:	d10a      	bne.n	800b3a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	430a      	orrs	r2, r1
 800b3a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d00a      	beq.n	800b3c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	430a      	orrs	r2, r1
 800b3c2:	605a      	str	r2, [r3, #4]
  }
}
 800b3c4:	bf00      	nop
 800b3c6:	370c      	adds	r7, #12
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr

0800b3d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b098      	sub	sp, #96	@ 0x60
 800b3d4:	af02      	add	r7, sp, #8
 800b3d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b3e0:	f7f7 fa46 	bl	8002870 <HAL_GetTick>
 800b3e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f003 0308 	and.w	r3, r3, #8
 800b3f0:	2b08      	cmp	r3, #8
 800b3f2:	d12f      	bne.n	800b454 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b3f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b3f8:	9300      	str	r3, [sp, #0]
 800b3fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 f88e 	bl	800b524 <UART_WaitOnFlagUntilTimeout>
 800b408:	4603      	mov	r3, r0
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d022      	beq.n	800b454 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b416:	e853 3f00 	ldrex	r3, [r3]
 800b41a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b41c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b41e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b422:	653b      	str	r3, [r7, #80]	@ 0x50
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	461a      	mov	r2, r3
 800b42a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b42c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b42e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b430:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b432:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b434:	e841 2300 	strex	r3, r2, [r1]
 800b438:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b43a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d1e6      	bne.n	800b40e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2220      	movs	r2, #32
 800b444:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2200      	movs	r2, #0
 800b44c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b450:	2303      	movs	r3, #3
 800b452:	e063      	b.n	800b51c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f003 0304 	and.w	r3, r3, #4
 800b45e:	2b04      	cmp	r3, #4
 800b460:	d149      	bne.n	800b4f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b462:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b466:	9300      	str	r3, [sp, #0]
 800b468:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b46a:	2200      	movs	r2, #0
 800b46c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f000 f857 	bl	800b524 <UART_WaitOnFlagUntilTimeout>
 800b476:	4603      	mov	r3, r0
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d03c      	beq.n	800b4f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b484:	e853 3f00 	ldrex	r3, [r3]
 800b488:	623b      	str	r3, [r7, #32]
   return(result);
 800b48a:	6a3b      	ldr	r3, [r7, #32]
 800b48c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b490:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	461a      	mov	r2, r3
 800b498:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b49a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b49c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b49e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b4a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4a2:	e841 2300 	strex	r3, r2, [r1]
 800b4a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b4a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d1e6      	bne.n	800b47c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	3308      	adds	r3, #8
 800b4b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	e853 3f00 	ldrex	r3, [r3]
 800b4bc:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	f023 0301 	bic.w	r3, r3, #1
 800b4c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	3308      	adds	r3, #8
 800b4cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b4ce:	61fa      	str	r2, [r7, #28]
 800b4d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d2:	69b9      	ldr	r1, [r7, #24]
 800b4d4:	69fa      	ldr	r2, [r7, #28]
 800b4d6:	e841 2300 	strex	r3, r2, [r1]
 800b4da:	617b      	str	r3, [r7, #20]
   return(result);
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d1e5      	bne.n	800b4ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2220      	movs	r2, #32
 800b4e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b4f2:	2303      	movs	r3, #3
 800b4f4:	e012      	b.n	800b51c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2220      	movs	r2, #32
 800b4fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2220      	movs	r2, #32
 800b502:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2200      	movs	r2, #0
 800b50a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2200      	movs	r2, #0
 800b510:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2200      	movs	r2, #0
 800b516:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b51a:	2300      	movs	r3, #0
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3758      	adds	r7, #88	@ 0x58
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b084      	sub	sp, #16
 800b528:	af00      	add	r7, sp, #0
 800b52a:	60f8      	str	r0, [r7, #12]
 800b52c:	60b9      	str	r1, [r7, #8]
 800b52e:	603b      	str	r3, [r7, #0]
 800b530:	4613      	mov	r3, r2
 800b532:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b534:	e04f      	b.n	800b5d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b536:	69bb      	ldr	r3, [r7, #24]
 800b538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b53c:	d04b      	beq.n	800b5d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b53e:	f7f7 f997 	bl	8002870 <HAL_GetTick>
 800b542:	4602      	mov	r2, r0
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	1ad3      	subs	r3, r2, r3
 800b548:	69ba      	ldr	r2, [r7, #24]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d302      	bcc.n	800b554 <UART_WaitOnFlagUntilTimeout+0x30>
 800b54e:	69bb      	ldr	r3, [r7, #24]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d101      	bne.n	800b558 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b554:	2303      	movs	r3, #3
 800b556:	e04e      	b.n	800b5f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f003 0304 	and.w	r3, r3, #4
 800b562:	2b00      	cmp	r3, #0
 800b564:	d037      	beq.n	800b5d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	2b80      	cmp	r3, #128	@ 0x80
 800b56a:	d034      	beq.n	800b5d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	2b40      	cmp	r3, #64	@ 0x40
 800b570:	d031      	beq.n	800b5d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	69db      	ldr	r3, [r3, #28]
 800b578:	f003 0308 	and.w	r3, r3, #8
 800b57c:	2b08      	cmp	r3, #8
 800b57e:	d110      	bne.n	800b5a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	2208      	movs	r2, #8
 800b586:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	f000 f972 	bl	800b872 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2208      	movs	r2, #8
 800b592:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2200      	movs	r2, #0
 800b59a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b59e:	2301      	movs	r3, #1
 800b5a0:	e029      	b.n	800b5f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	69db      	ldr	r3, [r3, #28]
 800b5a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b5ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b5b0:	d111      	bne.n	800b5d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b5ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b5bc:	68f8      	ldr	r0, [r7, #12]
 800b5be:	f000 f958 	bl	800b872 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2220      	movs	r2, #32
 800b5c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b5d2:	2303      	movs	r3, #3
 800b5d4:	e00f      	b.n	800b5f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	69da      	ldr	r2, [r3, #28]
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	4013      	ands	r3, r2
 800b5e0:	68ba      	ldr	r2, [r7, #8]
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	bf0c      	ite	eq
 800b5e6:	2301      	moveq	r3, #1
 800b5e8:	2300      	movne	r3, #0
 800b5ea:	b2db      	uxtb	r3, r3
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	79fb      	ldrb	r3, [r7, #7]
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d0a0      	beq.n	800b536 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b5f4:	2300      	movs	r3, #0
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3710      	adds	r7, #16
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
	...

0800b600 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b098      	sub	sp, #96	@ 0x60
 800b604:	af00      	add	r7, sp, #0
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	60b9      	str	r1, [r7, #8]
 800b60a:	4613      	mov	r3, r2
 800b60c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 800b60e:	88fb      	ldrh	r3, [r7, #6]
 800b610:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

  huart->pRxBuffPtr = pData;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	68ba      	ldr	r2, [r7, #8]
 800b618:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	88fa      	ldrh	r2, [r7, #6]
 800b61e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	2200      	movs	r2, #0
 800b626:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	2222      	movs	r2, #34	@ 0x22
 800b62e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d07c      	beq.n	800b736 <UART_Start_Receive_DMA+0x136>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b642:	4a68      	ldr	r2, [pc, #416]	@ (800b7e4 <UART_Start_Receive_DMA+0x1e4>)
 800b644:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b64c:	4a66      	ldr	r2, [pc, #408]	@ (800b7e8 <UART_Start_Receive_DMA+0x1e8>)
 800b64e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b656:	4a65      	ldr	r2, [pc, #404]	@ (800b7ec <UART_Start_Receive_DMA+0x1ec>)
 800b658:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b660:	2200      	movs	r2, #0
 800b662:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	689b      	ldr	r3, [r3, #8]
 800b668:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b66c:	d107      	bne.n	800b67e <UART_Start_Receive_DMA+0x7e>
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	691b      	ldr	r3, [r3, #16]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d103      	bne.n	800b67e <UART_Start_Receive_DMA+0x7e>
    {
      nbByte = Size * 2U;
 800b676:	88fb      	ldrh	r3, [r7, #6]
 800b678:	005b      	lsls	r3, r3, #1
 800b67a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }

    /* Check linked list mode */
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b684:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d034      	beq.n	800b6f8 <UART_Start_Receive_DMA+0xf8>
    {
      if ((huart->hdmarx->LinkedListQueue != NULL) && (huart->hdmarx->LinkedListQueue->Head != NULL))
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b696:	2b00      	cmp	r3, #0
 800b698:	d02a      	beq.n	800b6f0 <UART_Start_Receive_DMA+0xf0>
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d023      	beq.n	800b6f0 <UART_Start_Receive_DMA+0xf0>
      {
        /* Set DMA data size */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 800b6b6:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
          (uint32_t)&huart->Instance->RDR;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f103 0224 	add.w	r2, r3, #36	@ 0x24
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)huart->pRxBuffPtr;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	611a      	str	r2, [r3, #16]

        /* Enable the UART receive DMA channel */
        status = HAL_DMAEx_List_Start_IT(huart->hdmarx);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7f8 f8fc 	bl	80038e0 <HAL_DMAEx_List_Start_IT>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b6ee:	e014      	b.n	800b71a <UART_Start_Receive_DMA+0x11a>
      }
      else
      {
        /* Update status */
        status = HAL_ERROR;
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b6f6:	e010      	b.n	800b71a <UART_Start_Receive_DMA+0x11a>
      }
    }
    else
    {
      /* Enable the UART receive DMA channel */
      status = HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, nbByte);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	3324      	adds	r3, #36	@ 0x24
 800b704:	4619      	mov	r1, r3
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b70a:	461a      	mov	r2, r3
 800b70c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800b710:	f7f7 fb9a 	bl	8002e48 <HAL_DMA_Start_IT>
 800b714:	4603      	mov	r3, r0
 800b716:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    }

    if (status != HAL_OK)
 800b71a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d009      	beq.n	800b736 <UART_Start_Receive_DMA+0x136>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2210      	movs	r2, #16
 800b726:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2220      	movs	r2, #32
 800b72e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b732:	2301      	movs	r3, #1
 800b734:	e051      	b.n	800b7da <UART_Start_Receive_DMA+0x1da>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	691b      	ldr	r3, [r3, #16]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d018      	beq.n	800b770 <UART_Start_Receive_DMA+0x170>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b744:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b746:	e853 3f00 	ldrex	r3, [r3]
 800b74a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b74c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b74e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b752:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	461a      	mov	r2, r3
 800b75a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b75c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b75e:	64ba      	str	r2, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b760:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b762:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b764:	e841 2300 	strex	r3, r2, [r1]
 800b768:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b76a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d1e6      	bne.n	800b73e <UART_Start_Receive_DMA+0x13e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	3308      	adds	r3, #8
 800b776:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b77a:	e853 3f00 	ldrex	r3, [r3]
 800b77e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b782:	f043 0301 	orr.w	r3, r3, #1
 800b786:	657b      	str	r3, [r7, #84]	@ 0x54
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	3308      	adds	r3, #8
 800b78e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b790:	63ba      	str	r2, [r7, #56]	@ 0x38
 800b792:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b794:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b796:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b798:	e841 2300 	strex	r3, r2, [r1]
 800b79c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b79e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d1e5      	bne.n	800b770 <UART_Start_Receive_DMA+0x170>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	3308      	adds	r3, #8
 800b7aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ac:	69bb      	ldr	r3, [r7, #24]
 800b7ae:	e853 3f00 	ldrex	r3, [r3]
 800b7b2:	617b      	str	r3, [r7, #20]
   return(result);
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7ba:	653b      	str	r3, [r7, #80]	@ 0x50
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	3308      	adds	r3, #8
 800b7c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b7c4:	627a      	str	r2, [r7, #36]	@ 0x24
 800b7c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7c8:	6a39      	ldr	r1, [r7, #32]
 800b7ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7cc:	e841 2300 	strex	r3, r2, [r1]
 800b7d0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b7d2:	69fb      	ldr	r3, [r7, #28]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d1e5      	bne.n	800b7a4 <UART_Start_Receive_DMA+0x1a4>

  return HAL_OK;
 800b7d8:	2300      	movs	r3, #0
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3760      	adds	r7, #96	@ 0x60
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	0800b93f 	.word	0x0800b93f
 800b7e8:	0800ba31 	.word	0x0800ba31
 800b7ec:	0800ba6f 	.word	0x0800ba6f

0800b7f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b08f      	sub	sp, #60	@ 0x3c
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7fe:	6a3b      	ldr	r3, [r7, #32]
 800b800:	e853 3f00 	ldrex	r3, [r3]
 800b804:	61fb      	str	r3, [r7, #28]
   return(result);
 800b806:	69fb      	ldr	r3, [r7, #28]
 800b808:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b80c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	461a      	mov	r2, r3
 800b814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b816:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b818:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b81a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b81c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b81e:	e841 2300 	strex	r3, r2, [r1]
 800b822:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b826:	2b00      	cmp	r3, #0
 800b828:	d1e6      	bne.n	800b7f8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	3308      	adds	r3, #8
 800b830:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	e853 3f00 	ldrex	r3, [r3]
 800b838:	60bb      	str	r3, [r7, #8]
   return(result);
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b840:	633b      	str	r3, [r7, #48]	@ 0x30
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	3308      	adds	r3, #8
 800b848:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b84a:	61ba      	str	r2, [r7, #24]
 800b84c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b84e:	6979      	ldr	r1, [r7, #20]
 800b850:	69ba      	ldr	r2, [r7, #24]
 800b852:	e841 2300 	strex	r3, r2, [r1]
 800b856:	613b      	str	r3, [r7, #16]
   return(result);
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d1e5      	bne.n	800b82a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2220      	movs	r2, #32
 800b862:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b866:	bf00      	nop
 800b868:	373c      	adds	r7, #60	@ 0x3c
 800b86a:	46bd      	mov	sp, r7
 800b86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b870:	4770      	bx	lr

0800b872 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b872:	b480      	push	{r7}
 800b874:	b095      	sub	sp, #84	@ 0x54
 800b876:	af00      	add	r7, sp, #0
 800b878:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b882:	e853 3f00 	ldrex	r3, [r3]
 800b886:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b88a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b88e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	461a      	mov	r2, r3
 800b896:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b898:	643b      	str	r3, [r7, #64]	@ 0x40
 800b89a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b89c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b89e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b8a0:	e841 2300 	strex	r3, r2, [r1]
 800b8a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b8a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d1e6      	bne.n	800b87a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	3308      	adds	r3, #8
 800b8b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b4:	6a3b      	ldr	r3, [r7, #32]
 800b8b6:	e853 3f00 	ldrex	r3, [r3]
 800b8ba:	61fb      	str	r3, [r7, #28]
   return(result);
 800b8bc:	69fb      	ldr	r3, [r7, #28]
 800b8be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b8c2:	f023 0301 	bic.w	r3, r3, #1
 800b8c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	3308      	adds	r3, #8
 800b8ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b8d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b8d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b8d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b8d8:	e841 2300 	strex	r3, r2, [r1]
 800b8dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b8de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d1e3      	bne.n	800b8ac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8e8:	2b01      	cmp	r3, #1
 800b8ea:	d118      	bne.n	800b91e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	e853 3f00 	ldrex	r3, [r3]
 800b8f8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	f023 0310 	bic.w	r3, r3, #16
 800b900:	647b      	str	r3, [r7, #68]	@ 0x44
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	461a      	mov	r2, r3
 800b908:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b90a:	61bb      	str	r3, [r7, #24]
 800b90c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b90e:	6979      	ldr	r1, [r7, #20]
 800b910:	69ba      	ldr	r2, [r7, #24]
 800b912:	e841 2300 	strex	r3, r2, [r1]
 800b916:	613b      	str	r3, [r7, #16]
   return(result);
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d1e6      	bne.n	800b8ec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2220      	movs	r2, #32
 800b922:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2200      	movs	r2, #0
 800b92a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2200      	movs	r2, #0
 800b930:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b932:	bf00      	nop
 800b934:	3754      	adds	r7, #84	@ 0x54
 800b936:	46bd      	mov	sp, r7
 800b938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93c:	4770      	bx	lr

0800b93e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b93e:	b580      	push	{r7, lr}
 800b940:	b096      	sub	sp, #88	@ 0x58
 800b942:	af00      	add	r7, sp, #0
 800b944:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b94a:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b950:	2b81      	cmp	r3, #129	@ 0x81
 800b952:	d057      	beq.n	800ba04 <UART_DMAReceiveCplt+0xc6>
  {
    huart->RxXferCount = 0U;
 800b954:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b956:	2200      	movs	r2, #0
 800b958:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b95c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b964:	e853 3f00 	ldrex	r3, [r3]
 800b968:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b96a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b96c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b970:	653b      	str	r3, [r7, #80]	@ 0x50
 800b972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	461a      	mov	r2, r3
 800b978:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b97a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b97c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b97e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b980:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b982:	e841 2300 	strex	r3, r2, [r1]
 800b986:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d1e6      	bne.n	800b95c <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b98e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	3308      	adds	r3, #8
 800b994:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b998:	e853 3f00 	ldrex	r3, [r3]
 800b99c:	623b      	str	r3, [r7, #32]
   return(result);
 800b99e:	6a3b      	ldr	r3, [r7, #32]
 800b9a0:	f023 0301 	bic.w	r3, r3, #1
 800b9a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b9a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	3308      	adds	r3, #8
 800b9ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b9ae:	633a      	str	r2, [r7, #48]	@ 0x30
 800b9b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b9b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9b6:	e841 2300 	strex	r3, r2, [r1]
 800b9ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b9bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d1e5      	bne.n	800b98e <UART_DMAReceiveCplt+0x50>
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b9c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9c4:	2220      	movs	r2, #32
 800b9c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d118      	bne.n	800ba04 <UART_DMAReceiveCplt+0xc6>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	e853 3f00 	ldrex	r3, [r3]
 800b9de:	60fb      	str	r3, [r7, #12]
   return(result);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	f023 0310 	bic.w	r3, r3, #16
 800b9e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b9e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	461a      	mov	r2, r3
 800b9ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b9f0:	61fb      	str	r3, [r7, #28]
 800b9f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9f4:	69b9      	ldr	r1, [r7, #24]
 800b9f6:	69fa      	ldr	r2, [r7, #28]
 800b9f8:	e841 2300 	strex	r3, r2, [r1]
 800b9fc:	617b      	str	r3, [r7, #20]
   return(result);
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d1e6      	bne.n	800b9d2 <UART_DMAReceiveCplt+0x94>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba06:	2200      	movs	r2, #0
 800ba08:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d107      	bne.n	800ba22 <UART_DMAReceiveCplt+0xe4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ba12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ba18:	4619      	mov	r1, r3
 800ba1a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800ba1c:	f7ff fa7c 	bl	800af18 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ba20:	e002      	b.n	800ba28 <UART_DMAReceiveCplt+0xea>
    HAL_UART_RxCpltCallback(huart);
 800ba22:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800ba24:	f7f6 f806 	bl	8001a34 <HAL_UART_RxCpltCallback>
}
 800ba28:	bf00      	nop
 800ba2a:	3758      	adds	r7, #88	@ 0x58
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba3c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	2201      	movs	r2, #1
 800ba42:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d109      	bne.n	800ba60 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ba52:	085b      	lsrs	r3, r3, #1
 800ba54:	b29b      	uxth	r3, r3
 800ba56:	4619      	mov	r1, r3
 800ba58:	68f8      	ldr	r0, [r7, #12]
 800ba5a:	f7ff fa5d 	bl	800af18 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ba5e:	e002      	b.n	800ba66 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800ba60:	68f8      	ldr	r0, [r7, #12]
 800ba62:	f7ff fa45 	bl	800aef0 <HAL_UART_RxHalfCpltCallback>
}
 800ba66:	bf00      	nop
 800ba68:	3710      	adds	r7, #16
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	b086      	sub	sp, #24
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba7a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba82:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ba8a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	689b      	ldr	r3, [r3, #8]
 800ba92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba96:	2b80      	cmp	r3, #128	@ 0x80
 800ba98:	d109      	bne.n	800baae <UART_DMAError+0x40>
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	2b21      	cmp	r3, #33	@ 0x21
 800ba9e:	d106      	bne.n	800baae <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	2200      	movs	r2, #0
 800baa4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800baa8:	6978      	ldr	r0, [r7, #20]
 800baaa:	f7ff fea1 	bl	800b7f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	689b      	ldr	r3, [r3, #8]
 800bab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bab8:	2b40      	cmp	r3, #64	@ 0x40
 800baba:	d109      	bne.n	800bad0 <UART_DMAError+0x62>
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	2b22      	cmp	r3, #34	@ 0x22
 800bac0:	d106      	bne.n	800bad0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	2200      	movs	r2, #0
 800bac6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800baca:	6978      	ldr	r0, [r7, #20]
 800bacc:	f7ff fed1 	bl	800b872 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bad6:	f043 0210 	orr.w	r2, r3, #16
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bae0:	6978      	ldr	r0, [r7, #20]
 800bae2:	f7ff fa0f 	bl	800af04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bae6:	bf00      	nop
 800bae8:	3718      	adds	r7, #24
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}

0800baee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800baee:	b580      	push	{r7, lr}
 800baf0:	b084      	sub	sp, #16
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bafa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2200      	movs	r2, #0
 800bb00:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bb04:	68f8      	ldr	r0, [r7, #12]
 800bb06:	f7ff f9fd 	bl	800af04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb0a:	bf00      	nop
 800bb0c:	3710      	adds	r7, #16
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}

0800bb12 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b088      	sub	sp, #32
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	e853 3f00 	ldrex	r3, [r3]
 800bb26:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bb2e:	61fb      	str	r3, [r7, #28]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	461a      	mov	r2, r3
 800bb36:	69fb      	ldr	r3, [r7, #28]
 800bb38:	61bb      	str	r3, [r7, #24]
 800bb3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb3c:	6979      	ldr	r1, [r7, #20]
 800bb3e:	69ba      	ldr	r2, [r7, #24]
 800bb40:	e841 2300 	strex	r3, r2, [r1]
 800bb44:	613b      	str	r3, [r7, #16]
   return(result);
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d1e6      	bne.n	800bb1a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2220      	movs	r2, #32
 800bb50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2200      	movs	r2, #0
 800bb58:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f7ff f9be 	bl	800aedc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb60:	bf00      	nop
 800bb62:	3720      	adds	r7, #32
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b083      	sub	sp, #12
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bb70:	bf00      	nop
 800bb72:	370c      	adds	r7, #12
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr

0800bb7c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b083      	sub	sp, #12
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bb84:	bf00      	nop
 800bb86:	370c      	adds	r7, #12
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr

0800bb90 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bb90:	b480      	push	{r7}
 800bb92:	b083      	sub	sp, #12
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bb98:	bf00      	nop
 800bb9a:	370c      	adds	r7, #12
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba2:	4770      	bx	lr

0800bba4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b085      	sub	sp, #20
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bbb2:	2b01      	cmp	r3, #1
 800bbb4:	d101      	bne.n	800bbba <HAL_UARTEx_DisableFifoMode+0x16>
 800bbb6:	2302      	movs	r3, #2
 800bbb8:	e027      	b.n	800bc0a <HAL_UARTEx_DisableFifoMode+0x66>
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2201      	movs	r2, #1
 800bbbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2224      	movs	r2, #36	@ 0x24
 800bbc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	681a      	ldr	r2, [r3, #0]
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f022 0201 	bic.w	r2, r2, #1
 800bbe0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bbe8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2200      	movs	r2, #0
 800bbee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	68fa      	ldr	r2, [r7, #12]
 800bbf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2220      	movs	r2, #32
 800bbfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2200      	movs	r2, #0
 800bc04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bc08:	2300      	movs	r3, #0
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3714      	adds	r7, #20
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc14:	4770      	bx	lr

0800bc16 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bc16:	b580      	push	{r7, lr}
 800bc18:	b084      	sub	sp, #16
 800bc1a:	af00      	add	r7, sp, #0
 800bc1c:	6078      	str	r0, [r7, #4]
 800bc1e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	d101      	bne.n	800bc2e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bc2a:	2302      	movs	r3, #2
 800bc2c:	e02d      	b.n	800bc8a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2201      	movs	r2, #1
 800bc32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2224      	movs	r2, #36	@ 0x24
 800bc3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	681a      	ldr	r2, [r3, #0]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f022 0201 	bic.w	r2, r2, #1
 800bc54:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	689b      	ldr	r3, [r3, #8]
 800bc5c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	683a      	ldr	r2, [r7, #0]
 800bc66:	430a      	orrs	r2, r1
 800bc68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f000 f850 	bl	800bd10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	68fa      	ldr	r2, [r7, #12]
 800bc76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2220      	movs	r2, #32
 800bc7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2200      	movs	r2, #0
 800bc84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bc88:	2300      	movs	r3, #0
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3710      	adds	r7, #16
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}

0800bc92 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bc92:	b580      	push	{r7, lr}
 800bc94:	b084      	sub	sp, #16
 800bc96:	af00      	add	r7, sp, #0
 800bc98:	6078      	str	r0, [r7, #4]
 800bc9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bca2:	2b01      	cmp	r3, #1
 800bca4:	d101      	bne.n	800bcaa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bca6:	2302      	movs	r3, #2
 800bca8:	e02d      	b.n	800bd06 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2201      	movs	r2, #1
 800bcae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2224      	movs	r2, #36	@ 0x24
 800bcb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	681a      	ldr	r2, [r3, #0]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f022 0201 	bic.w	r2, r2, #1
 800bcd0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	689b      	ldr	r3, [r3, #8]
 800bcd8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	683a      	ldr	r2, [r7, #0]
 800bce2:	430a      	orrs	r2, r1
 800bce4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f000 f812 	bl	800bd10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	68fa      	ldr	r2, [r7, #12]
 800bcf2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2220      	movs	r2, #32
 800bcf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bd04:	2300      	movs	r3, #0
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3710      	adds	r7, #16
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
	...

0800bd10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bd10:	b480      	push	{r7}
 800bd12:	b085      	sub	sp, #20
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d108      	bne.n	800bd32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2201      	movs	r2, #1
 800bd24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bd30:	e031      	b.n	800bd96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bd32:	2308      	movs	r3, #8
 800bd34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bd36:	2308      	movs	r3, #8
 800bd38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	689b      	ldr	r3, [r3, #8]
 800bd40:	0e5b      	lsrs	r3, r3, #25
 800bd42:	b2db      	uxtb	r3, r3
 800bd44:	f003 0307 	and.w	r3, r3, #7
 800bd48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	689b      	ldr	r3, [r3, #8]
 800bd50:	0f5b      	lsrs	r3, r3, #29
 800bd52:	b2db      	uxtb	r3, r3
 800bd54:	f003 0307 	and.w	r3, r3, #7
 800bd58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bd5a:	7bbb      	ldrb	r3, [r7, #14]
 800bd5c:	7b3a      	ldrb	r2, [r7, #12]
 800bd5e:	4911      	ldr	r1, [pc, #68]	@ (800bda4 <UARTEx_SetNbDataToProcess+0x94>)
 800bd60:	5c8a      	ldrb	r2, [r1, r2]
 800bd62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bd66:	7b3a      	ldrb	r2, [r7, #12]
 800bd68:	490f      	ldr	r1, [pc, #60]	@ (800bda8 <UARTEx_SetNbDataToProcess+0x98>)
 800bd6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bd6c:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd70:	b29a      	uxth	r2, r3
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bd78:	7bfb      	ldrb	r3, [r7, #15]
 800bd7a:	7b7a      	ldrb	r2, [r7, #13]
 800bd7c:	4909      	ldr	r1, [pc, #36]	@ (800bda4 <UARTEx_SetNbDataToProcess+0x94>)
 800bd7e:	5c8a      	ldrb	r2, [r1, r2]
 800bd80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bd84:	7b7a      	ldrb	r2, [r7, #13]
 800bd86:	4908      	ldr	r1, [pc, #32]	@ (800bda8 <UARTEx_SetNbDataToProcess+0x98>)
 800bd88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bd8a:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd8e:	b29a      	uxth	r2, r3
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bd96:	bf00      	nop
 800bd98:	3714      	adds	r7, #20
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda0:	4770      	bx	lr
 800bda2:	bf00      	nop
 800bda4:	0800cddc 	.word	0x0800cddc
 800bda8:	0800cde4 	.word	0x0800cde4

0800bdac <std>:
 800bdac:	2300      	movs	r3, #0
 800bdae:	b510      	push	{r4, lr}
 800bdb0:	4604      	mov	r4, r0
 800bdb2:	6083      	str	r3, [r0, #8]
 800bdb4:	8181      	strh	r1, [r0, #12]
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	6643      	str	r3, [r0, #100]	@ 0x64
 800bdba:	81c2      	strh	r2, [r0, #14]
 800bdbc:	2208      	movs	r2, #8
 800bdbe:	6183      	str	r3, [r0, #24]
 800bdc0:	e9c0 3300 	strd	r3, r3, [r0]
 800bdc4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bdc8:	305c      	adds	r0, #92	@ 0x5c
 800bdca:	f000 f9f9 	bl	800c1c0 <memset>
 800bdce:	4b0d      	ldr	r3, [pc, #52]	@ (800be04 <std+0x58>)
 800bdd0:	6224      	str	r4, [r4, #32]
 800bdd2:	6263      	str	r3, [r4, #36]	@ 0x24
 800bdd4:	4b0c      	ldr	r3, [pc, #48]	@ (800be08 <std+0x5c>)
 800bdd6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bdd8:	4b0c      	ldr	r3, [pc, #48]	@ (800be0c <std+0x60>)
 800bdda:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bddc:	4b0c      	ldr	r3, [pc, #48]	@ (800be10 <std+0x64>)
 800bdde:	6323      	str	r3, [r4, #48]	@ 0x30
 800bde0:	4b0c      	ldr	r3, [pc, #48]	@ (800be14 <std+0x68>)
 800bde2:	429c      	cmp	r4, r3
 800bde4:	d006      	beq.n	800bdf4 <std+0x48>
 800bde6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bdea:	4294      	cmp	r4, r2
 800bdec:	d002      	beq.n	800bdf4 <std+0x48>
 800bdee:	33d0      	adds	r3, #208	@ 0xd0
 800bdf0:	429c      	cmp	r4, r3
 800bdf2:	d105      	bne.n	800be00 <std+0x54>
 800bdf4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bdf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdfc:	f000 ba58 	b.w	800c2b0 <__retarget_lock_init_recursive>
 800be00:	bd10      	pop	{r4, pc}
 800be02:	bf00      	nop
 800be04:	0800c011 	.word	0x0800c011
 800be08:	0800c033 	.word	0x0800c033
 800be0c:	0800c06b 	.word	0x0800c06b
 800be10:	0800c08f 	.word	0x0800c08f
 800be14:	20000550 	.word	0x20000550

0800be18 <stdio_exit_handler>:
 800be18:	4a02      	ldr	r2, [pc, #8]	@ (800be24 <stdio_exit_handler+0xc>)
 800be1a:	4903      	ldr	r1, [pc, #12]	@ (800be28 <stdio_exit_handler+0x10>)
 800be1c:	4803      	ldr	r0, [pc, #12]	@ (800be2c <stdio_exit_handler+0x14>)
 800be1e:	f000 b869 	b.w	800bef4 <_fwalk_sglue>
 800be22:	bf00      	nop
 800be24:	20000090 	.word	0x20000090
 800be28:	0800cb59 	.word	0x0800cb59
 800be2c:	200000a0 	.word	0x200000a0

0800be30 <cleanup_stdio>:
 800be30:	6841      	ldr	r1, [r0, #4]
 800be32:	4b0c      	ldr	r3, [pc, #48]	@ (800be64 <cleanup_stdio+0x34>)
 800be34:	4299      	cmp	r1, r3
 800be36:	b510      	push	{r4, lr}
 800be38:	4604      	mov	r4, r0
 800be3a:	d001      	beq.n	800be40 <cleanup_stdio+0x10>
 800be3c:	f000 fe8c 	bl	800cb58 <_fflush_r>
 800be40:	68a1      	ldr	r1, [r4, #8]
 800be42:	4b09      	ldr	r3, [pc, #36]	@ (800be68 <cleanup_stdio+0x38>)
 800be44:	4299      	cmp	r1, r3
 800be46:	d002      	beq.n	800be4e <cleanup_stdio+0x1e>
 800be48:	4620      	mov	r0, r4
 800be4a:	f000 fe85 	bl	800cb58 <_fflush_r>
 800be4e:	68e1      	ldr	r1, [r4, #12]
 800be50:	4b06      	ldr	r3, [pc, #24]	@ (800be6c <cleanup_stdio+0x3c>)
 800be52:	4299      	cmp	r1, r3
 800be54:	d004      	beq.n	800be60 <cleanup_stdio+0x30>
 800be56:	4620      	mov	r0, r4
 800be58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be5c:	f000 be7c 	b.w	800cb58 <_fflush_r>
 800be60:	bd10      	pop	{r4, pc}
 800be62:	bf00      	nop
 800be64:	20000550 	.word	0x20000550
 800be68:	200005b8 	.word	0x200005b8
 800be6c:	20000620 	.word	0x20000620

0800be70 <global_stdio_init.part.0>:
 800be70:	b510      	push	{r4, lr}
 800be72:	4b0b      	ldr	r3, [pc, #44]	@ (800bea0 <global_stdio_init.part.0+0x30>)
 800be74:	2104      	movs	r1, #4
 800be76:	4c0b      	ldr	r4, [pc, #44]	@ (800bea4 <global_stdio_init.part.0+0x34>)
 800be78:	4a0b      	ldr	r2, [pc, #44]	@ (800bea8 <global_stdio_init.part.0+0x38>)
 800be7a:	4620      	mov	r0, r4
 800be7c:	601a      	str	r2, [r3, #0]
 800be7e:	2200      	movs	r2, #0
 800be80:	f7ff ff94 	bl	800bdac <std>
 800be84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800be88:	2201      	movs	r2, #1
 800be8a:	2109      	movs	r1, #9
 800be8c:	f7ff ff8e 	bl	800bdac <std>
 800be90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800be94:	2202      	movs	r2, #2
 800be96:	2112      	movs	r1, #18
 800be98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be9c:	f7ff bf86 	b.w	800bdac <std>
 800bea0:	20000688 	.word	0x20000688
 800bea4:	20000550 	.word	0x20000550
 800bea8:	0800be19 	.word	0x0800be19

0800beac <__sfp_lock_acquire>:
 800beac:	4801      	ldr	r0, [pc, #4]	@ (800beb4 <__sfp_lock_acquire+0x8>)
 800beae:	f000 ba00 	b.w	800c2b2 <__retarget_lock_acquire_recursive>
 800beb2:	bf00      	nop
 800beb4:	20000691 	.word	0x20000691

0800beb8 <__sfp_lock_release>:
 800beb8:	4801      	ldr	r0, [pc, #4]	@ (800bec0 <__sfp_lock_release+0x8>)
 800beba:	f000 b9fb 	b.w	800c2b4 <__retarget_lock_release_recursive>
 800bebe:	bf00      	nop
 800bec0:	20000691 	.word	0x20000691

0800bec4 <__sinit>:
 800bec4:	b510      	push	{r4, lr}
 800bec6:	4604      	mov	r4, r0
 800bec8:	f7ff fff0 	bl	800beac <__sfp_lock_acquire>
 800becc:	6a23      	ldr	r3, [r4, #32]
 800bece:	b11b      	cbz	r3, 800bed8 <__sinit+0x14>
 800bed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bed4:	f7ff bff0 	b.w	800beb8 <__sfp_lock_release>
 800bed8:	4b04      	ldr	r3, [pc, #16]	@ (800beec <__sinit+0x28>)
 800beda:	6223      	str	r3, [r4, #32]
 800bedc:	4b04      	ldr	r3, [pc, #16]	@ (800bef0 <__sinit+0x2c>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d1f5      	bne.n	800bed0 <__sinit+0xc>
 800bee4:	f7ff ffc4 	bl	800be70 <global_stdio_init.part.0>
 800bee8:	e7f2      	b.n	800bed0 <__sinit+0xc>
 800beea:	bf00      	nop
 800beec:	0800be31 	.word	0x0800be31
 800bef0:	20000688 	.word	0x20000688

0800bef4 <_fwalk_sglue>:
 800bef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bef8:	4607      	mov	r7, r0
 800befa:	4688      	mov	r8, r1
 800befc:	4614      	mov	r4, r2
 800befe:	2600      	movs	r6, #0
 800bf00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf04:	f1b9 0901 	subs.w	r9, r9, #1
 800bf08:	d505      	bpl.n	800bf16 <_fwalk_sglue+0x22>
 800bf0a:	6824      	ldr	r4, [r4, #0]
 800bf0c:	2c00      	cmp	r4, #0
 800bf0e:	d1f7      	bne.n	800bf00 <_fwalk_sglue+0xc>
 800bf10:	4630      	mov	r0, r6
 800bf12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf16:	89ab      	ldrh	r3, [r5, #12]
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d907      	bls.n	800bf2c <_fwalk_sglue+0x38>
 800bf1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf20:	3301      	adds	r3, #1
 800bf22:	d003      	beq.n	800bf2c <_fwalk_sglue+0x38>
 800bf24:	4629      	mov	r1, r5
 800bf26:	4638      	mov	r0, r7
 800bf28:	47c0      	blx	r8
 800bf2a:	4306      	orrs	r6, r0
 800bf2c:	3568      	adds	r5, #104	@ 0x68
 800bf2e:	e7e9      	b.n	800bf04 <_fwalk_sglue+0x10>

0800bf30 <iprintf>:
 800bf30:	b40f      	push	{r0, r1, r2, r3}
 800bf32:	b507      	push	{r0, r1, r2, lr}
 800bf34:	4906      	ldr	r1, [pc, #24]	@ (800bf50 <iprintf+0x20>)
 800bf36:	ab04      	add	r3, sp, #16
 800bf38:	6808      	ldr	r0, [r1, #0]
 800bf3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf3e:	6881      	ldr	r1, [r0, #8]
 800bf40:	9301      	str	r3, [sp, #4]
 800bf42:	f000 fadb 	bl	800c4fc <_vfiprintf_r>
 800bf46:	b003      	add	sp, #12
 800bf48:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf4c:	b004      	add	sp, #16
 800bf4e:	4770      	bx	lr
 800bf50:	2000009c 	.word	0x2000009c

0800bf54 <_puts_r>:
 800bf54:	6a03      	ldr	r3, [r0, #32]
 800bf56:	b570      	push	{r4, r5, r6, lr}
 800bf58:	4605      	mov	r5, r0
 800bf5a:	460e      	mov	r6, r1
 800bf5c:	6884      	ldr	r4, [r0, #8]
 800bf5e:	b90b      	cbnz	r3, 800bf64 <_puts_r+0x10>
 800bf60:	f7ff ffb0 	bl	800bec4 <__sinit>
 800bf64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bf66:	07db      	lsls	r3, r3, #31
 800bf68:	d405      	bmi.n	800bf76 <_puts_r+0x22>
 800bf6a:	89a3      	ldrh	r3, [r4, #12]
 800bf6c:	0598      	lsls	r0, r3, #22
 800bf6e:	d402      	bmi.n	800bf76 <_puts_r+0x22>
 800bf70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf72:	f000 f99e 	bl	800c2b2 <__retarget_lock_acquire_recursive>
 800bf76:	89a3      	ldrh	r3, [r4, #12]
 800bf78:	0719      	lsls	r1, r3, #28
 800bf7a:	d502      	bpl.n	800bf82 <_puts_r+0x2e>
 800bf7c:	6923      	ldr	r3, [r4, #16]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d135      	bne.n	800bfee <_puts_r+0x9a>
 800bf82:	4621      	mov	r1, r4
 800bf84:	4628      	mov	r0, r5
 800bf86:	f000 f8c5 	bl	800c114 <__swsetup_r>
 800bf8a:	b380      	cbz	r0, 800bfee <_puts_r+0x9a>
 800bf8c:	f04f 35ff 	mov.w	r5, #4294967295
 800bf90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bf92:	07da      	lsls	r2, r3, #31
 800bf94:	d405      	bmi.n	800bfa2 <_puts_r+0x4e>
 800bf96:	89a3      	ldrh	r3, [r4, #12]
 800bf98:	059b      	lsls	r3, r3, #22
 800bf9a:	d402      	bmi.n	800bfa2 <_puts_r+0x4e>
 800bf9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf9e:	f000 f989 	bl	800c2b4 <__retarget_lock_release_recursive>
 800bfa2:	4628      	mov	r0, r5
 800bfa4:	bd70      	pop	{r4, r5, r6, pc}
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	da04      	bge.n	800bfb4 <_puts_r+0x60>
 800bfaa:	69a2      	ldr	r2, [r4, #24]
 800bfac:	429a      	cmp	r2, r3
 800bfae:	dc17      	bgt.n	800bfe0 <_puts_r+0x8c>
 800bfb0:	290a      	cmp	r1, #10
 800bfb2:	d015      	beq.n	800bfe0 <_puts_r+0x8c>
 800bfb4:	6823      	ldr	r3, [r4, #0]
 800bfb6:	1c5a      	adds	r2, r3, #1
 800bfb8:	6022      	str	r2, [r4, #0]
 800bfba:	7019      	strb	r1, [r3, #0]
 800bfbc:	68a3      	ldr	r3, [r4, #8]
 800bfbe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bfc2:	3b01      	subs	r3, #1
 800bfc4:	60a3      	str	r3, [r4, #8]
 800bfc6:	2900      	cmp	r1, #0
 800bfc8:	d1ed      	bne.n	800bfa6 <_puts_r+0x52>
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	da11      	bge.n	800bff2 <_puts_r+0x9e>
 800bfce:	4622      	mov	r2, r4
 800bfd0:	210a      	movs	r1, #10
 800bfd2:	4628      	mov	r0, r5
 800bfd4:	f000 f85f 	bl	800c096 <__swbuf_r>
 800bfd8:	3001      	adds	r0, #1
 800bfda:	d0d7      	beq.n	800bf8c <_puts_r+0x38>
 800bfdc:	250a      	movs	r5, #10
 800bfde:	e7d7      	b.n	800bf90 <_puts_r+0x3c>
 800bfe0:	4622      	mov	r2, r4
 800bfe2:	4628      	mov	r0, r5
 800bfe4:	f000 f857 	bl	800c096 <__swbuf_r>
 800bfe8:	3001      	adds	r0, #1
 800bfea:	d1e7      	bne.n	800bfbc <_puts_r+0x68>
 800bfec:	e7ce      	b.n	800bf8c <_puts_r+0x38>
 800bfee:	3e01      	subs	r6, #1
 800bff0:	e7e4      	b.n	800bfbc <_puts_r+0x68>
 800bff2:	6823      	ldr	r3, [r4, #0]
 800bff4:	1c5a      	adds	r2, r3, #1
 800bff6:	6022      	str	r2, [r4, #0]
 800bff8:	220a      	movs	r2, #10
 800bffa:	701a      	strb	r2, [r3, #0]
 800bffc:	e7ee      	b.n	800bfdc <_puts_r+0x88>
	...

0800c000 <puts>:
 800c000:	4b02      	ldr	r3, [pc, #8]	@ (800c00c <puts+0xc>)
 800c002:	4601      	mov	r1, r0
 800c004:	6818      	ldr	r0, [r3, #0]
 800c006:	f7ff bfa5 	b.w	800bf54 <_puts_r>
 800c00a:	bf00      	nop
 800c00c:	2000009c 	.word	0x2000009c

0800c010 <__sread>:
 800c010:	b510      	push	{r4, lr}
 800c012:	460c      	mov	r4, r1
 800c014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c018:	f000 f8fc 	bl	800c214 <_read_r>
 800c01c:	2800      	cmp	r0, #0
 800c01e:	bfab      	itete	ge
 800c020:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c022:	89a3      	ldrhlt	r3, [r4, #12]
 800c024:	181b      	addge	r3, r3, r0
 800c026:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c02a:	bfac      	ite	ge
 800c02c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c02e:	81a3      	strhlt	r3, [r4, #12]
 800c030:	bd10      	pop	{r4, pc}

0800c032 <__swrite>:
 800c032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c036:	461f      	mov	r7, r3
 800c038:	898b      	ldrh	r3, [r1, #12]
 800c03a:	4605      	mov	r5, r0
 800c03c:	460c      	mov	r4, r1
 800c03e:	05db      	lsls	r3, r3, #23
 800c040:	4616      	mov	r6, r2
 800c042:	d505      	bpl.n	800c050 <__swrite+0x1e>
 800c044:	2302      	movs	r3, #2
 800c046:	2200      	movs	r2, #0
 800c048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c04c:	f000 f8d0 	bl	800c1f0 <_lseek_r>
 800c050:	89a3      	ldrh	r3, [r4, #12]
 800c052:	4632      	mov	r2, r6
 800c054:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c058:	4628      	mov	r0, r5
 800c05a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c05e:	81a3      	strh	r3, [r4, #12]
 800c060:	463b      	mov	r3, r7
 800c062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c066:	f000 b8e7 	b.w	800c238 <_write_r>

0800c06a <__sseek>:
 800c06a:	b510      	push	{r4, lr}
 800c06c:	460c      	mov	r4, r1
 800c06e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c072:	f000 f8bd 	bl	800c1f0 <_lseek_r>
 800c076:	1c43      	adds	r3, r0, #1
 800c078:	89a3      	ldrh	r3, [r4, #12]
 800c07a:	bf15      	itete	ne
 800c07c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c07e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c082:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c086:	81a3      	strheq	r3, [r4, #12]
 800c088:	bf18      	it	ne
 800c08a:	81a3      	strhne	r3, [r4, #12]
 800c08c:	bd10      	pop	{r4, pc}

0800c08e <__sclose>:
 800c08e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c092:	f000 b89d 	b.w	800c1d0 <_close_r>

0800c096 <__swbuf_r>:
 800c096:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c098:	460e      	mov	r6, r1
 800c09a:	4614      	mov	r4, r2
 800c09c:	4605      	mov	r5, r0
 800c09e:	b118      	cbz	r0, 800c0a8 <__swbuf_r+0x12>
 800c0a0:	6a03      	ldr	r3, [r0, #32]
 800c0a2:	b90b      	cbnz	r3, 800c0a8 <__swbuf_r+0x12>
 800c0a4:	f7ff ff0e 	bl	800bec4 <__sinit>
 800c0a8:	69a3      	ldr	r3, [r4, #24]
 800c0aa:	60a3      	str	r3, [r4, #8]
 800c0ac:	89a3      	ldrh	r3, [r4, #12]
 800c0ae:	071a      	lsls	r2, r3, #28
 800c0b0:	d501      	bpl.n	800c0b6 <__swbuf_r+0x20>
 800c0b2:	6923      	ldr	r3, [r4, #16]
 800c0b4:	b943      	cbnz	r3, 800c0c8 <__swbuf_r+0x32>
 800c0b6:	4621      	mov	r1, r4
 800c0b8:	4628      	mov	r0, r5
 800c0ba:	f000 f82b 	bl	800c114 <__swsetup_r>
 800c0be:	b118      	cbz	r0, 800c0c8 <__swbuf_r+0x32>
 800c0c0:	f04f 37ff 	mov.w	r7, #4294967295
 800c0c4:	4638      	mov	r0, r7
 800c0c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0c8:	6823      	ldr	r3, [r4, #0]
 800c0ca:	b2f6      	uxtb	r6, r6
 800c0cc:	6922      	ldr	r2, [r4, #16]
 800c0ce:	4637      	mov	r7, r6
 800c0d0:	1a98      	subs	r0, r3, r2
 800c0d2:	6963      	ldr	r3, [r4, #20]
 800c0d4:	4283      	cmp	r3, r0
 800c0d6:	dc05      	bgt.n	800c0e4 <__swbuf_r+0x4e>
 800c0d8:	4621      	mov	r1, r4
 800c0da:	4628      	mov	r0, r5
 800c0dc:	f000 fd3c 	bl	800cb58 <_fflush_r>
 800c0e0:	2800      	cmp	r0, #0
 800c0e2:	d1ed      	bne.n	800c0c0 <__swbuf_r+0x2a>
 800c0e4:	68a3      	ldr	r3, [r4, #8]
 800c0e6:	3b01      	subs	r3, #1
 800c0e8:	60a3      	str	r3, [r4, #8]
 800c0ea:	6823      	ldr	r3, [r4, #0]
 800c0ec:	1c5a      	adds	r2, r3, #1
 800c0ee:	6022      	str	r2, [r4, #0]
 800c0f0:	701e      	strb	r6, [r3, #0]
 800c0f2:	1c43      	adds	r3, r0, #1
 800c0f4:	6962      	ldr	r2, [r4, #20]
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d004      	beq.n	800c104 <__swbuf_r+0x6e>
 800c0fa:	89a3      	ldrh	r3, [r4, #12]
 800c0fc:	07db      	lsls	r3, r3, #31
 800c0fe:	d5e1      	bpl.n	800c0c4 <__swbuf_r+0x2e>
 800c100:	2e0a      	cmp	r6, #10
 800c102:	d1df      	bne.n	800c0c4 <__swbuf_r+0x2e>
 800c104:	4621      	mov	r1, r4
 800c106:	4628      	mov	r0, r5
 800c108:	f000 fd26 	bl	800cb58 <_fflush_r>
 800c10c:	2800      	cmp	r0, #0
 800c10e:	d0d9      	beq.n	800c0c4 <__swbuf_r+0x2e>
 800c110:	e7d6      	b.n	800c0c0 <__swbuf_r+0x2a>
	...

0800c114 <__swsetup_r>:
 800c114:	b538      	push	{r3, r4, r5, lr}
 800c116:	4b29      	ldr	r3, [pc, #164]	@ (800c1bc <__swsetup_r+0xa8>)
 800c118:	4605      	mov	r5, r0
 800c11a:	460c      	mov	r4, r1
 800c11c:	6818      	ldr	r0, [r3, #0]
 800c11e:	b118      	cbz	r0, 800c128 <__swsetup_r+0x14>
 800c120:	6a03      	ldr	r3, [r0, #32]
 800c122:	b90b      	cbnz	r3, 800c128 <__swsetup_r+0x14>
 800c124:	f7ff fece 	bl	800bec4 <__sinit>
 800c128:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c12c:	0719      	lsls	r1, r3, #28
 800c12e:	d422      	bmi.n	800c176 <__swsetup_r+0x62>
 800c130:	06da      	lsls	r2, r3, #27
 800c132:	d407      	bmi.n	800c144 <__swsetup_r+0x30>
 800c134:	2209      	movs	r2, #9
 800c136:	602a      	str	r2, [r5, #0]
 800c138:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c13c:	f04f 30ff 	mov.w	r0, #4294967295
 800c140:	81a3      	strh	r3, [r4, #12]
 800c142:	e033      	b.n	800c1ac <__swsetup_r+0x98>
 800c144:	0758      	lsls	r0, r3, #29
 800c146:	d512      	bpl.n	800c16e <__swsetup_r+0x5a>
 800c148:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c14a:	b141      	cbz	r1, 800c15e <__swsetup_r+0x4a>
 800c14c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c150:	4299      	cmp	r1, r3
 800c152:	d002      	beq.n	800c15a <__swsetup_r+0x46>
 800c154:	4628      	mov	r0, r5
 800c156:	f000 f8af 	bl	800c2b8 <_free_r>
 800c15a:	2300      	movs	r3, #0
 800c15c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c15e:	89a3      	ldrh	r3, [r4, #12]
 800c160:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c164:	81a3      	strh	r3, [r4, #12]
 800c166:	2300      	movs	r3, #0
 800c168:	6063      	str	r3, [r4, #4]
 800c16a:	6923      	ldr	r3, [r4, #16]
 800c16c:	6023      	str	r3, [r4, #0]
 800c16e:	89a3      	ldrh	r3, [r4, #12]
 800c170:	f043 0308 	orr.w	r3, r3, #8
 800c174:	81a3      	strh	r3, [r4, #12]
 800c176:	6923      	ldr	r3, [r4, #16]
 800c178:	b94b      	cbnz	r3, 800c18e <__swsetup_r+0x7a>
 800c17a:	89a3      	ldrh	r3, [r4, #12]
 800c17c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c180:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c184:	d003      	beq.n	800c18e <__swsetup_r+0x7a>
 800c186:	4621      	mov	r1, r4
 800c188:	4628      	mov	r0, r5
 800c18a:	f000 fd32 	bl	800cbf2 <__smakebuf_r>
 800c18e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c192:	f013 0201 	ands.w	r2, r3, #1
 800c196:	d00a      	beq.n	800c1ae <__swsetup_r+0x9a>
 800c198:	2200      	movs	r2, #0
 800c19a:	60a2      	str	r2, [r4, #8]
 800c19c:	6962      	ldr	r2, [r4, #20]
 800c19e:	4252      	negs	r2, r2
 800c1a0:	61a2      	str	r2, [r4, #24]
 800c1a2:	6922      	ldr	r2, [r4, #16]
 800c1a4:	b942      	cbnz	r2, 800c1b8 <__swsetup_r+0xa4>
 800c1a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c1aa:	d1c5      	bne.n	800c138 <__swsetup_r+0x24>
 800c1ac:	bd38      	pop	{r3, r4, r5, pc}
 800c1ae:	0799      	lsls	r1, r3, #30
 800c1b0:	bf58      	it	pl
 800c1b2:	6962      	ldrpl	r2, [r4, #20]
 800c1b4:	60a2      	str	r2, [r4, #8]
 800c1b6:	e7f4      	b.n	800c1a2 <__swsetup_r+0x8e>
 800c1b8:	2000      	movs	r0, #0
 800c1ba:	e7f7      	b.n	800c1ac <__swsetup_r+0x98>
 800c1bc:	2000009c 	.word	0x2000009c

0800c1c0 <memset>:
 800c1c0:	4402      	add	r2, r0
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d100      	bne.n	800c1ca <memset+0xa>
 800c1c8:	4770      	bx	lr
 800c1ca:	f803 1b01 	strb.w	r1, [r3], #1
 800c1ce:	e7f9      	b.n	800c1c4 <memset+0x4>

0800c1d0 <_close_r>:
 800c1d0:	b538      	push	{r3, r4, r5, lr}
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	4d05      	ldr	r5, [pc, #20]	@ (800c1ec <_close_r+0x1c>)
 800c1d6:	4604      	mov	r4, r0
 800c1d8:	4608      	mov	r0, r1
 800c1da:	602b      	str	r3, [r5, #0]
 800c1dc:	f7f5 fdb5 	bl	8001d4a <_close>
 800c1e0:	1c43      	adds	r3, r0, #1
 800c1e2:	d102      	bne.n	800c1ea <_close_r+0x1a>
 800c1e4:	682b      	ldr	r3, [r5, #0]
 800c1e6:	b103      	cbz	r3, 800c1ea <_close_r+0x1a>
 800c1e8:	6023      	str	r3, [r4, #0]
 800c1ea:	bd38      	pop	{r3, r4, r5, pc}
 800c1ec:	2000068c 	.word	0x2000068c

0800c1f0 <_lseek_r>:
 800c1f0:	b538      	push	{r3, r4, r5, lr}
 800c1f2:	4604      	mov	r4, r0
 800c1f4:	4d06      	ldr	r5, [pc, #24]	@ (800c210 <_lseek_r+0x20>)
 800c1f6:	4608      	mov	r0, r1
 800c1f8:	4611      	mov	r1, r2
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	602a      	str	r2, [r5, #0]
 800c1fe:	461a      	mov	r2, r3
 800c200:	f7f5 fdca 	bl	8001d98 <_lseek>
 800c204:	1c43      	adds	r3, r0, #1
 800c206:	d102      	bne.n	800c20e <_lseek_r+0x1e>
 800c208:	682b      	ldr	r3, [r5, #0]
 800c20a:	b103      	cbz	r3, 800c20e <_lseek_r+0x1e>
 800c20c:	6023      	str	r3, [r4, #0]
 800c20e:	bd38      	pop	{r3, r4, r5, pc}
 800c210:	2000068c 	.word	0x2000068c

0800c214 <_read_r>:
 800c214:	b538      	push	{r3, r4, r5, lr}
 800c216:	4604      	mov	r4, r0
 800c218:	4d06      	ldr	r5, [pc, #24]	@ (800c234 <_read_r+0x20>)
 800c21a:	4608      	mov	r0, r1
 800c21c:	4611      	mov	r1, r2
 800c21e:	2200      	movs	r2, #0
 800c220:	602a      	str	r2, [r5, #0]
 800c222:	461a      	mov	r2, r3
 800c224:	f7f5 fd58 	bl	8001cd8 <_read>
 800c228:	1c43      	adds	r3, r0, #1
 800c22a:	d102      	bne.n	800c232 <_read_r+0x1e>
 800c22c:	682b      	ldr	r3, [r5, #0]
 800c22e:	b103      	cbz	r3, 800c232 <_read_r+0x1e>
 800c230:	6023      	str	r3, [r4, #0]
 800c232:	bd38      	pop	{r3, r4, r5, pc}
 800c234:	2000068c 	.word	0x2000068c

0800c238 <_write_r>:
 800c238:	b538      	push	{r3, r4, r5, lr}
 800c23a:	4604      	mov	r4, r0
 800c23c:	4d06      	ldr	r5, [pc, #24]	@ (800c258 <_write_r+0x20>)
 800c23e:	4608      	mov	r0, r1
 800c240:	4611      	mov	r1, r2
 800c242:	2200      	movs	r2, #0
 800c244:	602a      	str	r2, [r5, #0]
 800c246:	461a      	mov	r2, r3
 800c248:	f7f5 fd63 	bl	8001d12 <_write>
 800c24c:	1c43      	adds	r3, r0, #1
 800c24e:	d102      	bne.n	800c256 <_write_r+0x1e>
 800c250:	682b      	ldr	r3, [r5, #0]
 800c252:	b103      	cbz	r3, 800c256 <_write_r+0x1e>
 800c254:	6023      	str	r3, [r4, #0]
 800c256:	bd38      	pop	{r3, r4, r5, pc}
 800c258:	2000068c 	.word	0x2000068c

0800c25c <__errno>:
 800c25c:	4b01      	ldr	r3, [pc, #4]	@ (800c264 <__errno+0x8>)
 800c25e:	6818      	ldr	r0, [r3, #0]
 800c260:	4770      	bx	lr
 800c262:	bf00      	nop
 800c264:	2000009c 	.word	0x2000009c

0800c268 <__libc_init_array>:
 800c268:	b570      	push	{r4, r5, r6, lr}
 800c26a:	4d0d      	ldr	r5, [pc, #52]	@ (800c2a0 <__libc_init_array+0x38>)
 800c26c:	2600      	movs	r6, #0
 800c26e:	4c0d      	ldr	r4, [pc, #52]	@ (800c2a4 <__libc_init_array+0x3c>)
 800c270:	1b64      	subs	r4, r4, r5
 800c272:	10a4      	asrs	r4, r4, #2
 800c274:	42a6      	cmp	r6, r4
 800c276:	d109      	bne.n	800c28c <__libc_init_array+0x24>
 800c278:	4d0b      	ldr	r5, [pc, #44]	@ (800c2a8 <__libc_init_array+0x40>)
 800c27a:	2600      	movs	r6, #0
 800c27c:	4c0b      	ldr	r4, [pc, #44]	@ (800c2ac <__libc_init_array+0x44>)
 800c27e:	f000 fd35 	bl	800ccec <_init>
 800c282:	1b64      	subs	r4, r4, r5
 800c284:	10a4      	asrs	r4, r4, #2
 800c286:	42a6      	cmp	r6, r4
 800c288:	d105      	bne.n	800c296 <__libc_init_array+0x2e>
 800c28a:	bd70      	pop	{r4, r5, r6, pc}
 800c28c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c290:	3601      	adds	r6, #1
 800c292:	4798      	blx	r3
 800c294:	e7ee      	b.n	800c274 <__libc_init_array+0xc>
 800c296:	f855 3b04 	ldr.w	r3, [r5], #4
 800c29a:	3601      	adds	r6, #1
 800c29c:	4798      	blx	r3
 800c29e:	e7f2      	b.n	800c286 <__libc_init_array+0x1e>
 800c2a0:	0800ce28 	.word	0x0800ce28
 800c2a4:	0800ce28 	.word	0x0800ce28
 800c2a8:	0800ce28 	.word	0x0800ce28
 800c2ac:	0800ce2c 	.word	0x0800ce2c

0800c2b0 <__retarget_lock_init_recursive>:
 800c2b0:	4770      	bx	lr

0800c2b2 <__retarget_lock_acquire_recursive>:
 800c2b2:	4770      	bx	lr

0800c2b4 <__retarget_lock_release_recursive>:
 800c2b4:	4770      	bx	lr
	...

0800c2b8 <_free_r>:
 800c2b8:	b538      	push	{r3, r4, r5, lr}
 800c2ba:	4605      	mov	r5, r0
 800c2bc:	2900      	cmp	r1, #0
 800c2be:	d041      	beq.n	800c344 <_free_r+0x8c>
 800c2c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2c4:	1f0c      	subs	r4, r1, #4
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	bfb8      	it	lt
 800c2ca:	18e4      	addlt	r4, r4, r3
 800c2cc:	f000 f8e0 	bl	800c490 <__malloc_lock>
 800c2d0:	4a1d      	ldr	r2, [pc, #116]	@ (800c348 <_free_r+0x90>)
 800c2d2:	6813      	ldr	r3, [r2, #0]
 800c2d4:	b933      	cbnz	r3, 800c2e4 <_free_r+0x2c>
 800c2d6:	6063      	str	r3, [r4, #4]
 800c2d8:	6014      	str	r4, [r2, #0]
 800c2da:	4628      	mov	r0, r5
 800c2dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2e0:	f000 b8dc 	b.w	800c49c <__malloc_unlock>
 800c2e4:	42a3      	cmp	r3, r4
 800c2e6:	d908      	bls.n	800c2fa <_free_r+0x42>
 800c2e8:	6820      	ldr	r0, [r4, #0]
 800c2ea:	1821      	adds	r1, r4, r0
 800c2ec:	428b      	cmp	r3, r1
 800c2ee:	bf01      	itttt	eq
 800c2f0:	6819      	ldreq	r1, [r3, #0]
 800c2f2:	685b      	ldreq	r3, [r3, #4]
 800c2f4:	1809      	addeq	r1, r1, r0
 800c2f6:	6021      	streq	r1, [r4, #0]
 800c2f8:	e7ed      	b.n	800c2d6 <_free_r+0x1e>
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	b10b      	cbz	r3, 800c304 <_free_r+0x4c>
 800c300:	42a3      	cmp	r3, r4
 800c302:	d9fa      	bls.n	800c2fa <_free_r+0x42>
 800c304:	6811      	ldr	r1, [r2, #0]
 800c306:	1850      	adds	r0, r2, r1
 800c308:	42a0      	cmp	r0, r4
 800c30a:	d10b      	bne.n	800c324 <_free_r+0x6c>
 800c30c:	6820      	ldr	r0, [r4, #0]
 800c30e:	4401      	add	r1, r0
 800c310:	1850      	adds	r0, r2, r1
 800c312:	6011      	str	r1, [r2, #0]
 800c314:	4283      	cmp	r3, r0
 800c316:	d1e0      	bne.n	800c2da <_free_r+0x22>
 800c318:	6818      	ldr	r0, [r3, #0]
 800c31a:	685b      	ldr	r3, [r3, #4]
 800c31c:	4408      	add	r0, r1
 800c31e:	6053      	str	r3, [r2, #4]
 800c320:	6010      	str	r0, [r2, #0]
 800c322:	e7da      	b.n	800c2da <_free_r+0x22>
 800c324:	d902      	bls.n	800c32c <_free_r+0x74>
 800c326:	230c      	movs	r3, #12
 800c328:	602b      	str	r3, [r5, #0]
 800c32a:	e7d6      	b.n	800c2da <_free_r+0x22>
 800c32c:	6820      	ldr	r0, [r4, #0]
 800c32e:	1821      	adds	r1, r4, r0
 800c330:	428b      	cmp	r3, r1
 800c332:	bf02      	ittt	eq
 800c334:	6819      	ldreq	r1, [r3, #0]
 800c336:	685b      	ldreq	r3, [r3, #4]
 800c338:	1809      	addeq	r1, r1, r0
 800c33a:	6063      	str	r3, [r4, #4]
 800c33c:	bf08      	it	eq
 800c33e:	6021      	streq	r1, [r4, #0]
 800c340:	6054      	str	r4, [r2, #4]
 800c342:	e7ca      	b.n	800c2da <_free_r+0x22>
 800c344:	bd38      	pop	{r3, r4, r5, pc}
 800c346:	bf00      	nop
 800c348:	20000698 	.word	0x20000698

0800c34c <sbrk_aligned>:
 800c34c:	b570      	push	{r4, r5, r6, lr}
 800c34e:	4e0f      	ldr	r6, [pc, #60]	@ (800c38c <sbrk_aligned+0x40>)
 800c350:	460c      	mov	r4, r1
 800c352:	4605      	mov	r5, r0
 800c354:	6831      	ldr	r1, [r6, #0]
 800c356:	b911      	cbnz	r1, 800c35e <sbrk_aligned+0x12>
 800c358:	f000 fcaa 	bl	800ccb0 <_sbrk_r>
 800c35c:	6030      	str	r0, [r6, #0]
 800c35e:	4621      	mov	r1, r4
 800c360:	4628      	mov	r0, r5
 800c362:	f000 fca5 	bl	800ccb0 <_sbrk_r>
 800c366:	1c43      	adds	r3, r0, #1
 800c368:	d103      	bne.n	800c372 <sbrk_aligned+0x26>
 800c36a:	f04f 34ff 	mov.w	r4, #4294967295
 800c36e:	4620      	mov	r0, r4
 800c370:	bd70      	pop	{r4, r5, r6, pc}
 800c372:	1cc4      	adds	r4, r0, #3
 800c374:	f024 0403 	bic.w	r4, r4, #3
 800c378:	42a0      	cmp	r0, r4
 800c37a:	d0f8      	beq.n	800c36e <sbrk_aligned+0x22>
 800c37c:	1a21      	subs	r1, r4, r0
 800c37e:	4628      	mov	r0, r5
 800c380:	f000 fc96 	bl	800ccb0 <_sbrk_r>
 800c384:	3001      	adds	r0, #1
 800c386:	d1f2      	bne.n	800c36e <sbrk_aligned+0x22>
 800c388:	e7ef      	b.n	800c36a <sbrk_aligned+0x1e>
 800c38a:	bf00      	nop
 800c38c:	20000694 	.word	0x20000694

0800c390 <_malloc_r>:
 800c390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c394:	1ccd      	adds	r5, r1, #3
 800c396:	4606      	mov	r6, r0
 800c398:	f025 0503 	bic.w	r5, r5, #3
 800c39c:	3508      	adds	r5, #8
 800c39e:	2d0c      	cmp	r5, #12
 800c3a0:	bf38      	it	cc
 800c3a2:	250c      	movcc	r5, #12
 800c3a4:	2d00      	cmp	r5, #0
 800c3a6:	db01      	blt.n	800c3ac <_malloc_r+0x1c>
 800c3a8:	42a9      	cmp	r1, r5
 800c3aa:	d904      	bls.n	800c3b6 <_malloc_r+0x26>
 800c3ac:	230c      	movs	r3, #12
 800c3ae:	6033      	str	r3, [r6, #0]
 800c3b0:	2000      	movs	r0, #0
 800c3b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c48c <_malloc_r+0xfc>
 800c3ba:	f000 f869 	bl	800c490 <__malloc_lock>
 800c3be:	f8d8 3000 	ldr.w	r3, [r8]
 800c3c2:	461c      	mov	r4, r3
 800c3c4:	bb44      	cbnz	r4, 800c418 <_malloc_r+0x88>
 800c3c6:	4629      	mov	r1, r5
 800c3c8:	4630      	mov	r0, r6
 800c3ca:	f7ff ffbf 	bl	800c34c <sbrk_aligned>
 800c3ce:	1c43      	adds	r3, r0, #1
 800c3d0:	4604      	mov	r4, r0
 800c3d2:	d158      	bne.n	800c486 <_malloc_r+0xf6>
 800c3d4:	f8d8 4000 	ldr.w	r4, [r8]
 800c3d8:	4627      	mov	r7, r4
 800c3da:	2f00      	cmp	r7, #0
 800c3dc:	d143      	bne.n	800c466 <_malloc_r+0xd6>
 800c3de:	2c00      	cmp	r4, #0
 800c3e0:	d04b      	beq.n	800c47a <_malloc_r+0xea>
 800c3e2:	6823      	ldr	r3, [r4, #0]
 800c3e4:	4639      	mov	r1, r7
 800c3e6:	4630      	mov	r0, r6
 800c3e8:	eb04 0903 	add.w	r9, r4, r3
 800c3ec:	f000 fc60 	bl	800ccb0 <_sbrk_r>
 800c3f0:	4581      	cmp	r9, r0
 800c3f2:	d142      	bne.n	800c47a <_malloc_r+0xea>
 800c3f4:	6821      	ldr	r1, [r4, #0]
 800c3f6:	4630      	mov	r0, r6
 800c3f8:	1a6d      	subs	r5, r5, r1
 800c3fa:	4629      	mov	r1, r5
 800c3fc:	f7ff ffa6 	bl	800c34c <sbrk_aligned>
 800c400:	3001      	adds	r0, #1
 800c402:	d03a      	beq.n	800c47a <_malloc_r+0xea>
 800c404:	6823      	ldr	r3, [r4, #0]
 800c406:	442b      	add	r3, r5
 800c408:	6023      	str	r3, [r4, #0]
 800c40a:	f8d8 3000 	ldr.w	r3, [r8]
 800c40e:	685a      	ldr	r2, [r3, #4]
 800c410:	bb62      	cbnz	r2, 800c46c <_malloc_r+0xdc>
 800c412:	f8c8 7000 	str.w	r7, [r8]
 800c416:	e00f      	b.n	800c438 <_malloc_r+0xa8>
 800c418:	6822      	ldr	r2, [r4, #0]
 800c41a:	1b52      	subs	r2, r2, r5
 800c41c:	d420      	bmi.n	800c460 <_malloc_r+0xd0>
 800c41e:	2a0b      	cmp	r2, #11
 800c420:	d917      	bls.n	800c452 <_malloc_r+0xc2>
 800c422:	1961      	adds	r1, r4, r5
 800c424:	42a3      	cmp	r3, r4
 800c426:	6025      	str	r5, [r4, #0]
 800c428:	bf18      	it	ne
 800c42a:	6059      	strne	r1, [r3, #4]
 800c42c:	6863      	ldr	r3, [r4, #4]
 800c42e:	bf08      	it	eq
 800c430:	f8c8 1000 	streq.w	r1, [r8]
 800c434:	5162      	str	r2, [r4, r5]
 800c436:	604b      	str	r3, [r1, #4]
 800c438:	4630      	mov	r0, r6
 800c43a:	f000 f82f 	bl	800c49c <__malloc_unlock>
 800c43e:	f104 000b 	add.w	r0, r4, #11
 800c442:	1d23      	adds	r3, r4, #4
 800c444:	f020 0007 	bic.w	r0, r0, #7
 800c448:	1ac2      	subs	r2, r0, r3
 800c44a:	bf1c      	itt	ne
 800c44c:	1a1b      	subne	r3, r3, r0
 800c44e:	50a3      	strne	r3, [r4, r2]
 800c450:	e7af      	b.n	800c3b2 <_malloc_r+0x22>
 800c452:	6862      	ldr	r2, [r4, #4]
 800c454:	42a3      	cmp	r3, r4
 800c456:	bf0c      	ite	eq
 800c458:	f8c8 2000 	streq.w	r2, [r8]
 800c45c:	605a      	strne	r2, [r3, #4]
 800c45e:	e7eb      	b.n	800c438 <_malloc_r+0xa8>
 800c460:	4623      	mov	r3, r4
 800c462:	6864      	ldr	r4, [r4, #4]
 800c464:	e7ae      	b.n	800c3c4 <_malloc_r+0x34>
 800c466:	463c      	mov	r4, r7
 800c468:	687f      	ldr	r7, [r7, #4]
 800c46a:	e7b6      	b.n	800c3da <_malloc_r+0x4a>
 800c46c:	461a      	mov	r2, r3
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	42a3      	cmp	r3, r4
 800c472:	d1fb      	bne.n	800c46c <_malloc_r+0xdc>
 800c474:	2300      	movs	r3, #0
 800c476:	6053      	str	r3, [r2, #4]
 800c478:	e7de      	b.n	800c438 <_malloc_r+0xa8>
 800c47a:	230c      	movs	r3, #12
 800c47c:	4630      	mov	r0, r6
 800c47e:	6033      	str	r3, [r6, #0]
 800c480:	f000 f80c 	bl	800c49c <__malloc_unlock>
 800c484:	e794      	b.n	800c3b0 <_malloc_r+0x20>
 800c486:	6005      	str	r5, [r0, #0]
 800c488:	e7d6      	b.n	800c438 <_malloc_r+0xa8>
 800c48a:	bf00      	nop
 800c48c:	20000698 	.word	0x20000698

0800c490 <__malloc_lock>:
 800c490:	4801      	ldr	r0, [pc, #4]	@ (800c498 <__malloc_lock+0x8>)
 800c492:	f7ff bf0e 	b.w	800c2b2 <__retarget_lock_acquire_recursive>
 800c496:	bf00      	nop
 800c498:	20000690 	.word	0x20000690

0800c49c <__malloc_unlock>:
 800c49c:	4801      	ldr	r0, [pc, #4]	@ (800c4a4 <__malloc_unlock+0x8>)
 800c49e:	f7ff bf09 	b.w	800c2b4 <__retarget_lock_release_recursive>
 800c4a2:	bf00      	nop
 800c4a4:	20000690 	.word	0x20000690

0800c4a8 <__sfputc_r>:
 800c4a8:	6893      	ldr	r3, [r2, #8]
 800c4aa:	3b01      	subs	r3, #1
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	6093      	str	r3, [r2, #8]
 800c4b0:	b410      	push	{r4}
 800c4b2:	da08      	bge.n	800c4c6 <__sfputc_r+0x1e>
 800c4b4:	6994      	ldr	r4, [r2, #24]
 800c4b6:	42a3      	cmp	r3, r4
 800c4b8:	db01      	blt.n	800c4be <__sfputc_r+0x16>
 800c4ba:	290a      	cmp	r1, #10
 800c4bc:	d103      	bne.n	800c4c6 <__sfputc_r+0x1e>
 800c4be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4c2:	f7ff bde8 	b.w	800c096 <__swbuf_r>
 800c4c6:	6813      	ldr	r3, [r2, #0]
 800c4c8:	1c58      	adds	r0, r3, #1
 800c4ca:	6010      	str	r0, [r2, #0]
 800c4cc:	4608      	mov	r0, r1
 800c4ce:	7019      	strb	r1, [r3, #0]
 800c4d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4d4:	4770      	bx	lr

0800c4d6 <__sfputs_r>:
 800c4d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4d8:	4606      	mov	r6, r0
 800c4da:	460f      	mov	r7, r1
 800c4dc:	4614      	mov	r4, r2
 800c4de:	18d5      	adds	r5, r2, r3
 800c4e0:	42ac      	cmp	r4, r5
 800c4e2:	d101      	bne.n	800c4e8 <__sfputs_r+0x12>
 800c4e4:	2000      	movs	r0, #0
 800c4e6:	e007      	b.n	800c4f8 <__sfputs_r+0x22>
 800c4e8:	463a      	mov	r2, r7
 800c4ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4ee:	4630      	mov	r0, r6
 800c4f0:	f7ff ffda 	bl	800c4a8 <__sfputc_r>
 800c4f4:	1c43      	adds	r3, r0, #1
 800c4f6:	d1f3      	bne.n	800c4e0 <__sfputs_r+0xa>
 800c4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c4fc <_vfiprintf_r>:
 800c4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c500:	460d      	mov	r5, r1
 800c502:	b09d      	sub	sp, #116	@ 0x74
 800c504:	4614      	mov	r4, r2
 800c506:	4698      	mov	r8, r3
 800c508:	4606      	mov	r6, r0
 800c50a:	b118      	cbz	r0, 800c514 <_vfiprintf_r+0x18>
 800c50c:	6a03      	ldr	r3, [r0, #32]
 800c50e:	b90b      	cbnz	r3, 800c514 <_vfiprintf_r+0x18>
 800c510:	f7ff fcd8 	bl	800bec4 <__sinit>
 800c514:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c516:	07d9      	lsls	r1, r3, #31
 800c518:	d405      	bmi.n	800c526 <_vfiprintf_r+0x2a>
 800c51a:	89ab      	ldrh	r3, [r5, #12]
 800c51c:	059a      	lsls	r2, r3, #22
 800c51e:	d402      	bmi.n	800c526 <_vfiprintf_r+0x2a>
 800c520:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c522:	f7ff fec6 	bl	800c2b2 <__retarget_lock_acquire_recursive>
 800c526:	89ab      	ldrh	r3, [r5, #12]
 800c528:	071b      	lsls	r3, r3, #28
 800c52a:	d501      	bpl.n	800c530 <_vfiprintf_r+0x34>
 800c52c:	692b      	ldr	r3, [r5, #16]
 800c52e:	b99b      	cbnz	r3, 800c558 <_vfiprintf_r+0x5c>
 800c530:	4629      	mov	r1, r5
 800c532:	4630      	mov	r0, r6
 800c534:	f7ff fdee 	bl	800c114 <__swsetup_r>
 800c538:	b170      	cbz	r0, 800c558 <_vfiprintf_r+0x5c>
 800c53a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c53c:	07dc      	lsls	r4, r3, #31
 800c53e:	d504      	bpl.n	800c54a <_vfiprintf_r+0x4e>
 800c540:	f04f 30ff 	mov.w	r0, #4294967295
 800c544:	b01d      	add	sp, #116	@ 0x74
 800c546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c54a:	89ab      	ldrh	r3, [r5, #12]
 800c54c:	0598      	lsls	r0, r3, #22
 800c54e:	d4f7      	bmi.n	800c540 <_vfiprintf_r+0x44>
 800c550:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c552:	f7ff feaf 	bl	800c2b4 <__retarget_lock_release_recursive>
 800c556:	e7f3      	b.n	800c540 <_vfiprintf_r+0x44>
 800c558:	2300      	movs	r3, #0
 800c55a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c55e:	f04f 0901 	mov.w	r9, #1
 800c562:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800c718 <_vfiprintf_r+0x21c>
 800c566:	9309      	str	r3, [sp, #36]	@ 0x24
 800c568:	2320      	movs	r3, #32
 800c56a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c56e:	2330      	movs	r3, #48	@ 0x30
 800c570:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c574:	4623      	mov	r3, r4
 800c576:	469a      	mov	sl, r3
 800c578:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c57c:	b10a      	cbz	r2, 800c582 <_vfiprintf_r+0x86>
 800c57e:	2a25      	cmp	r2, #37	@ 0x25
 800c580:	d1f9      	bne.n	800c576 <_vfiprintf_r+0x7a>
 800c582:	ebba 0b04 	subs.w	fp, sl, r4
 800c586:	d00b      	beq.n	800c5a0 <_vfiprintf_r+0xa4>
 800c588:	465b      	mov	r3, fp
 800c58a:	4622      	mov	r2, r4
 800c58c:	4629      	mov	r1, r5
 800c58e:	4630      	mov	r0, r6
 800c590:	f7ff ffa1 	bl	800c4d6 <__sfputs_r>
 800c594:	3001      	adds	r0, #1
 800c596:	f000 80a7 	beq.w	800c6e8 <_vfiprintf_r+0x1ec>
 800c59a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c59c:	445a      	add	r2, fp
 800c59e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c5a0:	f89a 3000 	ldrb.w	r3, [sl]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	f000 809f 	beq.w	800c6e8 <_vfiprintf_r+0x1ec>
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	f04f 32ff 	mov.w	r2, #4294967295
 800c5b0:	f10a 0a01 	add.w	sl, sl, #1
 800c5b4:	9304      	str	r3, [sp, #16]
 800c5b6:	9307      	str	r3, [sp, #28]
 800c5b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c5bc:	931a      	str	r3, [sp, #104]	@ 0x68
 800c5be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5c2:	4654      	mov	r4, sl
 800c5c4:	2205      	movs	r2, #5
 800c5c6:	4854      	ldr	r0, [pc, #336]	@ (800c718 <_vfiprintf_r+0x21c>)
 800c5c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5cc:	f000 fb80 	bl	800ccd0 <memchr>
 800c5d0:	9a04      	ldr	r2, [sp, #16]
 800c5d2:	b9d8      	cbnz	r0, 800c60c <_vfiprintf_r+0x110>
 800c5d4:	06d1      	lsls	r1, r2, #27
 800c5d6:	bf44      	itt	mi
 800c5d8:	2320      	movmi	r3, #32
 800c5da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c5de:	0713      	lsls	r3, r2, #28
 800c5e0:	bf44      	itt	mi
 800c5e2:	232b      	movmi	r3, #43	@ 0x2b
 800c5e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c5e8:	f89a 3000 	ldrb.w	r3, [sl]
 800c5ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5ee:	d015      	beq.n	800c61c <_vfiprintf_r+0x120>
 800c5f0:	9a07      	ldr	r2, [sp, #28]
 800c5f2:	4654      	mov	r4, sl
 800c5f4:	2000      	movs	r0, #0
 800c5f6:	f04f 0c0a 	mov.w	ip, #10
 800c5fa:	4621      	mov	r1, r4
 800c5fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c600:	3b30      	subs	r3, #48	@ 0x30
 800c602:	2b09      	cmp	r3, #9
 800c604:	d94b      	bls.n	800c69e <_vfiprintf_r+0x1a2>
 800c606:	b1b0      	cbz	r0, 800c636 <_vfiprintf_r+0x13a>
 800c608:	9207      	str	r2, [sp, #28]
 800c60a:	e014      	b.n	800c636 <_vfiprintf_r+0x13a>
 800c60c:	eba0 0308 	sub.w	r3, r0, r8
 800c610:	46a2      	mov	sl, r4
 800c612:	fa09 f303 	lsl.w	r3, r9, r3
 800c616:	4313      	orrs	r3, r2
 800c618:	9304      	str	r3, [sp, #16]
 800c61a:	e7d2      	b.n	800c5c2 <_vfiprintf_r+0xc6>
 800c61c:	9b03      	ldr	r3, [sp, #12]
 800c61e:	1d19      	adds	r1, r3, #4
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	2b00      	cmp	r3, #0
 800c624:	9103      	str	r1, [sp, #12]
 800c626:	bfbb      	ittet	lt
 800c628:	425b      	neglt	r3, r3
 800c62a:	f042 0202 	orrlt.w	r2, r2, #2
 800c62e:	9307      	strge	r3, [sp, #28]
 800c630:	9307      	strlt	r3, [sp, #28]
 800c632:	bfb8      	it	lt
 800c634:	9204      	strlt	r2, [sp, #16]
 800c636:	7823      	ldrb	r3, [r4, #0]
 800c638:	2b2e      	cmp	r3, #46	@ 0x2e
 800c63a:	d10a      	bne.n	800c652 <_vfiprintf_r+0x156>
 800c63c:	7863      	ldrb	r3, [r4, #1]
 800c63e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c640:	d132      	bne.n	800c6a8 <_vfiprintf_r+0x1ac>
 800c642:	9b03      	ldr	r3, [sp, #12]
 800c644:	3402      	adds	r4, #2
 800c646:	1d1a      	adds	r2, r3, #4
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c64e:	9203      	str	r2, [sp, #12]
 800c650:	9305      	str	r3, [sp, #20]
 800c652:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c728 <_vfiprintf_r+0x22c>
 800c656:	2203      	movs	r2, #3
 800c658:	7821      	ldrb	r1, [r4, #0]
 800c65a:	4650      	mov	r0, sl
 800c65c:	f000 fb38 	bl	800ccd0 <memchr>
 800c660:	b138      	cbz	r0, 800c672 <_vfiprintf_r+0x176>
 800c662:	eba0 000a 	sub.w	r0, r0, sl
 800c666:	2240      	movs	r2, #64	@ 0x40
 800c668:	9b04      	ldr	r3, [sp, #16]
 800c66a:	3401      	adds	r4, #1
 800c66c:	4082      	lsls	r2, r0
 800c66e:	4313      	orrs	r3, r2
 800c670:	9304      	str	r3, [sp, #16]
 800c672:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c676:	2206      	movs	r2, #6
 800c678:	4828      	ldr	r0, [pc, #160]	@ (800c71c <_vfiprintf_r+0x220>)
 800c67a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c67e:	f000 fb27 	bl	800ccd0 <memchr>
 800c682:	2800      	cmp	r0, #0
 800c684:	d03f      	beq.n	800c706 <_vfiprintf_r+0x20a>
 800c686:	4b26      	ldr	r3, [pc, #152]	@ (800c720 <_vfiprintf_r+0x224>)
 800c688:	bb1b      	cbnz	r3, 800c6d2 <_vfiprintf_r+0x1d6>
 800c68a:	9b03      	ldr	r3, [sp, #12]
 800c68c:	3307      	adds	r3, #7
 800c68e:	f023 0307 	bic.w	r3, r3, #7
 800c692:	3308      	adds	r3, #8
 800c694:	9303      	str	r3, [sp, #12]
 800c696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c698:	443b      	add	r3, r7
 800c69a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c69c:	e76a      	b.n	800c574 <_vfiprintf_r+0x78>
 800c69e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6a2:	460c      	mov	r4, r1
 800c6a4:	2001      	movs	r0, #1
 800c6a6:	e7a8      	b.n	800c5fa <_vfiprintf_r+0xfe>
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	3401      	adds	r4, #1
 800c6ac:	f04f 0c0a 	mov.w	ip, #10
 800c6b0:	4619      	mov	r1, r3
 800c6b2:	9305      	str	r3, [sp, #20]
 800c6b4:	4620      	mov	r0, r4
 800c6b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6ba:	3a30      	subs	r2, #48	@ 0x30
 800c6bc:	2a09      	cmp	r2, #9
 800c6be:	d903      	bls.n	800c6c8 <_vfiprintf_r+0x1cc>
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d0c6      	beq.n	800c652 <_vfiprintf_r+0x156>
 800c6c4:	9105      	str	r1, [sp, #20]
 800c6c6:	e7c4      	b.n	800c652 <_vfiprintf_r+0x156>
 800c6c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6cc:	4604      	mov	r4, r0
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	e7f0      	b.n	800c6b4 <_vfiprintf_r+0x1b8>
 800c6d2:	ab03      	add	r3, sp, #12
 800c6d4:	462a      	mov	r2, r5
 800c6d6:	a904      	add	r1, sp, #16
 800c6d8:	4630      	mov	r0, r6
 800c6da:	9300      	str	r3, [sp, #0]
 800c6dc:	4b11      	ldr	r3, [pc, #68]	@ (800c724 <_vfiprintf_r+0x228>)
 800c6de:	f3af 8000 	nop.w
 800c6e2:	4607      	mov	r7, r0
 800c6e4:	1c78      	adds	r0, r7, #1
 800c6e6:	d1d6      	bne.n	800c696 <_vfiprintf_r+0x19a>
 800c6e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c6ea:	07d9      	lsls	r1, r3, #31
 800c6ec:	d405      	bmi.n	800c6fa <_vfiprintf_r+0x1fe>
 800c6ee:	89ab      	ldrh	r3, [r5, #12]
 800c6f0:	059a      	lsls	r2, r3, #22
 800c6f2:	d402      	bmi.n	800c6fa <_vfiprintf_r+0x1fe>
 800c6f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c6f6:	f7ff fddd 	bl	800c2b4 <__retarget_lock_release_recursive>
 800c6fa:	89ab      	ldrh	r3, [r5, #12]
 800c6fc:	065b      	lsls	r3, r3, #25
 800c6fe:	f53f af1f 	bmi.w	800c540 <_vfiprintf_r+0x44>
 800c702:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c704:	e71e      	b.n	800c544 <_vfiprintf_r+0x48>
 800c706:	ab03      	add	r3, sp, #12
 800c708:	462a      	mov	r2, r5
 800c70a:	a904      	add	r1, sp, #16
 800c70c:	4630      	mov	r0, r6
 800c70e:	9300      	str	r3, [sp, #0]
 800c710:	4b04      	ldr	r3, [pc, #16]	@ (800c724 <_vfiprintf_r+0x228>)
 800c712:	f000 f87d 	bl	800c810 <_printf_i>
 800c716:	e7e4      	b.n	800c6e2 <_vfiprintf_r+0x1e6>
 800c718:	0800cdec 	.word	0x0800cdec
 800c71c:	0800cdf6 	.word	0x0800cdf6
 800c720:	00000000 	.word	0x00000000
 800c724:	0800c4d7 	.word	0x0800c4d7
 800c728:	0800cdf2 	.word	0x0800cdf2

0800c72c <_printf_common>:
 800c72c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c730:	4616      	mov	r6, r2
 800c732:	4698      	mov	r8, r3
 800c734:	688a      	ldr	r2, [r1, #8]
 800c736:	4607      	mov	r7, r0
 800c738:	690b      	ldr	r3, [r1, #16]
 800c73a:	460c      	mov	r4, r1
 800c73c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c740:	4293      	cmp	r3, r2
 800c742:	bfb8      	it	lt
 800c744:	4613      	movlt	r3, r2
 800c746:	6033      	str	r3, [r6, #0]
 800c748:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c74c:	b10a      	cbz	r2, 800c752 <_printf_common+0x26>
 800c74e:	3301      	adds	r3, #1
 800c750:	6033      	str	r3, [r6, #0]
 800c752:	6823      	ldr	r3, [r4, #0]
 800c754:	0699      	lsls	r1, r3, #26
 800c756:	bf42      	ittt	mi
 800c758:	6833      	ldrmi	r3, [r6, #0]
 800c75a:	3302      	addmi	r3, #2
 800c75c:	6033      	strmi	r3, [r6, #0]
 800c75e:	6825      	ldr	r5, [r4, #0]
 800c760:	f015 0506 	ands.w	r5, r5, #6
 800c764:	d106      	bne.n	800c774 <_printf_common+0x48>
 800c766:	f104 0a19 	add.w	sl, r4, #25
 800c76a:	68e3      	ldr	r3, [r4, #12]
 800c76c:	6832      	ldr	r2, [r6, #0]
 800c76e:	1a9b      	subs	r3, r3, r2
 800c770:	42ab      	cmp	r3, r5
 800c772:	dc2b      	bgt.n	800c7cc <_printf_common+0xa0>
 800c774:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c778:	6822      	ldr	r2, [r4, #0]
 800c77a:	3b00      	subs	r3, #0
 800c77c:	bf18      	it	ne
 800c77e:	2301      	movne	r3, #1
 800c780:	0692      	lsls	r2, r2, #26
 800c782:	d430      	bmi.n	800c7e6 <_printf_common+0xba>
 800c784:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c788:	4641      	mov	r1, r8
 800c78a:	4638      	mov	r0, r7
 800c78c:	47c8      	blx	r9
 800c78e:	3001      	adds	r0, #1
 800c790:	d023      	beq.n	800c7da <_printf_common+0xae>
 800c792:	6823      	ldr	r3, [r4, #0]
 800c794:	341a      	adds	r4, #26
 800c796:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800c79a:	f003 0306 	and.w	r3, r3, #6
 800c79e:	2b04      	cmp	r3, #4
 800c7a0:	bf0a      	itet	eq
 800c7a2:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800c7a6:	2500      	movne	r5, #0
 800c7a8:	6833      	ldreq	r3, [r6, #0]
 800c7aa:	f04f 0600 	mov.w	r6, #0
 800c7ae:	bf08      	it	eq
 800c7b0:	1aed      	subeq	r5, r5, r3
 800c7b2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c7b6:	bf08      	it	eq
 800c7b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	bfc4      	itt	gt
 800c7c0:	1a9b      	subgt	r3, r3, r2
 800c7c2:	18ed      	addgt	r5, r5, r3
 800c7c4:	42b5      	cmp	r5, r6
 800c7c6:	d11a      	bne.n	800c7fe <_printf_common+0xd2>
 800c7c8:	2000      	movs	r0, #0
 800c7ca:	e008      	b.n	800c7de <_printf_common+0xb2>
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	4652      	mov	r2, sl
 800c7d0:	4641      	mov	r1, r8
 800c7d2:	4638      	mov	r0, r7
 800c7d4:	47c8      	blx	r9
 800c7d6:	3001      	adds	r0, #1
 800c7d8:	d103      	bne.n	800c7e2 <_printf_common+0xb6>
 800c7da:	f04f 30ff 	mov.w	r0, #4294967295
 800c7de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7e2:	3501      	adds	r5, #1
 800c7e4:	e7c1      	b.n	800c76a <_printf_common+0x3e>
 800c7e6:	18e1      	adds	r1, r4, r3
 800c7e8:	1c5a      	adds	r2, r3, #1
 800c7ea:	2030      	movs	r0, #48	@ 0x30
 800c7ec:	3302      	adds	r3, #2
 800c7ee:	4422      	add	r2, r4
 800c7f0:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c7f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c7f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c7fc:	e7c2      	b.n	800c784 <_printf_common+0x58>
 800c7fe:	2301      	movs	r3, #1
 800c800:	4622      	mov	r2, r4
 800c802:	4641      	mov	r1, r8
 800c804:	4638      	mov	r0, r7
 800c806:	47c8      	blx	r9
 800c808:	3001      	adds	r0, #1
 800c80a:	d0e6      	beq.n	800c7da <_printf_common+0xae>
 800c80c:	3601      	adds	r6, #1
 800c80e:	e7d9      	b.n	800c7c4 <_printf_common+0x98>

0800c810 <_printf_i>:
 800c810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c814:	7e0f      	ldrb	r7, [r1, #24]
 800c816:	4691      	mov	r9, r2
 800c818:	4680      	mov	r8, r0
 800c81a:	460c      	mov	r4, r1
 800c81c:	2f78      	cmp	r7, #120	@ 0x78
 800c81e:	469a      	mov	sl, r3
 800c820:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c822:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c826:	d807      	bhi.n	800c838 <_printf_i+0x28>
 800c828:	2f62      	cmp	r7, #98	@ 0x62
 800c82a:	d80a      	bhi.n	800c842 <_printf_i+0x32>
 800c82c:	2f00      	cmp	r7, #0
 800c82e:	f000 80d2 	beq.w	800c9d6 <_printf_i+0x1c6>
 800c832:	2f58      	cmp	r7, #88	@ 0x58
 800c834:	f000 80b9 	beq.w	800c9aa <_printf_i+0x19a>
 800c838:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c83c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c840:	e03a      	b.n	800c8b8 <_printf_i+0xa8>
 800c842:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c846:	2b15      	cmp	r3, #21
 800c848:	d8f6      	bhi.n	800c838 <_printf_i+0x28>
 800c84a:	a101      	add	r1, pc, #4	@ (adr r1, 800c850 <_printf_i+0x40>)
 800c84c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c850:	0800c8a9 	.word	0x0800c8a9
 800c854:	0800c8bd 	.word	0x0800c8bd
 800c858:	0800c839 	.word	0x0800c839
 800c85c:	0800c839 	.word	0x0800c839
 800c860:	0800c839 	.word	0x0800c839
 800c864:	0800c839 	.word	0x0800c839
 800c868:	0800c8bd 	.word	0x0800c8bd
 800c86c:	0800c839 	.word	0x0800c839
 800c870:	0800c839 	.word	0x0800c839
 800c874:	0800c839 	.word	0x0800c839
 800c878:	0800c839 	.word	0x0800c839
 800c87c:	0800c9bd 	.word	0x0800c9bd
 800c880:	0800c8e7 	.word	0x0800c8e7
 800c884:	0800c977 	.word	0x0800c977
 800c888:	0800c839 	.word	0x0800c839
 800c88c:	0800c839 	.word	0x0800c839
 800c890:	0800c9df 	.word	0x0800c9df
 800c894:	0800c839 	.word	0x0800c839
 800c898:	0800c8e7 	.word	0x0800c8e7
 800c89c:	0800c839 	.word	0x0800c839
 800c8a0:	0800c839 	.word	0x0800c839
 800c8a4:	0800c97f 	.word	0x0800c97f
 800c8a8:	6833      	ldr	r3, [r6, #0]
 800c8aa:	1d1a      	adds	r2, r3, #4
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	6032      	str	r2, [r6, #0]
 800c8b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c8b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	e09d      	b.n	800c9f8 <_printf_i+0x1e8>
 800c8bc:	6833      	ldr	r3, [r6, #0]
 800c8be:	6820      	ldr	r0, [r4, #0]
 800c8c0:	1d19      	adds	r1, r3, #4
 800c8c2:	6031      	str	r1, [r6, #0]
 800c8c4:	0606      	lsls	r6, r0, #24
 800c8c6:	d501      	bpl.n	800c8cc <_printf_i+0xbc>
 800c8c8:	681d      	ldr	r5, [r3, #0]
 800c8ca:	e003      	b.n	800c8d4 <_printf_i+0xc4>
 800c8cc:	0645      	lsls	r5, r0, #25
 800c8ce:	d5fb      	bpl.n	800c8c8 <_printf_i+0xb8>
 800c8d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c8d4:	2d00      	cmp	r5, #0
 800c8d6:	da03      	bge.n	800c8e0 <_printf_i+0xd0>
 800c8d8:	232d      	movs	r3, #45	@ 0x2d
 800c8da:	426d      	negs	r5, r5
 800c8dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c8e0:	4859      	ldr	r0, [pc, #356]	@ (800ca48 <_printf_i+0x238>)
 800c8e2:	230a      	movs	r3, #10
 800c8e4:	e011      	b.n	800c90a <_printf_i+0xfa>
 800c8e6:	6821      	ldr	r1, [r4, #0]
 800c8e8:	6833      	ldr	r3, [r6, #0]
 800c8ea:	0608      	lsls	r0, r1, #24
 800c8ec:	f853 5b04 	ldr.w	r5, [r3], #4
 800c8f0:	d402      	bmi.n	800c8f8 <_printf_i+0xe8>
 800c8f2:	0649      	lsls	r1, r1, #25
 800c8f4:	bf48      	it	mi
 800c8f6:	b2ad      	uxthmi	r5, r5
 800c8f8:	2f6f      	cmp	r7, #111	@ 0x6f
 800c8fa:	6033      	str	r3, [r6, #0]
 800c8fc:	4852      	ldr	r0, [pc, #328]	@ (800ca48 <_printf_i+0x238>)
 800c8fe:	bf14      	ite	ne
 800c900:	230a      	movne	r3, #10
 800c902:	2308      	moveq	r3, #8
 800c904:	2100      	movs	r1, #0
 800c906:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c90a:	6866      	ldr	r6, [r4, #4]
 800c90c:	2e00      	cmp	r6, #0
 800c90e:	60a6      	str	r6, [r4, #8]
 800c910:	bfa2      	ittt	ge
 800c912:	6821      	ldrge	r1, [r4, #0]
 800c914:	f021 0104 	bicge.w	r1, r1, #4
 800c918:	6021      	strge	r1, [r4, #0]
 800c91a:	b90d      	cbnz	r5, 800c920 <_printf_i+0x110>
 800c91c:	2e00      	cmp	r6, #0
 800c91e:	d04b      	beq.n	800c9b8 <_printf_i+0x1a8>
 800c920:	4616      	mov	r6, r2
 800c922:	fbb5 f1f3 	udiv	r1, r5, r3
 800c926:	fb03 5711 	mls	r7, r3, r1, r5
 800c92a:	5dc7      	ldrb	r7, [r0, r7]
 800c92c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c930:	462f      	mov	r7, r5
 800c932:	460d      	mov	r5, r1
 800c934:	42bb      	cmp	r3, r7
 800c936:	d9f4      	bls.n	800c922 <_printf_i+0x112>
 800c938:	2b08      	cmp	r3, #8
 800c93a:	d10b      	bne.n	800c954 <_printf_i+0x144>
 800c93c:	6823      	ldr	r3, [r4, #0]
 800c93e:	07df      	lsls	r7, r3, #31
 800c940:	d508      	bpl.n	800c954 <_printf_i+0x144>
 800c942:	6923      	ldr	r3, [r4, #16]
 800c944:	6861      	ldr	r1, [r4, #4]
 800c946:	4299      	cmp	r1, r3
 800c948:	bfde      	ittt	le
 800c94a:	2330      	movle	r3, #48	@ 0x30
 800c94c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c950:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c954:	1b92      	subs	r2, r2, r6
 800c956:	6122      	str	r2, [r4, #16]
 800c958:	464b      	mov	r3, r9
 800c95a:	aa03      	add	r2, sp, #12
 800c95c:	4621      	mov	r1, r4
 800c95e:	4640      	mov	r0, r8
 800c960:	f8cd a000 	str.w	sl, [sp]
 800c964:	f7ff fee2 	bl	800c72c <_printf_common>
 800c968:	3001      	adds	r0, #1
 800c96a:	d14a      	bne.n	800ca02 <_printf_i+0x1f2>
 800c96c:	f04f 30ff 	mov.w	r0, #4294967295
 800c970:	b004      	add	sp, #16
 800c972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c976:	6823      	ldr	r3, [r4, #0]
 800c978:	f043 0320 	orr.w	r3, r3, #32
 800c97c:	6023      	str	r3, [r4, #0]
 800c97e:	2778      	movs	r7, #120	@ 0x78
 800c980:	4832      	ldr	r0, [pc, #200]	@ (800ca4c <_printf_i+0x23c>)
 800c982:	6823      	ldr	r3, [r4, #0]
 800c984:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c988:	061f      	lsls	r7, r3, #24
 800c98a:	6831      	ldr	r1, [r6, #0]
 800c98c:	f851 5b04 	ldr.w	r5, [r1], #4
 800c990:	d402      	bmi.n	800c998 <_printf_i+0x188>
 800c992:	065f      	lsls	r7, r3, #25
 800c994:	bf48      	it	mi
 800c996:	b2ad      	uxthmi	r5, r5
 800c998:	6031      	str	r1, [r6, #0]
 800c99a:	07d9      	lsls	r1, r3, #31
 800c99c:	bf44      	itt	mi
 800c99e:	f043 0320 	orrmi.w	r3, r3, #32
 800c9a2:	6023      	strmi	r3, [r4, #0]
 800c9a4:	b11d      	cbz	r5, 800c9ae <_printf_i+0x19e>
 800c9a6:	2310      	movs	r3, #16
 800c9a8:	e7ac      	b.n	800c904 <_printf_i+0xf4>
 800c9aa:	4827      	ldr	r0, [pc, #156]	@ (800ca48 <_printf_i+0x238>)
 800c9ac:	e7e9      	b.n	800c982 <_printf_i+0x172>
 800c9ae:	6823      	ldr	r3, [r4, #0]
 800c9b0:	f023 0320 	bic.w	r3, r3, #32
 800c9b4:	6023      	str	r3, [r4, #0]
 800c9b6:	e7f6      	b.n	800c9a6 <_printf_i+0x196>
 800c9b8:	4616      	mov	r6, r2
 800c9ba:	e7bd      	b.n	800c938 <_printf_i+0x128>
 800c9bc:	6833      	ldr	r3, [r6, #0]
 800c9be:	6825      	ldr	r5, [r4, #0]
 800c9c0:	1d18      	adds	r0, r3, #4
 800c9c2:	6961      	ldr	r1, [r4, #20]
 800c9c4:	6030      	str	r0, [r6, #0]
 800c9c6:	062e      	lsls	r6, r5, #24
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	d501      	bpl.n	800c9d0 <_printf_i+0x1c0>
 800c9cc:	6019      	str	r1, [r3, #0]
 800c9ce:	e002      	b.n	800c9d6 <_printf_i+0x1c6>
 800c9d0:	0668      	lsls	r0, r5, #25
 800c9d2:	d5fb      	bpl.n	800c9cc <_printf_i+0x1bc>
 800c9d4:	8019      	strh	r1, [r3, #0]
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	4616      	mov	r6, r2
 800c9da:	6123      	str	r3, [r4, #16]
 800c9dc:	e7bc      	b.n	800c958 <_printf_i+0x148>
 800c9de:	6833      	ldr	r3, [r6, #0]
 800c9e0:	2100      	movs	r1, #0
 800c9e2:	1d1a      	adds	r2, r3, #4
 800c9e4:	6032      	str	r2, [r6, #0]
 800c9e6:	681e      	ldr	r6, [r3, #0]
 800c9e8:	6862      	ldr	r2, [r4, #4]
 800c9ea:	4630      	mov	r0, r6
 800c9ec:	f000 f970 	bl	800ccd0 <memchr>
 800c9f0:	b108      	cbz	r0, 800c9f6 <_printf_i+0x1e6>
 800c9f2:	1b80      	subs	r0, r0, r6
 800c9f4:	6060      	str	r0, [r4, #4]
 800c9f6:	6863      	ldr	r3, [r4, #4]
 800c9f8:	6123      	str	r3, [r4, #16]
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca00:	e7aa      	b.n	800c958 <_printf_i+0x148>
 800ca02:	6923      	ldr	r3, [r4, #16]
 800ca04:	4632      	mov	r2, r6
 800ca06:	4649      	mov	r1, r9
 800ca08:	4640      	mov	r0, r8
 800ca0a:	47d0      	blx	sl
 800ca0c:	3001      	adds	r0, #1
 800ca0e:	d0ad      	beq.n	800c96c <_printf_i+0x15c>
 800ca10:	6823      	ldr	r3, [r4, #0]
 800ca12:	079b      	lsls	r3, r3, #30
 800ca14:	d413      	bmi.n	800ca3e <_printf_i+0x22e>
 800ca16:	68e0      	ldr	r0, [r4, #12]
 800ca18:	9b03      	ldr	r3, [sp, #12]
 800ca1a:	4298      	cmp	r0, r3
 800ca1c:	bfb8      	it	lt
 800ca1e:	4618      	movlt	r0, r3
 800ca20:	e7a6      	b.n	800c970 <_printf_i+0x160>
 800ca22:	2301      	movs	r3, #1
 800ca24:	4632      	mov	r2, r6
 800ca26:	4649      	mov	r1, r9
 800ca28:	4640      	mov	r0, r8
 800ca2a:	47d0      	blx	sl
 800ca2c:	3001      	adds	r0, #1
 800ca2e:	d09d      	beq.n	800c96c <_printf_i+0x15c>
 800ca30:	3501      	adds	r5, #1
 800ca32:	68e3      	ldr	r3, [r4, #12]
 800ca34:	9903      	ldr	r1, [sp, #12]
 800ca36:	1a5b      	subs	r3, r3, r1
 800ca38:	42ab      	cmp	r3, r5
 800ca3a:	dcf2      	bgt.n	800ca22 <_printf_i+0x212>
 800ca3c:	e7eb      	b.n	800ca16 <_printf_i+0x206>
 800ca3e:	2500      	movs	r5, #0
 800ca40:	f104 0619 	add.w	r6, r4, #25
 800ca44:	e7f5      	b.n	800ca32 <_printf_i+0x222>
 800ca46:	bf00      	nop
 800ca48:	0800cdfd 	.word	0x0800cdfd
 800ca4c:	0800ce0e 	.word	0x0800ce0e

0800ca50 <__sflush_r>:
 800ca50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ca54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca58:	0716      	lsls	r6, r2, #28
 800ca5a:	4605      	mov	r5, r0
 800ca5c:	460c      	mov	r4, r1
 800ca5e:	d454      	bmi.n	800cb0a <__sflush_r+0xba>
 800ca60:	684b      	ldr	r3, [r1, #4]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	dc02      	bgt.n	800ca6c <__sflush_r+0x1c>
 800ca66:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	dd48      	ble.n	800cafe <__sflush_r+0xae>
 800ca6c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ca6e:	2e00      	cmp	r6, #0
 800ca70:	d045      	beq.n	800cafe <__sflush_r+0xae>
 800ca72:	2300      	movs	r3, #0
 800ca74:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ca78:	682f      	ldr	r7, [r5, #0]
 800ca7a:	6a21      	ldr	r1, [r4, #32]
 800ca7c:	602b      	str	r3, [r5, #0]
 800ca7e:	d030      	beq.n	800cae2 <__sflush_r+0x92>
 800ca80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ca82:	89a3      	ldrh	r3, [r4, #12]
 800ca84:	0759      	lsls	r1, r3, #29
 800ca86:	d505      	bpl.n	800ca94 <__sflush_r+0x44>
 800ca88:	6863      	ldr	r3, [r4, #4]
 800ca8a:	1ad2      	subs	r2, r2, r3
 800ca8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ca8e:	b10b      	cbz	r3, 800ca94 <__sflush_r+0x44>
 800ca90:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ca92:	1ad2      	subs	r2, r2, r3
 800ca94:	2300      	movs	r3, #0
 800ca96:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ca98:	6a21      	ldr	r1, [r4, #32]
 800ca9a:	4628      	mov	r0, r5
 800ca9c:	47b0      	blx	r6
 800ca9e:	1c43      	adds	r3, r0, #1
 800caa0:	89a3      	ldrh	r3, [r4, #12]
 800caa2:	d106      	bne.n	800cab2 <__sflush_r+0x62>
 800caa4:	6829      	ldr	r1, [r5, #0]
 800caa6:	291d      	cmp	r1, #29
 800caa8:	d82b      	bhi.n	800cb02 <__sflush_r+0xb2>
 800caaa:	4a2a      	ldr	r2, [pc, #168]	@ (800cb54 <__sflush_r+0x104>)
 800caac:	410a      	asrs	r2, r1
 800caae:	07d6      	lsls	r6, r2, #31
 800cab0:	d427      	bmi.n	800cb02 <__sflush_r+0xb2>
 800cab2:	2200      	movs	r2, #0
 800cab4:	04d9      	lsls	r1, r3, #19
 800cab6:	6062      	str	r2, [r4, #4]
 800cab8:	6922      	ldr	r2, [r4, #16]
 800caba:	6022      	str	r2, [r4, #0]
 800cabc:	d504      	bpl.n	800cac8 <__sflush_r+0x78>
 800cabe:	1c42      	adds	r2, r0, #1
 800cac0:	d101      	bne.n	800cac6 <__sflush_r+0x76>
 800cac2:	682b      	ldr	r3, [r5, #0]
 800cac4:	b903      	cbnz	r3, 800cac8 <__sflush_r+0x78>
 800cac6:	6560      	str	r0, [r4, #84]	@ 0x54
 800cac8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800caca:	602f      	str	r7, [r5, #0]
 800cacc:	b1b9      	cbz	r1, 800cafe <__sflush_r+0xae>
 800cace:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cad2:	4299      	cmp	r1, r3
 800cad4:	d002      	beq.n	800cadc <__sflush_r+0x8c>
 800cad6:	4628      	mov	r0, r5
 800cad8:	f7ff fbee 	bl	800c2b8 <_free_r>
 800cadc:	2300      	movs	r3, #0
 800cade:	6363      	str	r3, [r4, #52]	@ 0x34
 800cae0:	e00d      	b.n	800cafe <__sflush_r+0xae>
 800cae2:	2301      	movs	r3, #1
 800cae4:	4628      	mov	r0, r5
 800cae6:	47b0      	blx	r6
 800cae8:	4602      	mov	r2, r0
 800caea:	1c50      	adds	r0, r2, #1
 800caec:	d1c9      	bne.n	800ca82 <__sflush_r+0x32>
 800caee:	682b      	ldr	r3, [r5, #0]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d0c6      	beq.n	800ca82 <__sflush_r+0x32>
 800caf4:	2b1d      	cmp	r3, #29
 800caf6:	d001      	beq.n	800cafc <__sflush_r+0xac>
 800caf8:	2b16      	cmp	r3, #22
 800cafa:	d11d      	bne.n	800cb38 <__sflush_r+0xe8>
 800cafc:	602f      	str	r7, [r5, #0]
 800cafe:	2000      	movs	r0, #0
 800cb00:	e021      	b.n	800cb46 <__sflush_r+0xf6>
 800cb02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb06:	b21b      	sxth	r3, r3
 800cb08:	e01a      	b.n	800cb40 <__sflush_r+0xf0>
 800cb0a:	690f      	ldr	r7, [r1, #16]
 800cb0c:	2f00      	cmp	r7, #0
 800cb0e:	d0f6      	beq.n	800cafe <__sflush_r+0xae>
 800cb10:	0793      	lsls	r3, r2, #30
 800cb12:	680e      	ldr	r6, [r1, #0]
 800cb14:	600f      	str	r7, [r1, #0]
 800cb16:	bf0c      	ite	eq
 800cb18:	694b      	ldreq	r3, [r1, #20]
 800cb1a:	2300      	movne	r3, #0
 800cb1c:	eba6 0807 	sub.w	r8, r6, r7
 800cb20:	608b      	str	r3, [r1, #8]
 800cb22:	f1b8 0f00 	cmp.w	r8, #0
 800cb26:	ddea      	ble.n	800cafe <__sflush_r+0xae>
 800cb28:	4643      	mov	r3, r8
 800cb2a:	463a      	mov	r2, r7
 800cb2c:	6a21      	ldr	r1, [r4, #32]
 800cb2e:	4628      	mov	r0, r5
 800cb30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cb32:	47b0      	blx	r6
 800cb34:	2800      	cmp	r0, #0
 800cb36:	dc08      	bgt.n	800cb4a <__sflush_r+0xfa>
 800cb38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb40:	f04f 30ff 	mov.w	r0, #4294967295
 800cb44:	81a3      	strh	r3, [r4, #12]
 800cb46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb4a:	4407      	add	r7, r0
 800cb4c:	eba8 0800 	sub.w	r8, r8, r0
 800cb50:	e7e7      	b.n	800cb22 <__sflush_r+0xd2>
 800cb52:	bf00      	nop
 800cb54:	dfbffffe 	.word	0xdfbffffe

0800cb58 <_fflush_r>:
 800cb58:	b538      	push	{r3, r4, r5, lr}
 800cb5a:	690b      	ldr	r3, [r1, #16]
 800cb5c:	4605      	mov	r5, r0
 800cb5e:	460c      	mov	r4, r1
 800cb60:	b913      	cbnz	r3, 800cb68 <_fflush_r+0x10>
 800cb62:	2500      	movs	r5, #0
 800cb64:	4628      	mov	r0, r5
 800cb66:	bd38      	pop	{r3, r4, r5, pc}
 800cb68:	b118      	cbz	r0, 800cb72 <_fflush_r+0x1a>
 800cb6a:	6a03      	ldr	r3, [r0, #32]
 800cb6c:	b90b      	cbnz	r3, 800cb72 <_fflush_r+0x1a>
 800cb6e:	f7ff f9a9 	bl	800bec4 <__sinit>
 800cb72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d0f3      	beq.n	800cb62 <_fflush_r+0xa>
 800cb7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cb7c:	07d0      	lsls	r0, r2, #31
 800cb7e:	d404      	bmi.n	800cb8a <_fflush_r+0x32>
 800cb80:	0599      	lsls	r1, r3, #22
 800cb82:	d402      	bmi.n	800cb8a <_fflush_r+0x32>
 800cb84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb86:	f7ff fb94 	bl	800c2b2 <__retarget_lock_acquire_recursive>
 800cb8a:	4628      	mov	r0, r5
 800cb8c:	4621      	mov	r1, r4
 800cb8e:	f7ff ff5f 	bl	800ca50 <__sflush_r>
 800cb92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cb94:	4605      	mov	r5, r0
 800cb96:	07da      	lsls	r2, r3, #31
 800cb98:	d4e4      	bmi.n	800cb64 <_fflush_r+0xc>
 800cb9a:	89a3      	ldrh	r3, [r4, #12]
 800cb9c:	059b      	lsls	r3, r3, #22
 800cb9e:	d4e1      	bmi.n	800cb64 <_fflush_r+0xc>
 800cba0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cba2:	f7ff fb87 	bl	800c2b4 <__retarget_lock_release_recursive>
 800cba6:	e7dd      	b.n	800cb64 <_fflush_r+0xc>

0800cba8 <__swhatbuf_r>:
 800cba8:	b570      	push	{r4, r5, r6, lr}
 800cbaa:	460c      	mov	r4, r1
 800cbac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbb0:	b096      	sub	sp, #88	@ 0x58
 800cbb2:	4615      	mov	r5, r2
 800cbb4:	2900      	cmp	r1, #0
 800cbb6:	461e      	mov	r6, r3
 800cbb8:	da0c      	bge.n	800cbd4 <__swhatbuf_r+0x2c>
 800cbba:	89a3      	ldrh	r3, [r4, #12]
 800cbbc:	2100      	movs	r1, #0
 800cbbe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cbc2:	bf14      	ite	ne
 800cbc4:	2340      	movne	r3, #64	@ 0x40
 800cbc6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cbca:	2000      	movs	r0, #0
 800cbcc:	6031      	str	r1, [r6, #0]
 800cbce:	602b      	str	r3, [r5, #0]
 800cbd0:	b016      	add	sp, #88	@ 0x58
 800cbd2:	bd70      	pop	{r4, r5, r6, pc}
 800cbd4:	466a      	mov	r2, sp
 800cbd6:	f000 f849 	bl	800cc6c <_fstat_r>
 800cbda:	2800      	cmp	r0, #0
 800cbdc:	dbed      	blt.n	800cbba <__swhatbuf_r+0x12>
 800cbde:	9901      	ldr	r1, [sp, #4]
 800cbe0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cbe4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cbe8:	4259      	negs	r1, r3
 800cbea:	4159      	adcs	r1, r3
 800cbec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cbf0:	e7eb      	b.n	800cbca <__swhatbuf_r+0x22>

0800cbf2 <__smakebuf_r>:
 800cbf2:	898b      	ldrh	r3, [r1, #12]
 800cbf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbf6:	079d      	lsls	r5, r3, #30
 800cbf8:	4606      	mov	r6, r0
 800cbfa:	460c      	mov	r4, r1
 800cbfc:	d507      	bpl.n	800cc0e <__smakebuf_r+0x1c>
 800cbfe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cc02:	6023      	str	r3, [r4, #0]
 800cc04:	6123      	str	r3, [r4, #16]
 800cc06:	2301      	movs	r3, #1
 800cc08:	6163      	str	r3, [r4, #20]
 800cc0a:	b003      	add	sp, #12
 800cc0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc0e:	ab01      	add	r3, sp, #4
 800cc10:	466a      	mov	r2, sp
 800cc12:	f7ff ffc9 	bl	800cba8 <__swhatbuf_r>
 800cc16:	9f00      	ldr	r7, [sp, #0]
 800cc18:	4605      	mov	r5, r0
 800cc1a:	4630      	mov	r0, r6
 800cc1c:	4639      	mov	r1, r7
 800cc1e:	f7ff fbb7 	bl	800c390 <_malloc_r>
 800cc22:	b948      	cbnz	r0, 800cc38 <__smakebuf_r+0x46>
 800cc24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc28:	059a      	lsls	r2, r3, #22
 800cc2a:	d4ee      	bmi.n	800cc0a <__smakebuf_r+0x18>
 800cc2c:	f023 0303 	bic.w	r3, r3, #3
 800cc30:	f043 0302 	orr.w	r3, r3, #2
 800cc34:	81a3      	strh	r3, [r4, #12]
 800cc36:	e7e2      	b.n	800cbfe <__smakebuf_r+0xc>
 800cc38:	89a3      	ldrh	r3, [r4, #12]
 800cc3a:	6020      	str	r0, [r4, #0]
 800cc3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc40:	81a3      	strh	r3, [r4, #12]
 800cc42:	9b01      	ldr	r3, [sp, #4]
 800cc44:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cc48:	b15b      	cbz	r3, 800cc62 <__smakebuf_r+0x70>
 800cc4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc4e:	4630      	mov	r0, r6
 800cc50:	f000 f81e 	bl	800cc90 <_isatty_r>
 800cc54:	b128      	cbz	r0, 800cc62 <__smakebuf_r+0x70>
 800cc56:	89a3      	ldrh	r3, [r4, #12]
 800cc58:	f023 0303 	bic.w	r3, r3, #3
 800cc5c:	f043 0301 	orr.w	r3, r3, #1
 800cc60:	81a3      	strh	r3, [r4, #12]
 800cc62:	89a3      	ldrh	r3, [r4, #12]
 800cc64:	431d      	orrs	r5, r3
 800cc66:	81a5      	strh	r5, [r4, #12]
 800cc68:	e7cf      	b.n	800cc0a <__smakebuf_r+0x18>
	...

0800cc6c <_fstat_r>:
 800cc6c:	b538      	push	{r3, r4, r5, lr}
 800cc6e:	2300      	movs	r3, #0
 800cc70:	4d06      	ldr	r5, [pc, #24]	@ (800cc8c <_fstat_r+0x20>)
 800cc72:	4604      	mov	r4, r0
 800cc74:	4608      	mov	r0, r1
 800cc76:	4611      	mov	r1, r2
 800cc78:	602b      	str	r3, [r5, #0]
 800cc7a:	f7f5 f872 	bl	8001d62 <_fstat>
 800cc7e:	1c43      	adds	r3, r0, #1
 800cc80:	d102      	bne.n	800cc88 <_fstat_r+0x1c>
 800cc82:	682b      	ldr	r3, [r5, #0]
 800cc84:	b103      	cbz	r3, 800cc88 <_fstat_r+0x1c>
 800cc86:	6023      	str	r3, [r4, #0]
 800cc88:	bd38      	pop	{r3, r4, r5, pc}
 800cc8a:	bf00      	nop
 800cc8c:	2000068c 	.word	0x2000068c

0800cc90 <_isatty_r>:
 800cc90:	b538      	push	{r3, r4, r5, lr}
 800cc92:	2300      	movs	r3, #0
 800cc94:	4d05      	ldr	r5, [pc, #20]	@ (800ccac <_isatty_r+0x1c>)
 800cc96:	4604      	mov	r4, r0
 800cc98:	4608      	mov	r0, r1
 800cc9a:	602b      	str	r3, [r5, #0]
 800cc9c:	f7f5 f871 	bl	8001d82 <_isatty>
 800cca0:	1c43      	adds	r3, r0, #1
 800cca2:	d102      	bne.n	800ccaa <_isatty_r+0x1a>
 800cca4:	682b      	ldr	r3, [r5, #0]
 800cca6:	b103      	cbz	r3, 800ccaa <_isatty_r+0x1a>
 800cca8:	6023      	str	r3, [r4, #0]
 800ccaa:	bd38      	pop	{r3, r4, r5, pc}
 800ccac:	2000068c 	.word	0x2000068c

0800ccb0 <_sbrk_r>:
 800ccb0:	b538      	push	{r3, r4, r5, lr}
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	4d05      	ldr	r5, [pc, #20]	@ (800cccc <_sbrk_r+0x1c>)
 800ccb6:	4604      	mov	r4, r0
 800ccb8:	4608      	mov	r0, r1
 800ccba:	602b      	str	r3, [r5, #0]
 800ccbc:	f7f5 f87a 	bl	8001db4 <_sbrk>
 800ccc0:	1c43      	adds	r3, r0, #1
 800ccc2:	d102      	bne.n	800ccca <_sbrk_r+0x1a>
 800ccc4:	682b      	ldr	r3, [r5, #0]
 800ccc6:	b103      	cbz	r3, 800ccca <_sbrk_r+0x1a>
 800ccc8:	6023      	str	r3, [r4, #0]
 800ccca:	bd38      	pop	{r3, r4, r5, pc}
 800cccc:	2000068c 	.word	0x2000068c

0800ccd0 <memchr>:
 800ccd0:	b2c9      	uxtb	r1, r1
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	4402      	add	r2, r0
 800ccd6:	b510      	push	{r4, lr}
 800ccd8:	4293      	cmp	r3, r2
 800ccda:	4618      	mov	r0, r3
 800ccdc:	d101      	bne.n	800cce2 <memchr+0x12>
 800ccde:	2000      	movs	r0, #0
 800cce0:	e003      	b.n	800ccea <memchr+0x1a>
 800cce2:	7804      	ldrb	r4, [r0, #0]
 800cce4:	3301      	adds	r3, #1
 800cce6:	428c      	cmp	r4, r1
 800cce8:	d1f6      	bne.n	800ccd8 <memchr+0x8>
 800ccea:	bd10      	pop	{r4, pc}

0800ccec <_init>:
 800ccec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccee:	bf00      	nop
 800ccf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccf2:	bc08      	pop	{r3}
 800ccf4:	469e      	mov	lr, r3
 800ccf6:	4770      	bx	lr

0800ccf8 <_fini>:
 800ccf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccfa:	bf00      	nop
 800ccfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccfe:	bc08      	pop	{r3}
 800cd00:	469e      	mov	lr, r3
 800cd02:	4770      	bx	lr
